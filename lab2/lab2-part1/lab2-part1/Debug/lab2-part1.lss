
lab2-part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800100  0000073c  000007d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000073c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000022d  00800154  00800154  00000824  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000824  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000854  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000894  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010e2  00000000  00000000  00000934  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b3c  00000000  00000000  00001a16  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000064f  00000000  00000000  00002552  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000164  00000000  00000000  00002ba4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ce  00000000  00000000  00002d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000717  00000000  00000000  000032d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  000039ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	92 00       	.word	0x0092	; ????
  5e:	74 00       	.word	0x0074	; ????
  60:	77 00       	.word	0x0077	; ????
  62:	7a 00       	.word	0x007a	; ????
  64:	7d 00       	.word	0x007d	; ????
  66:	80 00       	.word	0x0080	; ????
  68:	83 00       	.word	0x0083	; ????
  6a:	86 00       	.word	0x0086	; ????
  6c:	89 00       	.word	0x0089	; ????
  6e:	8c 00       	.word	0x008c	; ????

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ec e3       	ldi	r30, 0x3C	; 60
  84:	f7 e0       	ldi	r31, 0x07	; 7
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a4 35       	cpi	r26, 0x54	; 84
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	23 e0       	ldi	r18, 0x03	; 3
  94:	a4 e5       	ldi	r26, 0x54	; 84
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a1 38       	cpi	r26, 0x81	; 129
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 0a 02 	call	0x414	; 0x414 <main>
  a6:	0c 94 9c 03 	jmp	0x738	; 0x738 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <init>:
#include <stdbool.h>
#include <util/delay.h>

void init() {
	//Clock Prescale Register "maximum speed"
	CLKPR = 0b10000000; //Clock Prescaler Change Enable
  ae:	e1 e6       	ldi	r30, 0x61	; 97
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 e8       	ldi	r24, 0x80	; 128
  b4:	80 83       	st	Z, r24
	CLKPR = 0b00000000; //set 0 for sysclock
  b6:	10 82       	st	Z, r1
  b8:	08 95       	ret

000000ba <LCD_init>:
}

void LCD_init(){
	//LCD(Contrast Control Register), LCD(Display Configuration)(000): 300 Î¼s, LCD(Contrast Control)(1111): 3.35 V
	LCDCCR = (0 << LCDDC0) | (0 << LCDDC1) | (0 << LCDDC2) | (1 << LCDCC0) | (1 << LCDCC1) | (1 << LCDCC2) | (1 << LCDCC3);
  ba:	8f e0       	ldi	r24, 0x0F	; 15
  bc:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__DATA_REGION_ORIGIN__+0x87>
	//LCDCS: asynchronous clock, LCDMUX(11): D=1/4, B=1/3, LCD(Port Mask): 25 segments
	LCDCRB = (1 << LCDCS) | (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM2) | (1 << LCDPM1) | (1 << LCDPM0);
  c0:	87 eb       	ldi	r24, 0xB7	; 183
  c2:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
	//LCD(Clock Divide)(111): (D=8) 32Hz
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);
  c6:	87 e0       	ldi	r24, 0x07	; 7
  c8:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__DATA_REGION_ORIGIN__+0x86>
	//LCD(Control and StatusRegister A), LCD(Enable): True, LCD(Low Power Waveform): True, (no frame interrupt, no blanking)
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
  cc:	80 ec       	ldi	r24, 0xC0	; 192
  ce:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
  d2:	08 95       	ret

000000d4 <getSegmentForChar>:
int nine[] = {0b0001, 0b0101, 0b1011, 0b0001};
int none[] = {0b0000, 0b0000, 0b0000, 0b0000};

//returns wall of data based on char input ('0' = 48 (char))
int* getSegmentForChar(char ch) {
	switch (ch) {
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	fc 01       	movw	r30, r24
  d8:	f0 97       	sbiw	r30, 0x30	; 48
  da:	ea 30       	cpi	r30, 0x0A	; 10
  dc:	f1 05       	cpc	r31, r1
  de:	f8 f4       	brcc	.+62     	; 0x11e <getSegmentForChar+0x4a>
  e0:	e2 5d       	subi	r30, 0xD2	; 210
  e2:	ff 4f       	sbci	r31, 0xFF	; 255
  e4:	0c 94 1f 03 	jmp	0x63e	; 0x63e <__tablejump2__>
		case '0': return zero;
		case '1': return one;
  e8:	80 e4       	ldi	r24, 0x40	; 64
  ea:	91 e0       	ldi	r25, 0x01	; 1
  ec:	08 95       	ret
		case '2': return two;
  ee:	88 e3       	ldi	r24, 0x38	; 56
  f0:	91 e0       	ldi	r25, 0x01	; 1
  f2:	08 95       	ret
		case '3': return three;
  f4:	80 e3       	ldi	r24, 0x30	; 48
  f6:	91 e0       	ldi	r25, 0x01	; 1
  f8:	08 95       	ret
		case '4': return four;
  fa:	88 e2       	ldi	r24, 0x28	; 40
  fc:	91 e0       	ldi	r25, 0x01	; 1
  fe:	08 95       	ret
		case '5': return five;
 100:	80 e2       	ldi	r24, 0x20	; 32
 102:	91 e0       	ldi	r25, 0x01	; 1
 104:	08 95       	ret
		case '6': return six;
 106:	88 e1       	ldi	r24, 0x18	; 24
 108:	91 e0       	ldi	r25, 0x01	; 1
 10a:	08 95       	ret
		case '7': return seven;
 10c:	80 e1       	ldi	r24, 0x10	; 16
 10e:	91 e0       	ldi	r25, 0x01	; 1
 110:	08 95       	ret
		case '8': return eight;
 112:	88 e0       	ldi	r24, 0x08	; 8
 114:	91 e0       	ldi	r25, 0x01	; 1
 116:	08 95       	ret
		case '9': return nine;
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	91 e0       	ldi	r25, 0x01	; 1
 11c:	08 95       	ret
		default:  return none;
 11e:	84 e5       	ldi	r24, 0x54	; 84
 120:	91 e0       	ldi	r25, 0x01	; 1
 122:	08 95       	ret
int none[] = {0b0000, 0b0000, 0b0000, 0b0000};

//returns wall of data based on char input ('0' = 48 (char))
int* getSegmentForChar(char ch) {
	switch (ch) {
		case '0': return zero;
 124:	88 e4       	ldi	r24, 0x48	; 72
 126:	91 e0       	ldi	r25, 0x01	; 1
		case '7': return seven;
		case '8': return eight;
		case '9': return nine;
		default:  return none;
	}
}
 128:	08 95       	ret

0000012a <writeChar>:

void writeChar(char ch, uint8_t pos) {
 12a:	cf 93       	push	r28
	//check if outside range
	if (pos > 4 || pos < 0) return;
 12c:	65 30       	cpi	r22, 0x05	; 5
 12e:	08 f0       	brcs	.+2      	; 0x132 <writeChar+0x8>
 130:	e4 c0       	rjmp	.+456    	; 0x2fa <writeChar+0x1d0>
 132:	c6 2f       	mov	r28, r22

	//get correct char data
	int* segment = getSegmentForChar(ch);
 134:	0e 94 6a 00 	call	0xd4	; 0xd4 <getSegmentForChar>
 138:	fc 01       	movw	r30, r24
	
	//chose position
	switch (pos) {
 13a:	c2 30       	cpi	r28, 0x02	; 2
 13c:	09 f4       	brne	.+2      	; 0x140 <writeChar+0x16>
 13e:	67 c0       	rjmp	.+206    	; 0x20e <writeChar+0xe4>
 140:	28 f4       	brcc	.+10     	; 0x14c <writeChar+0x22>
 142:	cc 23       	and	r28, r28
 144:	51 f0       	breq	.+20     	; 0x15a <writeChar+0x30>
 146:	c1 30       	cpi	r28, 0x01	; 1
 148:	29 f1       	breq	.+74     	; 0x194 <writeChar+0x6a>
 14a:	d7 c0       	rjmp	.+430    	; 0x2fa <writeChar+0x1d0>
 14c:	c3 30       	cpi	r28, 0x03	; 3
 14e:	09 f4       	brne	.+2      	; 0x152 <writeChar+0x28>
 150:	7b c0       	rjmp	.+246    	; 0x248 <writeChar+0x11e>
 152:	c4 30       	cpi	r28, 0x04	; 4
 154:	09 f4       	brne	.+2      	; 0x158 <writeChar+0x2e>
 156:	b5 c0       	rjmp	.+362    	; 0x2c2 <writeChar+0x198>
 158:	d0 c0       	rjmp	.+416    	; 0x2fa <writeChar+0x1d0>
		case 0:
		//segment start at 0, 5, 10, 15, higher 4 bits.
		//(LCDDR0 & 0xF0) clears the segment before writing
		LCDDR0 = (LCDDR0 & 0xF0) | segment[0];
 15a:	ac ee       	ldi	r26, 0xEC	; 236
 15c:	b0 e0       	ldi	r27, 0x00	; 0
 15e:	8c 91       	ld	r24, X
 160:	80 7f       	andi	r24, 0xF0	; 240
 162:	90 81       	ld	r25, Z
 164:	89 2b       	or	r24, r25
 166:	8c 93       	st	X, r24
		LCDDR5 = (LCDDR5 & 0xF0) | segment[1];
 168:	a1 ef       	ldi	r26, 0xF1	; 241
 16a:	b0 e0       	ldi	r27, 0x00	; 0
 16c:	8c 91       	ld	r24, X
 16e:	80 7f       	andi	r24, 0xF0	; 240
 170:	92 81       	ldd	r25, Z+2	; 0x02
 172:	89 2b       	or	r24, r25
 174:	8c 93       	st	X, r24
		LCDDR10 = (LCDDR10 & 0xF0) | segment[2];
 176:	a6 ef       	ldi	r26, 0xF6	; 246
 178:	b0 e0       	ldi	r27, 0x00	; 0
 17a:	8c 91       	ld	r24, X
 17c:	80 7f       	andi	r24, 0xF0	; 240
 17e:	94 81       	ldd	r25, Z+4	; 0x04
 180:	89 2b       	or	r24, r25
 182:	8c 93       	st	X, r24
		LCDDR15 = (LCDDR15 & 0xF0) | segment[3];
 184:	ab ef       	ldi	r26, 0xFB	; 251
 186:	b0 e0       	ldi	r27, 0x00	; 0
 188:	8c 91       	ld	r24, X
 18a:	80 7f       	andi	r24, 0xF0	; 240
 18c:	96 81       	ldd	r25, Z+6	; 0x06
 18e:	89 2b       	or	r24, r25
 190:	8c 93       	st	X, r24
		break;
 192:	b3 c0       	rjmp	.+358    	; 0x2fa <writeChar+0x1d0>
		case 1:
		//same segment just lower 4 bits
		LCDDR0 = (LCDDR0 & 0x0F) | (segment[0] << 4);
 194:	ac ee       	ldi	r26, 0xEC	; 236
 196:	b0 e0       	ldi	r27, 0x00	; 0
 198:	2c 91       	ld	r18, X
 19a:	80 81       	ld	r24, Z
 19c:	91 81       	ldd	r25, Z+1	; 0x01
 19e:	82 95       	swap	r24
 1a0:	92 95       	swap	r25
 1a2:	90 7f       	andi	r25, 0xF0	; 240
 1a4:	98 27       	eor	r25, r24
 1a6:	80 7f       	andi	r24, 0xF0	; 240
 1a8:	98 27       	eor	r25, r24
 1aa:	92 2f       	mov	r25, r18
 1ac:	9f 70       	andi	r25, 0x0F	; 15
 1ae:	89 2b       	or	r24, r25
 1b0:	8c 93       	st	X, r24
		LCDDR5 = (LCDDR5 & 0x0F) | (segment[1] << 4);
 1b2:	a1 ef       	ldi	r26, 0xF1	; 241
 1b4:	b0 e0       	ldi	r27, 0x00	; 0
 1b6:	2c 91       	ld	r18, X
 1b8:	82 81       	ldd	r24, Z+2	; 0x02
 1ba:	93 81       	ldd	r25, Z+3	; 0x03
 1bc:	82 95       	swap	r24
 1be:	92 95       	swap	r25
 1c0:	90 7f       	andi	r25, 0xF0	; 240
 1c2:	98 27       	eor	r25, r24
 1c4:	80 7f       	andi	r24, 0xF0	; 240
 1c6:	98 27       	eor	r25, r24
 1c8:	92 2f       	mov	r25, r18
 1ca:	9f 70       	andi	r25, 0x0F	; 15
 1cc:	89 2b       	or	r24, r25
 1ce:	8c 93       	st	X, r24
		LCDDR10 = (LCDDR10 & 0x0F) | (segment[2] << 4);
 1d0:	a6 ef       	ldi	r26, 0xF6	; 246
 1d2:	b0 e0       	ldi	r27, 0x00	; 0
 1d4:	2c 91       	ld	r18, X
 1d6:	84 81       	ldd	r24, Z+4	; 0x04
 1d8:	95 81       	ldd	r25, Z+5	; 0x05
 1da:	82 95       	swap	r24
 1dc:	92 95       	swap	r25
 1de:	90 7f       	andi	r25, 0xF0	; 240
 1e0:	98 27       	eor	r25, r24
 1e2:	80 7f       	andi	r24, 0xF0	; 240
 1e4:	98 27       	eor	r25, r24
 1e6:	92 2f       	mov	r25, r18
 1e8:	9f 70       	andi	r25, 0x0F	; 15
 1ea:	89 2b       	or	r24, r25
 1ec:	8c 93       	st	X, r24
		LCDDR15 = (LCDDR15 & 0x0F) | (segment[3] << 4);
 1ee:	ab ef       	ldi	r26, 0xFB	; 251
 1f0:	b0 e0       	ldi	r27, 0x00	; 0
 1f2:	2c 91       	ld	r18, X
 1f4:	86 81       	ldd	r24, Z+6	; 0x06
 1f6:	97 81       	ldd	r25, Z+7	; 0x07
 1f8:	82 95       	swap	r24
 1fa:	92 95       	swap	r25
 1fc:	90 7f       	andi	r25, 0xF0	; 240
 1fe:	98 27       	eor	r25, r24
 200:	80 7f       	andi	r24, 0xF0	; 240
 202:	98 27       	eor	r25, r24
 204:	92 2f       	mov	r25, r18
 206:	9f 70       	andi	r25, 0x0F	; 15
 208:	89 2b       	or	r24, r25
 20a:	8c 93       	st	X, r24
		break;
 20c:	76 c0       	rjmp	.+236    	; 0x2fa <writeChar+0x1d0>
		case 2:
		LCDDR1 = (LCDDR1 & 0xF0) | segment[0];
 20e:	ad ee       	ldi	r26, 0xED	; 237
 210:	b0 e0       	ldi	r27, 0x00	; 0
 212:	8c 91       	ld	r24, X
 214:	80 7f       	andi	r24, 0xF0	; 240
 216:	90 81       	ld	r25, Z
 218:	89 2b       	or	r24, r25
 21a:	8c 93       	st	X, r24
		LCDDR6 = (LCDDR6 & 0xF0) | segment[1];
 21c:	a2 ef       	ldi	r26, 0xF2	; 242
 21e:	b0 e0       	ldi	r27, 0x00	; 0
 220:	8c 91       	ld	r24, X
 222:	80 7f       	andi	r24, 0xF0	; 240
 224:	92 81       	ldd	r25, Z+2	; 0x02
 226:	89 2b       	or	r24, r25
 228:	8c 93       	st	X, r24
		LCDDR11 = (LCDDR11 & 0xF0) | segment[2];
 22a:	a7 ef       	ldi	r26, 0xF7	; 247
 22c:	b0 e0       	ldi	r27, 0x00	; 0
 22e:	8c 91       	ld	r24, X
 230:	80 7f       	andi	r24, 0xF0	; 240
 232:	94 81       	ldd	r25, Z+4	; 0x04
 234:	89 2b       	or	r24, r25
 236:	8c 93       	st	X, r24
		LCDDR16 = (LCDDR16 & 0xF0) | segment[3];
 238:	ac ef       	ldi	r26, 0xFC	; 252
 23a:	b0 e0       	ldi	r27, 0x00	; 0
 23c:	8c 91       	ld	r24, X
 23e:	80 7f       	andi	r24, 0xF0	; 240
 240:	96 81       	ldd	r25, Z+6	; 0x06
 242:	89 2b       	or	r24, r25
 244:	8c 93       	st	X, r24
		break;
 246:	59 c0       	rjmp	.+178    	; 0x2fa <writeChar+0x1d0>
		case 3:
		LCDDR1 = (LCDDR1 & 0x0F) | (segment[0] << 4);
 248:	ad ee       	ldi	r26, 0xED	; 237
 24a:	b0 e0       	ldi	r27, 0x00	; 0
 24c:	2c 91       	ld	r18, X
 24e:	80 81       	ld	r24, Z
 250:	91 81       	ldd	r25, Z+1	; 0x01
 252:	82 95       	swap	r24
 254:	92 95       	swap	r25
 256:	90 7f       	andi	r25, 0xF0	; 240
 258:	98 27       	eor	r25, r24
 25a:	80 7f       	andi	r24, 0xF0	; 240
 25c:	98 27       	eor	r25, r24
 25e:	92 2f       	mov	r25, r18
 260:	9f 70       	andi	r25, 0x0F	; 15
 262:	89 2b       	or	r24, r25
 264:	8c 93       	st	X, r24
		LCDDR6 = (LCDDR6 & 0x0F) | (segment[1] << 4);
 266:	a2 ef       	ldi	r26, 0xF2	; 242
 268:	b0 e0       	ldi	r27, 0x00	; 0
 26a:	2c 91       	ld	r18, X
 26c:	82 81       	ldd	r24, Z+2	; 0x02
 26e:	93 81       	ldd	r25, Z+3	; 0x03
 270:	82 95       	swap	r24
 272:	92 95       	swap	r25
 274:	90 7f       	andi	r25, 0xF0	; 240
 276:	98 27       	eor	r25, r24
 278:	80 7f       	andi	r24, 0xF0	; 240
 27a:	98 27       	eor	r25, r24
 27c:	92 2f       	mov	r25, r18
 27e:	9f 70       	andi	r25, 0x0F	; 15
 280:	89 2b       	or	r24, r25
 282:	8c 93       	st	X, r24
		LCDDR11 = (LCDDR11 & 0x0F) | (segment[2] << 4);
 284:	a7 ef       	ldi	r26, 0xF7	; 247
 286:	b0 e0       	ldi	r27, 0x00	; 0
 288:	2c 91       	ld	r18, X
 28a:	84 81       	ldd	r24, Z+4	; 0x04
 28c:	95 81       	ldd	r25, Z+5	; 0x05
 28e:	82 95       	swap	r24
 290:	92 95       	swap	r25
 292:	90 7f       	andi	r25, 0xF0	; 240
 294:	98 27       	eor	r25, r24
 296:	80 7f       	andi	r24, 0xF0	; 240
 298:	98 27       	eor	r25, r24
 29a:	92 2f       	mov	r25, r18
 29c:	9f 70       	andi	r25, 0x0F	; 15
 29e:	89 2b       	or	r24, r25
 2a0:	8c 93       	st	X, r24
		LCDDR16 = (LCDDR16 & 0x0F) | (segment[3] << 4);
 2a2:	ac ef       	ldi	r26, 0xFC	; 252
 2a4:	b0 e0       	ldi	r27, 0x00	; 0
 2a6:	2c 91       	ld	r18, X
 2a8:	86 81       	ldd	r24, Z+6	; 0x06
 2aa:	97 81       	ldd	r25, Z+7	; 0x07
 2ac:	82 95       	swap	r24
 2ae:	92 95       	swap	r25
 2b0:	90 7f       	andi	r25, 0xF0	; 240
 2b2:	98 27       	eor	r25, r24
 2b4:	80 7f       	andi	r24, 0xF0	; 240
 2b6:	98 27       	eor	r25, r24
 2b8:	92 2f       	mov	r25, r18
 2ba:	9f 70       	andi	r25, 0x0F	; 15
 2bc:	89 2b       	or	r24, r25
 2be:	8c 93       	st	X, r24
		break;
 2c0:	1c c0       	rjmp	.+56     	; 0x2fa <writeChar+0x1d0>
		case 4:
		LCDDR2 = (LCDDR2 & 0xF0) | segment[0];
 2c2:	ae ee       	ldi	r26, 0xEE	; 238
 2c4:	b0 e0       	ldi	r27, 0x00	; 0
 2c6:	8c 91       	ld	r24, X
 2c8:	80 7f       	andi	r24, 0xF0	; 240
 2ca:	90 81       	ld	r25, Z
 2cc:	89 2b       	or	r24, r25
 2ce:	8c 93       	st	X, r24
		LCDDR7 = (LCDDR7 & 0xF0) | segment[1];
 2d0:	a3 ef       	ldi	r26, 0xF3	; 243
 2d2:	b0 e0       	ldi	r27, 0x00	; 0
 2d4:	8c 91       	ld	r24, X
 2d6:	80 7f       	andi	r24, 0xF0	; 240
 2d8:	92 81       	ldd	r25, Z+2	; 0x02
 2da:	89 2b       	or	r24, r25
 2dc:	8c 93       	st	X, r24
		LCDDR12 = (LCDDR12 & 0xF0) | segment[2];
 2de:	a8 ef       	ldi	r26, 0xF8	; 248
 2e0:	b0 e0       	ldi	r27, 0x00	; 0
 2e2:	8c 91       	ld	r24, X
 2e4:	80 7f       	andi	r24, 0xF0	; 240
 2e6:	94 81       	ldd	r25, Z+4	; 0x04
 2e8:	89 2b       	or	r24, r25
 2ea:	8c 93       	st	X, r24
		LCDDR17 = (LCDDR17 & 0xF0) | segment[3];
 2ec:	ad ef       	ldi	r26, 0xFD	; 253
 2ee:	b0 e0       	ldi	r27, 0x00	; 0
 2f0:	8c 91       	ld	r24, X
 2f2:	80 7f       	andi	r24, 0xF0	; 240
 2f4:	96 81       	ldd	r25, Z+6	; 0x06
 2f6:	89 2b       	or	r24, r25
 2f8:	8c 93       	st	X, r24
		break;
	}
}
 2fa:	cf 91       	pop	r28
 2fc:	08 95       	ret

000002fe <is_prime>:

bool is_prime(int number)
{
 2fe:	fc 01       	movw	r30, r24
	//0 and 1 are not prime numbers
	if (number <= 1) return false;
 300:	82 30       	cpi	r24, 0x02	; 2
 302:	91 05       	cpc	r25, r1
 304:	1c f1       	brlt	.+70     	; 0x34c <is_prime+0x4e>

	//loop from 2 to sqrt(number)
	for (int i=2; i*i <= number; i++)
 306:	84 30       	cpi	r24, 0x04	; 4
 308:	91 05       	cpc	r25, r1
 30a:	14 f1       	brlt	.+68     	; 0x350 <is_prime+0x52>
	{
		if (number % i == 0) return false;    //divisible => not prime
 30c:	81 70       	andi	r24, 0x01	; 1
 30e:	90 78       	andi	r25, 0x80	; 128
 310:	99 23       	and	r25, r25
 312:	24 f4       	brge	.+8      	; 0x31c <is_prime+0x1e>
 314:	01 97       	sbiw	r24, 0x01	; 1
 316:	8e 6f       	ori	r24, 0xFE	; 254
 318:	9f 6f       	ori	r25, 0xFF	; 255
 31a:	01 96       	adiw	r24, 0x01	; 1
 31c:	89 2b       	or	r24, r25
 31e:	d1 f0       	breq	.+52     	; 0x354 <is_prime+0x56>
 320:	22 e0       	ldi	r18, 0x02	; 2
 322:	30 e0       	ldi	r19, 0x00	; 0
 324:	06 c0       	rjmp	.+12     	; 0x332 <is_prime+0x34>
 326:	cf 01       	movw	r24, r30
 328:	b9 01       	movw	r22, r18
 32a:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <__divmodhi4>
 32e:	89 2b       	or	r24, r25
 330:	99 f0       	breq	.+38     	; 0x358 <is_prime+0x5a>
{
	//0 and 1 are not prime numbers
	if (number <= 1) return false;

	//loop from 2 to sqrt(number)
	for (int i=2; i*i <= number; i++)
 332:	2f 5f       	subi	r18, 0xFF	; 255
 334:	3f 4f       	sbci	r19, 0xFF	; 255
 336:	22 9f       	mul	r18, r18
 338:	c0 01       	movw	r24, r0
 33a:	23 9f       	mul	r18, r19
 33c:	90 0d       	add	r25, r0
 33e:	90 0d       	add	r25, r0
 340:	11 24       	eor	r1, r1
 342:	e8 17       	cp	r30, r24
 344:	f9 07       	cpc	r31, r25
 346:	7c f7       	brge	.-34     	; 0x326 <is_prime+0x28>
	{
		if (number % i == 0) return false;    //divisible => not prime
	}
	//is prime if no factors
	return true;
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	08 95       	ret
}

bool is_prime(int number)
{
	//0 and 1 are not prime numbers
	if (number <= 1) return false;
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	08 95       	ret
	for (int i=2; i*i <= number; i++)
	{
		if (number % i == 0) return false;    //divisible => not prime
	}
	//is prime if no factors
	return true;
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	08 95       	ret
	if (number <= 1) return false;

	//loop from 2 to sqrt(number)
	for (int i=2; i*i <= number; i++)
	{
		if (number % i == 0) return false;    //divisible => not prime
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	08 95       	ret
 358:	80 e0       	ldi	r24, 0x00	; 0
	}
	//is prime if no factors
	return true;
}
 35a:	08 95       	ret

0000035c <printAt>:

void printAt(long num, int pos) {
 35c:	8f 92       	push	r8
 35e:	9f 92       	push	r9
 360:	af 92       	push	r10
 362:	bf 92       	push	r11
 364:	cf 92       	push	r12
 366:	df 92       	push	r13
 368:	ef 92       	push	r14
 36a:	ff 92       	push	r15
 36c:	cf 93       	push	r28
 36e:	df 93       	push	r29
 370:	4b 01       	movw	r8, r22
 372:	5c 01       	movw	r10, r24
 374:	ea 01       	movw	r28, r20
	yield();
 376:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <yield>
    int pp = pos;
    writeChar( (num % 100) / 10 + '0', pp);
 37a:	c5 01       	movw	r24, r10
 37c:	b4 01       	movw	r22, r8
 37e:	24 e6       	ldi	r18, 0x64	; 100
 380:	30 e0       	ldi	r19, 0x00	; 0
 382:	40 e0       	ldi	r20, 0x00	; 0
 384:	50 e0       	ldi	r21, 0x00	; 0
 386:	0e 94 00 03 	call	0x600	; 0x600 <__divmodsi4>
 38a:	0f 2e       	mov	r0, r31
 38c:	fa e0       	ldi	r31, 0x0A	; 10
 38e:	cf 2e       	mov	r12, r31
 390:	d1 2c       	mov	r13, r1
 392:	e1 2c       	mov	r14, r1
 394:	f1 2c       	mov	r15, r1
 396:	f0 2d       	mov	r31, r0
 398:	a7 01       	movw	r20, r14
 39a:	96 01       	movw	r18, r12
 39c:	0e 94 00 03 	call	0x600	; 0x600 <__divmodsi4>
 3a0:	6c 2f       	mov	r22, r28
 3a2:	80 e3       	ldi	r24, 0x30	; 48
 3a4:	82 0f       	add	r24, r18
 3a6:	0e 94 95 00 	call	0x12a	; 0x12a <writeChar>
    pp++;
    writeChar( num % 10 + '0', pp);
 3aa:	21 96       	adiw	r28, 0x01	; 1
 3ac:	c5 01       	movw	r24, r10
 3ae:	b4 01       	movw	r22, r8
 3b0:	a7 01       	movw	r20, r14
 3b2:	96 01       	movw	r18, r12
 3b4:	0e 94 00 03 	call	0x600	; 0x600 <__divmodsi4>
 3b8:	86 2f       	mov	r24, r22
 3ba:	6c 2f       	mov	r22, r28
 3bc:	80 5d       	subi	r24, 0xD0	; 208
 3be:	0e 94 95 00 	call	0x12a	; 0x12a <writeChar>
}
 3c2:	df 91       	pop	r29
 3c4:	cf 91       	pop	r28
 3c6:	ff 90       	pop	r15
 3c8:	ef 90       	pop	r14
 3ca:	df 90       	pop	r13
 3cc:	cf 90       	pop	r12
 3ce:	bf 90       	pop	r11
 3d0:	af 90       	pop	r10
 3d2:	9f 90       	pop	r9
 3d4:	8f 90       	pop	r8
 3d6:	08 95       	ret

000003d8 <computePrimes>:

void computePrimes(int pos) {
 3d8:	ec 01       	movw	r28, r24
    long n;

    for(n = 1; ; n++) {
 3da:	c1 2c       	mov	r12, r1
 3dc:	d1 2c       	mov	r13, r1
 3de:	76 01       	movw	r14, r12
 3e0:	c3 94       	inc	r12
        if (is_prime(n)) {
 3e2:	c6 01       	movw	r24, r12
 3e4:	0e 94 7f 01 	call	0x2fe	; 0x2fe <is_prime>
 3e8:	88 23       	and	r24, r24
 3ea:	71 f0       	breq	.+28     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
            printAt(n, pos);
 3ec:	ae 01       	movw	r20, r28
 3ee:	c7 01       	movw	r24, r14
 3f0:	b6 01       	movw	r22, r12
 3f2:	0e 94 ae 01 	call	0x35c	; 0x35c <printAt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3f6:	2f e3       	ldi	r18, 0x3F	; 63
 3f8:	82 e4       	ldi	r24, 0x42	; 66
 3fa:	9f e0       	ldi	r25, 0x0F	; 15
 3fc:	21 50       	subi	r18, 0x01	; 1
 3fe:	80 40       	sbci	r24, 0x00	; 0
 400:	90 40       	sbci	r25, 0x00	; 0
 402:	e1 f7       	brne	.-8      	; 0x3fc <computePrimes+0x24>
 404:	00 c0       	rjmp	.+0      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 406:	00 00       	nop
}

void computePrimes(int pos) {
    long n;

    for(n = 1; ; n++) {
 408:	2f ef       	ldi	r18, 0xFF	; 255
 40a:	c2 1a       	sub	r12, r18
 40c:	d2 0a       	sbc	r13, r18
 40e:	e2 0a       	sbc	r14, r18
 410:	f2 0a       	sbc	r15, r18
        if (is_prime(n)) {
            printAt(n, pos);
			_delay_ms(5000);
        }
    }
 412:	e7 cf       	rjmp	.-50     	; 0x3e2 <computePrimes+0xa>

00000414 <main>:
}


int main() {
	init();
 414:	0e 94 57 00 	call	0xae	; 0xae <init>
	LCD_init();
 418:	0e 94 5d 00 	call	0xba	; 0xba <LCD_init>
    spawn(computePrimes, 0);
 41c:	60 e0       	ldi	r22, 0x00	; 0
 41e:	70 e0       	ldi	r23, 0x00	; 0
 420:	8c ee       	ldi	r24, 0xEC	; 236
 422:	91 e0       	ldi	r25, 0x01	; 1
 424:	0e 94 4f 02 	call	0x49e	; 0x49e <spawn>
    computePrimes(7);
 428:	87 e0       	ldi	r24, 0x07	; 7
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <computePrimes>

00000430 <enqueue>:

    initialized = 1;
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 430:	dc 01       	movw	r26, r24
 432:	15 96       	adiw	r26, 0x05	; 5
 434:	1c 92       	st	X, r1
 436:	1e 92       	st	-X, r1
 438:	14 97       	sbiw	r26, 0x04	; 4
    if (*queue == NULL) {
 43a:	db 01       	movw	r26, r22
 43c:	ed 91       	ld	r30, X+
 43e:	fc 91       	ld	r31, X
 440:	11 97       	sbiw	r26, 0x01	; 1
 442:	30 97       	sbiw	r30, 0x00	; 0
 444:	21 f4       	brne	.+8      	; 0x44e <enqueue+0x1e>
        *queue = p;
 446:	8d 93       	st	X+, r24
 448:	9c 93       	st	X, r25
 44a:	08 95       	ret
    } else {
        thread q = *queue;
        while (q->next)
            q = q->next;
 44c:	f9 01       	movw	r30, r18
    p->next = NULL;
    if (*queue == NULL) {
        *queue = p;
    } else {
        thread q = *queue;
        while (q->next)
 44e:	24 81       	ldd	r18, Z+4	; 0x04
 450:	35 81       	ldd	r19, Z+5	; 0x05
 452:	21 15       	cp	r18, r1
 454:	31 05       	cpc	r19, r1
 456:	d1 f7       	brne	.-12     	; 0x44c <enqueue+0x1c>
            q = q->next;
        q->next = p;
 458:	95 83       	std	Z+5, r25	; 0x05
 45a:	84 83       	std	Z+4, r24	; 0x04
 45c:	08 95       	ret

0000045e <dispatch>:
        while (1) ;  // not much else to do...
    }
    return p;
}

static void dispatch(thread next) {
 45e:	cf 93       	push	r28
 460:	df 93       	push	r29
 462:	00 d0       	rcall	.+0      	; 0x464 <dispatch+0x6>
 464:	cd b7       	in	r28, 0x3d	; 61
 466:	de b7       	in	r29, 0x3e	; 62
 468:	9a 83       	std	Y+2, r25	; 0x02
 46a:	89 83       	std	Y+1, r24	; 0x01
    if (setjmp(current->context) == 0) {
 46c:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <current>
 470:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <current+0x1>
 474:	06 96       	adiw	r24, 0x06	; 6
 476:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <setjmp>
 47a:	89 2b       	or	r24, r25
 47c:	59 f4       	brne	.+22     	; 0x494 <dispatch+0x36>
        current = next;
 47e:	89 81       	ldd	r24, Y+1	; 0x01
 480:	9a 81       	ldd	r25, Y+2	; 0x02
 482:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <current+0x1>
 486:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <current>
        longjmp(next->context,1);
 48a:	61 e0       	ldi	r22, 0x01	; 1
 48c:	70 e0       	ldi	r23, 0x00	; 0
 48e:	06 96       	adiw	r24, 0x06	; 6
 490:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <longjmp>
    }
}
 494:	0f 90       	pop	r0
 496:	0f 90       	pop	r0
 498:	df 91       	pop	r29
 49a:	cf 91       	pop	r28
 49c:	08 95       	ret

0000049e <spawn>:

void spawn(void (* function)(int), int arg) {
 49e:	cf 93       	push	r28
 4a0:	df 93       	push	r29
 4a2:	00 d0       	rcall	.+0      	; 0x4a4 <spawn+0x6>
 4a4:	cd b7       	in	r28, 0x3d	; 61
 4a6:	de b7       	in	r29, 0x3e	; 62
    thread newp;

    DISABLE();
 4a8:	f8 94       	cli
    if (!initialized) initialize();
 4aa:	20 91 5c 01 	lds	r18, 0x015C	; 0x80015c <initialized>
 4ae:	30 91 5d 01 	lds	r19, 0x015D	; 0x80015d <initialized+0x1>
 4b2:	23 2b       	or	r18, r19
 4b4:	e1 f4       	brne	.+56     	; 0x4ee <spawn+0x50>
int initialized = 0;

static void initialize(void) {
    int i;
    for (i=0; i<NTHREADS-1; i++)
        threads[i].next = &threads[i+1];
 4b6:	2a e3       	ldi	r18, 0x3A	; 58
 4b8:	32 e0       	ldi	r19, 0x02	; 2
 4ba:	30 93 d2 01 	sts	0x01D2, r19	; 0x8001d2 <threads+0x5>
 4be:	20 93 d1 01 	sts	0x01D1, r18	; 0x8001d1 <threads+0x4>
 4c2:	27 ea       	ldi	r18, 0xA7	; 167
 4c4:	32 e0       	ldi	r19, 0x02	; 2
 4c6:	30 93 3f 02 	sts	0x023F, r19	; 0x80023f <threads+0x72>
 4ca:	20 93 3e 02 	sts	0x023E, r18	; 0x80023e <threads+0x71>
 4ce:	24 e1       	ldi	r18, 0x14	; 20
 4d0:	33 e0       	ldi	r19, 0x03	; 3
 4d2:	30 93 ac 02 	sts	0x02AC, r19	; 0x8002ac <threads+0xdf>
 4d6:	20 93 ab 02 	sts	0x02AB, r18	; 0x8002ab <threads+0xde>
    threads[NTHREADS-1].next = NULL;
 4da:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <threads+0x14c>
 4de:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <threads+0x14b>


    initialized = 1;
 4e2:	21 e0       	ldi	r18, 0x01	; 1
 4e4:	30 e0       	ldi	r19, 0x00	; 0
 4e6:	30 93 5d 01 	sts	0x015D, r19	; 0x80015d <initialized+0x1>
 4ea:	20 93 5c 01 	sts	0x015C, r18	; 0x80015c <initialized>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 4ee:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <freeQ>
 4f2:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <freeQ+0x1>
 4f6:	3a 83       	std	Y+2, r19	; 0x02
 4f8:	29 83       	std	Y+1, r18	; 0x01
    if (*queue) {
 4fa:	23 2b       	or	r18, r19
 4fc:	a9 f0       	breq	.+42     	; 0x528 <__stack+0x29>
        *queue = (*queue)->next;
 4fe:	e9 81       	ldd	r30, Y+1	; 0x01
 500:	fa 81       	ldd	r31, Y+2	; 0x02
 502:	44 81       	ldd	r20, Z+4	; 0x04
 504:	55 81       	ldd	r21, Z+5	; 0x05
 506:	50 93 53 01 	sts	0x0153, r21	; 0x800153 <freeQ+0x1>
 50a:	40 93 52 01 	sts	0x0152, r20	; 0x800152 <freeQ>

    DISABLE();
    if (!initialized) initialize();

    newp = dequeue(&freeQ);
    newp->function = function;
 50e:	91 83       	std	Z+1, r25	; 0x01
 510:	80 83       	st	Z, r24
    newp->arg = arg;
 512:	73 83       	std	Z+3, r23	; 0x03
 514:	62 83       	std	Z+2, r22	; 0x02
    newp->next = NULL;
 516:	15 82       	std	Z+5, r1	; 0x05
 518:	14 82       	std	Z+4, r1	; 0x04
    if (setjmp(newp->context) == 1) {
 51a:	cf 01       	movw	r24, r30
 51c:	06 96       	adiw	r24, 0x06	; 6
 51e:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <setjmp>
 522:	01 97       	sbiw	r24, 0x01	; 1
 524:	49 f5       	brne	.+82     	; 0x578 <__stack+0x79>
 526:	01 c0       	rjmp	.+2      	; 0x52a <__stack+0x2b>
 528:	ff cf       	rjmp	.-2      	; 0x528 <__stack+0x29>
        ENABLE();
 52a:	78 94       	sei
        current->function(current->arg);
 52c:	a0 91 50 01 	lds	r26, 0x0150	; 0x800150 <current>
 530:	b0 91 51 01 	lds	r27, 0x0151	; 0x800151 <current+0x1>
 534:	ed 91       	ld	r30, X+
 536:	fc 91       	ld	r31, X
 538:	11 97       	sbiw	r26, 0x01	; 1
 53a:	12 96       	adiw	r26, 0x02	; 2
 53c:	8d 91       	ld	r24, X+
 53e:	9c 91       	ld	r25, X
 540:	13 97       	sbiw	r26, 0x03	; 3
 542:	09 95       	icall
        DISABLE();
 544:	f8 94       	cli
        enqueue(current, &freeQ);
 546:	62 e5       	ldi	r22, 0x52	; 82
 548:	71 e0       	ldi	r23, 0x01	; 1
 54a:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <current>
 54e:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <current+0x1>
 552:	0e 94 18 02 	call	0x430	; 0x430 <enqueue>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 556:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <readyQ>
 55a:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <readyQ+0x1>
    if (*queue) {
 55e:	00 97       	sbiw	r24, 0x00	; 0
 560:	51 f0       	breq	.+20     	; 0x576 <__stack+0x77>
        *queue = (*queue)->next;
 562:	fc 01       	movw	r30, r24
 564:	24 81       	ldd	r18, Z+4	; 0x04
 566:	35 81       	ldd	r19, Z+5	; 0x05
 568:	30 93 5f 01 	sts	0x015F, r19	; 0x80015f <readyQ+0x1>
 56c:	20 93 5e 01 	sts	0x015E, r18	; 0x80015e <readyQ>
    if (setjmp(newp->context) == 1) {
        ENABLE();
        current->function(current->arg);
        DISABLE();
        enqueue(current, &freeQ);
        dispatch(dequeue(&readyQ));
 570:	0e 94 2f 02 	call	0x45e	; 0x45e <dispatch>
 574:	01 c0       	rjmp	.+2      	; 0x578 <__stack+0x79>
 576:	ff cf       	rjmp	.-2      	; 0x576 <__stack+0x77>
    }
    SETSTACK(&newp->context, &newp->stack);
 578:	e9 81       	ldd	r30, Y+1	; 0x01
 57a:	fa 81       	ldd	r31, Y+2	; 0x02
 57c:	36 96       	adiw	r30, 0x06	; 6
 57e:	89 81       	ldd	r24, Y+1	; 0x01
 580:	9a 81       	ldd	r25, Y+2	; 0x02
 582:	87 59       	subi	r24, 0x97	; 151
 584:	9f 4f       	sbci	r25, 0xFF	; 255
 586:	91 8b       	std	Z+17, r25	; 0x11
 588:	80 8b       	std	Z+16, r24	; 0x10
 58a:	93 8b       	std	Z+19, r25	; 0x13
 58c:	82 8b       	std	Z+18, r24	; 0x12

    enqueue(newp, &readyQ);
 58e:	6e e5       	ldi	r22, 0x5E	; 94
 590:	71 e0       	ldi	r23, 0x01	; 1
 592:	89 81       	ldd	r24, Y+1	; 0x01
 594:	9a 81       	ldd	r25, Y+2	; 0x02
 596:	0e 94 18 02 	call	0x430	; 0x430 <enqueue>
    ENABLE();
 59a:	78 94       	sei
}
 59c:	0f 90       	pop	r0
 59e:	0f 90       	pop	r0
 5a0:	df 91       	pop	r29
 5a2:	cf 91       	pop	r28
 5a4:	08 95       	ret

000005a6 <yield>:

void yield(void) {
	enqueue(current, &readyQ);
 5a6:	6e e5       	ldi	r22, 0x5E	; 94
 5a8:	71 e0       	ldi	r23, 0x01	; 1
 5aa:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <current>
 5ae:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <current+0x1>
 5b2:	0e 94 18 02 	call	0x430	; 0x430 <enqueue>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 5b6:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <readyQ>
 5ba:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <readyQ+0x1>
    if (*queue) {
 5be:	00 97       	sbiw	r24, 0x00	; 0
 5c0:	51 f0       	breq	.+20     	; 0x5d6 <yield+0x30>
        *queue = (*queue)->next;
 5c2:	fc 01       	movw	r30, r24
 5c4:	24 81       	ldd	r18, Z+4	; 0x04
 5c6:	35 81       	ldd	r19, Z+5	; 0x05
 5c8:	30 93 5f 01 	sts	0x015F, r19	; 0x80015f <readyQ+0x1>
 5cc:	20 93 5e 01 	sts	0x015E, r18	; 0x80015e <readyQ>
    ENABLE();
}

void yield(void) {
	enqueue(current, &readyQ);
	dispatch(dequeue(&readyQ));
 5d0:	0e 94 2f 02 	call	0x45e	; 0x45e <dispatch>
}
 5d4:	08 95       	ret
 5d6:	ff cf       	rjmp	.-2      	; 0x5d6 <yield+0x30>

000005d8 <__divmodhi4>:
 5d8:	97 fb       	bst	r25, 7
 5da:	07 2e       	mov	r0, r23
 5dc:	16 f4       	brtc	.+4      	; 0x5e2 <__divmodhi4+0xa>
 5de:	00 94       	com	r0
 5e0:	07 d0       	rcall	.+14     	; 0x5f0 <__divmodhi4_neg1>
 5e2:	77 fd       	sbrc	r23, 7
 5e4:	09 d0       	rcall	.+18     	; 0x5f8 <__divmodhi4_neg2>
 5e6:	0e 94 25 03 	call	0x64a	; 0x64a <__udivmodhi4>
 5ea:	07 fc       	sbrc	r0, 7
 5ec:	05 d0       	rcall	.+10     	; 0x5f8 <__divmodhi4_neg2>
 5ee:	3e f4       	brtc	.+14     	; 0x5fe <__divmodhi4_exit>

000005f0 <__divmodhi4_neg1>:
 5f0:	90 95       	com	r25
 5f2:	81 95       	neg	r24
 5f4:	9f 4f       	sbci	r25, 0xFF	; 255
 5f6:	08 95       	ret

000005f8 <__divmodhi4_neg2>:
 5f8:	70 95       	com	r23
 5fa:	61 95       	neg	r22
 5fc:	7f 4f       	sbci	r23, 0xFF	; 255

000005fe <__divmodhi4_exit>:
 5fe:	08 95       	ret

00000600 <__divmodsi4>:
 600:	05 2e       	mov	r0, r21
 602:	97 fb       	bst	r25, 7
 604:	1e f4       	brtc	.+6      	; 0x60c <__divmodsi4+0xc>
 606:	00 94       	com	r0
 608:	0e 94 17 03 	call	0x62e	; 0x62e <__negsi2>
 60c:	57 fd       	sbrc	r21, 7
 60e:	07 d0       	rcall	.+14     	; 0x61e <__divmodsi4_neg2>
 610:	0e 94 39 03 	call	0x672	; 0x672 <__udivmodsi4>
 614:	07 fc       	sbrc	r0, 7
 616:	03 d0       	rcall	.+6      	; 0x61e <__divmodsi4_neg2>
 618:	4e f4       	brtc	.+18     	; 0x62c <__divmodsi4_exit>
 61a:	0c 94 17 03 	jmp	0x62e	; 0x62e <__negsi2>

0000061e <__divmodsi4_neg2>:
 61e:	50 95       	com	r21
 620:	40 95       	com	r20
 622:	30 95       	com	r19
 624:	21 95       	neg	r18
 626:	3f 4f       	sbci	r19, 0xFF	; 255
 628:	4f 4f       	sbci	r20, 0xFF	; 255
 62a:	5f 4f       	sbci	r21, 0xFF	; 255

0000062c <__divmodsi4_exit>:
 62c:	08 95       	ret

0000062e <__negsi2>:
 62e:	90 95       	com	r25
 630:	80 95       	com	r24
 632:	70 95       	com	r23
 634:	61 95       	neg	r22
 636:	7f 4f       	sbci	r23, 0xFF	; 255
 638:	8f 4f       	sbci	r24, 0xFF	; 255
 63a:	9f 4f       	sbci	r25, 0xFF	; 255
 63c:	08 95       	ret

0000063e <__tablejump2__>:
 63e:	ee 0f       	add	r30, r30
 640:	ff 1f       	adc	r31, r31
 642:	05 90       	lpm	r0, Z+
 644:	f4 91       	lpm	r31, Z
 646:	e0 2d       	mov	r30, r0
 648:	09 94       	ijmp

0000064a <__udivmodhi4>:
 64a:	aa 1b       	sub	r26, r26
 64c:	bb 1b       	sub	r27, r27
 64e:	51 e1       	ldi	r21, 0x11	; 17
 650:	07 c0       	rjmp	.+14     	; 0x660 <__udivmodhi4_ep>

00000652 <__udivmodhi4_loop>:
 652:	aa 1f       	adc	r26, r26
 654:	bb 1f       	adc	r27, r27
 656:	a6 17       	cp	r26, r22
 658:	b7 07       	cpc	r27, r23
 65a:	10 f0       	brcs	.+4      	; 0x660 <__udivmodhi4_ep>
 65c:	a6 1b       	sub	r26, r22
 65e:	b7 0b       	sbc	r27, r23

00000660 <__udivmodhi4_ep>:
 660:	88 1f       	adc	r24, r24
 662:	99 1f       	adc	r25, r25
 664:	5a 95       	dec	r21
 666:	a9 f7       	brne	.-22     	; 0x652 <__udivmodhi4_loop>
 668:	80 95       	com	r24
 66a:	90 95       	com	r25
 66c:	bc 01       	movw	r22, r24
 66e:	cd 01       	movw	r24, r26
 670:	08 95       	ret

00000672 <__udivmodsi4>:
 672:	a1 e2       	ldi	r26, 0x21	; 33
 674:	1a 2e       	mov	r1, r26
 676:	aa 1b       	sub	r26, r26
 678:	bb 1b       	sub	r27, r27
 67a:	fd 01       	movw	r30, r26
 67c:	0d c0       	rjmp	.+26     	; 0x698 <__udivmodsi4_ep>

0000067e <__udivmodsi4_loop>:
 67e:	aa 1f       	adc	r26, r26
 680:	bb 1f       	adc	r27, r27
 682:	ee 1f       	adc	r30, r30
 684:	ff 1f       	adc	r31, r31
 686:	a2 17       	cp	r26, r18
 688:	b3 07       	cpc	r27, r19
 68a:	e4 07       	cpc	r30, r20
 68c:	f5 07       	cpc	r31, r21
 68e:	20 f0       	brcs	.+8      	; 0x698 <__udivmodsi4_ep>
 690:	a2 1b       	sub	r26, r18
 692:	b3 0b       	sbc	r27, r19
 694:	e4 0b       	sbc	r30, r20
 696:	f5 0b       	sbc	r31, r21

00000698 <__udivmodsi4_ep>:
 698:	66 1f       	adc	r22, r22
 69a:	77 1f       	adc	r23, r23
 69c:	88 1f       	adc	r24, r24
 69e:	99 1f       	adc	r25, r25
 6a0:	1a 94       	dec	r1
 6a2:	69 f7       	brne	.-38     	; 0x67e <__udivmodsi4_loop>
 6a4:	60 95       	com	r22
 6a6:	70 95       	com	r23
 6a8:	80 95       	com	r24
 6aa:	90 95       	com	r25
 6ac:	9b 01       	movw	r18, r22
 6ae:	ac 01       	movw	r20, r24
 6b0:	bd 01       	movw	r22, r26
 6b2:	cf 01       	movw	r24, r30
 6b4:	08 95       	ret

000006b6 <setjmp>:
 6b6:	dc 01       	movw	r26, r24
 6b8:	2d 92       	st	X+, r2
 6ba:	3d 92       	st	X+, r3
 6bc:	4d 92       	st	X+, r4
 6be:	5d 92       	st	X+, r5
 6c0:	6d 92       	st	X+, r6
 6c2:	7d 92       	st	X+, r7
 6c4:	8d 92       	st	X+, r8
 6c6:	9d 92       	st	X+, r9
 6c8:	ad 92       	st	X+, r10
 6ca:	bd 92       	st	X+, r11
 6cc:	cd 92       	st	X+, r12
 6ce:	dd 92       	st	X+, r13
 6d0:	ed 92       	st	X+, r14
 6d2:	fd 92       	st	X+, r15
 6d4:	0d 93       	st	X+, r16
 6d6:	1d 93       	st	X+, r17
 6d8:	cd 93       	st	X+, r28
 6da:	dd 93       	st	X+, r29
 6dc:	ff 91       	pop	r31
 6de:	ef 91       	pop	r30
 6e0:	8d b7       	in	r24, 0x3d	; 61
 6e2:	8d 93       	st	X+, r24
 6e4:	8e b7       	in	r24, 0x3e	; 62
 6e6:	8d 93       	st	X+, r24
 6e8:	8f b7       	in	r24, 0x3f	; 63
 6ea:	8d 93       	st	X+, r24
 6ec:	ed 93       	st	X+, r30
 6ee:	fd 93       	st	X+, r31
 6f0:	88 27       	eor	r24, r24
 6f2:	99 27       	eor	r25, r25
 6f4:	09 94       	ijmp

000006f6 <longjmp>:
 6f6:	dc 01       	movw	r26, r24
 6f8:	cb 01       	movw	r24, r22
 6fa:	81 30       	cpi	r24, 0x01	; 1
 6fc:	91 05       	cpc	r25, r1
 6fe:	81 1d       	adc	r24, r1
 700:	2d 90       	ld	r2, X+
 702:	3d 90       	ld	r3, X+
 704:	4d 90       	ld	r4, X+
 706:	5d 90       	ld	r5, X+
 708:	6d 90       	ld	r6, X+
 70a:	7d 90       	ld	r7, X+
 70c:	8d 90       	ld	r8, X+
 70e:	9d 90       	ld	r9, X+
 710:	ad 90       	ld	r10, X+
 712:	bd 90       	ld	r11, X+
 714:	cd 90       	ld	r12, X+
 716:	dd 90       	ld	r13, X+
 718:	ed 90       	ld	r14, X+
 71a:	fd 90       	ld	r15, X+
 71c:	0d 91       	ld	r16, X+
 71e:	1d 91       	ld	r17, X+
 720:	cd 91       	ld	r28, X+
 722:	dd 91       	ld	r29, X+
 724:	ed 91       	ld	r30, X+
 726:	fd 91       	ld	r31, X+
 728:	0d 90       	ld	r0, X+
 72a:	f8 94       	cli
 72c:	fe bf       	out	0x3e, r31	; 62
 72e:	0f be       	out	0x3f, r0	; 63
 730:	ed bf       	out	0x3d, r30	; 61
 732:	ed 91       	ld	r30, X+
 734:	fd 91       	ld	r31, X+
 736:	09 94       	ijmp

00000738 <_exit>:
 738:	f8 94       	cli

0000073a <__stop_program>:
 73a:	ff cf       	rjmp	.-2      	; 0x73a <__stop_program>
