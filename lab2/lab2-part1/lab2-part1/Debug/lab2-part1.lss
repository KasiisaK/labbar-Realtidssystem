
lab2-part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800100  000007ca  0000085e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000022d  00800154  00800154  000008b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000924  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000109b  00000000  00000000  000009d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aee  00000000  00000000  00001a6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000655  00000000  00000000  0000255d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000214  00000000  00000000  00002bb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000599  00000000  00000000  00002dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000875  00000000  00000000  00003361  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00003bd6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 ea 02 	jmp	0x5d4	; 0x5d4 <__vector_3>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 0f 03 	jmp	0x61e	; 0x61e <__vector_7>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	92 00       	.word	0x0092	; ????
  5e:	74 00       	.word	0x0074	; ????
  60:	77 00       	.word	0x0077	; ????
  62:	7a 00       	.word	0x007a	; ????
  64:	7d 00       	.word	0x007d	; ????
  66:	80 00       	.word	0x0080	; ????
  68:	83 00       	.word	0x0083	; ????
  6a:	86 00       	.word	0x0086	; ????
  6c:	89 00       	.word	0x0089	; ????
  6e:	8c 00       	.word	0x008c	; ????

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ea ec       	ldi	r30, 0xCA	; 202
  84:	f7 e0       	ldi	r31, 0x07	; 7
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a4 35       	cpi	r26, 0x54	; 84
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	23 e0       	ldi	r18, 0x03	; 3
  94:	a4 e5       	ldi	r26, 0x54	; 84
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a1 38       	cpi	r26, 0x81	; 129
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 fd 01 	call	0x3fa	; 0x3fa <main>
  a6:	0c 94 e3 03 	jmp	0x7c6	; 0x7c6 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <init>:
#include <stdbool.h>
#include <util/delay.h>

void init() {
	//Clock Prescale Register "maximum speed"
	CLKPR = 0b10000000; //Clock Prescaler Change Enable
  ae:	e1 e6       	ldi	r30, 0x61	; 97
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 e8       	ldi	r24, 0x80	; 128
  b4:	80 83       	st	Z, r24
	CLKPR = 0b00000000; //set 0 for sysclock
  b6:	10 82       	st	Z, r1
  b8:	08 95       	ret

000000ba <LCD_init>:
}

void LCD_init(){
	//LCD(Contrast Control Register), LCD(Display Configuration)(000): 300 Î¼s, LCD(Contrast Control)(1111): 3.35 V
	LCDCCR = (0 << LCDDC0) | (0 << LCDDC1) | (0 << LCDDC2) | (1 << LCDCC0) | (1 << LCDCC1) | (1 << LCDCC2) | (1 << LCDCC3);
  ba:	8f e0       	ldi	r24, 0x0F	; 15
  bc:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__DATA_REGION_ORIGIN__+0x87>
	//LCDCS: asynchronous clock, LCDMUX(11): D=1/4, B=1/3, LCD(Port Mask): 25 segments
	LCDCRB = (1 << LCDCS) | (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM2) | (1 << LCDPM1) | (1 << LCDPM0);
  c0:	87 eb       	ldi	r24, 0xB7	; 183
  c2:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
	//LCD(Clock Divide)(111): (D=8) 32Hz
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);
  c6:	87 e0       	ldi	r24, 0x07	; 7
  c8:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__DATA_REGION_ORIGIN__+0x86>
	//LCD(Control and StatusRegister A), LCD(Enable): True, LCD(Low Power Waveform): True, (no frame interrupt, no blanking)
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
  cc:	80 ec       	ldi	r24, 0xC0	; 192
  ce:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
  d2:	08 95       	ret

000000d4 <getSegmentForChar>:
int nine[] = {0b0001, 0b0101, 0b1011, 0b0001};
int none[] = {0b0000, 0b0000, 0b0000, 0b0000};

//returns wall of data based on char input ('0' = 48 (char))
int* getSegmentForChar(char ch) {
	switch (ch) {
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	fc 01       	movw	r30, r24
  d8:	f0 97       	sbiw	r30, 0x30	; 48
  da:	ea 30       	cpi	r30, 0x0A	; 10
  dc:	f1 05       	cpc	r31, r1
  de:	f8 f4       	brcc	.+62     	; 0x11e <getSegmentForChar+0x4a>
  e0:	e2 5d       	subi	r30, 0xD2	; 210
  e2:	ff 4f       	sbci	r31, 0xFF	; 255
  e4:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__tablejump2__>
		case '0': return zero;
		case '1': return one;
  e8:	80 e4       	ldi	r24, 0x40	; 64
  ea:	91 e0       	ldi	r25, 0x01	; 1
  ec:	08 95       	ret
		case '2': return two;
  ee:	88 e3       	ldi	r24, 0x38	; 56
  f0:	91 e0       	ldi	r25, 0x01	; 1
  f2:	08 95       	ret
		case '3': return three;
  f4:	80 e3       	ldi	r24, 0x30	; 48
  f6:	91 e0       	ldi	r25, 0x01	; 1
  f8:	08 95       	ret
		case '4': return four;
  fa:	88 e2       	ldi	r24, 0x28	; 40
  fc:	91 e0       	ldi	r25, 0x01	; 1
  fe:	08 95       	ret
		case '5': return five;
 100:	80 e2       	ldi	r24, 0x20	; 32
 102:	91 e0       	ldi	r25, 0x01	; 1
 104:	08 95       	ret
		case '6': return six;
 106:	88 e1       	ldi	r24, 0x18	; 24
 108:	91 e0       	ldi	r25, 0x01	; 1
 10a:	08 95       	ret
		case '7': return seven;
 10c:	80 e1       	ldi	r24, 0x10	; 16
 10e:	91 e0       	ldi	r25, 0x01	; 1
 110:	08 95       	ret
		case '8': return eight;
 112:	88 e0       	ldi	r24, 0x08	; 8
 114:	91 e0       	ldi	r25, 0x01	; 1
 116:	08 95       	ret
		case '9': return nine;
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	91 e0       	ldi	r25, 0x01	; 1
 11c:	08 95       	ret
		default:  return none;
 11e:	84 e5       	ldi	r24, 0x54	; 84
 120:	91 e0       	ldi	r25, 0x01	; 1
 122:	08 95       	ret
int none[] = {0b0000, 0b0000, 0b0000, 0b0000};

//returns wall of data based on char input ('0' = 48 (char))
int* getSegmentForChar(char ch) {
	switch (ch) {
		case '0': return zero;
 124:	88 e4       	ldi	r24, 0x48	; 72
 126:	91 e0       	ldi	r25, 0x01	; 1
		case '7': return seven;
		case '8': return eight;
		case '9': return nine;
		default:  return none;
	}
}
 128:	08 95       	ret

0000012a <writeChar>:

void writeChar(char ch, uint8_t pos) {
 12a:	cf 93       	push	r28
	//check if outside range
	if (pos > 4 || pos < 0) return;
 12c:	65 30       	cpi	r22, 0x05	; 5
 12e:	08 f0       	brcs	.+2      	; 0x132 <writeChar+0x8>
 130:	e4 c0       	rjmp	.+456    	; 0x2fa <writeChar+0x1d0>
 132:	c6 2f       	mov	r28, r22

	//get correct char data
	int* segment = getSegmentForChar(ch);
 134:	0e 94 6a 00 	call	0xd4	; 0xd4 <getSegmentForChar>
 138:	fc 01       	movw	r30, r24
	
	//chose position
	switch (pos) {
 13a:	c2 30       	cpi	r28, 0x02	; 2
 13c:	09 f4       	brne	.+2      	; 0x140 <writeChar+0x16>
 13e:	67 c0       	rjmp	.+206    	; 0x20e <writeChar+0xe4>
 140:	28 f4       	brcc	.+10     	; 0x14c <writeChar+0x22>
 142:	cc 23       	and	r28, r28
 144:	51 f0       	breq	.+20     	; 0x15a <writeChar+0x30>
 146:	c1 30       	cpi	r28, 0x01	; 1
 148:	29 f1       	breq	.+74     	; 0x194 <writeChar+0x6a>
 14a:	d7 c0       	rjmp	.+430    	; 0x2fa <writeChar+0x1d0>
 14c:	c3 30       	cpi	r28, 0x03	; 3
 14e:	09 f4       	brne	.+2      	; 0x152 <writeChar+0x28>
 150:	7b c0       	rjmp	.+246    	; 0x248 <writeChar+0x11e>
 152:	c4 30       	cpi	r28, 0x04	; 4
 154:	09 f4       	brne	.+2      	; 0x158 <writeChar+0x2e>
 156:	b5 c0       	rjmp	.+362    	; 0x2c2 <writeChar+0x198>
 158:	d0 c0       	rjmp	.+416    	; 0x2fa <writeChar+0x1d0>
		case 0:
		//segment start at 0, 5, 10, 15, higher 4 bits.
		//(LCDDR0 & 0xF0) clears the segment before writing
		LCDDR0 = (LCDDR0 & 0xF0) | segment[0];
 15a:	ac ee       	ldi	r26, 0xEC	; 236
 15c:	b0 e0       	ldi	r27, 0x00	; 0
 15e:	8c 91       	ld	r24, X
 160:	80 7f       	andi	r24, 0xF0	; 240
 162:	90 81       	ld	r25, Z
 164:	89 2b       	or	r24, r25
 166:	8c 93       	st	X, r24
		LCDDR5 = (LCDDR5 & 0xF0) | segment[1];
 168:	a1 ef       	ldi	r26, 0xF1	; 241
 16a:	b0 e0       	ldi	r27, 0x00	; 0
 16c:	8c 91       	ld	r24, X
 16e:	80 7f       	andi	r24, 0xF0	; 240
 170:	92 81       	ldd	r25, Z+2	; 0x02
 172:	89 2b       	or	r24, r25
 174:	8c 93       	st	X, r24
		LCDDR10 = (LCDDR10 & 0xF0) | segment[2];
 176:	a6 ef       	ldi	r26, 0xF6	; 246
 178:	b0 e0       	ldi	r27, 0x00	; 0
 17a:	8c 91       	ld	r24, X
 17c:	80 7f       	andi	r24, 0xF0	; 240
 17e:	94 81       	ldd	r25, Z+4	; 0x04
 180:	89 2b       	or	r24, r25
 182:	8c 93       	st	X, r24
		LCDDR15 = (LCDDR15 & 0xF0) | segment[3];
 184:	ab ef       	ldi	r26, 0xFB	; 251
 186:	b0 e0       	ldi	r27, 0x00	; 0
 188:	8c 91       	ld	r24, X
 18a:	80 7f       	andi	r24, 0xF0	; 240
 18c:	96 81       	ldd	r25, Z+6	; 0x06
 18e:	89 2b       	or	r24, r25
 190:	8c 93       	st	X, r24
		break;
 192:	b3 c0       	rjmp	.+358    	; 0x2fa <writeChar+0x1d0>
		case 1:
		//same segment just lower 4 bits
		LCDDR0 = (LCDDR0 & 0x0F) | (segment[0] << 4);
 194:	ac ee       	ldi	r26, 0xEC	; 236
 196:	b0 e0       	ldi	r27, 0x00	; 0
 198:	2c 91       	ld	r18, X
 19a:	80 81       	ld	r24, Z
 19c:	91 81       	ldd	r25, Z+1	; 0x01
 19e:	82 95       	swap	r24
 1a0:	92 95       	swap	r25
 1a2:	90 7f       	andi	r25, 0xF0	; 240
 1a4:	98 27       	eor	r25, r24
 1a6:	80 7f       	andi	r24, 0xF0	; 240
 1a8:	98 27       	eor	r25, r24
 1aa:	92 2f       	mov	r25, r18
 1ac:	9f 70       	andi	r25, 0x0F	; 15
 1ae:	89 2b       	or	r24, r25
 1b0:	8c 93       	st	X, r24
		LCDDR5 = (LCDDR5 & 0x0F) | (segment[1] << 4);
 1b2:	a1 ef       	ldi	r26, 0xF1	; 241
 1b4:	b0 e0       	ldi	r27, 0x00	; 0
 1b6:	2c 91       	ld	r18, X
 1b8:	82 81       	ldd	r24, Z+2	; 0x02
 1ba:	93 81       	ldd	r25, Z+3	; 0x03
 1bc:	82 95       	swap	r24
 1be:	92 95       	swap	r25
 1c0:	90 7f       	andi	r25, 0xF0	; 240
 1c2:	98 27       	eor	r25, r24
 1c4:	80 7f       	andi	r24, 0xF0	; 240
 1c6:	98 27       	eor	r25, r24
 1c8:	92 2f       	mov	r25, r18
 1ca:	9f 70       	andi	r25, 0x0F	; 15
 1cc:	89 2b       	or	r24, r25
 1ce:	8c 93       	st	X, r24
		LCDDR10 = (LCDDR10 & 0x0F) | (segment[2] << 4);
 1d0:	a6 ef       	ldi	r26, 0xF6	; 246
 1d2:	b0 e0       	ldi	r27, 0x00	; 0
 1d4:	2c 91       	ld	r18, X
 1d6:	84 81       	ldd	r24, Z+4	; 0x04
 1d8:	95 81       	ldd	r25, Z+5	; 0x05
 1da:	82 95       	swap	r24
 1dc:	92 95       	swap	r25
 1de:	90 7f       	andi	r25, 0xF0	; 240
 1e0:	98 27       	eor	r25, r24
 1e2:	80 7f       	andi	r24, 0xF0	; 240
 1e4:	98 27       	eor	r25, r24
 1e6:	92 2f       	mov	r25, r18
 1e8:	9f 70       	andi	r25, 0x0F	; 15
 1ea:	89 2b       	or	r24, r25
 1ec:	8c 93       	st	X, r24
		LCDDR15 = (LCDDR15 & 0x0F) | (segment[3] << 4);
 1ee:	ab ef       	ldi	r26, 0xFB	; 251
 1f0:	b0 e0       	ldi	r27, 0x00	; 0
 1f2:	2c 91       	ld	r18, X
 1f4:	86 81       	ldd	r24, Z+6	; 0x06
 1f6:	97 81       	ldd	r25, Z+7	; 0x07
 1f8:	82 95       	swap	r24
 1fa:	92 95       	swap	r25
 1fc:	90 7f       	andi	r25, 0xF0	; 240
 1fe:	98 27       	eor	r25, r24
 200:	80 7f       	andi	r24, 0xF0	; 240
 202:	98 27       	eor	r25, r24
 204:	92 2f       	mov	r25, r18
 206:	9f 70       	andi	r25, 0x0F	; 15
 208:	89 2b       	or	r24, r25
 20a:	8c 93       	st	X, r24
		break;
 20c:	76 c0       	rjmp	.+236    	; 0x2fa <writeChar+0x1d0>
		case 2:
		LCDDR1 = (LCDDR1 & 0xF0) | segment[0];
 20e:	ad ee       	ldi	r26, 0xED	; 237
 210:	b0 e0       	ldi	r27, 0x00	; 0
 212:	8c 91       	ld	r24, X
 214:	80 7f       	andi	r24, 0xF0	; 240
 216:	90 81       	ld	r25, Z
 218:	89 2b       	or	r24, r25
 21a:	8c 93       	st	X, r24
		LCDDR6 = (LCDDR6 & 0xF0) | segment[1];
 21c:	a2 ef       	ldi	r26, 0xF2	; 242
 21e:	b0 e0       	ldi	r27, 0x00	; 0
 220:	8c 91       	ld	r24, X
 222:	80 7f       	andi	r24, 0xF0	; 240
 224:	92 81       	ldd	r25, Z+2	; 0x02
 226:	89 2b       	or	r24, r25
 228:	8c 93       	st	X, r24
		LCDDR11 = (LCDDR11 & 0xF0) | segment[2];
 22a:	a7 ef       	ldi	r26, 0xF7	; 247
 22c:	b0 e0       	ldi	r27, 0x00	; 0
 22e:	8c 91       	ld	r24, X
 230:	80 7f       	andi	r24, 0xF0	; 240
 232:	94 81       	ldd	r25, Z+4	; 0x04
 234:	89 2b       	or	r24, r25
 236:	8c 93       	st	X, r24
		LCDDR16 = (LCDDR16 & 0xF0) | segment[3];
 238:	ac ef       	ldi	r26, 0xFC	; 252
 23a:	b0 e0       	ldi	r27, 0x00	; 0
 23c:	8c 91       	ld	r24, X
 23e:	80 7f       	andi	r24, 0xF0	; 240
 240:	96 81       	ldd	r25, Z+6	; 0x06
 242:	89 2b       	or	r24, r25
 244:	8c 93       	st	X, r24
		break;
 246:	59 c0       	rjmp	.+178    	; 0x2fa <writeChar+0x1d0>
		case 3:
		LCDDR1 = (LCDDR1 & 0x0F) | (segment[0] << 4);
 248:	ad ee       	ldi	r26, 0xED	; 237
 24a:	b0 e0       	ldi	r27, 0x00	; 0
 24c:	2c 91       	ld	r18, X
 24e:	80 81       	ld	r24, Z
 250:	91 81       	ldd	r25, Z+1	; 0x01
 252:	82 95       	swap	r24
 254:	92 95       	swap	r25
 256:	90 7f       	andi	r25, 0xF0	; 240
 258:	98 27       	eor	r25, r24
 25a:	80 7f       	andi	r24, 0xF0	; 240
 25c:	98 27       	eor	r25, r24
 25e:	92 2f       	mov	r25, r18
 260:	9f 70       	andi	r25, 0x0F	; 15
 262:	89 2b       	or	r24, r25
 264:	8c 93       	st	X, r24
		LCDDR6 = (LCDDR6 & 0x0F) | (segment[1] << 4);
 266:	a2 ef       	ldi	r26, 0xF2	; 242
 268:	b0 e0       	ldi	r27, 0x00	; 0
 26a:	2c 91       	ld	r18, X
 26c:	82 81       	ldd	r24, Z+2	; 0x02
 26e:	93 81       	ldd	r25, Z+3	; 0x03
 270:	82 95       	swap	r24
 272:	92 95       	swap	r25
 274:	90 7f       	andi	r25, 0xF0	; 240
 276:	98 27       	eor	r25, r24
 278:	80 7f       	andi	r24, 0xF0	; 240
 27a:	98 27       	eor	r25, r24
 27c:	92 2f       	mov	r25, r18
 27e:	9f 70       	andi	r25, 0x0F	; 15
 280:	89 2b       	or	r24, r25
 282:	8c 93       	st	X, r24
		LCDDR11 = (LCDDR11 & 0x0F) | (segment[2] << 4);
 284:	a7 ef       	ldi	r26, 0xF7	; 247
 286:	b0 e0       	ldi	r27, 0x00	; 0
 288:	2c 91       	ld	r18, X
 28a:	84 81       	ldd	r24, Z+4	; 0x04
 28c:	95 81       	ldd	r25, Z+5	; 0x05
 28e:	82 95       	swap	r24
 290:	92 95       	swap	r25
 292:	90 7f       	andi	r25, 0xF0	; 240
 294:	98 27       	eor	r25, r24
 296:	80 7f       	andi	r24, 0xF0	; 240
 298:	98 27       	eor	r25, r24
 29a:	92 2f       	mov	r25, r18
 29c:	9f 70       	andi	r25, 0x0F	; 15
 29e:	89 2b       	or	r24, r25
 2a0:	8c 93       	st	X, r24
		LCDDR16 = (LCDDR16 & 0x0F) | (segment[3] << 4);
 2a2:	ac ef       	ldi	r26, 0xFC	; 252
 2a4:	b0 e0       	ldi	r27, 0x00	; 0
 2a6:	2c 91       	ld	r18, X
 2a8:	86 81       	ldd	r24, Z+6	; 0x06
 2aa:	97 81       	ldd	r25, Z+7	; 0x07
 2ac:	82 95       	swap	r24
 2ae:	92 95       	swap	r25
 2b0:	90 7f       	andi	r25, 0xF0	; 240
 2b2:	98 27       	eor	r25, r24
 2b4:	80 7f       	andi	r24, 0xF0	; 240
 2b6:	98 27       	eor	r25, r24
 2b8:	92 2f       	mov	r25, r18
 2ba:	9f 70       	andi	r25, 0x0F	; 15
 2bc:	89 2b       	or	r24, r25
 2be:	8c 93       	st	X, r24
		break;
 2c0:	1c c0       	rjmp	.+56     	; 0x2fa <writeChar+0x1d0>
		case 4:
		LCDDR2 = (LCDDR2 & 0xF0) | segment[0];
 2c2:	ae ee       	ldi	r26, 0xEE	; 238
 2c4:	b0 e0       	ldi	r27, 0x00	; 0
 2c6:	8c 91       	ld	r24, X
 2c8:	80 7f       	andi	r24, 0xF0	; 240
 2ca:	90 81       	ld	r25, Z
 2cc:	89 2b       	or	r24, r25
 2ce:	8c 93       	st	X, r24
		LCDDR7 = (LCDDR7 & 0xF0) | segment[1];
 2d0:	a3 ef       	ldi	r26, 0xF3	; 243
 2d2:	b0 e0       	ldi	r27, 0x00	; 0
 2d4:	8c 91       	ld	r24, X
 2d6:	80 7f       	andi	r24, 0xF0	; 240
 2d8:	92 81       	ldd	r25, Z+2	; 0x02
 2da:	89 2b       	or	r24, r25
 2dc:	8c 93       	st	X, r24
		LCDDR12 = (LCDDR12 & 0xF0) | segment[2];
 2de:	a8 ef       	ldi	r26, 0xF8	; 248
 2e0:	b0 e0       	ldi	r27, 0x00	; 0
 2e2:	8c 91       	ld	r24, X
 2e4:	80 7f       	andi	r24, 0xF0	; 240
 2e6:	94 81       	ldd	r25, Z+4	; 0x04
 2e8:	89 2b       	or	r24, r25
 2ea:	8c 93       	st	X, r24
		LCDDR17 = (LCDDR17 & 0xF0) | segment[3];
 2ec:	ad ef       	ldi	r26, 0xFD	; 253
 2ee:	b0 e0       	ldi	r27, 0x00	; 0
 2f0:	8c 91       	ld	r24, X
 2f2:	80 7f       	andi	r24, 0xF0	; 240
 2f4:	96 81       	ldd	r25, Z+6	; 0x06
 2f6:	89 2b       	or	r24, r25
 2f8:	8c 93       	st	X, r24
		break;
	}
}
 2fa:	cf 91       	pop	r28
 2fc:	08 95       	ret

000002fe <is_prime>:

bool is_prime(int number)
{
 2fe:	fc 01       	movw	r30, r24
	//0 and 1 are not prime numbers
	if (number <= 1) return false;
 300:	82 30       	cpi	r24, 0x02	; 2
 302:	91 05       	cpc	r25, r1
 304:	1c f1       	brlt	.+70     	; 0x34c <is_prime+0x4e>

	//loop from 2 to sqrt(number)
	for (int i=2; i*i <= number; i++)
 306:	84 30       	cpi	r24, 0x04	; 4
 308:	91 05       	cpc	r25, r1
 30a:	14 f1       	brlt	.+68     	; 0x350 <is_prime+0x52>
	{
		if (number % i == 0) return false;    //divisible => not prime
 30c:	81 70       	andi	r24, 0x01	; 1
 30e:	90 78       	andi	r25, 0x80	; 128
 310:	99 23       	and	r25, r25
 312:	24 f4       	brge	.+8      	; 0x31c <is_prime+0x1e>
 314:	01 97       	sbiw	r24, 0x01	; 1
 316:	8e 6f       	ori	r24, 0xFE	; 254
 318:	9f 6f       	ori	r25, 0xFF	; 255
 31a:	01 96       	adiw	r24, 0x01	; 1
 31c:	89 2b       	or	r24, r25
 31e:	d1 f0       	breq	.+52     	; 0x354 <is_prime+0x56>
 320:	22 e0       	ldi	r18, 0x02	; 2
 322:	30 e0       	ldi	r19, 0x00	; 0
 324:	06 c0       	rjmp	.+12     	; 0x332 <is_prime+0x34>
 326:	cf 01       	movw	r24, r30
 328:	b9 01       	movw	r22, r18
 32a:	0e 94 33 03 	call	0x666	; 0x666 <__divmodhi4>
 32e:	89 2b       	or	r24, r25
 330:	99 f0       	breq	.+38     	; 0x358 <is_prime+0x5a>
{
	//0 and 1 are not prime numbers
	if (number <= 1) return false;

	//loop from 2 to sqrt(number)
	for (int i=2; i*i <= number; i++)
 332:	2f 5f       	subi	r18, 0xFF	; 255
 334:	3f 4f       	sbci	r19, 0xFF	; 255
 336:	22 9f       	mul	r18, r18
 338:	c0 01       	movw	r24, r0
 33a:	23 9f       	mul	r18, r19
 33c:	90 0d       	add	r25, r0
 33e:	90 0d       	add	r25, r0
 340:	11 24       	eor	r1, r1
 342:	e8 17       	cp	r30, r24
 344:	f9 07       	cpc	r31, r25
 346:	7c f7       	brge	.-34     	; 0x326 <is_prime+0x28>
	{
		if (number % i == 0) return false;    //divisible => not prime
	}
	//is prime if no factors
	return true;
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	08 95       	ret
}

bool is_prime(int number)
{
	//0 and 1 are not prime numbers
	if (number <= 1) return false;
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	08 95       	ret
	for (int i=2; i*i <= number; i++)
	{
		if (number % i == 0) return false;    //divisible => not prime
	}
	//is prime if no factors
	return true;
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	08 95       	ret
	if (number <= 1) return false;

	//loop from 2 to sqrt(number)
	for (int i=2; i*i <= number; i++)
	{
		if (number % i == 0) return false;    //divisible => not prime
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	08 95       	ret
 358:	80 e0       	ldi	r24, 0x00	; 0
	}
	//is prime if no factors
	return true;
}
 35a:	08 95       	ret

0000035c <printAt>:

void printAt(long num, int pos) {
 35c:	8f 92       	push	r8
 35e:	9f 92       	push	r9
 360:	af 92       	push	r10
 362:	bf 92       	push	r11
 364:	cf 92       	push	r12
 366:	df 92       	push	r13
 368:	ef 92       	push	r14
 36a:	ff 92       	push	r15
 36c:	cf 93       	push	r28
 36e:	df 93       	push	r29
 370:	4b 01       	movw	r8, r22
 372:	5c 01       	movw	r10, r24
 374:	ea 01       	movw	r28, r20
    int pp = pos;
    writeChar( (num % 100) / 10 + '0', pp);
 376:	24 e6       	ldi	r18, 0x64	; 100
 378:	30 e0       	ldi	r19, 0x00	; 0
 37a:	40 e0       	ldi	r20, 0x00	; 0
 37c:	50 e0       	ldi	r21, 0x00	; 0
 37e:	0e 94 47 03 	call	0x68e	; 0x68e <__divmodsi4>
 382:	0f 2e       	mov	r0, r31
 384:	fa e0       	ldi	r31, 0x0A	; 10
 386:	cf 2e       	mov	r12, r31
 388:	d1 2c       	mov	r13, r1
 38a:	e1 2c       	mov	r14, r1
 38c:	f1 2c       	mov	r15, r1
 38e:	f0 2d       	mov	r31, r0
 390:	a7 01       	movw	r20, r14
 392:	96 01       	movw	r18, r12
 394:	0e 94 47 03 	call	0x68e	; 0x68e <__divmodsi4>
 398:	6c 2f       	mov	r22, r28
 39a:	80 e3       	ldi	r24, 0x30	; 48
 39c:	82 0f       	add	r24, r18
 39e:	0e 94 95 00 	call	0x12a	; 0x12a <writeChar>
    pp++;
    writeChar( num % 10 + '0', pp);
 3a2:	21 96       	adiw	r28, 0x01	; 1
 3a4:	c5 01       	movw	r24, r10
 3a6:	b4 01       	movw	r22, r8
 3a8:	a7 01       	movw	r20, r14
 3aa:	96 01       	movw	r18, r12
 3ac:	0e 94 47 03 	call	0x68e	; 0x68e <__divmodsi4>
 3b0:	86 2f       	mov	r24, r22
 3b2:	6c 2f       	mov	r22, r28
 3b4:	80 5d       	subi	r24, 0xD0	; 208
 3b6:	0e 94 95 00 	call	0x12a	; 0x12a <writeChar>
}
 3ba:	df 91       	pop	r29
 3bc:	cf 91       	pop	r28
 3be:	ff 90       	pop	r15
 3c0:	ef 90       	pop	r14
 3c2:	df 90       	pop	r13
 3c4:	cf 90       	pop	r12
 3c6:	bf 90       	pop	r11
 3c8:	af 90       	pop	r10
 3ca:	9f 90       	pop	r9
 3cc:	8f 90       	pop	r8
 3ce:	08 95       	ret

000003d0 <computePrimes>:

void computePrimes(int pos) {
 3d0:	ec 01       	movw	r28, r24
    long n;

    for(n = 1; ; n++) {
 3d2:	c1 2c       	mov	r12, r1
 3d4:	d1 2c       	mov	r13, r1
 3d6:	76 01       	movw	r14, r12
 3d8:	c3 94       	inc	r12
        if (is_prime(n)) {
 3da:	c6 01       	movw	r24, r12
 3dc:	0e 94 7f 01 	call	0x2fe	; 0x2fe <is_prime>
 3e0:	88 23       	and	r24, r24
 3e2:	29 f0       	breq	.+10     	; 0x3ee <computePrimes+0x1e>
            printAt(n, pos);
 3e4:	ae 01       	movw	r20, r28
 3e6:	c7 01       	movw	r24, r14
 3e8:	b6 01       	movw	r22, r12
 3ea:	0e 94 ae 01 	call	0x35c	; 0x35c <printAt>
}

void computePrimes(int pos) {
    long n;

    for(n = 1; ; n++) {
 3ee:	8f ef       	ldi	r24, 0xFF	; 255
 3f0:	c8 1a       	sub	r12, r24
 3f2:	d8 0a       	sbc	r13, r24
 3f4:	e8 0a       	sbc	r14, r24
 3f6:	f8 0a       	sbc	r15, r24
        if (is_prime(n)) {
            printAt(n, pos);
        }
    }
 3f8:	f0 cf       	rjmp	.-32     	; 0x3da <computePrimes+0xa>

000003fa <main>:
// ISR(PCINT1_vect) {
// 	yield();
//

int main() {
	init();
 3fa:	0e 94 57 00 	call	0xae	; 0xae <init>
	LCD_init();
 3fe:	0e 94 5d 00 	call	0xba	; 0xba <LCD_init>
    spawn(computePrimes, 0);
 402:	60 e0       	ldi	r22, 0x00	; 0
 404:	70 e0       	ldi	r23, 0x00	; 0
 406:	88 ee       	ldi	r24, 0xE8	; 232
 408:	91 e0       	ldi	r25, 0x01	; 1
 40a:	0e 94 42 02 	call	0x484	; 0x484 <spawn>
    computePrimes(3);
 40e:	83 e0       	ldi	r24, 0x03	; 3
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <computePrimes>

00000416 <enqueue>:

void lock(mutex *m) {

}

void unlock(mutex *m) {
 416:	dc 01       	movw	r26, r24
 418:	15 96       	adiw	r26, 0x05	; 5
 41a:	1c 92       	st	X, r1
 41c:	1e 92       	st	-X, r1
 41e:	14 97       	sbiw	r26, 0x04	; 4
 420:	db 01       	movw	r26, r22
 422:	ed 91       	ld	r30, X+
 424:	fc 91       	ld	r31, X
 426:	11 97       	sbiw	r26, 0x01	; 1
 428:	30 97       	sbiw	r30, 0x00	; 0
 42a:	21 f4       	brne	.+8      	; 0x434 <enqueue+0x1e>
 42c:	8d 93       	st	X+, r24
 42e:	9c 93       	st	X, r25
 430:	08 95       	ret
 432:	f9 01       	movw	r30, r18
 434:	24 81       	ldd	r18, Z+4	; 0x04
 436:	35 81       	ldd	r19, Z+5	; 0x05
 438:	21 15       	cp	r18, r1
 43a:	31 05       	cpc	r19, r1
 43c:	d1 f7       	brne	.-12     	; 0x432 <enqueue+0x1c>
 43e:	95 83       	std	Z+5, r25	; 0x05
 440:	84 83       	std	Z+4, r24	; 0x04
 442:	08 95       	ret

00000444 <dispatch>:
 444:	cf 93       	push	r28
 446:	df 93       	push	r29
 448:	00 d0       	rcall	.+0      	; 0x44a <dispatch+0x6>
 44a:	cd b7       	in	r28, 0x3d	; 61
 44c:	de b7       	in	r29, 0x3e	; 62
 44e:	9a 83       	std	Y+2, r25	; 0x02
 450:	89 83       	std	Y+1, r24	; 0x01
 452:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <current>
 456:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <current+0x1>
 45a:	06 96       	adiw	r24, 0x06	; 6
 45c:	0e 94 a2 03 	call	0x744	; 0x744 <setjmp>
 460:	89 2b       	or	r24, r25
 462:	59 f4       	brne	.+22     	; 0x47a <dispatch+0x36>
 464:	89 81       	ldd	r24, Y+1	; 0x01
 466:	9a 81       	ldd	r25, Y+2	; 0x02
 468:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <current+0x1>
 46c:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <current>
 470:	61 e0       	ldi	r22, 0x01	; 1
 472:	70 e0       	ldi	r23, 0x00	; 0
 474:	06 96       	adiw	r24, 0x06	; 6
 476:	0e 94 c2 03 	call	0x784	; 0x784 <longjmp>
 47a:	0f 90       	pop	r0
 47c:	0f 90       	pop	r0
 47e:	df 91       	pop	r29
 480:	cf 91       	pop	r28
 482:	08 95       	ret

00000484 <spawn>:
 484:	cf 93       	push	r28
 486:	df 93       	push	r29
 488:	00 d0       	rcall	.+0      	; 0x48a <spawn+0x6>
 48a:	cd b7       	in	r28, 0x3d	; 61
 48c:	de b7       	in	r29, 0x3e	; 62
 48e:	f8 94       	cli
 490:	20 91 5c 01 	lds	r18, 0x015C	; 0x80015c <initialized>
 494:	30 91 5d 01 	lds	r19, 0x015D	; 0x80015d <initialized+0x1>
 498:	23 2b       	or	r18, r19
 49a:	29 f5       	brne	.+74     	; 0x4e6 <spawn+0x62>
 49c:	21 e0       	ldi	r18, 0x01	; 1
 49e:	30 e0       	ldi	r19, 0x00	; 0
 4a0:	30 93 5d 01 	sts	0x015D, r19	; 0x80015d <initialized+0x1>
 4a4:	20 93 5c 01 	sts	0x015C, r18	; 0x80015c <initialized>
 4a8:	2a e3       	ldi	r18, 0x3A	; 58
 4aa:	32 e0       	ldi	r19, 0x02	; 2
 4ac:	30 93 d2 01 	sts	0x01D2, r19	; 0x8001d2 <threads+0x5>
 4b0:	20 93 d1 01 	sts	0x01D1, r18	; 0x8001d1 <threads+0x4>
 4b4:	27 ea       	ldi	r18, 0xA7	; 167
 4b6:	32 e0       	ldi	r19, 0x02	; 2
 4b8:	30 93 3f 02 	sts	0x023F, r19	; 0x80023f <threads+0x72>
 4bc:	20 93 3e 02 	sts	0x023E, r18	; 0x80023e <threads+0x71>
 4c0:	24 e1       	ldi	r18, 0x14	; 20
 4c2:	33 e0       	ldi	r19, 0x03	; 3
 4c4:	30 93 ac 02 	sts	0x02AC, r19	; 0x8002ac <threads+0xdf>
 4c8:	20 93 ab 02 	sts	0x02AB, r18	; 0x8002ab <threads+0xde>
 4cc:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <threads+0x14c>
 4d0:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <threads+0x14b>
 4d4:	27 98       	cbi	0x04, 7	; 4
 4d6:	2f 9a       	sbi	0x05, 7	; 5
 4d8:	ec e6       	ldi	r30, 0x6C	; 108
 4da:	f0 e0       	ldi	r31, 0x00	; 0
 4dc:	20 81       	ld	r18, Z
 4de:	20 68       	ori	r18, 0x80	; 128
 4e0:	20 83       	st	Z, r18
 4e2:	ef 9a       	sbi	0x1d, 7	; 29
 4e4:	78 94       	sei
 4e6:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <freeQ>
 4ea:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <freeQ+0x1>
 4ee:	3a 83       	std	Y+2, r19	; 0x02
 4f0:	29 83       	std	Y+1, r18	; 0x01
 4f2:	23 2b       	or	r18, r19
 4f4:	a9 f0       	breq	.+42     	; 0x520 <__stack+0x21>
 4f6:	e9 81       	ldd	r30, Y+1	; 0x01
 4f8:	fa 81       	ldd	r31, Y+2	; 0x02
 4fa:	44 81       	ldd	r20, Z+4	; 0x04
 4fc:	55 81       	ldd	r21, Z+5	; 0x05
 4fe:	50 93 53 01 	sts	0x0153, r21	; 0x800153 <freeQ+0x1>
 502:	40 93 52 01 	sts	0x0152, r20	; 0x800152 <freeQ>
 506:	91 83       	std	Z+1, r25	; 0x01
 508:	80 83       	st	Z, r24
 50a:	73 83       	std	Z+3, r23	; 0x03
 50c:	62 83       	std	Z+2, r22	; 0x02
 50e:	15 82       	std	Z+5, r1	; 0x05
 510:	14 82       	std	Z+4, r1	; 0x04
 512:	cf 01       	movw	r24, r30
 514:	06 96       	adiw	r24, 0x06	; 6
 516:	0e 94 a2 03 	call	0x744	; 0x744 <setjmp>
 51a:	01 97       	sbiw	r24, 0x01	; 1
 51c:	49 f5       	brne	.+82     	; 0x570 <__stack+0x71>
 51e:	01 c0       	rjmp	.+2      	; 0x522 <__stack+0x23>
 520:	ff cf       	rjmp	.-2      	; 0x520 <__stack+0x21>
 522:	78 94       	sei
 524:	a0 91 50 01 	lds	r26, 0x0150	; 0x800150 <current>
 528:	b0 91 51 01 	lds	r27, 0x0151	; 0x800151 <current+0x1>
 52c:	ed 91       	ld	r30, X+
 52e:	fc 91       	ld	r31, X
 530:	11 97       	sbiw	r26, 0x01	; 1
 532:	12 96       	adiw	r26, 0x02	; 2
 534:	8d 91       	ld	r24, X+
 536:	9c 91       	ld	r25, X
 538:	13 97       	sbiw	r26, 0x03	; 3
 53a:	09 95       	icall
 53c:	f8 94       	cli
 53e:	62 e5       	ldi	r22, 0x52	; 82
 540:	71 e0       	ldi	r23, 0x01	; 1
 542:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <current>
 546:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <current+0x1>
 54a:	0e 94 0b 02 	call	0x416	; 0x416 <enqueue>
 54e:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <readyQ>
 552:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <readyQ+0x1>
 556:	00 97       	sbiw	r24, 0x00	; 0
 558:	51 f0       	breq	.+20     	; 0x56e <__stack+0x6f>
 55a:	fc 01       	movw	r30, r24
 55c:	24 81       	ldd	r18, Z+4	; 0x04
 55e:	35 81       	ldd	r19, Z+5	; 0x05
 560:	30 93 5f 01 	sts	0x015F, r19	; 0x80015f <readyQ+0x1>
 564:	20 93 5e 01 	sts	0x015E, r18	; 0x80015e <readyQ>
 568:	0e 94 22 02 	call	0x444	; 0x444 <dispatch>
 56c:	01 c0       	rjmp	.+2      	; 0x570 <__stack+0x71>
 56e:	ff cf       	rjmp	.-2      	; 0x56e <__stack+0x6f>
 570:	e9 81       	ldd	r30, Y+1	; 0x01
 572:	fa 81       	ldd	r31, Y+2	; 0x02
 574:	36 96       	adiw	r30, 0x06	; 6
 576:	89 81       	ldd	r24, Y+1	; 0x01
 578:	9a 81       	ldd	r25, Y+2	; 0x02
 57a:	87 59       	subi	r24, 0x97	; 151
 57c:	9f 4f       	sbci	r25, 0xFF	; 255
 57e:	91 8b       	std	Z+17, r25	; 0x11
 580:	80 8b       	std	Z+16, r24	; 0x10
 582:	93 8b       	std	Z+19, r25	; 0x13
 584:	82 8b       	std	Z+18, r24	; 0x12
 586:	6e e5       	ldi	r22, 0x5E	; 94
 588:	71 e0       	ldi	r23, 0x01	; 1
 58a:	89 81       	ldd	r24, Y+1	; 0x01
 58c:	9a 81       	ldd	r25, Y+2	; 0x02
 58e:	0e 94 0b 02 	call	0x416	; 0x416 <enqueue>
 592:	78 94       	sei
 594:	0f 90       	pop	r0
 596:	0f 90       	pop	r0
 598:	df 91       	pop	r29
 59a:	cf 91       	pop	r28
 59c:	08 95       	ret

0000059e <yield>:
 59e:	f8 94       	cli
 5a0:	6e e5       	ldi	r22, 0x5E	; 94
 5a2:	71 e0       	ldi	r23, 0x01	; 1
 5a4:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <current>
 5a8:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <current+0x1>
 5ac:	0e 94 0b 02 	call	0x416	; 0x416 <enqueue>
 5b0:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <readyQ>
 5b4:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <readyQ+0x1>
 5b8:	00 97       	sbiw	r24, 0x00	; 0
 5ba:	59 f0       	breq	.+22     	; 0x5d2 <yield+0x34>
 5bc:	fc 01       	movw	r30, r24
 5be:	24 81       	ldd	r18, Z+4	; 0x04
 5c0:	35 81       	ldd	r19, Z+5	; 0x05
 5c2:	30 93 5f 01 	sts	0x015F, r19	; 0x80015f <readyQ+0x1>
 5c6:	20 93 5e 01 	sts	0x015E, r18	; 0x80015e <readyQ>
 5ca:	0e 94 22 02 	call	0x444	; 0x444 <dispatch>
 5ce:	78 94       	sei
 5d0:	08 95       	ret
 5d2:	ff cf       	rjmp	.-2      	; 0x5d2 <yield+0x34>

000005d4 <__vector_3>:

}

ISR(PCINT1_vect) {
 5d4:	1f 92       	push	r1
 5d6:	0f 92       	push	r0
 5d8:	0f b6       	in	r0, 0x3f	; 63
 5da:	0f 92       	push	r0
 5dc:	11 24       	eor	r1, r1
 5de:	2f 93       	push	r18
 5e0:	3f 93       	push	r19
 5e2:	4f 93       	push	r20
 5e4:	5f 93       	push	r21
 5e6:	6f 93       	push	r22
 5e8:	7f 93       	push	r23
 5ea:	8f 93       	push	r24
 5ec:	9f 93       	push	r25
 5ee:	af 93       	push	r26
 5f0:	bf 93       	push	r27
 5f2:	ef 93       	push	r30
 5f4:	ff 93       	push	r31
	if (!(PINB & (1 << PINB7))) { // Check if PORTB pin 7 is low (joystick pressed)
 5f6:	1f 9b       	sbis	0x03, 7	; 3
		yield(); // Call yield() to switch threads
 5f8:	0e 94 cf 02 	call	0x59e	; 0x59e <yield>
	}
}
 5fc:	ff 91       	pop	r31
 5fe:	ef 91       	pop	r30
 600:	bf 91       	pop	r27
 602:	af 91       	pop	r26
 604:	9f 91       	pop	r25
 606:	8f 91       	pop	r24
 608:	7f 91       	pop	r23
 60a:	6f 91       	pop	r22
 60c:	5f 91       	pop	r21
 60e:	4f 91       	pop	r20
 610:	3f 91       	pop	r19
 612:	2f 91       	pop	r18
 614:	0f 90       	pop	r0
 616:	0f be       	out	0x3f, r0	; 63
 618:	0f 90       	pop	r0
 61a:	1f 90       	pop	r1
 61c:	18 95       	reti

0000061e <__vector_7>:

ISR(TIMER1_COMPA_vect) {
 61e:	1f 92       	push	r1
 620:	0f 92       	push	r0
 622:	0f b6       	in	r0, 0x3f	; 63
 624:	0f 92       	push	r0
 626:	11 24       	eor	r1, r1
 628:	2f 93       	push	r18
 62a:	3f 93       	push	r19
 62c:	4f 93       	push	r20
 62e:	5f 93       	push	r21
 630:	6f 93       	push	r22
 632:	7f 93       	push	r23
 634:	8f 93       	push	r24
 636:	9f 93       	push	r25
 638:	af 93       	push	r26
 63a:	bf 93       	push	r27
 63c:	ef 93       	push	r30
 63e:	ff 93       	push	r31
	yield(); // Call yield() to switch threads
 640:	0e 94 cf 02 	call	0x59e	; 0x59e <yield>
 644:	ff 91       	pop	r31
 646:	ef 91       	pop	r30
 648:	bf 91       	pop	r27
 64a:	af 91       	pop	r26
 64c:	9f 91       	pop	r25
 64e:	8f 91       	pop	r24
 650:	7f 91       	pop	r23
 652:	6f 91       	pop	r22
 654:	5f 91       	pop	r21
 656:	4f 91       	pop	r20
 658:	3f 91       	pop	r19
 65a:	2f 91       	pop	r18
 65c:	0f 90       	pop	r0
 65e:	0f be       	out	0x3f, r0	; 63
 660:	0f 90       	pop	r0
 662:	1f 90       	pop	r1
 664:	18 95       	reti

00000666 <__divmodhi4>:
 666:	97 fb       	bst	r25, 7
 668:	07 2e       	mov	r0, r23
 66a:	16 f4       	brtc	.+4      	; 0x670 <__divmodhi4+0xa>
 66c:	00 94       	com	r0
 66e:	07 d0       	rcall	.+14     	; 0x67e <__divmodhi4_neg1>
 670:	77 fd       	sbrc	r23, 7
 672:	09 d0       	rcall	.+18     	; 0x686 <__divmodhi4_neg2>
 674:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <__udivmodhi4>
 678:	07 fc       	sbrc	r0, 7
 67a:	05 d0       	rcall	.+10     	; 0x686 <__divmodhi4_neg2>
 67c:	3e f4       	brtc	.+14     	; 0x68c <__divmodhi4_exit>

0000067e <__divmodhi4_neg1>:
 67e:	90 95       	com	r25
 680:	81 95       	neg	r24
 682:	9f 4f       	sbci	r25, 0xFF	; 255
 684:	08 95       	ret

00000686 <__divmodhi4_neg2>:
 686:	70 95       	com	r23
 688:	61 95       	neg	r22
 68a:	7f 4f       	sbci	r23, 0xFF	; 255

0000068c <__divmodhi4_exit>:
 68c:	08 95       	ret

0000068e <__divmodsi4>:
 68e:	05 2e       	mov	r0, r21
 690:	97 fb       	bst	r25, 7
 692:	1e f4       	brtc	.+6      	; 0x69a <__divmodsi4+0xc>
 694:	00 94       	com	r0
 696:	0e 94 5e 03 	call	0x6bc	; 0x6bc <__negsi2>
 69a:	57 fd       	sbrc	r21, 7
 69c:	07 d0       	rcall	.+14     	; 0x6ac <__divmodsi4_neg2>
 69e:	0e 94 80 03 	call	0x700	; 0x700 <__udivmodsi4>
 6a2:	07 fc       	sbrc	r0, 7
 6a4:	03 d0       	rcall	.+6      	; 0x6ac <__divmodsi4_neg2>
 6a6:	4e f4       	brtc	.+18     	; 0x6ba <__divmodsi4_exit>
 6a8:	0c 94 5e 03 	jmp	0x6bc	; 0x6bc <__negsi2>

000006ac <__divmodsi4_neg2>:
 6ac:	50 95       	com	r21
 6ae:	40 95       	com	r20
 6b0:	30 95       	com	r19
 6b2:	21 95       	neg	r18
 6b4:	3f 4f       	sbci	r19, 0xFF	; 255
 6b6:	4f 4f       	sbci	r20, 0xFF	; 255
 6b8:	5f 4f       	sbci	r21, 0xFF	; 255

000006ba <__divmodsi4_exit>:
 6ba:	08 95       	ret

000006bc <__negsi2>:
 6bc:	90 95       	com	r25
 6be:	80 95       	com	r24
 6c0:	70 95       	com	r23
 6c2:	61 95       	neg	r22
 6c4:	7f 4f       	sbci	r23, 0xFF	; 255
 6c6:	8f 4f       	sbci	r24, 0xFF	; 255
 6c8:	9f 4f       	sbci	r25, 0xFF	; 255
 6ca:	08 95       	ret

000006cc <__tablejump2__>:
 6cc:	ee 0f       	add	r30, r30
 6ce:	ff 1f       	adc	r31, r31
 6d0:	05 90       	lpm	r0, Z+
 6d2:	f4 91       	lpm	r31, Z
 6d4:	e0 2d       	mov	r30, r0
 6d6:	09 94       	ijmp

000006d8 <__udivmodhi4>:
 6d8:	aa 1b       	sub	r26, r26
 6da:	bb 1b       	sub	r27, r27
 6dc:	51 e1       	ldi	r21, 0x11	; 17
 6de:	07 c0       	rjmp	.+14     	; 0x6ee <__udivmodhi4_ep>

000006e0 <__udivmodhi4_loop>:
 6e0:	aa 1f       	adc	r26, r26
 6e2:	bb 1f       	adc	r27, r27
 6e4:	a6 17       	cp	r26, r22
 6e6:	b7 07       	cpc	r27, r23
 6e8:	10 f0       	brcs	.+4      	; 0x6ee <__udivmodhi4_ep>
 6ea:	a6 1b       	sub	r26, r22
 6ec:	b7 0b       	sbc	r27, r23

000006ee <__udivmodhi4_ep>:
 6ee:	88 1f       	adc	r24, r24
 6f0:	99 1f       	adc	r25, r25
 6f2:	5a 95       	dec	r21
 6f4:	a9 f7       	brne	.-22     	; 0x6e0 <__udivmodhi4_loop>
 6f6:	80 95       	com	r24
 6f8:	90 95       	com	r25
 6fa:	bc 01       	movw	r22, r24
 6fc:	cd 01       	movw	r24, r26
 6fe:	08 95       	ret

00000700 <__udivmodsi4>:
 700:	a1 e2       	ldi	r26, 0x21	; 33
 702:	1a 2e       	mov	r1, r26
 704:	aa 1b       	sub	r26, r26
 706:	bb 1b       	sub	r27, r27
 708:	fd 01       	movw	r30, r26
 70a:	0d c0       	rjmp	.+26     	; 0x726 <__udivmodsi4_ep>

0000070c <__udivmodsi4_loop>:
 70c:	aa 1f       	adc	r26, r26
 70e:	bb 1f       	adc	r27, r27
 710:	ee 1f       	adc	r30, r30
 712:	ff 1f       	adc	r31, r31
 714:	a2 17       	cp	r26, r18
 716:	b3 07       	cpc	r27, r19
 718:	e4 07       	cpc	r30, r20
 71a:	f5 07       	cpc	r31, r21
 71c:	20 f0       	brcs	.+8      	; 0x726 <__udivmodsi4_ep>
 71e:	a2 1b       	sub	r26, r18
 720:	b3 0b       	sbc	r27, r19
 722:	e4 0b       	sbc	r30, r20
 724:	f5 0b       	sbc	r31, r21

00000726 <__udivmodsi4_ep>:
 726:	66 1f       	adc	r22, r22
 728:	77 1f       	adc	r23, r23
 72a:	88 1f       	adc	r24, r24
 72c:	99 1f       	adc	r25, r25
 72e:	1a 94       	dec	r1
 730:	69 f7       	brne	.-38     	; 0x70c <__udivmodsi4_loop>
 732:	60 95       	com	r22
 734:	70 95       	com	r23
 736:	80 95       	com	r24
 738:	90 95       	com	r25
 73a:	9b 01       	movw	r18, r22
 73c:	ac 01       	movw	r20, r24
 73e:	bd 01       	movw	r22, r26
 740:	cf 01       	movw	r24, r30
 742:	08 95       	ret

00000744 <setjmp>:
 744:	dc 01       	movw	r26, r24
 746:	2d 92       	st	X+, r2
 748:	3d 92       	st	X+, r3
 74a:	4d 92       	st	X+, r4
 74c:	5d 92       	st	X+, r5
 74e:	6d 92       	st	X+, r6
 750:	7d 92       	st	X+, r7
 752:	8d 92       	st	X+, r8
 754:	9d 92       	st	X+, r9
 756:	ad 92       	st	X+, r10
 758:	bd 92       	st	X+, r11
 75a:	cd 92       	st	X+, r12
 75c:	dd 92       	st	X+, r13
 75e:	ed 92       	st	X+, r14
 760:	fd 92       	st	X+, r15
 762:	0d 93       	st	X+, r16
 764:	1d 93       	st	X+, r17
 766:	cd 93       	st	X+, r28
 768:	dd 93       	st	X+, r29
 76a:	ff 91       	pop	r31
 76c:	ef 91       	pop	r30
 76e:	8d b7       	in	r24, 0x3d	; 61
 770:	8d 93       	st	X+, r24
 772:	8e b7       	in	r24, 0x3e	; 62
 774:	8d 93       	st	X+, r24
 776:	8f b7       	in	r24, 0x3f	; 63
 778:	8d 93       	st	X+, r24
 77a:	ed 93       	st	X+, r30
 77c:	fd 93       	st	X+, r31
 77e:	88 27       	eor	r24, r24
 780:	99 27       	eor	r25, r25
 782:	09 94       	ijmp

00000784 <longjmp>:
 784:	dc 01       	movw	r26, r24
 786:	cb 01       	movw	r24, r22
 788:	81 30       	cpi	r24, 0x01	; 1
 78a:	91 05       	cpc	r25, r1
 78c:	81 1d       	adc	r24, r1
 78e:	2d 90       	ld	r2, X+
 790:	3d 90       	ld	r3, X+
 792:	4d 90       	ld	r4, X+
 794:	5d 90       	ld	r5, X+
 796:	6d 90       	ld	r6, X+
 798:	7d 90       	ld	r7, X+
 79a:	8d 90       	ld	r8, X+
 79c:	9d 90       	ld	r9, X+
 79e:	ad 90       	ld	r10, X+
 7a0:	bd 90       	ld	r11, X+
 7a2:	cd 90       	ld	r12, X+
 7a4:	dd 90       	ld	r13, X+
 7a6:	ed 90       	ld	r14, X+
 7a8:	fd 90       	ld	r15, X+
 7aa:	0d 91       	ld	r16, X+
 7ac:	1d 91       	ld	r17, X+
 7ae:	cd 91       	ld	r28, X+
 7b0:	dd 91       	ld	r29, X+
 7b2:	ed 91       	ld	r30, X+
 7b4:	fd 91       	ld	r31, X+
 7b6:	0d 90       	ld	r0, X+
 7b8:	f8 94       	cli
 7ba:	fe bf       	out	0x3e, r31	; 62
 7bc:	0f be       	out	0x3f, r0	; 63
 7be:	ed bf       	out	0x3d, r30	; 61
 7c0:	ed 91       	ld	r30, X+
 7c2:	fd 91       	ld	r31, X+
 7c4:	09 94       	ijmp

000007c6 <_exit>:
 7c6:	f8 94       	cli

000007c8 <__stop_program>:
 7c8:	ff cf       	rjmp	.-2      	; 0x7c8 <__stop_program>
