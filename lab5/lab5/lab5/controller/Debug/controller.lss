
controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000058  00800100  00001ffe  00002092  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ffe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000035b  00800158  00800158  000020ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000020ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000211c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000240  00000000  00000000  0000215c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000026d0  00000000  00000000  0000239c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fb0  00000000  00000000  00004a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000149d  00000000  00000000  00005a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b94  00000000  00000000  00006ebc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009fb  00000000  00000000  00007a50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002731  00000000  00000000  0000844b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f0  00000000  00000000  0000ab7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 c6 03 	jmp	0x78c	; 0x78c <__vector_1>
       8:	0c 94 32 04 	jmp	0x864	; 0x864 <__vector_2>
       c:	0c 94 9e 04 	jmp	0x93c	; 0x93c <__vector_3>
      10:	0c 94 0a 05 	jmp	0xa14	; 0xa14 <__vector_4>
      14:	0c 94 76 05 	jmp	0xaec	; 0xaec <__vector_5>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 4d 0c 	jmp	0x189a	; 0x189a <__vector_7>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 fb 0b 	jmp	0x17f6	; 0x17f6 <__vector_9>
      28:	0c 94 e2 05 	jmp	0xbc4	; 0xbc4 <__vector_10>
      2c:	0c 94 4e 06 	jmp	0xc9c	; 0xc9c <__vector_11>
      30:	0c 94 ba 06 	jmp	0xd74	; 0xd74 <__vector_12>
      34:	0c 94 26 07 	jmp	0xe4c	; 0xe4c <__vector_13>
      38:	0c 94 92 07 	jmp	0xf24	; 0xf24 <__vector_14>
      3c:	0c 94 fe 07 	jmp	0xffc	; 0xffc <__vector_15>
      40:	0c 94 6a 08 	jmp	0x10d4	; 0x10d4 <__vector_16>
      44:	0c 94 d6 08 	jmp	0x11ac	; 0x11ac <__vector_17>
      48:	0c 94 42 09 	jmp	0x1284	; 0x1284 <__vector_18>
      4c:	0c 94 ae 09 	jmp	0x135c	; 0x135c <__vector_19>
      50:	0c 94 1a 0a 	jmp	0x1434	; 0x1434 <__vector_20>
      54:	0c 94 86 0a 	jmp	0x150c	; 0x150c <__vector_21>
      58:	0c 94 f2 0a 	jmp	0x15e4	; 0x15e4 <__vector_22>
      5c:	8c 01       	movw	r16, r24
      5e:	6e 01       	movw	r12, r28
      60:	71 01       	movw	r14, r2
      62:	74 01       	movw	r14, r8
      64:	77 01       	movw	r14, r14
      66:	7a 01       	movw	r14, r20
      68:	7d 01       	movw	r14, r26
      6a:	80 01       	movw	r16, r0
      6c:	83 01       	movw	r16, r6
      6e:	86 01       	movw	r16, r12

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	11 e0       	ldi	r17, 0x01	; 1
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	ee ef       	ldi	r30, 0xFE	; 254
      84:	ff e1       	ldi	r31, 0x1F	; 31
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	a8 35       	cpi	r26, 0x58	; 88
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	24 e0       	ldi	r18, 0x04	; 4
      94:	a8 e5       	ldi	r26, 0x58	; 88
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	a3 3b       	cpi	r26, 0xB3	; 179
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <main>
      a6:	0c 94 fd 0f 	jmp	0x1ffa	; 0x1ffa <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <USART_Transmit>:
	updateDisplay(self);
}

void USART_Transmit(Backend *self, unsigned char data) {
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
      ae:	e0 ec       	ldi	r30, 0xC0	; 192
      b0:	f0 e0       	ldi	r31, 0x00	; 0
      b2:	80 81       	ld	r24, Z
      b4:	85 ff       	sbrs	r24, 5
      b6:	fd cf       	rjmp	.-6      	; 0xb2 <USART_Transmit+0x4>
	/* Put data into buffer, sends the data */
	UDR0 = data;
      b8:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fc0c6>
      bc:	08 95       	ret

000000be <addnorthQ>:
#define NORTH_GREEN 0b0001
#define NORTH_RED	0b0010
#define SOUTH_GREEN 0b0100
#define SOUTH_RED   0b1000

void addnorthQ(Backend *self) {
      be:	fc 01       	movw	r30, r24
	self->north_queue++;
      c0:	94 81       	ldd	r25, Z+4	; 0x04
      c2:	9f 5f       	subi	r25, 0xFF	; 255
      c4:	94 83       	std	Z+4, r25	; 0x04
      c6:	08 95       	ret

000000c8 <addsouthQ>:
}

void addsouthQ(Backend *self) {
      c8:	fc 01       	movw	r30, r24
	self->south_queue++;
      ca:	95 81       	ldd	r25, Z+5	; 0x05
      cc:	9f 5f       	subi	r25, 0xFF	; 255
      ce:	95 83       	std	Z+5, r25	; 0x05
      d0:	08 95       	ret

000000d2 <addBrdigeQ>:
}

void addBrdigeQ(Backend *self) {
      d2:	fc 01       	movw	r30, r24
	self->cars_on_bridge++;
      d4:	96 81       	ldd	r25, Z+6	; 0x06
      d6:	9f 5f       	subi	r25, 0xFF	; 255
      d8:	96 83       	std	Z+6, r25	; 0x06
      da:	08 95       	ret

000000dc <mainSimulation>:
}


void mainSimulation(Backend *self) {
      dc:	cf 92       	push	r12
      de:	df 92       	push	r13
      e0:	ef 92       	push	r14
      e2:	ff 92       	push	r15
      e4:	0f 93       	push	r16
      e6:	1f 93       	push	r17
      e8:	cf 93       	push	r28
      ea:	df 93       	push	r29
      ec:	8c 01       	movw	r16, r24
	// Calculate light on/off dynamicaly, how many more in north/south side, and deafult to 0 if divison by 0
	int northCarTime = (self->south_queue == 0) ? self->north_queue : (self->north_queue / self->south_queue);
      ee:	fc 01       	movw	r30, r24
      f0:	c5 81       	ldd	r28, Z+5	; 0x05
      f2:	c1 11       	cpse	r28, r1
      f4:	03 c0       	rjmp	.+6      	; 0xfc <mainSimulation+0x20>
      f6:	44 81       	ldd	r20, Z+4	; 0x04
      f8:	50 e0       	ldi	r21, 0x00	; 0
      fa:	07 c0       	rjmp	.+14     	; 0x10a <mainSimulation+0x2e>
      fc:	fc 01       	movw	r30, r24
      fe:	84 81       	ldd	r24, Z+4	; 0x04
     100:	6c 2f       	mov	r22, r28
     102:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <__udivmodqi4>
     106:	48 2f       	mov	r20, r24
     108:	50 e0       	ldi	r21, 0x00	; 0
	int southCarTime = (self->north_queue == 0) ? self->south_queue : (self->south_queue / self->north_queue);
     10a:	f8 01       	movw	r30, r16
     10c:	64 81       	ldd	r22, Z+4	; 0x04
     10e:	61 11       	cpse	r22, r1
     110:	02 c0       	rjmp	.+4      	; 0x116 <mainSimulation+0x3a>
     112:	d0 e0       	ldi	r29, 0x00	; 0
     114:	05 c0       	rjmp	.+10     	; 0x120 <mainSimulation+0x44>
     116:	8c 2f       	mov	r24, r28
     118:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <__udivmodqi4>
     11c:	c8 2f       	mov	r28, r24
     11e:	d0 e0       	ldi	r29, 0x00	; 0
	// Start movement in one direction
	SYNC(self, setNorthLightGreen, northCarTime);
     120:	6c ed       	ldi	r22, 0xDC	; 220
     122:	70 e0       	ldi	r23, 0x00	; 0
     124:	c8 01       	movw	r24, r16
     126:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <sync>
	// Wait (5 sec (passing time) + northCarTime) before switching direction
	AFTER(SEC(5), self, setSouthLightGreen, southCarTime);
     12a:	6e 01       	movw	r12, r28
     12c:	0f 2e       	mov	r0, r31
     12e:	f8 e1       	ldi	r31, 0x18	; 24
     130:	ef 2e       	mov	r14, r31
     132:	f1 e0       	ldi	r31, 0x01	; 1
     134:	ff 2e       	mov	r15, r31
     136:	f0 2d       	mov	r31, r0
     138:	20 e0       	ldi	r18, 0x00	; 0
     13a:	30 e0       	ldi	r19, 0x00	; 0
     13c:	a9 01       	movw	r20, r18
     13e:	6a e5       	ldi	r22, 0x5A	; 90
     140:	72 e6       	ldi	r23, 0x62	; 98
     142:	82 e0       	ldi	r24, 0x02	; 2
     144:	90 e0       	ldi	r25, 0x00	; 0
     146:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <async>
	// Wait more (+ southCarTime) time before looping
	int timePass = (5*1000) + (southCarTime*1000);
     14a:	28 ee       	ldi	r18, 0xE8	; 232
     14c:	33 e0       	ldi	r19, 0x03	; 3
     14e:	c2 9f       	mul	r28, r18
     150:	c0 01       	movw	r24, r0
     152:	c3 9f       	mul	r28, r19
     154:	90 0d       	add	r25, r0
     156:	d2 9f       	mul	r29, r18
     158:	90 0d       	add	r25, r0
     15a:	11 24       	eor	r1, r1
     15c:	88 57       	subi	r24, 0x78	; 120
     15e:	9c 4e       	sbci	r25, 0xEC	; 236
	while(timePass > 0) {
     160:	18 16       	cp	r1, r24
     162:	19 06       	cpc	r1, r25
     164:	14 f4       	brge	.+4      	; 0x16a <mainSimulation+0x8e>
		timePass--;
     166:	01 97       	sbiw	r24, 0x01	; 1
	SYNC(self, setNorthLightGreen, northCarTime);
	// Wait (5 sec (passing time) + northCarTime) before switching direction
	AFTER(SEC(5), self, setSouthLightGreen, southCarTime);
	// Wait more (+ southCarTime) time before looping
	int timePass = (5*1000) + (southCarTime*1000);
	while(timePass > 0) {
     168:	f1 f7       	brne	.-4      	; 0x166 <mainSimulation+0x8a>
		timePass--;
	}
}
     16a:	df 91       	pop	r29
     16c:	cf 91       	pop	r28
     16e:	1f 91       	pop	r17
     170:	0f 91       	pop	r16
     172:	ff 90       	pop	r15
     174:	ef 90       	pop	r14
     176:	df 90       	pop	r13
     178:	cf 90       	pop	r12
     17a:	08 95       	ret

0000017c <updateDisplay>:
	while ( !( UCSR0A & (1<<UDRE0)) );
	/* Put data into buffer, sends the data */
	UDR0 = data;
}

void updateDisplay(Backend *self) {
     17c:	cf 93       	push	r28
     17e:	df 93       	push	r29
     180:	ec 01       	movw	r28, r24
	printAt(self->north_queue, 0);
     182:	6c 81       	ldd	r22, Y+4	; 0x04
     184:	70 e0       	ldi	r23, 0x00	; 0
     186:	80 e0       	ldi	r24, 0x00	; 0
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	40 e0       	ldi	r20, 0x00	; 0
     18c:	50 e0       	ldi	r21, 0x00	; 0
     18e:	0e 94 79 02 	call	0x4f2	; 0x4f2 <printAt>
	printAt(self->south_queue, 4);
     192:	6d 81       	ldd	r22, Y+5	; 0x05
     194:	70 e0       	ldi	r23, 0x00	; 0
     196:	80 e0       	ldi	r24, 0x00	; 0
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	44 e0       	ldi	r20, 0x04	; 4
     19c:	50 e0       	ldi	r21, 0x00	; 0
     19e:	0e 94 79 02 	call	0x4f2	; 0x4f2 <printAt>
	printAt(self->cars_on_bridge, 2);
     1a2:	6e 81       	ldd	r22, Y+6	; 0x06
     1a4:	70 e0       	ldi	r23, 0x00	; 0
     1a6:	80 e0       	ldi	r24, 0x00	; 0
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	42 e0       	ldi	r20, 0x02	; 2
     1ac:	50 e0       	ldi	r21, 0x00	; 0
     1ae:	0e 94 79 02 	call	0x4f2	; 0x4f2 <printAt>
     1b2:	df 91       	pop	r29
     1b4:	cf 91       	pop	r28
     1b6:	08 95       	ret

000001b8 <setNorthLightGreen>:
	while(timePass > 0) {
		timePass--;
	}
}

void setNorthLightGreen(Backend *self) {
     1b8:	cf 92       	push	r12
     1ba:	df 92       	push	r13
     1bc:	ef 92       	push	r14
     1be:	ff 92       	push	r15
     1c0:	0f 93       	push	r16
     1c2:	1f 93       	push	r17
     1c4:	cf 93       	push	r28
     1c6:	df 93       	push	r29
     1c8:	ec 01       	movw	r28, r24
	self->direction = 0;
     1ca:	1f 82       	std	Y+7, r1	; 0x07
	SYNC(self, USART_Transmit, SOUTH_RED);
     1cc:	48 e0       	ldi	r20, 0x08	; 8
     1ce:	50 e0       	ldi	r21, 0x00	; 0
     1d0:	67 e5       	ldi	r22, 0x57	; 87
     1d2:	70 e0       	ldi	r23, 0x00	; 0
     1d4:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <sync>
	LightIndicator('s', 0);
     1d8:	60 e0       	ldi	r22, 0x00	; 0
     1da:	70 e0       	ldi	r23, 0x00	; 0
     1dc:	83 e7       	ldi	r24, 0x73	; 115
     1de:	0e 94 b3 02 	call	0x566	; 0x566 <LightIndicator>
	updateDisplay(self);
     1e2:	ce 01       	movw	r24, r28
     1e4:	0e 94 be 00 	call	0x17c	; 0x17c <updateDisplay>
	AFTER(SEC(5), self, USART_Transmit, NORTH_GREEN);	
     1e8:	cc 24       	eor	r12, r12
     1ea:	c3 94       	inc	r12
     1ec:	d1 2c       	mov	r13, r1
     1ee:	0f 2e       	mov	r0, r31
     1f0:	f7 e5       	ldi	r31, 0x57	; 87
     1f2:	ef 2e       	mov	r14, r31
     1f4:	f0 e0       	ldi	r31, 0x00	; 0
     1f6:	ff 2e       	mov	r15, r31
     1f8:	f0 2d       	mov	r31, r0
     1fa:	8e 01       	movw	r16, r28
     1fc:	20 e0       	ldi	r18, 0x00	; 0
     1fe:	30 e0       	ldi	r19, 0x00	; 0
     200:	a9 01       	movw	r20, r18
     202:	6a e5       	ldi	r22, 0x5A	; 90
     204:	72 e6       	ldi	r23, 0x62	; 98
     206:	82 e0       	ldi	r24, 0x02	; 2
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <async>
	LightIndicator('n', 1);
     20e:	61 e0       	ldi	r22, 0x01	; 1
     210:	70 e0       	ldi	r23, 0x00	; 0
     212:	8e e6       	ldi	r24, 0x6E	; 110
     214:	0e 94 b3 02 	call	0x566	; 0x566 <LightIndicator>
	updateDisplay(self);
     218:	ce 01       	movw	r24, r28
     21a:	0e 94 be 00 	call	0x17c	; 0x17c <updateDisplay>
}
     21e:	df 91       	pop	r29
     220:	cf 91       	pop	r28
     222:	1f 91       	pop	r17
     224:	0f 91       	pop	r16
     226:	ff 90       	pop	r15
     228:	ef 90       	pop	r14
     22a:	df 90       	pop	r13
     22c:	cf 90       	pop	r12
     22e:	08 95       	ret

00000230 <setSouthLightGreen>:

void setSouthLightGreen(Backend *self) {
     230:	cf 92       	push	r12
     232:	df 92       	push	r13
     234:	ef 92       	push	r14
     236:	ff 92       	push	r15
     238:	0f 93       	push	r16
     23a:	1f 93       	push	r17
     23c:	cf 93       	push	r28
     23e:	df 93       	push	r29
     240:	ec 01       	movw	r28, r24
	self->direction = 1;
     242:	81 e0       	ldi	r24, 0x01	; 1
     244:	8f 83       	std	Y+7, r24	; 0x07
	SYNC(self, USART_Transmit, NORTH_RED);
     246:	42 e0       	ldi	r20, 0x02	; 2
     248:	50 e0       	ldi	r21, 0x00	; 0
     24a:	67 e5       	ldi	r22, 0x57	; 87
     24c:	70 e0       	ldi	r23, 0x00	; 0
     24e:	ce 01       	movw	r24, r28
     250:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <sync>
	LightIndicator('n', 0);
     254:	60 e0       	ldi	r22, 0x00	; 0
     256:	70 e0       	ldi	r23, 0x00	; 0
     258:	8e e6       	ldi	r24, 0x6E	; 110
     25a:	0e 94 b3 02 	call	0x566	; 0x566 <LightIndicator>
	updateDisplay(self);
     25e:	ce 01       	movw	r24, r28
     260:	0e 94 be 00 	call	0x17c	; 0x17c <updateDisplay>
	AFTER(SEC(5), self, USART_Transmit, SOUTH_GREEN);
     264:	68 94       	set
     266:	cc 24       	eor	r12, r12
     268:	c2 f8       	bld	r12, 2
     26a:	d1 2c       	mov	r13, r1
     26c:	0f 2e       	mov	r0, r31
     26e:	f7 e5       	ldi	r31, 0x57	; 87
     270:	ef 2e       	mov	r14, r31
     272:	f0 e0       	ldi	r31, 0x00	; 0
     274:	ff 2e       	mov	r15, r31
     276:	f0 2d       	mov	r31, r0
     278:	8e 01       	movw	r16, r28
     27a:	20 e0       	ldi	r18, 0x00	; 0
     27c:	30 e0       	ldi	r19, 0x00	; 0
     27e:	a9 01       	movw	r20, r18
     280:	6a e5       	ldi	r22, 0x5A	; 90
     282:	72 e6       	ldi	r23, 0x62	; 98
     284:	82 e0       	ldi	r24, 0x02	; 2
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <async>
	LightIndicator('s', 1);
     28c:	61 e0       	ldi	r22, 0x01	; 1
     28e:	70 e0       	ldi	r23, 0x00	; 0
     290:	83 e7       	ldi	r24, 0x73	; 115
     292:	0e 94 b3 02 	call	0x566	; 0x566 <LightIndicator>
	updateDisplay(self);
     296:	ce 01       	movw	r24, r28
     298:	0e 94 be 00 	call	0x17c	; 0x17c <updateDisplay>
}
     29c:	df 91       	pop	r29
     29e:	cf 91       	pop	r28
     2a0:	1f 91       	pop	r17
     2a2:	0f 91       	pop	r16
     2a4:	ff 90       	pop	r15
     2a6:	ef 90       	pop	r14
     2a8:	df 90       	pop	r13
     2aa:	cf 90       	pop	r12
     2ac:	08 95       	ret

000002ae <LCD_init>:
#include "GUI.h"
#include "TinyTimber.h"

void LCD_init() {
	// LCD(Contrast Control Register), LCD(Display Configuration)(000): 300 s, LCD(Contrast Control)(1111): 3.35 V
	LCDCCR = (0 << LCDDC0) | (0 << LCDDC1) | (0 << LCDDC2) | (1 << LCDCC0) | (1 << LCDCC1) | (1 << LCDCC2) | (1 << LCDCC3);
     2ae:	8f e0       	ldi	r24, 0x0F	; 15
     2b0:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
	// LCDCS: asynchronous clock, LCDMUX(11): D=1/4, B=1/3, LCD(Port Mask): 25 segments
	LCDCRB = (1 << LCDCS) | (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM2) | (1 << LCDPM1) | (1 << LCDPM0);
     2b4:	87 eb       	ldi	r24, 0xB7	; 183
     2b6:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
	// LCD(Clock Divide)(111): (D=8) 32Hz
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);
     2ba:	87 e0       	ldi	r24, 0x07	; 7
     2bc:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
	// LCD(Control and Status Register A), LCD(Enable): True, LCD(Low Power Waveform): True, (no frame interrupt, no blanking)
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
     2c0:	80 ec       	ldi	r24, 0xC0	; 192
     2c2:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
     2c6:	08 95       	ret

000002c8 <getSegmentForChar>:
int none[] = {0b0000, 0b0000, 0b0000, 0b0000};

// Returns wall of data based on char input ('0' = 48 (char))
int* getSegmentForChar(char ch) {

	switch (ch) {
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	fc 01       	movw	r30, r24
     2cc:	f0 97       	sbiw	r30, 0x30	; 48
     2ce:	ea 30       	cpi	r30, 0x0A	; 10
     2d0:	f1 05       	cpc	r31, r1
     2d2:	f8 f4       	brcc	.+62     	; 0x312 <getSegmentForChar+0x4a>
     2d4:	e2 5d       	subi	r30, 0xD2	; 210
     2d6:	ff 4f       	sbci	r31, 0xFF	; 255
     2d8:	0c 94 94 0f 	jmp	0x1f28	; 0x1f28 <__tablejump2__>
		case '0': return zero;
		case '1': return one;
     2dc:	80 e4       	ldi	r24, 0x40	; 64
     2de:	91 e0       	ldi	r25, 0x01	; 1
     2e0:	08 95       	ret
		case '2': return two;
     2e2:	88 e3       	ldi	r24, 0x38	; 56
     2e4:	91 e0       	ldi	r25, 0x01	; 1
     2e6:	08 95       	ret
		case '3': return three;
     2e8:	80 e3       	ldi	r24, 0x30	; 48
     2ea:	91 e0       	ldi	r25, 0x01	; 1
     2ec:	08 95       	ret
		case '4': return four;
     2ee:	88 e2       	ldi	r24, 0x28	; 40
     2f0:	91 e0       	ldi	r25, 0x01	; 1
     2f2:	08 95       	ret
		case '5': return five;
     2f4:	80 e2       	ldi	r24, 0x20	; 32
     2f6:	91 e0       	ldi	r25, 0x01	; 1
     2f8:	08 95       	ret
		case '6': return six;
     2fa:	88 e1       	ldi	r24, 0x18	; 24
     2fc:	91 e0       	ldi	r25, 0x01	; 1
     2fe:	08 95       	ret
		case '7': return seven;
     300:	80 e1       	ldi	r24, 0x10	; 16
     302:	91 e0       	ldi	r25, 0x01	; 1
     304:	08 95       	ret
		case '8': return eight;
     306:	88 e0       	ldi	r24, 0x08	; 8
     308:	91 e0       	ldi	r25, 0x01	; 1
     30a:	08 95       	ret
		case '9': return nine;
     30c:	80 e0       	ldi	r24, 0x00	; 0
     30e:	91 e0       	ldi	r25, 0x01	; 1
     310:	08 95       	ret
		default:  return none;
     312:	88 e5       	ldi	r24, 0x58	; 88
     314:	91 e0       	ldi	r25, 0x01	; 1
     316:	08 95       	ret

// Returns wall of data based on char input ('0' = 48 (char))
int* getSegmentForChar(char ch) {

	switch (ch) {
		case '0': return zero;
     318:	88 e4       	ldi	r24, 0x48	; 72
     31a:	91 e0       	ldi	r25, 0x01	; 1
		case '7': return seven;
		case '8': return eight;
		case '9': return nine;
		default:  return none;
	}
}
     31c:	08 95       	ret

0000031e <writeChar>:

// Write a char ch at position pos
void writeChar(char ch, uint8_t pos) {
     31e:	cf 93       	push	r28
	// Check if outside range
	if (pos > 5 || pos < 0) return;
     320:	66 30       	cpi	r22, 0x06	; 6
     322:	08 f0       	brcs	.+2      	; 0x326 <writeChar+0x8>
     324:	e4 c0       	rjmp	.+456    	; 0x4ee <__DATA_REGION_LENGTH__+0xee>
     326:	c6 2f       	mov	r28, r22

	// Get correct char data
	int* segment = getSegmentForChar(ch);
     328:	0e 94 64 01 	call	0x2c8	; 0x2c8 <getSegmentForChar>
     32c:	fc 01       	movw	r30, r24
	
	// Chose position
	switch (pos) {
     32e:	c2 30       	cpi	r28, 0x02	; 2
     330:	09 f4       	brne	.+2      	; 0x334 <writeChar+0x16>
     332:	67 c0       	rjmp	.+206    	; 0x402 <__DATA_REGION_LENGTH__+0x2>
     334:	28 f4       	brcc	.+10     	; 0x340 <writeChar+0x22>
     336:	cc 23       	and	r28, r28
     338:	51 f0       	breq	.+20     	; 0x34e <writeChar+0x30>
     33a:	c1 30       	cpi	r28, 0x01	; 1
     33c:	29 f1       	breq	.+74     	; 0x388 <writeChar+0x6a>
     33e:	d7 c0       	rjmp	.+430    	; 0x4ee <__DATA_REGION_LENGTH__+0xee>
     340:	c3 30       	cpi	r28, 0x03	; 3
     342:	09 f4       	brne	.+2      	; 0x346 <writeChar+0x28>
     344:	7b c0       	rjmp	.+246    	; 0x43c <__DATA_REGION_LENGTH__+0x3c>
     346:	c4 30       	cpi	r28, 0x04	; 4
     348:	09 f4       	brne	.+2      	; 0x34c <writeChar+0x2e>
     34a:	b5 c0       	rjmp	.+362    	; 0x4b6 <__DATA_REGION_LENGTH__+0xb6>
     34c:	d0 c0       	rjmp	.+416    	; 0x4ee <__DATA_REGION_LENGTH__+0xee>
		case 0:
		// Segment start at 0, 5, 10, 15, higher 4 bits.
		// (LCDDR0 & 0xF0) clears the segment before writing
		LCDDR0 = (LCDDR0 & 0xF0) | segment[0];
     34e:	ac ee       	ldi	r26, 0xEC	; 236
     350:	b0 e0       	ldi	r27, 0x00	; 0
     352:	8c 91       	ld	r24, X
     354:	80 7f       	andi	r24, 0xF0	; 240
     356:	90 81       	ld	r25, Z
     358:	89 2b       	or	r24, r25
     35a:	8c 93       	st	X, r24
		LCDDR5 = (LCDDR5 & 0xF0) | segment[1];
     35c:	a1 ef       	ldi	r26, 0xF1	; 241
     35e:	b0 e0       	ldi	r27, 0x00	; 0
     360:	8c 91       	ld	r24, X
     362:	80 7f       	andi	r24, 0xF0	; 240
     364:	92 81       	ldd	r25, Z+2	; 0x02
     366:	89 2b       	or	r24, r25
     368:	8c 93       	st	X, r24
		LCDDR10 = (LCDDR10 & 0xF0) | segment[2];
     36a:	a6 ef       	ldi	r26, 0xF6	; 246
     36c:	b0 e0       	ldi	r27, 0x00	; 0
     36e:	8c 91       	ld	r24, X
     370:	80 7f       	andi	r24, 0xF0	; 240
     372:	94 81       	ldd	r25, Z+4	; 0x04
     374:	89 2b       	or	r24, r25
     376:	8c 93       	st	X, r24
		LCDDR15 = (LCDDR15 & 0xF0) | segment[3];
     378:	ab ef       	ldi	r26, 0xFB	; 251
     37a:	b0 e0       	ldi	r27, 0x00	; 0
     37c:	8c 91       	ld	r24, X
     37e:	80 7f       	andi	r24, 0xF0	; 240
     380:	96 81       	ldd	r25, Z+6	; 0x06
     382:	89 2b       	or	r24, r25
     384:	8c 93       	st	X, r24
		break;
     386:	b3 c0       	rjmp	.+358    	; 0x4ee <__DATA_REGION_LENGTH__+0xee>
		case 1:
		// Same segment just lower 4 bits
		LCDDR0 = (LCDDR0 & 0x0F) | (segment[0] << 4);
     388:	ac ee       	ldi	r26, 0xEC	; 236
     38a:	b0 e0       	ldi	r27, 0x00	; 0
     38c:	2c 91       	ld	r18, X
     38e:	80 81       	ld	r24, Z
     390:	91 81       	ldd	r25, Z+1	; 0x01
     392:	82 95       	swap	r24
     394:	92 95       	swap	r25
     396:	90 7f       	andi	r25, 0xF0	; 240
     398:	98 27       	eor	r25, r24
     39a:	80 7f       	andi	r24, 0xF0	; 240
     39c:	98 27       	eor	r25, r24
     39e:	92 2f       	mov	r25, r18
     3a0:	9f 70       	andi	r25, 0x0F	; 15
     3a2:	89 2b       	or	r24, r25
     3a4:	8c 93       	st	X, r24
		LCDDR5 = (LCDDR5 & 0x0F) | (segment[1] << 4);
     3a6:	a1 ef       	ldi	r26, 0xF1	; 241
     3a8:	b0 e0       	ldi	r27, 0x00	; 0
     3aa:	2c 91       	ld	r18, X
     3ac:	82 81       	ldd	r24, Z+2	; 0x02
     3ae:	93 81       	ldd	r25, Z+3	; 0x03
     3b0:	82 95       	swap	r24
     3b2:	92 95       	swap	r25
     3b4:	90 7f       	andi	r25, 0xF0	; 240
     3b6:	98 27       	eor	r25, r24
     3b8:	80 7f       	andi	r24, 0xF0	; 240
     3ba:	98 27       	eor	r25, r24
     3bc:	92 2f       	mov	r25, r18
     3be:	9f 70       	andi	r25, 0x0F	; 15
     3c0:	89 2b       	or	r24, r25
     3c2:	8c 93       	st	X, r24
		LCDDR10 = (LCDDR10 & 0x0F) | (segment[2] << 4);
     3c4:	a6 ef       	ldi	r26, 0xF6	; 246
     3c6:	b0 e0       	ldi	r27, 0x00	; 0
     3c8:	2c 91       	ld	r18, X
     3ca:	84 81       	ldd	r24, Z+4	; 0x04
     3cc:	95 81       	ldd	r25, Z+5	; 0x05
     3ce:	82 95       	swap	r24
     3d0:	92 95       	swap	r25
     3d2:	90 7f       	andi	r25, 0xF0	; 240
     3d4:	98 27       	eor	r25, r24
     3d6:	80 7f       	andi	r24, 0xF0	; 240
     3d8:	98 27       	eor	r25, r24
     3da:	92 2f       	mov	r25, r18
     3dc:	9f 70       	andi	r25, 0x0F	; 15
     3de:	89 2b       	or	r24, r25
     3e0:	8c 93       	st	X, r24
		LCDDR15 = (LCDDR15 & 0x0F) | (segment[3] << 4);
     3e2:	ab ef       	ldi	r26, 0xFB	; 251
     3e4:	b0 e0       	ldi	r27, 0x00	; 0
     3e6:	2c 91       	ld	r18, X
     3e8:	86 81       	ldd	r24, Z+6	; 0x06
     3ea:	97 81       	ldd	r25, Z+7	; 0x07
     3ec:	82 95       	swap	r24
     3ee:	92 95       	swap	r25
     3f0:	90 7f       	andi	r25, 0xF0	; 240
     3f2:	98 27       	eor	r25, r24
     3f4:	80 7f       	andi	r24, 0xF0	; 240
     3f6:	98 27       	eor	r25, r24
     3f8:	92 2f       	mov	r25, r18
     3fa:	9f 70       	andi	r25, 0x0F	; 15
     3fc:	89 2b       	or	r24, r25
     3fe:	8c 93       	st	X, r24
		break;
     400:	76 c0       	rjmp	.+236    	; 0x4ee <__DATA_REGION_LENGTH__+0xee>
		case 2:
		LCDDR1 = (LCDDR1 & 0xF0) | segment[0];
     402:	ad ee       	ldi	r26, 0xED	; 237
     404:	b0 e0       	ldi	r27, 0x00	; 0
     406:	8c 91       	ld	r24, X
     408:	80 7f       	andi	r24, 0xF0	; 240
     40a:	90 81       	ld	r25, Z
     40c:	89 2b       	or	r24, r25
     40e:	8c 93       	st	X, r24
		LCDDR6 = (LCDDR6 & 0xF0) | segment[1];
     410:	a2 ef       	ldi	r26, 0xF2	; 242
     412:	b0 e0       	ldi	r27, 0x00	; 0
     414:	8c 91       	ld	r24, X
     416:	80 7f       	andi	r24, 0xF0	; 240
     418:	92 81       	ldd	r25, Z+2	; 0x02
     41a:	89 2b       	or	r24, r25
     41c:	8c 93       	st	X, r24
		LCDDR11 = (LCDDR11 & 0xF0) | segment[2];
     41e:	a7 ef       	ldi	r26, 0xF7	; 247
     420:	b0 e0       	ldi	r27, 0x00	; 0
     422:	8c 91       	ld	r24, X
     424:	80 7f       	andi	r24, 0xF0	; 240
     426:	94 81       	ldd	r25, Z+4	; 0x04
     428:	89 2b       	or	r24, r25
     42a:	8c 93       	st	X, r24
		LCDDR16 = (LCDDR16 & 0xF0) | segment[3];
     42c:	ac ef       	ldi	r26, 0xFC	; 252
     42e:	b0 e0       	ldi	r27, 0x00	; 0
     430:	8c 91       	ld	r24, X
     432:	80 7f       	andi	r24, 0xF0	; 240
     434:	96 81       	ldd	r25, Z+6	; 0x06
     436:	89 2b       	or	r24, r25
     438:	8c 93       	st	X, r24
		break;
     43a:	59 c0       	rjmp	.+178    	; 0x4ee <__DATA_REGION_LENGTH__+0xee>
		case 3:
		LCDDR1 = (LCDDR1 & 0x0F) | (segment[0] << 4);
     43c:	ad ee       	ldi	r26, 0xED	; 237
     43e:	b0 e0       	ldi	r27, 0x00	; 0
     440:	2c 91       	ld	r18, X
     442:	80 81       	ld	r24, Z
     444:	91 81       	ldd	r25, Z+1	; 0x01
     446:	82 95       	swap	r24
     448:	92 95       	swap	r25
     44a:	90 7f       	andi	r25, 0xF0	; 240
     44c:	98 27       	eor	r25, r24
     44e:	80 7f       	andi	r24, 0xF0	; 240
     450:	98 27       	eor	r25, r24
     452:	92 2f       	mov	r25, r18
     454:	9f 70       	andi	r25, 0x0F	; 15
     456:	89 2b       	or	r24, r25
     458:	8c 93       	st	X, r24
		LCDDR6 = (LCDDR6 & 0x0F) | (segment[1] << 4);
     45a:	a2 ef       	ldi	r26, 0xF2	; 242
     45c:	b0 e0       	ldi	r27, 0x00	; 0
     45e:	2c 91       	ld	r18, X
     460:	82 81       	ldd	r24, Z+2	; 0x02
     462:	93 81       	ldd	r25, Z+3	; 0x03
     464:	82 95       	swap	r24
     466:	92 95       	swap	r25
     468:	90 7f       	andi	r25, 0xF0	; 240
     46a:	98 27       	eor	r25, r24
     46c:	80 7f       	andi	r24, 0xF0	; 240
     46e:	98 27       	eor	r25, r24
     470:	92 2f       	mov	r25, r18
     472:	9f 70       	andi	r25, 0x0F	; 15
     474:	89 2b       	or	r24, r25
     476:	8c 93       	st	X, r24
		LCDDR11 = (LCDDR11 & 0x0F) | (segment[2] << 4);
     478:	a7 ef       	ldi	r26, 0xF7	; 247
     47a:	b0 e0       	ldi	r27, 0x00	; 0
     47c:	2c 91       	ld	r18, X
     47e:	84 81       	ldd	r24, Z+4	; 0x04
     480:	95 81       	ldd	r25, Z+5	; 0x05
     482:	82 95       	swap	r24
     484:	92 95       	swap	r25
     486:	90 7f       	andi	r25, 0xF0	; 240
     488:	98 27       	eor	r25, r24
     48a:	80 7f       	andi	r24, 0xF0	; 240
     48c:	98 27       	eor	r25, r24
     48e:	92 2f       	mov	r25, r18
     490:	9f 70       	andi	r25, 0x0F	; 15
     492:	89 2b       	or	r24, r25
     494:	8c 93       	st	X, r24
		LCDDR16 = (LCDDR16 & 0x0F) | (segment[3] << 4);
     496:	ac ef       	ldi	r26, 0xFC	; 252
     498:	b0 e0       	ldi	r27, 0x00	; 0
     49a:	2c 91       	ld	r18, X
     49c:	86 81       	ldd	r24, Z+6	; 0x06
     49e:	97 81       	ldd	r25, Z+7	; 0x07
     4a0:	82 95       	swap	r24
     4a2:	92 95       	swap	r25
     4a4:	90 7f       	andi	r25, 0xF0	; 240
     4a6:	98 27       	eor	r25, r24
     4a8:	80 7f       	andi	r24, 0xF0	; 240
     4aa:	98 27       	eor	r25, r24
     4ac:	92 2f       	mov	r25, r18
     4ae:	9f 70       	andi	r25, 0x0F	; 15
     4b0:	89 2b       	or	r24, r25
     4b2:	8c 93       	st	X, r24
		break;
     4b4:	1c c0       	rjmp	.+56     	; 0x4ee <__DATA_REGION_LENGTH__+0xee>
		case 4:
		LCDDR2 = (LCDDR2 & 0xF0) | segment[0];
     4b6:	ae ee       	ldi	r26, 0xEE	; 238
     4b8:	b0 e0       	ldi	r27, 0x00	; 0
     4ba:	8c 91       	ld	r24, X
     4bc:	80 7f       	andi	r24, 0xF0	; 240
     4be:	90 81       	ld	r25, Z
     4c0:	89 2b       	or	r24, r25
     4c2:	8c 93       	st	X, r24
		LCDDR7 = (LCDDR7 & 0xF0) | segment[1];
     4c4:	a3 ef       	ldi	r26, 0xF3	; 243
     4c6:	b0 e0       	ldi	r27, 0x00	; 0
     4c8:	8c 91       	ld	r24, X
     4ca:	80 7f       	andi	r24, 0xF0	; 240
     4cc:	92 81       	ldd	r25, Z+2	; 0x02
     4ce:	89 2b       	or	r24, r25
     4d0:	8c 93       	st	X, r24
		LCDDR12 = (LCDDR12 & 0xF0) | segment[2];
     4d2:	a8 ef       	ldi	r26, 0xF8	; 248
     4d4:	b0 e0       	ldi	r27, 0x00	; 0
     4d6:	8c 91       	ld	r24, X
     4d8:	80 7f       	andi	r24, 0xF0	; 240
     4da:	94 81       	ldd	r25, Z+4	; 0x04
     4dc:	89 2b       	or	r24, r25
     4de:	8c 93       	st	X, r24
		LCDDR17 = (LCDDR17 & 0xF0) | segment[3];
     4e0:	ad ef       	ldi	r26, 0xFD	; 253
     4e2:	b0 e0       	ldi	r27, 0x00	; 0
     4e4:	8c 91       	ld	r24, X
     4e6:	80 7f       	andi	r24, 0xF0	; 240
     4e8:	96 81       	ldd	r25, Z+6	; 0x06
     4ea:	89 2b       	or	r24, r25
     4ec:	8c 93       	st	X, r24
		break;
	}
}
     4ee:	cf 91       	pop	r28
     4f0:	08 95       	ret

000004f2 <printAt>:

void printAt(long num, int pos) {
     4f2:	8f 92       	push	r8
     4f4:	9f 92       	push	r9
     4f6:	af 92       	push	r10
     4f8:	bf 92       	push	r11
     4fa:	cf 92       	push	r12
     4fc:	df 92       	push	r13
     4fe:	ef 92       	push	r14
     500:	ff 92       	push	r15
     502:	cf 93       	push	r28
     504:	df 93       	push	r29
     506:	4b 01       	movw	r8, r22
     508:	5c 01       	movw	r10, r24
     50a:	ea 01       	movw	r28, r20
	writeChar((num % 100) / 10 + '0', pos);
     50c:	24 e6       	ldi	r18, 0x64	; 100
     50e:	30 e0       	ldi	r19, 0x00	; 0
     510:	40 e0       	ldi	r20, 0x00	; 0
     512:	50 e0       	ldi	r21, 0x00	; 0
     514:	0e 94 75 0f 	call	0x1eea	; 0x1eea <__divmodsi4>
     518:	0f 2e       	mov	r0, r31
     51a:	fa e0       	ldi	r31, 0x0A	; 10
     51c:	cf 2e       	mov	r12, r31
     51e:	d1 2c       	mov	r13, r1
     520:	e1 2c       	mov	r14, r1
     522:	f1 2c       	mov	r15, r1
     524:	f0 2d       	mov	r31, r0
     526:	a7 01       	movw	r20, r14
     528:	96 01       	movw	r18, r12
     52a:	0e 94 75 0f 	call	0x1eea	; 0x1eea <__divmodsi4>
     52e:	6c 2f       	mov	r22, r28
     530:	80 e3       	ldi	r24, 0x30	; 48
     532:	82 0f       	add	r24, r18
     534:	0e 94 8f 01 	call	0x31e	; 0x31e <writeChar>
	pos++;
	writeChar(num % 10 + '0', pos);
     538:	21 96       	adiw	r28, 0x01	; 1
     53a:	c5 01       	movw	r24, r10
     53c:	b4 01       	movw	r22, r8
     53e:	a7 01       	movw	r20, r14
     540:	96 01       	movw	r18, r12
     542:	0e 94 75 0f 	call	0x1eea	; 0x1eea <__divmodsi4>
     546:	86 2f       	mov	r24, r22
     548:	6c 2f       	mov	r22, r28
     54a:	80 5d       	subi	r24, 0xD0	; 208
     54c:	0e 94 8f 01 	call	0x31e	; 0x31e <writeChar>
}
     550:	df 91       	pop	r29
     552:	cf 91       	pop	r28
     554:	ff 90       	pop	r15
     556:	ef 90       	pop	r14
     558:	df 90       	pop	r13
     55a:	cf 90       	pop	r12
     55c:	bf 90       	pop	r11
     55e:	af 90       	pop	r10
     560:	9f 90       	pop	r9
     562:	8f 90       	pop	r8
     564:	08 95       	ret

00000566 <LightIndicator>:

void LightIndicator(char northOrSouth, int offOrOn) {
	switch (offOrOn)
     566:	61 15       	cp	r22, r1
     568:	71 05       	cpc	r23, r1
     56a:	99 f0       	breq	.+38     	; 0x592 <LightIndicator+0x2c>
     56c:	61 30       	cpi	r22, 0x01	; 1
     56e:	71 05       	cpc	r23, r1
     570:	f9 f4       	brne	.+62     	; 0x5b0 <LightIndicator+0x4a>
	{
		case 1:
			if (northOrSouth == 'n') LCDDR0 |= 0b00000100;
     572:	8e 36       	cpi	r24, 0x6E	; 110
     574:	31 f4       	brne	.+12     	; 0x582 <LightIndicator+0x1c>
     576:	ec ee       	ldi	r30, 0xEC	; 236
     578:	f0 e0       	ldi	r31, 0x00	; 0
     57a:	80 81       	ld	r24, Z
     57c:	84 60       	ori	r24, 0x04	; 4
     57e:	80 83       	st	Z, r24
     580:	08 95       	ret
			if (northOrSouth == 's') LCDDR0 |= 0b01000000;
     582:	83 37       	cpi	r24, 0x73	; 115
     584:	a9 f4       	brne	.+42     	; 0x5b0 <LightIndicator+0x4a>
     586:	ec ee       	ldi	r30, 0xEC	; 236
     588:	f0 e0       	ldi	r31, 0x00	; 0
     58a:	80 81       	ld	r24, Z
     58c:	80 64       	ori	r24, 0x40	; 64
     58e:	80 83       	st	Z, r24
     590:	08 95       	ret
			break;
		case 0:
			if (northOrSouth == 'n') LCDDR0 &= ~(0b00000100);
     592:	8e 36       	cpi	r24, 0x6E	; 110
     594:	31 f4       	brne	.+12     	; 0x5a2 <LightIndicator+0x3c>
     596:	ec ee       	ldi	r30, 0xEC	; 236
     598:	f0 e0       	ldi	r31, 0x00	; 0
     59a:	80 81       	ld	r24, Z
     59c:	8b 7f       	andi	r24, 0xFB	; 251
     59e:	80 83       	st	Z, r24
     5a0:	08 95       	ret
			if (northOrSouth == 's') LCDDR0 &= ~(0b01000000);
     5a2:	83 37       	cpi	r24, 0x73	; 115
     5a4:	29 f4       	brne	.+10     	; 0x5b0 <LightIndicator+0x4a>
     5a6:	ec ee       	ldi	r30, 0xEC	; 236
     5a8:	f0 e0       	ldi	r31, 0x00	; 0
     5aa:	80 81       	ld	r24, Z
     5ac:	8f 7b       	andi	r24, 0xBF	; 191
     5ae:	80 83       	st	Z, r24
     5b0:	08 95       	ret

000005b2 <main>:
#include "backend.h"




int main() {
     5b2:	cf 93       	push	r28
     5b4:	df 93       	push	r29
     5b6:	cd b7       	in	r28, 0x3d	; 61
     5b8:	de b7       	in	r29, 0x3e	; 62
     5ba:	61 97       	sbiw	r28, 0x11	; 17
     5bc:	0f b6       	in	r0, 0x3f	; 63
     5be:	f8 94       	cli
     5c0:	de bf       	out	0x3e, r29	; 62
     5c2:	0f be       	out	0x3f, r0	; 63
     5c4:	cd bf       	out	0x3d, r28	; 61
	cli();
     5c6:	f8 94       	cli
	// Declare objects
	GUI gui = initGUI();
	Backend backend;
	USART usart = initUSART(&backend);
     5c8:	1d 86       	std	Y+13, r1	; 0x0d
     5ca:	1c 86       	std	Y+12, r1	; 0x0c
     5cc:	1f 86       	std	Y+15, r1	; 0x0f
     5ce:	1e 86       	std	Y+14, r1	; 0x0e
     5d0:	ce 01       	movw	r24, r28
     5d2:	01 96       	adiw	r24, 0x01	; 1
     5d4:	99 8b       	std	Y+17, r25	; 0x11
     5d6:	88 8b       	std	Y+16, r24	; 0x10
	
	LCD_init();	
     5d8:	0e 94 57 01 	call	0x2ae	; 0x2ae <LCD_init>
	sei();
     5dc:	78 94       	sei
	
	return TINYTIMBER(&usart, usart_init, NULL);
     5de:	40 e0       	ldi	r20, 0x00	; 0
     5e0:	50 e0       	ldi	r21, 0x00	; 0
     5e2:	6c e5       	ldi	r22, 0x5C	; 92
     5e4:	7f e0       	ldi	r23, 0x0F	; 15
     5e6:	ce 01       	movw	r24, r28
     5e8:	0c 96       	adiw	r24, 0x0c	; 12
     5ea:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <tinytimber>
     5ee:	61 96       	adiw	r28, 0x11	; 17
     5f0:	0f b6       	in	r0, 0x3f	; 63
     5f2:	f8 94       	cli
     5f4:	de bf       	out	0x3e, r29	; 62
     5f6:	0f be       	out	0x3f, r0	; 63
     5f8:	cd bf       	out	0x3d, r28	; 61
     5fa:	df 91       	pop	r29
     5fc:	cf 91       	pop	r28
     5fe:	08 95       	ret

00000600 <initialize>:
        char status;
        DISABLE(status);
        otable[i] = obj;
        mtable[i] = m;
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
        ENABLE(status);
     600:	cf 93       	push	r28
     602:	df 93       	push	r29
     604:	00 d0       	rcall	.+0      	; 0x606 <initialize+0x6>
     606:	00 d0       	rcall	.+0      	; 0x608 <initialize+0x8>
     608:	cd b7       	in	r28, 0x3d	; 61
     60a:	de b7       	in	r29, 0x3e	; 62
     60c:	83 e5       	ldi	r24, 0x53	; 83
     60e:	92 e0       	ldi	r25, 0x02	; 2
     610:	23 e3       	ldi	r18, 0x33	; 51
     612:	33 e0       	ldi	r19, 0x03	; 3
     614:	fc 01       	movw	r30, r24
     616:	70 97       	sbiw	r30, 0x10	; 16
     618:	91 83       	std	Z+1, r25	; 0x01
     61a:	80 83       	st	Z, r24
     61c:	40 96       	adiw	r24, 0x10	; 16
     61e:	82 17       	cp	r24, r18
     620:	93 07       	cpc	r25, r19
     622:	c1 f7       	brne	.-16     	; 0x614 <initialize+0x14>
     624:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <messages+0xe1>
     628:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <messages+0xe0>
     62c:	ee e8       	ldi	r30, 0x8E	; 142
     62e:	f1 e0       	ldi	r31, 0x01	; 1
     630:	8b ea       	ldi	r24, 0xAB	; 171
     632:	91 e0       	ldi	r25, 0x01	; 1
     634:	91 83       	std	Z+1, r25	; 0x01
     636:	80 83       	st	Z, r24
     638:	88 ec       	ldi	r24, 0xC8	; 200
     63a:	91 e0       	ldi	r25, 0x01	; 1
     63c:	96 8f       	std	Z+30, r25	; 0x1e
     63e:	85 8f       	std	Z+29, r24	; 0x1d
     640:	a5 ee       	ldi	r26, 0xE5	; 229
     642:	b1 e0       	ldi	r27, 0x01	; 1
     644:	b3 af       	std	Z+59, r27	; 0x3b
     646:	a2 af       	std	Z+58, r26	; 0x3a
     648:	1d 92       	st	X+, r1
     64a:	1c 92       	st	X, r1
     64c:	fa 83       	std	Y+2, r31	; 0x02
     64e:	e9 83       	std	Y+1, r30	; 0x01
     650:	ef e8       	ldi	r30, 0x8F	; 143
     652:	f3 e0       	ldi	r31, 0x03	; 3
     654:	fc 83       	std	Y+4, r31	; 0x04
     656:	eb 83       	std	Y+3, r30	; 0x03
     658:	89 81       	ldd	r24, Y+1	; 0x01
     65a:	9a 81       	ldd	r25, Y+2	; 0x02
     65c:	06 96       	adiw	r24, 0x06	; 6
     65e:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <setjmp>
     662:	8b 81       	ldd	r24, Y+3	; 0x03
     664:	9c 81       	ldd	r25, Y+4	; 0x04
     666:	e9 81       	ldd	r30, Y+1	; 0x01
     668:	fa 81       	ldd	r31, Y+2	; 0x02
     66a:	97 8b       	std	Z+23, r25	; 0x17
     66c:	86 8b       	std	Z+22, r24	; 0x16
     66e:	91 8f       	std	Z+25, r25	; 0x19
     670:	80 8f       	std	Z+24, r24	; 0x18
     672:	80 ea       	ldi	r24, 0xA0	; 160
     674:	9e e0       	ldi	r25, 0x0E	; 14
     676:	94 8f       	std	Z+28, r25	; 0x1c
     678:	83 8f       	std	Z+27, r24	; 0x1b
     67a:	15 82       	std	Z+5, r1	; 0x05
     67c:	14 82       	std	Z+4, r1	; 0x04
     67e:	7d 96       	adiw	r30, 0x1d	; 29
     680:	fa 83       	std	Y+2, r31	; 0x02
     682:	e9 83       	std	Y+1, r30	; 0x01
     684:	eb 81       	ldd	r30, Y+3	; 0x03
     686:	fc 81       	ldd	r31, Y+4	; 0x04
     688:	e0 5a       	subi	r30, 0xA0	; 160
     68a:	ff 4f       	sbci	r31, 0xFF	; 255
     68c:	fc 83       	std	Y+4, r31	; 0x04
     68e:	eb 83       	std	Y+3, r30	; 0x03
     690:	89 81       	ldd	r24, Y+1	; 0x01
     692:	9a 81       	ldd	r25, Y+2	; 0x02
     694:	82 50       	subi	r24, 0x02	; 2
     696:	92 40       	sbci	r25, 0x02	; 2
     698:	f9 f6       	brne	.-66     	; 0x658 <initialize+0x58>
     69a:	e6 e2       	ldi	r30, 0x26	; 38
     69c:	f2 e0       	ldi	r31, 0x02	; 2
     69e:	11 82       	std	Z+1, r1	; 0x01
     6a0:	10 82       	st	Z, r1
     6a2:	15 82       	std	Z+5, r1	; 0x05
     6a4:	14 82       	std	Z+4, r1	; 0x04
     6a6:	13 82       	std	Z+3, r1	; 0x03
     6a8:	12 82       	std	Z+2, r1	; 0x02
     6aa:	e1 e6       	ldi	r30, 0x61	; 97
     6ac:	f0 e0       	ldi	r31, 0x00	; 0
     6ae:	80 e8       	ldi	r24, 0x80	; 128
     6b0:	80 83       	st	Z, r24
     6b2:	10 82       	st	Z, r1
     6b4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     6b8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     6bc:	84 e0       	ldi	r24, 0x04	; 4
     6be:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
     6c2:	81 e0       	ldi	r24, 0x01	; 1
     6c4:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
     6c8:	0f 90       	pop	r0
     6ca:	0f 90       	pop	r0
     6cc:	0f 90       	pop	r0
     6ce:	0f 90       	pop	r0
     6d0:	df 91       	pop	r29
     6d2:	cf 91       	pop	r28
     6d4:	08 95       	ret

000006d6 <dispatch>:
     6d6:	cf 93       	push	r28
     6d8:	df 93       	push	r29
     6da:	00 d0       	rcall	.+0      	; 0x6dc <dispatch+0x6>
     6dc:	cd b7       	in	r28, 0x3d	; 61
     6de:	de b7       	in	r29, 0x3e	; 62
     6e0:	9a 83       	std	Y+2, r25	; 0x02
     6e2:	89 83       	std	Y+1, r24	; 0x01
     6e4:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <current>
     6e8:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <current+0x1>
     6ec:	06 96       	adiw	r24, 0x06	; 6
     6ee:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <setjmp>
     6f2:	89 2b       	or	r24, r25
     6f4:	59 f4       	brne	.+22     	; 0x70c <dispatch+0x36>
     6f6:	89 81       	ldd	r24, Y+1	; 0x01
     6f8:	9a 81       	ldd	r25, Y+2	; 0x02
     6fa:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <current+0x1>
     6fe:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <current>
     702:	61 e0       	ldi	r22, 0x01	; 1
     704:	70 e0       	ldi	r23, 0x00	; 0
     706:	06 96       	adiw	r24, 0x06	; 6
     708:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <longjmp>
     70c:	0f 90       	pop	r0
     70e:	0f 90       	pop	r0
     710:	df 91       	pop	r29
     712:	cf 91       	pop	r28
     714:	08 95       	ret

00000716 <schedule>:
     716:	0f 93       	push	r16
     718:	1f 93       	push	r17
     71a:	cf 93       	push	r28
     71c:	df 93       	push	r29
     71e:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <msgQ>
     722:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <msgQ+0x1>
     726:	30 97       	sbiw	r30, 0x00	; 0
     728:	61 f1       	breq	.+88     	; 0x782 <schedule+0x6c>
     72a:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <threadPool>
     72e:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <threadPool+0x1>
     732:	00 97       	sbiw	r24, 0x00	; 0
     734:	31 f1       	breq	.+76     	; 0x782 <schedule+0x6c>
     736:	c0 91 52 01 	lds	r28, 0x0152	; 0x800152 <activeStack>
     73a:	d0 91 53 01 	lds	r29, 0x0153	; 0x800153 <activeStack+0x1>
     73e:	aa 81       	ldd	r26, Y+2	; 0x02
     740:	bb 81       	ldd	r27, Y+3	; 0x03
     742:	10 97       	sbiw	r26, 0x00	; 0
     744:	79 f0       	breq	.+30     	; 0x764 <schedule+0x4e>
     746:	46 81       	ldd	r20, Z+6	; 0x06
     748:	57 81       	ldd	r21, Z+7	; 0x07
     74a:	60 85       	ldd	r22, Z+8	; 0x08
     74c:	71 85       	ldd	r23, Z+9	; 0x09
     74e:	16 96       	adiw	r26, 0x06	; 6
     750:	0d 91       	ld	r16, X+
     752:	1d 91       	ld	r17, X+
     754:	2d 91       	ld	r18, X+
     756:	3c 91       	ld	r19, X
     758:	19 97       	sbiw	r26, 0x09	; 9
     75a:	40 1b       	sub	r20, r16
     75c:	51 0b       	sbc	r21, r17
     75e:	62 0b       	sbc	r22, r18
     760:	73 0b       	sbc	r23, r19
     762:	7a f4       	brpl	.+30     	; 0x782 <schedule+0x6c>
     764:	fc 01       	movw	r30, r24
     766:	20 81       	ld	r18, Z
     768:	31 81       	ldd	r19, Z+1	; 0x01
     76a:	30 93 55 01 	sts	0x0155, r19	; 0x800155 <threadPool+0x1>
     76e:	20 93 54 01 	sts	0x0154, r18	; 0x800154 <threadPool>
     772:	d1 83       	std	Z+1, r29	; 0x01
     774:	c0 83       	st	Z, r28
     776:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <activeStack+0x1>
     77a:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <activeStack>
     77e:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <dispatch>
     782:	df 91       	pop	r29
     784:	cf 91       	pop	r28
     786:	1f 91       	pop	r17
     788:	0f 91       	pop	r16
     78a:	08 95       	ret

0000078c <__vector_1>:
     78c:	1f 92       	push	r1
     78e:	0f 92       	push	r0
     790:	0f b6       	in	r0, 0x3f	; 63
     792:	0f 92       	push	r0
     794:	11 24       	eor	r1, r1
     796:	2f 93       	push	r18
     798:	3f 93       	push	r19
     79a:	4f 93       	push	r20
     79c:	5f 93       	push	r21
     79e:	6f 93       	push	r22
     7a0:	7f 93       	push	r23
     7a2:	8f 93       	push	r24
     7a4:	9f 93       	push	r25
     7a6:	af 93       	push	r26
     7a8:	bf 93       	push	r27
     7aa:	ef 93       	push	r30
     7ac:	ff 93       	push	r31
     7ae:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <overflows>
     7b2:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <overflows+0x1>
     7b6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     7ba:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     7be:	c9 01       	movw	r24, r18
     7c0:	03 2e       	mov	r0, r19
     7c2:	00 0c       	add	r0, r0
     7c4:	aa 0b       	sbc	r26, r26
     7c6:	bb 0b       	sbc	r27, r27
     7c8:	dc 01       	movw	r26, r24
     7ca:	99 27       	eor	r25, r25
     7cc:	88 27       	eor	r24, r24
     7ce:	60 e0       	ldi	r22, 0x00	; 0
     7d0:	70 e0       	ldi	r23, 0x00	; 0
     7d2:	84 2b       	or	r24, r20
     7d4:	95 2b       	or	r25, r21
     7d6:	a6 2b       	or	r26, r22
     7d8:	b7 2b       	or	r27, r23
     7da:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
     7de:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
     7e2:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
     7e6:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
     7ea:	b0 9b       	sbis	0x16, 0	; 22
     7ec:	1b c0       	rjmp	.+54     	; 0x824 <__vector_1+0x98>
     7ee:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     7f2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     7f6:	c9 01       	movw	r24, r18
     7f8:	01 96       	adiw	r24, 0x01	; 1
     7fa:	09 2e       	mov	r0, r25
     7fc:	00 0c       	add	r0, r0
     7fe:	aa 0b       	sbc	r26, r26
     800:	bb 0b       	sbc	r27, r27
     802:	dc 01       	movw	r26, r24
     804:	99 27       	eor	r25, r25
     806:	88 27       	eor	r24, r24
     808:	60 e0       	ldi	r22, 0x00	; 0
     80a:	70 e0       	ldi	r23, 0x00	; 0
     80c:	84 2b       	or	r24, r20
     80e:	95 2b       	or	r25, r21
     810:	a6 2b       	or	r26, r22
     812:	b7 2b       	or	r27, r23
     814:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
     818:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
     81c:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
     820:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
     824:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <mtable>
     828:	f0 91 03 02 	lds	r31, 0x0203	; 0x800203 <mtable+0x1>
     82c:	30 97       	sbiw	r30, 0x00	; 0
     82e:	39 f0       	breq	.+14     	; 0x83e <__vector_1+0xb2>
     830:	60 e0       	ldi	r22, 0x00	; 0
     832:	70 e0       	ldi	r23, 0x00	; 0
     834:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <otable>
     838:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <otable+0x1>
     83c:	09 95       	icall
     83e:	0e 94 8b 03 	call	0x716	; 0x716 <schedule>
     842:	ff 91       	pop	r31
     844:	ef 91       	pop	r30
     846:	bf 91       	pop	r27
     848:	af 91       	pop	r26
     84a:	9f 91       	pop	r25
     84c:	8f 91       	pop	r24
     84e:	7f 91       	pop	r23
     850:	6f 91       	pop	r22
     852:	5f 91       	pop	r21
     854:	4f 91       	pop	r20
     856:	3f 91       	pop	r19
     858:	2f 91       	pop	r18
     85a:	0f 90       	pop	r0
     85c:	0f be       	out	0x3f, r0	; 63
     85e:	0f 90       	pop	r0
     860:	1f 90       	pop	r1
     862:	18 95       	reti

00000864 <__vector_2>:
     864:	1f 92       	push	r1
     866:	0f 92       	push	r0
     868:	0f b6       	in	r0, 0x3f	; 63
     86a:	0f 92       	push	r0
     86c:	11 24       	eor	r1, r1
     86e:	2f 93       	push	r18
     870:	3f 93       	push	r19
     872:	4f 93       	push	r20
     874:	5f 93       	push	r21
     876:	6f 93       	push	r22
     878:	7f 93       	push	r23
     87a:	8f 93       	push	r24
     87c:	9f 93       	push	r25
     87e:	af 93       	push	r26
     880:	bf 93       	push	r27
     882:	ef 93       	push	r30
     884:	ff 93       	push	r31
     886:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <overflows>
     88a:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <overflows+0x1>
     88e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     892:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     896:	c9 01       	movw	r24, r18
     898:	03 2e       	mov	r0, r19
     89a:	00 0c       	add	r0, r0
     89c:	aa 0b       	sbc	r26, r26
     89e:	bb 0b       	sbc	r27, r27
     8a0:	dc 01       	movw	r26, r24
     8a2:	99 27       	eor	r25, r25
     8a4:	88 27       	eor	r24, r24
     8a6:	60 e0       	ldi	r22, 0x00	; 0
     8a8:	70 e0       	ldi	r23, 0x00	; 0
     8aa:	84 2b       	or	r24, r20
     8ac:	95 2b       	or	r25, r21
     8ae:	a6 2b       	or	r26, r22
     8b0:	b7 2b       	or	r27, r23
     8b2:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
     8b6:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
     8ba:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
     8be:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
     8c2:	b0 9b       	sbis	0x16, 0	; 22
     8c4:	1b c0       	rjmp	.+54     	; 0x8fc <__vector_2+0x98>
     8c6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     8ca:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     8ce:	c9 01       	movw	r24, r18
     8d0:	01 96       	adiw	r24, 0x01	; 1
     8d2:	09 2e       	mov	r0, r25
     8d4:	00 0c       	add	r0, r0
     8d6:	aa 0b       	sbc	r26, r26
     8d8:	bb 0b       	sbc	r27, r27
     8da:	dc 01       	movw	r26, r24
     8dc:	99 27       	eor	r25, r25
     8de:	88 27       	eor	r24, r24
     8e0:	60 e0       	ldi	r22, 0x00	; 0
     8e2:	70 e0       	ldi	r23, 0x00	; 0
     8e4:	84 2b       	or	r24, r20
     8e6:	95 2b       	or	r25, r21
     8e8:	a6 2b       	or	r26, r22
     8ea:	b7 2b       	or	r27, r23
     8ec:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
     8f0:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
     8f4:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
     8f8:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
     8fc:	e0 91 04 02 	lds	r30, 0x0204	; 0x800204 <mtable+0x2>
     900:	f0 91 05 02 	lds	r31, 0x0205	; 0x800205 <mtable+0x3>
     904:	30 97       	sbiw	r30, 0x00	; 0
     906:	39 f0       	breq	.+14     	; 0x916 <__vector_2+0xb2>
     908:	61 e0       	ldi	r22, 0x01	; 1
     90a:	70 e0       	ldi	r23, 0x00	; 0
     90c:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <otable+0x2>
     910:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <otable+0x3>
     914:	09 95       	icall
     916:	0e 94 8b 03 	call	0x716	; 0x716 <schedule>
     91a:	ff 91       	pop	r31
     91c:	ef 91       	pop	r30
     91e:	bf 91       	pop	r27
     920:	af 91       	pop	r26
     922:	9f 91       	pop	r25
     924:	8f 91       	pop	r24
     926:	7f 91       	pop	r23
     928:	6f 91       	pop	r22
     92a:	5f 91       	pop	r21
     92c:	4f 91       	pop	r20
     92e:	3f 91       	pop	r19
     930:	2f 91       	pop	r18
     932:	0f 90       	pop	r0
     934:	0f be       	out	0x3f, r0	; 63
     936:	0f 90       	pop	r0
     938:	1f 90       	pop	r1
     93a:	18 95       	reti

0000093c <__vector_3>:
     93c:	1f 92       	push	r1
     93e:	0f 92       	push	r0
     940:	0f b6       	in	r0, 0x3f	; 63
     942:	0f 92       	push	r0
     944:	11 24       	eor	r1, r1
     946:	2f 93       	push	r18
     948:	3f 93       	push	r19
     94a:	4f 93       	push	r20
     94c:	5f 93       	push	r21
     94e:	6f 93       	push	r22
     950:	7f 93       	push	r23
     952:	8f 93       	push	r24
     954:	9f 93       	push	r25
     956:	af 93       	push	r26
     958:	bf 93       	push	r27
     95a:	ef 93       	push	r30
     95c:	ff 93       	push	r31
     95e:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <overflows>
     962:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <overflows+0x1>
     966:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     96a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     96e:	c9 01       	movw	r24, r18
     970:	03 2e       	mov	r0, r19
     972:	00 0c       	add	r0, r0
     974:	aa 0b       	sbc	r26, r26
     976:	bb 0b       	sbc	r27, r27
     978:	dc 01       	movw	r26, r24
     97a:	99 27       	eor	r25, r25
     97c:	88 27       	eor	r24, r24
     97e:	60 e0       	ldi	r22, 0x00	; 0
     980:	70 e0       	ldi	r23, 0x00	; 0
     982:	84 2b       	or	r24, r20
     984:	95 2b       	or	r25, r21
     986:	a6 2b       	or	r26, r22
     988:	b7 2b       	or	r27, r23
     98a:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
     98e:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
     992:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
     996:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
     99a:	b0 9b       	sbis	0x16, 0	; 22
     99c:	1b c0       	rjmp	.+54     	; 0x9d4 <__vector_3+0x98>
     99e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     9a2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     9a6:	c9 01       	movw	r24, r18
     9a8:	01 96       	adiw	r24, 0x01	; 1
     9aa:	09 2e       	mov	r0, r25
     9ac:	00 0c       	add	r0, r0
     9ae:	aa 0b       	sbc	r26, r26
     9b0:	bb 0b       	sbc	r27, r27
     9b2:	dc 01       	movw	r26, r24
     9b4:	99 27       	eor	r25, r25
     9b6:	88 27       	eor	r24, r24
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	84 2b       	or	r24, r20
     9be:	95 2b       	or	r25, r21
     9c0:	a6 2b       	or	r26, r22
     9c2:	b7 2b       	or	r27, r23
     9c4:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
     9c8:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
     9cc:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
     9d0:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
     9d4:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <mtable+0x4>
     9d8:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <mtable+0x5>
     9dc:	30 97       	sbiw	r30, 0x00	; 0
     9de:	39 f0       	breq	.+14     	; 0x9ee <__vector_3+0xb2>
     9e0:	62 e0       	ldi	r22, 0x02	; 2
     9e2:	70 e0       	ldi	r23, 0x00	; 0
     9e4:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <otable+0x4>
     9e8:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <otable+0x5>
     9ec:	09 95       	icall
     9ee:	0e 94 8b 03 	call	0x716	; 0x716 <schedule>
     9f2:	ff 91       	pop	r31
     9f4:	ef 91       	pop	r30
     9f6:	bf 91       	pop	r27
     9f8:	af 91       	pop	r26
     9fa:	9f 91       	pop	r25
     9fc:	8f 91       	pop	r24
     9fe:	7f 91       	pop	r23
     a00:	6f 91       	pop	r22
     a02:	5f 91       	pop	r21
     a04:	4f 91       	pop	r20
     a06:	3f 91       	pop	r19
     a08:	2f 91       	pop	r18
     a0a:	0f 90       	pop	r0
     a0c:	0f be       	out	0x3f, r0	; 63
     a0e:	0f 90       	pop	r0
     a10:	1f 90       	pop	r1
     a12:	18 95       	reti

00000a14 <__vector_4>:
     a14:	1f 92       	push	r1
     a16:	0f 92       	push	r0
     a18:	0f b6       	in	r0, 0x3f	; 63
     a1a:	0f 92       	push	r0
     a1c:	11 24       	eor	r1, r1
     a1e:	2f 93       	push	r18
     a20:	3f 93       	push	r19
     a22:	4f 93       	push	r20
     a24:	5f 93       	push	r21
     a26:	6f 93       	push	r22
     a28:	7f 93       	push	r23
     a2a:	8f 93       	push	r24
     a2c:	9f 93       	push	r25
     a2e:	af 93       	push	r26
     a30:	bf 93       	push	r27
     a32:	ef 93       	push	r30
     a34:	ff 93       	push	r31
     a36:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <overflows>
     a3a:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <overflows+0x1>
     a3e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     a42:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     a46:	c9 01       	movw	r24, r18
     a48:	03 2e       	mov	r0, r19
     a4a:	00 0c       	add	r0, r0
     a4c:	aa 0b       	sbc	r26, r26
     a4e:	bb 0b       	sbc	r27, r27
     a50:	dc 01       	movw	r26, r24
     a52:	99 27       	eor	r25, r25
     a54:	88 27       	eor	r24, r24
     a56:	60 e0       	ldi	r22, 0x00	; 0
     a58:	70 e0       	ldi	r23, 0x00	; 0
     a5a:	84 2b       	or	r24, r20
     a5c:	95 2b       	or	r25, r21
     a5e:	a6 2b       	or	r26, r22
     a60:	b7 2b       	or	r27, r23
     a62:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
     a66:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
     a6a:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
     a6e:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
     a72:	b0 9b       	sbis	0x16, 0	; 22
     a74:	1b c0       	rjmp	.+54     	; 0xaac <__vector_4+0x98>
     a76:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     a7a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     a7e:	c9 01       	movw	r24, r18
     a80:	01 96       	adiw	r24, 0x01	; 1
     a82:	09 2e       	mov	r0, r25
     a84:	00 0c       	add	r0, r0
     a86:	aa 0b       	sbc	r26, r26
     a88:	bb 0b       	sbc	r27, r27
     a8a:	dc 01       	movw	r26, r24
     a8c:	99 27       	eor	r25, r25
     a8e:	88 27       	eor	r24, r24
     a90:	60 e0       	ldi	r22, 0x00	; 0
     a92:	70 e0       	ldi	r23, 0x00	; 0
     a94:	84 2b       	or	r24, r20
     a96:	95 2b       	or	r25, r21
     a98:	a6 2b       	or	r26, r22
     a9a:	b7 2b       	or	r27, r23
     a9c:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
     aa0:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
     aa4:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
     aa8:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
     aac:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <mtable+0x6>
     ab0:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <mtable+0x7>
     ab4:	30 97       	sbiw	r30, 0x00	; 0
     ab6:	39 f0       	breq	.+14     	; 0xac6 <__vector_4+0xb2>
     ab8:	63 e0       	ldi	r22, 0x03	; 3
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <otable+0x6>
     ac0:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <otable+0x7>
     ac4:	09 95       	icall
     ac6:	0e 94 8b 03 	call	0x716	; 0x716 <schedule>
     aca:	ff 91       	pop	r31
     acc:	ef 91       	pop	r30
     ace:	bf 91       	pop	r27
     ad0:	af 91       	pop	r26
     ad2:	9f 91       	pop	r25
     ad4:	8f 91       	pop	r24
     ad6:	7f 91       	pop	r23
     ad8:	6f 91       	pop	r22
     ada:	5f 91       	pop	r21
     adc:	4f 91       	pop	r20
     ade:	3f 91       	pop	r19
     ae0:	2f 91       	pop	r18
     ae2:	0f 90       	pop	r0
     ae4:	0f be       	out	0x3f, r0	; 63
     ae6:	0f 90       	pop	r0
     ae8:	1f 90       	pop	r1
     aea:	18 95       	reti

00000aec <__vector_5>:
     aec:	1f 92       	push	r1
     aee:	0f 92       	push	r0
     af0:	0f b6       	in	r0, 0x3f	; 63
     af2:	0f 92       	push	r0
     af4:	11 24       	eor	r1, r1
     af6:	2f 93       	push	r18
     af8:	3f 93       	push	r19
     afa:	4f 93       	push	r20
     afc:	5f 93       	push	r21
     afe:	6f 93       	push	r22
     b00:	7f 93       	push	r23
     b02:	8f 93       	push	r24
     b04:	9f 93       	push	r25
     b06:	af 93       	push	r26
     b08:	bf 93       	push	r27
     b0a:	ef 93       	push	r30
     b0c:	ff 93       	push	r31
     b0e:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <overflows>
     b12:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <overflows+0x1>
     b16:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     b1a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     b1e:	c9 01       	movw	r24, r18
     b20:	03 2e       	mov	r0, r19
     b22:	00 0c       	add	r0, r0
     b24:	aa 0b       	sbc	r26, r26
     b26:	bb 0b       	sbc	r27, r27
     b28:	dc 01       	movw	r26, r24
     b2a:	99 27       	eor	r25, r25
     b2c:	88 27       	eor	r24, r24
     b2e:	60 e0       	ldi	r22, 0x00	; 0
     b30:	70 e0       	ldi	r23, 0x00	; 0
     b32:	84 2b       	or	r24, r20
     b34:	95 2b       	or	r25, r21
     b36:	a6 2b       	or	r26, r22
     b38:	b7 2b       	or	r27, r23
     b3a:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
     b3e:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
     b42:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
     b46:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
     b4a:	b0 9b       	sbis	0x16, 0	; 22
     b4c:	1b c0       	rjmp	.+54     	; 0xb84 <__vector_5+0x98>
     b4e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     b52:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     b56:	c9 01       	movw	r24, r18
     b58:	01 96       	adiw	r24, 0x01	; 1
     b5a:	09 2e       	mov	r0, r25
     b5c:	00 0c       	add	r0, r0
     b5e:	aa 0b       	sbc	r26, r26
     b60:	bb 0b       	sbc	r27, r27
     b62:	dc 01       	movw	r26, r24
     b64:	99 27       	eor	r25, r25
     b66:	88 27       	eor	r24, r24
     b68:	60 e0       	ldi	r22, 0x00	; 0
     b6a:	70 e0       	ldi	r23, 0x00	; 0
     b6c:	84 2b       	or	r24, r20
     b6e:	95 2b       	or	r25, r21
     b70:	a6 2b       	or	r26, r22
     b72:	b7 2b       	or	r27, r23
     b74:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
     b78:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
     b7c:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
     b80:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
     b84:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <mtable+0x8>
     b88:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <mtable+0x9>
     b8c:	30 97       	sbiw	r30, 0x00	; 0
     b8e:	39 f0       	breq	.+14     	; 0xb9e <__vector_5+0xb2>
     b90:	64 e0       	ldi	r22, 0x04	; 4
     b92:	70 e0       	ldi	r23, 0x00	; 0
     b94:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <otable+0x8>
     b98:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <otable+0x9>
     b9c:	09 95       	icall
     b9e:	0e 94 8b 03 	call	0x716	; 0x716 <schedule>
     ba2:	ff 91       	pop	r31
     ba4:	ef 91       	pop	r30
     ba6:	bf 91       	pop	r27
     ba8:	af 91       	pop	r26
     baa:	9f 91       	pop	r25
     bac:	8f 91       	pop	r24
     bae:	7f 91       	pop	r23
     bb0:	6f 91       	pop	r22
     bb2:	5f 91       	pop	r21
     bb4:	4f 91       	pop	r20
     bb6:	3f 91       	pop	r19
     bb8:	2f 91       	pop	r18
     bba:	0f 90       	pop	r0
     bbc:	0f be       	out	0x3f, r0	; 63
     bbe:	0f 90       	pop	r0
     bc0:	1f 90       	pop	r1
     bc2:	18 95       	reti

00000bc4 <__vector_10>:
     bc4:	1f 92       	push	r1
     bc6:	0f 92       	push	r0
     bc8:	0f b6       	in	r0, 0x3f	; 63
     bca:	0f 92       	push	r0
     bcc:	11 24       	eor	r1, r1
     bce:	2f 93       	push	r18
     bd0:	3f 93       	push	r19
     bd2:	4f 93       	push	r20
     bd4:	5f 93       	push	r21
     bd6:	6f 93       	push	r22
     bd8:	7f 93       	push	r23
     bda:	8f 93       	push	r24
     bdc:	9f 93       	push	r25
     bde:	af 93       	push	r26
     be0:	bf 93       	push	r27
     be2:	ef 93       	push	r30
     be4:	ff 93       	push	r31
     be6:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <overflows>
     bea:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <overflows+0x1>
     bee:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     bf2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     bf6:	c9 01       	movw	r24, r18
     bf8:	03 2e       	mov	r0, r19
     bfa:	00 0c       	add	r0, r0
     bfc:	aa 0b       	sbc	r26, r26
     bfe:	bb 0b       	sbc	r27, r27
     c00:	dc 01       	movw	r26, r24
     c02:	99 27       	eor	r25, r25
     c04:	88 27       	eor	r24, r24
     c06:	60 e0       	ldi	r22, 0x00	; 0
     c08:	70 e0       	ldi	r23, 0x00	; 0
     c0a:	84 2b       	or	r24, r20
     c0c:	95 2b       	or	r25, r21
     c0e:	a6 2b       	or	r26, r22
     c10:	b7 2b       	or	r27, r23
     c12:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
     c16:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
     c1a:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
     c1e:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
     c22:	b0 9b       	sbis	0x16, 0	; 22
     c24:	1b c0       	rjmp	.+54     	; 0xc5c <__vector_10+0x98>
     c26:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     c2a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     c2e:	c9 01       	movw	r24, r18
     c30:	01 96       	adiw	r24, 0x01	; 1
     c32:	09 2e       	mov	r0, r25
     c34:	00 0c       	add	r0, r0
     c36:	aa 0b       	sbc	r26, r26
     c38:	bb 0b       	sbc	r27, r27
     c3a:	dc 01       	movw	r26, r24
     c3c:	99 27       	eor	r25, r25
     c3e:	88 27       	eor	r24, r24
     c40:	60 e0       	ldi	r22, 0x00	; 0
     c42:	70 e0       	ldi	r23, 0x00	; 0
     c44:	84 2b       	or	r24, r20
     c46:	95 2b       	or	r25, r21
     c48:	a6 2b       	or	r26, r22
     c4a:	b7 2b       	or	r27, r23
     c4c:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
     c50:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
     c54:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
     c58:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
     c5c:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <mtable+0xa>
     c60:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <mtable+0xb>
     c64:	30 97       	sbiw	r30, 0x00	; 0
     c66:	39 f0       	breq	.+14     	; 0xc76 <__vector_10+0xb2>
     c68:	65 e0       	ldi	r22, 0x05	; 5
     c6a:	70 e0       	ldi	r23, 0x00	; 0
     c6c:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <otable+0xa>
     c70:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <otable+0xb>
     c74:	09 95       	icall
     c76:	0e 94 8b 03 	call	0x716	; 0x716 <schedule>
     c7a:	ff 91       	pop	r31
     c7c:	ef 91       	pop	r30
     c7e:	bf 91       	pop	r27
     c80:	af 91       	pop	r26
     c82:	9f 91       	pop	r25
     c84:	8f 91       	pop	r24
     c86:	7f 91       	pop	r23
     c88:	6f 91       	pop	r22
     c8a:	5f 91       	pop	r21
     c8c:	4f 91       	pop	r20
     c8e:	3f 91       	pop	r19
     c90:	2f 91       	pop	r18
     c92:	0f 90       	pop	r0
     c94:	0f be       	out	0x3f, r0	; 63
     c96:	0f 90       	pop	r0
     c98:	1f 90       	pop	r1
     c9a:	18 95       	reti

00000c9c <__vector_11>:
     c9c:	1f 92       	push	r1
     c9e:	0f 92       	push	r0
     ca0:	0f b6       	in	r0, 0x3f	; 63
     ca2:	0f 92       	push	r0
     ca4:	11 24       	eor	r1, r1
     ca6:	2f 93       	push	r18
     ca8:	3f 93       	push	r19
     caa:	4f 93       	push	r20
     cac:	5f 93       	push	r21
     cae:	6f 93       	push	r22
     cb0:	7f 93       	push	r23
     cb2:	8f 93       	push	r24
     cb4:	9f 93       	push	r25
     cb6:	af 93       	push	r26
     cb8:	bf 93       	push	r27
     cba:	ef 93       	push	r30
     cbc:	ff 93       	push	r31
     cbe:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <overflows>
     cc2:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <overflows+0x1>
     cc6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     cca:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     cce:	c9 01       	movw	r24, r18
     cd0:	03 2e       	mov	r0, r19
     cd2:	00 0c       	add	r0, r0
     cd4:	aa 0b       	sbc	r26, r26
     cd6:	bb 0b       	sbc	r27, r27
     cd8:	dc 01       	movw	r26, r24
     cda:	99 27       	eor	r25, r25
     cdc:	88 27       	eor	r24, r24
     cde:	60 e0       	ldi	r22, 0x00	; 0
     ce0:	70 e0       	ldi	r23, 0x00	; 0
     ce2:	84 2b       	or	r24, r20
     ce4:	95 2b       	or	r25, r21
     ce6:	a6 2b       	or	r26, r22
     ce8:	b7 2b       	or	r27, r23
     cea:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
     cee:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
     cf2:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
     cf6:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
     cfa:	b0 9b       	sbis	0x16, 0	; 22
     cfc:	1b c0       	rjmp	.+54     	; 0xd34 <__vector_11+0x98>
     cfe:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d02:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d06:	c9 01       	movw	r24, r18
     d08:	01 96       	adiw	r24, 0x01	; 1
     d0a:	09 2e       	mov	r0, r25
     d0c:	00 0c       	add	r0, r0
     d0e:	aa 0b       	sbc	r26, r26
     d10:	bb 0b       	sbc	r27, r27
     d12:	dc 01       	movw	r26, r24
     d14:	99 27       	eor	r25, r25
     d16:	88 27       	eor	r24, r24
     d18:	60 e0       	ldi	r22, 0x00	; 0
     d1a:	70 e0       	ldi	r23, 0x00	; 0
     d1c:	84 2b       	or	r24, r20
     d1e:	95 2b       	or	r25, r21
     d20:	a6 2b       	or	r26, r22
     d22:	b7 2b       	or	r27, r23
     d24:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
     d28:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
     d2c:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
     d30:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
     d34:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <mtable+0xc>
     d38:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <mtable+0xd>
     d3c:	30 97       	sbiw	r30, 0x00	; 0
     d3e:	39 f0       	breq	.+14     	; 0xd4e <__vector_11+0xb2>
     d40:	66 e0       	ldi	r22, 0x06	; 6
     d42:	70 e0       	ldi	r23, 0x00	; 0
     d44:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <otable+0xc>
     d48:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <otable+0xd>
     d4c:	09 95       	icall
     d4e:	0e 94 8b 03 	call	0x716	; 0x716 <schedule>
     d52:	ff 91       	pop	r31
     d54:	ef 91       	pop	r30
     d56:	bf 91       	pop	r27
     d58:	af 91       	pop	r26
     d5a:	9f 91       	pop	r25
     d5c:	8f 91       	pop	r24
     d5e:	7f 91       	pop	r23
     d60:	6f 91       	pop	r22
     d62:	5f 91       	pop	r21
     d64:	4f 91       	pop	r20
     d66:	3f 91       	pop	r19
     d68:	2f 91       	pop	r18
     d6a:	0f 90       	pop	r0
     d6c:	0f be       	out	0x3f, r0	; 63
     d6e:	0f 90       	pop	r0
     d70:	1f 90       	pop	r1
     d72:	18 95       	reti

00000d74 <__vector_12>:
     d74:	1f 92       	push	r1
     d76:	0f 92       	push	r0
     d78:	0f b6       	in	r0, 0x3f	; 63
     d7a:	0f 92       	push	r0
     d7c:	11 24       	eor	r1, r1
     d7e:	2f 93       	push	r18
     d80:	3f 93       	push	r19
     d82:	4f 93       	push	r20
     d84:	5f 93       	push	r21
     d86:	6f 93       	push	r22
     d88:	7f 93       	push	r23
     d8a:	8f 93       	push	r24
     d8c:	9f 93       	push	r25
     d8e:	af 93       	push	r26
     d90:	bf 93       	push	r27
     d92:	ef 93       	push	r30
     d94:	ff 93       	push	r31
     d96:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <overflows>
     d9a:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <overflows+0x1>
     d9e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     da2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     da6:	c9 01       	movw	r24, r18
     da8:	03 2e       	mov	r0, r19
     daa:	00 0c       	add	r0, r0
     dac:	aa 0b       	sbc	r26, r26
     dae:	bb 0b       	sbc	r27, r27
     db0:	dc 01       	movw	r26, r24
     db2:	99 27       	eor	r25, r25
     db4:	88 27       	eor	r24, r24
     db6:	60 e0       	ldi	r22, 0x00	; 0
     db8:	70 e0       	ldi	r23, 0x00	; 0
     dba:	84 2b       	or	r24, r20
     dbc:	95 2b       	or	r25, r21
     dbe:	a6 2b       	or	r26, r22
     dc0:	b7 2b       	or	r27, r23
     dc2:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
     dc6:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
     dca:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
     dce:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
     dd2:	b0 9b       	sbis	0x16, 0	; 22
     dd4:	1b c0       	rjmp	.+54     	; 0xe0c <__vector_12+0x98>
     dd6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     dda:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     dde:	c9 01       	movw	r24, r18
     de0:	01 96       	adiw	r24, 0x01	; 1
     de2:	09 2e       	mov	r0, r25
     de4:	00 0c       	add	r0, r0
     de6:	aa 0b       	sbc	r26, r26
     de8:	bb 0b       	sbc	r27, r27
     dea:	dc 01       	movw	r26, r24
     dec:	99 27       	eor	r25, r25
     dee:	88 27       	eor	r24, r24
     df0:	60 e0       	ldi	r22, 0x00	; 0
     df2:	70 e0       	ldi	r23, 0x00	; 0
     df4:	84 2b       	or	r24, r20
     df6:	95 2b       	or	r25, r21
     df8:	a6 2b       	or	r26, r22
     dfa:	b7 2b       	or	r27, r23
     dfc:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
     e00:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
     e04:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
     e08:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
     e0c:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <mtable+0xe>
     e10:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <mtable+0xf>
     e14:	30 97       	sbiw	r30, 0x00	; 0
     e16:	39 f0       	breq	.+14     	; 0xe26 <__vector_12+0xb2>
     e18:	67 e0       	ldi	r22, 0x07	; 7
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <otable+0xe>
     e20:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <otable+0xf>
     e24:	09 95       	icall
     e26:	0e 94 8b 03 	call	0x716	; 0x716 <schedule>
     e2a:	ff 91       	pop	r31
     e2c:	ef 91       	pop	r30
     e2e:	bf 91       	pop	r27
     e30:	af 91       	pop	r26
     e32:	9f 91       	pop	r25
     e34:	8f 91       	pop	r24
     e36:	7f 91       	pop	r23
     e38:	6f 91       	pop	r22
     e3a:	5f 91       	pop	r21
     e3c:	4f 91       	pop	r20
     e3e:	3f 91       	pop	r19
     e40:	2f 91       	pop	r18
     e42:	0f 90       	pop	r0
     e44:	0f be       	out	0x3f, r0	; 63
     e46:	0f 90       	pop	r0
     e48:	1f 90       	pop	r1
     e4a:	18 95       	reti

00000e4c <__vector_13>:
     e4c:	1f 92       	push	r1
     e4e:	0f 92       	push	r0
     e50:	0f b6       	in	r0, 0x3f	; 63
     e52:	0f 92       	push	r0
     e54:	11 24       	eor	r1, r1
     e56:	2f 93       	push	r18
     e58:	3f 93       	push	r19
     e5a:	4f 93       	push	r20
     e5c:	5f 93       	push	r21
     e5e:	6f 93       	push	r22
     e60:	7f 93       	push	r23
     e62:	8f 93       	push	r24
     e64:	9f 93       	push	r25
     e66:	af 93       	push	r26
     e68:	bf 93       	push	r27
     e6a:	ef 93       	push	r30
     e6c:	ff 93       	push	r31
     e6e:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <overflows>
     e72:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <overflows+0x1>
     e76:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e7a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e7e:	c9 01       	movw	r24, r18
     e80:	03 2e       	mov	r0, r19
     e82:	00 0c       	add	r0, r0
     e84:	aa 0b       	sbc	r26, r26
     e86:	bb 0b       	sbc	r27, r27
     e88:	dc 01       	movw	r26, r24
     e8a:	99 27       	eor	r25, r25
     e8c:	88 27       	eor	r24, r24
     e8e:	60 e0       	ldi	r22, 0x00	; 0
     e90:	70 e0       	ldi	r23, 0x00	; 0
     e92:	84 2b       	or	r24, r20
     e94:	95 2b       	or	r25, r21
     e96:	a6 2b       	or	r26, r22
     e98:	b7 2b       	or	r27, r23
     e9a:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
     e9e:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
     ea2:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
     ea6:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
     eaa:	b0 9b       	sbis	0x16, 0	; 22
     eac:	1b c0       	rjmp	.+54     	; 0xee4 <__vector_13+0x98>
     eae:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     eb2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     eb6:	c9 01       	movw	r24, r18
     eb8:	01 96       	adiw	r24, 0x01	; 1
     eba:	09 2e       	mov	r0, r25
     ebc:	00 0c       	add	r0, r0
     ebe:	aa 0b       	sbc	r26, r26
     ec0:	bb 0b       	sbc	r27, r27
     ec2:	dc 01       	movw	r26, r24
     ec4:	99 27       	eor	r25, r25
     ec6:	88 27       	eor	r24, r24
     ec8:	60 e0       	ldi	r22, 0x00	; 0
     eca:	70 e0       	ldi	r23, 0x00	; 0
     ecc:	84 2b       	or	r24, r20
     ece:	95 2b       	or	r25, r21
     ed0:	a6 2b       	or	r26, r22
     ed2:	b7 2b       	or	r27, r23
     ed4:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
     ed8:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
     edc:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
     ee0:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
     ee4:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <mtable+0x10>
     ee8:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <mtable+0x11>
     eec:	30 97       	sbiw	r30, 0x00	; 0
     eee:	39 f0       	breq	.+14     	; 0xefe <__vector_13+0xb2>
     ef0:	68 e0       	ldi	r22, 0x08	; 8
     ef2:	70 e0       	ldi	r23, 0x00	; 0
     ef4:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <otable+0x10>
     ef8:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <otable+0x11>
     efc:	09 95       	icall
     efe:	0e 94 8b 03 	call	0x716	; 0x716 <schedule>
     f02:	ff 91       	pop	r31
     f04:	ef 91       	pop	r30
     f06:	bf 91       	pop	r27
     f08:	af 91       	pop	r26
     f0a:	9f 91       	pop	r25
     f0c:	8f 91       	pop	r24
     f0e:	7f 91       	pop	r23
     f10:	6f 91       	pop	r22
     f12:	5f 91       	pop	r21
     f14:	4f 91       	pop	r20
     f16:	3f 91       	pop	r19
     f18:	2f 91       	pop	r18
     f1a:	0f 90       	pop	r0
     f1c:	0f be       	out	0x3f, r0	; 63
     f1e:	0f 90       	pop	r0
     f20:	1f 90       	pop	r1
     f22:	18 95       	reti

00000f24 <__vector_14>:
     f24:	1f 92       	push	r1
     f26:	0f 92       	push	r0
     f28:	0f b6       	in	r0, 0x3f	; 63
     f2a:	0f 92       	push	r0
     f2c:	11 24       	eor	r1, r1
     f2e:	2f 93       	push	r18
     f30:	3f 93       	push	r19
     f32:	4f 93       	push	r20
     f34:	5f 93       	push	r21
     f36:	6f 93       	push	r22
     f38:	7f 93       	push	r23
     f3a:	8f 93       	push	r24
     f3c:	9f 93       	push	r25
     f3e:	af 93       	push	r26
     f40:	bf 93       	push	r27
     f42:	ef 93       	push	r30
     f44:	ff 93       	push	r31
     f46:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <overflows>
     f4a:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <overflows+0x1>
     f4e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f52:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f56:	c9 01       	movw	r24, r18
     f58:	03 2e       	mov	r0, r19
     f5a:	00 0c       	add	r0, r0
     f5c:	aa 0b       	sbc	r26, r26
     f5e:	bb 0b       	sbc	r27, r27
     f60:	dc 01       	movw	r26, r24
     f62:	99 27       	eor	r25, r25
     f64:	88 27       	eor	r24, r24
     f66:	60 e0       	ldi	r22, 0x00	; 0
     f68:	70 e0       	ldi	r23, 0x00	; 0
     f6a:	84 2b       	or	r24, r20
     f6c:	95 2b       	or	r25, r21
     f6e:	a6 2b       	or	r26, r22
     f70:	b7 2b       	or	r27, r23
     f72:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
     f76:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
     f7a:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
     f7e:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
     f82:	b0 9b       	sbis	0x16, 0	; 22
     f84:	1b c0       	rjmp	.+54     	; 0xfbc <__vector_14+0x98>
     f86:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f8a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f8e:	c9 01       	movw	r24, r18
     f90:	01 96       	adiw	r24, 0x01	; 1
     f92:	09 2e       	mov	r0, r25
     f94:	00 0c       	add	r0, r0
     f96:	aa 0b       	sbc	r26, r26
     f98:	bb 0b       	sbc	r27, r27
     f9a:	dc 01       	movw	r26, r24
     f9c:	99 27       	eor	r25, r25
     f9e:	88 27       	eor	r24, r24
     fa0:	60 e0       	ldi	r22, 0x00	; 0
     fa2:	70 e0       	ldi	r23, 0x00	; 0
     fa4:	84 2b       	or	r24, r20
     fa6:	95 2b       	or	r25, r21
     fa8:	a6 2b       	or	r26, r22
     faa:	b7 2b       	or	r27, r23
     fac:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
     fb0:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
     fb4:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
     fb8:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
     fbc:	e0 91 14 02 	lds	r30, 0x0214	; 0x800214 <mtable+0x12>
     fc0:	f0 91 15 02 	lds	r31, 0x0215	; 0x800215 <mtable+0x13>
     fc4:	30 97       	sbiw	r30, 0x00	; 0
     fc6:	39 f0       	breq	.+14     	; 0xfd6 <__vector_14+0xb2>
     fc8:	69 e0       	ldi	r22, 0x09	; 9
     fca:	70 e0       	ldi	r23, 0x00	; 0
     fcc:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <otable+0x12>
     fd0:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <otable+0x13>
     fd4:	09 95       	icall
     fd6:	0e 94 8b 03 	call	0x716	; 0x716 <schedule>
     fda:	ff 91       	pop	r31
     fdc:	ef 91       	pop	r30
     fde:	bf 91       	pop	r27
     fe0:	af 91       	pop	r26
     fe2:	9f 91       	pop	r25
     fe4:	8f 91       	pop	r24
     fe6:	7f 91       	pop	r23
     fe8:	6f 91       	pop	r22
     fea:	5f 91       	pop	r21
     fec:	4f 91       	pop	r20
     fee:	3f 91       	pop	r19
     ff0:	2f 91       	pop	r18
     ff2:	0f 90       	pop	r0
     ff4:	0f be       	out	0x3f, r0	; 63
     ff6:	0f 90       	pop	r0
     ff8:	1f 90       	pop	r1
     ffa:	18 95       	reti

00000ffc <__vector_15>:
     ffc:	1f 92       	push	r1
     ffe:	0f 92       	push	r0
    1000:	0f b6       	in	r0, 0x3f	; 63
    1002:	0f 92       	push	r0
    1004:	11 24       	eor	r1, r1
    1006:	2f 93       	push	r18
    1008:	3f 93       	push	r19
    100a:	4f 93       	push	r20
    100c:	5f 93       	push	r21
    100e:	6f 93       	push	r22
    1010:	7f 93       	push	r23
    1012:	8f 93       	push	r24
    1014:	9f 93       	push	r25
    1016:	af 93       	push	r26
    1018:	bf 93       	push	r27
    101a:	ef 93       	push	r30
    101c:	ff 93       	push	r31
    101e:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <overflows>
    1022:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <overflows+0x1>
    1026:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    102a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    102e:	c9 01       	movw	r24, r18
    1030:	03 2e       	mov	r0, r19
    1032:	00 0c       	add	r0, r0
    1034:	aa 0b       	sbc	r26, r26
    1036:	bb 0b       	sbc	r27, r27
    1038:	dc 01       	movw	r26, r24
    103a:	99 27       	eor	r25, r25
    103c:	88 27       	eor	r24, r24
    103e:	60 e0       	ldi	r22, 0x00	; 0
    1040:	70 e0       	ldi	r23, 0x00	; 0
    1042:	84 2b       	or	r24, r20
    1044:	95 2b       	or	r25, r21
    1046:	a6 2b       	or	r26, r22
    1048:	b7 2b       	or	r27, r23
    104a:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    104e:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    1052:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    1056:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    105a:	b0 9b       	sbis	0x16, 0	; 22
    105c:	1b c0       	rjmp	.+54     	; 0x1094 <__vector_15+0x98>
    105e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1062:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1066:	c9 01       	movw	r24, r18
    1068:	01 96       	adiw	r24, 0x01	; 1
    106a:	09 2e       	mov	r0, r25
    106c:	00 0c       	add	r0, r0
    106e:	aa 0b       	sbc	r26, r26
    1070:	bb 0b       	sbc	r27, r27
    1072:	dc 01       	movw	r26, r24
    1074:	99 27       	eor	r25, r25
    1076:	88 27       	eor	r24, r24
    1078:	60 e0       	ldi	r22, 0x00	; 0
    107a:	70 e0       	ldi	r23, 0x00	; 0
    107c:	84 2b       	or	r24, r20
    107e:	95 2b       	or	r25, r21
    1080:	a6 2b       	or	r26, r22
    1082:	b7 2b       	or	r27, r23
    1084:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    1088:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    108c:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    1090:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    1094:	e0 91 16 02 	lds	r30, 0x0216	; 0x800216 <mtable+0x14>
    1098:	f0 91 17 02 	lds	r31, 0x0217	; 0x800217 <mtable+0x15>
    109c:	30 97       	sbiw	r30, 0x00	; 0
    109e:	39 f0       	breq	.+14     	; 0x10ae <__vector_15+0xb2>
    10a0:	6a e0       	ldi	r22, 0x0A	; 10
    10a2:	70 e0       	ldi	r23, 0x00	; 0
    10a4:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <otable+0x14>
    10a8:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <otable+0x15>
    10ac:	09 95       	icall
    10ae:	0e 94 8b 03 	call	0x716	; 0x716 <schedule>
    10b2:	ff 91       	pop	r31
    10b4:	ef 91       	pop	r30
    10b6:	bf 91       	pop	r27
    10b8:	af 91       	pop	r26
    10ba:	9f 91       	pop	r25
    10bc:	8f 91       	pop	r24
    10be:	7f 91       	pop	r23
    10c0:	6f 91       	pop	r22
    10c2:	5f 91       	pop	r21
    10c4:	4f 91       	pop	r20
    10c6:	3f 91       	pop	r19
    10c8:	2f 91       	pop	r18
    10ca:	0f 90       	pop	r0
    10cc:	0f be       	out	0x3f, r0	; 63
    10ce:	0f 90       	pop	r0
    10d0:	1f 90       	pop	r1
    10d2:	18 95       	reti

000010d4 <__vector_16>:
    10d4:	1f 92       	push	r1
    10d6:	0f 92       	push	r0
    10d8:	0f b6       	in	r0, 0x3f	; 63
    10da:	0f 92       	push	r0
    10dc:	11 24       	eor	r1, r1
    10de:	2f 93       	push	r18
    10e0:	3f 93       	push	r19
    10e2:	4f 93       	push	r20
    10e4:	5f 93       	push	r21
    10e6:	6f 93       	push	r22
    10e8:	7f 93       	push	r23
    10ea:	8f 93       	push	r24
    10ec:	9f 93       	push	r25
    10ee:	af 93       	push	r26
    10f0:	bf 93       	push	r27
    10f2:	ef 93       	push	r30
    10f4:	ff 93       	push	r31
    10f6:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <overflows>
    10fa:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <overflows+0x1>
    10fe:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1102:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1106:	c9 01       	movw	r24, r18
    1108:	03 2e       	mov	r0, r19
    110a:	00 0c       	add	r0, r0
    110c:	aa 0b       	sbc	r26, r26
    110e:	bb 0b       	sbc	r27, r27
    1110:	dc 01       	movw	r26, r24
    1112:	99 27       	eor	r25, r25
    1114:	88 27       	eor	r24, r24
    1116:	60 e0       	ldi	r22, 0x00	; 0
    1118:	70 e0       	ldi	r23, 0x00	; 0
    111a:	84 2b       	or	r24, r20
    111c:	95 2b       	or	r25, r21
    111e:	a6 2b       	or	r26, r22
    1120:	b7 2b       	or	r27, r23
    1122:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    1126:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    112a:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    112e:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    1132:	b0 9b       	sbis	0x16, 0	; 22
    1134:	1b c0       	rjmp	.+54     	; 0x116c <__vector_16+0x98>
    1136:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    113a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    113e:	c9 01       	movw	r24, r18
    1140:	01 96       	adiw	r24, 0x01	; 1
    1142:	09 2e       	mov	r0, r25
    1144:	00 0c       	add	r0, r0
    1146:	aa 0b       	sbc	r26, r26
    1148:	bb 0b       	sbc	r27, r27
    114a:	dc 01       	movw	r26, r24
    114c:	99 27       	eor	r25, r25
    114e:	88 27       	eor	r24, r24
    1150:	60 e0       	ldi	r22, 0x00	; 0
    1152:	70 e0       	ldi	r23, 0x00	; 0
    1154:	84 2b       	or	r24, r20
    1156:	95 2b       	or	r25, r21
    1158:	a6 2b       	or	r26, r22
    115a:	b7 2b       	or	r27, r23
    115c:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    1160:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    1164:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    1168:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    116c:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <mtable+0x16>
    1170:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <mtable+0x17>
    1174:	30 97       	sbiw	r30, 0x00	; 0
    1176:	39 f0       	breq	.+14     	; 0x1186 <__vector_16+0xb2>
    1178:	6b e0       	ldi	r22, 0x0B	; 11
    117a:	70 e0       	ldi	r23, 0x00	; 0
    117c:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <otable+0x16>
    1180:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <otable+0x17>
    1184:	09 95       	icall
    1186:	0e 94 8b 03 	call	0x716	; 0x716 <schedule>
    118a:	ff 91       	pop	r31
    118c:	ef 91       	pop	r30
    118e:	bf 91       	pop	r27
    1190:	af 91       	pop	r26
    1192:	9f 91       	pop	r25
    1194:	8f 91       	pop	r24
    1196:	7f 91       	pop	r23
    1198:	6f 91       	pop	r22
    119a:	5f 91       	pop	r21
    119c:	4f 91       	pop	r20
    119e:	3f 91       	pop	r19
    11a0:	2f 91       	pop	r18
    11a2:	0f 90       	pop	r0
    11a4:	0f be       	out	0x3f, r0	; 63
    11a6:	0f 90       	pop	r0
    11a8:	1f 90       	pop	r1
    11aa:	18 95       	reti

000011ac <__vector_17>:
    11ac:	1f 92       	push	r1
    11ae:	0f 92       	push	r0
    11b0:	0f b6       	in	r0, 0x3f	; 63
    11b2:	0f 92       	push	r0
    11b4:	11 24       	eor	r1, r1
    11b6:	2f 93       	push	r18
    11b8:	3f 93       	push	r19
    11ba:	4f 93       	push	r20
    11bc:	5f 93       	push	r21
    11be:	6f 93       	push	r22
    11c0:	7f 93       	push	r23
    11c2:	8f 93       	push	r24
    11c4:	9f 93       	push	r25
    11c6:	af 93       	push	r26
    11c8:	bf 93       	push	r27
    11ca:	ef 93       	push	r30
    11cc:	ff 93       	push	r31
    11ce:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <overflows>
    11d2:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <overflows+0x1>
    11d6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    11da:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    11de:	c9 01       	movw	r24, r18
    11e0:	03 2e       	mov	r0, r19
    11e2:	00 0c       	add	r0, r0
    11e4:	aa 0b       	sbc	r26, r26
    11e6:	bb 0b       	sbc	r27, r27
    11e8:	dc 01       	movw	r26, r24
    11ea:	99 27       	eor	r25, r25
    11ec:	88 27       	eor	r24, r24
    11ee:	60 e0       	ldi	r22, 0x00	; 0
    11f0:	70 e0       	ldi	r23, 0x00	; 0
    11f2:	84 2b       	or	r24, r20
    11f4:	95 2b       	or	r25, r21
    11f6:	a6 2b       	or	r26, r22
    11f8:	b7 2b       	or	r27, r23
    11fa:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    11fe:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    1202:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    1206:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    120a:	b0 9b       	sbis	0x16, 0	; 22
    120c:	1b c0       	rjmp	.+54     	; 0x1244 <__vector_17+0x98>
    120e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1212:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1216:	c9 01       	movw	r24, r18
    1218:	01 96       	adiw	r24, 0x01	; 1
    121a:	09 2e       	mov	r0, r25
    121c:	00 0c       	add	r0, r0
    121e:	aa 0b       	sbc	r26, r26
    1220:	bb 0b       	sbc	r27, r27
    1222:	dc 01       	movw	r26, r24
    1224:	99 27       	eor	r25, r25
    1226:	88 27       	eor	r24, r24
    1228:	60 e0       	ldi	r22, 0x00	; 0
    122a:	70 e0       	ldi	r23, 0x00	; 0
    122c:	84 2b       	or	r24, r20
    122e:	95 2b       	or	r25, r21
    1230:	a6 2b       	or	r26, r22
    1232:	b7 2b       	or	r27, r23
    1234:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    1238:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    123c:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    1240:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    1244:	e0 91 1a 02 	lds	r30, 0x021A	; 0x80021a <mtable+0x18>
    1248:	f0 91 1b 02 	lds	r31, 0x021B	; 0x80021b <mtable+0x19>
    124c:	30 97       	sbiw	r30, 0x00	; 0
    124e:	39 f0       	breq	.+14     	; 0x125e <__vector_17+0xb2>
    1250:	6c e0       	ldi	r22, 0x0C	; 12
    1252:	70 e0       	ldi	r23, 0x00	; 0
    1254:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <otable+0x18>
    1258:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <otable+0x19>
    125c:	09 95       	icall
    125e:	0e 94 8b 03 	call	0x716	; 0x716 <schedule>
    1262:	ff 91       	pop	r31
    1264:	ef 91       	pop	r30
    1266:	bf 91       	pop	r27
    1268:	af 91       	pop	r26
    126a:	9f 91       	pop	r25
    126c:	8f 91       	pop	r24
    126e:	7f 91       	pop	r23
    1270:	6f 91       	pop	r22
    1272:	5f 91       	pop	r21
    1274:	4f 91       	pop	r20
    1276:	3f 91       	pop	r19
    1278:	2f 91       	pop	r18
    127a:	0f 90       	pop	r0
    127c:	0f be       	out	0x3f, r0	; 63
    127e:	0f 90       	pop	r0
    1280:	1f 90       	pop	r1
    1282:	18 95       	reti

00001284 <__vector_18>:
    1284:	1f 92       	push	r1
    1286:	0f 92       	push	r0
    1288:	0f b6       	in	r0, 0x3f	; 63
    128a:	0f 92       	push	r0
    128c:	11 24       	eor	r1, r1
    128e:	2f 93       	push	r18
    1290:	3f 93       	push	r19
    1292:	4f 93       	push	r20
    1294:	5f 93       	push	r21
    1296:	6f 93       	push	r22
    1298:	7f 93       	push	r23
    129a:	8f 93       	push	r24
    129c:	9f 93       	push	r25
    129e:	af 93       	push	r26
    12a0:	bf 93       	push	r27
    12a2:	ef 93       	push	r30
    12a4:	ff 93       	push	r31
    12a6:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <overflows>
    12aa:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <overflows+0x1>
    12ae:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    12b2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    12b6:	c9 01       	movw	r24, r18
    12b8:	03 2e       	mov	r0, r19
    12ba:	00 0c       	add	r0, r0
    12bc:	aa 0b       	sbc	r26, r26
    12be:	bb 0b       	sbc	r27, r27
    12c0:	dc 01       	movw	r26, r24
    12c2:	99 27       	eor	r25, r25
    12c4:	88 27       	eor	r24, r24
    12c6:	60 e0       	ldi	r22, 0x00	; 0
    12c8:	70 e0       	ldi	r23, 0x00	; 0
    12ca:	84 2b       	or	r24, r20
    12cc:	95 2b       	or	r25, r21
    12ce:	a6 2b       	or	r26, r22
    12d0:	b7 2b       	or	r27, r23
    12d2:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    12d6:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    12da:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    12de:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    12e2:	b0 9b       	sbis	0x16, 0	; 22
    12e4:	1b c0       	rjmp	.+54     	; 0x131c <__vector_18+0x98>
    12e6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    12ea:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    12ee:	c9 01       	movw	r24, r18
    12f0:	01 96       	adiw	r24, 0x01	; 1
    12f2:	09 2e       	mov	r0, r25
    12f4:	00 0c       	add	r0, r0
    12f6:	aa 0b       	sbc	r26, r26
    12f8:	bb 0b       	sbc	r27, r27
    12fa:	dc 01       	movw	r26, r24
    12fc:	99 27       	eor	r25, r25
    12fe:	88 27       	eor	r24, r24
    1300:	60 e0       	ldi	r22, 0x00	; 0
    1302:	70 e0       	ldi	r23, 0x00	; 0
    1304:	84 2b       	or	r24, r20
    1306:	95 2b       	or	r25, r21
    1308:	a6 2b       	or	r26, r22
    130a:	b7 2b       	or	r27, r23
    130c:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    1310:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    1314:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    1318:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    131c:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <mtable+0x1a>
    1320:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <mtable+0x1b>
    1324:	30 97       	sbiw	r30, 0x00	; 0
    1326:	39 f0       	breq	.+14     	; 0x1336 <__vector_18+0xb2>
    1328:	6d e0       	ldi	r22, 0x0D	; 13
    132a:	70 e0       	ldi	r23, 0x00	; 0
    132c:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <otable+0x1a>
    1330:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <otable+0x1b>
    1334:	09 95       	icall
    1336:	0e 94 8b 03 	call	0x716	; 0x716 <schedule>
    133a:	ff 91       	pop	r31
    133c:	ef 91       	pop	r30
    133e:	bf 91       	pop	r27
    1340:	af 91       	pop	r26
    1342:	9f 91       	pop	r25
    1344:	8f 91       	pop	r24
    1346:	7f 91       	pop	r23
    1348:	6f 91       	pop	r22
    134a:	5f 91       	pop	r21
    134c:	4f 91       	pop	r20
    134e:	3f 91       	pop	r19
    1350:	2f 91       	pop	r18
    1352:	0f 90       	pop	r0
    1354:	0f be       	out	0x3f, r0	; 63
    1356:	0f 90       	pop	r0
    1358:	1f 90       	pop	r1
    135a:	18 95       	reti

0000135c <__vector_19>:
    135c:	1f 92       	push	r1
    135e:	0f 92       	push	r0
    1360:	0f b6       	in	r0, 0x3f	; 63
    1362:	0f 92       	push	r0
    1364:	11 24       	eor	r1, r1
    1366:	2f 93       	push	r18
    1368:	3f 93       	push	r19
    136a:	4f 93       	push	r20
    136c:	5f 93       	push	r21
    136e:	6f 93       	push	r22
    1370:	7f 93       	push	r23
    1372:	8f 93       	push	r24
    1374:	9f 93       	push	r25
    1376:	af 93       	push	r26
    1378:	bf 93       	push	r27
    137a:	ef 93       	push	r30
    137c:	ff 93       	push	r31
    137e:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <overflows>
    1382:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <overflows+0x1>
    1386:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    138a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    138e:	c9 01       	movw	r24, r18
    1390:	03 2e       	mov	r0, r19
    1392:	00 0c       	add	r0, r0
    1394:	aa 0b       	sbc	r26, r26
    1396:	bb 0b       	sbc	r27, r27
    1398:	dc 01       	movw	r26, r24
    139a:	99 27       	eor	r25, r25
    139c:	88 27       	eor	r24, r24
    139e:	60 e0       	ldi	r22, 0x00	; 0
    13a0:	70 e0       	ldi	r23, 0x00	; 0
    13a2:	84 2b       	or	r24, r20
    13a4:	95 2b       	or	r25, r21
    13a6:	a6 2b       	or	r26, r22
    13a8:	b7 2b       	or	r27, r23
    13aa:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    13ae:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    13b2:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    13b6:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    13ba:	b0 9b       	sbis	0x16, 0	; 22
    13bc:	1b c0       	rjmp	.+54     	; 0x13f4 <__vector_19+0x98>
    13be:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    13c2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    13c6:	c9 01       	movw	r24, r18
    13c8:	01 96       	adiw	r24, 0x01	; 1
    13ca:	09 2e       	mov	r0, r25
    13cc:	00 0c       	add	r0, r0
    13ce:	aa 0b       	sbc	r26, r26
    13d0:	bb 0b       	sbc	r27, r27
    13d2:	dc 01       	movw	r26, r24
    13d4:	99 27       	eor	r25, r25
    13d6:	88 27       	eor	r24, r24
    13d8:	60 e0       	ldi	r22, 0x00	; 0
    13da:	70 e0       	ldi	r23, 0x00	; 0
    13dc:	84 2b       	or	r24, r20
    13de:	95 2b       	or	r25, r21
    13e0:	a6 2b       	or	r26, r22
    13e2:	b7 2b       	or	r27, r23
    13e4:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    13e8:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    13ec:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    13f0:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    13f4:	e0 91 1e 02 	lds	r30, 0x021E	; 0x80021e <mtable+0x1c>
    13f8:	f0 91 1f 02 	lds	r31, 0x021F	; 0x80021f <mtable+0x1d>
    13fc:	30 97       	sbiw	r30, 0x00	; 0
    13fe:	39 f0       	breq	.+14     	; 0x140e <__vector_19+0xb2>
    1400:	6e e0       	ldi	r22, 0x0E	; 14
    1402:	70 e0       	ldi	r23, 0x00	; 0
    1404:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <otable+0x1c>
    1408:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <otable+0x1d>
    140c:	09 95       	icall
    140e:	0e 94 8b 03 	call	0x716	; 0x716 <schedule>
    1412:	ff 91       	pop	r31
    1414:	ef 91       	pop	r30
    1416:	bf 91       	pop	r27
    1418:	af 91       	pop	r26
    141a:	9f 91       	pop	r25
    141c:	8f 91       	pop	r24
    141e:	7f 91       	pop	r23
    1420:	6f 91       	pop	r22
    1422:	5f 91       	pop	r21
    1424:	4f 91       	pop	r20
    1426:	3f 91       	pop	r19
    1428:	2f 91       	pop	r18
    142a:	0f 90       	pop	r0
    142c:	0f be       	out	0x3f, r0	; 63
    142e:	0f 90       	pop	r0
    1430:	1f 90       	pop	r1
    1432:	18 95       	reti

00001434 <__vector_20>:
    1434:	1f 92       	push	r1
    1436:	0f 92       	push	r0
    1438:	0f b6       	in	r0, 0x3f	; 63
    143a:	0f 92       	push	r0
    143c:	11 24       	eor	r1, r1
    143e:	2f 93       	push	r18
    1440:	3f 93       	push	r19
    1442:	4f 93       	push	r20
    1444:	5f 93       	push	r21
    1446:	6f 93       	push	r22
    1448:	7f 93       	push	r23
    144a:	8f 93       	push	r24
    144c:	9f 93       	push	r25
    144e:	af 93       	push	r26
    1450:	bf 93       	push	r27
    1452:	ef 93       	push	r30
    1454:	ff 93       	push	r31
    1456:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <overflows>
    145a:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <overflows+0x1>
    145e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1462:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1466:	c9 01       	movw	r24, r18
    1468:	03 2e       	mov	r0, r19
    146a:	00 0c       	add	r0, r0
    146c:	aa 0b       	sbc	r26, r26
    146e:	bb 0b       	sbc	r27, r27
    1470:	dc 01       	movw	r26, r24
    1472:	99 27       	eor	r25, r25
    1474:	88 27       	eor	r24, r24
    1476:	60 e0       	ldi	r22, 0x00	; 0
    1478:	70 e0       	ldi	r23, 0x00	; 0
    147a:	84 2b       	or	r24, r20
    147c:	95 2b       	or	r25, r21
    147e:	a6 2b       	or	r26, r22
    1480:	b7 2b       	or	r27, r23
    1482:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    1486:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    148a:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    148e:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    1492:	b0 9b       	sbis	0x16, 0	; 22
    1494:	1b c0       	rjmp	.+54     	; 0x14cc <__vector_20+0x98>
    1496:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    149a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    149e:	c9 01       	movw	r24, r18
    14a0:	01 96       	adiw	r24, 0x01	; 1
    14a2:	09 2e       	mov	r0, r25
    14a4:	00 0c       	add	r0, r0
    14a6:	aa 0b       	sbc	r26, r26
    14a8:	bb 0b       	sbc	r27, r27
    14aa:	dc 01       	movw	r26, r24
    14ac:	99 27       	eor	r25, r25
    14ae:	88 27       	eor	r24, r24
    14b0:	60 e0       	ldi	r22, 0x00	; 0
    14b2:	70 e0       	ldi	r23, 0x00	; 0
    14b4:	84 2b       	or	r24, r20
    14b6:	95 2b       	or	r25, r21
    14b8:	a6 2b       	or	r26, r22
    14ba:	b7 2b       	or	r27, r23
    14bc:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    14c0:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    14c4:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    14c8:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    14cc:	e0 91 20 02 	lds	r30, 0x0220	; 0x800220 <mtable+0x1e>
    14d0:	f0 91 21 02 	lds	r31, 0x0221	; 0x800221 <mtable+0x1f>
    14d4:	30 97       	sbiw	r30, 0x00	; 0
    14d6:	39 f0       	breq	.+14     	; 0x14e6 <__vector_20+0xb2>
    14d8:	6f e0       	ldi	r22, 0x0F	; 15
    14da:	70 e0       	ldi	r23, 0x00	; 0
    14dc:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <otable+0x1e>
    14e0:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <otable+0x1f>
    14e4:	09 95       	icall
    14e6:	0e 94 8b 03 	call	0x716	; 0x716 <schedule>
    14ea:	ff 91       	pop	r31
    14ec:	ef 91       	pop	r30
    14ee:	bf 91       	pop	r27
    14f0:	af 91       	pop	r26
    14f2:	9f 91       	pop	r25
    14f4:	8f 91       	pop	r24
    14f6:	7f 91       	pop	r23
    14f8:	6f 91       	pop	r22
    14fa:	5f 91       	pop	r21
    14fc:	4f 91       	pop	r20
    14fe:	3f 91       	pop	r19
    1500:	2f 91       	pop	r18
    1502:	0f 90       	pop	r0
    1504:	0f be       	out	0x3f, r0	; 63
    1506:	0f 90       	pop	r0
    1508:	1f 90       	pop	r1
    150a:	18 95       	reti

0000150c <__vector_21>:
    150c:	1f 92       	push	r1
    150e:	0f 92       	push	r0
    1510:	0f b6       	in	r0, 0x3f	; 63
    1512:	0f 92       	push	r0
    1514:	11 24       	eor	r1, r1
    1516:	2f 93       	push	r18
    1518:	3f 93       	push	r19
    151a:	4f 93       	push	r20
    151c:	5f 93       	push	r21
    151e:	6f 93       	push	r22
    1520:	7f 93       	push	r23
    1522:	8f 93       	push	r24
    1524:	9f 93       	push	r25
    1526:	af 93       	push	r26
    1528:	bf 93       	push	r27
    152a:	ef 93       	push	r30
    152c:	ff 93       	push	r31
    152e:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <overflows>
    1532:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <overflows+0x1>
    1536:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    153a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    153e:	c9 01       	movw	r24, r18
    1540:	03 2e       	mov	r0, r19
    1542:	00 0c       	add	r0, r0
    1544:	aa 0b       	sbc	r26, r26
    1546:	bb 0b       	sbc	r27, r27
    1548:	dc 01       	movw	r26, r24
    154a:	99 27       	eor	r25, r25
    154c:	88 27       	eor	r24, r24
    154e:	60 e0       	ldi	r22, 0x00	; 0
    1550:	70 e0       	ldi	r23, 0x00	; 0
    1552:	84 2b       	or	r24, r20
    1554:	95 2b       	or	r25, r21
    1556:	a6 2b       	or	r26, r22
    1558:	b7 2b       	or	r27, r23
    155a:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    155e:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    1562:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    1566:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    156a:	b0 9b       	sbis	0x16, 0	; 22
    156c:	1b c0       	rjmp	.+54     	; 0x15a4 <__vector_21+0x98>
    156e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1572:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1576:	c9 01       	movw	r24, r18
    1578:	01 96       	adiw	r24, 0x01	; 1
    157a:	09 2e       	mov	r0, r25
    157c:	00 0c       	add	r0, r0
    157e:	aa 0b       	sbc	r26, r26
    1580:	bb 0b       	sbc	r27, r27
    1582:	dc 01       	movw	r26, r24
    1584:	99 27       	eor	r25, r25
    1586:	88 27       	eor	r24, r24
    1588:	60 e0       	ldi	r22, 0x00	; 0
    158a:	70 e0       	ldi	r23, 0x00	; 0
    158c:	84 2b       	or	r24, r20
    158e:	95 2b       	or	r25, r21
    1590:	a6 2b       	or	r26, r22
    1592:	b7 2b       	or	r27, r23
    1594:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    1598:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    159c:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    15a0:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    15a4:	e0 91 22 02 	lds	r30, 0x0222	; 0x800222 <mtable+0x20>
    15a8:	f0 91 23 02 	lds	r31, 0x0223	; 0x800223 <mtable+0x21>
    15ac:	30 97       	sbiw	r30, 0x00	; 0
    15ae:	39 f0       	breq	.+14     	; 0x15be <__vector_21+0xb2>
    15b0:	60 e1       	ldi	r22, 0x10	; 16
    15b2:	70 e0       	ldi	r23, 0x00	; 0
    15b4:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <otable+0x20>
    15b8:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <otable+0x21>
    15bc:	09 95       	icall
    15be:	0e 94 8b 03 	call	0x716	; 0x716 <schedule>
    15c2:	ff 91       	pop	r31
    15c4:	ef 91       	pop	r30
    15c6:	bf 91       	pop	r27
    15c8:	af 91       	pop	r26
    15ca:	9f 91       	pop	r25
    15cc:	8f 91       	pop	r24
    15ce:	7f 91       	pop	r23
    15d0:	6f 91       	pop	r22
    15d2:	5f 91       	pop	r21
    15d4:	4f 91       	pop	r20
    15d6:	3f 91       	pop	r19
    15d8:	2f 91       	pop	r18
    15da:	0f 90       	pop	r0
    15dc:	0f be       	out	0x3f, r0	; 63
    15de:	0f 90       	pop	r0
    15e0:	1f 90       	pop	r1
    15e2:	18 95       	reti

000015e4 <__vector_22>:
    15e4:	1f 92       	push	r1
    15e6:	0f 92       	push	r0
    15e8:	0f b6       	in	r0, 0x3f	; 63
    15ea:	0f 92       	push	r0
    15ec:	11 24       	eor	r1, r1
    15ee:	2f 93       	push	r18
    15f0:	3f 93       	push	r19
    15f2:	4f 93       	push	r20
    15f4:	5f 93       	push	r21
    15f6:	6f 93       	push	r22
    15f8:	7f 93       	push	r23
    15fa:	8f 93       	push	r24
    15fc:	9f 93       	push	r25
    15fe:	af 93       	push	r26
    1600:	bf 93       	push	r27
    1602:	ef 93       	push	r30
    1604:	ff 93       	push	r31
    1606:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <overflows>
    160a:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <overflows+0x1>
    160e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1612:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1616:	c9 01       	movw	r24, r18
    1618:	03 2e       	mov	r0, r19
    161a:	00 0c       	add	r0, r0
    161c:	aa 0b       	sbc	r26, r26
    161e:	bb 0b       	sbc	r27, r27
    1620:	dc 01       	movw	r26, r24
    1622:	99 27       	eor	r25, r25
    1624:	88 27       	eor	r24, r24
    1626:	60 e0       	ldi	r22, 0x00	; 0
    1628:	70 e0       	ldi	r23, 0x00	; 0
    162a:	84 2b       	or	r24, r20
    162c:	95 2b       	or	r25, r21
    162e:	a6 2b       	or	r26, r22
    1630:	b7 2b       	or	r27, r23
    1632:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    1636:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    163a:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    163e:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    1642:	b0 9b       	sbis	0x16, 0	; 22
    1644:	1b c0       	rjmp	.+54     	; 0x167c <__vector_22+0x98>
    1646:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    164a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    164e:	c9 01       	movw	r24, r18
    1650:	01 96       	adiw	r24, 0x01	; 1
    1652:	09 2e       	mov	r0, r25
    1654:	00 0c       	add	r0, r0
    1656:	aa 0b       	sbc	r26, r26
    1658:	bb 0b       	sbc	r27, r27
    165a:	dc 01       	movw	r26, r24
    165c:	99 27       	eor	r25, r25
    165e:	88 27       	eor	r24, r24
    1660:	60 e0       	ldi	r22, 0x00	; 0
    1662:	70 e0       	ldi	r23, 0x00	; 0
    1664:	84 2b       	or	r24, r20
    1666:	95 2b       	or	r25, r21
    1668:	a6 2b       	or	r26, r22
    166a:	b7 2b       	or	r27, r23
    166c:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    1670:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    1674:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    1678:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    167c:	e0 91 24 02 	lds	r30, 0x0224	; 0x800224 <mtable+0x22>
    1680:	f0 91 25 02 	lds	r31, 0x0225	; 0x800225 <mtable+0x23>
    1684:	30 97       	sbiw	r30, 0x00	; 0
    1686:	39 f0       	breq	.+14     	; 0x1696 <__vector_22+0xb2>
    1688:	61 e1       	ldi	r22, 0x11	; 17
    168a:	70 e0       	ldi	r23, 0x00	; 0
    168c:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <otable+0x22>
    1690:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <otable+0x23>
    1694:	09 95       	icall
    1696:	0e 94 8b 03 	call	0x716	; 0x716 <schedule>
    169a:	ff 91       	pop	r31
    169c:	ef 91       	pop	r30
    169e:	bf 91       	pop	r27
    16a0:	af 91       	pop	r26
    16a2:	9f 91       	pop	r25
    16a4:	8f 91       	pop	r24
    16a6:	7f 91       	pop	r23
    16a8:	6f 91       	pop	r22
    16aa:	5f 91       	pop	r21
    16ac:	4f 91       	pop	r20
    16ae:	3f 91       	pop	r19
    16b0:	2f 91       	pop	r18
    16b2:	0f 90       	pop	r0
    16b4:	0f be       	out	0x3f, r0	; 63
    16b6:	0f 90       	pop	r0
    16b8:	1f 90       	pop	r1
    16ba:	18 95       	reti

000016bc <enqueueByDeadline>:
    16bc:	ef 92       	push	r14
    16be:	ff 92       	push	r15
    16c0:	0f 93       	push	r16
    16c2:	1f 93       	push	r17
    16c4:	cf 93       	push	r28
    16c6:	df 93       	push	r29
    16c8:	7b 01       	movw	r14, r22
    16ca:	eb 01       	movw	r28, r22
    16cc:	a8 81       	ld	r26, Y
    16ce:	b9 81       	ldd	r27, Y+1	; 0x01
    16d0:	10 97       	sbiw	r26, 0x00	; 0
    16d2:	61 f1       	breq	.+88     	; 0x172c <enqueueByDeadline+0x70>
    16d4:	fc 01       	movw	r30, r24
    16d6:	06 81       	ldd	r16, Z+6	; 0x06
    16d8:	17 81       	ldd	r17, Z+7	; 0x07
    16da:	20 85       	ldd	r18, Z+8	; 0x08
    16dc:	31 85       	ldd	r19, Z+9	; 0x09
    16de:	16 96       	adiw	r26, 0x06	; 6
    16e0:	4d 91       	ld	r20, X+
    16e2:	5d 91       	ld	r21, X+
    16e4:	6d 91       	ld	r22, X+
    16e6:	7c 91       	ld	r23, X
    16e8:	19 97       	sbiw	r26, 0x09	; 9
    16ea:	04 17       	cp	r16, r20
    16ec:	15 07       	cpc	r17, r21
    16ee:	26 07       	cpc	r18, r22
    16f0:	37 07       	cpc	r19, r23
    16f2:	14 f4       	brge	.+4      	; 0x16f8 <enqueueByDeadline+0x3c>
    16f4:	1b c0       	rjmp	.+54     	; 0x172c <enqueueByDeadline+0x70>
    16f6:	df 01       	movw	r26, r30
    16f8:	ed 91       	ld	r30, X+
    16fa:	fc 91       	ld	r31, X
    16fc:	11 97       	sbiw	r26, 0x01	; 1
    16fe:	30 97       	sbiw	r30, 0x00	; 0
    1700:	49 f0       	breq	.+18     	; 0x1714 <enqueueByDeadline+0x58>
    1702:	46 81       	ldd	r20, Z+6	; 0x06
    1704:	57 81       	ldd	r21, Z+7	; 0x07
    1706:	60 85       	ldd	r22, Z+8	; 0x08
    1708:	71 85       	ldd	r23, Z+9	; 0x09
    170a:	04 17       	cp	r16, r20
    170c:	15 07       	cpc	r17, r21
    170e:	26 07       	cpc	r18, r22
    1710:	37 07       	cpc	r19, r23
    1712:	8c f7       	brge	.-30     	; 0x16f6 <enqueueByDeadline+0x3a>
    1714:	ec 01       	movw	r28, r24
    1716:	f9 83       	std	Y+1, r31	; 0x01
    1718:	e8 83       	st	Y, r30
    171a:	10 97       	sbiw	r26, 0x00	; 0
    171c:	21 f4       	brne	.+8      	; 0x1726 <enqueueByDeadline+0x6a>
    171e:	f7 01       	movw	r30, r14
    1720:	91 83       	std	Z+1, r25	; 0x01
    1722:	80 83       	st	Z, r24
    1724:	07 c0       	rjmp	.+14     	; 0x1734 <enqueueByDeadline+0x78>
    1726:	8d 93       	st	X+, r24
    1728:	9c 93       	st	X, r25
    172a:	04 c0       	rjmp	.+8      	; 0x1734 <enqueueByDeadline+0x78>
    172c:	ec 01       	movw	r28, r24
    172e:	b9 83       	std	Y+1, r27	; 0x01
    1730:	a8 83       	st	Y, r26
    1732:	f5 cf       	rjmp	.-22     	; 0x171e <enqueueByDeadline+0x62>
    1734:	df 91       	pop	r29
    1736:	cf 91       	pop	r28
    1738:	1f 91       	pop	r17
    173a:	0f 91       	pop	r16
    173c:	ff 90       	pop	r15
    173e:	ef 90       	pop	r14
    1740:	08 95       	ret

00001742 <enqueueByBaseline>:
    1742:	ef 92       	push	r14
    1744:	ff 92       	push	r15
    1746:	0f 93       	push	r16
    1748:	1f 93       	push	r17
    174a:	cf 93       	push	r28
    174c:	df 93       	push	r29
    174e:	7b 01       	movw	r14, r22
    1750:	eb 01       	movw	r28, r22
    1752:	a8 81       	ld	r26, Y
    1754:	b9 81       	ldd	r27, Y+1	; 0x01
    1756:	10 97       	sbiw	r26, 0x00	; 0
    1758:	61 f1       	breq	.+88     	; 0x17b2 <enqueueByBaseline+0x70>
    175a:	fc 01       	movw	r30, r24
    175c:	02 81       	ldd	r16, Z+2	; 0x02
    175e:	13 81       	ldd	r17, Z+3	; 0x03
    1760:	24 81       	ldd	r18, Z+4	; 0x04
    1762:	35 81       	ldd	r19, Z+5	; 0x05
    1764:	12 96       	adiw	r26, 0x02	; 2
    1766:	4d 91       	ld	r20, X+
    1768:	5d 91       	ld	r21, X+
    176a:	6d 91       	ld	r22, X+
    176c:	7c 91       	ld	r23, X
    176e:	15 97       	sbiw	r26, 0x05	; 5
    1770:	04 17       	cp	r16, r20
    1772:	15 07       	cpc	r17, r21
    1774:	26 07       	cpc	r18, r22
    1776:	37 07       	cpc	r19, r23
    1778:	14 f4       	brge	.+4      	; 0x177e <enqueueByBaseline+0x3c>
    177a:	1b c0       	rjmp	.+54     	; 0x17b2 <enqueueByBaseline+0x70>
    177c:	df 01       	movw	r26, r30
    177e:	ed 91       	ld	r30, X+
    1780:	fc 91       	ld	r31, X
    1782:	11 97       	sbiw	r26, 0x01	; 1
    1784:	30 97       	sbiw	r30, 0x00	; 0
    1786:	49 f0       	breq	.+18     	; 0x179a <enqueueByBaseline+0x58>
    1788:	42 81       	ldd	r20, Z+2	; 0x02
    178a:	53 81       	ldd	r21, Z+3	; 0x03
    178c:	64 81       	ldd	r22, Z+4	; 0x04
    178e:	75 81       	ldd	r23, Z+5	; 0x05
    1790:	04 17       	cp	r16, r20
    1792:	15 07       	cpc	r17, r21
    1794:	26 07       	cpc	r18, r22
    1796:	37 07       	cpc	r19, r23
    1798:	8c f7       	brge	.-30     	; 0x177c <enqueueByBaseline+0x3a>
    179a:	ec 01       	movw	r28, r24
    179c:	f9 83       	std	Y+1, r31	; 0x01
    179e:	e8 83       	st	Y, r30
    17a0:	10 97       	sbiw	r26, 0x00	; 0
    17a2:	21 f4       	brne	.+8      	; 0x17ac <enqueueByBaseline+0x6a>
    17a4:	f7 01       	movw	r30, r14
    17a6:	91 83       	std	Z+1, r25	; 0x01
    17a8:	80 83       	st	Z, r24
    17aa:	07 c0       	rjmp	.+14     	; 0x17ba <enqueueByBaseline+0x78>
    17ac:	8d 93       	st	X+, r24
    17ae:	9c 93       	st	X, r25
    17b0:	04 c0       	rjmp	.+8      	; 0x17ba <enqueueByBaseline+0x78>
    17b2:	ec 01       	movw	r28, r24
    17b4:	b9 83       	std	Y+1, r27	; 0x01
    17b6:	a8 83       	st	Y, r26
    17b8:	f5 cf       	rjmp	.-22     	; 0x17a4 <enqueueByBaseline+0x62>
    17ba:	df 91       	pop	r29
    17bc:	cf 91       	pop	r28
    17be:	1f 91       	pop	r17
    17c0:	0f 91       	pop	r16
    17c2:	ff 90       	pop	r15
    17c4:	ef 90       	pop	r14
    17c6:	08 95       	ret

000017c8 <dequeue>:
    17c8:	dc 01       	movw	r26, r24
    17ca:	ed 91       	ld	r30, X+
    17cc:	fc 91       	ld	r31, X
    17ce:	11 97       	sbiw	r26, 0x01	; 1
    17d0:	30 97       	sbiw	r30, 0x00	; 0
    17d2:	59 f4       	brne	.+22     	; 0x17ea <dequeue+0x22>
    17d4:	8f ef       	ldi	r24, 0xFF	; 255
    17d6:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
    17da:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
    17de:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	83 bf       	out	0x33, r24	; 51
    17e6:	88 95       	sleep
    17e8:	fd cf       	rjmp	.-6      	; 0x17e4 <dequeue+0x1c>
    17ea:	20 81       	ld	r18, Z
    17ec:	31 81       	ldd	r19, Z+1	; 0x01
    17ee:	2d 93       	st	X+, r18
    17f0:	3c 93       	st	X, r19
    17f2:	cf 01       	movw	r24, r30
    17f4:	08 95       	ret

000017f6 <__vector_9>:
    17f6:	1f 92       	push	r1
    17f8:	0f 92       	push	r0
    17fa:	0f b6       	in	r0, 0x3f	; 63
    17fc:	0f 92       	push	r0
    17fe:	11 24       	eor	r1, r1
    1800:	2f 93       	push	r18
    1802:	3f 93       	push	r19
    1804:	4f 93       	push	r20
    1806:	5f 93       	push	r21
    1808:	6f 93       	push	r22
    180a:	7f 93       	push	r23
    180c:	8f 93       	push	r24
    180e:	9f 93       	push	r25
    1810:	ef 93       	push	r30
    1812:	ff 93       	push	r31
    1814:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <overflows>
    1818:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <overflows+0x1>
    181c:	01 96       	adiw	r24, 0x01	; 1
    181e:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <overflows+0x1>
    1822:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <overflows>
    1826:	e0 91 66 01 	lds	r30, 0x0166	; 0x800166 <timerQ>
    182a:	f0 91 67 01 	lds	r31, 0x0167	; 0x800167 <timerQ+0x1>
    182e:	30 97       	sbiw	r30, 0x00	; 0
    1830:	01 f1       	breq	.+64     	; 0x1872 <__vector_9+0x7c>
    1832:	42 81       	ldd	r20, Z+2	; 0x02
    1834:	53 81       	ldd	r21, Z+3	; 0x03
    1836:	64 81       	ldd	r22, Z+4	; 0x04
    1838:	75 81       	ldd	r23, Z+5	; 0x05
    183a:	86 17       	cp	r24, r22
    183c:	97 07       	cpc	r25, r23
    183e:	c9 f4       	brne	.+50     	; 0x1872 <__vector_9+0x7c>
    1840:	ca 01       	movw	r24, r20
    1842:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1846:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    184a:	42 1b       	sub	r20, r18
    184c:	53 0b       	sbc	r21, r19
    184e:	41 30       	cpi	r20, 0x01	; 1
    1850:	51 05       	cpc	r21, r1
    1852:	29 f4       	brne	.+10     	; 0x185e <__vector_9+0x68>
    1854:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1858:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    185c:	01 96       	adiw	r24, 0x01	; 1
    185e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1862:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1866:	ef e6       	ldi	r30, 0x6F	; 111
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	80 81       	ld	r24, Z
    186c:	82 60       	ori	r24, 0x02	; 2
    186e:	80 83       	st	Z, r24
    1870:	05 c0       	rjmp	.+10     	; 0x187c <__vector_9+0x86>
    1872:	ef e6       	ldi	r30, 0x6F	; 111
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	80 81       	ld	r24, Z
    1878:	8d 7f       	andi	r24, 0xFD	; 253
    187a:	80 83       	st	Z, r24
    187c:	ff 91       	pop	r31
    187e:	ef 91       	pop	r30
    1880:	9f 91       	pop	r25
    1882:	8f 91       	pop	r24
    1884:	7f 91       	pop	r23
    1886:	6f 91       	pop	r22
    1888:	5f 91       	pop	r21
    188a:	4f 91       	pop	r20
    188c:	3f 91       	pop	r19
    188e:	2f 91       	pop	r18
    1890:	0f 90       	pop	r0
    1892:	0f be       	out	0x3f, r0	; 63
    1894:	0f 90       	pop	r0
    1896:	1f 90       	pop	r1
    1898:	18 95       	reti

0000189a <__vector_7>:
    189a:	1f 92       	push	r1
    189c:	0f 92       	push	r0
    189e:	0f b6       	in	r0, 0x3f	; 63
    18a0:	0f 92       	push	r0
    18a2:	11 24       	eor	r1, r1
    18a4:	cf 92       	push	r12
    18a6:	df 92       	push	r13
    18a8:	ef 92       	push	r14
    18aa:	ff 92       	push	r15
    18ac:	2f 93       	push	r18
    18ae:	3f 93       	push	r19
    18b0:	4f 93       	push	r20
    18b2:	5f 93       	push	r21
    18b4:	6f 93       	push	r22
    18b6:	7f 93       	push	r23
    18b8:	8f 93       	push	r24
    18ba:	9f 93       	push	r25
    18bc:	af 93       	push	r26
    18be:	bf 93       	push	r27
    18c0:	ef 93       	push	r30
    18c2:	ff 93       	push	r31
    18c4:	c0 90 60 01 	lds	r12, 0x0160	; 0x800160 <overflows>
    18c8:	d0 90 61 01 	lds	r13, 0x0161	; 0x800161 <overflows+0x1>
    18cc:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    18d0:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    18d4:	b0 99       	sbic	0x16, 0	; 22
    18d6:	0f c0       	rjmp	.+30     	; 0x18f6 <__vector_7+0x5c>
    18d8:	0d 2c       	mov	r0, r13
    18da:	00 0c       	add	r0, r0
    18dc:	ee 08       	sbc	r14, r14
    18de:	ff 08       	sbc	r15, r15
    18e0:	d6 01       	movw	r26, r12
    18e2:	99 27       	eor	r25, r25
    18e4:	88 27       	eor	r24, r24
    18e6:	69 01       	movw	r12, r18
    18e8:	e1 2c       	mov	r14, r1
    18ea:	f1 2c       	mov	r15, r1
    18ec:	c8 2a       	or	r12, r24
    18ee:	d9 2a       	or	r13, r25
    18f0:	ea 2a       	or	r14, r26
    18f2:	fb 2a       	or	r15, r27
    18f4:	15 c0       	rjmp	.+42     	; 0x1920 <__vector_7+0x86>
    18f6:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    18fa:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    18fe:	8f ef       	ldi	r24, 0xFF	; 255
    1900:	c8 1a       	sub	r12, r24
    1902:	d8 0a       	sbc	r13, r24
    1904:	0d 2c       	mov	r0, r13
    1906:	00 0c       	add	r0, r0
    1908:	ee 08       	sbc	r14, r14
    190a:	ff 08       	sbc	r15, r15
    190c:	d6 01       	movw	r26, r12
    190e:	99 27       	eor	r25, r25
    1910:	88 27       	eor	r24, r24
    1912:	69 01       	movw	r12, r18
    1914:	e1 2c       	mov	r14, r1
    1916:	f1 2c       	mov	r15, r1
    1918:	c8 2a       	or	r12, r24
    191a:	d9 2a       	or	r13, r25
    191c:	ea 2a       	or	r14, r26
    191e:	fb 2a       	or	r15, r27
    1920:	e0 91 66 01 	lds	r30, 0x0166	; 0x800166 <timerQ>
    1924:	f0 91 67 01 	lds	r31, 0x0167	; 0x800167 <timerQ+0x1>
    1928:	30 97       	sbiw	r30, 0x00	; 0
    192a:	09 f4       	brne	.+2      	; 0x192e <__vector_7+0x94>
    192c:	42 c0       	rjmp	.+132    	; 0x19b2 <__vector_7+0x118>
    192e:	82 81       	ldd	r24, Z+2	; 0x02
    1930:	93 81       	ldd	r25, Z+3	; 0x03
    1932:	a4 81       	ldd	r26, Z+4	; 0x04
    1934:	b5 81       	ldd	r27, Z+5	; 0x05
    1936:	8c 19       	sub	r24, r12
    1938:	9d 09       	sbc	r25, r13
    193a:	ae 09       	sbc	r26, r14
    193c:	bf 09       	sbc	r27, r15
    193e:	18 16       	cp	r1, r24
    1940:	19 06       	cpc	r1, r25
    1942:	1a 06       	cpc	r1, r26
    1944:	1b 06       	cpc	r1, r27
    1946:	ec f1       	brlt	.+122    	; 0x19c2 <__vector_7+0x128>
    1948:	86 e6       	ldi	r24, 0x66	; 102
    194a:	91 e0       	ldi	r25, 0x01	; 1
    194c:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <dequeue>
    1950:	68 e6       	ldi	r22, 0x68	; 104
    1952:	71 e0       	ldi	r23, 0x01	; 1
    1954:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <enqueueByDeadline>
    1958:	e0 91 66 01 	lds	r30, 0x0166	; 0x800166 <timerQ>
    195c:	f0 91 67 01 	lds	r31, 0x0167	; 0x800167 <timerQ+0x1>
    1960:	30 97       	sbiw	r30, 0x00	; 0
    1962:	39 f1       	breq	.+78     	; 0x19b2 <__vector_7+0x118>
    1964:	82 81       	ldd	r24, Z+2	; 0x02
    1966:	93 81       	ldd	r25, Z+3	; 0x03
    1968:	a4 81       	ldd	r26, Z+4	; 0x04
    196a:	b5 81       	ldd	r27, Z+5	; 0x05
    196c:	8c 19       	sub	r24, r12
    196e:	9d 09       	sbc	r25, r13
    1970:	ae 09       	sbc	r26, r14
    1972:	bf 09       	sbc	r27, r15
    1974:	18 16       	cp	r1, r24
    1976:	19 06       	cpc	r1, r25
    1978:	1a 06       	cpc	r1, r26
    197a:	1b 06       	cpc	r1, r27
    197c:	2c f7       	brge	.-54     	; 0x1948 <__vector_7+0xae>
    197e:	21 c0       	rjmp	.+66     	; 0x19c2 <__vector_7+0x128>
    1980:	9c 01       	movw	r18, r24
    1982:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1986:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    198a:	84 1b       	sub	r24, r20
    198c:	95 0b       	sbc	r25, r21
    198e:	01 97       	sbiw	r24, 0x01	; 1
    1990:	31 f4       	brne	.+12     	; 0x199e <__vector_7+0x104>
    1992:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1996:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    199a:	2f 5f       	subi	r18, 0xFF	; 255
    199c:	3f 4f       	sbci	r19, 0xFF	; 255
    199e:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    19a2:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    19a6:	ef e6       	ldi	r30, 0x6F	; 111
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 81       	ld	r24, Z
    19ac:	82 60       	ori	r24, 0x02	; 2
    19ae:	80 83       	st	Z, r24
    19b0:	05 c0       	rjmp	.+10     	; 0x19bc <__vector_7+0x122>
    19b2:	ef e6       	ldi	r30, 0x6F	; 111
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	80 81       	ld	r24, Z
    19b8:	8d 7f       	andi	r24, 0xFD	; 253
    19ba:	80 83       	st	Z, r24
    19bc:	0e 94 8b 03 	call	0x716	; 0x716 <schedule>
    19c0:	0c c0       	rjmp	.+24     	; 0x19da <__vector_7+0x140>
    19c2:	82 81       	ldd	r24, Z+2	; 0x02
    19c4:	93 81       	ldd	r25, Z+3	; 0x03
    19c6:	a4 81       	ldd	r26, Z+4	; 0x04
    19c8:	b5 81       	ldd	r27, Z+5	; 0x05
    19ca:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <overflows>
    19ce:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <overflows+0x1>
    19d2:	2a 17       	cp	r18, r26
    19d4:	3b 07       	cpc	r19, r27
    19d6:	69 f7       	brne	.-38     	; 0x19b2 <__vector_7+0x118>
    19d8:	d3 cf       	rjmp	.-90     	; 0x1980 <__vector_7+0xe6>
    19da:	ff 91       	pop	r31
    19dc:	ef 91       	pop	r30
    19de:	bf 91       	pop	r27
    19e0:	af 91       	pop	r26
    19e2:	9f 91       	pop	r25
    19e4:	8f 91       	pop	r24
    19e6:	7f 91       	pop	r23
    19e8:	6f 91       	pop	r22
    19ea:	5f 91       	pop	r21
    19ec:	4f 91       	pop	r20
    19ee:	3f 91       	pop	r19
    19f0:	2f 91       	pop	r18
    19f2:	ff 90       	pop	r15
    19f4:	ef 90       	pop	r14
    19f6:	df 90       	pop	r13
    19f8:	cf 90       	pop	r12
    19fa:	0f 90       	pop	r0
    19fc:	0f be       	out	0x3f, r0	; 63
    19fe:	0f 90       	pop	r0
    1a00:	1f 90       	pop	r1
    1a02:	18 95       	reti

00001a04 <async>:
    1a04:	3f 92       	push	r3
    1a06:	4f 92       	push	r4
    1a08:	5f 92       	push	r5
    1a0a:	6f 92       	push	r6
    1a0c:	7f 92       	push	r7
    1a0e:	8f 92       	push	r8
    1a10:	9f 92       	push	r9
    1a12:	af 92       	push	r10
    1a14:	bf 92       	push	r11
    1a16:	cf 92       	push	r12
    1a18:	df 92       	push	r13
    1a1a:	ef 92       	push	r14
    1a1c:	ff 92       	push	r15
    1a1e:	0f 93       	push	r16
    1a20:	1f 93       	push	r17
    1a22:	cf 93       	push	r28
    1a24:	df 93       	push	r29
    1a26:	2b 01       	movw	r4, r22
    1a28:	3c 01       	movw	r6, r24
    1a2a:	49 01       	movw	r8, r18
    1a2c:	5a 01       	movw	r10, r20
    1a2e:	8f b7       	in	r24, 0x3f	; 63
    1a30:	80 78       	andi	r24, 0x80	; 128
    1a32:	38 2e       	mov	r3, r24
    1a34:	f8 94       	cli
    1a36:	86 e5       	ldi	r24, 0x56	; 86
    1a38:	91 e0       	ldi	r25, 0x01	; 1
    1a3a:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <dequeue>
    1a3e:	ec 01       	movw	r28, r24
    1a40:	1b 87       	std	Y+11, r17	; 0x0b
    1a42:	0a 87       	std	Y+10, r16	; 0x0a
    1a44:	fd 86       	std	Y+13, r15	; 0x0d
    1a46:	ec 86       	std	Y+12, r14	; 0x0c
    1a48:	df 86       	std	Y+15, r13	; 0x0f
    1a4a:	ce 86       	std	Y+14, r12	; 0x0e
    1a4c:	33 20       	and	r3, r3
    1a4e:	61 f0       	breq	.+24     	; 0x1a68 <async+0x64>
    1a50:	e0 91 50 01 	lds	r30, 0x0150	; 0x800150 <current>
    1a54:	f0 91 51 01 	lds	r31, 0x0151	; 0x800151 <current+0x1>
    1a58:	02 80       	ldd	r0, Z+2	; 0x02
    1a5a:	f3 81       	ldd	r31, Z+3	; 0x03
    1a5c:	e0 2d       	mov	r30, r0
    1a5e:	82 81       	ldd	r24, Z+2	; 0x02
    1a60:	93 81       	ldd	r25, Z+3	; 0x03
    1a62:	a4 81       	ldd	r26, Z+4	; 0x04
    1a64:	b5 81       	ldd	r27, Z+5	; 0x05
    1a66:	08 c0       	rjmp	.+16     	; 0x1a78 <async+0x74>
    1a68:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <timestamp>
    1a6c:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <timestamp+0x1>
    1a70:	a0 91 64 01 	lds	r26, 0x0164	; 0x800164 <timestamp+0x2>
    1a74:	b0 91 65 01 	lds	r27, 0x0165	; 0x800165 <timestamp+0x3>
    1a78:	48 0e       	add	r4, r24
    1a7a:	59 1e       	adc	r5, r25
    1a7c:	6a 1e       	adc	r6, r26
    1a7e:	7b 1e       	adc	r7, r27
    1a80:	4a 82       	std	Y+2, r4	; 0x02
    1a82:	5b 82       	std	Y+3, r5	; 0x03
    1a84:	6c 82       	std	Y+4, r6	; 0x04
    1a86:	7d 82       	std	Y+5, r7	; 0x05
    1a88:	18 14       	cp	r1, r8
    1a8a:	19 04       	cpc	r1, r9
    1a8c:	1a 04       	cpc	r1, r10
    1a8e:	1b 04       	cpc	r1, r11
    1a90:	44 f0       	brlt	.+16     	; 0x1aa2 <async+0x9e>
    1a92:	0f 2e       	mov	r0, r31
    1a94:	88 24       	eor	r8, r8
    1a96:	8a 94       	dec	r8
    1a98:	98 2c       	mov	r9, r8
    1a9a:	a8 2c       	mov	r10, r8
    1a9c:	ff e7       	ldi	r31, 0x7F	; 127
    1a9e:	bf 2e       	mov	r11, r31
    1aa0:	f0 2d       	mov	r31, r0
    1aa2:	84 0c       	add	r8, r4
    1aa4:	95 1c       	adc	r9, r5
    1aa6:	a6 1c       	adc	r10, r6
    1aa8:	b7 1c       	adc	r11, r7
    1aaa:	8e 82       	std	Y+6, r8	; 0x06
    1aac:	9f 82       	std	Y+7, r9	; 0x07
    1aae:	a8 86       	std	Y+8, r10	; 0x08
    1ab0:	b9 86       	std	Y+9, r11	; 0x09
    1ab2:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <overflows>
    1ab6:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <overflows+0x1>
    1aba:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1abe:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ac2:	b0 99       	sbic	0x16, 0	; 22
    1ac4:	0e c0       	rjmp	.+28     	; 0x1ae2 <async+0xde>
    1ac6:	09 2e       	mov	r0, r25
    1ac8:	00 0c       	add	r0, r0
    1aca:	aa 0b       	sbc	r26, r26
    1acc:	bb 0b       	sbc	r27, r27
    1ace:	dc 01       	movw	r26, r24
    1ad0:	99 27       	eor	r25, r25
    1ad2:	88 27       	eor	r24, r24
    1ad4:	60 e0       	ldi	r22, 0x00	; 0
    1ad6:	70 e0       	ldi	r23, 0x00	; 0
    1ad8:	84 2b       	or	r24, r20
    1ada:	95 2b       	or	r25, r21
    1adc:	a6 2b       	or	r26, r22
    1ade:	b7 2b       	or	r27, r23
    1ae0:	13 c0       	rjmp	.+38     	; 0x1b08 <async+0x104>
    1ae2:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1ae6:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1aea:	01 96       	adiw	r24, 0x01	; 1
    1aec:	09 2e       	mov	r0, r25
    1aee:	00 0c       	add	r0, r0
    1af0:	aa 0b       	sbc	r26, r26
    1af2:	bb 0b       	sbc	r27, r27
    1af4:	dc 01       	movw	r26, r24
    1af6:	99 27       	eor	r25, r25
    1af8:	88 27       	eor	r24, r24
    1afa:	a9 01       	movw	r20, r18
    1afc:	60 e0       	ldi	r22, 0x00	; 0
    1afe:	70 e0       	ldi	r23, 0x00	; 0
    1b00:	84 2b       	or	r24, r20
    1b02:	95 2b       	or	r25, r21
    1b04:	a6 2b       	or	r26, r22
    1b06:	b7 2b       	or	r27, r23
    1b08:	48 1a       	sub	r4, r24
    1b0a:	59 0a       	sbc	r5, r25
    1b0c:	6a 0a       	sbc	r6, r26
    1b0e:	7b 0a       	sbc	r7, r27
    1b10:	14 14       	cp	r1, r4
    1b12:	15 04       	cpc	r1, r5
    1b14:	16 04       	cpc	r1, r6
    1b16:	17 04       	cpc	r1, r7
    1b18:	ac f5       	brge	.+106    	; 0x1b84 <async+0x180>
    1b1a:	66 e6       	ldi	r22, 0x66	; 102
    1b1c:	71 e0       	ldi	r23, 0x01	; 1
    1b1e:	ce 01       	movw	r24, r28
    1b20:	0e 94 a1 0b 	call	0x1742	; 0x1742 <enqueueByBaseline>
    1b24:	e0 91 66 01 	lds	r30, 0x0166	; 0x800166 <timerQ>
    1b28:	f0 91 67 01 	lds	r31, 0x0167	; 0x800167 <timerQ+0x1>
    1b2c:	30 97       	sbiw	r30, 0x00	; 0
    1b2e:	21 f1       	breq	.+72     	; 0x1b78 <async+0x174>
    1b30:	82 81       	ldd	r24, Z+2	; 0x02
    1b32:	93 81       	ldd	r25, Z+3	; 0x03
    1b34:	a4 81       	ldd	r26, Z+4	; 0x04
    1b36:	b5 81       	ldd	r27, Z+5	; 0x05
    1b38:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <overflows>
    1b3c:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <overflows+0x1>
    1b40:	2a 17       	cp	r18, r26
    1b42:	3b 07       	cpc	r19, r27
    1b44:	c9 f4       	brne	.+50     	; 0x1b78 <async+0x174>
    1b46:	9c 01       	movw	r18, r24
    1b48:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b4c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b50:	84 1b       	sub	r24, r20
    1b52:	95 0b       	sbc	r25, r21
    1b54:	01 97       	sbiw	r24, 0x01	; 1
    1b56:	31 f4       	brne	.+12     	; 0x1b64 <async+0x160>
    1b58:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b5c:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b60:	2f 5f       	subi	r18, 0xFF	; 255
    1b62:	3f 4f       	sbci	r19, 0xFF	; 255
    1b64:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1b68:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1b6c:	ef e6       	ldi	r30, 0x6F	; 111
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	80 81       	ld	r24, Z
    1b72:	82 60       	ori	r24, 0x02	; 2
    1b74:	80 83       	st	Z, r24
    1b76:	41 c0       	rjmp	.+130    	; 0x1bfa <async+0x1f6>
    1b78:	ef e6       	ldi	r30, 0x6F	; 111
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	80 81       	ld	r24, Z
    1b7e:	8d 7f       	andi	r24, 0xFD	; 253
    1b80:	80 83       	st	Z, r24
    1b82:	3b c0       	rjmp	.+118    	; 0x1bfa <async+0x1f6>
    1b84:	68 e6       	ldi	r22, 0x68	; 104
    1b86:	71 e0       	ldi	r23, 0x01	; 1
    1b88:	ce 01       	movw	r24, r28
    1b8a:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <enqueueByDeadline>
    1b8e:	33 20       	and	r3, r3
    1b90:	b9 f1       	breq	.+110    	; 0x1c00 <async+0x1fc>
    1b92:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <threadPool>
    1b96:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <threadPool+0x1>
    1b9a:	00 97       	sbiw	r24, 0x00	; 0
    1b9c:	81 f1       	breq	.+96     	; 0x1bfe <async+0x1fa>
    1b9e:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <activeStack>
    1ba2:	f0 91 53 01 	lds	r31, 0x0153	; 0x800153 <activeStack+0x1>
    1ba6:	20 91 68 01 	lds	r18, 0x0168	; 0x800168 <msgQ>
    1baa:	30 91 69 01 	lds	r19, 0x0169	; 0x800169 <msgQ+0x1>
    1bae:	02 81       	ldd	r16, Z+2	; 0x02
    1bb0:	13 81       	ldd	r17, Z+3	; 0x03
    1bb2:	d9 01       	movw	r26, r18
    1bb4:	16 96       	adiw	r26, 0x06	; 6
    1bb6:	4d 91       	ld	r20, X+
    1bb8:	5d 91       	ld	r21, X+
    1bba:	6d 91       	ld	r22, X+
    1bbc:	7c 91       	ld	r23, X
    1bbe:	19 97       	sbiw	r26, 0x09	; 9
    1bc0:	d8 01       	movw	r26, r16
    1bc2:	16 96       	adiw	r26, 0x06	; 6
    1bc4:	0d 91       	ld	r16, X+
    1bc6:	1d 91       	ld	r17, X+
    1bc8:	2d 91       	ld	r18, X+
    1bca:	3c 91       	ld	r19, X
    1bcc:	19 97       	sbiw	r26, 0x09	; 9
    1bce:	40 1b       	sub	r20, r16
    1bd0:	51 0b       	sbc	r21, r17
    1bd2:	62 0b       	sbc	r22, r18
    1bd4:	73 0b       	sbc	r23, r19
    1bd6:	9a f4       	brpl	.+38     	; 0x1bfe <async+0x1fa>
    1bd8:	dc 01       	movw	r26, r24
    1bda:	2d 91       	ld	r18, X+
    1bdc:	3c 91       	ld	r19, X
    1bde:	11 97       	sbiw	r26, 0x01	; 1
    1be0:	30 93 55 01 	sts	0x0155, r19	; 0x800155 <threadPool+0x1>
    1be4:	20 93 54 01 	sts	0x0154, r18	; 0x800154 <threadPool>
    1be8:	ed 93       	st	X+, r30
    1bea:	fc 93       	st	X, r31
    1bec:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <activeStack+0x1>
    1bf0:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <activeStack>
    1bf4:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <dispatch>
    1bf8:	02 c0       	rjmp	.+4      	; 0x1bfe <async+0x1fa>
    1bfa:	33 20       	and	r3, r3
    1bfc:	09 f0       	breq	.+2      	; 0x1c00 <async+0x1fc>
    1bfe:	78 94       	sei
    1c00:	ce 01       	movw	r24, r28
    1c02:	df 91       	pop	r29
    1c04:	cf 91       	pop	r28
    1c06:	1f 91       	pop	r17
    1c08:	0f 91       	pop	r16
    1c0a:	ff 90       	pop	r15
    1c0c:	ef 90       	pop	r14
    1c0e:	df 90       	pop	r13
    1c10:	cf 90       	pop	r12
    1c12:	bf 90       	pop	r11
    1c14:	af 90       	pop	r10
    1c16:	9f 90       	pop	r9
    1c18:	8f 90       	pop	r8
    1c1a:	7f 90       	pop	r7
    1c1c:	6f 90       	pop	r6
    1c1e:	5f 90       	pop	r5
    1c20:	4f 90       	pop	r4
    1c22:	3f 90       	pop	r3
    1c24:	08 95       	ret

00001c26 <sync>:
    1c26:	cf 92       	push	r12
    1c28:	df 92       	push	r13
    1c2a:	ef 92       	push	r14
    1c2c:	ff 92       	push	r15
    1c2e:	0f 93       	push	r16
    1c30:	1f 93       	push	r17
    1c32:	cf 93       	push	r28
    1c34:	df 93       	push	r29
    1c36:	ec 01       	movw	r28, r24
    1c38:	7b 01       	movw	r14, r22
    1c3a:	6a 01       	movw	r12, r20
    1c3c:	1f b7       	in	r17, 0x3f	; 63
    1c3e:	10 78       	andi	r17, 0x80	; 128
    1c40:	f8 94       	cli
    1c42:	a8 81       	ld	r26, Y
    1c44:	b9 81       	ldd	r27, Y+1	; 0x01
    1c46:	10 97       	sbiw	r26, 0x00	; 0
    1c48:	61 f1       	breq	.+88     	; 0x1ca2 <sync+0x7c>
    1c4a:	14 96       	adiw	r26, 0x04	; 4
    1c4c:	ed 91       	ld	r30, X+
    1c4e:	fc 91       	ld	r31, X
    1c50:	15 97       	sbiw	r26, 0x05	; 5
    1c52:	30 97       	sbiw	r30, 0x00	; 0
    1c54:	41 f0       	breq	.+16     	; 0x1c66 <sync+0x40>
    1c56:	a0 81       	ld	r26, Z
    1c58:	b1 81       	ldd	r27, Z+1	; 0x01
    1c5a:	14 96       	adiw	r26, 0x04	; 4
    1c5c:	ed 91       	ld	r30, X+
    1c5e:	fc 91       	ld	r31, X
    1c60:	15 97       	sbiw	r26, 0x05	; 5
    1c62:	30 97       	sbiw	r30, 0x00	; 0
    1c64:	c1 f7       	brne	.-16     	; 0x1c56 <sync+0x30>
    1c66:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <current>
    1c6a:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <current+0x1>
    1c6e:	2a 17       	cp	r18, r26
    1c70:	3b 07       	cpc	r19, r27
    1c72:	21 f0       	breq	.+8      	; 0x1c7c <sync+0x56>
    1c74:	11 23       	and	r17, r17
    1c76:	09 f4       	brne	.+2      	; 0x1c7a <sync+0x54>
    1c78:	3d c0       	rjmp	.+122    	; 0x1cf4 <sync+0xce>
    1c7a:	07 c0       	rjmp	.+14     	; 0x1c8a <sync+0x64>
    1c7c:	11 23       	and	r17, r17
    1c7e:	09 f4       	brne	.+2      	; 0x1c82 <sync+0x5c>
    1c80:	3c c0       	rjmp	.+120    	; 0x1cfa <sync+0xd4>
    1c82:	78 94       	sei
    1c84:	8f ef       	ldi	r24, 0xFF	; 255
    1c86:	9f ef       	ldi	r25, 0xFF	; 255
    1c88:	52 c0       	rjmp	.+164    	; 0x1d2e <sync+0x108>
    1c8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c8e:	00 97       	sbiw	r24, 0x00	; 0
    1c90:	d1 f1       	breq	.+116    	; 0x1d06 <sync+0xe0>
    1c92:	fc 01       	movw	r30, r24
    1c94:	15 82       	std	Z+5, r1	; 0x05
    1c96:	14 82       	std	Z+4, r1	; 0x04
    1c98:	36 c0       	rjmp	.+108    	; 0x1d06 <sync+0xe0>
    1c9a:	78 94       	sei
    1c9c:	80 e0       	ldi	r24, 0x00	; 0
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	46 c0       	rjmp	.+140    	; 0x1d2e <sync+0x108>
    1ca2:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <current>
    1ca6:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <current+0x1>
    1caa:	99 83       	std	Y+1, r25	; 0x01
    1cac:	88 83       	st	Y, r24
    1cae:	11 23       	and	r17, r17
    1cb0:	29 f0       	breq	.+10     	; 0x1cbc <sync+0x96>
    1cb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb4:	9b 81       	ldd	r25, Y+3	; 0x03
    1cb6:	01 97       	sbiw	r24, 0x01	; 1
    1cb8:	09 f0       	breq	.+2      	; 0x1cbc <sync+0x96>
    1cba:	78 94       	sei
    1cbc:	b6 01       	movw	r22, r12
    1cbe:	ce 01       	movw	r24, r28
    1cc0:	f7 01       	movw	r30, r14
    1cc2:	09 95       	icall
    1cc4:	f8 2e       	mov	r15, r24
    1cc6:	09 2f       	mov	r16, r25
    1cc8:	8f b7       	in	r24, 0x3f	; 63
    1cca:	f8 94       	cli
    1ccc:	19 82       	std	Y+1, r1	; 0x01
    1cce:	18 82       	st	Y, r1
    1cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd2:	9b 81       	ldd	r25, Y+3	; 0x03
    1cd4:	82 30       	cpi	r24, 0x02	; 2
    1cd6:	91 05       	cpc	r25, r1
    1cd8:	38 f0       	brcs	.+14     	; 0x1ce8 <sync+0xc2>
    1cda:	1b 82       	std	Y+3, r1	; 0x03
    1cdc:	1a 82       	std	Y+2, r1	; 0x02
    1cde:	fc 01       	movw	r30, r24
    1ce0:	15 82       	std	Z+5, r1	; 0x05
    1ce2:	14 82       	std	Z+4, r1	; 0x04
    1ce4:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <dispatch>
    1ce8:	11 23       	and	r17, r17
    1cea:	51 f0       	breq	.+20     	; 0x1d00 <sync+0xda>
    1cec:	78 94       	sei
    1cee:	8f 2d       	mov	r24, r15
    1cf0:	90 2f       	mov	r25, r16
    1cf2:	1d c0       	rjmp	.+58     	; 0x1d2e <sync+0x108>
    1cf4:	8f ef       	ldi	r24, 0xFF	; 255
    1cf6:	9f ef       	ldi	r25, 0xFF	; 255
    1cf8:	1a c0       	rjmp	.+52     	; 0x1d2e <sync+0x108>
    1cfa:	8f ef       	ldi	r24, 0xFF	; 255
    1cfc:	9f ef       	ldi	r25, 0xFF	; 255
    1cfe:	17 c0       	rjmp	.+46     	; 0x1d2e <sync+0x108>
    1d00:	8f 2d       	mov	r24, r15
    1d02:	90 2f       	mov	r25, r16
    1d04:	14 c0       	rjmp	.+40     	; 0x1d2e <sync+0x108>
    1d06:	3b 83       	std	Y+3, r19	; 0x03
    1d08:	2a 83       	std	Y+2, r18	; 0x02
    1d0a:	f9 01       	movw	r30, r18
    1d0c:	d5 83       	std	Z+5, r29	; 0x05
    1d0e:	c4 83       	std	Z+4, r28	; 0x04
    1d10:	cd 01       	movw	r24, r26
    1d12:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <dispatch>
    1d16:	e0 91 50 01 	lds	r30, 0x0150	; 0x800150 <current>
    1d1a:	f0 91 51 01 	lds	r31, 0x0151	; 0x800151 <current+0x1>
    1d1e:	82 81       	ldd	r24, Z+2	; 0x02
    1d20:	93 81       	ldd	r25, Z+3	; 0x03
    1d22:	89 2b       	or	r24, r25
    1d24:	09 f4       	brne	.+2      	; 0x1d28 <sync+0x102>
    1d26:	b9 cf       	rjmp	.-142    	; 0x1c9a <sync+0x74>
    1d28:	f9 83       	std	Y+1, r31	; 0x01
    1d2a:	e8 83       	st	Y, r30
    1d2c:	c2 cf       	rjmp	.-124    	; 0x1cb2 <sync+0x8c>
    1d2e:	df 91       	pop	r29
    1d30:	cf 91       	pop	r28
    1d32:	1f 91       	pop	r17
    1d34:	0f 91       	pop	r16
    1d36:	ff 90       	pop	r15
    1d38:	ef 90       	pop	r14
    1d3a:	df 90       	pop	r13
    1d3c:	cf 90       	pop	r12
    1d3e:	08 95       	ret

00001d40 <run>:
    1d40:	00 91 50 01 	lds	r16, 0x0150	; 0x800150 <current>
    1d44:	10 91 51 01 	lds	r17, 0x0151	; 0x800151 <current+0x1>
    1d48:	88 e6       	ldi	r24, 0x68	; 104
    1d4a:	91 e0       	ldi	r25, 0x01	; 1
    1d4c:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <dequeue>
    1d50:	ec 01       	movw	r28, r24
    1d52:	d8 01       	movw	r26, r16
    1d54:	13 96       	adiw	r26, 0x03	; 3
    1d56:	9c 93       	st	X, r25
    1d58:	8e 93       	st	-X, r24
    1d5a:	12 97       	sbiw	r26, 0x02	; 2
    1d5c:	78 94       	sei
    1d5e:	4e 85       	ldd	r20, Y+14	; 0x0e
    1d60:	5f 85       	ldd	r21, Y+15	; 0x0f
    1d62:	6c 85       	ldd	r22, Y+12	; 0x0c
    1d64:	7d 85       	ldd	r23, Y+13	; 0x0d
    1d66:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d68:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d6a:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <sync>
    1d6e:	8f b7       	in	r24, 0x3f	; 63
    1d70:	f8 94       	cli
    1d72:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <msgPool>
    1d76:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <msgPool+0x1>
    1d7a:	99 83       	std	Y+1, r25	; 0x01
    1d7c:	88 83       	st	Y, r24
    1d7e:	d0 93 57 01 	sts	0x0157, r29	; 0x800157 <msgPool+0x1>
    1d82:	c0 93 56 01 	sts	0x0156, r28	; 0x800156 <msgPool>
    1d86:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <activeStack>
    1d8a:	f0 91 53 01 	lds	r31, 0x0153	; 0x800153 <activeStack+0x1>
    1d8e:	00 81       	ld	r16, Z
    1d90:	11 81       	ldd	r17, Z+1	; 0x01
    1d92:	e8 01       	movw	r28, r16
    1d94:	2a 81       	ldd	r18, Y+2	; 0x02
    1d96:	3b 81       	ldd	r19, Y+3	; 0x03
    1d98:	a0 91 68 01 	lds	r26, 0x0168	; 0x800168 <msgQ>
    1d9c:	b0 91 69 01 	lds	r27, 0x0169	; 0x800169 <msgQ+0x1>
    1da0:	10 97       	sbiw	r26, 0x00	; 0
    1da2:	c1 f0       	breq	.+48     	; 0x1dd4 <run+0x94>
    1da4:	21 15       	cp	r18, r1
    1da6:	31 05       	cpc	r19, r1
    1da8:	59 f2       	breq	.-106    	; 0x1d40 <run>
    1daa:	16 96       	adiw	r26, 0x06	; 6
    1dac:	8d 91       	ld	r24, X+
    1dae:	9d 91       	ld	r25, X+
    1db0:	0d 90       	ld	r0, X+
    1db2:	bc 91       	ld	r27, X
    1db4:	a0 2d       	mov	r26, r0
    1db6:	e9 01       	movw	r28, r18
    1db8:	4e 81       	ldd	r20, Y+6	; 0x06
    1dba:	5f 81       	ldd	r21, Y+7	; 0x07
    1dbc:	68 85       	ldd	r22, Y+8	; 0x08
    1dbe:	79 85       	ldd	r23, Y+9	; 0x09
    1dc0:	84 1b       	sub	r24, r20
    1dc2:	95 0b       	sbc	r25, r21
    1dc4:	a6 0b       	sbc	r26, r22
    1dc6:	b7 0b       	sbc	r27, r23
    1dc8:	18 16       	cp	r1, r24
    1dca:	19 06       	cpc	r1, r25
    1dcc:	1a 06       	cpc	r1, r26
    1dce:	1b 06       	cpc	r1, r27
    1dd0:	0c f0       	brlt	.+2      	; 0x1dd4 <run+0x94>
    1dd2:	b6 cf       	rjmp	.-148    	; 0x1d40 <run>
    1dd4:	10 93 53 01 	sts	0x0153, r17	; 0x800153 <activeStack+0x1>
    1dd8:	00 93 52 01 	sts	0x0152, r16	; 0x800152 <activeStack>
    1ddc:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <threadPool>
    1de0:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <threadPool+0x1>
    1de4:	91 83       	std	Z+1, r25	; 0x01
    1de6:	80 83       	st	Z, r24
    1de8:	f0 93 55 01 	sts	0x0155, r31	; 0x800155 <threadPool+0x1>
    1dec:	e0 93 54 01 	sts	0x0154, r30	; 0x800154 <threadPool>
    1df0:	a0 91 52 01 	lds	r26, 0x0152	; 0x800152 <activeStack>
    1df4:	b0 91 53 01 	lds	r27, 0x0153	; 0x800153 <activeStack+0x1>
    1df8:	14 96       	adiw	r26, 0x04	; 4
    1dfa:	ed 91       	ld	r30, X+
    1dfc:	fc 91       	ld	r31, X
    1dfe:	15 97       	sbiw	r26, 0x05	; 5
    1e00:	30 97       	sbiw	r30, 0x00	; 0
    1e02:	41 f0       	breq	.+16     	; 0x1e14 <run+0xd4>
    1e04:	a0 81       	ld	r26, Z
    1e06:	b1 81       	ldd	r27, Z+1	; 0x01
    1e08:	14 96       	adiw	r26, 0x04	; 4
    1e0a:	ed 91       	ld	r30, X+
    1e0c:	fc 91       	ld	r31, X
    1e0e:	15 97       	sbiw	r26, 0x05	; 5
    1e10:	30 97       	sbiw	r30, 0x00	; 0
    1e12:	c1 f7       	brne	.-16     	; 0x1e04 <run+0xc4>
    1e14:	cd 01       	movw	r24, r26
    1e16:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <dispatch>
    1e1a:	92 cf       	rjmp	.-220    	; 0x1d40 <run>

00001e1c <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    1e1c:	8c 01       	movw	r16, r24
    1e1e:	7b 01       	movw	r14, r22
    1e20:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    1e22:	8f b7       	in	r24, 0x3f	; 63
    1e24:	f8 94       	cli
    initialize();
    1e26:	0e 94 00 03 	call	0x600	; 0x600 <initialize>
    ENABLE(1);
    1e2a:	78 94       	sei
    if (m != NULL)
    1e2c:	e1 14       	cp	r14, r1
    1e2e:	f1 04       	cpc	r15, r1
    1e30:	41 f0       	breq	.+16     	; 0x1e42 <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    1e32:	20 e0       	ldi	r18, 0x00	; 0
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	a9 01       	movw	r20, r18
    1e38:	60 e0       	ldi	r22, 0x00	; 0
    1e3a:	70 e0       	ldi	r23, 0x00	; 0
    1e3c:	cb 01       	movw	r24, r22
    1e3e:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <async>
    DISABLE(status);
    1e42:	8f b7       	in	r24, 0x3f	; 63
    1e44:	f8 94       	cli
        }
    }
}

static void idle(void) {
    schedule();
    1e46:	0e 94 8b 03 	call	0x716	; 0x716 <schedule>
    ENABLE(1);
    1e4a:	78 94       	sei
    while (1) {
        SLEEP();
    1e4c:	81 e0       	ldi	r24, 0x01	; 1
    1e4e:	83 bf       	out	0x33, r24	; 51
    1e50:	88 95       	sleep
    1e52:	fd cf       	rjmp	.-6      	; 0x1e4e <tinytimber+0x32>

00001e54 <USART_Receive>:
	return UDR0;
}

ISR(USART_RX_vect) {
	
}
    1e54:	e0 ec       	ldi	r30, 0xC0	; 192
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	80 81       	ld	r24, Z
    1e5a:	88 23       	and	r24, r24
    1e5c:	ec f7       	brge	.-6      	; 0x1e58 <USART_Receive+0x4>
    1e5e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fc0c6>
    1e62:	08 95       	ret

00001e64 <mainUSARTLoop>:

void mainUSARTLoop(USART *self) {
    1e64:	ec 01       	movw	r28, r24
	while (1) {
		uint8_t data = USART_Receive();
    1e66:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <USART_Receive>
		switch (data)
    1e6a:	82 30       	cpi	r24, 0x02	; 2
    1e6c:	71 f0       	breq	.+28     	; 0x1e8a <mainUSARTLoop+0x26>
    1e6e:	18 f4       	brcc	.+6      	; 0x1e76 <mainUSARTLoop+0x12>
    1e70:	81 30       	cpi	r24, 0x01	; 1
    1e72:	31 f0       	breq	.+12     	; 0x1e80 <mainUSARTLoop+0x1c>
    1e74:	18 c0       	rjmp	.+48     	; 0x1ea6 <mainUSARTLoop+0x42>
    1e76:	84 30       	cpi	r24, 0x04	; 4
    1e78:	69 f0       	breq	.+26     	; 0x1e94 <mainUSARTLoop+0x30>
    1e7a:	88 30       	cpi	r24, 0x08	; 8
    1e7c:	81 f0       	breq	.+32     	; 0x1e9e <mainUSARTLoop+0x3a>
    1e7e:	13 c0       	rjmp	.+38     	; 0x1ea6 <mainUSARTLoop+0x42>
		{
			case NORTH_ARVL:
				addnorthQ(self->backRef);
    1e80:	8c 81       	ldd	r24, Y+4	; 0x04
    1e82:	9d 81       	ldd	r25, Y+5	; 0x05
    1e84:	0e 94 5f 00 	call	0xbe	; 0xbe <addnorthQ>
				break;
    1e88:	0e c0       	rjmp	.+28     	; 0x1ea6 <mainUSARTLoop+0x42>
			case NORTH_BR_ARVL:
				addBrdigeQ(self->backRef);
    1e8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e8c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e8e:	0e 94 69 00 	call	0xd2	; 0xd2 <addBrdigeQ>
				break;
    1e92:	09 c0       	rjmp	.+18     	; 0x1ea6 <mainUSARTLoop+0x42>
			case SOUTH_ARVL:
				addsouthQ(self->backRef);
    1e94:	8c 81       	ldd	r24, Y+4	; 0x04
    1e96:	9d 81       	ldd	r25, Y+5	; 0x05
    1e98:	0e 94 64 00 	call	0xc8	; 0xc8 <addsouthQ>
				break;
    1e9c:	04 c0       	rjmp	.+8      	; 0x1ea6 <mainUSARTLoop+0x42>
			case SOUTH_BR_ARVL:
				addBrdigeQ(self->backRef);
    1e9e:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ea2:	0e 94 69 00 	call	0xd2	; 0xd2 <addBrdigeQ>
				break;
			default:
				break;
		}
		addsouthQ(self->backRef);
    1ea6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea8:	9d 81       	ldd	r25, Y+5	; 0x05
    1eaa:	0e 94 64 00 	call	0xc8	; 0xc8 <addsouthQ>
		mainSimulation(self->backRef);
    1eae:	8c 81       	ldd	r24, Y+4	; 0x04
    1eb0:	9d 81       	ldd	r25, Y+5	; 0x05
    1eb2:	0e 94 6e 00 	call	0xdc	; 0xdc <mainSimulation>
	}	
    1eb6:	d7 cf       	rjmp	.-82     	; 0x1e66 <mainUSARTLoop+0x2>

00001eb8 <usart_init>:
#define NORTH_BR_ARVL	0b0010
#define SOUTH_ARVL		0b0100
#define SOUTH_BR_ARVL	0b1000

void usart_init(USART *self) {
	UBRR0H = 0;
    1eb8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7fc0c5>
	UBRR0L = 103; // 9600 baud @ 16MHz
    1ebc:	27 e6       	ldi	r18, 0x67	; 103
    1ebe:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7fc0c4>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
    1ec2:	28 e9       	ldi	r18, 0x98	; 152
    1ec4:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7fc0c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
    1ec8:	26 e0       	ldi	r18, 0x06	; 6
    1eca:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7fc0c2>
	mainUSARTLoop(self);
    1ece:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <mainUSARTLoop>

00001ed2 <__udivmodqi4>:
    1ed2:	99 1b       	sub	r25, r25
    1ed4:	79 e0       	ldi	r23, 0x09	; 9
    1ed6:	04 c0       	rjmp	.+8      	; 0x1ee0 <__udivmodqi4_ep>

00001ed8 <__udivmodqi4_loop>:
    1ed8:	99 1f       	adc	r25, r25
    1eda:	96 17       	cp	r25, r22
    1edc:	08 f0       	brcs	.+2      	; 0x1ee0 <__udivmodqi4_ep>
    1ede:	96 1b       	sub	r25, r22

00001ee0 <__udivmodqi4_ep>:
    1ee0:	88 1f       	adc	r24, r24
    1ee2:	7a 95       	dec	r23
    1ee4:	c9 f7       	brne	.-14     	; 0x1ed8 <__udivmodqi4_loop>
    1ee6:	80 95       	com	r24
    1ee8:	08 95       	ret

00001eea <__divmodsi4>:
    1eea:	05 2e       	mov	r0, r21
    1eec:	97 fb       	bst	r25, 7
    1eee:	1e f4       	brtc	.+6      	; 0x1ef6 <__divmodsi4+0xc>
    1ef0:	00 94       	com	r0
    1ef2:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <__negsi2>
    1ef6:	57 fd       	sbrc	r21, 7
    1ef8:	07 d0       	rcall	.+14     	; 0x1f08 <__divmodsi4_neg2>
    1efa:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <__udivmodsi4>
    1efe:	07 fc       	sbrc	r0, 7
    1f00:	03 d0       	rcall	.+6      	; 0x1f08 <__divmodsi4_neg2>
    1f02:	4e f4       	brtc	.+18     	; 0x1f16 <__divmodsi4_exit>
    1f04:	0c 94 8c 0f 	jmp	0x1f18	; 0x1f18 <__negsi2>

00001f08 <__divmodsi4_neg2>:
    1f08:	50 95       	com	r21
    1f0a:	40 95       	com	r20
    1f0c:	30 95       	com	r19
    1f0e:	21 95       	neg	r18
    1f10:	3f 4f       	sbci	r19, 0xFF	; 255
    1f12:	4f 4f       	sbci	r20, 0xFF	; 255
    1f14:	5f 4f       	sbci	r21, 0xFF	; 255

00001f16 <__divmodsi4_exit>:
    1f16:	08 95       	ret

00001f18 <__negsi2>:
    1f18:	90 95       	com	r25
    1f1a:	80 95       	com	r24
    1f1c:	70 95       	com	r23
    1f1e:	61 95       	neg	r22
    1f20:	7f 4f       	sbci	r23, 0xFF	; 255
    1f22:	8f 4f       	sbci	r24, 0xFF	; 255
    1f24:	9f 4f       	sbci	r25, 0xFF	; 255
    1f26:	08 95       	ret

00001f28 <__tablejump2__>:
    1f28:	ee 0f       	add	r30, r30
    1f2a:	ff 1f       	adc	r31, r31
    1f2c:	05 90       	lpm	r0, Z+
    1f2e:	f4 91       	lpm	r31, Z
    1f30:	e0 2d       	mov	r30, r0
    1f32:	09 94       	ijmp

00001f34 <__udivmodsi4>:
    1f34:	a1 e2       	ldi	r26, 0x21	; 33
    1f36:	1a 2e       	mov	r1, r26
    1f38:	aa 1b       	sub	r26, r26
    1f3a:	bb 1b       	sub	r27, r27
    1f3c:	fd 01       	movw	r30, r26
    1f3e:	0d c0       	rjmp	.+26     	; 0x1f5a <__udivmodsi4_ep>

00001f40 <__udivmodsi4_loop>:
    1f40:	aa 1f       	adc	r26, r26
    1f42:	bb 1f       	adc	r27, r27
    1f44:	ee 1f       	adc	r30, r30
    1f46:	ff 1f       	adc	r31, r31
    1f48:	a2 17       	cp	r26, r18
    1f4a:	b3 07       	cpc	r27, r19
    1f4c:	e4 07       	cpc	r30, r20
    1f4e:	f5 07       	cpc	r31, r21
    1f50:	20 f0       	brcs	.+8      	; 0x1f5a <__udivmodsi4_ep>
    1f52:	a2 1b       	sub	r26, r18
    1f54:	b3 0b       	sbc	r27, r19
    1f56:	e4 0b       	sbc	r30, r20
    1f58:	f5 0b       	sbc	r31, r21

00001f5a <__udivmodsi4_ep>:
    1f5a:	66 1f       	adc	r22, r22
    1f5c:	77 1f       	adc	r23, r23
    1f5e:	88 1f       	adc	r24, r24
    1f60:	99 1f       	adc	r25, r25
    1f62:	1a 94       	dec	r1
    1f64:	69 f7       	brne	.-38     	; 0x1f40 <__udivmodsi4_loop>
    1f66:	60 95       	com	r22
    1f68:	70 95       	com	r23
    1f6a:	80 95       	com	r24
    1f6c:	90 95       	com	r25
    1f6e:	9b 01       	movw	r18, r22
    1f70:	ac 01       	movw	r20, r24
    1f72:	bd 01       	movw	r22, r26
    1f74:	cf 01       	movw	r24, r30
    1f76:	08 95       	ret

00001f78 <setjmp>:
    1f78:	dc 01       	movw	r26, r24
    1f7a:	2d 92       	st	X+, r2
    1f7c:	3d 92       	st	X+, r3
    1f7e:	4d 92       	st	X+, r4
    1f80:	5d 92       	st	X+, r5
    1f82:	6d 92       	st	X+, r6
    1f84:	7d 92       	st	X+, r7
    1f86:	8d 92       	st	X+, r8
    1f88:	9d 92       	st	X+, r9
    1f8a:	ad 92       	st	X+, r10
    1f8c:	bd 92       	st	X+, r11
    1f8e:	cd 92       	st	X+, r12
    1f90:	dd 92       	st	X+, r13
    1f92:	ed 92       	st	X+, r14
    1f94:	fd 92       	st	X+, r15
    1f96:	0d 93       	st	X+, r16
    1f98:	1d 93       	st	X+, r17
    1f9a:	cd 93       	st	X+, r28
    1f9c:	dd 93       	st	X+, r29
    1f9e:	ff 91       	pop	r31
    1fa0:	ef 91       	pop	r30
    1fa2:	8d b7       	in	r24, 0x3d	; 61
    1fa4:	8d 93       	st	X+, r24
    1fa6:	8e b7       	in	r24, 0x3e	; 62
    1fa8:	8d 93       	st	X+, r24
    1faa:	8f b7       	in	r24, 0x3f	; 63
    1fac:	8d 93       	st	X+, r24
    1fae:	ed 93       	st	X+, r30
    1fb0:	fd 93       	st	X+, r31
    1fb2:	88 27       	eor	r24, r24
    1fb4:	99 27       	eor	r25, r25
    1fb6:	09 94       	ijmp

00001fb8 <longjmp>:
    1fb8:	dc 01       	movw	r26, r24
    1fba:	cb 01       	movw	r24, r22
    1fbc:	81 30       	cpi	r24, 0x01	; 1
    1fbe:	91 05       	cpc	r25, r1
    1fc0:	81 1d       	adc	r24, r1
    1fc2:	2d 90       	ld	r2, X+
    1fc4:	3d 90       	ld	r3, X+
    1fc6:	4d 90       	ld	r4, X+
    1fc8:	5d 90       	ld	r5, X+
    1fca:	6d 90       	ld	r6, X+
    1fcc:	7d 90       	ld	r7, X+
    1fce:	8d 90       	ld	r8, X+
    1fd0:	9d 90       	ld	r9, X+
    1fd2:	ad 90       	ld	r10, X+
    1fd4:	bd 90       	ld	r11, X+
    1fd6:	cd 90       	ld	r12, X+
    1fd8:	dd 90       	ld	r13, X+
    1fda:	ed 90       	ld	r14, X+
    1fdc:	fd 90       	ld	r15, X+
    1fde:	0d 91       	ld	r16, X+
    1fe0:	1d 91       	ld	r17, X+
    1fe2:	cd 91       	ld	r28, X+
    1fe4:	dd 91       	ld	r29, X+
    1fe6:	ed 91       	ld	r30, X+
    1fe8:	fd 91       	ld	r31, X+
    1fea:	0d 90       	ld	r0, X+
    1fec:	f8 94       	cli
    1fee:	fe bf       	out	0x3e, r31	; 62
    1ff0:	0f be       	out	0x3f, r0	; 63
    1ff2:	ed bf       	out	0x3d, r30	; 61
    1ff4:	ed 91       	ld	r30, X+
    1ff6:	fd 91       	ld	r31, X+
    1ff8:	09 94       	ijmp

00001ffa <_exit>:
    1ffa:	f8 94       	cli

00001ffc <__stop_program>:
    1ffc:	ff cf       	rjmp	.-2      	; 0x1ffc <__stop_program>
