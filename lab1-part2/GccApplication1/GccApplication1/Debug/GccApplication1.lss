
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000144  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000174  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000909  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000844  00000000  00000000  00000af5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000026a  00000000  00000000  00001339  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000015a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000046d  00000000  00000000  000015f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  00001a65  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
   8:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
   c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  10:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  14:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  18:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  1c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  20:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  24:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  28:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  2c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  30:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  34:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  38:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  3c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  40:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  44:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  48:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  4c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  50:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  54:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  58:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61
  68:	0e 94 72 00 	call	0xe4	; 0xe4 <main>
  6c:	0c 94 76 00 	jmp	0xec	; 0xec <_exit>

00000070 <__bad_interrupt>:
  70:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000074 <init>:
#define F_CPU 8000000UL // 8 MHz CPU clock
#define TIMER_TICKS_PER_SECOND (F_CPU / PRESCALER)

void init() {
	// Configure the LCD
	CLKPR = 0x80; // Enable clock prescaler change
  74:	e1 e6       	ldi	r30, 0x61	; 97
  76:	f0 e0       	ldi	r31, 0x00	; 0
  78:	80 e8       	ldi	r24, 0x80	; 128
  7a:	80 83       	st	Z, r24
	CLKPR = 0x00; // Set clock to maximum speed (no prescaler)
  7c:	10 82       	st	Z, r1
	LCDCRB = (1 << LCDCS) | (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM2) | (1 << LCDPM1) | (1 << LCDPM0); // Enable LCD and configure
  7e:	87 eb       	ldi	r24, 0xB7	; 183
  80:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0); // Set frame rate
  84:	87 e0       	ldi	r24, 0x07	; 7
  86:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__DATA_REGION_ORIGIN__+0x86>
	LCDCCR = (1 << LCDDC1) | (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1); // Set drive time and voltage
  8a:	8e e4       	ldi	r24, 0x4E	; 78
  8c:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__DATA_REGION_ORIGIN__+0x87>
	LCDCRA = (1 << LCDEN) | (1 << LCDAB); // Enable LCD
  90:	80 ec       	ldi	r24, 0xC0	; 192
  92:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>

	// Configure Timer/Counter1
	TCCR1B = (1 << CS12); // Set prescaler to 256
  96:	84 e0       	ldi	r24, 0x04	; 4
  98:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
  9c:	08 95       	ret

0000009e <busyWaitUntil>:
}

void busyWaitUntil(uint16_t target) {
	while (1) {
		uint16_t current = TCNT1;
  9e:	e4 e8       	ldi	r30, 0x84	; 132
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	20 81       	ld	r18, Z
  a4:	31 81       	ldd	r19, Z+1	; 0x01
		if ((current >= target && target >= current) || // Normal case: target is ahead of current
  a6:	28 17       	cp	r18, r24
  a8:	39 07       	cpc	r19, r25
  aa:	31 f0       	breq	.+12     	; 0xb8 <busyWaitUntil+0x1a>
  ac:	82 17       	cp	r24, r18
  ae:	93 07       	cpc	r25, r19
  b0:	c0 f7       	brcc	.-16     	; 0xa2 <busyWaitUntil+0x4>
		(target < current && current < UINT16_MAX)) { // Wraparound case
  b2:	2f 3f       	cpi	r18, 0xFF	; 255
  b4:	3f 4f       	sbci	r19, 0xFF	; 255
  b6:	a9 f3       	breq	.-22     	; 0xa2 <busyWaitUntil+0x4>
  b8:	08 95       	ret

000000ba <blink>:
	}
}

void blink() {
	uint16_t half_period = TIMER_TICKS_PER_SECOND / 2; // Half the period for 1 Hz blinking
	uint16_t next_timer_value = TCNT1 + half_period;   // Set the initial target time
  ba:	c0 91 84 00 	lds	r28, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
  be:	d0 91 85 00 	lds	r29, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
  c2:	c7 5f       	subi	r28, 0xF7	; 247
  c4:	d2 4c       	sbci	r29, 0xC2	; 194

	while (1) {
		// Toggle the segment (replace LCDDR0 and bit as needed for the actual segment)
		LCDDR0 ^= (1 << 1);
  c6:	0c ee       	ldi	r16, 0xEC	; 236
  c8:	10 e0       	ldi	r17, 0x00	; 0
  ca:	68 94       	set
  cc:	ff 24       	eor	r15, r15
  ce:	f1 f8       	bld	r15, 1
  d0:	f8 01       	movw	r30, r16
  d2:	80 81       	ld	r24, Z
  d4:	8f 25       	eor	r24, r15
  d6:	80 83       	st	Z, r24

		// Wait for the next half period
		busyWaitUntil(next_timer_value);
  d8:	ce 01       	movw	r24, r28
  da:	0e 94 4f 00 	call	0x9e	; 0x9e <busyWaitUntil>

		// Update the next target time, accounting for wraparound
		next_timer_value += half_period;
  de:	c7 5f       	subi	r28, 0xF7	; 247
  e0:	d2 4c       	sbci	r29, 0xC2	; 194
  e2:	f6 cf       	rjmp	.-20     	; 0xd0 <blink+0x16>

000000e4 <main>:
	}
}

int main(void) {
	init(); // Initialize the device
  e4:	0e 94 3a 00 	call	0x74	; 0x74 <init>
	blink(); // Start blinking the segment
  e8:	0e 94 5d 00 	call	0xba	; 0xba <blink>

000000ec <_exit>:
  ec:	f8 94       	cli

000000ee <__stop_program>:
  ee:	ff cf       	rjmp	.-2      	; 0xee <__stop_program>
