
Part3.2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800100  0000080e  000008a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000080e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000023b  00800154  00800154  000008f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000928  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000968  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000147f  00000000  00000000  00000a38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b56  00000000  00000000  00001eb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000853  00000000  00000000  00002a0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000284  00000000  00000000  00003260  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000657  00000000  00000000  000034e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c0e  00000000  00000000  00003b3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00004749  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__vector_3>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__vector_7>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	9d 00       	.word	0x009d	; ????
  5e:	7f 00       	.word	0x007f	; ????
  60:	82 00       	.word	0x0082	; ????
  62:	85 00       	.word	0x0085	; ????
  64:	88 00       	.word	0x0088	; ????
  66:	8b 00       	.word	0x008b	; ????
  68:	8e 00       	.word	0x008e	; ????
  6a:	91 00       	.word	0x0091	; ????
  6c:	94 00       	.word	0x0094	; ????
  6e:	97 00       	.word	0x0097	; ????

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ee e0       	ldi	r30, 0x0E	; 14
  84:	f8 e0       	ldi	r31, 0x08	; 8
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a4 35       	cpi	r26, 0x54	; 84
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	23 e0       	ldi	r18, 0x03	; 3
  94:	a4 e5       	ldi	r26, 0x54	; 84
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	af 38       	cpi	r26, 0x8F	; 143
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 2e 02 	call	0x45c	; 0x45c <main>
  a6:	0c 94 05 04 	jmp	0x80a	; 0x80a <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <blink>:
void button() {
	static uint8_t current_segment = LCD_SEGMENT1;

	while (true) {
		lock(&button_mutex);
		toggle_lcd(&current_segment);
  ae:	cc ef       	ldi	r28, 0xFC	; 252
  b0:	d0 e0       	ldi	r29, 0x00	; 0
  b2:	12 e0       	ldi	r17, 0x02	; 2
  b4:	8a e6       	ldi	r24, 0x6A	; 106
  b6:	91 e0       	ldi	r25, 0x01	; 1
  b8:	0e 94 2a 03 	call	0x654	; 0x654 <lock>
  bc:	88 81       	ld	r24, Y
  be:	81 27       	eor	r24, r17
  c0:	88 83       	st	Y, r24
  c2:	f8 cf       	rjmp	.-16     	; 0xb4 <blink+0x6>

000000c4 <init>:
  c4:	e1 e6       	ldi	r30, 0x61	; 97
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 e8       	ldi	r24, 0x80	; 128
  ca:	80 83       	st	Z, r24
  cc:	10 82       	st	Z, r1
  ce:	08 95       	ret

000000d0 <LCD_init>:
  d0:	8f e0       	ldi	r24, 0x0F	; 15
  d2:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__DATA_REGION_ORIGIN__+0x87>
  d6:	87 eb       	ldi	r24, 0xB7	; 183
  d8:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
  dc:	87 e0       	ldi	r24, 0x07	; 7
  de:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__DATA_REGION_ORIGIN__+0x86>
  e2:	80 ec       	ldi	r24, 0xC0	; 192
  e4:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
  e8:	08 95       	ret

000000ea <getSegmentForChar>:
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	fc 01       	movw	r30, r24
  ee:	f0 97       	sbiw	r30, 0x30	; 48
  f0:	ea 30       	cpi	r30, 0x0A	; 10
  f2:	f1 05       	cpc	r31, r1
  f4:	f8 f4       	brcc	.+62     	; 0x134 <getSegmentForChar+0x4a>
  f6:	e2 5d       	subi	r30, 0xD2	; 210
  f8:	ff 4f       	sbci	r31, 0xFF	; 255
  fa:	0c 94 9c 03 	jmp	0x738	; 0x738 <__tablejump2__>
  fe:	80 e4       	ldi	r24, 0x40	; 64
 100:	91 e0       	ldi	r25, 0x01	; 1
 102:	08 95       	ret
 104:	88 e3       	ldi	r24, 0x38	; 56
 106:	91 e0       	ldi	r25, 0x01	; 1
 108:	08 95       	ret
 10a:	80 e3       	ldi	r24, 0x30	; 48
 10c:	91 e0       	ldi	r25, 0x01	; 1
 10e:	08 95       	ret
 110:	88 e2       	ldi	r24, 0x28	; 40
 112:	91 e0       	ldi	r25, 0x01	; 1
 114:	08 95       	ret
 116:	80 e2       	ldi	r24, 0x20	; 32
 118:	91 e0       	ldi	r25, 0x01	; 1
 11a:	08 95       	ret
 11c:	88 e1       	ldi	r24, 0x18	; 24
 11e:	91 e0       	ldi	r25, 0x01	; 1
 120:	08 95       	ret
 122:	80 e1       	ldi	r24, 0x10	; 16
 124:	91 e0       	ldi	r25, 0x01	; 1
 126:	08 95       	ret
 128:	88 e0       	ldi	r24, 0x08	; 8
 12a:	91 e0       	ldi	r25, 0x01	; 1
 12c:	08 95       	ret
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	91 e0       	ldi	r25, 0x01	; 1
 132:	08 95       	ret
 134:	84 e5       	ldi	r24, 0x54	; 84
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	08 95       	ret
 13a:	88 e4       	ldi	r24, 0x48	; 72
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	08 95       	ret

00000140 <writeChar>:
 140:	cf 93       	push	r28
 142:	65 30       	cpi	r22, 0x05	; 5
 144:	08 f0       	brcs	.+2      	; 0x148 <writeChar+0x8>
 146:	e4 c0       	rjmp	.+456    	; 0x310 <writeChar+0x1d0>
 148:	c6 2f       	mov	r28, r22
 14a:	0e 94 75 00 	call	0xea	; 0xea <getSegmentForChar>
 14e:	fc 01       	movw	r30, r24
 150:	c2 30       	cpi	r28, 0x02	; 2
 152:	09 f4       	brne	.+2      	; 0x156 <writeChar+0x16>
 154:	67 c0       	rjmp	.+206    	; 0x224 <writeChar+0xe4>
 156:	28 f4       	brcc	.+10     	; 0x162 <writeChar+0x22>
 158:	cc 23       	and	r28, r28
 15a:	51 f0       	breq	.+20     	; 0x170 <writeChar+0x30>
 15c:	c1 30       	cpi	r28, 0x01	; 1
 15e:	29 f1       	breq	.+74     	; 0x1aa <writeChar+0x6a>
 160:	d7 c0       	rjmp	.+430    	; 0x310 <writeChar+0x1d0>
 162:	c3 30       	cpi	r28, 0x03	; 3
 164:	09 f4       	brne	.+2      	; 0x168 <writeChar+0x28>
 166:	7b c0       	rjmp	.+246    	; 0x25e <writeChar+0x11e>
 168:	c4 30       	cpi	r28, 0x04	; 4
 16a:	09 f4       	brne	.+2      	; 0x16e <writeChar+0x2e>
 16c:	b5 c0       	rjmp	.+362    	; 0x2d8 <writeChar+0x198>
 16e:	d0 c0       	rjmp	.+416    	; 0x310 <writeChar+0x1d0>
 170:	ac ee       	ldi	r26, 0xEC	; 236
 172:	b0 e0       	ldi	r27, 0x00	; 0
 174:	8c 91       	ld	r24, X
 176:	80 7f       	andi	r24, 0xF0	; 240
 178:	90 81       	ld	r25, Z
 17a:	89 2b       	or	r24, r25
 17c:	8c 93       	st	X, r24
 17e:	a1 ef       	ldi	r26, 0xF1	; 241
 180:	b0 e0       	ldi	r27, 0x00	; 0
 182:	8c 91       	ld	r24, X
 184:	80 7f       	andi	r24, 0xF0	; 240
 186:	92 81       	ldd	r25, Z+2	; 0x02
 188:	89 2b       	or	r24, r25
 18a:	8c 93       	st	X, r24
 18c:	a6 ef       	ldi	r26, 0xF6	; 246
 18e:	b0 e0       	ldi	r27, 0x00	; 0
 190:	8c 91       	ld	r24, X
 192:	80 7f       	andi	r24, 0xF0	; 240
 194:	94 81       	ldd	r25, Z+4	; 0x04
 196:	89 2b       	or	r24, r25
 198:	8c 93       	st	X, r24
 19a:	ab ef       	ldi	r26, 0xFB	; 251
 19c:	b0 e0       	ldi	r27, 0x00	; 0
 19e:	8c 91       	ld	r24, X
 1a0:	80 7f       	andi	r24, 0xF0	; 240
 1a2:	96 81       	ldd	r25, Z+6	; 0x06
 1a4:	89 2b       	or	r24, r25
 1a6:	8c 93       	st	X, r24
 1a8:	b3 c0       	rjmp	.+358    	; 0x310 <writeChar+0x1d0>
 1aa:	ac ee       	ldi	r26, 0xEC	; 236
 1ac:	b0 e0       	ldi	r27, 0x00	; 0
 1ae:	2c 91       	ld	r18, X
 1b0:	80 81       	ld	r24, Z
 1b2:	91 81       	ldd	r25, Z+1	; 0x01
 1b4:	82 95       	swap	r24
 1b6:	92 95       	swap	r25
 1b8:	90 7f       	andi	r25, 0xF0	; 240
 1ba:	98 27       	eor	r25, r24
 1bc:	80 7f       	andi	r24, 0xF0	; 240
 1be:	98 27       	eor	r25, r24
 1c0:	92 2f       	mov	r25, r18
 1c2:	9f 70       	andi	r25, 0x0F	; 15
 1c4:	89 2b       	or	r24, r25
 1c6:	8c 93       	st	X, r24
 1c8:	a1 ef       	ldi	r26, 0xF1	; 241
 1ca:	b0 e0       	ldi	r27, 0x00	; 0
 1cc:	2c 91       	ld	r18, X
 1ce:	82 81       	ldd	r24, Z+2	; 0x02
 1d0:	93 81       	ldd	r25, Z+3	; 0x03
 1d2:	82 95       	swap	r24
 1d4:	92 95       	swap	r25
 1d6:	90 7f       	andi	r25, 0xF0	; 240
 1d8:	98 27       	eor	r25, r24
 1da:	80 7f       	andi	r24, 0xF0	; 240
 1dc:	98 27       	eor	r25, r24
 1de:	92 2f       	mov	r25, r18
 1e0:	9f 70       	andi	r25, 0x0F	; 15
 1e2:	89 2b       	or	r24, r25
 1e4:	8c 93       	st	X, r24
 1e6:	a6 ef       	ldi	r26, 0xF6	; 246
 1e8:	b0 e0       	ldi	r27, 0x00	; 0
 1ea:	2c 91       	ld	r18, X
 1ec:	84 81       	ldd	r24, Z+4	; 0x04
 1ee:	95 81       	ldd	r25, Z+5	; 0x05
 1f0:	82 95       	swap	r24
 1f2:	92 95       	swap	r25
 1f4:	90 7f       	andi	r25, 0xF0	; 240
 1f6:	98 27       	eor	r25, r24
 1f8:	80 7f       	andi	r24, 0xF0	; 240
 1fa:	98 27       	eor	r25, r24
 1fc:	92 2f       	mov	r25, r18
 1fe:	9f 70       	andi	r25, 0x0F	; 15
 200:	89 2b       	or	r24, r25
 202:	8c 93       	st	X, r24
 204:	ab ef       	ldi	r26, 0xFB	; 251
 206:	b0 e0       	ldi	r27, 0x00	; 0
 208:	2c 91       	ld	r18, X
 20a:	86 81       	ldd	r24, Z+6	; 0x06
 20c:	97 81       	ldd	r25, Z+7	; 0x07
 20e:	82 95       	swap	r24
 210:	92 95       	swap	r25
 212:	90 7f       	andi	r25, 0xF0	; 240
 214:	98 27       	eor	r25, r24
 216:	80 7f       	andi	r24, 0xF0	; 240
 218:	98 27       	eor	r25, r24
 21a:	92 2f       	mov	r25, r18
 21c:	9f 70       	andi	r25, 0x0F	; 15
 21e:	89 2b       	or	r24, r25
 220:	8c 93       	st	X, r24
 222:	76 c0       	rjmp	.+236    	; 0x310 <writeChar+0x1d0>
 224:	ad ee       	ldi	r26, 0xED	; 237
 226:	b0 e0       	ldi	r27, 0x00	; 0
 228:	8c 91       	ld	r24, X
 22a:	80 7f       	andi	r24, 0xF0	; 240
 22c:	90 81       	ld	r25, Z
 22e:	89 2b       	or	r24, r25
 230:	8c 93       	st	X, r24
 232:	a2 ef       	ldi	r26, 0xF2	; 242
 234:	b0 e0       	ldi	r27, 0x00	; 0
 236:	8c 91       	ld	r24, X
 238:	80 7f       	andi	r24, 0xF0	; 240
 23a:	92 81       	ldd	r25, Z+2	; 0x02
 23c:	89 2b       	or	r24, r25
 23e:	8c 93       	st	X, r24
 240:	a7 ef       	ldi	r26, 0xF7	; 247
 242:	b0 e0       	ldi	r27, 0x00	; 0
 244:	8c 91       	ld	r24, X
 246:	80 7f       	andi	r24, 0xF0	; 240
 248:	94 81       	ldd	r25, Z+4	; 0x04
 24a:	89 2b       	or	r24, r25
 24c:	8c 93       	st	X, r24
 24e:	ac ef       	ldi	r26, 0xFC	; 252
 250:	b0 e0       	ldi	r27, 0x00	; 0
 252:	8c 91       	ld	r24, X
 254:	80 7f       	andi	r24, 0xF0	; 240
 256:	96 81       	ldd	r25, Z+6	; 0x06
 258:	89 2b       	or	r24, r25
 25a:	8c 93       	st	X, r24
 25c:	59 c0       	rjmp	.+178    	; 0x310 <writeChar+0x1d0>
 25e:	ad ee       	ldi	r26, 0xED	; 237
 260:	b0 e0       	ldi	r27, 0x00	; 0
 262:	2c 91       	ld	r18, X
 264:	80 81       	ld	r24, Z
 266:	91 81       	ldd	r25, Z+1	; 0x01
 268:	82 95       	swap	r24
 26a:	92 95       	swap	r25
 26c:	90 7f       	andi	r25, 0xF0	; 240
 26e:	98 27       	eor	r25, r24
 270:	80 7f       	andi	r24, 0xF0	; 240
 272:	98 27       	eor	r25, r24
 274:	92 2f       	mov	r25, r18
 276:	9f 70       	andi	r25, 0x0F	; 15
 278:	89 2b       	or	r24, r25
 27a:	8c 93       	st	X, r24
 27c:	a2 ef       	ldi	r26, 0xF2	; 242
 27e:	b0 e0       	ldi	r27, 0x00	; 0
 280:	2c 91       	ld	r18, X
 282:	82 81       	ldd	r24, Z+2	; 0x02
 284:	93 81       	ldd	r25, Z+3	; 0x03
 286:	82 95       	swap	r24
 288:	92 95       	swap	r25
 28a:	90 7f       	andi	r25, 0xF0	; 240
 28c:	98 27       	eor	r25, r24
 28e:	80 7f       	andi	r24, 0xF0	; 240
 290:	98 27       	eor	r25, r24
 292:	92 2f       	mov	r25, r18
 294:	9f 70       	andi	r25, 0x0F	; 15
 296:	89 2b       	or	r24, r25
 298:	8c 93       	st	X, r24
 29a:	a7 ef       	ldi	r26, 0xF7	; 247
 29c:	b0 e0       	ldi	r27, 0x00	; 0
 29e:	2c 91       	ld	r18, X
 2a0:	84 81       	ldd	r24, Z+4	; 0x04
 2a2:	95 81       	ldd	r25, Z+5	; 0x05
 2a4:	82 95       	swap	r24
 2a6:	92 95       	swap	r25
 2a8:	90 7f       	andi	r25, 0xF0	; 240
 2aa:	98 27       	eor	r25, r24
 2ac:	80 7f       	andi	r24, 0xF0	; 240
 2ae:	98 27       	eor	r25, r24
 2b0:	92 2f       	mov	r25, r18
 2b2:	9f 70       	andi	r25, 0x0F	; 15
 2b4:	89 2b       	or	r24, r25
 2b6:	8c 93       	st	X, r24
 2b8:	ac ef       	ldi	r26, 0xFC	; 252
 2ba:	b0 e0       	ldi	r27, 0x00	; 0
 2bc:	2c 91       	ld	r18, X
 2be:	86 81       	ldd	r24, Z+6	; 0x06
 2c0:	97 81       	ldd	r25, Z+7	; 0x07
 2c2:	82 95       	swap	r24
 2c4:	92 95       	swap	r25
 2c6:	90 7f       	andi	r25, 0xF0	; 240
 2c8:	98 27       	eor	r25, r24
 2ca:	80 7f       	andi	r24, 0xF0	; 240
 2cc:	98 27       	eor	r25, r24
 2ce:	92 2f       	mov	r25, r18
 2d0:	9f 70       	andi	r25, 0x0F	; 15
 2d2:	89 2b       	or	r24, r25
 2d4:	8c 93       	st	X, r24
 2d6:	1c c0       	rjmp	.+56     	; 0x310 <writeChar+0x1d0>
 2d8:	ae ee       	ldi	r26, 0xEE	; 238
 2da:	b0 e0       	ldi	r27, 0x00	; 0
 2dc:	8c 91       	ld	r24, X
 2de:	80 7f       	andi	r24, 0xF0	; 240
 2e0:	90 81       	ld	r25, Z
 2e2:	89 2b       	or	r24, r25
 2e4:	8c 93       	st	X, r24
 2e6:	a3 ef       	ldi	r26, 0xF3	; 243
 2e8:	b0 e0       	ldi	r27, 0x00	; 0
 2ea:	8c 91       	ld	r24, X
 2ec:	80 7f       	andi	r24, 0xF0	; 240
 2ee:	92 81       	ldd	r25, Z+2	; 0x02
 2f0:	89 2b       	or	r24, r25
 2f2:	8c 93       	st	X, r24
 2f4:	a8 ef       	ldi	r26, 0xF8	; 248
 2f6:	b0 e0       	ldi	r27, 0x00	; 0
 2f8:	8c 91       	ld	r24, X
 2fa:	80 7f       	andi	r24, 0xF0	; 240
 2fc:	94 81       	ldd	r25, Z+4	; 0x04
 2fe:	89 2b       	or	r24, r25
 300:	8c 93       	st	X, r24
 302:	ad ef       	ldi	r26, 0xFD	; 253
 304:	b0 e0       	ldi	r27, 0x00	; 0
 306:	8c 91       	ld	r24, X
 308:	80 7f       	andi	r24, 0xF0	; 240
 30a:	96 81       	ldd	r25, Z+6	; 0x06
 30c:	89 2b       	or	r24, r25
 30e:	8c 93       	st	X, r24
 310:	cf 91       	pop	r28
 312:	08 95       	ret

00000314 <printAt>:
 314:	8f 92       	push	r8
 316:	9f 92       	push	r9
 318:	af 92       	push	r10
 31a:	bf 92       	push	r11
 31c:	cf 92       	push	r12
 31e:	df 92       	push	r13
 320:	ef 92       	push	r14
 322:	ff 92       	push	r15
 324:	cf 93       	push	r28
 326:	df 93       	push	r29
 328:	4b 01       	movw	r8, r22
 32a:	5c 01       	movw	r10, r24
 32c:	ea 01       	movw	r28, r20
 32e:	24 e6       	ldi	r18, 0x64	; 100
 330:	30 e0       	ldi	r19, 0x00	; 0
 332:	40 e0       	ldi	r20, 0x00	; 0
 334:	50 e0       	ldi	r21, 0x00	; 0
 336:	0e 94 7d 03 	call	0x6fa	; 0x6fa <__divmodsi4>
 33a:	0f 2e       	mov	r0, r31
 33c:	fa e0       	ldi	r31, 0x0A	; 10
 33e:	cf 2e       	mov	r12, r31
 340:	d1 2c       	mov	r13, r1
 342:	e1 2c       	mov	r14, r1
 344:	f1 2c       	mov	r15, r1
 346:	f0 2d       	mov	r31, r0
 348:	a7 01       	movw	r20, r14
 34a:	96 01       	movw	r18, r12
 34c:	0e 94 7d 03 	call	0x6fa	; 0x6fa <__divmodsi4>
 350:	6c 2f       	mov	r22, r28
 352:	80 e3       	ldi	r24, 0x30	; 48
 354:	82 0f       	add	r24, r18
 356:	0e 94 a0 00 	call	0x140	; 0x140 <writeChar>
 35a:	21 96       	adiw	r28, 0x01	; 1
 35c:	c5 01       	movw	r24, r10
 35e:	b4 01       	movw	r22, r8
 360:	a7 01       	movw	r20, r14
 362:	96 01       	movw	r18, r12
 364:	0e 94 7d 03 	call	0x6fa	; 0x6fa <__divmodsi4>
 368:	86 2f       	mov	r24, r22
 36a:	6c 2f       	mov	r22, r28
 36c:	80 5d       	subi	r24, 0xD0	; 208
 36e:	0e 94 a0 00 	call	0x140	; 0x140 <writeChar>
 372:	df 91       	pop	r29
 374:	cf 91       	pop	r28
 376:	ff 90       	pop	r15
 378:	ef 90       	pop	r14
 37a:	df 90       	pop	r13
 37c:	cf 90       	pop	r12
 37e:	bf 90       	pop	r11
 380:	af 90       	pop	r10
 382:	9f 90       	pop	r9
 384:	8f 90       	pop	r8
 386:	08 95       	ret

00000388 <keyCounter>:
	}
}

void keyCounter() {
	printAt(keyPresses, 3);
 388:	60 91 5c 01 	lds	r22, 0x015C	; 0x80015c <keyPresses>
 38c:	70 91 5d 01 	lds	r23, 0x015D	; 0x80015d <keyPresses+0x1>
 390:	07 2e       	mov	r0, r23
 392:	00 0c       	add	r0, r0
 394:	88 0b       	sbc	r24, r24
 396:	99 0b       	sbc	r25, r25
 398:	43 e0       	ldi	r20, 0x03	; 3
 39a:	50 e0       	ldi	r21, 0x00	; 0
 39c:	0e 94 8a 01 	call	0x314	; 0x314 <printAt>
 3a0:	08 95       	ret

000003a2 <__vector_7>:
}

// Timer interupt
ISR(TIMER1_COMPA_vect) {
 3a2:	1f 92       	push	r1
 3a4:	0f 92       	push	r0
 3a6:	0f b6       	in	r0, 0x3f	; 63
 3a8:	0f 92       	push	r0
 3aa:	11 24       	eor	r1, r1
 3ac:	2f 93       	push	r18
 3ae:	3f 93       	push	r19
 3b0:	4f 93       	push	r20
 3b2:	5f 93       	push	r21
 3b4:	6f 93       	push	r22
 3b6:	7f 93       	push	r23
 3b8:	8f 93       	push	r24
 3ba:	9f 93       	push	r25
 3bc:	af 93       	push	r26
 3be:	bf 93       	push	r27
 3c0:	ef 93       	push	r30
 3c2:	ff 93       	push	r31
	unlock(&blink_mutex);
 3c4:	8a e6       	ldi	r24, 0x6A	; 106
 3c6:	91 e0       	ldi	r25, 0x01	; 1
 3c8:	0e 94 53 03 	call	0x6a6	; 0x6a6 <unlock>
	TCNT1 = 0;
 3cc:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 3d0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
}
 3d4:	ff 91       	pop	r31
 3d6:	ef 91       	pop	r30
 3d8:	bf 91       	pop	r27
 3da:	af 91       	pop	r26
 3dc:	9f 91       	pop	r25
 3de:	8f 91       	pop	r24
 3e0:	7f 91       	pop	r23
 3e2:	6f 91       	pop	r22
 3e4:	5f 91       	pop	r21
 3e6:	4f 91       	pop	r20
 3e8:	3f 91       	pop	r19
 3ea:	2f 91       	pop	r18
 3ec:	0f 90       	pop	r0
 3ee:	0f be       	out	0x3f, r0	; 63
 3f0:	0f 90       	pop	r0
 3f2:	1f 90       	pop	r1
 3f4:	18 95       	reti

000003f6 <__vector_3>:

// Joystick interupt
ISR(PCINT1_vect) {
 3f6:	1f 92       	push	r1
 3f8:	0f 92       	push	r0
 3fa:	0f b6       	in	r0, 0x3f	; 63
 3fc:	0f 92       	push	r0
 3fe:	11 24       	eor	r1, r1
 400:	2f 93       	push	r18
 402:	3f 93       	push	r19
 404:	4f 93       	push	r20
 406:	5f 93       	push	r21
 408:	6f 93       	push	r22
 40a:	7f 93       	push	r23
 40c:	8f 93       	push	r24
 40e:	9f 93       	push	r25
 410:	af 93       	push	r26
 412:	bf 93       	push	r27
 414:	ef 93       	push	r30
 416:	ff 93       	push	r31
	// Check if joystick is pressed (active low, bit 7 of PINB == 0)
	if (!(PINB & (1 << PB7))) {
 418:	1f 99       	sbic	0x03, 7	; 3
 41a:	0f c0       	rjmp	.+30     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
		keyPresses++;
 41c:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <keyPresses>
 420:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <keyPresses+0x1>
 424:	01 96       	adiw	r24, 0x01	; 1
 426:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <keyPresses+0x1>
 42a:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <keyPresses>
		keyCounter();
 42e:	0e 94 c4 01 	call	0x388	; 0x388 <keyCounter>
		unlock(&button_mutex);			
 432:	86 e6       	ldi	r24, 0x66	; 102
 434:	91 e0       	ldi	r25, 0x01	; 1
 436:	0e 94 53 03 	call	0x6a6	; 0x6a6 <unlock>
	}
}
 43a:	ff 91       	pop	r31
 43c:	ef 91       	pop	r30
 43e:	bf 91       	pop	r27
 440:	af 91       	pop	r26
 442:	9f 91       	pop	r25
 444:	8f 91       	pop	r24
 446:	7f 91       	pop	r23
 448:	6f 91       	pop	r22
 44a:	5f 91       	pop	r21
 44c:	4f 91       	pop	r20
 44e:	3f 91       	pop	r19
 450:	2f 91       	pop	r18
 452:	0f 90       	pop	r0
 454:	0f be       	out	0x3f, r0	; 63
 456:	0f 90       	pop	r0
 458:	1f 90       	pop	r1
 45a:	18 95       	reti

0000045c <main>:


int main(void) {
	cli();
 45c:	f8 94       	cli
	init();
 45e:	0e 94 62 00 	call	0xc4	; 0xc4 <init>
	LCD_init();
 462:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_init>
	sei();
 466:	78 94       	sei
	
	lock(&blink_mutex);
 468:	8a e6       	ldi	r24, 0x6A	; 106
 46a:	91 e0       	ldi	r25, 0x01	; 1
 46c:	0e 94 2a 03 	call	0x654	; 0x654 <lock>
	lock(&button_mutex);
 470:	86 e6       	ldi	r24, 0x66	; 102
 472:	91 e0       	ldi	r25, 0x01	; 1
 474:	0e 94 2a 03 	call	0x654	; 0x654 <lock>

	//spawn(button, 0);
	spawn(blink, 0);
 478:	60 e0       	ldi	r22, 0x00	; 0
 47a:	70 e0       	ldi	r23, 0x00	; 0
 47c:	87 e5       	ldi	r24, 0x57	; 87
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	0e 94 65 02 	call	0x4ca	; 0x4ca <spawn>
	//primes();
 484:	80 e0       	ldi	r24, 0x00	; 0
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	08 95       	ret

0000048a <dispatch>:
void yield(void) {
    DISABLE();
    enqueue(current, &readyQ);
    dispatch(dequeue(&readyQ));
    ENABLE();
}
 48a:	cf 93       	push	r28
 48c:	df 93       	push	r29
 48e:	00 d0       	rcall	.+0      	; 0x490 <dispatch+0x6>
 490:	cd b7       	in	r28, 0x3d	; 61
 492:	de b7       	in	r29, 0x3e	; 62
 494:	9a 83       	std	Y+2, r25	; 0x02
 496:	89 83       	std	Y+1, r24	; 0x01
 498:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <current>
 49c:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <current+0x1>
 4a0:	06 96       	adiw	r24, 0x06	; 6
 4a2:	0e 94 c4 03 	call	0x788	; 0x788 <setjmp>
 4a6:	89 2b       	or	r24, r25
 4a8:	59 f4       	brne	.+22     	; 0x4c0 <dispatch+0x36>
 4aa:	89 81       	ldd	r24, Y+1	; 0x01
 4ac:	9a 81       	ldd	r25, Y+2	; 0x02
 4ae:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <current+0x1>
 4b2:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <current>
 4b6:	61 e0       	ldi	r22, 0x01	; 1
 4b8:	70 e0       	ldi	r23, 0x00	; 0
 4ba:	06 96       	adiw	r24, 0x06	; 6
 4bc:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <longjmp>
 4c0:	0f 90       	pop	r0
 4c2:	0f 90       	pop	r0
 4c4:	df 91       	pop	r29
 4c6:	cf 91       	pop	r28
 4c8:	08 95       	ret

000004ca <spawn>:
 4ca:	cf 93       	push	r28
 4cc:	df 93       	push	r29
 4ce:	00 d0       	rcall	.+0      	; 0x4d0 <spawn+0x6>
 4d0:	cd b7       	in	r28, 0x3d	; 61
 4d2:	de b7       	in	r29, 0x3e	; 62
 4d4:	f8 94       	cli
 4d6:	20 91 5e 01 	lds	r18, 0x015E	; 0x80015e <initialized>
 4da:	30 91 5f 01 	lds	r19, 0x015F	; 0x80015f <initialized+0x1>
 4de:	23 2b       	or	r18, r19
 4e0:	99 f5       	brne	.+102    	; 0x548 <__stack+0x49>
 4e2:	28 e4       	ldi	r18, 0x48	; 72
 4e4:	32 e0       	ldi	r19, 0x02	; 2
 4e6:	30 93 e0 01 	sts	0x01E0, r19	; 0x8001e0 <threads+0x5>
 4ea:	20 93 df 01 	sts	0x01DF, r18	; 0x8001df <threads+0x4>
 4ee:	25 eb       	ldi	r18, 0xB5	; 181
 4f0:	32 e0       	ldi	r19, 0x02	; 2
 4f2:	30 93 4d 02 	sts	0x024D, r19	; 0x80024d <threads+0x72>
 4f6:	20 93 4c 02 	sts	0x024C, r18	; 0x80024c <threads+0x71>
 4fa:	22 e2       	ldi	r18, 0x22	; 34
 4fc:	33 e0       	ldi	r19, 0x03	; 3
 4fe:	30 93 ba 02 	sts	0x02BA, r19	; 0x8002ba <threads+0xdf>
 502:	20 93 b9 02 	sts	0x02B9, r18	; 0x8002b9 <threads+0xde>
 506:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <threads+0x14c>
 50a:	10 92 26 03 	sts	0x0326, r1	; 0x800326 <threads+0x14b>
 50e:	25 e0       	ldi	r18, 0x05	; 5
 510:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
 514:	2f 9a       	sbi	0x05, 7	; 5
 516:	ef 9a       	sbi	0x1d, 7	; 29
 518:	ec e6       	ldi	r30, 0x6C	; 108
 51a:	f0 e0       	ldi	r31, 0x00	; 0
 51c:	20 81       	ld	r18, Z
 51e:	20 68       	ori	r18, 0x80	; 128
 520:	20 83       	st	Z, r18
 522:	22 e0       	ldi	r18, 0x02	; 2
 524:	20 93 6f 00 	sts	0x006F, r18	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
 528:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 52c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
 530:	22 e4       	ldi	r18, 0x42	; 66
 532:	3f e0       	ldi	r19, 0x0F	; 15
 534:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 538:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
 53c:	21 e0       	ldi	r18, 0x01	; 1
 53e:	30 e0       	ldi	r19, 0x00	; 0
 540:	30 93 5f 01 	sts	0x015F, r19	; 0x80015f <initialized+0x1>
 544:	20 93 5e 01 	sts	0x015E, r18	; 0x80015e <initialized>
 548:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <freeQ>
 54c:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <freeQ+0x1>
 550:	3a 83       	std	Y+2, r19	; 0x02
 552:	29 83       	std	Y+1, r18	; 0x01
 554:	23 2b       	or	r18, r19
 556:	e1 f0       	breq	.+56     	; 0x590 <__stack+0x91>
 558:	a9 81       	ldd	r26, Y+1	; 0x01
 55a:	ba 81       	ldd	r27, Y+2	; 0x02
 55c:	14 96       	adiw	r26, 0x04	; 4
 55e:	4d 91       	ld	r20, X+
 560:	5c 91       	ld	r21, X
 562:	15 97       	sbiw	r26, 0x05	; 5
 564:	50 93 53 01 	sts	0x0153, r21	; 0x800153 <freeQ+0x1>
 568:	40 93 52 01 	sts	0x0152, r20	; 0x800152 <freeQ>
 56c:	11 96       	adiw	r26, 0x01	; 1
 56e:	9c 93       	st	X, r25
 570:	8e 93       	st	-X, r24
 572:	13 96       	adiw	r26, 0x03	; 3
 574:	7c 93       	st	X, r23
 576:	6e 93       	st	-X, r22
 578:	12 97       	sbiw	r26, 0x02	; 2
 57a:	15 96       	adiw	r26, 0x05	; 5
 57c:	1c 92       	st	X, r1
 57e:	1e 92       	st	-X, r1
 580:	14 97       	sbiw	r26, 0x04	; 4
 582:	cd 01       	movw	r24, r26
 584:	06 96       	adiw	r24, 0x06	; 6
 586:	0e 94 c4 03 	call	0x788	; 0x788 <setjmp>
 58a:	01 97       	sbiw	r24, 0x01	; 1
 58c:	79 f5       	brne	.+94     	; 0x5ec <__stack+0xed>
 58e:	01 c0       	rjmp	.+2      	; 0x592 <__stack+0x93>
 590:	ff cf       	rjmp	.-2      	; 0x590 <__stack+0x91>
 592:	78 94       	sei
 594:	a0 91 50 01 	lds	r26, 0x0150	; 0x800150 <current>
 598:	b0 91 51 01 	lds	r27, 0x0151	; 0x800151 <current+0x1>
 59c:	ed 91       	ld	r30, X+
 59e:	fc 91       	ld	r31, X
 5a0:	11 97       	sbiw	r26, 0x01	; 1
 5a2:	12 96       	adiw	r26, 0x02	; 2
 5a4:	8d 91       	ld	r24, X+
 5a6:	9c 91       	ld	r25, X
 5a8:	13 97       	sbiw	r26, 0x03	; 3
 5aa:	09 95       	icall
 5ac:	f8 94       	cli
 5ae:	e0 91 50 01 	lds	r30, 0x0150	; 0x800150 <current>
 5b2:	f0 91 51 01 	lds	r31, 0x0151	; 0x800151 <current+0x1>
 5b6:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <freeQ>
 5ba:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <freeQ+0x1>
 5be:	95 83       	std	Z+5, r25	; 0x05
 5c0:	84 83       	std	Z+4, r24	; 0x04
 5c2:	f0 93 53 01 	sts	0x0153, r31	; 0x800153 <freeQ+0x1>
 5c6:	e0 93 52 01 	sts	0x0152, r30	; 0x800152 <freeQ>
 5ca:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <readyQ>
 5ce:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <readyQ+0x1>
 5d2:	00 97       	sbiw	r24, 0x00	; 0
 5d4:	51 f0       	breq	.+20     	; 0x5ea <__stack+0xeb>
 5d6:	fc 01       	movw	r30, r24
 5d8:	24 81       	ldd	r18, Z+4	; 0x04
 5da:	35 81       	ldd	r19, Z+5	; 0x05
 5dc:	30 93 61 01 	sts	0x0161, r19	; 0x800161 <readyQ+0x1>
 5e0:	20 93 60 01 	sts	0x0160, r18	; 0x800160 <readyQ>
 5e4:	0e 94 45 02 	call	0x48a	; 0x48a <dispatch>
 5e8:	01 c0       	rjmp	.+2      	; 0x5ec <__stack+0xed>
 5ea:	ff cf       	rjmp	.-2      	; 0x5ea <__stack+0xeb>
 5ec:	e9 81       	ldd	r30, Y+1	; 0x01
 5ee:	fa 81       	ldd	r31, Y+2	; 0x02
 5f0:	36 96       	adiw	r30, 0x06	; 6
 5f2:	89 81       	ldd	r24, Y+1	; 0x01
 5f4:	9a 81       	ldd	r25, Y+2	; 0x02
 5f6:	87 59       	subi	r24, 0x97	; 151
 5f8:	9f 4f       	sbci	r25, 0xFF	; 255
 5fa:	91 8b       	std	Z+17, r25	; 0x11
 5fc:	80 8b       	std	Z+16, r24	; 0x10
 5fe:	93 8b       	std	Z+19, r25	; 0x13
 600:	82 8b       	std	Z+18, r24	; 0x12
 602:	e0 91 50 01 	lds	r30, 0x0150	; 0x800150 <current>
 606:	f0 91 51 01 	lds	r31, 0x0151	; 0x800151 <current+0x1>
 60a:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <readyQ>
 60e:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <readyQ+0x1>
 612:	95 83       	std	Z+5, r25	; 0x05
 614:	84 83       	std	Z+4, r24	; 0x04
 616:	a9 81       	ldd	r26, Y+1	; 0x01
 618:	ba 81       	ldd	r27, Y+2	; 0x02
 61a:	15 96       	adiw	r26, 0x05	; 5
 61c:	fc 93       	st	X, r31
 61e:	ee 93       	st	-X, r30
 620:	14 97       	sbiw	r26, 0x04	; 4
 622:	b0 93 61 01 	sts	0x0161, r27	; 0x800161 <readyQ+0x1>
 626:	a0 93 60 01 	sts	0x0160, r26	; 0x800160 <readyQ>
 62a:	10 97       	sbiw	r26, 0x00	; 0
 62c:	09 f4       	brne	.+2      	; 0x630 <__stack+0x131>
 62e:	ff cf       	rjmp	.-2      	; 0x62e <__stack+0x12f>
 630:	14 96       	adiw	r26, 0x04	; 4
 632:	8d 91       	ld	r24, X+
 634:	9c 91       	ld	r25, X
 636:	15 97       	sbiw	r26, 0x05	; 5
 638:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <readyQ+0x1>
 63c:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <readyQ>
 640:	89 81       	ldd	r24, Y+1	; 0x01
 642:	9a 81       	ldd	r25, Y+2	; 0x02
 644:	0e 94 45 02 	call	0x48a	; 0x48a <dispatch>
 648:	78 94       	sei
 64a:	0f 90       	pop	r0
 64c:	0f 90       	pop	r0
 64e:	df 91       	pop	r29
 650:	cf 91       	pop	r28
 652:	08 95       	ret

00000654 <lock>:

void lock(mutex *m) {
 654:	fc 01       	movw	r30, r24
    DISABLE();
 656:	f8 94       	cli
    if(m->locked){
 658:	80 81       	ld	r24, Z
 65a:	91 81       	ldd	r25, Z+1	; 0x01
 65c:	89 2b       	or	r24, r25
 65e:	e9 f0       	breq	.+58     	; 0x69a <lock+0x46>
        enqueue(current, &(m->waitQ));
 660:	a0 91 50 01 	lds	r26, 0x0150	; 0x800150 <current>
 664:	b0 91 51 01 	lds	r27, 0x0151	; 0x800151 <current+0x1>
    
    initialized = 1;
}

static void enqueue(thread p, thread *queue) {
    p->next = *queue;
 668:	82 81       	ldd	r24, Z+2	; 0x02
 66a:	93 81       	ldd	r25, Z+3	; 0x03
 66c:	15 96       	adiw	r26, 0x05	; 5
 66e:	9c 93       	st	X, r25
 670:	8e 93       	st	-X, r24
 672:	14 97       	sbiw	r26, 0x04	; 4
    *queue = p;
 674:	b3 83       	std	Z+3, r27	; 0x03
 676:	a2 83       	std	Z+2, r26	; 0x02
        q->next = p;
    }*/
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 678:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <readyQ>
 67c:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <readyQ+0x1>
    if (*queue) {
 680:	00 97       	sbiw	r24, 0x00	; 0
 682:	51 f0       	breq	.+20     	; 0x698 <lock+0x44>
        *queue = (*queue)->next;
 684:	fc 01       	movw	r30, r24
 686:	24 81       	ldd	r18, Z+4	; 0x04
 688:	35 81       	ldd	r19, Z+5	; 0x05
 68a:	30 93 61 01 	sts	0x0161, r19	; 0x800161 <readyQ+0x1>
 68e:	20 93 60 01 	sts	0x0160, r18	; 0x800160 <readyQ>

void lock(mutex *m) {
    DISABLE();
    if(m->locked){
        enqueue(current, &(m->waitQ));
        dispatch(dequeue(&readyQ));
 692:	0e 94 45 02 	call	0x48a	; 0x48a <dispatch>
 696:	05 c0       	rjmp	.+10     	; 0x6a2 <lock+0x4e>
 698:	ff cf       	rjmp	.-2      	; 0x698 <lock+0x44>
    } else {
        m->locked = 1;
 69a:	81 e0       	ldi	r24, 0x01	; 1
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	91 83       	std	Z+1, r25	; 0x01
 6a0:	80 83       	st	Z, r24
    }
    ENABLE();
 6a2:	78 94       	sei
 6a4:	08 95       	ret

000006a6 <unlock>:
}

void unlock(mutex *m) {
 6a6:	fc 01       	movw	r30, r24
    DISABLE();
 6a8:	f8 94       	cli
    if((m->waitQ) == NULL){
 6aa:	82 81       	ldd	r24, Z+2	; 0x02
 6ac:	93 81       	ldd	r25, Z+3	; 0x03
 6ae:	89 2b       	or	r24, r25
 6b0:	19 f4       	brne	.+6      	; 0x6b8 <unlock+0x12>
        m->locked = 0;
 6b2:	11 82       	std	Z+1, r1	; 0x01
 6b4:	10 82       	st	Z, r1
 6b6:	1f c0       	rjmp	.+62     	; 0x6f6 <unlock+0x50>
    } else {
        enqueue(current, &readyQ);
 6b8:	a0 91 50 01 	lds	r26, 0x0150	; 0x800150 <current>
 6bc:	b0 91 51 01 	lds	r27, 0x0151	; 0x800151 <current+0x1>
    
    initialized = 1;
}

static void enqueue(thread p, thread *queue) {
    p->next = *queue;
 6c0:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <readyQ>
 6c4:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <readyQ+0x1>
 6c8:	15 96       	adiw	r26, 0x05	; 5
 6ca:	9c 93       	st	X, r25
 6cc:	8e 93       	st	-X, r24
 6ce:	14 97       	sbiw	r26, 0x04	; 4
    *queue = p;
 6d0:	b0 93 61 01 	sts	0x0161, r27	; 0x800161 <readyQ+0x1>
 6d4:	a0 93 60 01 	sts	0x0160, r26	; 0x800160 <readyQ>
        q->next = p;
    }*/
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 6d8:	82 81       	ldd	r24, Z+2	; 0x02
 6da:	93 81       	ldd	r25, Z+3	; 0x03
    if (*queue) {
 6dc:	00 97       	sbiw	r24, 0x00	; 0
 6de:	51 f0       	breq	.+20     	; 0x6f4 <unlock+0x4e>
        *queue = (*queue)->next;
 6e0:	dc 01       	movw	r26, r24
 6e2:	14 96       	adiw	r26, 0x04	; 4
 6e4:	2d 91       	ld	r18, X+
 6e6:	3c 91       	ld	r19, X
 6e8:	15 97       	sbiw	r26, 0x05	; 5
 6ea:	33 83       	std	Z+3, r19	; 0x03
 6ec:	22 83       	std	Z+2, r18	; 0x02
    DISABLE();
    if((m->waitQ) == NULL){
        m->locked = 0;
    } else {
        enqueue(current, &readyQ);
        dispatch(dequeue(&(m->waitQ)));
 6ee:	0e 94 45 02 	call	0x48a	; 0x48a <dispatch>
 6f2:	01 c0       	rjmp	.+2      	; 0x6f6 <unlock+0x50>
 6f4:	ff cf       	rjmp	.-2      	; 0x6f4 <unlock+0x4e>
    }
    ENABLE();
 6f6:	78 94       	sei
 6f8:	08 95       	ret

000006fa <__divmodsi4>:
 6fa:	05 2e       	mov	r0, r21
 6fc:	97 fb       	bst	r25, 7
 6fe:	1e f4       	brtc	.+6      	; 0x706 <__divmodsi4+0xc>
 700:	00 94       	com	r0
 702:	0e 94 94 03 	call	0x728	; 0x728 <__negsi2>
 706:	57 fd       	sbrc	r21, 7
 708:	07 d0       	rcall	.+14     	; 0x718 <__divmodsi4_neg2>
 70a:	0e 94 a2 03 	call	0x744	; 0x744 <__udivmodsi4>
 70e:	07 fc       	sbrc	r0, 7
 710:	03 d0       	rcall	.+6      	; 0x718 <__divmodsi4_neg2>
 712:	4e f4       	brtc	.+18     	; 0x726 <__divmodsi4_exit>
 714:	0c 94 94 03 	jmp	0x728	; 0x728 <__negsi2>

00000718 <__divmodsi4_neg2>:
 718:	50 95       	com	r21
 71a:	40 95       	com	r20
 71c:	30 95       	com	r19
 71e:	21 95       	neg	r18
 720:	3f 4f       	sbci	r19, 0xFF	; 255
 722:	4f 4f       	sbci	r20, 0xFF	; 255
 724:	5f 4f       	sbci	r21, 0xFF	; 255

00000726 <__divmodsi4_exit>:
 726:	08 95       	ret

00000728 <__negsi2>:
 728:	90 95       	com	r25
 72a:	80 95       	com	r24
 72c:	70 95       	com	r23
 72e:	61 95       	neg	r22
 730:	7f 4f       	sbci	r23, 0xFF	; 255
 732:	8f 4f       	sbci	r24, 0xFF	; 255
 734:	9f 4f       	sbci	r25, 0xFF	; 255
 736:	08 95       	ret

00000738 <__tablejump2__>:
 738:	ee 0f       	add	r30, r30
 73a:	ff 1f       	adc	r31, r31
 73c:	05 90       	lpm	r0, Z+
 73e:	f4 91       	lpm	r31, Z
 740:	e0 2d       	mov	r30, r0
 742:	09 94       	ijmp

00000744 <__udivmodsi4>:
 744:	a1 e2       	ldi	r26, 0x21	; 33
 746:	1a 2e       	mov	r1, r26
 748:	aa 1b       	sub	r26, r26
 74a:	bb 1b       	sub	r27, r27
 74c:	fd 01       	movw	r30, r26
 74e:	0d c0       	rjmp	.+26     	; 0x76a <__udivmodsi4_ep>

00000750 <__udivmodsi4_loop>:
 750:	aa 1f       	adc	r26, r26
 752:	bb 1f       	adc	r27, r27
 754:	ee 1f       	adc	r30, r30
 756:	ff 1f       	adc	r31, r31
 758:	a2 17       	cp	r26, r18
 75a:	b3 07       	cpc	r27, r19
 75c:	e4 07       	cpc	r30, r20
 75e:	f5 07       	cpc	r31, r21
 760:	20 f0       	brcs	.+8      	; 0x76a <__udivmodsi4_ep>
 762:	a2 1b       	sub	r26, r18
 764:	b3 0b       	sbc	r27, r19
 766:	e4 0b       	sbc	r30, r20
 768:	f5 0b       	sbc	r31, r21

0000076a <__udivmodsi4_ep>:
 76a:	66 1f       	adc	r22, r22
 76c:	77 1f       	adc	r23, r23
 76e:	88 1f       	adc	r24, r24
 770:	99 1f       	adc	r25, r25
 772:	1a 94       	dec	r1
 774:	69 f7       	brne	.-38     	; 0x750 <__udivmodsi4_loop>
 776:	60 95       	com	r22
 778:	70 95       	com	r23
 77a:	80 95       	com	r24
 77c:	90 95       	com	r25
 77e:	9b 01       	movw	r18, r22
 780:	ac 01       	movw	r20, r24
 782:	bd 01       	movw	r22, r26
 784:	cf 01       	movw	r24, r30
 786:	08 95       	ret

00000788 <setjmp>:
 788:	dc 01       	movw	r26, r24
 78a:	2d 92       	st	X+, r2
 78c:	3d 92       	st	X+, r3
 78e:	4d 92       	st	X+, r4
 790:	5d 92       	st	X+, r5
 792:	6d 92       	st	X+, r6
 794:	7d 92       	st	X+, r7
 796:	8d 92       	st	X+, r8
 798:	9d 92       	st	X+, r9
 79a:	ad 92       	st	X+, r10
 79c:	bd 92       	st	X+, r11
 79e:	cd 92       	st	X+, r12
 7a0:	dd 92       	st	X+, r13
 7a2:	ed 92       	st	X+, r14
 7a4:	fd 92       	st	X+, r15
 7a6:	0d 93       	st	X+, r16
 7a8:	1d 93       	st	X+, r17
 7aa:	cd 93       	st	X+, r28
 7ac:	dd 93       	st	X+, r29
 7ae:	ff 91       	pop	r31
 7b0:	ef 91       	pop	r30
 7b2:	8d b7       	in	r24, 0x3d	; 61
 7b4:	8d 93       	st	X+, r24
 7b6:	8e b7       	in	r24, 0x3e	; 62
 7b8:	8d 93       	st	X+, r24
 7ba:	8f b7       	in	r24, 0x3f	; 63
 7bc:	8d 93       	st	X+, r24
 7be:	ed 93       	st	X+, r30
 7c0:	fd 93       	st	X+, r31
 7c2:	88 27       	eor	r24, r24
 7c4:	99 27       	eor	r25, r25
 7c6:	09 94       	ijmp

000007c8 <longjmp>:
 7c8:	dc 01       	movw	r26, r24
 7ca:	cb 01       	movw	r24, r22
 7cc:	81 30       	cpi	r24, 0x01	; 1
 7ce:	91 05       	cpc	r25, r1
 7d0:	81 1d       	adc	r24, r1
 7d2:	2d 90       	ld	r2, X+
 7d4:	3d 90       	ld	r3, X+
 7d6:	4d 90       	ld	r4, X+
 7d8:	5d 90       	ld	r5, X+
 7da:	6d 90       	ld	r6, X+
 7dc:	7d 90       	ld	r7, X+
 7de:	8d 90       	ld	r8, X+
 7e0:	9d 90       	ld	r9, X+
 7e2:	ad 90       	ld	r10, X+
 7e4:	bd 90       	ld	r11, X+
 7e6:	cd 90       	ld	r12, X+
 7e8:	dd 90       	ld	r13, X+
 7ea:	ed 90       	ld	r14, X+
 7ec:	fd 90       	ld	r15, X+
 7ee:	0d 91       	ld	r16, X+
 7f0:	1d 91       	ld	r17, X+
 7f2:	cd 91       	ld	r28, X+
 7f4:	dd 91       	ld	r29, X+
 7f6:	ed 91       	ld	r30, X+
 7f8:	fd 91       	ld	r31, X+
 7fa:	0d 90       	ld	r0, X+
 7fc:	f8 94       	cli
 7fe:	fe bf       	out	0x3e, r31	; 62
 800:	0f be       	out	0x3f, r0	; 63
 802:	ed bf       	out	0x3d, r30	; 61
 804:	ed 91       	ld	r30, X+
 806:	fd 91       	ld	r31, X+
 808:	09 94       	ijmp

0000080a <_exit>:
 80a:	f8 94       	cli

0000080c <__stop_program>:
 80c:	ff cf       	rjmp	.-2      	; 0x80c <__stop_program>
