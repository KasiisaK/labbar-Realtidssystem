
Part3.2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000056  00800100  00000980  00000a14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000980  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000237  00800156  00800156  00000a6a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a6a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a9c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000adc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014a1  00000000  00000000  00000bac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b75  00000000  00000000  0000204d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000883  00000000  00000000  00002bc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000284  00000000  00000000  00003448  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000064d  00000000  00000000  000036cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c0e  00000000  00000000  00003d19  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00004927  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 87 02 	jmp	0x50e	; 0x50e <__vector_3>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <__vector_7>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	b8 00       	.word	0x00b8	; ????
  5e:	9a 00       	.word	0x009a	; ????
  60:	9d 00       	.word	0x009d	; ????
  62:	a0 00       	.word	0x00a0	; ????
  64:	a3 00       	.word	0x00a3	; ????
  66:	a6 00       	.word	0x00a6	; ????
  68:	a9 00       	.word	0x00a9	; ????
  6a:	ac 00       	.word	0x00ac	; ????
  6c:	af 00       	.word	0x00af	; ????
  6e:	b2 00       	.word	0x00b2	; ????

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e0 e8       	ldi	r30, 0x80	; 128
  84:	f9 e0       	ldi	r31, 0x09	; 9
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a6 35       	cpi	r26, 0x56	; 86
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	23 e0       	ldi	r18, 0x03	; 3
  94:	a6 e5       	ldi	r26, 0x56	; 86
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	ad 38       	cpi	r26, 0x8D	; 141
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 ba 02 	call	0x574	; 0x574 <main>
  a6:	0c 94 be 04 	jmp	0x97c	; 0x97c <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <blink>:
			//'0' is 48 in ASCI and digit offsets to right ASCI char
			writeChar(digit + '0', pos);
		}
		pos--; //next pos
	}
}
  ae:	cc ee       	ldi	r28, 0xEC	; 236
  b0:	d0 e0       	ldi	r29, 0x00	; 0
  b2:	12 e0       	ldi	r17, 0x02	; 2
  b4:	88 e6       	ldi	r24, 0x68	; 104
  b6:	91 e0       	ldi	r25, 0x01	; 1
  b8:	0e 94 bb 03 	call	0x776	; 0x776 <lock>
  bc:	88 81       	ld	r24, Y
  be:	81 27       	eor	r24, r17
  c0:	88 83       	st	Y, r24
  c2:	f8 cf       	rjmp	.-16     	; 0xb4 <blink+0x6>

000000c4 <init>:
  c4:	e1 e6       	ldi	r30, 0x61	; 97
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 e8       	ldi	r24, 0x80	; 128
  ca:	80 83       	st	Z, r24
  cc:	10 82       	st	Z, r1
  ce:	e1 e8       	ldi	r30, 0x81	; 129
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	88 60       	ori	r24, 0x08	; 8
  d6:	80 83       	st	Z, r24
  d8:	82 e4       	ldi	r24, 0x42	; 66
  da:	9f e0       	ldi	r25, 0x0F	; 15
  dc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
  e0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
  e4:	80 81       	ld	r24, Z
  e6:	85 60       	ori	r24, 0x05	; 5
  e8:	80 83       	st	Z, r24
  ea:	ef e6       	ldi	r30, 0x6F	; 111
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	82 60       	ori	r24, 0x02	; 2
  f2:	80 83       	st	Z, r24
  f4:	27 98       	cbi	0x04, 7	; 4
  f6:	2f 9a       	sbi	0x05, 7	; 5
  f8:	ec e6       	ldi	r30, 0x6C	; 108
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	80 68       	ori	r24, 0x80	; 128
 100:	80 83       	st	Z, r24
 102:	ef 9a       	sbi	0x1d, 7	; 29
 104:	08 95       	ret

00000106 <LCD_init>:
 106:	8f e0       	ldi	r24, 0x0F	; 15
 108:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__DATA_REGION_ORIGIN__+0x87>
 10c:	87 eb       	ldi	r24, 0xB7	; 183
 10e:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
 112:	87 e0       	ldi	r24, 0x07	; 7
 114:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__DATA_REGION_ORIGIN__+0x86>
 118:	80 ec       	ldi	r24, 0xC0	; 192
 11a:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
 11e:	08 95       	ret

00000120 <getSegmentForChar>:
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	fc 01       	movw	r30, r24
 124:	f0 97       	sbiw	r30, 0x30	; 48
 126:	ea 30       	cpi	r30, 0x0A	; 10
 128:	f1 05       	cpc	r31, r1
 12a:	f8 f4       	brcc	.+62     	; 0x16a <getSegmentForChar+0x4a>
 12c:	e2 5d       	subi	r30, 0xD2	; 210
 12e:	ff 4f       	sbci	r31, 0xFF	; 255
 130:	0c 94 41 04 	jmp	0x882	; 0x882 <__tablejump2__>
 134:	81 e4       	ldi	r24, 0x41	; 65
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	08 95       	ret
 13a:	89 e3       	ldi	r24, 0x39	; 57
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	08 95       	ret
 140:	81 e3       	ldi	r24, 0x31	; 49
 142:	91 e0       	ldi	r25, 0x01	; 1
 144:	08 95       	ret
 146:	89 e2       	ldi	r24, 0x29	; 41
 148:	91 e0       	ldi	r25, 0x01	; 1
 14a:	08 95       	ret
 14c:	81 e2       	ldi	r24, 0x21	; 33
 14e:	91 e0       	ldi	r25, 0x01	; 1
 150:	08 95       	ret
 152:	89 e1       	ldi	r24, 0x19	; 25
 154:	91 e0       	ldi	r25, 0x01	; 1
 156:	08 95       	ret
 158:	81 e1       	ldi	r24, 0x11	; 17
 15a:	91 e0       	ldi	r25, 0x01	; 1
 15c:	08 95       	ret
 15e:	89 e0       	ldi	r24, 0x09	; 9
 160:	91 e0       	ldi	r25, 0x01	; 1
 162:	08 95       	ret
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	91 e0       	ldi	r25, 0x01	; 1
 168:	08 95       	ret
 16a:	86 e5       	ldi	r24, 0x56	; 86
 16c:	91 e0       	ldi	r25, 0x01	; 1
 16e:	08 95       	ret
 170:	89 e4       	ldi	r24, 0x49	; 73
 172:	91 e0       	ldi	r25, 0x01	; 1
 174:	08 95       	ret

00000176 <writeChar>:
 176:	cf 93       	push	r28
 178:	65 30       	cpi	r22, 0x05	; 5
 17a:	08 f0       	brcs	.+2      	; 0x17e <writeChar+0x8>
 17c:	e4 c0       	rjmp	.+456    	; 0x346 <writeChar+0x1d0>
 17e:	c6 2f       	mov	r28, r22
 180:	0e 94 90 00 	call	0x120	; 0x120 <getSegmentForChar>
 184:	fc 01       	movw	r30, r24
 186:	c2 30       	cpi	r28, 0x02	; 2
 188:	09 f4       	brne	.+2      	; 0x18c <writeChar+0x16>
 18a:	67 c0       	rjmp	.+206    	; 0x25a <writeChar+0xe4>
 18c:	28 f4       	brcc	.+10     	; 0x198 <writeChar+0x22>
 18e:	cc 23       	and	r28, r28
 190:	51 f0       	breq	.+20     	; 0x1a6 <writeChar+0x30>
 192:	c1 30       	cpi	r28, 0x01	; 1
 194:	29 f1       	breq	.+74     	; 0x1e0 <writeChar+0x6a>
 196:	d7 c0       	rjmp	.+430    	; 0x346 <writeChar+0x1d0>
 198:	c3 30       	cpi	r28, 0x03	; 3
 19a:	09 f4       	brne	.+2      	; 0x19e <writeChar+0x28>
 19c:	7b c0       	rjmp	.+246    	; 0x294 <writeChar+0x11e>
 19e:	c4 30       	cpi	r28, 0x04	; 4
 1a0:	09 f4       	brne	.+2      	; 0x1a4 <writeChar+0x2e>
 1a2:	b5 c0       	rjmp	.+362    	; 0x30e <writeChar+0x198>
 1a4:	d0 c0       	rjmp	.+416    	; 0x346 <writeChar+0x1d0>
 1a6:	ac ee       	ldi	r26, 0xEC	; 236
 1a8:	b0 e0       	ldi	r27, 0x00	; 0
 1aa:	8c 91       	ld	r24, X
 1ac:	80 7f       	andi	r24, 0xF0	; 240
 1ae:	90 81       	ld	r25, Z
 1b0:	89 2b       	or	r24, r25
 1b2:	8c 93       	st	X, r24
 1b4:	a1 ef       	ldi	r26, 0xF1	; 241
 1b6:	b0 e0       	ldi	r27, 0x00	; 0
 1b8:	8c 91       	ld	r24, X
 1ba:	80 7f       	andi	r24, 0xF0	; 240
 1bc:	92 81       	ldd	r25, Z+2	; 0x02
 1be:	89 2b       	or	r24, r25
 1c0:	8c 93       	st	X, r24
 1c2:	a6 ef       	ldi	r26, 0xF6	; 246
 1c4:	b0 e0       	ldi	r27, 0x00	; 0
 1c6:	8c 91       	ld	r24, X
 1c8:	80 7f       	andi	r24, 0xF0	; 240
 1ca:	94 81       	ldd	r25, Z+4	; 0x04
 1cc:	89 2b       	or	r24, r25
 1ce:	8c 93       	st	X, r24
 1d0:	ab ef       	ldi	r26, 0xFB	; 251
 1d2:	b0 e0       	ldi	r27, 0x00	; 0
 1d4:	8c 91       	ld	r24, X
 1d6:	80 7f       	andi	r24, 0xF0	; 240
 1d8:	96 81       	ldd	r25, Z+6	; 0x06
 1da:	89 2b       	or	r24, r25
 1dc:	8c 93       	st	X, r24
 1de:	b3 c0       	rjmp	.+358    	; 0x346 <writeChar+0x1d0>
 1e0:	ac ee       	ldi	r26, 0xEC	; 236
 1e2:	b0 e0       	ldi	r27, 0x00	; 0
 1e4:	2c 91       	ld	r18, X
 1e6:	80 81       	ld	r24, Z
 1e8:	91 81       	ldd	r25, Z+1	; 0x01
 1ea:	82 95       	swap	r24
 1ec:	92 95       	swap	r25
 1ee:	90 7f       	andi	r25, 0xF0	; 240
 1f0:	98 27       	eor	r25, r24
 1f2:	80 7f       	andi	r24, 0xF0	; 240
 1f4:	98 27       	eor	r25, r24
 1f6:	92 2f       	mov	r25, r18
 1f8:	9f 70       	andi	r25, 0x0F	; 15
 1fa:	89 2b       	or	r24, r25
 1fc:	8c 93       	st	X, r24
 1fe:	a1 ef       	ldi	r26, 0xF1	; 241
 200:	b0 e0       	ldi	r27, 0x00	; 0
 202:	2c 91       	ld	r18, X
 204:	82 81       	ldd	r24, Z+2	; 0x02
 206:	93 81       	ldd	r25, Z+3	; 0x03
 208:	82 95       	swap	r24
 20a:	92 95       	swap	r25
 20c:	90 7f       	andi	r25, 0xF0	; 240
 20e:	98 27       	eor	r25, r24
 210:	80 7f       	andi	r24, 0xF0	; 240
 212:	98 27       	eor	r25, r24
 214:	92 2f       	mov	r25, r18
 216:	9f 70       	andi	r25, 0x0F	; 15
 218:	89 2b       	or	r24, r25
 21a:	8c 93       	st	X, r24
 21c:	a6 ef       	ldi	r26, 0xF6	; 246
 21e:	b0 e0       	ldi	r27, 0x00	; 0
 220:	2c 91       	ld	r18, X
 222:	84 81       	ldd	r24, Z+4	; 0x04
 224:	95 81       	ldd	r25, Z+5	; 0x05
 226:	82 95       	swap	r24
 228:	92 95       	swap	r25
 22a:	90 7f       	andi	r25, 0xF0	; 240
 22c:	98 27       	eor	r25, r24
 22e:	80 7f       	andi	r24, 0xF0	; 240
 230:	98 27       	eor	r25, r24
 232:	92 2f       	mov	r25, r18
 234:	9f 70       	andi	r25, 0x0F	; 15
 236:	89 2b       	or	r24, r25
 238:	8c 93       	st	X, r24
 23a:	ab ef       	ldi	r26, 0xFB	; 251
 23c:	b0 e0       	ldi	r27, 0x00	; 0
 23e:	2c 91       	ld	r18, X
 240:	86 81       	ldd	r24, Z+6	; 0x06
 242:	97 81       	ldd	r25, Z+7	; 0x07
 244:	82 95       	swap	r24
 246:	92 95       	swap	r25
 248:	90 7f       	andi	r25, 0xF0	; 240
 24a:	98 27       	eor	r25, r24
 24c:	80 7f       	andi	r24, 0xF0	; 240
 24e:	98 27       	eor	r25, r24
 250:	92 2f       	mov	r25, r18
 252:	9f 70       	andi	r25, 0x0F	; 15
 254:	89 2b       	or	r24, r25
 256:	8c 93       	st	X, r24
 258:	76 c0       	rjmp	.+236    	; 0x346 <writeChar+0x1d0>
 25a:	ad ee       	ldi	r26, 0xED	; 237
 25c:	b0 e0       	ldi	r27, 0x00	; 0
 25e:	8c 91       	ld	r24, X
 260:	80 7f       	andi	r24, 0xF0	; 240
 262:	90 81       	ld	r25, Z
 264:	89 2b       	or	r24, r25
 266:	8c 93       	st	X, r24
 268:	a2 ef       	ldi	r26, 0xF2	; 242
 26a:	b0 e0       	ldi	r27, 0x00	; 0
 26c:	8c 91       	ld	r24, X
 26e:	80 7f       	andi	r24, 0xF0	; 240
 270:	92 81       	ldd	r25, Z+2	; 0x02
 272:	89 2b       	or	r24, r25
 274:	8c 93       	st	X, r24
 276:	a7 ef       	ldi	r26, 0xF7	; 247
 278:	b0 e0       	ldi	r27, 0x00	; 0
 27a:	8c 91       	ld	r24, X
 27c:	80 7f       	andi	r24, 0xF0	; 240
 27e:	94 81       	ldd	r25, Z+4	; 0x04
 280:	89 2b       	or	r24, r25
 282:	8c 93       	st	X, r24
 284:	ac ef       	ldi	r26, 0xFC	; 252
 286:	b0 e0       	ldi	r27, 0x00	; 0
 288:	8c 91       	ld	r24, X
 28a:	80 7f       	andi	r24, 0xF0	; 240
 28c:	96 81       	ldd	r25, Z+6	; 0x06
 28e:	89 2b       	or	r24, r25
 290:	8c 93       	st	X, r24
 292:	59 c0       	rjmp	.+178    	; 0x346 <writeChar+0x1d0>
 294:	ad ee       	ldi	r26, 0xED	; 237
 296:	b0 e0       	ldi	r27, 0x00	; 0
 298:	2c 91       	ld	r18, X
 29a:	80 81       	ld	r24, Z
 29c:	91 81       	ldd	r25, Z+1	; 0x01
 29e:	82 95       	swap	r24
 2a0:	92 95       	swap	r25
 2a2:	90 7f       	andi	r25, 0xF0	; 240
 2a4:	98 27       	eor	r25, r24
 2a6:	80 7f       	andi	r24, 0xF0	; 240
 2a8:	98 27       	eor	r25, r24
 2aa:	92 2f       	mov	r25, r18
 2ac:	9f 70       	andi	r25, 0x0F	; 15
 2ae:	89 2b       	or	r24, r25
 2b0:	8c 93       	st	X, r24
 2b2:	a2 ef       	ldi	r26, 0xF2	; 242
 2b4:	b0 e0       	ldi	r27, 0x00	; 0
 2b6:	2c 91       	ld	r18, X
 2b8:	82 81       	ldd	r24, Z+2	; 0x02
 2ba:	93 81       	ldd	r25, Z+3	; 0x03
 2bc:	82 95       	swap	r24
 2be:	92 95       	swap	r25
 2c0:	90 7f       	andi	r25, 0xF0	; 240
 2c2:	98 27       	eor	r25, r24
 2c4:	80 7f       	andi	r24, 0xF0	; 240
 2c6:	98 27       	eor	r25, r24
 2c8:	92 2f       	mov	r25, r18
 2ca:	9f 70       	andi	r25, 0x0F	; 15
 2cc:	89 2b       	or	r24, r25
 2ce:	8c 93       	st	X, r24
 2d0:	a7 ef       	ldi	r26, 0xF7	; 247
 2d2:	b0 e0       	ldi	r27, 0x00	; 0
 2d4:	2c 91       	ld	r18, X
 2d6:	84 81       	ldd	r24, Z+4	; 0x04
 2d8:	95 81       	ldd	r25, Z+5	; 0x05
 2da:	82 95       	swap	r24
 2dc:	92 95       	swap	r25
 2de:	90 7f       	andi	r25, 0xF0	; 240
 2e0:	98 27       	eor	r25, r24
 2e2:	80 7f       	andi	r24, 0xF0	; 240
 2e4:	98 27       	eor	r25, r24
 2e6:	92 2f       	mov	r25, r18
 2e8:	9f 70       	andi	r25, 0x0F	; 15
 2ea:	89 2b       	or	r24, r25
 2ec:	8c 93       	st	X, r24
 2ee:	ac ef       	ldi	r26, 0xFC	; 252
 2f0:	b0 e0       	ldi	r27, 0x00	; 0
 2f2:	2c 91       	ld	r18, X
 2f4:	86 81       	ldd	r24, Z+6	; 0x06
 2f6:	97 81       	ldd	r25, Z+7	; 0x07
 2f8:	82 95       	swap	r24
 2fa:	92 95       	swap	r25
 2fc:	90 7f       	andi	r25, 0xF0	; 240
 2fe:	98 27       	eor	r25, r24
 300:	80 7f       	andi	r24, 0xF0	; 240
 302:	98 27       	eor	r25, r24
 304:	92 2f       	mov	r25, r18
 306:	9f 70       	andi	r25, 0x0F	; 15
 308:	89 2b       	or	r24, r25
 30a:	8c 93       	st	X, r24
 30c:	1c c0       	rjmp	.+56     	; 0x346 <writeChar+0x1d0>
 30e:	ae ee       	ldi	r26, 0xEE	; 238
 310:	b0 e0       	ldi	r27, 0x00	; 0
 312:	8c 91       	ld	r24, X
 314:	80 7f       	andi	r24, 0xF0	; 240
 316:	90 81       	ld	r25, Z
 318:	89 2b       	or	r24, r25
 31a:	8c 93       	st	X, r24
 31c:	a3 ef       	ldi	r26, 0xF3	; 243
 31e:	b0 e0       	ldi	r27, 0x00	; 0
 320:	8c 91       	ld	r24, X
 322:	80 7f       	andi	r24, 0xF0	; 240
 324:	92 81       	ldd	r25, Z+2	; 0x02
 326:	89 2b       	or	r24, r25
 328:	8c 93       	st	X, r24
 32a:	a8 ef       	ldi	r26, 0xF8	; 248
 32c:	b0 e0       	ldi	r27, 0x00	; 0
 32e:	8c 91       	ld	r24, X
 330:	80 7f       	andi	r24, 0xF0	; 240
 332:	94 81       	ldd	r25, Z+4	; 0x04
 334:	89 2b       	or	r24, r25
 336:	8c 93       	st	X, r24
 338:	ad ef       	ldi	r26, 0xFD	; 253
 33a:	b0 e0       	ldi	r27, 0x00	; 0
 33c:	8c 91       	ld	r24, X
 33e:	80 7f       	andi	r24, 0xF0	; 240
 340:	96 81       	ldd	r25, Z+6	; 0x06
 342:	89 2b       	or	r24, r25
 344:	8c 93       	st	X, r24
 346:	cf 91       	pop	r28
 348:	08 95       	ret

0000034a <printAt>:
 34a:	8f 92       	push	r8
 34c:	9f 92       	push	r9
 34e:	af 92       	push	r10
 350:	bf 92       	push	r11
 352:	cf 92       	push	r12
 354:	df 92       	push	r13
 356:	ef 92       	push	r14
 358:	ff 92       	push	r15
 35a:	cf 93       	push	r28
 35c:	df 93       	push	r29
 35e:	4b 01       	movw	r8, r22
 360:	5c 01       	movw	r10, r24
 362:	ea 01       	movw	r28, r20
 364:	24 e6       	ldi	r18, 0x64	; 100
 366:	30 e0       	ldi	r19, 0x00	; 0
 368:	40 e0       	ldi	r20, 0x00	; 0
 36a:	50 e0       	ldi	r21, 0x00	; 0
 36c:	0e 94 22 04 	call	0x844	; 0x844 <__divmodsi4>
 370:	0f 2e       	mov	r0, r31
 372:	fa e0       	ldi	r31, 0x0A	; 10
 374:	cf 2e       	mov	r12, r31
 376:	d1 2c       	mov	r13, r1
 378:	e1 2c       	mov	r14, r1
 37a:	f1 2c       	mov	r15, r1
 37c:	f0 2d       	mov	r31, r0
 37e:	a7 01       	movw	r20, r14
 380:	96 01       	movw	r18, r12
 382:	0e 94 22 04 	call	0x844	; 0x844 <__divmodsi4>
 386:	6c 2f       	mov	r22, r28
 388:	80 e3       	ldi	r24, 0x30	; 48
 38a:	82 0f       	add	r24, r18
 38c:	0e 94 bb 00 	call	0x176	; 0x176 <writeChar>
 390:	21 96       	adiw	r28, 0x01	; 1
 392:	c5 01       	movw	r24, r10
 394:	b4 01       	movw	r22, r8
 396:	a7 01       	movw	r20, r14
 398:	96 01       	movw	r18, r12
 39a:	0e 94 22 04 	call	0x844	; 0x844 <__divmodsi4>
 39e:	86 2f       	mov	r24, r22
 3a0:	6c 2f       	mov	r22, r28
 3a2:	80 5d       	subi	r24, 0xD0	; 208
 3a4:	0e 94 bb 00 	call	0x176	; 0x176 <writeChar>
 3a8:	df 91       	pop	r29
 3aa:	cf 91       	pop	r28
 3ac:	ff 90       	pop	r15
 3ae:	ef 90       	pop	r14
 3b0:	df 90       	pop	r13
 3b2:	cf 90       	pop	r12
 3b4:	bf 90       	pop	r11
 3b6:	af 90       	pop	r10
 3b8:	9f 90       	pop	r9
 3ba:	8f 90       	pop	r8
 3bc:	08 95       	ret

000003be <isPrime>:

bool isPrime(int number)
{
 3be:	fc 01       	movw	r30, r24
	//0 and 1 are not prime numbers
	if (number <= 1) return false;
 3c0:	82 30       	cpi	r24, 0x02	; 2
 3c2:	91 05       	cpc	r25, r1
 3c4:	1c f1       	brlt	.+70     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>

	//loop from 2 to sqrt(number)
	for (int i=2; i*i <= number; i++)
 3c6:	84 30       	cpi	r24, 0x04	; 4
 3c8:	91 05       	cpc	r25, r1
 3ca:	14 f1       	brlt	.+68     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
	{
		if (number % i == 0) return false;	//divisible => not prime
 3cc:	81 70       	andi	r24, 0x01	; 1
 3ce:	90 78       	andi	r25, 0x80	; 128
 3d0:	99 23       	and	r25, r25
 3d2:	24 f4       	brge	.+8      	; 0x3dc <isPrime+0x1e>
 3d4:	01 97       	sbiw	r24, 0x01	; 1
 3d6:	8e 6f       	ori	r24, 0xFE	; 254
 3d8:	9f 6f       	ori	r25, 0xFF	; 255
 3da:	01 96       	adiw	r24, 0x01	; 1
 3dc:	89 2b       	or	r24, r25
 3de:	d1 f0       	breq	.+52     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 3e0:	22 e0       	ldi	r18, 0x02	; 2
 3e2:	30 e0       	ldi	r19, 0x00	; 0
 3e4:	06 c0       	rjmp	.+12     	; 0x3f2 <isPrime+0x34>
 3e6:	cf 01       	movw	r24, r30
 3e8:	b9 01       	movw	r22, r18
 3ea:	0e 94 0e 04 	call	0x81c	; 0x81c <__divmodhi4>
 3ee:	89 2b       	or	r24, r25
 3f0:	99 f0       	breq	.+38     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
{
	//0 and 1 are not prime numbers
	if (number <= 1) return false;

	//loop from 2 to sqrt(number)
	for (int i=2; i*i <= number; i++)
 3f2:	2f 5f       	subi	r18, 0xFF	; 255
 3f4:	3f 4f       	sbci	r19, 0xFF	; 255
 3f6:	22 9f       	mul	r18, r18
 3f8:	c0 01       	movw	r24, r0
 3fa:	23 9f       	mul	r18, r19
 3fc:	90 0d       	add	r25, r0
 3fe:	90 0d       	add	r25, r0
 400:	11 24       	eor	r1, r1
 402:	e8 17       	cp	r30, r24
 404:	f9 07       	cpc	r31, r25
 406:	7c f7       	brge	.-34     	; 0x3e6 <isPrime+0x28>
	{
		if (number % i == 0) return false;	//divisible => not prime
	}
	//is prime if no factors
	return true;
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	08 95       	ret
}

bool isPrime(int number)
{
	//0 and 1 are not prime numbers
	if (number <= 1) return false;
 40c:	80 e0       	ldi	r24, 0x00	; 0
 40e:	08 95       	ret
	for (int i=2; i*i <= number; i++)
	{
		if (number % i == 0) return false;	//divisible => not prime
	}
	//is prime if no factors
	return true;
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	08 95       	ret
	if (number <= 1) return false;

	//loop from 2 to sqrt(number)
	for (int i=2; i*i <= number; i++)
	{
		if (number % i == 0) return false;	//divisible => not prime
 414:	80 e0       	ldi	r24, 0x00	; 0
 416:	08 95       	ret
 418:	80 e0       	ldi	r24, 0x00	; 0
	}
	//is prime if no factors
	return true;
}
 41a:	08 95       	ret

0000041c <primes>:

void primes() {
	long i = 1;
 41c:	c1 2c       	mov	r12, r1
 41e:	d1 2c       	mov	r13, r1
 420:	76 01       	movw	r14, r12
 422:	c3 94       	inc	r12
	while (true) {
		if (isPrime(i))
 424:	c6 01       	movw	r24, r12
 426:	0e 94 df 01 	call	0x3be	; 0x3be <isPrime>
 42a:	88 23       	and	r24, r24
 42c:	79 f0       	breq	.+30     	; 0x44c <primes+0x30>
		{
			printAt(i, 0);
 42e:	40 e0       	ldi	r20, 0x00	; 0
 430:	50 e0       	ldi	r21, 0x00	; 0
 432:	c7 01       	movw	r24, r14
 434:	b6 01       	movw	r22, r12
 436:	0e 94 a5 01 	call	0x34a	; 0x34a <printAt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 43a:	2f e3       	ldi	r18, 0x3F	; 63
 43c:	82 e4       	ldi	r24, 0x42	; 66
 43e:	9f e0       	ldi	r25, 0x0F	; 15
 440:	21 50       	subi	r18, 0x01	; 1
 442:	80 40       	sbci	r24, 0x00	; 0
 444:	90 40       	sbci	r25, 0x00	; 0
 446:	e1 f7       	brne	.-8      	; 0x440 <primes+0x24>
 448:	00 c0       	rjmp	.+0      	; 0x44a <primes+0x2e>
 44a:	00 00       	nop
			_delay_ms(5000);
		}
		i++;
 44c:	2f ef       	ldi	r18, 0xFF	; 255
 44e:	c2 1a       	sub	r12, r18
 450:	d2 0a       	sbc	r13, r18
 452:	e2 0a       	sbc	r14, r18
 454:	f2 0a       	sbc	r15, r18
	}
 456:	e6 cf       	rjmp	.-52     	; 0x424 <primes+0x8>

00000458 <toggle_lcd>:
	}
}

// Toggle between two LCD segments
void toggle_lcd(uint8_t *current_segment) {
	if (*current_segment == LCD_SEGMENT1) {
 458:	fc 01       	movw	r30, r24
 45a:	20 81       	ld	r18, Z
 45c:	21 30       	cpi	r18, 0x01	; 1
 45e:	69 f4       	brne	.+26     	; 0x47a <toggle_lcd+0x22>
		*current_segment = LCD_SEGMENT2;
 460:	20 e2       	ldi	r18, 0x20	; 32
 462:	20 83       	st	Z, r18
		// Clear LCD segment 1
		LCDDR3 &= ~LCD_SEGMENT1;
 464:	ef ee       	ldi	r30, 0xEF	; 239
 466:	f0 e0       	ldi	r31, 0x00	; 0
 468:	80 81       	ld	r24, Z
 46a:	8e 7f       	andi	r24, 0xFE	; 254
 46c:	80 83       	st	Z, r24
		// Update to LCD segment 2
		LCDDR2 = (LCDDR2 & 0xFF) | LCD_SEGMENT2;
 46e:	ee ee       	ldi	r30, 0xEE	; 238
 470:	f0 e0       	ldi	r31, 0x00	; 0
 472:	80 81       	ld	r24, Z
 474:	80 62       	ori	r24, 0x20	; 32
 476:	80 83       	st	Z, r24
 478:	08 95       	ret
		} else {
		*current_segment = LCD_SEGMENT1;
 47a:	21 e0       	ldi	r18, 0x01	; 1
 47c:	fc 01       	movw	r30, r24
 47e:	20 83       	st	Z, r18
		// Clear LCD segment 2
		LCDDR2 &= ~LCD_SEGMENT2;
 480:	ee ee       	ldi	r30, 0xEE	; 238
 482:	f0 e0       	ldi	r31, 0x00	; 0
 484:	80 81       	ld	r24, Z
 486:	8f 7d       	andi	r24, 0xDF	; 223
 488:	80 83       	st	Z, r24
		// Update to LCD segment 1
		LCDDR3 = (LCDDR3 & 0xFF) | LCD_SEGMENT1;
 48a:	ef ee       	ldi	r30, 0xEF	; 239
 48c:	f0 e0       	ldi	r31, 0x00	; 0
 48e:	80 81       	ld	r24, Z
 490:	81 60       	ori	r24, 0x01	; 1
 492:	80 83       	st	Z, r24
 494:	08 95       	ret

00000496 <button>:

void button() {
	static uint8_t current_segment = LCD_SEGMENT1;

	while (true) {
		lock(&button_mutex);
 496:	84 e6       	ldi	r24, 0x64	; 100
 498:	91 e0       	ldi	r25, 0x01	; 1
 49a:	0e 94 bb 03 	call	0x776	; 0x776 <lock>
		toggle_lcd(&current_segment);
 49e:	80 e0       	ldi	r24, 0x00	; 0
 4a0:	91 e0       	ldi	r25, 0x01	; 1
 4a2:	0e 94 2c 02 	call	0x458	; 0x458 <toggle_lcd>
 4a6:	f7 cf       	rjmp	.-18     	; 0x496 <button>

000004a8 <keyCounter>:
	}
}

void keyCounter() {
	printAt(keyPresses, 3);
 4a8:	60 91 5e 01 	lds	r22, 0x015E	; 0x80015e <keyPresses>
 4ac:	70 91 5f 01 	lds	r23, 0x015F	; 0x80015f <keyPresses+0x1>
 4b0:	07 2e       	mov	r0, r23
 4b2:	00 0c       	add	r0, r0
 4b4:	88 0b       	sbc	r24, r24
 4b6:	99 0b       	sbc	r25, r25
 4b8:	43 e0       	ldi	r20, 0x03	; 3
 4ba:	50 e0       	ldi	r21, 0x00	; 0
 4bc:	0e 94 a5 01 	call	0x34a	; 0x34a <printAt>
 4c0:	08 95       	ret

000004c2 <__vector_7>:
}

// Timer interupt
ISR(TIMER1_COMPA_vect) {
 4c2:	1f 92       	push	r1
 4c4:	0f 92       	push	r0
 4c6:	0f b6       	in	r0, 0x3f	; 63
 4c8:	0f 92       	push	r0
 4ca:	11 24       	eor	r1, r1
 4cc:	2f 93       	push	r18
 4ce:	3f 93       	push	r19
 4d0:	4f 93       	push	r20
 4d2:	5f 93       	push	r21
 4d4:	6f 93       	push	r22
 4d6:	7f 93       	push	r23
 4d8:	8f 93       	push	r24
 4da:	9f 93       	push	r25
 4dc:	af 93       	push	r26
 4de:	bf 93       	push	r27
 4e0:	ef 93       	push	r30
 4e2:	ff 93       	push	r31
	unlock(&blink_mutex);
 4e4:	88 e6       	ldi	r24, 0x68	; 104
 4e6:	91 e0       	ldi	r25, 0x01	; 1
 4e8:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <unlock>
}
 4ec:	ff 91       	pop	r31
 4ee:	ef 91       	pop	r30
 4f0:	bf 91       	pop	r27
 4f2:	af 91       	pop	r26
 4f4:	9f 91       	pop	r25
 4f6:	8f 91       	pop	r24
 4f8:	7f 91       	pop	r23
 4fa:	6f 91       	pop	r22
 4fc:	5f 91       	pop	r21
 4fe:	4f 91       	pop	r20
 500:	3f 91       	pop	r19
 502:	2f 91       	pop	r18
 504:	0f 90       	pop	r0
 506:	0f be       	out	0x3f, r0	; 63
 508:	0f 90       	pop	r0
 50a:	1f 90       	pop	r1
 50c:	18 95       	reti

0000050e <__vector_3>:

// Joystick interupt
ISR(PCINT1_vect) {
 50e:	1f 92       	push	r1
 510:	0f 92       	push	r0
 512:	0f b6       	in	r0, 0x3f	; 63
 514:	0f 92       	push	r0
 516:	11 24       	eor	r1, r1
 518:	2f 93       	push	r18
 51a:	3f 93       	push	r19
 51c:	4f 93       	push	r20
 51e:	5f 93       	push	r21
 520:	6f 93       	push	r22
 522:	7f 93       	push	r23
 524:	8f 93       	push	r24
 526:	9f 93       	push	r25
 528:	af 93       	push	r26
 52a:	bf 93       	push	r27
 52c:	ef 93       	push	r30
 52e:	ff 93       	push	r31
	// Check if joystick is pressed (active low, bit 7 of PINB == 0)
	if (!(PINB & (1 << PB7))) {
 530:	1f 99       	sbic	0x03, 7	; 3
 532:	0f c0       	rjmp	.+30     	; 0x552 <__vector_3+0x44>
		keyPresses++;
 534:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <keyPresses>
 538:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <keyPresses+0x1>
 53c:	01 96       	adiw	r24, 0x01	; 1
 53e:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <keyPresses+0x1>
 542:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <keyPresses>
		keyCounter();
 546:	0e 94 54 02 	call	0x4a8	; 0x4a8 <keyCounter>
		unlock(&button_mutex);			
 54a:	84 e6       	ldi	r24, 0x64	; 100
 54c:	91 e0       	ldi	r25, 0x01	; 1
 54e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <unlock>
	}
}
 552:	ff 91       	pop	r31
 554:	ef 91       	pop	r30
 556:	bf 91       	pop	r27
 558:	af 91       	pop	r26
 55a:	9f 91       	pop	r25
 55c:	8f 91       	pop	r24
 55e:	7f 91       	pop	r23
 560:	6f 91       	pop	r22
 562:	5f 91       	pop	r21
 564:	4f 91       	pop	r20
 566:	3f 91       	pop	r19
 568:	2f 91       	pop	r18
 56a:	0f 90       	pop	r0
 56c:	0f be       	out	0x3f, r0	; 63
 56e:	0f 90       	pop	r0
 570:	1f 90       	pop	r1
 572:	18 95       	reti

00000574 <main>:


int main(void) {
	cli();
 574:	f8 94       	cli
	init();
 576:	0e 94 62 00 	call	0xc4	; 0xc4 <init>
	LCD_init();
 57a:	0e 94 83 00 	call	0x106	; 0x106 <LCD_init>
	sei();
 57e:	78 94       	sei
	
	lock(&blink_mutex);
 580:	88 e6       	ldi	r24, 0x68	; 104
 582:	91 e0       	ldi	r25, 0x01	; 1
 584:	0e 94 bb 03 	call	0x776	; 0x776 <lock>
	lock(&button_mutex);
 588:	84 e6       	ldi	r24, 0x64	; 100
 58a:	91 e0       	ldi	r25, 0x01	; 1
 58c:	0e 94 bb 03 	call	0x776	; 0x776 <lock>

	spawn(button, 0);
 590:	60 e0       	ldi	r22, 0x00	; 0
 592:	70 e0       	ldi	r23, 0x00	; 0
 594:	8b e4       	ldi	r24, 0x4B	; 75
 596:	92 e0       	ldi	r25, 0x02	; 2
 598:	0e 94 f6 02 	call	0x5ec	; 0x5ec <spawn>
	spawn(blink, 0);
 59c:	60 e0       	ldi	r22, 0x00	; 0
 59e:	70 e0       	ldi	r23, 0x00	; 0
 5a0:	87 e5       	ldi	r24, 0x57	; 87
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	0e 94 f6 02 	call	0x5ec	; 0x5ec <spawn>
	primes();
 5a8:	0e 94 0e 02 	call	0x41c	; 0x41c <primes>

000005ac <dispatch>:
void yield(void) {
    DISABLE();
    enqueue(current, &readyQ);
    dispatch(dequeue(&readyQ));
    ENABLE();
}
 5ac:	cf 93       	push	r28
 5ae:	df 93       	push	r29
 5b0:	00 d0       	rcall	.+0      	; 0x5b2 <dispatch+0x6>
 5b2:	cd b7       	in	r28, 0x3d	; 61
 5b4:	de b7       	in	r29, 0x3e	; 62
 5b6:	9a 83       	std	Y+2, r25	; 0x02
 5b8:	89 83       	std	Y+1, r24	; 0x01
 5ba:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <current>
 5be:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <current+0x1>
 5c2:	06 96       	adiw	r24, 0x06	; 6
 5c4:	0e 94 7d 04 	call	0x8fa	; 0x8fa <setjmp>
 5c8:	89 2b       	or	r24, r25
 5ca:	59 f4       	brne	.+22     	; 0x5e2 <dispatch+0x36>
 5cc:	89 81       	ldd	r24, Y+1	; 0x01
 5ce:	9a 81       	ldd	r25, Y+2	; 0x02
 5d0:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <current+0x1>
 5d4:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <current>
 5d8:	61 e0       	ldi	r22, 0x01	; 1
 5da:	70 e0       	ldi	r23, 0x00	; 0
 5dc:	06 96       	adiw	r24, 0x06	; 6
 5de:	0e 94 9d 04 	call	0x93a	; 0x93a <longjmp>
 5e2:	0f 90       	pop	r0
 5e4:	0f 90       	pop	r0
 5e6:	df 91       	pop	r29
 5e8:	cf 91       	pop	r28
 5ea:	08 95       	ret

000005ec <spawn>:
 5ec:	cf 93       	push	r28
 5ee:	df 93       	push	r29
 5f0:	00 d0       	rcall	.+0      	; 0x5f2 <spawn+0x6>
 5f2:	cd b7       	in	r28, 0x3d	; 61
 5f4:	de b7       	in	r29, 0x3e	; 62
 5f6:	f8 94       	cli
 5f8:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <initialized>
 5fc:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <initialized+0x1>
 600:	23 2b       	or	r18, r19
 602:	99 f5       	brne	.+102    	; 0x66a <spawn+0x7e>
 604:	26 e4       	ldi	r18, 0x46	; 70
 606:	32 e0       	ldi	r19, 0x02	; 2
 608:	30 93 de 01 	sts	0x01DE, r19	; 0x8001de <threads+0x5>
 60c:	20 93 dd 01 	sts	0x01DD, r18	; 0x8001dd <threads+0x4>
 610:	23 eb       	ldi	r18, 0xB3	; 179
 612:	32 e0       	ldi	r19, 0x02	; 2
 614:	30 93 4b 02 	sts	0x024B, r19	; 0x80024b <threads+0x72>
 618:	20 93 4a 02 	sts	0x024A, r18	; 0x80024a <threads+0x71>
 61c:	20 e2       	ldi	r18, 0x20	; 32
 61e:	33 e0       	ldi	r19, 0x03	; 3
 620:	30 93 b8 02 	sts	0x02B8, r19	; 0x8002b8 <threads+0xdf>
 624:	20 93 b7 02 	sts	0x02B7, r18	; 0x8002b7 <threads+0xde>
 628:	10 92 25 03 	sts	0x0325, r1	; 0x800325 <threads+0x14c>
 62c:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <threads+0x14b>
 630:	25 e0       	ldi	r18, 0x05	; 5
 632:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
 636:	2f 9a       	sbi	0x05, 7	; 5
 638:	ef 9a       	sbi	0x1d, 7	; 29
 63a:	ec e6       	ldi	r30, 0x6C	; 108
 63c:	f0 e0       	ldi	r31, 0x00	; 0
 63e:	20 81       	ld	r18, Z
 640:	20 68       	ori	r18, 0x80	; 128
 642:	20 83       	st	Z, r18
 644:	22 e0       	ldi	r18, 0x02	; 2
 646:	20 93 6f 00 	sts	0x006F, r18	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
 64a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 64e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
 652:	22 e4       	ldi	r18, 0x42	; 66
 654:	3f e0       	ldi	r19, 0x0F	; 15
 656:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 65a:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
 65e:	21 e0       	ldi	r18, 0x01	; 1
 660:	30 e0       	ldi	r19, 0x00	; 0
 662:	30 93 61 01 	sts	0x0161, r19	; 0x800161 <initialized+0x1>
 666:	20 93 60 01 	sts	0x0160, r18	; 0x800160 <initialized>
 66a:	20 91 53 01 	lds	r18, 0x0153	; 0x800153 <freeQ>
 66e:	30 91 54 01 	lds	r19, 0x0154	; 0x800154 <freeQ+0x1>
 672:	3a 83       	std	Y+2, r19	; 0x02
 674:	29 83       	std	Y+1, r18	; 0x01
 676:	23 2b       	or	r18, r19
 678:	e1 f0       	breq	.+56     	; 0x6b2 <spawn+0xc6>
 67a:	a9 81       	ldd	r26, Y+1	; 0x01
 67c:	ba 81       	ldd	r27, Y+2	; 0x02
 67e:	14 96       	adiw	r26, 0x04	; 4
 680:	4d 91       	ld	r20, X+
 682:	5c 91       	ld	r21, X
 684:	15 97       	sbiw	r26, 0x05	; 5
 686:	50 93 54 01 	sts	0x0154, r21	; 0x800154 <freeQ+0x1>
 68a:	40 93 53 01 	sts	0x0153, r20	; 0x800153 <freeQ>
 68e:	11 96       	adiw	r26, 0x01	; 1
 690:	9c 93       	st	X, r25
 692:	8e 93       	st	-X, r24
 694:	13 96       	adiw	r26, 0x03	; 3
 696:	7c 93       	st	X, r23
 698:	6e 93       	st	-X, r22
 69a:	12 97       	sbiw	r26, 0x02	; 2
 69c:	15 96       	adiw	r26, 0x05	; 5
 69e:	1c 92       	st	X, r1
 6a0:	1e 92       	st	-X, r1
 6a2:	14 97       	sbiw	r26, 0x04	; 4
 6a4:	cd 01       	movw	r24, r26
 6a6:	06 96       	adiw	r24, 0x06	; 6
 6a8:	0e 94 7d 04 	call	0x8fa	; 0x8fa <setjmp>
 6ac:	01 97       	sbiw	r24, 0x01	; 1
 6ae:	79 f5       	brne	.+94     	; 0x70e <spawn+0x122>
 6b0:	01 c0       	rjmp	.+2      	; 0x6b4 <spawn+0xc8>
 6b2:	ff cf       	rjmp	.-2      	; 0x6b2 <spawn+0xc6>
 6b4:	78 94       	sei
 6b6:	a0 91 51 01 	lds	r26, 0x0151	; 0x800151 <current>
 6ba:	b0 91 52 01 	lds	r27, 0x0152	; 0x800152 <current+0x1>
 6be:	ed 91       	ld	r30, X+
 6c0:	fc 91       	ld	r31, X
 6c2:	11 97       	sbiw	r26, 0x01	; 1
 6c4:	12 96       	adiw	r26, 0x02	; 2
 6c6:	8d 91       	ld	r24, X+
 6c8:	9c 91       	ld	r25, X
 6ca:	13 97       	sbiw	r26, 0x03	; 3
 6cc:	09 95       	icall
 6ce:	f8 94       	cli
 6d0:	e0 91 51 01 	lds	r30, 0x0151	; 0x800151 <current>
 6d4:	f0 91 52 01 	lds	r31, 0x0152	; 0x800152 <current+0x1>
 6d8:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <freeQ>
 6dc:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <freeQ+0x1>
 6e0:	95 83       	std	Z+5, r25	; 0x05
 6e2:	84 83       	std	Z+4, r24	; 0x04
 6e4:	f0 93 54 01 	sts	0x0154, r31	; 0x800154 <freeQ+0x1>
 6e8:	e0 93 53 01 	sts	0x0153, r30	; 0x800153 <freeQ>
 6ec:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <readyQ>
 6f0:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <readyQ+0x1>
 6f4:	00 97       	sbiw	r24, 0x00	; 0
 6f6:	51 f0       	breq	.+20     	; 0x70c <spawn+0x120>
 6f8:	fc 01       	movw	r30, r24
 6fa:	24 81       	ldd	r18, Z+4	; 0x04
 6fc:	35 81       	ldd	r19, Z+5	; 0x05
 6fe:	30 93 63 01 	sts	0x0163, r19	; 0x800163 <readyQ+0x1>
 702:	20 93 62 01 	sts	0x0162, r18	; 0x800162 <readyQ>
 706:	0e 94 d6 02 	call	0x5ac	; 0x5ac <dispatch>
 70a:	01 c0       	rjmp	.+2      	; 0x70e <spawn+0x122>
 70c:	ff cf       	rjmp	.-2      	; 0x70c <spawn+0x120>
 70e:	e9 81       	ldd	r30, Y+1	; 0x01
 710:	fa 81       	ldd	r31, Y+2	; 0x02
 712:	36 96       	adiw	r30, 0x06	; 6
 714:	89 81       	ldd	r24, Y+1	; 0x01
 716:	9a 81       	ldd	r25, Y+2	; 0x02
 718:	87 59       	subi	r24, 0x97	; 151
 71a:	9f 4f       	sbci	r25, 0xFF	; 255
 71c:	91 8b       	std	Z+17, r25	; 0x11
 71e:	80 8b       	std	Z+16, r24	; 0x10
 720:	93 8b       	std	Z+19, r25	; 0x13
 722:	82 8b       	std	Z+18, r24	; 0x12
 724:	e0 91 51 01 	lds	r30, 0x0151	; 0x800151 <current>
 728:	f0 91 52 01 	lds	r31, 0x0152	; 0x800152 <current+0x1>
 72c:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <readyQ>
 730:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <readyQ+0x1>
 734:	95 83       	std	Z+5, r25	; 0x05
 736:	84 83       	std	Z+4, r24	; 0x04
 738:	a9 81       	ldd	r26, Y+1	; 0x01
 73a:	ba 81       	ldd	r27, Y+2	; 0x02
 73c:	15 96       	adiw	r26, 0x05	; 5
 73e:	fc 93       	st	X, r31
 740:	ee 93       	st	-X, r30
 742:	14 97       	sbiw	r26, 0x04	; 4
 744:	b0 93 63 01 	sts	0x0163, r27	; 0x800163 <readyQ+0x1>
 748:	a0 93 62 01 	sts	0x0162, r26	; 0x800162 <readyQ>
 74c:	10 97       	sbiw	r26, 0x00	; 0
 74e:	09 f4       	brne	.+2      	; 0x752 <spawn+0x166>
 750:	ff cf       	rjmp	.-2      	; 0x750 <spawn+0x164>
 752:	14 96       	adiw	r26, 0x04	; 4
 754:	8d 91       	ld	r24, X+
 756:	9c 91       	ld	r25, X
 758:	15 97       	sbiw	r26, 0x05	; 5
 75a:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <readyQ+0x1>
 75e:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <readyQ>
 762:	89 81       	ldd	r24, Y+1	; 0x01
 764:	9a 81       	ldd	r25, Y+2	; 0x02
 766:	0e 94 d6 02 	call	0x5ac	; 0x5ac <dispatch>
 76a:	78 94       	sei
 76c:	0f 90       	pop	r0
 76e:	0f 90       	pop	r0
 770:	df 91       	pop	r29
 772:	cf 91       	pop	r28
 774:	08 95       	ret

00000776 <lock>:

void lock(mutex *m) {
 776:	fc 01       	movw	r30, r24
    DISABLE();
 778:	f8 94       	cli
    if(m->locked){
 77a:	80 81       	ld	r24, Z
 77c:	91 81       	ldd	r25, Z+1	; 0x01
 77e:	89 2b       	or	r24, r25
 780:	e9 f0       	breq	.+58     	; 0x7bc <lock+0x46>
        enqueue(current, &(m->waitQ));
 782:	a0 91 51 01 	lds	r26, 0x0151	; 0x800151 <current>
 786:	b0 91 52 01 	lds	r27, 0x0152	; 0x800152 <current+0x1>
    
    initialized = 1;
}

static void enqueue(thread p, thread *queue) {
    p->next = *queue;
 78a:	82 81       	ldd	r24, Z+2	; 0x02
 78c:	93 81       	ldd	r25, Z+3	; 0x03
 78e:	15 96       	adiw	r26, 0x05	; 5
 790:	9c 93       	st	X, r25
 792:	8e 93       	st	-X, r24
 794:	14 97       	sbiw	r26, 0x04	; 4
    *queue = p;
 796:	b3 83       	std	Z+3, r27	; 0x03
 798:	a2 83       	std	Z+2, r26	; 0x02
        q->next = p;
    }*/
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 79a:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <readyQ>
 79e:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <readyQ+0x1>
    if (*queue) {
 7a2:	00 97       	sbiw	r24, 0x00	; 0
 7a4:	51 f0       	breq	.+20     	; 0x7ba <lock+0x44>
        *queue = (*queue)->next;
 7a6:	fc 01       	movw	r30, r24
 7a8:	24 81       	ldd	r18, Z+4	; 0x04
 7aa:	35 81       	ldd	r19, Z+5	; 0x05
 7ac:	30 93 63 01 	sts	0x0163, r19	; 0x800163 <readyQ+0x1>
 7b0:	20 93 62 01 	sts	0x0162, r18	; 0x800162 <readyQ>

void lock(mutex *m) {
    DISABLE();
    if(m->locked){
        enqueue(current, &(m->waitQ));
        dispatch(dequeue(&readyQ));
 7b4:	0e 94 d6 02 	call	0x5ac	; 0x5ac <dispatch>
 7b8:	05 c0       	rjmp	.+10     	; 0x7c4 <lock+0x4e>
 7ba:	ff cf       	rjmp	.-2      	; 0x7ba <lock+0x44>
    }else{
        m->locked = 1;
 7bc:	81 e0       	ldi	r24, 0x01	; 1
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	91 83       	std	Z+1, r25	; 0x01
 7c2:	80 83       	st	Z, r24
    }
    ENABLE();
 7c4:	78 94       	sei
 7c6:	08 95       	ret

000007c8 <unlock>:
}

void unlock(mutex *m) {
 7c8:	fc 01       	movw	r30, r24
    DISABLE();
 7ca:	f8 94       	cli
    if((m->waitQ) == NULL){
 7cc:	82 81       	ldd	r24, Z+2	; 0x02
 7ce:	93 81       	ldd	r25, Z+3	; 0x03
 7d0:	89 2b       	or	r24, r25
 7d2:	19 f4       	brne	.+6      	; 0x7da <unlock+0x12>
        m->locked = 0;
 7d4:	11 82       	std	Z+1, r1	; 0x01
 7d6:	10 82       	st	Z, r1
 7d8:	1f c0       	rjmp	.+62     	; 0x818 <unlock+0x50>
    }else{
        enqueue(current, &readyQ);
 7da:	a0 91 51 01 	lds	r26, 0x0151	; 0x800151 <current>
 7de:	b0 91 52 01 	lds	r27, 0x0152	; 0x800152 <current+0x1>
    
    initialized = 1;
}

static void enqueue(thread p, thread *queue) {
    p->next = *queue;
 7e2:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <readyQ>
 7e6:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <readyQ+0x1>
 7ea:	15 96       	adiw	r26, 0x05	; 5
 7ec:	9c 93       	st	X, r25
 7ee:	8e 93       	st	-X, r24
 7f0:	14 97       	sbiw	r26, 0x04	; 4
    *queue = p;
 7f2:	b0 93 63 01 	sts	0x0163, r27	; 0x800163 <readyQ+0x1>
 7f6:	a0 93 62 01 	sts	0x0162, r26	; 0x800162 <readyQ>
        q->next = p;
    }*/
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 7fa:	82 81       	ldd	r24, Z+2	; 0x02
 7fc:	93 81       	ldd	r25, Z+3	; 0x03
    if (*queue) {
 7fe:	00 97       	sbiw	r24, 0x00	; 0
 800:	51 f0       	breq	.+20     	; 0x816 <unlock+0x4e>
        *queue = (*queue)->next;
 802:	dc 01       	movw	r26, r24
 804:	14 96       	adiw	r26, 0x04	; 4
 806:	2d 91       	ld	r18, X+
 808:	3c 91       	ld	r19, X
 80a:	15 97       	sbiw	r26, 0x05	; 5
 80c:	33 83       	std	Z+3, r19	; 0x03
 80e:	22 83       	std	Z+2, r18	; 0x02
    DISABLE();
    if((m->waitQ) == NULL){
        m->locked = 0;
    }else{
        enqueue(current, &readyQ);
        dispatch(dequeue(&(m->waitQ)));
 810:	0e 94 d6 02 	call	0x5ac	; 0x5ac <dispatch>
 814:	01 c0       	rjmp	.+2      	; 0x818 <unlock+0x50>
 816:	ff cf       	rjmp	.-2      	; 0x816 <unlock+0x4e>
    }
    ENABLE();
 818:	78 94       	sei
 81a:	08 95       	ret

0000081c <__divmodhi4>:
 81c:	97 fb       	bst	r25, 7
 81e:	07 2e       	mov	r0, r23
 820:	16 f4       	brtc	.+4      	; 0x826 <__divmodhi4+0xa>
 822:	00 94       	com	r0
 824:	07 d0       	rcall	.+14     	; 0x834 <__divmodhi4_neg1>
 826:	77 fd       	sbrc	r23, 7
 828:	09 d0       	rcall	.+18     	; 0x83c <__divmodhi4_neg2>
 82a:	0e 94 47 04 	call	0x88e	; 0x88e <__udivmodhi4>
 82e:	07 fc       	sbrc	r0, 7
 830:	05 d0       	rcall	.+10     	; 0x83c <__divmodhi4_neg2>
 832:	3e f4       	brtc	.+14     	; 0x842 <__divmodhi4_exit>

00000834 <__divmodhi4_neg1>:
 834:	90 95       	com	r25
 836:	81 95       	neg	r24
 838:	9f 4f       	sbci	r25, 0xFF	; 255
 83a:	08 95       	ret

0000083c <__divmodhi4_neg2>:
 83c:	70 95       	com	r23
 83e:	61 95       	neg	r22
 840:	7f 4f       	sbci	r23, 0xFF	; 255

00000842 <__divmodhi4_exit>:
 842:	08 95       	ret

00000844 <__divmodsi4>:
 844:	05 2e       	mov	r0, r21
 846:	97 fb       	bst	r25, 7
 848:	1e f4       	brtc	.+6      	; 0x850 <__divmodsi4+0xc>
 84a:	00 94       	com	r0
 84c:	0e 94 39 04 	call	0x872	; 0x872 <__negsi2>
 850:	57 fd       	sbrc	r21, 7
 852:	07 d0       	rcall	.+14     	; 0x862 <__divmodsi4_neg2>
 854:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__udivmodsi4>
 858:	07 fc       	sbrc	r0, 7
 85a:	03 d0       	rcall	.+6      	; 0x862 <__divmodsi4_neg2>
 85c:	4e f4       	brtc	.+18     	; 0x870 <__divmodsi4_exit>
 85e:	0c 94 39 04 	jmp	0x872	; 0x872 <__negsi2>

00000862 <__divmodsi4_neg2>:
 862:	50 95       	com	r21
 864:	40 95       	com	r20
 866:	30 95       	com	r19
 868:	21 95       	neg	r18
 86a:	3f 4f       	sbci	r19, 0xFF	; 255
 86c:	4f 4f       	sbci	r20, 0xFF	; 255
 86e:	5f 4f       	sbci	r21, 0xFF	; 255

00000870 <__divmodsi4_exit>:
 870:	08 95       	ret

00000872 <__negsi2>:
 872:	90 95       	com	r25
 874:	80 95       	com	r24
 876:	70 95       	com	r23
 878:	61 95       	neg	r22
 87a:	7f 4f       	sbci	r23, 0xFF	; 255
 87c:	8f 4f       	sbci	r24, 0xFF	; 255
 87e:	9f 4f       	sbci	r25, 0xFF	; 255
 880:	08 95       	ret

00000882 <__tablejump2__>:
 882:	ee 0f       	add	r30, r30
 884:	ff 1f       	adc	r31, r31
 886:	05 90       	lpm	r0, Z+
 888:	f4 91       	lpm	r31, Z
 88a:	e0 2d       	mov	r30, r0
 88c:	09 94       	ijmp

0000088e <__udivmodhi4>:
 88e:	aa 1b       	sub	r26, r26
 890:	bb 1b       	sub	r27, r27
 892:	51 e1       	ldi	r21, 0x11	; 17
 894:	07 c0       	rjmp	.+14     	; 0x8a4 <__udivmodhi4_ep>

00000896 <__udivmodhi4_loop>:
 896:	aa 1f       	adc	r26, r26
 898:	bb 1f       	adc	r27, r27
 89a:	a6 17       	cp	r26, r22
 89c:	b7 07       	cpc	r27, r23
 89e:	10 f0       	brcs	.+4      	; 0x8a4 <__udivmodhi4_ep>
 8a0:	a6 1b       	sub	r26, r22
 8a2:	b7 0b       	sbc	r27, r23

000008a4 <__udivmodhi4_ep>:
 8a4:	88 1f       	adc	r24, r24
 8a6:	99 1f       	adc	r25, r25
 8a8:	5a 95       	dec	r21
 8aa:	a9 f7       	brne	.-22     	; 0x896 <__udivmodhi4_loop>
 8ac:	80 95       	com	r24
 8ae:	90 95       	com	r25
 8b0:	bc 01       	movw	r22, r24
 8b2:	cd 01       	movw	r24, r26
 8b4:	08 95       	ret

000008b6 <__udivmodsi4>:
 8b6:	a1 e2       	ldi	r26, 0x21	; 33
 8b8:	1a 2e       	mov	r1, r26
 8ba:	aa 1b       	sub	r26, r26
 8bc:	bb 1b       	sub	r27, r27
 8be:	fd 01       	movw	r30, r26
 8c0:	0d c0       	rjmp	.+26     	; 0x8dc <__udivmodsi4_ep>

000008c2 <__udivmodsi4_loop>:
 8c2:	aa 1f       	adc	r26, r26
 8c4:	bb 1f       	adc	r27, r27
 8c6:	ee 1f       	adc	r30, r30
 8c8:	ff 1f       	adc	r31, r31
 8ca:	a2 17       	cp	r26, r18
 8cc:	b3 07       	cpc	r27, r19
 8ce:	e4 07       	cpc	r30, r20
 8d0:	f5 07       	cpc	r31, r21
 8d2:	20 f0       	brcs	.+8      	; 0x8dc <__udivmodsi4_ep>
 8d4:	a2 1b       	sub	r26, r18
 8d6:	b3 0b       	sbc	r27, r19
 8d8:	e4 0b       	sbc	r30, r20
 8da:	f5 0b       	sbc	r31, r21

000008dc <__udivmodsi4_ep>:
 8dc:	66 1f       	adc	r22, r22
 8de:	77 1f       	adc	r23, r23
 8e0:	88 1f       	adc	r24, r24
 8e2:	99 1f       	adc	r25, r25
 8e4:	1a 94       	dec	r1
 8e6:	69 f7       	brne	.-38     	; 0x8c2 <__udivmodsi4_loop>
 8e8:	60 95       	com	r22
 8ea:	70 95       	com	r23
 8ec:	80 95       	com	r24
 8ee:	90 95       	com	r25
 8f0:	9b 01       	movw	r18, r22
 8f2:	ac 01       	movw	r20, r24
 8f4:	bd 01       	movw	r22, r26
 8f6:	cf 01       	movw	r24, r30
 8f8:	08 95       	ret

000008fa <setjmp>:
 8fa:	dc 01       	movw	r26, r24
 8fc:	2d 92       	st	X+, r2
 8fe:	3d 92       	st	X+, r3
 900:	4d 92       	st	X+, r4
 902:	5d 92       	st	X+, r5
 904:	6d 92       	st	X+, r6
 906:	7d 92       	st	X+, r7
 908:	8d 92       	st	X+, r8
 90a:	9d 92       	st	X+, r9
 90c:	ad 92       	st	X+, r10
 90e:	bd 92       	st	X+, r11
 910:	cd 92       	st	X+, r12
 912:	dd 92       	st	X+, r13
 914:	ed 92       	st	X+, r14
 916:	fd 92       	st	X+, r15
 918:	0d 93       	st	X+, r16
 91a:	1d 93       	st	X+, r17
 91c:	cd 93       	st	X+, r28
 91e:	dd 93       	st	X+, r29
 920:	ff 91       	pop	r31
 922:	ef 91       	pop	r30
 924:	8d b7       	in	r24, 0x3d	; 61
 926:	8d 93       	st	X+, r24
 928:	8e b7       	in	r24, 0x3e	; 62
 92a:	8d 93       	st	X+, r24
 92c:	8f b7       	in	r24, 0x3f	; 63
 92e:	8d 93       	st	X+, r24
 930:	ed 93       	st	X+, r30
 932:	fd 93       	st	X+, r31
 934:	88 27       	eor	r24, r24
 936:	99 27       	eor	r25, r25
 938:	09 94       	ijmp

0000093a <longjmp>:
 93a:	dc 01       	movw	r26, r24
 93c:	cb 01       	movw	r24, r22
 93e:	81 30       	cpi	r24, 0x01	; 1
 940:	91 05       	cpc	r25, r1
 942:	81 1d       	adc	r24, r1
 944:	2d 90       	ld	r2, X+
 946:	3d 90       	ld	r3, X+
 948:	4d 90       	ld	r4, X+
 94a:	5d 90       	ld	r5, X+
 94c:	6d 90       	ld	r6, X+
 94e:	7d 90       	ld	r7, X+
 950:	8d 90       	ld	r8, X+
 952:	9d 90       	ld	r9, X+
 954:	ad 90       	ld	r10, X+
 956:	bd 90       	ld	r11, X+
 958:	cd 90       	ld	r12, X+
 95a:	dd 90       	ld	r13, X+
 95c:	ed 90       	ld	r14, X+
 95e:	fd 90       	ld	r15, X+
 960:	0d 91       	ld	r16, X+
 962:	1d 91       	ld	r17, X+
 964:	cd 91       	ld	r28, X+
 966:	dd 91       	ld	r29, X+
 968:	ed 91       	ld	r30, X+
 96a:	fd 91       	ld	r31, X+
 96c:	0d 90       	ld	r0, X+
 96e:	f8 94       	cli
 970:	fe bf       	out	0x3e, r31	; 62
 972:	0f be       	out	0x3f, r0	; 63
 974:	ed bf       	out	0x3d, r30	; 61
 976:	ed 91       	ld	r30, X+
 978:	fd 91       	ld	r31, X+
 97a:	09 94       	ijmp

0000097c <_exit>:
 97c:	f8 94       	cli

0000097e <__stop_program>:
 97e:	ff cf       	rjmp	.-2      	; 0x97e <__stop_program>
