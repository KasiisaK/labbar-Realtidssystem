
Part3.2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800100  00000816  000008aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000816  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000023b  00800154  00800154  000008fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000930  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000970  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001469  00000000  00000000  00000a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b56  00000000  00000000  00001ea9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000084a  00000000  00000000  000029ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000284  00000000  00000000  0000324c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000657  00000000  00000000  000034d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c0e  00000000  00000000  00003b27  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00004735  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 16 02 	jmp	0x42c	; 0x42c <__vector_3>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__vector_7>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	b8 00       	.word	0x00b8	; ????
  5e:	9a 00       	.word	0x009a	; ????
  60:	9d 00       	.word	0x009d	; ????
  62:	a0 00       	.word	0x00a0	; ????
  64:	a3 00       	.word	0x00a3	; ????
  66:	a6 00       	.word	0x00a6	; ????
  68:	a9 00       	.word	0x00a9	; ????
  6a:	ac 00       	.word	0x00ac	; ????
  6c:	af 00       	.word	0x00af	; ????
  6e:	b2 00       	.word	0x00b2	; ????

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e6 e1       	ldi	r30, 0x16	; 22
  84:	f8 e0       	ldi	r31, 0x08	; 8
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a4 35       	cpi	r26, 0x54	; 84
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	23 e0       	ldi	r18, 0x03	; 3
  94:	a4 e5       	ldi	r26, 0x54	; 84
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	af 38       	cpi	r26, 0x8F	; 143
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 49 02 	call	0x492	; 0x492 <main>
  a6:	0c 94 09 04 	jmp	0x812	; 0x812 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <blink>:
void button() {
	static uint8_t current_segment = LCD_SEGMENT1;

	while (true) {
		lock(&button_mutex);
		toggle_lcd(&current_segment);
  ae:	8a e6       	ldi	r24, 0x6A	; 106
  b0:	91 e0       	ldi	r25, 0x01	; 1
  b2:	0e 94 2e 03 	call	0x65c	; 0x65c <lock>
  b6:	ec ef       	ldi	r30, 0xFC	; 252
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	92 e0       	ldi	r25, 0x02	; 2
  bc:	80 81       	ld	r24, Z
  be:	89 27       	eor	r24, r25
  c0:	80 83       	st	Z, r24
  c2:	fc cf       	rjmp	.-8      	; 0xbc <blink+0xe>

000000c4 <init>:
  c4:	e1 e6       	ldi	r30, 0x61	; 97
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 e8       	ldi	r24, 0x80	; 128
  ca:	80 83       	st	Z, r24
  cc:	10 82       	st	Z, r1
  ce:	e1 e8       	ldi	r30, 0x81	; 129
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	88 60       	ori	r24, 0x08	; 8
  d6:	80 83       	st	Z, r24
  d8:	81 e4       	ldi	r24, 0x41	; 65
  da:	9f e0       	ldi	r25, 0x0F	; 15
  dc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
  e0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
  e4:	80 81       	ld	r24, Z
  e6:	85 60       	ori	r24, 0x05	; 5
  e8:	80 83       	st	Z, r24
  ea:	ef e6       	ldi	r30, 0x6F	; 111
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	82 60       	ori	r24, 0x02	; 2
  f2:	80 83       	st	Z, r24
  f4:	27 98       	cbi	0x04, 7	; 4
  f6:	2f 9a       	sbi	0x05, 7	; 5
  f8:	ec e6       	ldi	r30, 0x6C	; 108
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	80 68       	ori	r24, 0x80	; 128
 100:	80 83       	st	Z, r24
 102:	ef 9a       	sbi	0x1d, 7	; 29
 104:	08 95       	ret

00000106 <LCD_init>:
 106:	8f e0       	ldi	r24, 0x0F	; 15
 108:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__DATA_REGION_ORIGIN__+0x87>
 10c:	87 eb       	ldi	r24, 0xB7	; 183
 10e:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
 112:	87 e0       	ldi	r24, 0x07	; 7
 114:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__DATA_REGION_ORIGIN__+0x86>
 118:	80 ec       	ldi	r24, 0xC0	; 192
 11a:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
 11e:	08 95       	ret

00000120 <getSegmentForChar>:
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	fc 01       	movw	r30, r24
 124:	f0 97       	sbiw	r30, 0x30	; 48
 126:	ea 30       	cpi	r30, 0x0A	; 10
 128:	f1 05       	cpc	r31, r1
 12a:	f8 f4       	brcc	.+62     	; 0x16a <getSegmentForChar+0x4a>
 12c:	e2 5d       	subi	r30, 0xD2	; 210
 12e:	ff 4f       	sbci	r31, 0xFF	; 255
 130:	0c 94 a0 03 	jmp	0x740	; 0x740 <__tablejump2__>
 134:	80 e4       	ldi	r24, 0x40	; 64
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	08 95       	ret
 13a:	88 e3       	ldi	r24, 0x38	; 56
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	08 95       	ret
 140:	80 e3       	ldi	r24, 0x30	; 48
 142:	91 e0       	ldi	r25, 0x01	; 1
 144:	08 95       	ret
 146:	88 e2       	ldi	r24, 0x28	; 40
 148:	91 e0       	ldi	r25, 0x01	; 1
 14a:	08 95       	ret
 14c:	80 e2       	ldi	r24, 0x20	; 32
 14e:	91 e0       	ldi	r25, 0x01	; 1
 150:	08 95       	ret
 152:	88 e1       	ldi	r24, 0x18	; 24
 154:	91 e0       	ldi	r25, 0x01	; 1
 156:	08 95       	ret
 158:	80 e1       	ldi	r24, 0x10	; 16
 15a:	91 e0       	ldi	r25, 0x01	; 1
 15c:	08 95       	ret
 15e:	88 e0       	ldi	r24, 0x08	; 8
 160:	91 e0       	ldi	r25, 0x01	; 1
 162:	08 95       	ret
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	91 e0       	ldi	r25, 0x01	; 1
 168:	08 95       	ret
 16a:	84 e5       	ldi	r24, 0x54	; 84
 16c:	91 e0       	ldi	r25, 0x01	; 1
 16e:	08 95       	ret
 170:	88 e4       	ldi	r24, 0x48	; 72
 172:	91 e0       	ldi	r25, 0x01	; 1
 174:	08 95       	ret

00000176 <writeChar>:
 176:	cf 93       	push	r28
 178:	65 30       	cpi	r22, 0x05	; 5
 17a:	08 f0       	brcs	.+2      	; 0x17e <writeChar+0x8>
 17c:	e4 c0       	rjmp	.+456    	; 0x346 <writeChar+0x1d0>
 17e:	c6 2f       	mov	r28, r22
 180:	0e 94 90 00 	call	0x120	; 0x120 <getSegmentForChar>
 184:	fc 01       	movw	r30, r24
 186:	c2 30       	cpi	r28, 0x02	; 2
 188:	09 f4       	brne	.+2      	; 0x18c <writeChar+0x16>
 18a:	67 c0       	rjmp	.+206    	; 0x25a <writeChar+0xe4>
 18c:	28 f4       	brcc	.+10     	; 0x198 <writeChar+0x22>
 18e:	cc 23       	and	r28, r28
 190:	51 f0       	breq	.+20     	; 0x1a6 <writeChar+0x30>
 192:	c1 30       	cpi	r28, 0x01	; 1
 194:	29 f1       	breq	.+74     	; 0x1e0 <writeChar+0x6a>
 196:	d7 c0       	rjmp	.+430    	; 0x346 <writeChar+0x1d0>
 198:	c3 30       	cpi	r28, 0x03	; 3
 19a:	09 f4       	brne	.+2      	; 0x19e <writeChar+0x28>
 19c:	7b c0       	rjmp	.+246    	; 0x294 <writeChar+0x11e>
 19e:	c4 30       	cpi	r28, 0x04	; 4
 1a0:	09 f4       	brne	.+2      	; 0x1a4 <writeChar+0x2e>
 1a2:	b5 c0       	rjmp	.+362    	; 0x30e <writeChar+0x198>
 1a4:	d0 c0       	rjmp	.+416    	; 0x346 <writeChar+0x1d0>
 1a6:	ac ee       	ldi	r26, 0xEC	; 236
 1a8:	b0 e0       	ldi	r27, 0x00	; 0
 1aa:	8c 91       	ld	r24, X
 1ac:	80 7f       	andi	r24, 0xF0	; 240
 1ae:	90 81       	ld	r25, Z
 1b0:	89 2b       	or	r24, r25
 1b2:	8c 93       	st	X, r24
 1b4:	a1 ef       	ldi	r26, 0xF1	; 241
 1b6:	b0 e0       	ldi	r27, 0x00	; 0
 1b8:	8c 91       	ld	r24, X
 1ba:	80 7f       	andi	r24, 0xF0	; 240
 1bc:	92 81       	ldd	r25, Z+2	; 0x02
 1be:	89 2b       	or	r24, r25
 1c0:	8c 93       	st	X, r24
 1c2:	a6 ef       	ldi	r26, 0xF6	; 246
 1c4:	b0 e0       	ldi	r27, 0x00	; 0
 1c6:	8c 91       	ld	r24, X
 1c8:	80 7f       	andi	r24, 0xF0	; 240
 1ca:	94 81       	ldd	r25, Z+4	; 0x04
 1cc:	89 2b       	or	r24, r25
 1ce:	8c 93       	st	X, r24
 1d0:	ab ef       	ldi	r26, 0xFB	; 251
 1d2:	b0 e0       	ldi	r27, 0x00	; 0
 1d4:	8c 91       	ld	r24, X
 1d6:	80 7f       	andi	r24, 0xF0	; 240
 1d8:	96 81       	ldd	r25, Z+6	; 0x06
 1da:	89 2b       	or	r24, r25
 1dc:	8c 93       	st	X, r24
 1de:	b3 c0       	rjmp	.+358    	; 0x346 <writeChar+0x1d0>
 1e0:	ac ee       	ldi	r26, 0xEC	; 236
 1e2:	b0 e0       	ldi	r27, 0x00	; 0
 1e4:	2c 91       	ld	r18, X
 1e6:	80 81       	ld	r24, Z
 1e8:	91 81       	ldd	r25, Z+1	; 0x01
 1ea:	82 95       	swap	r24
 1ec:	92 95       	swap	r25
 1ee:	90 7f       	andi	r25, 0xF0	; 240
 1f0:	98 27       	eor	r25, r24
 1f2:	80 7f       	andi	r24, 0xF0	; 240
 1f4:	98 27       	eor	r25, r24
 1f6:	92 2f       	mov	r25, r18
 1f8:	9f 70       	andi	r25, 0x0F	; 15
 1fa:	89 2b       	or	r24, r25
 1fc:	8c 93       	st	X, r24
 1fe:	a1 ef       	ldi	r26, 0xF1	; 241
 200:	b0 e0       	ldi	r27, 0x00	; 0
 202:	2c 91       	ld	r18, X
 204:	82 81       	ldd	r24, Z+2	; 0x02
 206:	93 81       	ldd	r25, Z+3	; 0x03
 208:	82 95       	swap	r24
 20a:	92 95       	swap	r25
 20c:	90 7f       	andi	r25, 0xF0	; 240
 20e:	98 27       	eor	r25, r24
 210:	80 7f       	andi	r24, 0xF0	; 240
 212:	98 27       	eor	r25, r24
 214:	92 2f       	mov	r25, r18
 216:	9f 70       	andi	r25, 0x0F	; 15
 218:	89 2b       	or	r24, r25
 21a:	8c 93       	st	X, r24
 21c:	a6 ef       	ldi	r26, 0xF6	; 246
 21e:	b0 e0       	ldi	r27, 0x00	; 0
 220:	2c 91       	ld	r18, X
 222:	84 81       	ldd	r24, Z+4	; 0x04
 224:	95 81       	ldd	r25, Z+5	; 0x05
 226:	82 95       	swap	r24
 228:	92 95       	swap	r25
 22a:	90 7f       	andi	r25, 0xF0	; 240
 22c:	98 27       	eor	r25, r24
 22e:	80 7f       	andi	r24, 0xF0	; 240
 230:	98 27       	eor	r25, r24
 232:	92 2f       	mov	r25, r18
 234:	9f 70       	andi	r25, 0x0F	; 15
 236:	89 2b       	or	r24, r25
 238:	8c 93       	st	X, r24
 23a:	ab ef       	ldi	r26, 0xFB	; 251
 23c:	b0 e0       	ldi	r27, 0x00	; 0
 23e:	2c 91       	ld	r18, X
 240:	86 81       	ldd	r24, Z+6	; 0x06
 242:	97 81       	ldd	r25, Z+7	; 0x07
 244:	82 95       	swap	r24
 246:	92 95       	swap	r25
 248:	90 7f       	andi	r25, 0xF0	; 240
 24a:	98 27       	eor	r25, r24
 24c:	80 7f       	andi	r24, 0xF0	; 240
 24e:	98 27       	eor	r25, r24
 250:	92 2f       	mov	r25, r18
 252:	9f 70       	andi	r25, 0x0F	; 15
 254:	89 2b       	or	r24, r25
 256:	8c 93       	st	X, r24
 258:	76 c0       	rjmp	.+236    	; 0x346 <writeChar+0x1d0>
 25a:	ad ee       	ldi	r26, 0xED	; 237
 25c:	b0 e0       	ldi	r27, 0x00	; 0
 25e:	8c 91       	ld	r24, X
 260:	80 7f       	andi	r24, 0xF0	; 240
 262:	90 81       	ld	r25, Z
 264:	89 2b       	or	r24, r25
 266:	8c 93       	st	X, r24
 268:	a2 ef       	ldi	r26, 0xF2	; 242
 26a:	b0 e0       	ldi	r27, 0x00	; 0
 26c:	8c 91       	ld	r24, X
 26e:	80 7f       	andi	r24, 0xF0	; 240
 270:	92 81       	ldd	r25, Z+2	; 0x02
 272:	89 2b       	or	r24, r25
 274:	8c 93       	st	X, r24
 276:	a7 ef       	ldi	r26, 0xF7	; 247
 278:	b0 e0       	ldi	r27, 0x00	; 0
 27a:	8c 91       	ld	r24, X
 27c:	80 7f       	andi	r24, 0xF0	; 240
 27e:	94 81       	ldd	r25, Z+4	; 0x04
 280:	89 2b       	or	r24, r25
 282:	8c 93       	st	X, r24
 284:	ac ef       	ldi	r26, 0xFC	; 252
 286:	b0 e0       	ldi	r27, 0x00	; 0
 288:	8c 91       	ld	r24, X
 28a:	80 7f       	andi	r24, 0xF0	; 240
 28c:	96 81       	ldd	r25, Z+6	; 0x06
 28e:	89 2b       	or	r24, r25
 290:	8c 93       	st	X, r24
 292:	59 c0       	rjmp	.+178    	; 0x346 <writeChar+0x1d0>
 294:	ad ee       	ldi	r26, 0xED	; 237
 296:	b0 e0       	ldi	r27, 0x00	; 0
 298:	2c 91       	ld	r18, X
 29a:	80 81       	ld	r24, Z
 29c:	91 81       	ldd	r25, Z+1	; 0x01
 29e:	82 95       	swap	r24
 2a0:	92 95       	swap	r25
 2a2:	90 7f       	andi	r25, 0xF0	; 240
 2a4:	98 27       	eor	r25, r24
 2a6:	80 7f       	andi	r24, 0xF0	; 240
 2a8:	98 27       	eor	r25, r24
 2aa:	92 2f       	mov	r25, r18
 2ac:	9f 70       	andi	r25, 0x0F	; 15
 2ae:	89 2b       	or	r24, r25
 2b0:	8c 93       	st	X, r24
 2b2:	a2 ef       	ldi	r26, 0xF2	; 242
 2b4:	b0 e0       	ldi	r27, 0x00	; 0
 2b6:	2c 91       	ld	r18, X
 2b8:	82 81       	ldd	r24, Z+2	; 0x02
 2ba:	93 81       	ldd	r25, Z+3	; 0x03
 2bc:	82 95       	swap	r24
 2be:	92 95       	swap	r25
 2c0:	90 7f       	andi	r25, 0xF0	; 240
 2c2:	98 27       	eor	r25, r24
 2c4:	80 7f       	andi	r24, 0xF0	; 240
 2c6:	98 27       	eor	r25, r24
 2c8:	92 2f       	mov	r25, r18
 2ca:	9f 70       	andi	r25, 0x0F	; 15
 2cc:	89 2b       	or	r24, r25
 2ce:	8c 93       	st	X, r24
 2d0:	a7 ef       	ldi	r26, 0xF7	; 247
 2d2:	b0 e0       	ldi	r27, 0x00	; 0
 2d4:	2c 91       	ld	r18, X
 2d6:	84 81       	ldd	r24, Z+4	; 0x04
 2d8:	95 81       	ldd	r25, Z+5	; 0x05
 2da:	82 95       	swap	r24
 2dc:	92 95       	swap	r25
 2de:	90 7f       	andi	r25, 0xF0	; 240
 2e0:	98 27       	eor	r25, r24
 2e2:	80 7f       	andi	r24, 0xF0	; 240
 2e4:	98 27       	eor	r25, r24
 2e6:	92 2f       	mov	r25, r18
 2e8:	9f 70       	andi	r25, 0x0F	; 15
 2ea:	89 2b       	or	r24, r25
 2ec:	8c 93       	st	X, r24
 2ee:	ac ef       	ldi	r26, 0xFC	; 252
 2f0:	b0 e0       	ldi	r27, 0x00	; 0
 2f2:	2c 91       	ld	r18, X
 2f4:	86 81       	ldd	r24, Z+6	; 0x06
 2f6:	97 81       	ldd	r25, Z+7	; 0x07
 2f8:	82 95       	swap	r24
 2fa:	92 95       	swap	r25
 2fc:	90 7f       	andi	r25, 0xF0	; 240
 2fe:	98 27       	eor	r25, r24
 300:	80 7f       	andi	r24, 0xF0	; 240
 302:	98 27       	eor	r25, r24
 304:	92 2f       	mov	r25, r18
 306:	9f 70       	andi	r25, 0x0F	; 15
 308:	89 2b       	or	r24, r25
 30a:	8c 93       	st	X, r24
 30c:	1c c0       	rjmp	.+56     	; 0x346 <writeChar+0x1d0>
 30e:	ae ee       	ldi	r26, 0xEE	; 238
 310:	b0 e0       	ldi	r27, 0x00	; 0
 312:	8c 91       	ld	r24, X
 314:	80 7f       	andi	r24, 0xF0	; 240
 316:	90 81       	ld	r25, Z
 318:	89 2b       	or	r24, r25
 31a:	8c 93       	st	X, r24
 31c:	a3 ef       	ldi	r26, 0xF3	; 243
 31e:	b0 e0       	ldi	r27, 0x00	; 0
 320:	8c 91       	ld	r24, X
 322:	80 7f       	andi	r24, 0xF0	; 240
 324:	92 81       	ldd	r25, Z+2	; 0x02
 326:	89 2b       	or	r24, r25
 328:	8c 93       	st	X, r24
 32a:	a8 ef       	ldi	r26, 0xF8	; 248
 32c:	b0 e0       	ldi	r27, 0x00	; 0
 32e:	8c 91       	ld	r24, X
 330:	80 7f       	andi	r24, 0xF0	; 240
 332:	94 81       	ldd	r25, Z+4	; 0x04
 334:	89 2b       	or	r24, r25
 336:	8c 93       	st	X, r24
 338:	ad ef       	ldi	r26, 0xFD	; 253
 33a:	b0 e0       	ldi	r27, 0x00	; 0
 33c:	8c 91       	ld	r24, X
 33e:	80 7f       	andi	r24, 0xF0	; 240
 340:	96 81       	ldd	r25, Z+6	; 0x06
 342:	89 2b       	or	r24, r25
 344:	8c 93       	st	X, r24
 346:	cf 91       	pop	r28
 348:	08 95       	ret

0000034a <printAt>:
 34a:	8f 92       	push	r8
 34c:	9f 92       	push	r9
 34e:	af 92       	push	r10
 350:	bf 92       	push	r11
 352:	cf 92       	push	r12
 354:	df 92       	push	r13
 356:	ef 92       	push	r14
 358:	ff 92       	push	r15
 35a:	cf 93       	push	r28
 35c:	df 93       	push	r29
 35e:	4b 01       	movw	r8, r22
 360:	5c 01       	movw	r10, r24
 362:	ea 01       	movw	r28, r20
 364:	24 e6       	ldi	r18, 0x64	; 100
 366:	30 e0       	ldi	r19, 0x00	; 0
 368:	40 e0       	ldi	r20, 0x00	; 0
 36a:	50 e0       	ldi	r21, 0x00	; 0
 36c:	0e 94 81 03 	call	0x702	; 0x702 <__divmodsi4>
 370:	0f 2e       	mov	r0, r31
 372:	fa e0       	ldi	r31, 0x0A	; 10
 374:	cf 2e       	mov	r12, r31
 376:	d1 2c       	mov	r13, r1
 378:	e1 2c       	mov	r14, r1
 37a:	f1 2c       	mov	r15, r1
 37c:	f0 2d       	mov	r31, r0
 37e:	a7 01       	movw	r20, r14
 380:	96 01       	movw	r18, r12
 382:	0e 94 81 03 	call	0x702	; 0x702 <__divmodsi4>
 386:	6c 2f       	mov	r22, r28
 388:	80 e3       	ldi	r24, 0x30	; 48
 38a:	82 0f       	add	r24, r18
 38c:	0e 94 bb 00 	call	0x176	; 0x176 <writeChar>
 390:	21 96       	adiw	r28, 0x01	; 1
 392:	c5 01       	movw	r24, r10
 394:	b4 01       	movw	r22, r8
 396:	a7 01       	movw	r20, r14
 398:	96 01       	movw	r18, r12
 39a:	0e 94 81 03 	call	0x702	; 0x702 <__divmodsi4>
 39e:	86 2f       	mov	r24, r22
 3a0:	6c 2f       	mov	r22, r28
 3a2:	80 5d       	subi	r24, 0xD0	; 208
 3a4:	0e 94 bb 00 	call	0x176	; 0x176 <writeChar>
 3a8:	df 91       	pop	r29
 3aa:	cf 91       	pop	r28
 3ac:	ff 90       	pop	r15
 3ae:	ef 90       	pop	r14
 3b0:	df 90       	pop	r13
 3b2:	cf 90       	pop	r12
 3b4:	bf 90       	pop	r11
 3b6:	af 90       	pop	r10
 3b8:	9f 90       	pop	r9
 3ba:	8f 90       	pop	r8
 3bc:	08 95       	ret

000003be <keyCounter>:
	}
}

void keyCounter() {
	printAt(keyPresses, 3);
 3be:	60 91 5c 01 	lds	r22, 0x015C	; 0x80015c <keyPresses>
 3c2:	70 91 5d 01 	lds	r23, 0x015D	; 0x80015d <keyPresses+0x1>
 3c6:	07 2e       	mov	r0, r23
 3c8:	00 0c       	add	r0, r0
 3ca:	88 0b       	sbc	r24, r24
 3cc:	99 0b       	sbc	r25, r25
 3ce:	43 e0       	ldi	r20, 0x03	; 3
 3d0:	50 e0       	ldi	r21, 0x00	; 0
 3d2:	0e 94 a5 01 	call	0x34a	; 0x34a <printAt>
 3d6:	08 95       	ret

000003d8 <__vector_7>:
}

// Timer interupt
ISR(TIMER1_COMPA_vect) {
 3d8:	1f 92       	push	r1
 3da:	0f 92       	push	r0
 3dc:	0f b6       	in	r0, 0x3f	; 63
 3de:	0f 92       	push	r0
 3e0:	11 24       	eor	r1, r1
 3e2:	2f 93       	push	r18
 3e4:	3f 93       	push	r19
 3e6:	4f 93       	push	r20
 3e8:	5f 93       	push	r21
 3ea:	6f 93       	push	r22
 3ec:	7f 93       	push	r23
 3ee:	8f 93       	push	r24
 3f0:	9f 93       	push	r25
 3f2:	af 93       	push	r26
 3f4:	bf 93       	push	r27
 3f6:	ef 93       	push	r30
 3f8:	ff 93       	push	r31
	unlock(&blink_mutex);
 3fa:	8a e6       	ldi	r24, 0x6A	; 106
 3fc:	91 e0       	ldi	r25, 0x01	; 1
 3fe:	0e 94 57 03 	call	0x6ae	; 0x6ae <unlock>
	TCNT1 = 0;
 402:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 406:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
}
 40a:	ff 91       	pop	r31
 40c:	ef 91       	pop	r30
 40e:	bf 91       	pop	r27
 410:	af 91       	pop	r26
 412:	9f 91       	pop	r25
 414:	8f 91       	pop	r24
 416:	7f 91       	pop	r23
 418:	6f 91       	pop	r22
 41a:	5f 91       	pop	r21
 41c:	4f 91       	pop	r20
 41e:	3f 91       	pop	r19
 420:	2f 91       	pop	r18
 422:	0f 90       	pop	r0
 424:	0f be       	out	0x3f, r0	; 63
 426:	0f 90       	pop	r0
 428:	1f 90       	pop	r1
 42a:	18 95       	reti

0000042c <__vector_3>:

// Joystick interupt
ISR(PCINT1_vect) {
 42c:	1f 92       	push	r1
 42e:	0f 92       	push	r0
 430:	0f b6       	in	r0, 0x3f	; 63
 432:	0f 92       	push	r0
 434:	11 24       	eor	r1, r1
 436:	2f 93       	push	r18
 438:	3f 93       	push	r19
 43a:	4f 93       	push	r20
 43c:	5f 93       	push	r21
 43e:	6f 93       	push	r22
 440:	7f 93       	push	r23
 442:	8f 93       	push	r24
 444:	9f 93       	push	r25
 446:	af 93       	push	r26
 448:	bf 93       	push	r27
 44a:	ef 93       	push	r30
 44c:	ff 93       	push	r31
	// Check if joystick is pressed (active low, bit 7 of PINB == 0)
	if (!(PINB & (1 << PB7))) {
 44e:	1f 99       	sbic	0x03, 7	; 3
 450:	0f c0       	rjmp	.+30     	; 0x470 <__vector_3+0x44>
		keyPresses++;
 452:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <keyPresses>
 456:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <keyPresses+0x1>
 45a:	01 96       	adiw	r24, 0x01	; 1
 45c:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <keyPresses+0x1>
 460:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <keyPresses>
		keyCounter();
 464:	0e 94 df 01 	call	0x3be	; 0x3be <keyCounter>
		unlock(&button_mutex);			
 468:	86 e6       	ldi	r24, 0x66	; 102
 46a:	91 e0       	ldi	r25, 0x01	; 1
 46c:	0e 94 57 03 	call	0x6ae	; 0x6ae <unlock>
	}
}
 470:	ff 91       	pop	r31
 472:	ef 91       	pop	r30
 474:	bf 91       	pop	r27
 476:	af 91       	pop	r26
 478:	9f 91       	pop	r25
 47a:	8f 91       	pop	r24
 47c:	7f 91       	pop	r23
 47e:	6f 91       	pop	r22
 480:	5f 91       	pop	r21
 482:	4f 91       	pop	r20
 484:	3f 91       	pop	r19
 486:	2f 91       	pop	r18
 488:	0f 90       	pop	r0
 48a:	0f be       	out	0x3f, r0	; 63
 48c:	0f 90       	pop	r0
 48e:	1f 90       	pop	r1
 490:	18 95       	reti

00000492 <main>:


int main(void) {
	cli();
 492:	f8 94       	cli
	init();
 494:	0e 94 62 00 	call	0xc4	; 0xc4 <init>
	LCD_init();
 498:	0e 94 83 00 	call	0x106	; 0x106 <LCD_init>
	sei();
 49c:	78 94       	sei
	
	lock(&blink_mutex);
 49e:	8a e6       	ldi	r24, 0x6A	; 106
 4a0:	91 e0       	ldi	r25, 0x01	; 1
 4a2:	0e 94 2e 03 	call	0x65c	; 0x65c <lock>
	lock(&button_mutex);
 4a6:	86 e6       	ldi	r24, 0x66	; 102
 4a8:	91 e0       	ldi	r25, 0x01	; 1
 4aa:	0e 94 2e 03 	call	0x65c	; 0x65c <lock>

	//spawn(button, 0);
	spawn(blink, 0);
 4ae:	60 e0       	ldi	r22, 0x00	; 0
 4b0:	70 e0       	ldi	r23, 0x00	; 0
 4b2:	87 e5       	ldi	r24, 0x57	; 87
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	0e 94 80 02 	call	0x500	; 0x500 <spawn>
	//primes();
 4ba:	80 e0       	ldi	r24, 0x00	; 0
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	08 95       	ret

000004c0 <dispatch>:
void yield(void) {
    DISABLE();
    enqueue(current, &readyQ);
    dispatch(dequeue(&readyQ));
    ENABLE();
}
 4c0:	cf 93       	push	r28
 4c2:	df 93       	push	r29
 4c4:	00 d0       	rcall	.+0      	; 0x4c6 <dispatch+0x6>
 4c6:	cd b7       	in	r28, 0x3d	; 61
 4c8:	de b7       	in	r29, 0x3e	; 62
 4ca:	9a 83       	std	Y+2, r25	; 0x02
 4cc:	89 83       	std	Y+1, r24	; 0x01
 4ce:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <current>
 4d2:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <current+0x1>
 4d6:	06 96       	adiw	r24, 0x06	; 6
 4d8:	0e 94 c8 03 	call	0x790	; 0x790 <setjmp>
 4dc:	89 2b       	or	r24, r25
 4de:	59 f4       	brne	.+22     	; 0x4f6 <dispatch+0x36>
 4e0:	89 81       	ldd	r24, Y+1	; 0x01
 4e2:	9a 81       	ldd	r25, Y+2	; 0x02
 4e4:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <current+0x1>
 4e8:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <current>
 4ec:	61 e0       	ldi	r22, 0x01	; 1
 4ee:	70 e0       	ldi	r23, 0x00	; 0
 4f0:	06 96       	adiw	r24, 0x06	; 6
 4f2:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <longjmp>
 4f6:	0f 90       	pop	r0
 4f8:	0f 90       	pop	r0
 4fa:	df 91       	pop	r29
 4fc:	cf 91       	pop	r28
 4fe:	08 95       	ret

00000500 <spawn>:
 500:	cf 93       	push	r28
 502:	df 93       	push	r29
 504:	00 d0       	rcall	.+0      	; 0x506 <spawn+0x6>
 506:	cd b7       	in	r28, 0x3d	; 61
 508:	de b7       	in	r29, 0x3e	; 62
 50a:	f8 94       	cli
 50c:	20 91 5e 01 	lds	r18, 0x015E	; 0x80015e <initialized>
 510:	30 91 5f 01 	lds	r19, 0x015F	; 0x80015f <initialized+0x1>
 514:	23 2b       	or	r18, r19
 516:	e1 f4       	brne	.+56     	; 0x550 <spawn+0x50>
 518:	28 e4       	ldi	r18, 0x48	; 72
 51a:	32 e0       	ldi	r19, 0x02	; 2
 51c:	30 93 e0 01 	sts	0x01E0, r19	; 0x8001e0 <threads+0x5>
 520:	20 93 df 01 	sts	0x01DF, r18	; 0x8001df <threads+0x4>
 524:	25 eb       	ldi	r18, 0xB5	; 181
 526:	32 e0       	ldi	r19, 0x02	; 2
 528:	30 93 4d 02 	sts	0x024D, r19	; 0x80024d <threads+0x72>
 52c:	20 93 4c 02 	sts	0x024C, r18	; 0x80024c <threads+0x71>
 530:	22 e2       	ldi	r18, 0x22	; 34
 532:	33 e0       	ldi	r19, 0x03	; 3
 534:	30 93 ba 02 	sts	0x02BA, r19	; 0x8002ba <threads+0xdf>
 538:	20 93 b9 02 	sts	0x02B9, r18	; 0x8002b9 <threads+0xde>
 53c:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <threads+0x14c>
 540:	10 92 26 03 	sts	0x0326, r1	; 0x800326 <threads+0x14b>
 544:	21 e0       	ldi	r18, 0x01	; 1
 546:	30 e0       	ldi	r19, 0x00	; 0
 548:	30 93 5f 01 	sts	0x015F, r19	; 0x80015f <initialized+0x1>
 54c:	20 93 5e 01 	sts	0x015E, r18	; 0x80015e <initialized>
 550:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <freeQ>
 554:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <freeQ+0x1>
 558:	3a 83       	std	Y+2, r19	; 0x02
 55a:	29 83       	std	Y+1, r18	; 0x01
 55c:	23 2b       	or	r18, r19
 55e:	e1 f0       	breq	.+56     	; 0x598 <spawn+0x98>
 560:	a9 81       	ldd	r26, Y+1	; 0x01
 562:	ba 81       	ldd	r27, Y+2	; 0x02
 564:	14 96       	adiw	r26, 0x04	; 4
 566:	4d 91       	ld	r20, X+
 568:	5c 91       	ld	r21, X
 56a:	15 97       	sbiw	r26, 0x05	; 5
 56c:	50 93 53 01 	sts	0x0153, r21	; 0x800153 <freeQ+0x1>
 570:	40 93 52 01 	sts	0x0152, r20	; 0x800152 <freeQ>
 574:	11 96       	adiw	r26, 0x01	; 1
 576:	9c 93       	st	X, r25
 578:	8e 93       	st	-X, r24
 57a:	13 96       	adiw	r26, 0x03	; 3
 57c:	7c 93       	st	X, r23
 57e:	6e 93       	st	-X, r22
 580:	12 97       	sbiw	r26, 0x02	; 2
 582:	15 96       	adiw	r26, 0x05	; 5
 584:	1c 92       	st	X, r1
 586:	1e 92       	st	-X, r1
 588:	14 97       	sbiw	r26, 0x04	; 4
 58a:	cd 01       	movw	r24, r26
 58c:	06 96       	adiw	r24, 0x06	; 6
 58e:	0e 94 c8 03 	call	0x790	; 0x790 <setjmp>
 592:	01 97       	sbiw	r24, 0x01	; 1
 594:	79 f5       	brne	.+94     	; 0x5f4 <spawn+0xf4>
 596:	01 c0       	rjmp	.+2      	; 0x59a <spawn+0x9a>
 598:	ff cf       	rjmp	.-2      	; 0x598 <spawn+0x98>
 59a:	78 94       	sei
 59c:	a0 91 50 01 	lds	r26, 0x0150	; 0x800150 <current>
 5a0:	b0 91 51 01 	lds	r27, 0x0151	; 0x800151 <current+0x1>
 5a4:	ed 91       	ld	r30, X+
 5a6:	fc 91       	ld	r31, X
 5a8:	11 97       	sbiw	r26, 0x01	; 1
 5aa:	12 96       	adiw	r26, 0x02	; 2
 5ac:	8d 91       	ld	r24, X+
 5ae:	9c 91       	ld	r25, X
 5b0:	13 97       	sbiw	r26, 0x03	; 3
 5b2:	09 95       	icall
 5b4:	f8 94       	cli
 5b6:	e0 91 50 01 	lds	r30, 0x0150	; 0x800150 <current>
 5ba:	f0 91 51 01 	lds	r31, 0x0151	; 0x800151 <current+0x1>
 5be:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <freeQ>
 5c2:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <freeQ+0x1>
 5c6:	95 83       	std	Z+5, r25	; 0x05
 5c8:	84 83       	std	Z+4, r24	; 0x04
 5ca:	f0 93 53 01 	sts	0x0153, r31	; 0x800153 <freeQ+0x1>
 5ce:	e0 93 52 01 	sts	0x0152, r30	; 0x800152 <freeQ>
 5d2:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <readyQ>
 5d6:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <readyQ+0x1>
 5da:	00 97       	sbiw	r24, 0x00	; 0
 5dc:	51 f0       	breq	.+20     	; 0x5f2 <spawn+0xf2>
 5de:	fc 01       	movw	r30, r24
 5e0:	24 81       	ldd	r18, Z+4	; 0x04
 5e2:	35 81       	ldd	r19, Z+5	; 0x05
 5e4:	30 93 61 01 	sts	0x0161, r19	; 0x800161 <readyQ+0x1>
 5e8:	20 93 60 01 	sts	0x0160, r18	; 0x800160 <readyQ>
 5ec:	0e 94 60 02 	call	0x4c0	; 0x4c0 <dispatch>
 5f0:	01 c0       	rjmp	.+2      	; 0x5f4 <spawn+0xf4>
 5f2:	ff cf       	rjmp	.-2      	; 0x5f2 <spawn+0xf2>
 5f4:	e9 81       	ldd	r30, Y+1	; 0x01
 5f6:	fa 81       	ldd	r31, Y+2	; 0x02
 5f8:	36 96       	adiw	r30, 0x06	; 6
 5fa:	89 81       	ldd	r24, Y+1	; 0x01
 5fc:	9a 81       	ldd	r25, Y+2	; 0x02
 5fe:	87 59       	subi	r24, 0x97	; 151
 600:	9f 4f       	sbci	r25, 0xFF	; 255
 602:	91 8b       	std	Z+17, r25	; 0x11
 604:	80 8b       	std	Z+16, r24	; 0x10
 606:	93 8b       	std	Z+19, r25	; 0x13
 608:	82 8b       	std	Z+18, r24	; 0x12
 60a:	e0 91 50 01 	lds	r30, 0x0150	; 0x800150 <current>
 60e:	f0 91 51 01 	lds	r31, 0x0151	; 0x800151 <current+0x1>
 612:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <readyQ>
 616:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <readyQ+0x1>
 61a:	95 83       	std	Z+5, r25	; 0x05
 61c:	84 83       	std	Z+4, r24	; 0x04
 61e:	a9 81       	ldd	r26, Y+1	; 0x01
 620:	ba 81       	ldd	r27, Y+2	; 0x02
 622:	15 96       	adiw	r26, 0x05	; 5
 624:	fc 93       	st	X, r31
 626:	ee 93       	st	-X, r30
 628:	14 97       	sbiw	r26, 0x04	; 4
 62a:	b0 93 61 01 	sts	0x0161, r27	; 0x800161 <readyQ+0x1>
 62e:	a0 93 60 01 	sts	0x0160, r26	; 0x800160 <readyQ>
 632:	10 97       	sbiw	r26, 0x00	; 0
 634:	09 f4       	brne	.+2      	; 0x638 <spawn+0x138>
 636:	ff cf       	rjmp	.-2      	; 0x636 <spawn+0x136>
 638:	14 96       	adiw	r26, 0x04	; 4
 63a:	8d 91       	ld	r24, X+
 63c:	9c 91       	ld	r25, X
 63e:	15 97       	sbiw	r26, 0x05	; 5
 640:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <readyQ+0x1>
 644:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <readyQ>
 648:	89 81       	ldd	r24, Y+1	; 0x01
 64a:	9a 81       	ldd	r25, Y+2	; 0x02
 64c:	0e 94 60 02 	call	0x4c0	; 0x4c0 <dispatch>
 650:	78 94       	sei
 652:	0f 90       	pop	r0
 654:	0f 90       	pop	r0
 656:	df 91       	pop	r29
 658:	cf 91       	pop	r28
 65a:	08 95       	ret

0000065c <lock>:

void lock(mutex *m) {
 65c:	fc 01       	movw	r30, r24
    DISABLE();
 65e:	f8 94       	cli
    if(m->locked){
 660:	80 81       	ld	r24, Z
 662:	91 81       	ldd	r25, Z+1	; 0x01
 664:	89 2b       	or	r24, r25
 666:	e9 f0       	breq	.+58     	; 0x6a2 <lock+0x46>
        enqueue(current, &(m->waitQ));
 668:	a0 91 50 01 	lds	r26, 0x0150	; 0x800150 <current>
 66c:	b0 91 51 01 	lds	r27, 0x0151	; 0x800151 <current+0x1>
    
    initialized = 1;
}

static void enqueue(thread p, thread *queue) {
    p->next = *queue;
 670:	82 81       	ldd	r24, Z+2	; 0x02
 672:	93 81       	ldd	r25, Z+3	; 0x03
 674:	15 96       	adiw	r26, 0x05	; 5
 676:	9c 93       	st	X, r25
 678:	8e 93       	st	-X, r24
 67a:	14 97       	sbiw	r26, 0x04	; 4
    *queue = p;
 67c:	b3 83       	std	Z+3, r27	; 0x03
 67e:	a2 83       	std	Z+2, r26	; 0x02
        q->next = p;
    }*/
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 680:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <readyQ>
 684:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <readyQ+0x1>
    if (*queue) {
 688:	00 97       	sbiw	r24, 0x00	; 0
 68a:	51 f0       	breq	.+20     	; 0x6a0 <lock+0x44>
        *queue = (*queue)->next;
 68c:	fc 01       	movw	r30, r24
 68e:	24 81       	ldd	r18, Z+4	; 0x04
 690:	35 81       	ldd	r19, Z+5	; 0x05
 692:	30 93 61 01 	sts	0x0161, r19	; 0x800161 <readyQ+0x1>
 696:	20 93 60 01 	sts	0x0160, r18	; 0x800160 <readyQ>

void lock(mutex *m) {
    DISABLE();
    if(m->locked){
        enqueue(current, &(m->waitQ));
        dispatch(dequeue(&readyQ));
 69a:	0e 94 60 02 	call	0x4c0	; 0x4c0 <dispatch>
 69e:	05 c0       	rjmp	.+10     	; 0x6aa <lock+0x4e>
 6a0:	ff cf       	rjmp	.-2      	; 0x6a0 <lock+0x44>
    } else {
        m->locked = 1;
 6a2:	81 e0       	ldi	r24, 0x01	; 1
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	91 83       	std	Z+1, r25	; 0x01
 6a8:	80 83       	st	Z, r24
    }
    ENABLE();
 6aa:	78 94       	sei
 6ac:	08 95       	ret

000006ae <unlock>:
}

void unlock(mutex *m) {
 6ae:	fc 01       	movw	r30, r24
    DISABLE();
 6b0:	f8 94       	cli
    if((m->waitQ) == NULL){
 6b2:	82 81       	ldd	r24, Z+2	; 0x02
 6b4:	93 81       	ldd	r25, Z+3	; 0x03
 6b6:	89 2b       	or	r24, r25
 6b8:	19 f4       	brne	.+6      	; 0x6c0 <unlock+0x12>
        m->locked = 0;
 6ba:	11 82       	std	Z+1, r1	; 0x01
 6bc:	10 82       	st	Z, r1
 6be:	1f c0       	rjmp	.+62     	; 0x6fe <unlock+0x50>
    } else {
        enqueue(current, &readyQ);
 6c0:	a0 91 50 01 	lds	r26, 0x0150	; 0x800150 <current>
 6c4:	b0 91 51 01 	lds	r27, 0x0151	; 0x800151 <current+0x1>
    
    initialized = 1;
}

static void enqueue(thread p, thread *queue) {
    p->next = *queue;
 6c8:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <readyQ>
 6cc:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <readyQ+0x1>
 6d0:	15 96       	adiw	r26, 0x05	; 5
 6d2:	9c 93       	st	X, r25
 6d4:	8e 93       	st	-X, r24
 6d6:	14 97       	sbiw	r26, 0x04	; 4
    *queue = p;
 6d8:	b0 93 61 01 	sts	0x0161, r27	; 0x800161 <readyQ+0x1>
 6dc:	a0 93 60 01 	sts	0x0160, r26	; 0x800160 <readyQ>
        q->next = p;
    }*/
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 6e0:	82 81       	ldd	r24, Z+2	; 0x02
 6e2:	93 81       	ldd	r25, Z+3	; 0x03
    if (*queue) {
 6e4:	00 97       	sbiw	r24, 0x00	; 0
 6e6:	51 f0       	breq	.+20     	; 0x6fc <unlock+0x4e>
        *queue = (*queue)->next;
 6e8:	dc 01       	movw	r26, r24
 6ea:	14 96       	adiw	r26, 0x04	; 4
 6ec:	2d 91       	ld	r18, X+
 6ee:	3c 91       	ld	r19, X
 6f0:	15 97       	sbiw	r26, 0x05	; 5
 6f2:	33 83       	std	Z+3, r19	; 0x03
 6f4:	22 83       	std	Z+2, r18	; 0x02
    DISABLE();
    if((m->waitQ) == NULL){
        m->locked = 0;
    } else {
        enqueue(current, &readyQ);
        dispatch(dequeue(&(m->waitQ)));
 6f6:	0e 94 60 02 	call	0x4c0	; 0x4c0 <dispatch>
 6fa:	01 c0       	rjmp	.+2      	; 0x6fe <unlock+0x50>
 6fc:	ff cf       	rjmp	.-2      	; 0x6fc <unlock+0x4e>
    }
    ENABLE();
 6fe:	78 94       	sei
 700:	08 95       	ret

00000702 <__divmodsi4>:
 702:	05 2e       	mov	r0, r21
 704:	97 fb       	bst	r25, 7
 706:	1e f4       	brtc	.+6      	; 0x70e <__divmodsi4+0xc>
 708:	00 94       	com	r0
 70a:	0e 94 98 03 	call	0x730	; 0x730 <__negsi2>
 70e:	57 fd       	sbrc	r21, 7
 710:	07 d0       	rcall	.+14     	; 0x720 <__divmodsi4_neg2>
 712:	0e 94 a6 03 	call	0x74c	; 0x74c <__udivmodsi4>
 716:	07 fc       	sbrc	r0, 7
 718:	03 d0       	rcall	.+6      	; 0x720 <__divmodsi4_neg2>
 71a:	4e f4       	brtc	.+18     	; 0x72e <__divmodsi4_exit>
 71c:	0c 94 98 03 	jmp	0x730	; 0x730 <__negsi2>

00000720 <__divmodsi4_neg2>:
 720:	50 95       	com	r21
 722:	40 95       	com	r20
 724:	30 95       	com	r19
 726:	21 95       	neg	r18
 728:	3f 4f       	sbci	r19, 0xFF	; 255
 72a:	4f 4f       	sbci	r20, 0xFF	; 255
 72c:	5f 4f       	sbci	r21, 0xFF	; 255

0000072e <__divmodsi4_exit>:
 72e:	08 95       	ret

00000730 <__negsi2>:
 730:	90 95       	com	r25
 732:	80 95       	com	r24
 734:	70 95       	com	r23
 736:	61 95       	neg	r22
 738:	7f 4f       	sbci	r23, 0xFF	; 255
 73a:	8f 4f       	sbci	r24, 0xFF	; 255
 73c:	9f 4f       	sbci	r25, 0xFF	; 255
 73e:	08 95       	ret

00000740 <__tablejump2__>:
 740:	ee 0f       	add	r30, r30
 742:	ff 1f       	adc	r31, r31
 744:	05 90       	lpm	r0, Z+
 746:	f4 91       	lpm	r31, Z
 748:	e0 2d       	mov	r30, r0
 74a:	09 94       	ijmp

0000074c <__udivmodsi4>:
 74c:	a1 e2       	ldi	r26, 0x21	; 33
 74e:	1a 2e       	mov	r1, r26
 750:	aa 1b       	sub	r26, r26
 752:	bb 1b       	sub	r27, r27
 754:	fd 01       	movw	r30, r26
 756:	0d c0       	rjmp	.+26     	; 0x772 <__udivmodsi4_ep>

00000758 <__udivmodsi4_loop>:
 758:	aa 1f       	adc	r26, r26
 75a:	bb 1f       	adc	r27, r27
 75c:	ee 1f       	adc	r30, r30
 75e:	ff 1f       	adc	r31, r31
 760:	a2 17       	cp	r26, r18
 762:	b3 07       	cpc	r27, r19
 764:	e4 07       	cpc	r30, r20
 766:	f5 07       	cpc	r31, r21
 768:	20 f0       	brcs	.+8      	; 0x772 <__udivmodsi4_ep>
 76a:	a2 1b       	sub	r26, r18
 76c:	b3 0b       	sbc	r27, r19
 76e:	e4 0b       	sbc	r30, r20
 770:	f5 0b       	sbc	r31, r21

00000772 <__udivmodsi4_ep>:
 772:	66 1f       	adc	r22, r22
 774:	77 1f       	adc	r23, r23
 776:	88 1f       	adc	r24, r24
 778:	99 1f       	adc	r25, r25
 77a:	1a 94       	dec	r1
 77c:	69 f7       	brne	.-38     	; 0x758 <__udivmodsi4_loop>
 77e:	60 95       	com	r22
 780:	70 95       	com	r23
 782:	80 95       	com	r24
 784:	90 95       	com	r25
 786:	9b 01       	movw	r18, r22
 788:	ac 01       	movw	r20, r24
 78a:	bd 01       	movw	r22, r26
 78c:	cf 01       	movw	r24, r30
 78e:	08 95       	ret

00000790 <setjmp>:
 790:	dc 01       	movw	r26, r24
 792:	2d 92       	st	X+, r2
 794:	3d 92       	st	X+, r3
 796:	4d 92       	st	X+, r4
 798:	5d 92       	st	X+, r5
 79a:	6d 92       	st	X+, r6
 79c:	7d 92       	st	X+, r7
 79e:	8d 92       	st	X+, r8
 7a0:	9d 92       	st	X+, r9
 7a2:	ad 92       	st	X+, r10
 7a4:	bd 92       	st	X+, r11
 7a6:	cd 92       	st	X+, r12
 7a8:	dd 92       	st	X+, r13
 7aa:	ed 92       	st	X+, r14
 7ac:	fd 92       	st	X+, r15
 7ae:	0d 93       	st	X+, r16
 7b0:	1d 93       	st	X+, r17
 7b2:	cd 93       	st	X+, r28
 7b4:	dd 93       	st	X+, r29
 7b6:	ff 91       	pop	r31
 7b8:	ef 91       	pop	r30
 7ba:	8d b7       	in	r24, 0x3d	; 61
 7bc:	8d 93       	st	X+, r24
 7be:	8e b7       	in	r24, 0x3e	; 62
 7c0:	8d 93       	st	X+, r24
 7c2:	8f b7       	in	r24, 0x3f	; 63
 7c4:	8d 93       	st	X+, r24
 7c6:	ed 93       	st	X+, r30
 7c8:	fd 93       	st	X+, r31
 7ca:	88 27       	eor	r24, r24
 7cc:	99 27       	eor	r25, r25
 7ce:	09 94       	ijmp

000007d0 <longjmp>:
 7d0:	dc 01       	movw	r26, r24
 7d2:	cb 01       	movw	r24, r22
 7d4:	81 30       	cpi	r24, 0x01	; 1
 7d6:	91 05       	cpc	r25, r1
 7d8:	81 1d       	adc	r24, r1
 7da:	2d 90       	ld	r2, X+
 7dc:	3d 90       	ld	r3, X+
 7de:	4d 90       	ld	r4, X+
 7e0:	5d 90       	ld	r5, X+
 7e2:	6d 90       	ld	r6, X+
 7e4:	7d 90       	ld	r7, X+
 7e6:	8d 90       	ld	r8, X+
 7e8:	9d 90       	ld	r9, X+
 7ea:	ad 90       	ld	r10, X+
 7ec:	bd 90       	ld	r11, X+
 7ee:	cd 90       	ld	r12, X+
 7f0:	dd 90       	ld	r13, X+
 7f2:	ed 90       	ld	r14, X+
 7f4:	fd 90       	ld	r15, X+
 7f6:	0d 91       	ld	r16, X+
 7f8:	1d 91       	ld	r17, X+
 7fa:	cd 91       	ld	r28, X+
 7fc:	dd 91       	ld	r29, X+
 7fe:	ed 91       	ld	r30, X+
 800:	fd 91       	ld	r31, X+
 802:	0d 90       	ld	r0, X+
 804:	f8 94       	cli
 806:	fe bf       	out	0x3e, r31	; 62
 808:	0f be       	out	0x3f, r0	; 63
 80a:	ed bf       	out	0x3d, r30	; 61
 80c:	ed 91       	ld	r30, X+
 80e:	fd 91       	ld	r31, X+
 810:	09 94       	ijmp

00000812 <_exit>:
 812:	f8 94       	cli

00000814 <__stop_program>:
 814:	ff cf       	rjmp	.-2      	; 0x814 <__stop_program>
