
Part3.2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000382  00000416  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000382  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000022c  00800104  00800104  0000041a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000041a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000044c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001355  00000000  00000000  0000054c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b5d  00000000  00000000  000018a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007fa  00000000  00000000  000023fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000230  00000000  00000000  00002bf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000642  00000000  00000000  00002e28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ada  00000000  00000000  0000346a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00003f44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 c9 00 	jmp	0x192	; 0x192 <__vector_3>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__vector_7>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e2 e8       	ldi	r30, 0x82	; 130
  70:	f3 e0       	ldi	r31, 0x03	; 3
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a4 30       	cpi	r26, 0x04	; 4
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	23 e0       	ldi	r18, 0x03	; 3
  80:	a4 e0       	ldi	r26, 0x04	; 4
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	a0 33       	cpi	r26, 0x30	; 48
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <main>
  92:	0c 94 bf 01 	jmp	0x37e	; 0x37e <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <init>:

void blink() {
	while (1) {
		lock(&blink_mutex);
		// Toggle the segment
		LCDDR0 ^= (1 << 1);
  9a:	e1 e6       	ldi	r30, 0x61	; 97
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 e8       	ldi	r24, 0x80	; 128
  a0:	80 83       	st	Z, r24
  a2:	10 82       	st	Z, r1
  a4:	e1 e8       	ldi	r30, 0x81	; 129
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	88 60       	ori	r24, 0x08	; 8
  ac:	80 83       	st	Z, r24
  ae:	82 e4       	ldi	r24, 0x42	; 66
  b0:	9f e0       	ldi	r25, 0x0F	; 15
  b2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
  b6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
  ba:	80 81       	ld	r24, Z
  bc:	85 60       	ori	r24, 0x05	; 5
  be:	80 83       	st	Z, r24
  c0:	ef e6       	ldi	r30, 0x6F	; 111
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	82 60       	ori	r24, 0x02	; 2
  c8:	80 83       	st	Z, r24
  ca:	27 98       	cbi	0x04, 7	; 4
  cc:	2f 9a       	sbi	0x05, 7	; 5
  ce:	ef 9a       	sbi	0x1d, 7	; 29
  d0:	ec e6       	ldi	r30, 0x6C	; 108
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	80 68       	ori	r24, 0x80	; 128
  d8:	80 83       	st	Z, r24
  da:	08 95       	ret

000000dc <LCD_init>:
  dc:	8f e0       	ldi	r24, 0x0F	; 15
  de:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__DATA_REGION_ORIGIN__+0x87>
  e2:	87 eb       	ldi	r24, 0xB7	; 183
  e4:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
  e8:	87 e0       	ldi	r24, 0x07	; 7
  ea:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__DATA_REGION_ORIGIN__+0x86>
  ee:	80 ec       	ldi	r24, 0xC0	; 192
  f0:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
  f4:	08 95       	ret

000000f6 <toggle_lcd>:
	}
}

// Toggle between two LCD segments
void toggle_lcd(uint8_t *current_segment) {
	if (*current_segment == LCD_SEGMENT1) {
  f6:	fc 01       	movw	r30, r24
  f8:	20 81       	ld	r18, Z
  fa:	21 30       	cpi	r18, 0x01	; 1
  fc:	69 f4       	brne	.+26     	; 0x118 <toggle_lcd+0x22>
		*current_segment = LCD_SEGMENT2;
  fe:	20 e2       	ldi	r18, 0x20	; 32
 100:	20 83       	st	Z, r18
		// Clear LCD segment 1
		LCDDR3 &= ~LCD_SEGMENT1;
 102:	ef ee       	ldi	r30, 0xEF	; 239
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	8e 7f       	andi	r24, 0xFE	; 254
 10a:	80 83       	st	Z, r24
		// Update to LCD segment 2
		LCDDR2 = (LCDDR2 & 0xFF) | LCD_SEGMENT2;
 10c:	ee ee       	ldi	r30, 0xEE	; 238
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	80 62       	ori	r24, 0x20	; 32
 114:	80 83       	st	Z, r24
 116:	08 95       	ret
		} else {
		*current_segment = LCD_SEGMENT1;
 118:	21 e0       	ldi	r18, 0x01	; 1
 11a:	fc 01       	movw	r30, r24
 11c:	20 83       	st	Z, r18
		// Clear LCD segment 2
		LCDDR2 &= ~LCD_SEGMENT2;
 11e:	ee ee       	ldi	r30, 0xEE	; 238
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	8f 7d       	andi	r24, 0xDF	; 223
 126:	80 83       	st	Z, r24
		// Update to LCD segment 1
		LCDDR3 = (LCDDR3 & 0xFF) | LCD_SEGMENT1;
 128:	ef ee       	ldi	r30, 0xEF	; 239
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	81 60       	ori	r24, 0x01	; 1
 130:	80 83       	st	Z, r24
 132:	08 95       	ret

00000134 <button>:

void button() {
	static uint8_t current_segment = LCD_SEGMENT1;

	while (true) {
		lock(&button_mutex);
 134:	87 e0       	ldi	r24, 0x07	; 7
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	0e 94 2b 01 	call	0x256	; 0x256 <lock>
		toggle_lcd(&current_segment);
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	0e 94 7b 00 	call	0xf6	; 0xf6 <toggle_lcd>
 144:	f7 cf       	rjmp	.-18     	; 0x134 <button>

00000146 <__vector_7>:
	}
}

// Timer interupt
ISR(TIMER1_COMPA_vect) {
 146:	1f 92       	push	r1
 148:	0f 92       	push	r0
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	0f 92       	push	r0
 14e:	11 24       	eor	r1, r1
 150:	2f 93       	push	r18
 152:	3f 93       	push	r19
 154:	4f 93       	push	r20
 156:	5f 93       	push	r21
 158:	6f 93       	push	r22
 15a:	7f 93       	push	r23
 15c:	8f 93       	push	r24
 15e:	9f 93       	push	r25
 160:	af 93       	push	r26
 162:	bf 93       	push	r27
 164:	ef 93       	push	r30
 166:	ff 93       	push	r31
	unlock(&blink_mutex);
 168:	8b e0       	ldi	r24, 0x0B	; 11
 16a:	91 e0       	ldi	r25, 0x01	; 1
 16c:	0e 94 54 01 	call	0x2a8	; 0x2a8 <unlock>
}
 170:	ff 91       	pop	r31
 172:	ef 91       	pop	r30
 174:	bf 91       	pop	r27
 176:	af 91       	pop	r26
 178:	9f 91       	pop	r25
 17a:	8f 91       	pop	r24
 17c:	7f 91       	pop	r23
 17e:	6f 91       	pop	r22
 180:	5f 91       	pop	r21
 182:	4f 91       	pop	r20
 184:	3f 91       	pop	r19
 186:	2f 91       	pop	r18
 188:	0f 90       	pop	r0
 18a:	0f be       	out	0x3f, r0	; 63
 18c:	0f 90       	pop	r0
 18e:	1f 90       	pop	r1
 190:	18 95       	reti

00000192 <__vector_3>:

// Joystick interupt
ISR(PCINT1_vect) {
 192:	1f 92       	push	r1
 194:	0f 92       	push	r0
 196:	0f b6       	in	r0, 0x3f	; 63
 198:	0f 92       	push	r0
 19a:	11 24       	eor	r1, r1
 19c:	2f 93       	push	r18
 19e:	3f 93       	push	r19
 1a0:	4f 93       	push	r20
 1a2:	5f 93       	push	r21
 1a4:	6f 93       	push	r22
 1a6:	7f 93       	push	r23
 1a8:	8f 93       	push	r24
 1aa:	9f 93       	push	r25
 1ac:	af 93       	push	r26
 1ae:	bf 93       	push	r27
 1b0:	ef 93       	push	r30
 1b2:	ff 93       	push	r31
	bool oldValue = joystick_pressed;

	// Check if joystick is pressed (active low, bit 7 of PINB == 0)
	if (!(PINB & (1 << PB7))) {
 1b4:	1f 99       	sbic	0x03, 7	; 3
 1b6:	0c c0       	rjmp	.+24     	; 0x1d0 <__vector_3+0x3e>
		if (!joystick_pressed) {
 1b8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 1bc:	81 11       	cpse	r24, r1
 1be:	0a c0       	rjmp	.+20     	; 0x1d4 <__vector_3+0x42>
			joystick_pressed = 1;
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
			// Checks toggle
			if (oldValue == 0 && joystick_pressed == 1) unlock(&button_mutex);
 1c6:	87 e0       	ldi	r24, 0x07	; 7
 1c8:	91 e0       	ldi	r25, 0x01	; 1
 1ca:	0e 94 54 01 	call	0x2a8	; 0x2a8 <unlock>
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <__vector_3+0x42>
		}
		} else {
		joystick_pressed = 0;
 1d0:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
	}
}
 1d4:	ff 91       	pop	r31
 1d6:	ef 91       	pop	r30
 1d8:	bf 91       	pop	r27
 1da:	af 91       	pop	r26
 1dc:	9f 91       	pop	r25
 1de:	8f 91       	pop	r24
 1e0:	7f 91       	pop	r23
 1e2:	6f 91       	pop	r22
 1e4:	5f 91       	pop	r21
 1e6:	4f 91       	pop	r20
 1e8:	3f 91       	pop	r19
 1ea:	2f 91       	pop	r18
 1ec:	0f 90       	pop	r0
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	0f 90       	pop	r0
 1f2:	1f 90       	pop	r1
 1f4:	18 95       	reti

000001f6 <main>:


int main(void) {
	cli();
 1f6:	f8 94       	cli
	init();
 1f8:	0e 94 4d 00 	call	0x9a	; 0x9a <init>
	LCD_init();
 1fc:	0e 94 6e 00 	call	0xdc	; 0xdc <LCD_init>
	sei();
 200:	78 94       	sei
	lock(&blink_mutex);
 202:	8b e0       	ldi	r24, 0x0B	; 11
 204:	91 e0       	ldi	r25, 0x01	; 1
 206:	0e 94 2b 01 	call	0x256	; 0x256 <lock>
	lock(&button_mutex);
 20a:	87 e0       	ldi	r24, 0x07	; 7
 20c:	91 e0       	ldi	r25, 0x01	; 1
 20e:	0e 94 2b 01 	call	0x256	; 0x256 <lock>

	//spawn(button, 0);
	//spawn(blink, 0);
	//primes();
	button();
 212:	0e 94 9a 00 	call	0x134	; 0x134 <button>

00000216 <dispatch>:
void yield(void) {
	DISABLE();
	enqueue(current, &readyQ);
	dispatch(dequeue(&readyQ));
	ENABLE();
}
 216:	cf 93       	push	r28
 218:	df 93       	push	r29
 21a:	00 d0       	rcall	.+0      	; 0x21c <dispatch+0x6>
 21c:	cd b7       	in	r28, 0x3d	; 61
 21e:	de b7       	in	r29, 0x3e	; 62
 220:	9a 83       	std	Y+2, r25	; 0x02
 222:	89 83       	std	Y+1, r24	; 0x01
 224:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <current>
 228:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <current+0x1>
 22c:	06 96       	adiw	r24, 0x06	; 6
 22e:	0e 94 7e 01 	call	0x2fc	; 0x2fc <setjmp>
 232:	89 2b       	or	r24, r25
 234:	59 f4       	brne	.+22     	; 0x24c <dispatch+0x36>
 236:	89 81       	ldd	r24, Y+1	; 0x01
 238:	9a 81       	ldd	r25, Y+2	; 0x02
 23a:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <current+0x1>
 23e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <current>
 242:	61 e0       	ldi	r22, 0x01	; 1
 244:	70 e0       	ldi	r23, 0x00	; 0
 246:	06 96       	adiw	r24, 0x06	; 6
 248:	0e 94 9e 01 	call	0x33c	; 0x33c <longjmp>
 24c:	0f 90       	pop	r0
 24e:	0f 90       	pop	r0
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	08 95       	ret

00000256 <lock>:

void lock(mutex *m) {
 256:	fc 01       	movw	r30, r24
	DISABLE();
 258:	f8 94       	cli
    // If already locked
	if (m->locked) {
 25a:	80 81       	ld	r24, Z
 25c:	91 81       	ldd	r25, Z+1	; 0x01
 25e:	89 2b       	or	r24, r25
 260:	e9 f0       	breq	.+58     	; 0x29c <lock+0x46>
		enqueue(current, &(m->waitQ)); // Add to mutex wait queue
 262:	a0 91 01 01 	lds	r26, 0x0101	; 0x800101 <current>
 266:	b0 91 02 01 	lds	r27, 0x0102	; 0x800102 <current+0x1>
	initialized = 1;
}

static void enqueue(thread p, thread *queue) {
    // Insert at the front of the queue (FIFO -> LIFO)
    p->next = *queue;
 26a:	82 81       	ldd	r24, Z+2	; 0x02
 26c:	93 81       	ldd	r25, Z+3	; 0x03
 26e:	15 96       	adiw	r26, 0x05	; 5
 270:	9c 93       	st	X, r25
 272:	8e 93       	st	-X, r24
 274:	14 97       	sbiw	r26, 0x04	; 4
    *queue = p;
 276:	b3 83       	std	Z+3, r27	; 0x03
 278:	a2 83       	std	Z+2, r26	; 0x02
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 27a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <readyQ>
 27e:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <readyQ+0x1>
    if (*queue) {
 282:	00 97       	sbiw	r24, 0x00	; 0
 284:	51 f0       	breq	.+20     	; 0x29a <lock+0x44>
        *queue = (*queue)->next;
 286:	fc 01       	movw	r30, r24
 288:	24 81       	ldd	r18, Z+4	; 0x04
 28a:	35 81       	ldd	r19, Z+5	; 0x05
 28c:	30 93 06 01 	sts	0x0106, r19	; 0x800106 <readyQ+0x1>
 290:	20 93 05 01 	sts	0x0105, r18	; 0x800105 <readyQ>
void lock(mutex *m) {
	DISABLE();
    // If already locked
	if (m->locked) {
		enqueue(current, &(m->waitQ)); // Add to mutex wait queue
		dispatch(dequeue(&readyQ));    // Dispatch the next thread
 294:	0e 94 0b 01 	call	0x216	; 0x216 <dispatch>
 298:	05 c0       	rjmp	.+10     	; 0x2a4 <lock+0x4e>
 29a:	ff cf       	rjmp	.-2      	; 0x29a <lock+0x44>
		} else {
		m->locked = 1; // Lock the mutex
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	91 83       	std	Z+1, r25	; 0x01
 2a2:	80 83       	st	Z, r24
	}
	ENABLE();
 2a4:	78 94       	sei
 2a6:	08 95       	ret

000002a8 <unlock>:
}

void unlock(mutex *m) {
 2a8:	fc 01       	movw	r30, r24
	DISABLE();
 2aa:	f8 94       	cli
    // If already unlocked
    if (m->waitQ == NULL) {
 2ac:	82 81       	ldd	r24, Z+2	; 0x02
 2ae:	93 81       	ldd	r25, Z+3	; 0x03
 2b0:	89 2b       	or	r24, r25
 2b2:	19 f4       	brne	.+6      	; 0x2ba <unlock+0x12>
        m->locked = 0;
 2b4:	11 82       	std	Z+1, r1	; 0x01
 2b6:	10 82       	st	Z, r1
 2b8:	1f c0       	rjmp	.+62     	; 0x2f8 <unlock+0x50>
    } else {
        enqueue(current, &readyQ);
 2ba:	a0 91 01 01 	lds	r26, 0x0101	; 0x800101 <current>
 2be:	b0 91 02 01 	lds	r27, 0x0102	; 0x800102 <current+0x1>
	initialized = 1;
}

static void enqueue(thread p, thread *queue) {
    // Insert at the front of the queue (FIFO -> LIFO)
    p->next = *queue;
 2c2:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <readyQ>
 2c6:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <readyQ+0x1>
 2ca:	15 96       	adiw	r26, 0x05	; 5
 2cc:	9c 93       	st	X, r25
 2ce:	8e 93       	st	-X, r24
 2d0:	14 97       	sbiw	r26, 0x04	; 4
    *queue = p;
 2d2:	b0 93 06 01 	sts	0x0106, r27	; 0x800106 <readyQ+0x1>
 2d6:	a0 93 05 01 	sts	0x0105, r26	; 0x800105 <readyQ>
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 2da:	82 81       	ldd	r24, Z+2	; 0x02
 2dc:	93 81       	ldd	r25, Z+3	; 0x03
    if (*queue) {
 2de:	00 97       	sbiw	r24, 0x00	; 0
 2e0:	51 f0       	breq	.+20     	; 0x2f6 <unlock+0x4e>
        *queue = (*queue)->next;
 2e2:	dc 01       	movw	r26, r24
 2e4:	14 96       	adiw	r26, 0x04	; 4
 2e6:	2d 91       	ld	r18, X+
 2e8:	3c 91       	ld	r19, X
 2ea:	15 97       	sbiw	r26, 0x05	; 5
 2ec:	33 83       	std	Z+3, r19	; 0x03
 2ee:	22 83       	std	Z+2, r18	; 0x02
    // If already unlocked
    if (m->waitQ == NULL) {
        m->locked = 0;
    } else {
        enqueue(current, &readyQ);
		dispatch(dequeue(&(m->waitQ)));
 2f0:	0e 94 0b 01 	call	0x216	; 0x216 <dispatch>
 2f4:	01 c0       	rjmp	.+2      	; 0x2f8 <unlock+0x50>
 2f6:	ff cf       	rjmp	.-2      	; 0x2f6 <unlock+0x4e>
    }
	ENABLE();
 2f8:	78 94       	sei
 2fa:	08 95       	ret

000002fc <setjmp>:
 2fc:	dc 01       	movw	r26, r24
 2fe:	2d 92       	st	X+, r2
 300:	3d 92       	st	X+, r3
 302:	4d 92       	st	X+, r4
 304:	5d 92       	st	X+, r5
 306:	6d 92       	st	X+, r6
 308:	7d 92       	st	X+, r7
 30a:	8d 92       	st	X+, r8
 30c:	9d 92       	st	X+, r9
 30e:	ad 92       	st	X+, r10
 310:	bd 92       	st	X+, r11
 312:	cd 92       	st	X+, r12
 314:	dd 92       	st	X+, r13
 316:	ed 92       	st	X+, r14
 318:	fd 92       	st	X+, r15
 31a:	0d 93       	st	X+, r16
 31c:	1d 93       	st	X+, r17
 31e:	cd 93       	st	X+, r28
 320:	dd 93       	st	X+, r29
 322:	ff 91       	pop	r31
 324:	ef 91       	pop	r30
 326:	8d b7       	in	r24, 0x3d	; 61
 328:	8d 93       	st	X+, r24
 32a:	8e b7       	in	r24, 0x3e	; 62
 32c:	8d 93       	st	X+, r24
 32e:	8f b7       	in	r24, 0x3f	; 63
 330:	8d 93       	st	X+, r24
 332:	ed 93       	st	X+, r30
 334:	fd 93       	st	X+, r31
 336:	88 27       	eor	r24, r24
 338:	99 27       	eor	r25, r25
 33a:	09 94       	ijmp

0000033c <longjmp>:
 33c:	dc 01       	movw	r26, r24
 33e:	cb 01       	movw	r24, r22
 340:	81 30       	cpi	r24, 0x01	; 1
 342:	91 05       	cpc	r25, r1
 344:	81 1d       	adc	r24, r1
 346:	2d 90       	ld	r2, X+
 348:	3d 90       	ld	r3, X+
 34a:	4d 90       	ld	r4, X+
 34c:	5d 90       	ld	r5, X+
 34e:	6d 90       	ld	r6, X+
 350:	7d 90       	ld	r7, X+
 352:	8d 90       	ld	r8, X+
 354:	9d 90       	ld	r9, X+
 356:	ad 90       	ld	r10, X+
 358:	bd 90       	ld	r11, X+
 35a:	cd 90       	ld	r12, X+
 35c:	dd 90       	ld	r13, X+
 35e:	ed 90       	ld	r14, X+
 360:	fd 90       	ld	r15, X+
 362:	0d 91       	ld	r16, X+
 364:	1d 91       	ld	r17, X+
 366:	cd 91       	ld	r28, X+
 368:	dd 91       	ld	r29, X+
 36a:	ed 91       	ld	r30, X+
 36c:	fd 91       	ld	r31, X+
 36e:	0d 90       	ld	r0, X+
 370:	f8 94       	cli
 372:	fe bf       	out	0x3e, r31	; 62
 374:	0f be       	out	0x3f, r0	; 63
 376:	ed bf       	out	0x3d, r30	; 61
 378:	ed 91       	ld	r30, X+
 37a:	fd 91       	ld	r31, X+
 37c:	09 94       	ijmp

0000037e <_exit>:
 37e:	f8 94       	cli

00000380 <__stop_program>:
 380:	ff cf       	rjmp	.-2      	; 0x380 <__stop_program>
