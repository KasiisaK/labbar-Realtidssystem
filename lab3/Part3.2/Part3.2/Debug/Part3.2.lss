
Part3.2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000056  00800100  00000888  0000091c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000888  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000237  00800156  00800156  00000972  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000972  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  000009e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000133f  00000000  00000000  00000ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000be1  00000000  00000000  00001df3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007d7  00000000  00000000  000029d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000208  00000000  00000000  000031ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000063f  00000000  00000000  000033b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000943  00000000  00000000  000039f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00004336  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 65 03 	jmp	0x6ca	; 0x6ca <__vector_7>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	b2 00       	.word	0x00b2	; ????
  5e:	94 00       	.word	0x0094	; ????
  60:	97 00       	.word	0x0097	; ????
  62:	9a 00       	.word	0x009a	; ????
  64:	9d 00       	.word	0x009d	; ????
  66:	a0 00       	.word	0x00a0	; ????
  68:	a3 00       	.word	0x00a3	; ????
  6a:	a6 00       	.word	0x00a6	; ????
  6c:	a9 00       	.word	0x00a9	; ????
  6e:	ac 00       	.word	0x00ac	; ????

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e8 e8       	ldi	r30, 0x88	; 136
  84:	f8 e0       	ldi	r31, 0x08	; 8
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a6 35       	cpi	r26, 0x56	; 86
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	23 e0       	ldi	r18, 0x03	; 3
  94:	a6 e5       	ldi	r26, 0x56	; 86
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	ad 38       	cpi	r26, 0x8D	; 141
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 56 02 	call	0x4ac	; 0x4ac <main>
  a6:	0c 94 42 04 	jmp	0x884	; 0x884 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <blink>:

void blink() {
	while (1) {
		lock(&blink_mutex);
		// Toggle the segment
		LCDDR0 ^= (1 << 1);
  ae:	cc ee       	ldi	r28, 0xEC	; 236
  b0:	d0 e0       	ldi	r29, 0x00	; 0
  b2:	12 e0       	ldi	r17, 0x02	; 2
	}
}

void blink() {
	while (1) {
		lock(&blink_mutex);
  b4:	82 e6       	ldi	r24, 0x62	; 98
  b6:	91 e0       	ldi	r25, 0x01	; 1
  b8:	0e 94 3e 03 	call	0x67c	; 0x67c <lock>
		// Toggle the segment
		LCDDR0 ^= (1 << 1);
  bc:	88 81       	ld	r24, Y
  be:	81 27       	eor	r24, r17
  c0:	88 83       	st	Y, r24
  c2:	f8 cf       	rjmp	.-16     	; 0xb4 <blink+0x6>

000000c4 <init>:
#define LCD_SEGMENT1 0b00000001 //  segment 1
#define LCD_SEGMENT2 0b00100000 //  segment 2

void init() {
    // Clock Prescale Register "maximum speed"
    CLKPR = 0b10000000; // Clock Prescaler Change Enable
  c4:	e1 e6       	ldi	r30, 0x61	; 97
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 e8       	ldi	r24, 0x80	; 128
  ca:	80 83       	st	Z, r24
    CLKPR = 0b00000000; // Set 0 for sysclock
  cc:	10 82       	st	Z, r1

    // Configure Timer/Counter1
    TCCR1B |= (1 << WGM12);
  ce:	e1 e8       	ldi	r30, 0x81	; 129
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	88 60       	ori	r24, 0x08	; 8
  d6:	80 83       	st	Z, r24
    OCR1A = OCR1A_VALUE;
  d8:	81 e4       	ldi	r24, 0x41	; 65
  da:	9f e0       	ldi	r25, 0x0F	; 15
  dc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
  e0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    TCCR1B |= (1 << CS12) | (1 << CS10);
  e4:	80 81       	ld	r24, Z
  e6:	85 60       	ori	r24, 0x05	; 5
  e8:	80 83       	st	Z, r24
    TIMSK1 |= (1 << OCIE1A);
  ea:	ef e6       	ldi	r30, 0x6F	; 111
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	82 60       	ori	r24, 0x02	; 2
  f2:	80 83       	st	Z, r24

    // Enable pull-up resistor on PORTB pin 7 (joystick down)
    DDRB &= ~(1 << DDB7);
  f4:	27 98       	cbi	0x04, 7	; 4
    PORTB |= (1 << PB7);
  f6:	2f 9a       	sbi	0x05, 7	; 5
  f8:	08 95       	ret

000000fa <LCD_init>:
    //sei();
}

void LCD_init() {
	// LCD(Contrast Control Register), LCD(Display Configuration)(000): 300 s, LCD(Contrast Control)(1111): 3.35 V
	LCDCCR = (0 << LCDDC0) | (0 << LCDDC1) | (0 << LCDDC2) | (1 << LCDCC0) | (1 << LCDCC1) | (1 << LCDCC2) | (1 << LCDCC3);
  fa:	8f e0       	ldi	r24, 0x0F	; 15
  fc:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__DATA_REGION_ORIGIN__+0x87>
	// LCDCS: asynchronous clock, LCDMUX(11): D=1/4, B=1/3, LCD(Port Mask): 25 segments
	LCDCRB = (1 << LCDCS) | (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM2) | (1 << LCDPM1) | (1 << LCDPM0);
 100:	87 eb       	ldi	r24, 0xB7	; 183
 102:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
	// LCD(Clock Divide)(111): (D=8) 32Hz
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);
 106:	87 e0       	ldi	r24, 0x07	; 7
 108:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__DATA_REGION_ORIGIN__+0x86>
	// LCD(Control and Status Register A), LCD(Enable): True, LCD(Low Power Waveform): True, (no frame interrupt, no blanking)
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
 10c:	80 ec       	ldi	r24, 0xC0	; 192
 10e:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
 112:	08 95       	ret

00000114 <getSegmentForChar>:
int nine[] = {0b0001, 0b0101, 0b1011, 0b0001};
int none[] = {0b0000, 0b0000, 0b0000, 0b0000};

//returns wall of data based on char input ('0' = 48 (char))
int* getSegmentForChar(char ch) {
	switch (ch) {
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	fc 01       	movw	r30, r24
 118:	f0 97       	sbiw	r30, 0x30	; 48
 11a:	ea 30       	cpi	r30, 0x0A	; 10
 11c:	f1 05       	cpc	r31, r1
 11e:	f8 f4       	brcc	.+62     	; 0x15e <getSegmentForChar+0x4a>
 120:	e2 5d       	subi	r30, 0xD2	; 210
 122:	ff 4f       	sbci	r31, 0xFF	; 255
 124:	0c 94 c5 03 	jmp	0x78a	; 0x78a <__tablejump2__>
		case '0': return zero;
		case '1': return one;
 128:	81 e4       	ldi	r24, 0x41	; 65
 12a:	91 e0       	ldi	r25, 0x01	; 1
 12c:	08 95       	ret
		case '2': return two;
 12e:	89 e3       	ldi	r24, 0x39	; 57
 130:	91 e0       	ldi	r25, 0x01	; 1
 132:	08 95       	ret
		case '3': return three;
 134:	81 e3       	ldi	r24, 0x31	; 49
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	08 95       	ret
		case '4': return four;
 13a:	89 e2       	ldi	r24, 0x29	; 41
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	08 95       	ret
		case '5': return five;
 140:	81 e2       	ldi	r24, 0x21	; 33
 142:	91 e0       	ldi	r25, 0x01	; 1
 144:	08 95       	ret
		case '6': return six;
 146:	89 e1       	ldi	r24, 0x19	; 25
 148:	91 e0       	ldi	r25, 0x01	; 1
 14a:	08 95       	ret
		case '7': return seven;
 14c:	81 e1       	ldi	r24, 0x11	; 17
 14e:	91 e0       	ldi	r25, 0x01	; 1
 150:	08 95       	ret
		case '8': return eight;
 152:	89 e0       	ldi	r24, 0x09	; 9
 154:	91 e0       	ldi	r25, 0x01	; 1
 156:	08 95       	ret
		case '9': return nine;
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	91 e0       	ldi	r25, 0x01	; 1
 15c:	08 95       	ret
		default:  return none;
 15e:	86 e5       	ldi	r24, 0x56	; 86
 160:	91 e0       	ldi	r25, 0x01	; 1
 162:	08 95       	ret
int none[] = {0b0000, 0b0000, 0b0000, 0b0000};

//returns wall of data based on char input ('0' = 48 (char))
int* getSegmentForChar(char ch) {
	switch (ch) {
		case '0': return zero;
 164:	89 e4       	ldi	r24, 0x49	; 73
 166:	91 e0       	ldi	r25, 0x01	; 1
		case '7': return seven;
		case '8': return eight;
		case '9': return nine;
		default:  return none;
	}
}
 168:	08 95       	ret

0000016a <writeChar>:

//write a char ch at position pos
void writeChar(char ch, uint8_t pos) {
 16a:	cf 93       	push	r28
	//check if outside range
	if (pos > 4 || pos < 0) return;
 16c:	65 30       	cpi	r22, 0x05	; 5
 16e:	08 f0       	brcs	.+2      	; 0x172 <writeChar+0x8>
 170:	e4 c0       	rjmp	.+456    	; 0x33a <writeChar+0x1d0>
 172:	c6 2f       	mov	r28, r22

	//get correct char data
	int* segment = getSegmentForChar(ch);
 174:	0e 94 8a 00 	call	0x114	; 0x114 <getSegmentForChar>
 178:	fc 01       	movw	r30, r24
	
	//chose position
	switch (pos) {
 17a:	c2 30       	cpi	r28, 0x02	; 2
 17c:	09 f4       	brne	.+2      	; 0x180 <writeChar+0x16>
 17e:	67 c0       	rjmp	.+206    	; 0x24e <writeChar+0xe4>
 180:	28 f4       	brcc	.+10     	; 0x18c <writeChar+0x22>
 182:	cc 23       	and	r28, r28
 184:	51 f0       	breq	.+20     	; 0x19a <writeChar+0x30>
 186:	c1 30       	cpi	r28, 0x01	; 1
 188:	29 f1       	breq	.+74     	; 0x1d4 <writeChar+0x6a>
 18a:	d7 c0       	rjmp	.+430    	; 0x33a <writeChar+0x1d0>
 18c:	c3 30       	cpi	r28, 0x03	; 3
 18e:	09 f4       	brne	.+2      	; 0x192 <writeChar+0x28>
 190:	7b c0       	rjmp	.+246    	; 0x288 <writeChar+0x11e>
 192:	c4 30       	cpi	r28, 0x04	; 4
 194:	09 f4       	brne	.+2      	; 0x198 <writeChar+0x2e>
 196:	b5 c0       	rjmp	.+362    	; 0x302 <writeChar+0x198>
 198:	d0 c0       	rjmp	.+416    	; 0x33a <writeChar+0x1d0>
		case 0:
		//segment start at 0, 5, 10, 15, higher 4 bits.
		//(LCDDR0 & 0xF0) clears the segment before writing
		LCDDR0 = (LCDDR0 & 0xF0) | segment[0];
 19a:	ac ee       	ldi	r26, 0xEC	; 236
 19c:	b0 e0       	ldi	r27, 0x00	; 0
 19e:	8c 91       	ld	r24, X
 1a0:	80 7f       	andi	r24, 0xF0	; 240
 1a2:	90 81       	ld	r25, Z
 1a4:	89 2b       	or	r24, r25
 1a6:	8c 93       	st	X, r24
		LCDDR5 = (LCDDR5 & 0xF0) | segment[1];
 1a8:	a1 ef       	ldi	r26, 0xF1	; 241
 1aa:	b0 e0       	ldi	r27, 0x00	; 0
 1ac:	8c 91       	ld	r24, X
 1ae:	80 7f       	andi	r24, 0xF0	; 240
 1b0:	92 81       	ldd	r25, Z+2	; 0x02
 1b2:	89 2b       	or	r24, r25
 1b4:	8c 93       	st	X, r24
		LCDDR10 = (LCDDR10 & 0xF0) | segment[2];
 1b6:	a6 ef       	ldi	r26, 0xF6	; 246
 1b8:	b0 e0       	ldi	r27, 0x00	; 0
 1ba:	8c 91       	ld	r24, X
 1bc:	80 7f       	andi	r24, 0xF0	; 240
 1be:	94 81       	ldd	r25, Z+4	; 0x04
 1c0:	89 2b       	or	r24, r25
 1c2:	8c 93       	st	X, r24
		LCDDR15 = (LCDDR15 & 0xF0) | segment[3];
 1c4:	ab ef       	ldi	r26, 0xFB	; 251
 1c6:	b0 e0       	ldi	r27, 0x00	; 0
 1c8:	8c 91       	ld	r24, X
 1ca:	80 7f       	andi	r24, 0xF0	; 240
 1cc:	96 81       	ldd	r25, Z+6	; 0x06
 1ce:	89 2b       	or	r24, r25
 1d0:	8c 93       	st	X, r24
		break;
 1d2:	b3 c0       	rjmp	.+358    	; 0x33a <writeChar+0x1d0>
		case 1:
		//same register different segments
		LCDDR0 = (LCDDR0 & 0x0F) | (segment[0] << 4);
 1d4:	ac ee       	ldi	r26, 0xEC	; 236
 1d6:	b0 e0       	ldi	r27, 0x00	; 0
 1d8:	2c 91       	ld	r18, X
 1da:	80 81       	ld	r24, Z
 1dc:	91 81       	ldd	r25, Z+1	; 0x01
 1de:	82 95       	swap	r24
 1e0:	92 95       	swap	r25
 1e2:	90 7f       	andi	r25, 0xF0	; 240
 1e4:	98 27       	eor	r25, r24
 1e6:	80 7f       	andi	r24, 0xF0	; 240
 1e8:	98 27       	eor	r25, r24
 1ea:	92 2f       	mov	r25, r18
 1ec:	9f 70       	andi	r25, 0x0F	; 15
 1ee:	89 2b       	or	r24, r25
 1f0:	8c 93       	st	X, r24
		LCDDR5 = (LCDDR5 & 0x0F) | (segment[1] << 4);
 1f2:	a1 ef       	ldi	r26, 0xF1	; 241
 1f4:	b0 e0       	ldi	r27, 0x00	; 0
 1f6:	2c 91       	ld	r18, X
 1f8:	82 81       	ldd	r24, Z+2	; 0x02
 1fa:	93 81       	ldd	r25, Z+3	; 0x03
 1fc:	82 95       	swap	r24
 1fe:	92 95       	swap	r25
 200:	90 7f       	andi	r25, 0xF0	; 240
 202:	98 27       	eor	r25, r24
 204:	80 7f       	andi	r24, 0xF0	; 240
 206:	98 27       	eor	r25, r24
 208:	92 2f       	mov	r25, r18
 20a:	9f 70       	andi	r25, 0x0F	; 15
 20c:	89 2b       	or	r24, r25
 20e:	8c 93       	st	X, r24
		LCDDR10 = (LCDDR10 & 0x0F) | (segment[2] << 4);
 210:	a6 ef       	ldi	r26, 0xF6	; 246
 212:	b0 e0       	ldi	r27, 0x00	; 0
 214:	2c 91       	ld	r18, X
 216:	84 81       	ldd	r24, Z+4	; 0x04
 218:	95 81       	ldd	r25, Z+5	; 0x05
 21a:	82 95       	swap	r24
 21c:	92 95       	swap	r25
 21e:	90 7f       	andi	r25, 0xF0	; 240
 220:	98 27       	eor	r25, r24
 222:	80 7f       	andi	r24, 0xF0	; 240
 224:	98 27       	eor	r25, r24
 226:	92 2f       	mov	r25, r18
 228:	9f 70       	andi	r25, 0x0F	; 15
 22a:	89 2b       	or	r24, r25
 22c:	8c 93       	st	X, r24
		LCDDR15 = (LCDDR15 & 0x0F) | (segment[3] << 4);
 22e:	ab ef       	ldi	r26, 0xFB	; 251
 230:	b0 e0       	ldi	r27, 0x00	; 0
 232:	2c 91       	ld	r18, X
 234:	86 81       	ldd	r24, Z+6	; 0x06
 236:	97 81       	ldd	r25, Z+7	; 0x07
 238:	82 95       	swap	r24
 23a:	92 95       	swap	r25
 23c:	90 7f       	andi	r25, 0xF0	; 240
 23e:	98 27       	eor	r25, r24
 240:	80 7f       	andi	r24, 0xF0	; 240
 242:	98 27       	eor	r25, r24
 244:	92 2f       	mov	r25, r18
 246:	9f 70       	andi	r25, 0x0F	; 15
 248:	89 2b       	or	r24, r25
 24a:	8c 93       	st	X, r24
		break;
 24c:	76 c0       	rjmp	.+236    	; 0x33a <writeChar+0x1d0>
		case 2:
		LCDDR1 = (LCDDR1 & 0xF0) | segment[0];
 24e:	ad ee       	ldi	r26, 0xED	; 237
 250:	b0 e0       	ldi	r27, 0x00	; 0
 252:	8c 91       	ld	r24, X
 254:	80 7f       	andi	r24, 0xF0	; 240
 256:	90 81       	ld	r25, Z
 258:	89 2b       	or	r24, r25
 25a:	8c 93       	st	X, r24
		LCDDR6 = (LCDDR6 & 0xF0) | segment[1];
 25c:	a2 ef       	ldi	r26, 0xF2	; 242
 25e:	b0 e0       	ldi	r27, 0x00	; 0
 260:	8c 91       	ld	r24, X
 262:	80 7f       	andi	r24, 0xF0	; 240
 264:	92 81       	ldd	r25, Z+2	; 0x02
 266:	89 2b       	or	r24, r25
 268:	8c 93       	st	X, r24
		LCDDR11 = (LCDDR11 & 0xF0) | segment[2];
 26a:	a7 ef       	ldi	r26, 0xF7	; 247
 26c:	b0 e0       	ldi	r27, 0x00	; 0
 26e:	8c 91       	ld	r24, X
 270:	80 7f       	andi	r24, 0xF0	; 240
 272:	94 81       	ldd	r25, Z+4	; 0x04
 274:	89 2b       	or	r24, r25
 276:	8c 93       	st	X, r24
		LCDDR16 = (LCDDR16 & 0xF0) | segment[3];
 278:	ac ef       	ldi	r26, 0xFC	; 252
 27a:	b0 e0       	ldi	r27, 0x00	; 0
 27c:	8c 91       	ld	r24, X
 27e:	80 7f       	andi	r24, 0xF0	; 240
 280:	96 81       	ldd	r25, Z+6	; 0x06
 282:	89 2b       	or	r24, r25
 284:	8c 93       	st	X, r24
		break;
 286:	59 c0       	rjmp	.+178    	; 0x33a <writeChar+0x1d0>
		case 3:
		LCDDR1 = (LCDDR1 & 0x0F) | (segment[0] << 4);
 288:	ad ee       	ldi	r26, 0xED	; 237
 28a:	b0 e0       	ldi	r27, 0x00	; 0
 28c:	2c 91       	ld	r18, X
 28e:	80 81       	ld	r24, Z
 290:	91 81       	ldd	r25, Z+1	; 0x01
 292:	82 95       	swap	r24
 294:	92 95       	swap	r25
 296:	90 7f       	andi	r25, 0xF0	; 240
 298:	98 27       	eor	r25, r24
 29a:	80 7f       	andi	r24, 0xF0	; 240
 29c:	98 27       	eor	r25, r24
 29e:	92 2f       	mov	r25, r18
 2a0:	9f 70       	andi	r25, 0x0F	; 15
 2a2:	89 2b       	or	r24, r25
 2a4:	8c 93       	st	X, r24
		LCDDR6 = (LCDDR6 & 0x0F) | (segment[1] << 4);
 2a6:	a2 ef       	ldi	r26, 0xF2	; 242
 2a8:	b0 e0       	ldi	r27, 0x00	; 0
 2aa:	2c 91       	ld	r18, X
 2ac:	82 81       	ldd	r24, Z+2	; 0x02
 2ae:	93 81       	ldd	r25, Z+3	; 0x03
 2b0:	82 95       	swap	r24
 2b2:	92 95       	swap	r25
 2b4:	90 7f       	andi	r25, 0xF0	; 240
 2b6:	98 27       	eor	r25, r24
 2b8:	80 7f       	andi	r24, 0xF0	; 240
 2ba:	98 27       	eor	r25, r24
 2bc:	92 2f       	mov	r25, r18
 2be:	9f 70       	andi	r25, 0x0F	; 15
 2c0:	89 2b       	or	r24, r25
 2c2:	8c 93       	st	X, r24
		LCDDR11 = (LCDDR11 & 0x0F) | (segment[2] << 4);
 2c4:	a7 ef       	ldi	r26, 0xF7	; 247
 2c6:	b0 e0       	ldi	r27, 0x00	; 0
 2c8:	2c 91       	ld	r18, X
 2ca:	84 81       	ldd	r24, Z+4	; 0x04
 2cc:	95 81       	ldd	r25, Z+5	; 0x05
 2ce:	82 95       	swap	r24
 2d0:	92 95       	swap	r25
 2d2:	90 7f       	andi	r25, 0xF0	; 240
 2d4:	98 27       	eor	r25, r24
 2d6:	80 7f       	andi	r24, 0xF0	; 240
 2d8:	98 27       	eor	r25, r24
 2da:	92 2f       	mov	r25, r18
 2dc:	9f 70       	andi	r25, 0x0F	; 15
 2de:	89 2b       	or	r24, r25
 2e0:	8c 93       	st	X, r24
		LCDDR16 = (LCDDR16 & 0x0F) | (segment[3] << 4);
 2e2:	ac ef       	ldi	r26, 0xFC	; 252
 2e4:	b0 e0       	ldi	r27, 0x00	; 0
 2e6:	2c 91       	ld	r18, X
 2e8:	86 81       	ldd	r24, Z+6	; 0x06
 2ea:	97 81       	ldd	r25, Z+7	; 0x07
 2ec:	82 95       	swap	r24
 2ee:	92 95       	swap	r25
 2f0:	90 7f       	andi	r25, 0xF0	; 240
 2f2:	98 27       	eor	r25, r24
 2f4:	80 7f       	andi	r24, 0xF0	; 240
 2f6:	98 27       	eor	r25, r24
 2f8:	92 2f       	mov	r25, r18
 2fa:	9f 70       	andi	r25, 0x0F	; 15
 2fc:	89 2b       	or	r24, r25
 2fe:	8c 93       	st	X, r24
		break;
 300:	1c c0       	rjmp	.+56     	; 0x33a <writeChar+0x1d0>
		case 4:
		LCDDR2 = (LCDDR2 & 0xF0) | segment[0];
 302:	ae ee       	ldi	r26, 0xEE	; 238
 304:	b0 e0       	ldi	r27, 0x00	; 0
 306:	8c 91       	ld	r24, X
 308:	80 7f       	andi	r24, 0xF0	; 240
 30a:	90 81       	ld	r25, Z
 30c:	89 2b       	or	r24, r25
 30e:	8c 93       	st	X, r24
		LCDDR7 = (LCDDR7 & 0xF0) | segment[1];
 310:	a3 ef       	ldi	r26, 0xF3	; 243
 312:	b0 e0       	ldi	r27, 0x00	; 0
 314:	8c 91       	ld	r24, X
 316:	80 7f       	andi	r24, 0xF0	; 240
 318:	92 81       	ldd	r25, Z+2	; 0x02
 31a:	89 2b       	or	r24, r25
 31c:	8c 93       	st	X, r24
		LCDDR12 = (LCDDR12 & 0xF0) | segment[2];
 31e:	a8 ef       	ldi	r26, 0xF8	; 248
 320:	b0 e0       	ldi	r27, 0x00	; 0
 322:	8c 91       	ld	r24, X
 324:	80 7f       	andi	r24, 0xF0	; 240
 326:	94 81       	ldd	r25, Z+4	; 0x04
 328:	89 2b       	or	r24, r25
 32a:	8c 93       	st	X, r24
		LCDDR17 = (LCDDR17 & 0xF0) | segment[3];
 32c:	ad ef       	ldi	r26, 0xFD	; 253
 32e:	b0 e0       	ldi	r27, 0x00	; 0
 330:	8c 91       	ld	r24, X
 332:	80 7f       	andi	r24, 0xF0	; 240
 334:	96 81       	ldd	r25, Z+6	; 0x06
 336:	89 2b       	or	r24, r25
 338:	8c 93       	st	X, r24
		break;
	}
}
 33a:	cf 91       	pop	r28
 33c:	08 95       	ret

0000033e <writeLong>:

//writes a number i to LCD
void writeLong(long i) {
 33e:	8f 92       	push	r8
 340:	9f 92       	push	r9
 342:	af 92       	push	r10
 344:	bf 92       	push	r11
 346:	cf 92       	push	r12
 348:	df 92       	push	r13
 34a:	ef 92       	push	r14
 34c:	ff 92       	push	r15
 34e:	cf 93       	push	r28
	int pos = 4; //start writing at the rightmost pos

	//loop 5 times
	for (int count = 0; count < 5; count++) {
		//stop if number is 0.
		if (i == 0) {
 350:	61 15       	cp	r22, r1
 352:	71 05       	cpc	r23, r1
 354:	81 05       	cpc	r24, r1
 356:	91 05       	cpc	r25, r1
 358:	b1 f4       	brne	.+44     	; 0x386 <writeLong+0x48>
 35a:	2b c0       	rjmp	.+86     	; 0x3b2 <writeLong+0x74>
 35c:	c1 14       	cp	r12, r1
 35e:	d1 04       	cpc	r13, r1
 360:	e1 04       	cpc	r14, r1
 362:	f1 04       	cpc	r15, r1
 364:	31 f1       	breq	.+76     	; 0x3b2 <writeLong+0x74>
			return;
			//print LS number
			} else {
			//extract least significant digit and remove it from i
			int digit = i % 10;
			i /= 10;
 366:	c7 01       	movw	r24, r14
 368:	b6 01       	movw	r22, r12
 36a:	a5 01       	movw	r20, r10
 36c:	94 01       	movw	r18, r8
 36e:	0e 94 a6 03 	call	0x74c	; 0x74c <__divmodsi4>
 372:	69 01       	movw	r12, r18
 374:	7a 01       	movw	r14, r20
 376:	86 2f       	mov	r24, r22
			//'0' is 48 in ASCI and digit offsets to right ASCI char
			writeChar(digit + '0', pos);
 378:	6c 2f       	mov	r22, r28
 37a:	80 5d       	subi	r24, 0xD0	; 208
 37c:	0e 94 b5 00 	call	0x16a	; 0x16a <writeChar>
 380:	c1 50       	subi	r28, 0x01	; 1
 382:	60 f7       	brcc	.-40     	; 0x35c <writeLong+0x1e>
 384:	16 c0       	rjmp	.+44     	; 0x3b2 <writeLong+0x74>
			return;
			//print LS number
			} else {
			//extract least significant digit and remove it from i
			int digit = i % 10;
			i /= 10;
 386:	2a e0       	ldi	r18, 0x0A	; 10
 388:	30 e0       	ldi	r19, 0x00	; 0
 38a:	40 e0       	ldi	r20, 0x00	; 0
 38c:	50 e0       	ldi	r21, 0x00	; 0
 38e:	0e 94 a6 03 	call	0x74c	; 0x74c <__divmodsi4>
 392:	69 01       	movw	r12, r18
 394:	7a 01       	movw	r14, r20
 396:	86 2f       	mov	r24, r22
			//'0' is 48 in ASCI and digit offsets to right ASCI char
			writeChar(digit + '0', pos);
 398:	64 e0       	ldi	r22, 0x04	; 4
 39a:	80 5d       	subi	r24, 0xD0	; 208
 39c:	0e 94 b5 00 	call	0x16a	; 0x16a <writeChar>
 3a0:	c3 e0       	ldi	r28, 0x03	; 3
		if (i == 0) {
			return;
			//print LS number
			} else {
			//extract least significant digit and remove it from i
			int digit = i % 10;
 3a2:	0f 2e       	mov	r0, r31
 3a4:	fa e0       	ldi	r31, 0x0A	; 10
 3a6:	8f 2e       	mov	r8, r31
 3a8:	91 2c       	mov	r9, r1
 3aa:	a1 2c       	mov	r10, r1
 3ac:	b1 2c       	mov	r11, r1
 3ae:	f0 2d       	mov	r31, r0
 3b0:	d5 cf       	rjmp	.-86     	; 0x35c <writeLong+0x1e>
			//'0' is 48 in ASCI and digit offsets to right ASCI char
			writeChar(digit + '0', pos);
		}
		pos--; //next pos
	}
}
 3b2:	cf 91       	pop	r28
 3b4:	ff 90       	pop	r15
 3b6:	ef 90       	pop	r14
 3b8:	df 90       	pop	r13
 3ba:	cf 90       	pop	r12
 3bc:	bf 90       	pop	r11
 3be:	af 90       	pop	r10
 3c0:	9f 90       	pop	r9
 3c2:	8f 90       	pop	r8
 3c4:	08 95       	ret

000003c6 <isPrime>:

bool isPrime(int number)
{
 3c6:	fc 01       	movw	r30, r24
	//0 and 1 are not prime numbers
	if (number <= 1) return false;
 3c8:	82 30       	cpi	r24, 0x02	; 2
 3ca:	91 05       	cpc	r25, r1
 3cc:	1c f1       	brlt	.+70     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>

	//loop from 2 to sqrt(number)
	for (int i=2; i*i <= number; i++)
 3ce:	84 30       	cpi	r24, 0x04	; 4
 3d0:	91 05       	cpc	r25, r1
 3d2:	14 f1       	brlt	.+68     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
	{
		if (number % i == 0) return false;	//divisible => not prime
 3d4:	81 70       	andi	r24, 0x01	; 1
 3d6:	90 78       	andi	r25, 0x80	; 128
 3d8:	99 23       	and	r25, r25
 3da:	24 f4       	brge	.+8      	; 0x3e4 <isPrime+0x1e>
 3dc:	01 97       	sbiw	r24, 0x01	; 1
 3de:	8e 6f       	ori	r24, 0xFE	; 254
 3e0:	9f 6f       	ori	r25, 0xFF	; 255
 3e2:	01 96       	adiw	r24, 0x01	; 1
 3e4:	89 2b       	or	r24, r25
 3e6:	d1 f0       	breq	.+52     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 3e8:	22 e0       	ldi	r18, 0x02	; 2
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	06 c0       	rjmp	.+12     	; 0x3fa <isPrime+0x34>
 3ee:	cf 01       	movw	r24, r30
 3f0:	b9 01       	movw	r22, r18
 3f2:	0e 94 92 03 	call	0x724	; 0x724 <__divmodhi4>
 3f6:	89 2b       	or	r24, r25
 3f8:	99 f0       	breq	.+38     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
{
	//0 and 1 are not prime numbers
	if (number <= 1) return false;

	//loop from 2 to sqrt(number)
	for (int i=2; i*i <= number; i++)
 3fa:	2f 5f       	subi	r18, 0xFF	; 255
 3fc:	3f 4f       	sbci	r19, 0xFF	; 255
 3fe:	22 9f       	mul	r18, r18
 400:	c0 01       	movw	r24, r0
 402:	23 9f       	mul	r18, r19
 404:	90 0d       	add	r25, r0
 406:	90 0d       	add	r25, r0
 408:	11 24       	eor	r1, r1
 40a:	e8 17       	cp	r30, r24
 40c:	f9 07       	cpc	r31, r25
 40e:	7c f7       	brge	.-34     	; 0x3ee <isPrime+0x28>
	{
		if (number % i == 0) return false;	//divisible => not prime
	}
	//is prime if no factors
	return true;
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	08 95       	ret
}

bool isPrime(int number)
{
	//0 and 1 are not prime numbers
	if (number <= 1) return false;
 414:	80 e0       	ldi	r24, 0x00	; 0
 416:	08 95       	ret
	for (int i=2; i*i <= number; i++)
	{
		if (number % i == 0) return false;	//divisible => not prime
	}
	//is prime if no factors
	return true;
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	08 95       	ret
	if (number <= 1) return false;

	//loop from 2 to sqrt(number)
	for (int i=2; i*i <= number; i++)
	{
		if (number % i == 0) return false;	//divisible => not prime
 41c:	80 e0       	ldi	r24, 0x00	; 0
 41e:	08 95       	ret
 420:	80 e0       	ldi	r24, 0x00	; 0
	}
	//is prime if no factors
	return true;
}
 422:	08 95       	ret

00000424 <primes>:

void primes() {
	long i = 1;
 424:	c1 2c       	mov	r12, r1
 426:	d1 2c       	mov	r13, r1
 428:	76 01       	movw	r14, r12
 42a:	c3 94       	inc	r12
	while (true) {
		if (isPrime(i))
 42c:	c6 01       	movw	r24, r12
 42e:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <isPrime>
 432:	88 23       	and	r24, r24
 434:	69 f0       	breq	.+26     	; 0x450 <primes+0x2c>
		{
			writeLong(i);
 436:	c7 01       	movw	r24, r14
 438:	b6 01       	movw	r22, r12
 43a:	0e 94 9f 01 	call	0x33e	; 0x33e <writeLong>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 43e:	2f e7       	ldi	r18, 0x7F	; 127
 440:	84 e8       	ldi	r24, 0x84	; 132
 442:	9e e1       	ldi	r25, 0x1E	; 30
 444:	21 50       	subi	r18, 0x01	; 1
 446:	80 40       	sbci	r24, 0x00	; 0
 448:	90 40       	sbci	r25, 0x00	; 0
 44a:	e1 f7       	brne	.-8      	; 0x444 <primes+0x20>
 44c:	00 c0       	rjmp	.+0      	; 0x44e <primes+0x2a>
 44e:	00 00       	nop
			_delay_ms(10000);
		}
		i++;
 450:	2f ef       	ldi	r18, 0xFF	; 255
 452:	c2 1a       	sub	r12, r18
 454:	d2 0a       	sbc	r13, r18
 456:	e2 0a       	sbc	r14, r18
 458:	f2 0a       	sbc	r15, r18
	}
 45a:	e8 cf       	rjmp	.-48     	; 0x42c <primes+0x8>

0000045c <toggle_lcd>:
	}
}

// Toggle between two LCD segments
void toggle_lcd(uint8_t *current_segment) {
	if (*current_segment == LCD_SEGMENT1) {
 45c:	fc 01       	movw	r30, r24
 45e:	20 81       	ld	r18, Z
 460:	21 30       	cpi	r18, 0x01	; 1
 462:	69 f4       	brne	.+26     	; 0x47e <toggle_lcd+0x22>
		*current_segment = LCD_SEGMENT2;
 464:	20 e2       	ldi	r18, 0x20	; 32
 466:	20 83       	st	Z, r18
		// Clear LCD segment 1
		LCDDR3 &= ~LCD_SEGMENT1;
 468:	ef ee       	ldi	r30, 0xEF	; 239
 46a:	f0 e0       	ldi	r31, 0x00	; 0
 46c:	80 81       	ld	r24, Z
 46e:	8e 7f       	andi	r24, 0xFE	; 254
 470:	80 83       	st	Z, r24
		// Update to LCD segment 2
		LCDDR2 = (LCDDR2 & 0xFF) | LCD_SEGMENT2;
 472:	ee ee       	ldi	r30, 0xEE	; 238
 474:	f0 e0       	ldi	r31, 0x00	; 0
 476:	80 81       	ld	r24, Z
 478:	80 62       	ori	r24, 0x20	; 32
 47a:	80 83       	st	Z, r24
 47c:	08 95       	ret
		} else {
		*current_segment = LCD_SEGMENT1;
 47e:	21 e0       	ldi	r18, 0x01	; 1
 480:	fc 01       	movw	r30, r24
 482:	20 83       	st	Z, r18
		// Clear LCD segment 2
		LCDDR2 &= ~LCD_SEGMENT2;
 484:	ee ee       	ldi	r30, 0xEE	; 238
 486:	f0 e0       	ldi	r31, 0x00	; 0
 488:	80 81       	ld	r24, Z
 48a:	8f 7d       	andi	r24, 0xDF	; 223
 48c:	80 83       	st	Z, r24
		// Update to LCD segment 1
		LCDDR3 = (LCDDR3 & 0xFF) | LCD_SEGMENT1;
 48e:	ef ee       	ldi	r30, 0xEF	; 239
 490:	f0 e0       	ldi	r31, 0x00	; 0
 492:	80 81       	ld	r24, Z
 494:	81 60       	ori	r24, 0x01	; 1
 496:	80 83       	st	Z, r24
 498:	08 95       	ret

0000049a <button>:

void button() {
	static uint8_t current_segment = LCD_SEGMENT1;

	while (true) {
		lock(&button_mutex);
 49a:	8e e5       	ldi	r24, 0x5E	; 94
 49c:	91 e0       	ldi	r25, 0x01	; 1
 49e:	0e 94 3e 03 	call	0x67c	; 0x67c <lock>
		toggle_lcd(&current_segment);
 4a2:	80 e0       	ldi	r24, 0x00	; 0
 4a4:	91 e0       	ldi	r25, 0x01	; 1
 4a6:	0e 94 2e 02 	call	0x45c	; 0x45c <toggle_lcd>
 4aa:	f7 cf       	rjmp	.-18     	; 0x49a <button>

000004ac <main>:
	}
}


int main(void) {
	init();
 4ac:	0e 94 62 00 	call	0xc4	; 0xc4 <init>
	LCD_init();
 4b0:	0e 94 7d 00 	call	0xfa	; 0xfa <LCD_init>
	spawn(button, 0);
 4b4:	60 e0       	ldi	r22, 0x00	; 0
 4b6:	70 e0       	ldi	r23, 0x00	; 0
 4b8:	8d e4       	ldi	r24, 0x4D	; 77
 4ba:	92 e0       	ldi	r25, 0x02	; 2
 4bc:	0e 94 9f 02 	call	0x53e	; 0x53e <spawn>
	spawn(blink, 0);
 4c0:	60 e0       	ldi	r22, 0x00	; 0
 4c2:	70 e0       	ldi	r23, 0x00	; 0
 4c4:	87 e5       	ldi	r24, 0x57	; 87
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	0e 94 9f 02 	call	0x53e	; 0x53e <spawn>
	primes();
 4cc:	0e 94 12 02 	call	0x424	; 0x424 <primes>

000004d0 <enqueue>:
int getTimer() {
	return interruptTimer;
}

void setTimer0() {
	interruptTimer = 0;
 4d0:	dc 01       	movw	r26, r24
 4d2:	15 96       	adiw	r26, 0x05	; 5
 4d4:	1c 92       	st	X, r1
 4d6:	1e 92       	st	-X, r1
 4d8:	14 97       	sbiw	r26, 0x04	; 4
 4da:	db 01       	movw	r26, r22
 4dc:	ed 91       	ld	r30, X+
 4de:	fc 91       	ld	r31, X
 4e0:	11 97       	sbiw	r26, 0x01	; 1
 4e2:	30 97       	sbiw	r30, 0x00	; 0
 4e4:	21 f4       	brne	.+8      	; 0x4ee <enqueue+0x1e>
 4e6:	8d 93       	st	X+, r24
 4e8:	9c 93       	st	X, r25
 4ea:	08 95       	ret
 4ec:	f9 01       	movw	r30, r18
 4ee:	24 81       	ldd	r18, Z+4	; 0x04
 4f0:	35 81       	ldd	r19, Z+5	; 0x05
 4f2:	21 15       	cp	r18, r1
 4f4:	31 05       	cpc	r19, r1
 4f6:	d1 f7       	brne	.-12     	; 0x4ec <enqueue+0x1c>
 4f8:	95 83       	std	Z+5, r25	; 0x05
 4fa:	84 83       	std	Z+4, r24	; 0x04
 4fc:	08 95       	ret

000004fe <dispatch>:
 4fe:	cf 93       	push	r28
 500:	df 93       	push	r29
 502:	00 d0       	rcall	.+0      	; 0x504 <__stack+0x5>
 504:	cd b7       	in	r28, 0x3d	; 61
 506:	de b7       	in	r29, 0x3e	; 62
 508:	9a 83       	std	Y+2, r25	; 0x02
 50a:	89 83       	std	Y+1, r24	; 0x01
 50c:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <current>
 510:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <current+0x1>
 514:	06 96       	adiw	r24, 0x06	; 6
 516:	0e 94 01 04 	call	0x802	; 0x802 <setjmp>
 51a:	89 2b       	or	r24, r25
 51c:	59 f4       	brne	.+22     	; 0x534 <__stack+0x35>
 51e:	89 81       	ldd	r24, Y+1	; 0x01
 520:	9a 81       	ldd	r25, Y+2	; 0x02
 522:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <current+0x1>
 526:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <current>
 52a:	61 e0       	ldi	r22, 0x01	; 1
 52c:	70 e0       	ldi	r23, 0x00	; 0
 52e:	06 96       	adiw	r24, 0x06	; 6
 530:	0e 94 21 04 	call	0x842	; 0x842 <longjmp>
 534:	0f 90       	pop	r0
 536:	0f 90       	pop	r0
 538:	df 91       	pop	r29
 53a:	cf 91       	pop	r28
 53c:	08 95       	ret

0000053e <spawn>:
 53e:	cf 93       	push	r28
 540:	df 93       	push	r29
 542:	00 d0       	rcall	.+0      	; 0x544 <spawn+0x6>
 544:	cd b7       	in	r28, 0x3d	; 61
 546:	de b7       	in	r29, 0x3e	; 62
 548:	f8 94       	cli
 54a:	20 91 68 01 	lds	r18, 0x0168	; 0x800168 <initialized>
 54e:	30 91 69 01 	lds	r19, 0x0169	; 0x800169 <initialized+0x1>
 552:	23 2b       	or	r18, r19
 554:	e1 f4       	brne	.+56     	; 0x58e <spawn+0x50>
 556:	26 e4       	ldi	r18, 0x46	; 70
 558:	32 e0       	ldi	r19, 0x02	; 2
 55a:	30 93 de 01 	sts	0x01DE, r19	; 0x8001de <threads+0x5>
 55e:	20 93 dd 01 	sts	0x01DD, r18	; 0x8001dd <threads+0x4>
 562:	23 eb       	ldi	r18, 0xB3	; 179
 564:	32 e0       	ldi	r19, 0x02	; 2
 566:	30 93 4b 02 	sts	0x024B, r19	; 0x80024b <threads+0x72>
 56a:	20 93 4a 02 	sts	0x024A, r18	; 0x80024a <threads+0x71>
 56e:	20 e2       	ldi	r18, 0x20	; 32
 570:	33 e0       	ldi	r19, 0x03	; 3
 572:	30 93 b8 02 	sts	0x02B8, r19	; 0x8002b8 <threads+0xdf>
 576:	20 93 b7 02 	sts	0x02B7, r18	; 0x8002b7 <threads+0xde>
 57a:	10 92 25 03 	sts	0x0325, r1	; 0x800325 <threads+0x14c>
 57e:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <threads+0x14b>
 582:	21 e0       	ldi	r18, 0x01	; 1
 584:	30 e0       	ldi	r19, 0x00	; 0
 586:	30 93 69 01 	sts	0x0169, r19	; 0x800169 <initialized+0x1>
 58a:	20 93 68 01 	sts	0x0168, r18	; 0x800168 <initialized>
 58e:	20 91 53 01 	lds	r18, 0x0153	; 0x800153 <freeQ>
 592:	30 91 54 01 	lds	r19, 0x0154	; 0x800154 <freeQ+0x1>
 596:	3a 83       	std	Y+2, r19	; 0x02
 598:	29 83       	std	Y+1, r18	; 0x01
 59a:	23 2b       	or	r18, r19
 59c:	a9 f0       	breq	.+42     	; 0x5c8 <spawn+0x8a>
 59e:	e9 81       	ldd	r30, Y+1	; 0x01
 5a0:	fa 81       	ldd	r31, Y+2	; 0x02
 5a2:	44 81       	ldd	r20, Z+4	; 0x04
 5a4:	55 81       	ldd	r21, Z+5	; 0x05
 5a6:	50 93 54 01 	sts	0x0154, r21	; 0x800154 <freeQ+0x1>
 5aa:	40 93 53 01 	sts	0x0153, r20	; 0x800153 <freeQ>
 5ae:	91 83       	std	Z+1, r25	; 0x01
 5b0:	80 83       	st	Z, r24
 5b2:	73 83       	std	Z+3, r23	; 0x03
 5b4:	62 83       	std	Z+2, r22	; 0x02
 5b6:	15 82       	std	Z+5, r1	; 0x05
 5b8:	14 82       	std	Z+4, r1	; 0x04
 5ba:	cf 01       	movw	r24, r30
 5bc:	06 96       	adiw	r24, 0x06	; 6
 5be:	0e 94 01 04 	call	0x802	; 0x802 <setjmp>
 5c2:	01 97       	sbiw	r24, 0x01	; 1
 5c4:	49 f5       	brne	.+82     	; 0x618 <spawn+0xda>
 5c6:	01 c0       	rjmp	.+2      	; 0x5ca <spawn+0x8c>
 5c8:	ff cf       	rjmp	.-2      	; 0x5c8 <spawn+0x8a>
 5ca:	78 94       	sei
 5cc:	a0 91 51 01 	lds	r26, 0x0151	; 0x800151 <current>
 5d0:	b0 91 52 01 	lds	r27, 0x0152	; 0x800152 <current+0x1>
 5d4:	ed 91       	ld	r30, X+
 5d6:	fc 91       	ld	r31, X
 5d8:	11 97       	sbiw	r26, 0x01	; 1
 5da:	12 96       	adiw	r26, 0x02	; 2
 5dc:	8d 91       	ld	r24, X+
 5de:	9c 91       	ld	r25, X
 5e0:	13 97       	sbiw	r26, 0x03	; 3
 5e2:	09 95       	icall
 5e4:	f8 94       	cli
 5e6:	63 e5       	ldi	r22, 0x53	; 83
 5e8:	71 e0       	ldi	r23, 0x01	; 1
 5ea:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <current>
 5ee:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <current+0x1>
 5f2:	0e 94 68 02 	call	0x4d0	; 0x4d0 <enqueue>
 5f6:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <readyQ>
 5fa:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <readyQ+0x1>
 5fe:	00 97       	sbiw	r24, 0x00	; 0
 600:	51 f0       	breq	.+20     	; 0x616 <spawn+0xd8>
 602:	fc 01       	movw	r30, r24
 604:	24 81       	ldd	r18, Z+4	; 0x04
 606:	35 81       	ldd	r19, Z+5	; 0x05
 608:	30 93 6b 01 	sts	0x016B, r19	; 0x80016b <readyQ+0x1>
 60c:	20 93 6a 01 	sts	0x016A, r18	; 0x80016a <readyQ>
 610:	0e 94 7f 02 	call	0x4fe	; 0x4fe <dispatch>
 614:	01 c0       	rjmp	.+2      	; 0x618 <spawn+0xda>
 616:	ff cf       	rjmp	.-2      	; 0x616 <spawn+0xd8>
 618:	e9 81       	ldd	r30, Y+1	; 0x01
 61a:	fa 81       	ldd	r31, Y+2	; 0x02
 61c:	36 96       	adiw	r30, 0x06	; 6
 61e:	89 81       	ldd	r24, Y+1	; 0x01
 620:	9a 81       	ldd	r25, Y+2	; 0x02
 622:	87 59       	subi	r24, 0x97	; 151
 624:	9f 4f       	sbci	r25, 0xFF	; 255
 626:	91 8b       	std	Z+17, r25	; 0x11
 628:	80 8b       	std	Z+16, r24	; 0x10
 62a:	93 8b       	std	Z+19, r25	; 0x13
 62c:	82 8b       	std	Z+18, r24	; 0x12
 62e:	6a e6       	ldi	r22, 0x6A	; 106
 630:	71 e0       	ldi	r23, 0x01	; 1
 632:	89 81       	ldd	r24, Y+1	; 0x01
 634:	9a 81       	ldd	r25, Y+2	; 0x02
 636:	0e 94 68 02 	call	0x4d0	; 0x4d0 <enqueue>
 63a:	78 94       	sei
 63c:	0f 90       	pop	r0
 63e:	0f 90       	pop	r0
 640:	df 91       	pop	r29
 642:	cf 91       	pop	r28
 644:	08 95       	ret

00000646 <yield>:
 646:	f8 94       	cli
 648:	6a e6       	ldi	r22, 0x6A	; 106
 64a:	71 e0       	ldi	r23, 0x01	; 1
 64c:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <current>
 650:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <current+0x1>
 654:	0e 94 68 02 	call	0x4d0	; 0x4d0 <enqueue>
 658:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <readyQ>
 65c:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <readyQ+0x1>
 660:	00 97       	sbiw	r24, 0x00	; 0
 662:	59 f0       	breq	.+22     	; 0x67a <yield+0x34>
 664:	fc 01       	movw	r30, r24
 666:	24 81       	ldd	r18, Z+4	; 0x04
 668:	35 81       	ldd	r19, Z+5	; 0x05
 66a:	30 93 6b 01 	sts	0x016B, r19	; 0x80016b <readyQ+0x1>
 66e:	20 93 6a 01 	sts	0x016A, r18	; 0x80016a <readyQ>
 672:	0e 94 7f 02 	call	0x4fe	; 0x4fe <dispatch>
 676:	78 94       	sei
 678:	08 95       	ret
 67a:	ff cf       	rjmp	.-2      	; 0x67a <yield+0x34>

0000067c <lock>:
 67c:	f8 94       	cli
 67e:	fc 01       	movw	r30, r24
 680:	20 81       	ld	r18, Z
 682:	31 81       	ldd	r19, Z+1	; 0x01
 684:	23 2b       	or	r18, r19
 686:	d1 f0       	breq	.+52     	; 0x6bc <lock+0x40>
 688:	bc 01       	movw	r22, r24
 68a:	6e 5f       	subi	r22, 0xFE	; 254
 68c:	7f 4f       	sbci	r23, 0xFF	; 255
 68e:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <current>
 692:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <current+0x1>
 696:	0e 94 68 02 	call	0x4d0	; 0x4d0 <enqueue>
 69a:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <readyQ>
 69e:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <readyQ+0x1>
 6a2:	00 97       	sbiw	r24, 0x00	; 0
 6a4:	51 f0       	breq	.+20     	; 0x6ba <lock+0x3e>
 6a6:	fc 01       	movw	r30, r24
 6a8:	24 81       	ldd	r18, Z+4	; 0x04
 6aa:	35 81       	ldd	r19, Z+5	; 0x05
 6ac:	30 93 6b 01 	sts	0x016B, r19	; 0x80016b <readyQ+0x1>
 6b0:	20 93 6a 01 	sts	0x016A, r18	; 0x80016a <readyQ>
 6b4:	0e 94 7f 02 	call	0x4fe	; 0x4fe <dispatch>
 6b8:	06 c0       	rjmp	.+12     	; 0x6c6 <lock+0x4a>
 6ba:	ff cf       	rjmp	.-2      	; 0x6ba <lock+0x3e>
 6bc:	21 e0       	ldi	r18, 0x01	; 1
 6be:	30 e0       	ldi	r19, 0x00	; 0
 6c0:	fc 01       	movw	r30, r24
 6c2:	31 83       	std	Z+1, r19	; 0x01
 6c4:	20 83       	st	Z, r18
 6c6:	78 94       	sei
 6c8:	08 95       	ret

000006ca <__vector_7>:
	return;
}

// Timer interupt
ISR(TIMER1_COMPA_vect) {
 6ca:	1f 92       	push	r1
 6cc:	0f 92       	push	r0
 6ce:	0f b6       	in	r0, 0x3f	; 63
 6d0:	0f 92       	push	r0
 6d2:	11 24       	eor	r1, r1
 6d4:	2f 93       	push	r18
 6d6:	3f 93       	push	r19
 6d8:	4f 93       	push	r20
 6da:	5f 93       	push	r21
 6dc:	6f 93       	push	r22
 6de:	7f 93       	push	r23
 6e0:	8f 93       	push	r24
 6e2:	9f 93       	push	r25
 6e4:	af 93       	push	r26
 6e6:	bf 93       	push	r27
 6e8:	ef 93       	push	r30
 6ea:	ff 93       	push	r31
	interruptTimer++;
 6ec:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <interruptTimer>
 6f0:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <interruptTimer+0x1>
 6f4:	01 96       	adiw	r24, 0x01	; 1
 6f6:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <interruptTimer+0x1>
 6fa:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <interruptTimer>
	yield(); // Call yield() to switch threads
 6fe:	0e 94 23 03 	call	0x646	; 0x646 <yield>
}
 702:	ff 91       	pop	r31
 704:	ef 91       	pop	r30
 706:	bf 91       	pop	r27
 708:	af 91       	pop	r26
 70a:	9f 91       	pop	r25
 70c:	8f 91       	pop	r24
 70e:	7f 91       	pop	r23
 710:	6f 91       	pop	r22
 712:	5f 91       	pop	r21
 714:	4f 91       	pop	r20
 716:	3f 91       	pop	r19
 718:	2f 91       	pop	r18
 71a:	0f 90       	pop	r0
 71c:	0f be       	out	0x3f, r0	; 63
 71e:	0f 90       	pop	r0
 720:	1f 90       	pop	r1
 722:	18 95       	reti

00000724 <__divmodhi4>:
 724:	97 fb       	bst	r25, 7
 726:	07 2e       	mov	r0, r23
 728:	16 f4       	brtc	.+4      	; 0x72e <__divmodhi4+0xa>
 72a:	00 94       	com	r0
 72c:	07 d0       	rcall	.+14     	; 0x73c <__divmodhi4_neg1>
 72e:	77 fd       	sbrc	r23, 7
 730:	09 d0       	rcall	.+18     	; 0x744 <__divmodhi4_neg2>
 732:	0e 94 cb 03 	call	0x796	; 0x796 <__udivmodhi4>
 736:	07 fc       	sbrc	r0, 7
 738:	05 d0       	rcall	.+10     	; 0x744 <__divmodhi4_neg2>
 73a:	3e f4       	brtc	.+14     	; 0x74a <__divmodhi4_exit>

0000073c <__divmodhi4_neg1>:
 73c:	90 95       	com	r25
 73e:	81 95       	neg	r24
 740:	9f 4f       	sbci	r25, 0xFF	; 255
 742:	08 95       	ret

00000744 <__divmodhi4_neg2>:
 744:	70 95       	com	r23
 746:	61 95       	neg	r22
 748:	7f 4f       	sbci	r23, 0xFF	; 255

0000074a <__divmodhi4_exit>:
 74a:	08 95       	ret

0000074c <__divmodsi4>:
 74c:	05 2e       	mov	r0, r21
 74e:	97 fb       	bst	r25, 7
 750:	1e f4       	brtc	.+6      	; 0x758 <__divmodsi4+0xc>
 752:	00 94       	com	r0
 754:	0e 94 bd 03 	call	0x77a	; 0x77a <__negsi2>
 758:	57 fd       	sbrc	r21, 7
 75a:	07 d0       	rcall	.+14     	; 0x76a <__divmodsi4_neg2>
 75c:	0e 94 df 03 	call	0x7be	; 0x7be <__udivmodsi4>
 760:	07 fc       	sbrc	r0, 7
 762:	03 d0       	rcall	.+6      	; 0x76a <__divmodsi4_neg2>
 764:	4e f4       	brtc	.+18     	; 0x778 <__divmodsi4_exit>
 766:	0c 94 bd 03 	jmp	0x77a	; 0x77a <__negsi2>

0000076a <__divmodsi4_neg2>:
 76a:	50 95       	com	r21
 76c:	40 95       	com	r20
 76e:	30 95       	com	r19
 770:	21 95       	neg	r18
 772:	3f 4f       	sbci	r19, 0xFF	; 255
 774:	4f 4f       	sbci	r20, 0xFF	; 255
 776:	5f 4f       	sbci	r21, 0xFF	; 255

00000778 <__divmodsi4_exit>:
 778:	08 95       	ret

0000077a <__negsi2>:
 77a:	90 95       	com	r25
 77c:	80 95       	com	r24
 77e:	70 95       	com	r23
 780:	61 95       	neg	r22
 782:	7f 4f       	sbci	r23, 0xFF	; 255
 784:	8f 4f       	sbci	r24, 0xFF	; 255
 786:	9f 4f       	sbci	r25, 0xFF	; 255
 788:	08 95       	ret

0000078a <__tablejump2__>:
 78a:	ee 0f       	add	r30, r30
 78c:	ff 1f       	adc	r31, r31
 78e:	05 90       	lpm	r0, Z+
 790:	f4 91       	lpm	r31, Z
 792:	e0 2d       	mov	r30, r0
 794:	09 94       	ijmp

00000796 <__udivmodhi4>:
 796:	aa 1b       	sub	r26, r26
 798:	bb 1b       	sub	r27, r27
 79a:	51 e1       	ldi	r21, 0x11	; 17
 79c:	07 c0       	rjmp	.+14     	; 0x7ac <__udivmodhi4_ep>

0000079e <__udivmodhi4_loop>:
 79e:	aa 1f       	adc	r26, r26
 7a0:	bb 1f       	adc	r27, r27
 7a2:	a6 17       	cp	r26, r22
 7a4:	b7 07       	cpc	r27, r23
 7a6:	10 f0       	brcs	.+4      	; 0x7ac <__udivmodhi4_ep>
 7a8:	a6 1b       	sub	r26, r22
 7aa:	b7 0b       	sbc	r27, r23

000007ac <__udivmodhi4_ep>:
 7ac:	88 1f       	adc	r24, r24
 7ae:	99 1f       	adc	r25, r25
 7b0:	5a 95       	dec	r21
 7b2:	a9 f7       	brne	.-22     	; 0x79e <__udivmodhi4_loop>
 7b4:	80 95       	com	r24
 7b6:	90 95       	com	r25
 7b8:	bc 01       	movw	r22, r24
 7ba:	cd 01       	movw	r24, r26
 7bc:	08 95       	ret

000007be <__udivmodsi4>:
 7be:	a1 e2       	ldi	r26, 0x21	; 33
 7c0:	1a 2e       	mov	r1, r26
 7c2:	aa 1b       	sub	r26, r26
 7c4:	bb 1b       	sub	r27, r27
 7c6:	fd 01       	movw	r30, r26
 7c8:	0d c0       	rjmp	.+26     	; 0x7e4 <__udivmodsi4_ep>

000007ca <__udivmodsi4_loop>:
 7ca:	aa 1f       	adc	r26, r26
 7cc:	bb 1f       	adc	r27, r27
 7ce:	ee 1f       	adc	r30, r30
 7d0:	ff 1f       	adc	r31, r31
 7d2:	a2 17       	cp	r26, r18
 7d4:	b3 07       	cpc	r27, r19
 7d6:	e4 07       	cpc	r30, r20
 7d8:	f5 07       	cpc	r31, r21
 7da:	20 f0       	brcs	.+8      	; 0x7e4 <__udivmodsi4_ep>
 7dc:	a2 1b       	sub	r26, r18
 7de:	b3 0b       	sbc	r27, r19
 7e0:	e4 0b       	sbc	r30, r20
 7e2:	f5 0b       	sbc	r31, r21

000007e4 <__udivmodsi4_ep>:
 7e4:	66 1f       	adc	r22, r22
 7e6:	77 1f       	adc	r23, r23
 7e8:	88 1f       	adc	r24, r24
 7ea:	99 1f       	adc	r25, r25
 7ec:	1a 94       	dec	r1
 7ee:	69 f7       	brne	.-38     	; 0x7ca <__udivmodsi4_loop>
 7f0:	60 95       	com	r22
 7f2:	70 95       	com	r23
 7f4:	80 95       	com	r24
 7f6:	90 95       	com	r25
 7f8:	9b 01       	movw	r18, r22
 7fa:	ac 01       	movw	r20, r24
 7fc:	bd 01       	movw	r22, r26
 7fe:	cf 01       	movw	r24, r30
 800:	08 95       	ret

00000802 <setjmp>:
 802:	dc 01       	movw	r26, r24
 804:	2d 92       	st	X+, r2
 806:	3d 92       	st	X+, r3
 808:	4d 92       	st	X+, r4
 80a:	5d 92       	st	X+, r5
 80c:	6d 92       	st	X+, r6
 80e:	7d 92       	st	X+, r7
 810:	8d 92       	st	X+, r8
 812:	9d 92       	st	X+, r9
 814:	ad 92       	st	X+, r10
 816:	bd 92       	st	X+, r11
 818:	cd 92       	st	X+, r12
 81a:	dd 92       	st	X+, r13
 81c:	ed 92       	st	X+, r14
 81e:	fd 92       	st	X+, r15
 820:	0d 93       	st	X+, r16
 822:	1d 93       	st	X+, r17
 824:	cd 93       	st	X+, r28
 826:	dd 93       	st	X+, r29
 828:	ff 91       	pop	r31
 82a:	ef 91       	pop	r30
 82c:	8d b7       	in	r24, 0x3d	; 61
 82e:	8d 93       	st	X+, r24
 830:	8e b7       	in	r24, 0x3e	; 62
 832:	8d 93       	st	X+, r24
 834:	8f b7       	in	r24, 0x3f	; 63
 836:	8d 93       	st	X+, r24
 838:	ed 93       	st	X+, r30
 83a:	fd 93       	st	X+, r31
 83c:	88 27       	eor	r24, r24
 83e:	99 27       	eor	r25, r25
 840:	09 94       	ijmp

00000842 <longjmp>:
 842:	dc 01       	movw	r26, r24
 844:	cb 01       	movw	r24, r22
 846:	81 30       	cpi	r24, 0x01	; 1
 848:	91 05       	cpc	r25, r1
 84a:	81 1d       	adc	r24, r1
 84c:	2d 90       	ld	r2, X+
 84e:	3d 90       	ld	r3, X+
 850:	4d 90       	ld	r4, X+
 852:	5d 90       	ld	r5, X+
 854:	6d 90       	ld	r6, X+
 856:	7d 90       	ld	r7, X+
 858:	8d 90       	ld	r8, X+
 85a:	9d 90       	ld	r9, X+
 85c:	ad 90       	ld	r10, X+
 85e:	bd 90       	ld	r11, X+
 860:	cd 90       	ld	r12, X+
 862:	dd 90       	ld	r13, X+
 864:	ed 90       	ld	r14, X+
 866:	fd 90       	ld	r15, X+
 868:	0d 91       	ld	r16, X+
 86a:	1d 91       	ld	r17, X+
 86c:	cd 91       	ld	r28, X+
 86e:	dd 91       	ld	r29, X+
 870:	ed 91       	ld	r30, X+
 872:	fd 91       	ld	r31, X+
 874:	0d 90       	ld	r0, X+
 876:	f8 94       	cli
 878:	fe bf       	out	0x3e, r31	; 62
 87a:	0f be       	out	0x3f, r0	; 63
 87c:	ed bf       	out	0x3d, r30	; 61
 87e:	ed 91       	ld	r30, X+
 880:	fd 91       	ld	r31, X+
 882:	09 94       	ijmp

00000884 <_exit>:
 884:	f8 94       	cli

00000886 <__stop_program>:
 886:	ff cf       	rjmp	.-2      	; 0x886 <__stop_program>
