
Part3.2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000056  00800100  00000972  00000a06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000972  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000237  00800156  00800156  00000a5c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a5c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a8c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000acc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001427  00000000  00000000  00000b94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b5d  00000000  00000000  00001fbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000085a  00000000  00000000  00002b18  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000240  00000000  00000000  00003374  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000064e  00000000  00000000  000035b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000af7  00000000  00000000  00003c02  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  000046f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 82 02 	jmp	0x504	; 0x504 <__vector_3>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <__vector_7>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	b8 00       	.word	0x00b8	; ????
  5e:	9a 00       	.word	0x009a	; ????
  60:	9d 00       	.word	0x009d	; ????
  62:	a0 00       	.word	0x00a0	; ????
  64:	a3 00       	.word	0x00a3	; ????
  66:	a6 00       	.word	0x00a6	; ????
  68:	a9 00       	.word	0x00a9	; ????
  6a:	ac 00       	.word	0x00ac	; ????
  6c:	af 00       	.word	0x00af	; ????
  6e:	b2 00       	.word	0x00b2	; ????

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e2 e7       	ldi	r30, 0x72	; 114
  84:	f9 e0       	ldi	r31, 0x09	; 9
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a6 35       	cpi	r26, 0x56	; 86
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	23 e0       	ldi	r18, 0x03	; 3
  94:	a6 e5       	ldi	r26, 0x56	; 86
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	ad 38       	cpi	r26, 0x8D	; 141
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 b3 02 	call	0x566	; 0x566 <main>
  a6:	0c 94 b7 04 	jmp	0x96e	; 0x96e <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <blink>:
		lock(&button_mutex);
		toggle_lcd(&current_segment);
	}
}

void keyCounter() {
  ae:	cc ee       	ldi	r28, 0xEC	; 236
  b0:	d0 e0       	ldi	r29, 0x00	; 0
  b2:	12 e0       	ldi	r17, 0x02	; 2
  b4:	88 e6       	ldi	r24, 0x68	; 104
  b6:	91 e0       	ldi	r25, 0x01	; 1
  b8:	0e 94 b4 03 	call	0x768	; 0x768 <lock>
  bc:	88 81       	ld	r24, Y
  be:	81 27       	eor	r24, r17
  c0:	88 83       	st	Y, r24
  c2:	f8 cf       	rjmp	.-16     	; 0xb4 <blink+0x6>

000000c4 <init>:
  c4:	e1 e6       	ldi	r30, 0x61	; 97
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 e8       	ldi	r24, 0x80	; 128
  ca:	80 83       	st	Z, r24
  cc:	10 82       	st	Z, r1
  ce:	e1 e8       	ldi	r30, 0x81	; 129
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	88 60       	ori	r24, 0x08	; 8
  d6:	80 83       	st	Z, r24
  d8:	82 e4       	ldi	r24, 0x42	; 66
  da:	9f e0       	ldi	r25, 0x0F	; 15
  dc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
  e0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
  e4:	80 81       	ld	r24, Z
  e6:	85 60       	ori	r24, 0x05	; 5
  e8:	80 83       	st	Z, r24
  ea:	ef e6       	ldi	r30, 0x6F	; 111
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	82 60       	ori	r24, 0x02	; 2
  f2:	80 83       	st	Z, r24
  f4:	27 98       	cbi	0x04, 7	; 4
  f6:	2f 9a       	sbi	0x05, 7	; 5
  f8:	ec e6       	ldi	r30, 0x6C	; 108
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	80 68       	ori	r24, 0x80	; 128
 100:	80 83       	st	Z, r24
 102:	ef 9a       	sbi	0x1d, 7	; 29
 104:	08 95       	ret

00000106 <LCD_init>:
 106:	8f e0       	ldi	r24, 0x0F	; 15
 108:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__DATA_REGION_ORIGIN__+0x87>
 10c:	87 eb       	ldi	r24, 0xB7	; 183
 10e:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
 112:	87 e0       	ldi	r24, 0x07	; 7
 114:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__DATA_REGION_ORIGIN__+0x86>
 118:	80 ec       	ldi	r24, 0xC0	; 192
 11a:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
 11e:	08 95       	ret

00000120 <getSegmentForChar>:
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	fc 01       	movw	r30, r24
 124:	f0 97       	sbiw	r30, 0x30	; 48
 126:	ea 30       	cpi	r30, 0x0A	; 10
 128:	f1 05       	cpc	r31, r1
 12a:	f8 f4       	brcc	.+62     	; 0x16a <getSegmentForChar+0x4a>
 12c:	e2 5d       	subi	r30, 0xD2	; 210
 12e:	ff 4f       	sbci	r31, 0xFF	; 255
 130:	0c 94 3a 04 	jmp	0x874	; 0x874 <__tablejump2__>
 134:	81 e4       	ldi	r24, 0x41	; 65
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	08 95       	ret
 13a:	89 e3       	ldi	r24, 0x39	; 57
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	08 95       	ret
 140:	81 e3       	ldi	r24, 0x31	; 49
 142:	91 e0       	ldi	r25, 0x01	; 1
 144:	08 95       	ret
 146:	89 e2       	ldi	r24, 0x29	; 41
 148:	91 e0       	ldi	r25, 0x01	; 1
 14a:	08 95       	ret
 14c:	81 e2       	ldi	r24, 0x21	; 33
 14e:	91 e0       	ldi	r25, 0x01	; 1
 150:	08 95       	ret
 152:	89 e1       	ldi	r24, 0x19	; 25
 154:	91 e0       	ldi	r25, 0x01	; 1
 156:	08 95       	ret
 158:	81 e1       	ldi	r24, 0x11	; 17
 15a:	91 e0       	ldi	r25, 0x01	; 1
 15c:	08 95       	ret
 15e:	89 e0       	ldi	r24, 0x09	; 9
 160:	91 e0       	ldi	r25, 0x01	; 1
 162:	08 95       	ret
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	91 e0       	ldi	r25, 0x01	; 1
 168:	08 95       	ret
 16a:	86 e5       	ldi	r24, 0x56	; 86
 16c:	91 e0       	ldi	r25, 0x01	; 1
 16e:	08 95       	ret
 170:	89 e4       	ldi	r24, 0x49	; 73
 172:	91 e0       	ldi	r25, 0x01	; 1
 174:	08 95       	ret

00000176 <writeChar>:
 176:	cf 93       	push	r28
 178:	65 30       	cpi	r22, 0x05	; 5
 17a:	08 f0       	brcs	.+2      	; 0x17e <writeChar+0x8>
 17c:	e4 c0       	rjmp	.+456    	; 0x346 <writeChar+0x1d0>
 17e:	c6 2f       	mov	r28, r22
 180:	0e 94 90 00 	call	0x120	; 0x120 <getSegmentForChar>
 184:	fc 01       	movw	r30, r24
 186:	c2 30       	cpi	r28, 0x02	; 2
 188:	09 f4       	brne	.+2      	; 0x18c <writeChar+0x16>
 18a:	67 c0       	rjmp	.+206    	; 0x25a <writeChar+0xe4>
 18c:	28 f4       	brcc	.+10     	; 0x198 <writeChar+0x22>
 18e:	cc 23       	and	r28, r28
 190:	51 f0       	breq	.+20     	; 0x1a6 <writeChar+0x30>
 192:	c1 30       	cpi	r28, 0x01	; 1
 194:	29 f1       	breq	.+74     	; 0x1e0 <writeChar+0x6a>
 196:	d7 c0       	rjmp	.+430    	; 0x346 <writeChar+0x1d0>
 198:	c3 30       	cpi	r28, 0x03	; 3
 19a:	09 f4       	brne	.+2      	; 0x19e <writeChar+0x28>
 19c:	7b c0       	rjmp	.+246    	; 0x294 <writeChar+0x11e>
 19e:	c4 30       	cpi	r28, 0x04	; 4
 1a0:	09 f4       	brne	.+2      	; 0x1a4 <writeChar+0x2e>
 1a2:	b5 c0       	rjmp	.+362    	; 0x30e <writeChar+0x198>
 1a4:	d0 c0       	rjmp	.+416    	; 0x346 <writeChar+0x1d0>
 1a6:	ac ee       	ldi	r26, 0xEC	; 236
 1a8:	b0 e0       	ldi	r27, 0x00	; 0
 1aa:	8c 91       	ld	r24, X
 1ac:	80 7f       	andi	r24, 0xF0	; 240
 1ae:	90 81       	ld	r25, Z
 1b0:	89 2b       	or	r24, r25
 1b2:	8c 93       	st	X, r24
 1b4:	a1 ef       	ldi	r26, 0xF1	; 241
 1b6:	b0 e0       	ldi	r27, 0x00	; 0
 1b8:	8c 91       	ld	r24, X
 1ba:	80 7f       	andi	r24, 0xF0	; 240
 1bc:	92 81       	ldd	r25, Z+2	; 0x02
 1be:	89 2b       	or	r24, r25
 1c0:	8c 93       	st	X, r24
 1c2:	a6 ef       	ldi	r26, 0xF6	; 246
 1c4:	b0 e0       	ldi	r27, 0x00	; 0
 1c6:	8c 91       	ld	r24, X
 1c8:	80 7f       	andi	r24, 0xF0	; 240
 1ca:	94 81       	ldd	r25, Z+4	; 0x04
 1cc:	89 2b       	or	r24, r25
 1ce:	8c 93       	st	X, r24
 1d0:	ab ef       	ldi	r26, 0xFB	; 251
 1d2:	b0 e0       	ldi	r27, 0x00	; 0
 1d4:	8c 91       	ld	r24, X
 1d6:	80 7f       	andi	r24, 0xF0	; 240
 1d8:	96 81       	ldd	r25, Z+6	; 0x06
 1da:	89 2b       	or	r24, r25
 1dc:	8c 93       	st	X, r24
 1de:	b3 c0       	rjmp	.+358    	; 0x346 <writeChar+0x1d0>
 1e0:	ac ee       	ldi	r26, 0xEC	; 236
 1e2:	b0 e0       	ldi	r27, 0x00	; 0
 1e4:	2c 91       	ld	r18, X
 1e6:	80 81       	ld	r24, Z
 1e8:	91 81       	ldd	r25, Z+1	; 0x01
 1ea:	82 95       	swap	r24
 1ec:	92 95       	swap	r25
 1ee:	90 7f       	andi	r25, 0xF0	; 240
 1f0:	98 27       	eor	r25, r24
 1f2:	80 7f       	andi	r24, 0xF0	; 240
 1f4:	98 27       	eor	r25, r24
 1f6:	92 2f       	mov	r25, r18
 1f8:	9f 70       	andi	r25, 0x0F	; 15
 1fa:	89 2b       	or	r24, r25
 1fc:	8c 93       	st	X, r24
 1fe:	a1 ef       	ldi	r26, 0xF1	; 241
 200:	b0 e0       	ldi	r27, 0x00	; 0
 202:	2c 91       	ld	r18, X
 204:	82 81       	ldd	r24, Z+2	; 0x02
 206:	93 81       	ldd	r25, Z+3	; 0x03
 208:	82 95       	swap	r24
 20a:	92 95       	swap	r25
 20c:	90 7f       	andi	r25, 0xF0	; 240
 20e:	98 27       	eor	r25, r24
 210:	80 7f       	andi	r24, 0xF0	; 240
 212:	98 27       	eor	r25, r24
 214:	92 2f       	mov	r25, r18
 216:	9f 70       	andi	r25, 0x0F	; 15
 218:	89 2b       	or	r24, r25
 21a:	8c 93       	st	X, r24
 21c:	a6 ef       	ldi	r26, 0xF6	; 246
 21e:	b0 e0       	ldi	r27, 0x00	; 0
 220:	2c 91       	ld	r18, X
 222:	84 81       	ldd	r24, Z+4	; 0x04
 224:	95 81       	ldd	r25, Z+5	; 0x05
 226:	82 95       	swap	r24
 228:	92 95       	swap	r25
 22a:	90 7f       	andi	r25, 0xF0	; 240
 22c:	98 27       	eor	r25, r24
 22e:	80 7f       	andi	r24, 0xF0	; 240
 230:	98 27       	eor	r25, r24
 232:	92 2f       	mov	r25, r18
 234:	9f 70       	andi	r25, 0x0F	; 15
 236:	89 2b       	or	r24, r25
 238:	8c 93       	st	X, r24
 23a:	ab ef       	ldi	r26, 0xFB	; 251
 23c:	b0 e0       	ldi	r27, 0x00	; 0
 23e:	2c 91       	ld	r18, X
 240:	86 81       	ldd	r24, Z+6	; 0x06
 242:	97 81       	ldd	r25, Z+7	; 0x07
 244:	82 95       	swap	r24
 246:	92 95       	swap	r25
 248:	90 7f       	andi	r25, 0xF0	; 240
 24a:	98 27       	eor	r25, r24
 24c:	80 7f       	andi	r24, 0xF0	; 240
 24e:	98 27       	eor	r25, r24
 250:	92 2f       	mov	r25, r18
 252:	9f 70       	andi	r25, 0x0F	; 15
 254:	89 2b       	or	r24, r25
 256:	8c 93       	st	X, r24
 258:	76 c0       	rjmp	.+236    	; 0x346 <writeChar+0x1d0>
 25a:	ad ee       	ldi	r26, 0xED	; 237
 25c:	b0 e0       	ldi	r27, 0x00	; 0
 25e:	8c 91       	ld	r24, X
 260:	80 7f       	andi	r24, 0xF0	; 240
 262:	90 81       	ld	r25, Z
 264:	89 2b       	or	r24, r25
 266:	8c 93       	st	X, r24
 268:	a2 ef       	ldi	r26, 0xF2	; 242
 26a:	b0 e0       	ldi	r27, 0x00	; 0
 26c:	8c 91       	ld	r24, X
 26e:	80 7f       	andi	r24, 0xF0	; 240
 270:	92 81       	ldd	r25, Z+2	; 0x02
 272:	89 2b       	or	r24, r25
 274:	8c 93       	st	X, r24
 276:	a7 ef       	ldi	r26, 0xF7	; 247
 278:	b0 e0       	ldi	r27, 0x00	; 0
 27a:	8c 91       	ld	r24, X
 27c:	80 7f       	andi	r24, 0xF0	; 240
 27e:	94 81       	ldd	r25, Z+4	; 0x04
 280:	89 2b       	or	r24, r25
 282:	8c 93       	st	X, r24
 284:	ac ef       	ldi	r26, 0xFC	; 252
 286:	b0 e0       	ldi	r27, 0x00	; 0
 288:	8c 91       	ld	r24, X
 28a:	80 7f       	andi	r24, 0xF0	; 240
 28c:	96 81       	ldd	r25, Z+6	; 0x06
 28e:	89 2b       	or	r24, r25
 290:	8c 93       	st	X, r24
 292:	59 c0       	rjmp	.+178    	; 0x346 <writeChar+0x1d0>
 294:	ad ee       	ldi	r26, 0xED	; 237
 296:	b0 e0       	ldi	r27, 0x00	; 0
 298:	2c 91       	ld	r18, X
 29a:	80 81       	ld	r24, Z
 29c:	91 81       	ldd	r25, Z+1	; 0x01
 29e:	82 95       	swap	r24
 2a0:	92 95       	swap	r25
 2a2:	90 7f       	andi	r25, 0xF0	; 240
 2a4:	98 27       	eor	r25, r24
 2a6:	80 7f       	andi	r24, 0xF0	; 240
 2a8:	98 27       	eor	r25, r24
 2aa:	92 2f       	mov	r25, r18
 2ac:	9f 70       	andi	r25, 0x0F	; 15
 2ae:	89 2b       	or	r24, r25
 2b0:	8c 93       	st	X, r24
 2b2:	a2 ef       	ldi	r26, 0xF2	; 242
 2b4:	b0 e0       	ldi	r27, 0x00	; 0
 2b6:	2c 91       	ld	r18, X
 2b8:	82 81       	ldd	r24, Z+2	; 0x02
 2ba:	93 81       	ldd	r25, Z+3	; 0x03
 2bc:	82 95       	swap	r24
 2be:	92 95       	swap	r25
 2c0:	90 7f       	andi	r25, 0xF0	; 240
 2c2:	98 27       	eor	r25, r24
 2c4:	80 7f       	andi	r24, 0xF0	; 240
 2c6:	98 27       	eor	r25, r24
 2c8:	92 2f       	mov	r25, r18
 2ca:	9f 70       	andi	r25, 0x0F	; 15
 2cc:	89 2b       	or	r24, r25
 2ce:	8c 93       	st	X, r24
 2d0:	a7 ef       	ldi	r26, 0xF7	; 247
 2d2:	b0 e0       	ldi	r27, 0x00	; 0
 2d4:	2c 91       	ld	r18, X
 2d6:	84 81       	ldd	r24, Z+4	; 0x04
 2d8:	95 81       	ldd	r25, Z+5	; 0x05
 2da:	82 95       	swap	r24
 2dc:	92 95       	swap	r25
 2de:	90 7f       	andi	r25, 0xF0	; 240
 2e0:	98 27       	eor	r25, r24
 2e2:	80 7f       	andi	r24, 0xF0	; 240
 2e4:	98 27       	eor	r25, r24
 2e6:	92 2f       	mov	r25, r18
 2e8:	9f 70       	andi	r25, 0x0F	; 15
 2ea:	89 2b       	or	r24, r25
 2ec:	8c 93       	st	X, r24
 2ee:	ac ef       	ldi	r26, 0xFC	; 252
 2f0:	b0 e0       	ldi	r27, 0x00	; 0
 2f2:	2c 91       	ld	r18, X
 2f4:	86 81       	ldd	r24, Z+6	; 0x06
 2f6:	97 81       	ldd	r25, Z+7	; 0x07
 2f8:	82 95       	swap	r24
 2fa:	92 95       	swap	r25
 2fc:	90 7f       	andi	r25, 0xF0	; 240
 2fe:	98 27       	eor	r25, r24
 300:	80 7f       	andi	r24, 0xF0	; 240
 302:	98 27       	eor	r25, r24
 304:	92 2f       	mov	r25, r18
 306:	9f 70       	andi	r25, 0x0F	; 15
 308:	89 2b       	or	r24, r25
 30a:	8c 93       	st	X, r24
 30c:	1c c0       	rjmp	.+56     	; 0x346 <writeChar+0x1d0>
 30e:	ae ee       	ldi	r26, 0xEE	; 238
 310:	b0 e0       	ldi	r27, 0x00	; 0
 312:	8c 91       	ld	r24, X
 314:	80 7f       	andi	r24, 0xF0	; 240
 316:	90 81       	ld	r25, Z
 318:	89 2b       	or	r24, r25
 31a:	8c 93       	st	X, r24
 31c:	a3 ef       	ldi	r26, 0xF3	; 243
 31e:	b0 e0       	ldi	r27, 0x00	; 0
 320:	8c 91       	ld	r24, X
 322:	80 7f       	andi	r24, 0xF0	; 240
 324:	92 81       	ldd	r25, Z+2	; 0x02
 326:	89 2b       	or	r24, r25
 328:	8c 93       	st	X, r24
 32a:	a8 ef       	ldi	r26, 0xF8	; 248
 32c:	b0 e0       	ldi	r27, 0x00	; 0
 32e:	8c 91       	ld	r24, X
 330:	80 7f       	andi	r24, 0xF0	; 240
 332:	94 81       	ldd	r25, Z+4	; 0x04
 334:	89 2b       	or	r24, r25
 336:	8c 93       	st	X, r24
 338:	ad ef       	ldi	r26, 0xFD	; 253
 33a:	b0 e0       	ldi	r27, 0x00	; 0
 33c:	8c 91       	ld	r24, X
 33e:	80 7f       	andi	r24, 0xF0	; 240
 340:	96 81       	ldd	r25, Z+6	; 0x06
 342:	89 2b       	or	r24, r25
 344:	8c 93       	st	X, r24
 346:	cf 91       	pop	r28
 348:	08 95       	ret

0000034a <writeLong>:
 34a:	8f 92       	push	r8
 34c:	9f 92       	push	r9
 34e:	af 92       	push	r10
 350:	bf 92       	push	r11
 352:	cf 92       	push	r12
 354:	df 92       	push	r13
 356:	ef 92       	push	r14
 358:	ff 92       	push	r15
 35a:	cf 93       	push	r28
 35c:	61 15       	cp	r22, r1
 35e:	71 05       	cpc	r23, r1
 360:	81 05       	cpc	r24, r1
 362:	91 05       	cpc	r25, r1
 364:	b1 f4       	brne	.+44     	; 0x392 <writeLong+0x48>
 366:	2b c0       	rjmp	.+86     	; 0x3be <writeLong+0x74>
 368:	c1 14       	cp	r12, r1
 36a:	d1 04       	cpc	r13, r1
 36c:	e1 04       	cpc	r14, r1
 36e:	f1 04       	cpc	r15, r1
 370:	31 f1       	breq	.+76     	; 0x3be <writeLong+0x74>
 372:	c7 01       	movw	r24, r14
 374:	b6 01       	movw	r22, r12
 376:	a5 01       	movw	r20, r10
 378:	94 01       	movw	r18, r8
 37a:	0e 94 1b 04 	call	0x836	; 0x836 <__divmodsi4>
 37e:	69 01       	movw	r12, r18
 380:	7a 01       	movw	r14, r20
 382:	86 2f       	mov	r24, r22
 384:	6c 2f       	mov	r22, r28
 386:	80 5d       	subi	r24, 0xD0	; 208
 388:	0e 94 bb 00 	call	0x176	; 0x176 <writeChar>
 38c:	c1 50       	subi	r28, 0x01	; 1
 38e:	60 f7       	brcc	.-40     	; 0x368 <writeLong+0x1e>
 390:	16 c0       	rjmp	.+44     	; 0x3be <writeLong+0x74>
 392:	2a e0       	ldi	r18, 0x0A	; 10
 394:	30 e0       	ldi	r19, 0x00	; 0
 396:	40 e0       	ldi	r20, 0x00	; 0
 398:	50 e0       	ldi	r21, 0x00	; 0
 39a:	0e 94 1b 04 	call	0x836	; 0x836 <__divmodsi4>
 39e:	69 01       	movw	r12, r18
 3a0:	7a 01       	movw	r14, r20
 3a2:	86 2f       	mov	r24, r22
 3a4:	64 e0       	ldi	r22, 0x04	; 4
 3a6:	80 5d       	subi	r24, 0xD0	; 208
 3a8:	0e 94 bb 00 	call	0x176	; 0x176 <writeChar>
 3ac:	c3 e0       	ldi	r28, 0x03	; 3
 3ae:	0f 2e       	mov	r0, r31
 3b0:	fa e0       	ldi	r31, 0x0A	; 10
 3b2:	8f 2e       	mov	r8, r31
 3b4:	91 2c       	mov	r9, r1
 3b6:	a1 2c       	mov	r10, r1
 3b8:	b1 2c       	mov	r11, r1
 3ba:	f0 2d       	mov	r31, r0
 3bc:	d5 cf       	rjmp	.-86     	; 0x368 <writeLong+0x1e>
 3be:	cf 91       	pop	r28
 3c0:	ff 90       	pop	r15
 3c2:	ef 90       	pop	r14
 3c4:	df 90       	pop	r13
 3c6:	cf 90       	pop	r12
 3c8:	bf 90       	pop	r11
 3ca:	af 90       	pop	r10
 3cc:	9f 90       	pop	r9
 3ce:	8f 90       	pop	r8
 3d0:	08 95       	ret

000003d2 <isPrime>:
 3d2:	fc 01       	movw	r30, r24
 3d4:	82 30       	cpi	r24, 0x02	; 2
 3d6:	91 05       	cpc	r25, r1
 3d8:	1c f1       	brlt	.+70     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 3da:	84 30       	cpi	r24, 0x04	; 4
 3dc:	91 05       	cpc	r25, r1
 3de:	14 f1       	brlt	.+68     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 3e0:	81 70       	andi	r24, 0x01	; 1
 3e2:	90 78       	andi	r25, 0x80	; 128
 3e4:	99 23       	and	r25, r25
 3e6:	24 f4       	brge	.+8      	; 0x3f0 <isPrime+0x1e>
 3e8:	01 97       	sbiw	r24, 0x01	; 1
 3ea:	8e 6f       	ori	r24, 0xFE	; 254
 3ec:	9f 6f       	ori	r25, 0xFF	; 255
 3ee:	01 96       	adiw	r24, 0x01	; 1
 3f0:	89 2b       	or	r24, r25
 3f2:	d1 f0       	breq	.+52     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 3f4:	22 e0       	ldi	r18, 0x02	; 2
 3f6:	30 e0       	ldi	r19, 0x00	; 0
 3f8:	06 c0       	rjmp	.+12     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3fa:	cf 01       	movw	r24, r30
 3fc:	b9 01       	movw	r22, r18
 3fe:	0e 94 07 04 	call	0x80e	; 0x80e <__divmodhi4>
 402:	89 2b       	or	r24, r25
 404:	99 f0       	breq	.+38     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 406:	2f 5f       	subi	r18, 0xFF	; 255
 408:	3f 4f       	sbci	r19, 0xFF	; 255
 40a:	22 9f       	mul	r18, r18
 40c:	c0 01       	movw	r24, r0
 40e:	23 9f       	mul	r18, r19
 410:	90 0d       	add	r25, r0
 412:	90 0d       	add	r25, r0
 414:	11 24       	eor	r1, r1
 416:	e8 17       	cp	r30, r24
 418:	f9 07       	cpc	r31, r25
 41a:	7c f7       	brge	.-34     	; 0x3fa <isPrime+0x28>
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	08 95       	ret
 420:	80 e0       	ldi	r24, 0x00	; 0
 422:	08 95       	ret
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	08 95       	ret
 428:	80 e0       	ldi	r24, 0x00	; 0
 42a:	08 95       	ret
 42c:	80 e0       	ldi	r24, 0x00	; 0
 42e:	08 95       	ret

00000430 <primes>:
 430:	c1 2c       	mov	r12, r1
 432:	d1 2c       	mov	r13, r1
 434:	76 01       	movw	r14, r12
 436:	c3 94       	inc	r12
 438:	c6 01       	movw	r24, r12
 43a:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <isPrime>
 43e:	88 23       	and	r24, r24
 440:	69 f0       	breq	.+26     	; 0x45c <primes+0x2c>
 442:	c7 01       	movw	r24, r14
 444:	b6 01       	movw	r22, r12
 446:	0e 94 a5 01 	call	0x34a	; 0x34a <writeLong>
 44a:	2f e9       	ldi	r18, 0x9F	; 159
 44c:	86 e8       	ldi	r24, 0x86	; 134
 44e:	91 e0       	ldi	r25, 0x01	; 1
 450:	21 50       	subi	r18, 0x01	; 1
 452:	80 40       	sbci	r24, 0x00	; 0
 454:	90 40       	sbci	r25, 0x00	; 0
 456:	e1 f7       	brne	.-8      	; 0x450 <primes+0x20>
 458:	00 c0       	rjmp	.+0      	; 0x45a <primes+0x2a>
 45a:	00 00       	nop
 45c:	2f ef       	ldi	r18, 0xFF	; 255
 45e:	c2 1a       	sub	r12, r18
 460:	d2 0a       	sbc	r13, r18
 462:	e2 0a       	sbc	r14, r18
 464:	f2 0a       	sbc	r15, r18
 466:	e8 cf       	rjmp	.-48     	; 0x438 <primes+0x8>

00000468 <toggle_lcd>:
 468:	fc 01       	movw	r30, r24
 46a:	20 81       	ld	r18, Z
 46c:	21 30       	cpi	r18, 0x01	; 1
 46e:	69 f4       	brne	.+26     	; 0x48a <toggle_lcd+0x22>
 470:	20 e2       	ldi	r18, 0x20	; 32
 472:	20 83       	st	Z, r18
 474:	ef ee       	ldi	r30, 0xEF	; 239
 476:	f0 e0       	ldi	r31, 0x00	; 0
 478:	80 81       	ld	r24, Z
 47a:	8e 7f       	andi	r24, 0xFE	; 254
 47c:	80 83       	st	Z, r24
 47e:	ee ee       	ldi	r30, 0xEE	; 238
 480:	f0 e0       	ldi	r31, 0x00	; 0
 482:	80 81       	ld	r24, Z
 484:	80 62       	ori	r24, 0x20	; 32
 486:	80 83       	st	Z, r24
 488:	08 95       	ret
 48a:	21 e0       	ldi	r18, 0x01	; 1
 48c:	fc 01       	movw	r30, r24
 48e:	20 83       	st	Z, r18
 490:	ee ee       	ldi	r30, 0xEE	; 238
 492:	f0 e0       	ldi	r31, 0x00	; 0
 494:	80 81       	ld	r24, Z
 496:	8f 7d       	andi	r24, 0xDF	; 223
 498:	80 83       	st	Z, r24
 49a:	ef ee       	ldi	r30, 0xEF	; 239
 49c:	f0 e0       	ldi	r31, 0x00	; 0
 49e:	80 81       	ld	r24, Z
 4a0:	81 60       	ori	r24, 0x01	; 1
 4a2:	80 83       	st	Z, r24
 4a4:	08 95       	ret

000004a6 <button>:
 4a6:	84 e6       	ldi	r24, 0x64	; 100
 4a8:	91 e0       	ldi	r25, 0x01	; 1
 4aa:	0e 94 b4 03 	call	0x768	; 0x768 <lock>
 4ae:	80 e0       	ldi	r24, 0x00	; 0
 4b0:	91 e0       	ldi	r25, 0x01	; 1
 4b2:	0e 94 34 02 	call	0x468	; 0x468 <toggle_lcd>
 4b6:	f7 cf       	rjmp	.-18     	; 0x4a6 <button>

000004b8 <__vector_7>:
	
}

// Timer interupt
ISR(TIMER1_COMPA_vect) {
 4b8:	1f 92       	push	r1
 4ba:	0f 92       	push	r0
 4bc:	0f b6       	in	r0, 0x3f	; 63
 4be:	0f 92       	push	r0
 4c0:	11 24       	eor	r1, r1
 4c2:	2f 93       	push	r18
 4c4:	3f 93       	push	r19
 4c6:	4f 93       	push	r20
 4c8:	5f 93       	push	r21
 4ca:	6f 93       	push	r22
 4cc:	7f 93       	push	r23
 4ce:	8f 93       	push	r24
 4d0:	9f 93       	push	r25
 4d2:	af 93       	push	r26
 4d4:	bf 93       	push	r27
 4d6:	ef 93       	push	r30
 4d8:	ff 93       	push	r31
	unlock(&blink_mutex);
 4da:	88 e6       	ldi	r24, 0x68	; 104
 4dc:	91 e0       	ldi	r25, 0x01	; 1
 4de:	0e 94 dd 03 	call	0x7ba	; 0x7ba <unlock>
}
 4e2:	ff 91       	pop	r31
 4e4:	ef 91       	pop	r30
 4e6:	bf 91       	pop	r27
 4e8:	af 91       	pop	r26
 4ea:	9f 91       	pop	r25
 4ec:	8f 91       	pop	r24
 4ee:	7f 91       	pop	r23
 4f0:	6f 91       	pop	r22
 4f2:	5f 91       	pop	r21
 4f4:	4f 91       	pop	r20
 4f6:	3f 91       	pop	r19
 4f8:	2f 91       	pop	r18
 4fa:	0f 90       	pop	r0
 4fc:	0f be       	out	0x3f, r0	; 63
 4fe:	0f 90       	pop	r0
 500:	1f 90       	pop	r1
 502:	18 95       	reti

00000504 <__vector_3>:

// Joystick interupt
ISR(PCINT1_vect) {
 504:	1f 92       	push	r1
 506:	0f 92       	push	r0
 508:	0f b6       	in	r0, 0x3f	; 63
 50a:	0f 92       	push	r0
 50c:	11 24       	eor	r1, r1
 50e:	2f 93       	push	r18
 510:	3f 93       	push	r19
 512:	4f 93       	push	r20
 514:	5f 93       	push	r21
 516:	6f 93       	push	r22
 518:	7f 93       	push	r23
 51a:	8f 93       	push	r24
 51c:	9f 93       	push	r25
 51e:	af 93       	push	r26
 520:	bf 93       	push	r27
 522:	ef 93       	push	r30
 524:	ff 93       	push	r31
	bool oldValue = joystick_pressed;

	// Check if joystick is pressed (active low, bit 7 of PINB == 0)
	if (!(PINB & (1 << PB7))) {
 526:	1f 99       	sbic	0x03, 7	; 3
 528:	0d c0       	rjmp	.+26     	; 0x544 <__vector_3+0x40>
		keyPresses++;
 52a:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <keyPresses>
 52e:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <keyPresses+0x1>
 532:	01 96       	adiw	r24, 0x01	; 1
 534:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <keyPresses+0x1>
 538:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <keyPresses>
		keyCounter();
		unlock(&button_mutex);			
 53c:	84 e6       	ldi	r24, 0x64	; 100
 53e:	91 e0       	ldi	r25, 0x01	; 1
 540:	0e 94 dd 03 	call	0x7ba	; 0x7ba <unlock>
	}
}
 544:	ff 91       	pop	r31
 546:	ef 91       	pop	r30
 548:	bf 91       	pop	r27
 54a:	af 91       	pop	r26
 54c:	9f 91       	pop	r25
 54e:	8f 91       	pop	r24
 550:	7f 91       	pop	r23
 552:	6f 91       	pop	r22
 554:	5f 91       	pop	r21
 556:	4f 91       	pop	r20
 558:	3f 91       	pop	r19
 55a:	2f 91       	pop	r18
 55c:	0f 90       	pop	r0
 55e:	0f be       	out	0x3f, r0	; 63
 560:	0f 90       	pop	r0
 562:	1f 90       	pop	r1
 564:	18 95       	reti

00000566 <main>:


int main(void) {
	cli();
 566:	f8 94       	cli
	init();
 568:	0e 94 62 00 	call	0xc4	; 0xc4 <init>
	LCD_init();
 56c:	0e 94 83 00 	call	0x106	; 0x106 <LCD_init>
	sei();
 570:	78 94       	sei
	
	lock(&blink_mutex);
 572:	88 e6       	ldi	r24, 0x68	; 104
 574:	91 e0       	ldi	r25, 0x01	; 1
 576:	0e 94 b4 03 	call	0x768	; 0x768 <lock>
	lock(&button_mutex);
 57a:	84 e6       	ldi	r24, 0x64	; 100
 57c:	91 e0       	ldi	r25, 0x01	; 1
 57e:	0e 94 b4 03 	call	0x768	; 0x768 <lock>

	spawn(button, 0);
 582:	60 e0       	ldi	r22, 0x00	; 0
 584:	70 e0       	ldi	r23, 0x00	; 0
 586:	83 e5       	ldi	r24, 0x53	; 83
 588:	92 e0       	ldi	r25, 0x02	; 2
 58a:	0e 94 ef 02 	call	0x5de	; 0x5de <spawn>
	spawn(blink, 0);
 58e:	60 e0       	ldi	r22, 0x00	; 0
 590:	70 e0       	ldi	r23, 0x00	; 0
 592:	87 e5       	ldi	r24, 0x57	; 87
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	0e 94 ef 02 	call	0x5de	; 0x5de <spawn>
	primes();
 59a:	0e 94 18 02 	call	0x430	; 0x430 <primes>

0000059e <dispatch>:
void yield(void) {
    DISABLE();
    enqueue(current, &readyQ);
    dispatch(dequeue(&readyQ));
    ENABLE();
}
 59e:	cf 93       	push	r28
 5a0:	df 93       	push	r29
 5a2:	00 d0       	rcall	.+0      	; 0x5a4 <dispatch+0x6>
 5a4:	cd b7       	in	r28, 0x3d	; 61
 5a6:	de b7       	in	r29, 0x3e	; 62
 5a8:	9a 83       	std	Y+2, r25	; 0x02
 5aa:	89 83       	std	Y+1, r24	; 0x01
 5ac:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <current>
 5b0:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <current+0x1>
 5b4:	06 96       	adiw	r24, 0x06	; 6
 5b6:	0e 94 76 04 	call	0x8ec	; 0x8ec <setjmp>
 5ba:	89 2b       	or	r24, r25
 5bc:	59 f4       	brne	.+22     	; 0x5d4 <dispatch+0x36>
 5be:	89 81       	ldd	r24, Y+1	; 0x01
 5c0:	9a 81       	ldd	r25, Y+2	; 0x02
 5c2:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <current+0x1>
 5c6:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <current>
 5ca:	61 e0       	ldi	r22, 0x01	; 1
 5cc:	70 e0       	ldi	r23, 0x00	; 0
 5ce:	06 96       	adiw	r24, 0x06	; 6
 5d0:	0e 94 96 04 	call	0x92c	; 0x92c <longjmp>
 5d4:	0f 90       	pop	r0
 5d6:	0f 90       	pop	r0
 5d8:	df 91       	pop	r29
 5da:	cf 91       	pop	r28
 5dc:	08 95       	ret

000005de <spawn>:
 5de:	cf 93       	push	r28
 5e0:	df 93       	push	r29
 5e2:	00 d0       	rcall	.+0      	; 0x5e4 <spawn+0x6>
 5e4:	cd b7       	in	r28, 0x3d	; 61
 5e6:	de b7       	in	r29, 0x3e	; 62
 5e8:	f8 94       	cli
 5ea:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <initialized>
 5ee:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <initialized+0x1>
 5f2:	23 2b       	or	r18, r19
 5f4:	99 f5       	brne	.+102    	; 0x65c <spawn+0x7e>
 5f6:	26 e4       	ldi	r18, 0x46	; 70
 5f8:	32 e0       	ldi	r19, 0x02	; 2
 5fa:	30 93 de 01 	sts	0x01DE, r19	; 0x8001de <threads+0x5>
 5fe:	20 93 dd 01 	sts	0x01DD, r18	; 0x8001dd <threads+0x4>
 602:	23 eb       	ldi	r18, 0xB3	; 179
 604:	32 e0       	ldi	r19, 0x02	; 2
 606:	30 93 4b 02 	sts	0x024B, r19	; 0x80024b <threads+0x72>
 60a:	20 93 4a 02 	sts	0x024A, r18	; 0x80024a <threads+0x71>
 60e:	20 e2       	ldi	r18, 0x20	; 32
 610:	33 e0       	ldi	r19, 0x03	; 3
 612:	30 93 b8 02 	sts	0x02B8, r19	; 0x8002b8 <threads+0xdf>
 616:	20 93 b7 02 	sts	0x02B7, r18	; 0x8002b7 <threads+0xde>
 61a:	10 92 25 03 	sts	0x0325, r1	; 0x800325 <threads+0x14c>
 61e:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <threads+0x14b>
 622:	25 e0       	ldi	r18, 0x05	; 5
 624:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
 628:	2f 9a       	sbi	0x05, 7	; 5
 62a:	ef 9a       	sbi	0x1d, 7	; 29
 62c:	ec e6       	ldi	r30, 0x6C	; 108
 62e:	f0 e0       	ldi	r31, 0x00	; 0
 630:	20 81       	ld	r18, Z
 632:	20 68       	ori	r18, 0x80	; 128
 634:	20 83       	st	Z, r18
 636:	22 e0       	ldi	r18, 0x02	; 2
 638:	20 93 6f 00 	sts	0x006F, r18	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
 63c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 640:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
 644:	22 e4       	ldi	r18, 0x42	; 66
 646:	3f e0       	ldi	r19, 0x0F	; 15
 648:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 64c:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
 650:	21 e0       	ldi	r18, 0x01	; 1
 652:	30 e0       	ldi	r19, 0x00	; 0
 654:	30 93 61 01 	sts	0x0161, r19	; 0x800161 <initialized+0x1>
 658:	20 93 60 01 	sts	0x0160, r18	; 0x800160 <initialized>
 65c:	20 91 53 01 	lds	r18, 0x0153	; 0x800153 <freeQ>
 660:	30 91 54 01 	lds	r19, 0x0154	; 0x800154 <freeQ+0x1>
 664:	3a 83       	std	Y+2, r19	; 0x02
 666:	29 83       	std	Y+1, r18	; 0x01
 668:	23 2b       	or	r18, r19
 66a:	e1 f0       	breq	.+56     	; 0x6a4 <spawn+0xc6>
 66c:	a9 81       	ldd	r26, Y+1	; 0x01
 66e:	ba 81       	ldd	r27, Y+2	; 0x02
 670:	14 96       	adiw	r26, 0x04	; 4
 672:	4d 91       	ld	r20, X+
 674:	5c 91       	ld	r21, X
 676:	15 97       	sbiw	r26, 0x05	; 5
 678:	50 93 54 01 	sts	0x0154, r21	; 0x800154 <freeQ+0x1>
 67c:	40 93 53 01 	sts	0x0153, r20	; 0x800153 <freeQ>
 680:	11 96       	adiw	r26, 0x01	; 1
 682:	9c 93       	st	X, r25
 684:	8e 93       	st	-X, r24
 686:	13 96       	adiw	r26, 0x03	; 3
 688:	7c 93       	st	X, r23
 68a:	6e 93       	st	-X, r22
 68c:	12 97       	sbiw	r26, 0x02	; 2
 68e:	15 96       	adiw	r26, 0x05	; 5
 690:	1c 92       	st	X, r1
 692:	1e 92       	st	-X, r1
 694:	14 97       	sbiw	r26, 0x04	; 4
 696:	cd 01       	movw	r24, r26
 698:	06 96       	adiw	r24, 0x06	; 6
 69a:	0e 94 76 04 	call	0x8ec	; 0x8ec <setjmp>
 69e:	01 97       	sbiw	r24, 0x01	; 1
 6a0:	79 f5       	brne	.+94     	; 0x700 <spawn+0x122>
 6a2:	01 c0       	rjmp	.+2      	; 0x6a6 <spawn+0xc8>
 6a4:	ff cf       	rjmp	.-2      	; 0x6a4 <spawn+0xc6>
 6a6:	78 94       	sei
 6a8:	a0 91 51 01 	lds	r26, 0x0151	; 0x800151 <current>
 6ac:	b0 91 52 01 	lds	r27, 0x0152	; 0x800152 <current+0x1>
 6b0:	ed 91       	ld	r30, X+
 6b2:	fc 91       	ld	r31, X
 6b4:	11 97       	sbiw	r26, 0x01	; 1
 6b6:	12 96       	adiw	r26, 0x02	; 2
 6b8:	8d 91       	ld	r24, X+
 6ba:	9c 91       	ld	r25, X
 6bc:	13 97       	sbiw	r26, 0x03	; 3
 6be:	09 95       	icall
 6c0:	f8 94       	cli
 6c2:	e0 91 51 01 	lds	r30, 0x0151	; 0x800151 <current>
 6c6:	f0 91 52 01 	lds	r31, 0x0152	; 0x800152 <current+0x1>
 6ca:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <freeQ>
 6ce:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <freeQ+0x1>
 6d2:	95 83       	std	Z+5, r25	; 0x05
 6d4:	84 83       	std	Z+4, r24	; 0x04
 6d6:	f0 93 54 01 	sts	0x0154, r31	; 0x800154 <freeQ+0x1>
 6da:	e0 93 53 01 	sts	0x0153, r30	; 0x800153 <freeQ>
 6de:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <readyQ>
 6e2:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <readyQ+0x1>
 6e6:	00 97       	sbiw	r24, 0x00	; 0
 6e8:	51 f0       	breq	.+20     	; 0x6fe <spawn+0x120>
 6ea:	fc 01       	movw	r30, r24
 6ec:	24 81       	ldd	r18, Z+4	; 0x04
 6ee:	35 81       	ldd	r19, Z+5	; 0x05
 6f0:	30 93 63 01 	sts	0x0163, r19	; 0x800163 <readyQ+0x1>
 6f4:	20 93 62 01 	sts	0x0162, r18	; 0x800162 <readyQ>
 6f8:	0e 94 cf 02 	call	0x59e	; 0x59e <dispatch>
 6fc:	01 c0       	rjmp	.+2      	; 0x700 <spawn+0x122>
 6fe:	ff cf       	rjmp	.-2      	; 0x6fe <spawn+0x120>
 700:	e9 81       	ldd	r30, Y+1	; 0x01
 702:	fa 81       	ldd	r31, Y+2	; 0x02
 704:	36 96       	adiw	r30, 0x06	; 6
 706:	89 81       	ldd	r24, Y+1	; 0x01
 708:	9a 81       	ldd	r25, Y+2	; 0x02
 70a:	87 59       	subi	r24, 0x97	; 151
 70c:	9f 4f       	sbci	r25, 0xFF	; 255
 70e:	91 8b       	std	Z+17, r25	; 0x11
 710:	80 8b       	std	Z+16, r24	; 0x10
 712:	93 8b       	std	Z+19, r25	; 0x13
 714:	82 8b       	std	Z+18, r24	; 0x12
 716:	e0 91 51 01 	lds	r30, 0x0151	; 0x800151 <current>
 71a:	f0 91 52 01 	lds	r31, 0x0152	; 0x800152 <current+0x1>
 71e:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <readyQ>
 722:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <readyQ+0x1>
 726:	95 83       	std	Z+5, r25	; 0x05
 728:	84 83       	std	Z+4, r24	; 0x04
 72a:	a9 81       	ldd	r26, Y+1	; 0x01
 72c:	ba 81       	ldd	r27, Y+2	; 0x02
 72e:	15 96       	adiw	r26, 0x05	; 5
 730:	fc 93       	st	X, r31
 732:	ee 93       	st	-X, r30
 734:	14 97       	sbiw	r26, 0x04	; 4
 736:	b0 93 63 01 	sts	0x0163, r27	; 0x800163 <readyQ+0x1>
 73a:	a0 93 62 01 	sts	0x0162, r26	; 0x800162 <readyQ>
 73e:	10 97       	sbiw	r26, 0x00	; 0
 740:	09 f4       	brne	.+2      	; 0x744 <spawn+0x166>
 742:	ff cf       	rjmp	.-2      	; 0x742 <spawn+0x164>
 744:	14 96       	adiw	r26, 0x04	; 4
 746:	8d 91       	ld	r24, X+
 748:	9c 91       	ld	r25, X
 74a:	15 97       	sbiw	r26, 0x05	; 5
 74c:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <readyQ+0x1>
 750:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <readyQ>
 754:	89 81       	ldd	r24, Y+1	; 0x01
 756:	9a 81       	ldd	r25, Y+2	; 0x02
 758:	0e 94 cf 02 	call	0x59e	; 0x59e <dispatch>
 75c:	78 94       	sei
 75e:	0f 90       	pop	r0
 760:	0f 90       	pop	r0
 762:	df 91       	pop	r29
 764:	cf 91       	pop	r28
 766:	08 95       	ret

00000768 <lock>:

void lock(mutex *m) {
 768:	fc 01       	movw	r30, r24
    DISABLE();
 76a:	f8 94       	cli
    if(m->locked){
 76c:	80 81       	ld	r24, Z
 76e:	91 81       	ldd	r25, Z+1	; 0x01
 770:	89 2b       	or	r24, r25
 772:	e9 f0       	breq	.+58     	; 0x7ae <lock+0x46>
        enqueue(current, &(m->waitQ));
 774:	a0 91 51 01 	lds	r26, 0x0151	; 0x800151 <current>
 778:	b0 91 52 01 	lds	r27, 0x0152	; 0x800152 <current+0x1>
    
    initialized = 1;
}

static void enqueue(thread p, thread *queue) {
    p->next = *queue;
 77c:	82 81       	ldd	r24, Z+2	; 0x02
 77e:	93 81       	ldd	r25, Z+3	; 0x03
 780:	15 96       	adiw	r26, 0x05	; 5
 782:	9c 93       	st	X, r25
 784:	8e 93       	st	-X, r24
 786:	14 97       	sbiw	r26, 0x04	; 4
    *queue = p;
 788:	b3 83       	std	Z+3, r27	; 0x03
 78a:	a2 83       	std	Z+2, r26	; 0x02
        q->next = p;
    }*/
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 78c:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <readyQ>
 790:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <readyQ+0x1>
    if (*queue) {
 794:	00 97       	sbiw	r24, 0x00	; 0
 796:	51 f0       	breq	.+20     	; 0x7ac <lock+0x44>
        *queue = (*queue)->next;
 798:	fc 01       	movw	r30, r24
 79a:	24 81       	ldd	r18, Z+4	; 0x04
 79c:	35 81       	ldd	r19, Z+5	; 0x05
 79e:	30 93 63 01 	sts	0x0163, r19	; 0x800163 <readyQ+0x1>
 7a2:	20 93 62 01 	sts	0x0162, r18	; 0x800162 <readyQ>

void lock(mutex *m) {
    DISABLE();
    if(m->locked){
        enqueue(current, &(m->waitQ));
        dispatch(dequeue(&readyQ));
 7a6:	0e 94 cf 02 	call	0x59e	; 0x59e <dispatch>
 7aa:	05 c0       	rjmp	.+10     	; 0x7b6 <lock+0x4e>
 7ac:	ff cf       	rjmp	.-2      	; 0x7ac <lock+0x44>
    }else{
        m->locked = 1;
 7ae:	81 e0       	ldi	r24, 0x01	; 1
 7b0:	90 e0       	ldi	r25, 0x00	; 0
 7b2:	91 83       	std	Z+1, r25	; 0x01
 7b4:	80 83       	st	Z, r24
    }
    ENABLE();
 7b6:	78 94       	sei
 7b8:	08 95       	ret

000007ba <unlock>:
}

void unlock(mutex *m) {
 7ba:	fc 01       	movw	r30, r24
    DISABLE();
 7bc:	f8 94       	cli
    if((m->waitQ) == NULL){
 7be:	82 81       	ldd	r24, Z+2	; 0x02
 7c0:	93 81       	ldd	r25, Z+3	; 0x03
 7c2:	89 2b       	or	r24, r25
 7c4:	19 f4       	brne	.+6      	; 0x7cc <unlock+0x12>
        m->locked = 0;
 7c6:	11 82       	std	Z+1, r1	; 0x01
 7c8:	10 82       	st	Z, r1
 7ca:	1f c0       	rjmp	.+62     	; 0x80a <unlock+0x50>
    }else{
        enqueue(current, &readyQ);
 7cc:	a0 91 51 01 	lds	r26, 0x0151	; 0x800151 <current>
 7d0:	b0 91 52 01 	lds	r27, 0x0152	; 0x800152 <current+0x1>
    
    initialized = 1;
}

static void enqueue(thread p, thread *queue) {
    p->next = *queue;
 7d4:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <readyQ>
 7d8:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <readyQ+0x1>
 7dc:	15 96       	adiw	r26, 0x05	; 5
 7de:	9c 93       	st	X, r25
 7e0:	8e 93       	st	-X, r24
 7e2:	14 97       	sbiw	r26, 0x04	; 4
    *queue = p;
 7e4:	b0 93 63 01 	sts	0x0163, r27	; 0x800163 <readyQ+0x1>
 7e8:	a0 93 62 01 	sts	0x0162, r26	; 0x800162 <readyQ>
        q->next = p;
    }*/
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 7ec:	82 81       	ldd	r24, Z+2	; 0x02
 7ee:	93 81       	ldd	r25, Z+3	; 0x03
    if (*queue) {
 7f0:	00 97       	sbiw	r24, 0x00	; 0
 7f2:	51 f0       	breq	.+20     	; 0x808 <unlock+0x4e>
        *queue = (*queue)->next;
 7f4:	dc 01       	movw	r26, r24
 7f6:	14 96       	adiw	r26, 0x04	; 4
 7f8:	2d 91       	ld	r18, X+
 7fa:	3c 91       	ld	r19, X
 7fc:	15 97       	sbiw	r26, 0x05	; 5
 7fe:	33 83       	std	Z+3, r19	; 0x03
 800:	22 83       	std	Z+2, r18	; 0x02
    DISABLE();
    if((m->waitQ) == NULL){
        m->locked = 0;
    }else{
        enqueue(current, &readyQ);
        dispatch(dequeue(&(m->waitQ)));
 802:	0e 94 cf 02 	call	0x59e	; 0x59e <dispatch>
 806:	01 c0       	rjmp	.+2      	; 0x80a <unlock+0x50>
 808:	ff cf       	rjmp	.-2      	; 0x808 <unlock+0x4e>
    }
    ENABLE();
 80a:	78 94       	sei
 80c:	08 95       	ret

0000080e <__divmodhi4>:
 80e:	97 fb       	bst	r25, 7
 810:	07 2e       	mov	r0, r23
 812:	16 f4       	brtc	.+4      	; 0x818 <__divmodhi4+0xa>
 814:	00 94       	com	r0
 816:	07 d0       	rcall	.+14     	; 0x826 <__divmodhi4_neg1>
 818:	77 fd       	sbrc	r23, 7
 81a:	09 d0       	rcall	.+18     	; 0x82e <__divmodhi4_neg2>
 81c:	0e 94 40 04 	call	0x880	; 0x880 <__udivmodhi4>
 820:	07 fc       	sbrc	r0, 7
 822:	05 d0       	rcall	.+10     	; 0x82e <__divmodhi4_neg2>
 824:	3e f4       	brtc	.+14     	; 0x834 <__divmodhi4_exit>

00000826 <__divmodhi4_neg1>:
 826:	90 95       	com	r25
 828:	81 95       	neg	r24
 82a:	9f 4f       	sbci	r25, 0xFF	; 255
 82c:	08 95       	ret

0000082e <__divmodhi4_neg2>:
 82e:	70 95       	com	r23
 830:	61 95       	neg	r22
 832:	7f 4f       	sbci	r23, 0xFF	; 255

00000834 <__divmodhi4_exit>:
 834:	08 95       	ret

00000836 <__divmodsi4>:
 836:	05 2e       	mov	r0, r21
 838:	97 fb       	bst	r25, 7
 83a:	1e f4       	brtc	.+6      	; 0x842 <__divmodsi4+0xc>
 83c:	00 94       	com	r0
 83e:	0e 94 32 04 	call	0x864	; 0x864 <__negsi2>
 842:	57 fd       	sbrc	r21, 7
 844:	07 d0       	rcall	.+14     	; 0x854 <__divmodsi4_neg2>
 846:	0e 94 54 04 	call	0x8a8	; 0x8a8 <__udivmodsi4>
 84a:	07 fc       	sbrc	r0, 7
 84c:	03 d0       	rcall	.+6      	; 0x854 <__divmodsi4_neg2>
 84e:	4e f4       	brtc	.+18     	; 0x862 <__divmodsi4_exit>
 850:	0c 94 32 04 	jmp	0x864	; 0x864 <__negsi2>

00000854 <__divmodsi4_neg2>:
 854:	50 95       	com	r21
 856:	40 95       	com	r20
 858:	30 95       	com	r19
 85a:	21 95       	neg	r18
 85c:	3f 4f       	sbci	r19, 0xFF	; 255
 85e:	4f 4f       	sbci	r20, 0xFF	; 255
 860:	5f 4f       	sbci	r21, 0xFF	; 255

00000862 <__divmodsi4_exit>:
 862:	08 95       	ret

00000864 <__negsi2>:
 864:	90 95       	com	r25
 866:	80 95       	com	r24
 868:	70 95       	com	r23
 86a:	61 95       	neg	r22
 86c:	7f 4f       	sbci	r23, 0xFF	; 255
 86e:	8f 4f       	sbci	r24, 0xFF	; 255
 870:	9f 4f       	sbci	r25, 0xFF	; 255
 872:	08 95       	ret

00000874 <__tablejump2__>:
 874:	ee 0f       	add	r30, r30
 876:	ff 1f       	adc	r31, r31
 878:	05 90       	lpm	r0, Z+
 87a:	f4 91       	lpm	r31, Z
 87c:	e0 2d       	mov	r30, r0
 87e:	09 94       	ijmp

00000880 <__udivmodhi4>:
 880:	aa 1b       	sub	r26, r26
 882:	bb 1b       	sub	r27, r27
 884:	51 e1       	ldi	r21, 0x11	; 17
 886:	07 c0       	rjmp	.+14     	; 0x896 <__udivmodhi4_ep>

00000888 <__udivmodhi4_loop>:
 888:	aa 1f       	adc	r26, r26
 88a:	bb 1f       	adc	r27, r27
 88c:	a6 17       	cp	r26, r22
 88e:	b7 07       	cpc	r27, r23
 890:	10 f0       	brcs	.+4      	; 0x896 <__udivmodhi4_ep>
 892:	a6 1b       	sub	r26, r22
 894:	b7 0b       	sbc	r27, r23

00000896 <__udivmodhi4_ep>:
 896:	88 1f       	adc	r24, r24
 898:	99 1f       	adc	r25, r25
 89a:	5a 95       	dec	r21
 89c:	a9 f7       	brne	.-22     	; 0x888 <__udivmodhi4_loop>
 89e:	80 95       	com	r24
 8a0:	90 95       	com	r25
 8a2:	bc 01       	movw	r22, r24
 8a4:	cd 01       	movw	r24, r26
 8a6:	08 95       	ret

000008a8 <__udivmodsi4>:
 8a8:	a1 e2       	ldi	r26, 0x21	; 33
 8aa:	1a 2e       	mov	r1, r26
 8ac:	aa 1b       	sub	r26, r26
 8ae:	bb 1b       	sub	r27, r27
 8b0:	fd 01       	movw	r30, r26
 8b2:	0d c0       	rjmp	.+26     	; 0x8ce <__udivmodsi4_ep>

000008b4 <__udivmodsi4_loop>:
 8b4:	aa 1f       	adc	r26, r26
 8b6:	bb 1f       	adc	r27, r27
 8b8:	ee 1f       	adc	r30, r30
 8ba:	ff 1f       	adc	r31, r31
 8bc:	a2 17       	cp	r26, r18
 8be:	b3 07       	cpc	r27, r19
 8c0:	e4 07       	cpc	r30, r20
 8c2:	f5 07       	cpc	r31, r21
 8c4:	20 f0       	brcs	.+8      	; 0x8ce <__udivmodsi4_ep>
 8c6:	a2 1b       	sub	r26, r18
 8c8:	b3 0b       	sbc	r27, r19
 8ca:	e4 0b       	sbc	r30, r20
 8cc:	f5 0b       	sbc	r31, r21

000008ce <__udivmodsi4_ep>:
 8ce:	66 1f       	adc	r22, r22
 8d0:	77 1f       	adc	r23, r23
 8d2:	88 1f       	adc	r24, r24
 8d4:	99 1f       	adc	r25, r25
 8d6:	1a 94       	dec	r1
 8d8:	69 f7       	brne	.-38     	; 0x8b4 <__udivmodsi4_loop>
 8da:	60 95       	com	r22
 8dc:	70 95       	com	r23
 8de:	80 95       	com	r24
 8e0:	90 95       	com	r25
 8e2:	9b 01       	movw	r18, r22
 8e4:	ac 01       	movw	r20, r24
 8e6:	bd 01       	movw	r22, r26
 8e8:	cf 01       	movw	r24, r30
 8ea:	08 95       	ret

000008ec <setjmp>:
 8ec:	dc 01       	movw	r26, r24
 8ee:	2d 92       	st	X+, r2
 8f0:	3d 92       	st	X+, r3
 8f2:	4d 92       	st	X+, r4
 8f4:	5d 92       	st	X+, r5
 8f6:	6d 92       	st	X+, r6
 8f8:	7d 92       	st	X+, r7
 8fa:	8d 92       	st	X+, r8
 8fc:	9d 92       	st	X+, r9
 8fe:	ad 92       	st	X+, r10
 900:	bd 92       	st	X+, r11
 902:	cd 92       	st	X+, r12
 904:	dd 92       	st	X+, r13
 906:	ed 92       	st	X+, r14
 908:	fd 92       	st	X+, r15
 90a:	0d 93       	st	X+, r16
 90c:	1d 93       	st	X+, r17
 90e:	cd 93       	st	X+, r28
 910:	dd 93       	st	X+, r29
 912:	ff 91       	pop	r31
 914:	ef 91       	pop	r30
 916:	8d b7       	in	r24, 0x3d	; 61
 918:	8d 93       	st	X+, r24
 91a:	8e b7       	in	r24, 0x3e	; 62
 91c:	8d 93       	st	X+, r24
 91e:	8f b7       	in	r24, 0x3f	; 63
 920:	8d 93       	st	X+, r24
 922:	ed 93       	st	X+, r30
 924:	fd 93       	st	X+, r31
 926:	88 27       	eor	r24, r24
 928:	99 27       	eor	r25, r25
 92a:	09 94       	ijmp

0000092c <longjmp>:
 92c:	dc 01       	movw	r26, r24
 92e:	cb 01       	movw	r24, r22
 930:	81 30       	cpi	r24, 0x01	; 1
 932:	91 05       	cpc	r25, r1
 934:	81 1d       	adc	r24, r1
 936:	2d 90       	ld	r2, X+
 938:	3d 90       	ld	r3, X+
 93a:	4d 90       	ld	r4, X+
 93c:	5d 90       	ld	r5, X+
 93e:	6d 90       	ld	r6, X+
 940:	7d 90       	ld	r7, X+
 942:	8d 90       	ld	r8, X+
 944:	9d 90       	ld	r9, X+
 946:	ad 90       	ld	r10, X+
 948:	bd 90       	ld	r11, X+
 94a:	cd 90       	ld	r12, X+
 94c:	dd 90       	ld	r13, X+
 94e:	ed 90       	ld	r14, X+
 950:	fd 90       	ld	r15, X+
 952:	0d 91       	ld	r16, X+
 954:	1d 91       	ld	r17, X+
 956:	cd 91       	ld	r28, X+
 958:	dd 91       	ld	r29, X+
 95a:	ed 91       	ld	r30, X+
 95c:	fd 91       	ld	r31, X+
 95e:	0d 90       	ld	r0, X+
 960:	f8 94       	cli
 962:	fe bf       	out	0x3e, r31	; 62
 964:	0f be       	out	0x3f, r0	; 63
 966:	ed bf       	out	0x3d, r30	; 61
 968:	ed 91       	ld	r30, X+
 96a:	fd 91       	ld	r31, X+
 96c:	09 94       	ijmp

0000096e <_exit>:
 96e:	f8 94       	cli

00000970 <__stop_program>:
 970:	ff cf       	rjmp	.-2      	; 0x970 <__stop_program>
