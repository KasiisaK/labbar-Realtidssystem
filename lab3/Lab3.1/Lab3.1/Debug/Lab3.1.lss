
Lab3.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000056  00800100  00000988  00000a1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000988  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000023b  00800156  00800156  00000a72  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a72  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000aa4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000156d  00000000  00000000  00000bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c63  00000000  00000000  00002131  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000888  00000000  00000000  00002d94  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000026c  00000000  00000000  0000361c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000665  00000000  00000000  00003888  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000aab  00000000  00000000  00003eed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00004998  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 e5 03 	jmp	0x7ca	; 0x7ca <__vector_7>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	bc 00       	.word	0x00bc	; ????
  5e:	9e 00       	.word	0x009e	; ????
  60:	a1 00       	.word	0x00a1	; ????
  62:	a4 00       	.word	0x00a4	; ????
  64:	a7 00       	.word	0x00a7	; ????
  66:	aa 00       	.word	0x00aa	; ????
  68:	ad 00       	.word	0x00ad	; ????
  6a:	b0 00       	.word	0x00b0	; ????
  6c:	b3 00       	.word	0x00b3	; ????
  6e:	b6 00       	.word	0x00b6	; ????

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e8 e8       	ldi	r30, 0x88	; 136
  84:	f9 e0       	ldi	r31, 0x09	; 9
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a6 35       	cpi	r26, 0x56	; 86
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	23 e0       	ldi	r18, 0x03	; 3
  94:	a6 e5       	ldi	r26, 0x56	; 86
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a1 39       	cpi	r26, 0x91	; 145
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 b6 02 	call	0x56c	; 0x56c <main>
  a6:	0c 94 c2 04 	jmp	0x984	; 0x984 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <blink>:
			//'0' is 48 in ASCI and digit offsets to right ASCI char
			writeChar(digit + '0', pos);
		}
		pos--; //next pos
	}
}
  ae:	cc ee       	ldi	r28, 0xEC	; 236
  b0:	d0 e0       	ldi	r29, 0x00	; 0
  b2:	12 e0       	ldi	r17, 0x02	; 2
  b4:	8e e5       	ldi	r24, 0x5E	; 94
  b6:	91 e0       	ldi	r25, 0x01	; 1
  b8:	0e 94 9e 03 	call	0x73c	; 0x73c <lock>
  bc:	0e 94 db 03 	call	0x7b6	; 0x7b6 <getTimer>
  c0:	0a 97       	sbiw	r24, 0x0a	; 10
  c2:	2c f0       	brlt	.+10     	; 0xce <blink+0x20>
  c4:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <setTimer0>
  c8:	88 81       	ld	r24, Y
  ca:	81 27       	eor	r24, r17
  cc:	88 83       	st	Y, r24
  ce:	8e e5       	ldi	r24, 0x5E	; 94
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	0e 94 c5 03 	call	0x78a	; 0x78a <unlock>
  d6:	ee cf       	rjmp	.-36     	; 0xb4 <blink+0x6>

000000d8 <init>:
  d8:	e1 e6       	ldi	r30, 0x61	; 97
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 e8       	ldi	r24, 0x80	; 128
  de:	80 83       	st	Z, r24
  e0:	10 82       	st	Z, r1
  e2:	e1 e8       	ldi	r30, 0x81	; 129
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	88 60       	ori	r24, 0x08	; 8
  ea:	80 83       	st	Z, r24
  ec:	85 e8       	ldi	r24, 0x85	; 133
  ee:	91 e0       	ldi	r25, 0x01	; 1
  f0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
  f4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
  f8:	80 81       	ld	r24, Z
  fa:	85 60       	ori	r24, 0x05	; 5
  fc:	80 83       	st	Z, r24
  fe:	ef e6       	ldi	r30, 0x6F	; 111
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	82 60       	ori	r24, 0x02	; 2
 106:	80 83       	st	Z, r24
 108:	27 98       	cbi	0x04, 7	; 4
 10a:	2f 9a       	sbi	0x05, 7	; 5
 10c:	08 95       	ret

0000010e <LCD_init>:
 10e:	8f e0       	ldi	r24, 0x0F	; 15
 110:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__DATA_REGION_ORIGIN__+0x87>
 114:	87 eb       	ldi	r24, 0xB7	; 183
 116:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
 11a:	87 e0       	ldi	r24, 0x07	; 7
 11c:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__DATA_REGION_ORIGIN__+0x86>
 120:	80 ec       	ldi	r24, 0xC0	; 192
 122:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
 126:	08 95       	ret

00000128 <getSegmentForChar>:
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	fc 01       	movw	r30, r24
 12c:	f0 97       	sbiw	r30, 0x30	; 48
 12e:	ea 30       	cpi	r30, 0x0A	; 10
 130:	f1 05       	cpc	r31, r1
 132:	f8 f4       	brcc	.+62     	; 0x172 <getSegmentForChar+0x4a>
 134:	e2 5d       	subi	r30, 0xD2	; 210
 136:	ff 4f       	sbci	r31, 0xFF	; 255
 138:	0c 94 45 04 	jmp	0x88a	; 0x88a <__tablejump2__>
 13c:	81 e4       	ldi	r24, 0x41	; 65
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	08 95       	ret
 142:	89 e3       	ldi	r24, 0x39	; 57
 144:	91 e0       	ldi	r25, 0x01	; 1
 146:	08 95       	ret
 148:	81 e3       	ldi	r24, 0x31	; 49
 14a:	91 e0       	ldi	r25, 0x01	; 1
 14c:	08 95       	ret
 14e:	89 e2       	ldi	r24, 0x29	; 41
 150:	91 e0       	ldi	r25, 0x01	; 1
 152:	08 95       	ret
 154:	81 e2       	ldi	r24, 0x21	; 33
 156:	91 e0       	ldi	r25, 0x01	; 1
 158:	08 95       	ret
 15a:	89 e1       	ldi	r24, 0x19	; 25
 15c:	91 e0       	ldi	r25, 0x01	; 1
 15e:	08 95       	ret
 160:	81 e1       	ldi	r24, 0x11	; 17
 162:	91 e0       	ldi	r25, 0x01	; 1
 164:	08 95       	ret
 166:	89 e0       	ldi	r24, 0x09	; 9
 168:	91 e0       	ldi	r25, 0x01	; 1
 16a:	08 95       	ret
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	91 e0       	ldi	r25, 0x01	; 1
 170:	08 95       	ret
 172:	86 e5       	ldi	r24, 0x56	; 86
 174:	91 e0       	ldi	r25, 0x01	; 1
 176:	08 95       	ret
 178:	89 e4       	ldi	r24, 0x49	; 73
 17a:	91 e0       	ldi	r25, 0x01	; 1
 17c:	08 95       	ret

0000017e <writeChar>:
 17e:	cf 93       	push	r28
 180:	65 30       	cpi	r22, 0x05	; 5
 182:	08 f0       	brcs	.+2      	; 0x186 <writeChar+0x8>
 184:	e4 c0       	rjmp	.+456    	; 0x34e <writeChar+0x1d0>
 186:	c6 2f       	mov	r28, r22
 188:	0e 94 94 00 	call	0x128	; 0x128 <getSegmentForChar>
 18c:	fc 01       	movw	r30, r24
 18e:	c2 30       	cpi	r28, 0x02	; 2
 190:	09 f4       	brne	.+2      	; 0x194 <writeChar+0x16>
 192:	67 c0       	rjmp	.+206    	; 0x262 <writeChar+0xe4>
 194:	28 f4       	brcc	.+10     	; 0x1a0 <writeChar+0x22>
 196:	cc 23       	and	r28, r28
 198:	51 f0       	breq	.+20     	; 0x1ae <writeChar+0x30>
 19a:	c1 30       	cpi	r28, 0x01	; 1
 19c:	29 f1       	breq	.+74     	; 0x1e8 <writeChar+0x6a>
 19e:	d7 c0       	rjmp	.+430    	; 0x34e <writeChar+0x1d0>
 1a0:	c3 30       	cpi	r28, 0x03	; 3
 1a2:	09 f4       	brne	.+2      	; 0x1a6 <writeChar+0x28>
 1a4:	7b c0       	rjmp	.+246    	; 0x29c <writeChar+0x11e>
 1a6:	c4 30       	cpi	r28, 0x04	; 4
 1a8:	09 f4       	brne	.+2      	; 0x1ac <writeChar+0x2e>
 1aa:	b5 c0       	rjmp	.+362    	; 0x316 <writeChar+0x198>
 1ac:	d0 c0       	rjmp	.+416    	; 0x34e <writeChar+0x1d0>
 1ae:	ac ee       	ldi	r26, 0xEC	; 236
 1b0:	b0 e0       	ldi	r27, 0x00	; 0
 1b2:	8c 91       	ld	r24, X
 1b4:	80 7f       	andi	r24, 0xF0	; 240
 1b6:	90 81       	ld	r25, Z
 1b8:	89 2b       	or	r24, r25
 1ba:	8c 93       	st	X, r24
 1bc:	a1 ef       	ldi	r26, 0xF1	; 241
 1be:	b0 e0       	ldi	r27, 0x00	; 0
 1c0:	8c 91       	ld	r24, X
 1c2:	80 7f       	andi	r24, 0xF0	; 240
 1c4:	92 81       	ldd	r25, Z+2	; 0x02
 1c6:	89 2b       	or	r24, r25
 1c8:	8c 93       	st	X, r24
 1ca:	a6 ef       	ldi	r26, 0xF6	; 246
 1cc:	b0 e0       	ldi	r27, 0x00	; 0
 1ce:	8c 91       	ld	r24, X
 1d0:	80 7f       	andi	r24, 0xF0	; 240
 1d2:	94 81       	ldd	r25, Z+4	; 0x04
 1d4:	89 2b       	or	r24, r25
 1d6:	8c 93       	st	X, r24
 1d8:	ab ef       	ldi	r26, 0xFB	; 251
 1da:	b0 e0       	ldi	r27, 0x00	; 0
 1dc:	8c 91       	ld	r24, X
 1de:	80 7f       	andi	r24, 0xF0	; 240
 1e0:	96 81       	ldd	r25, Z+6	; 0x06
 1e2:	89 2b       	or	r24, r25
 1e4:	8c 93       	st	X, r24
 1e6:	b3 c0       	rjmp	.+358    	; 0x34e <writeChar+0x1d0>
 1e8:	ac ee       	ldi	r26, 0xEC	; 236
 1ea:	b0 e0       	ldi	r27, 0x00	; 0
 1ec:	2c 91       	ld	r18, X
 1ee:	80 81       	ld	r24, Z
 1f0:	91 81       	ldd	r25, Z+1	; 0x01
 1f2:	82 95       	swap	r24
 1f4:	92 95       	swap	r25
 1f6:	90 7f       	andi	r25, 0xF0	; 240
 1f8:	98 27       	eor	r25, r24
 1fa:	80 7f       	andi	r24, 0xF0	; 240
 1fc:	98 27       	eor	r25, r24
 1fe:	92 2f       	mov	r25, r18
 200:	9f 70       	andi	r25, 0x0F	; 15
 202:	89 2b       	or	r24, r25
 204:	8c 93       	st	X, r24
 206:	a1 ef       	ldi	r26, 0xF1	; 241
 208:	b0 e0       	ldi	r27, 0x00	; 0
 20a:	2c 91       	ld	r18, X
 20c:	82 81       	ldd	r24, Z+2	; 0x02
 20e:	93 81       	ldd	r25, Z+3	; 0x03
 210:	82 95       	swap	r24
 212:	92 95       	swap	r25
 214:	90 7f       	andi	r25, 0xF0	; 240
 216:	98 27       	eor	r25, r24
 218:	80 7f       	andi	r24, 0xF0	; 240
 21a:	98 27       	eor	r25, r24
 21c:	92 2f       	mov	r25, r18
 21e:	9f 70       	andi	r25, 0x0F	; 15
 220:	89 2b       	or	r24, r25
 222:	8c 93       	st	X, r24
 224:	a6 ef       	ldi	r26, 0xF6	; 246
 226:	b0 e0       	ldi	r27, 0x00	; 0
 228:	2c 91       	ld	r18, X
 22a:	84 81       	ldd	r24, Z+4	; 0x04
 22c:	95 81       	ldd	r25, Z+5	; 0x05
 22e:	82 95       	swap	r24
 230:	92 95       	swap	r25
 232:	90 7f       	andi	r25, 0xF0	; 240
 234:	98 27       	eor	r25, r24
 236:	80 7f       	andi	r24, 0xF0	; 240
 238:	98 27       	eor	r25, r24
 23a:	92 2f       	mov	r25, r18
 23c:	9f 70       	andi	r25, 0x0F	; 15
 23e:	89 2b       	or	r24, r25
 240:	8c 93       	st	X, r24
 242:	ab ef       	ldi	r26, 0xFB	; 251
 244:	b0 e0       	ldi	r27, 0x00	; 0
 246:	2c 91       	ld	r18, X
 248:	86 81       	ldd	r24, Z+6	; 0x06
 24a:	97 81       	ldd	r25, Z+7	; 0x07
 24c:	82 95       	swap	r24
 24e:	92 95       	swap	r25
 250:	90 7f       	andi	r25, 0xF0	; 240
 252:	98 27       	eor	r25, r24
 254:	80 7f       	andi	r24, 0xF0	; 240
 256:	98 27       	eor	r25, r24
 258:	92 2f       	mov	r25, r18
 25a:	9f 70       	andi	r25, 0x0F	; 15
 25c:	89 2b       	or	r24, r25
 25e:	8c 93       	st	X, r24
 260:	76 c0       	rjmp	.+236    	; 0x34e <writeChar+0x1d0>
 262:	ad ee       	ldi	r26, 0xED	; 237
 264:	b0 e0       	ldi	r27, 0x00	; 0
 266:	8c 91       	ld	r24, X
 268:	80 7f       	andi	r24, 0xF0	; 240
 26a:	90 81       	ld	r25, Z
 26c:	89 2b       	or	r24, r25
 26e:	8c 93       	st	X, r24
 270:	a2 ef       	ldi	r26, 0xF2	; 242
 272:	b0 e0       	ldi	r27, 0x00	; 0
 274:	8c 91       	ld	r24, X
 276:	80 7f       	andi	r24, 0xF0	; 240
 278:	92 81       	ldd	r25, Z+2	; 0x02
 27a:	89 2b       	or	r24, r25
 27c:	8c 93       	st	X, r24
 27e:	a7 ef       	ldi	r26, 0xF7	; 247
 280:	b0 e0       	ldi	r27, 0x00	; 0
 282:	8c 91       	ld	r24, X
 284:	80 7f       	andi	r24, 0xF0	; 240
 286:	94 81       	ldd	r25, Z+4	; 0x04
 288:	89 2b       	or	r24, r25
 28a:	8c 93       	st	X, r24
 28c:	ac ef       	ldi	r26, 0xFC	; 252
 28e:	b0 e0       	ldi	r27, 0x00	; 0
 290:	8c 91       	ld	r24, X
 292:	80 7f       	andi	r24, 0xF0	; 240
 294:	96 81       	ldd	r25, Z+6	; 0x06
 296:	89 2b       	or	r24, r25
 298:	8c 93       	st	X, r24
 29a:	59 c0       	rjmp	.+178    	; 0x34e <writeChar+0x1d0>
 29c:	ad ee       	ldi	r26, 0xED	; 237
 29e:	b0 e0       	ldi	r27, 0x00	; 0
 2a0:	2c 91       	ld	r18, X
 2a2:	80 81       	ld	r24, Z
 2a4:	91 81       	ldd	r25, Z+1	; 0x01
 2a6:	82 95       	swap	r24
 2a8:	92 95       	swap	r25
 2aa:	90 7f       	andi	r25, 0xF0	; 240
 2ac:	98 27       	eor	r25, r24
 2ae:	80 7f       	andi	r24, 0xF0	; 240
 2b0:	98 27       	eor	r25, r24
 2b2:	92 2f       	mov	r25, r18
 2b4:	9f 70       	andi	r25, 0x0F	; 15
 2b6:	89 2b       	or	r24, r25
 2b8:	8c 93       	st	X, r24
 2ba:	a2 ef       	ldi	r26, 0xF2	; 242
 2bc:	b0 e0       	ldi	r27, 0x00	; 0
 2be:	2c 91       	ld	r18, X
 2c0:	82 81       	ldd	r24, Z+2	; 0x02
 2c2:	93 81       	ldd	r25, Z+3	; 0x03
 2c4:	82 95       	swap	r24
 2c6:	92 95       	swap	r25
 2c8:	90 7f       	andi	r25, 0xF0	; 240
 2ca:	98 27       	eor	r25, r24
 2cc:	80 7f       	andi	r24, 0xF0	; 240
 2ce:	98 27       	eor	r25, r24
 2d0:	92 2f       	mov	r25, r18
 2d2:	9f 70       	andi	r25, 0x0F	; 15
 2d4:	89 2b       	or	r24, r25
 2d6:	8c 93       	st	X, r24
 2d8:	a7 ef       	ldi	r26, 0xF7	; 247
 2da:	b0 e0       	ldi	r27, 0x00	; 0
 2dc:	2c 91       	ld	r18, X
 2de:	84 81       	ldd	r24, Z+4	; 0x04
 2e0:	95 81       	ldd	r25, Z+5	; 0x05
 2e2:	82 95       	swap	r24
 2e4:	92 95       	swap	r25
 2e6:	90 7f       	andi	r25, 0xF0	; 240
 2e8:	98 27       	eor	r25, r24
 2ea:	80 7f       	andi	r24, 0xF0	; 240
 2ec:	98 27       	eor	r25, r24
 2ee:	92 2f       	mov	r25, r18
 2f0:	9f 70       	andi	r25, 0x0F	; 15
 2f2:	89 2b       	or	r24, r25
 2f4:	8c 93       	st	X, r24
 2f6:	ac ef       	ldi	r26, 0xFC	; 252
 2f8:	b0 e0       	ldi	r27, 0x00	; 0
 2fa:	2c 91       	ld	r18, X
 2fc:	86 81       	ldd	r24, Z+6	; 0x06
 2fe:	97 81       	ldd	r25, Z+7	; 0x07
 300:	82 95       	swap	r24
 302:	92 95       	swap	r25
 304:	90 7f       	andi	r25, 0xF0	; 240
 306:	98 27       	eor	r25, r24
 308:	80 7f       	andi	r24, 0xF0	; 240
 30a:	98 27       	eor	r25, r24
 30c:	92 2f       	mov	r25, r18
 30e:	9f 70       	andi	r25, 0x0F	; 15
 310:	89 2b       	or	r24, r25
 312:	8c 93       	st	X, r24
 314:	1c c0       	rjmp	.+56     	; 0x34e <writeChar+0x1d0>
 316:	ae ee       	ldi	r26, 0xEE	; 238
 318:	b0 e0       	ldi	r27, 0x00	; 0
 31a:	8c 91       	ld	r24, X
 31c:	80 7f       	andi	r24, 0xF0	; 240
 31e:	90 81       	ld	r25, Z
 320:	89 2b       	or	r24, r25
 322:	8c 93       	st	X, r24
 324:	a3 ef       	ldi	r26, 0xF3	; 243
 326:	b0 e0       	ldi	r27, 0x00	; 0
 328:	8c 91       	ld	r24, X
 32a:	80 7f       	andi	r24, 0xF0	; 240
 32c:	92 81       	ldd	r25, Z+2	; 0x02
 32e:	89 2b       	or	r24, r25
 330:	8c 93       	st	X, r24
 332:	a8 ef       	ldi	r26, 0xF8	; 248
 334:	b0 e0       	ldi	r27, 0x00	; 0
 336:	8c 91       	ld	r24, X
 338:	80 7f       	andi	r24, 0xF0	; 240
 33a:	94 81       	ldd	r25, Z+4	; 0x04
 33c:	89 2b       	or	r24, r25
 33e:	8c 93       	st	X, r24
 340:	ad ef       	ldi	r26, 0xFD	; 253
 342:	b0 e0       	ldi	r27, 0x00	; 0
 344:	8c 91       	ld	r24, X
 346:	80 7f       	andi	r24, 0xF0	; 240
 348:	96 81       	ldd	r25, Z+6	; 0x06
 34a:	89 2b       	or	r24, r25
 34c:	8c 93       	st	X, r24
 34e:	cf 91       	pop	r28
 350:	08 95       	ret

00000352 <isPrime>:

bool isPrime(int number)
{
 352:	fc 01       	movw	r30, r24
	//0 and 1 are not prime numbers
	if (number <= 1) return false;
 354:	82 30       	cpi	r24, 0x02	; 2
 356:	91 05       	cpc	r25, r1
 358:	1c f1       	brlt	.+70     	; 0x3a0 <isPrime+0x4e>

	//loop from 2 to sqrt(number)
	for (int i=2; i*i <= number; i++)
 35a:	84 30       	cpi	r24, 0x04	; 4
 35c:	91 05       	cpc	r25, r1
 35e:	14 f1       	brlt	.+68     	; 0x3a4 <isPrime+0x52>
	{
		if (number % i == 0) return false;	//divisible => not prime
 360:	81 70       	andi	r24, 0x01	; 1
 362:	90 78       	andi	r25, 0x80	; 128
 364:	99 23       	and	r25, r25
 366:	24 f4       	brge	.+8      	; 0x370 <isPrime+0x1e>
 368:	01 97       	sbiw	r24, 0x01	; 1
 36a:	8e 6f       	ori	r24, 0xFE	; 254
 36c:	9f 6f       	ori	r25, 0xFF	; 255
 36e:	01 96       	adiw	r24, 0x01	; 1
 370:	89 2b       	or	r24, r25
 372:	d1 f0       	breq	.+52     	; 0x3a8 <isPrime+0x56>
 374:	22 e0       	ldi	r18, 0x02	; 2
 376:	30 e0       	ldi	r19, 0x00	; 0
 378:	06 c0       	rjmp	.+12     	; 0x386 <isPrime+0x34>
 37a:	cf 01       	movw	r24, r30
 37c:	b9 01       	movw	r22, r18
 37e:	0e 94 12 04 	call	0x824	; 0x824 <__divmodhi4>
 382:	89 2b       	or	r24, r25
 384:	99 f0       	breq	.+38     	; 0x3ac <isPrime+0x5a>
{
	//0 and 1 are not prime numbers
	if (number <= 1) return false;

	//loop from 2 to sqrt(number)
	for (int i=2; i*i <= number; i++)
 386:	2f 5f       	subi	r18, 0xFF	; 255
 388:	3f 4f       	sbci	r19, 0xFF	; 255
 38a:	22 9f       	mul	r18, r18
 38c:	c0 01       	movw	r24, r0
 38e:	23 9f       	mul	r18, r19
 390:	90 0d       	add	r25, r0
 392:	90 0d       	add	r25, r0
 394:	11 24       	eor	r1, r1
 396:	e8 17       	cp	r30, r24
 398:	f9 07       	cpc	r31, r25
 39a:	7c f7       	brge	.-34     	; 0x37a <isPrime+0x28>
	{
		if (number % i == 0) return false;	//divisible => not prime
	}
	//is prime if no factors
	return true;
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	08 95       	ret
}

bool isPrime(int number)
{
	//0 and 1 are not prime numbers
	if (number <= 1) return false;
 3a0:	80 e0       	ldi	r24, 0x00	; 0
 3a2:	08 95       	ret
	for (int i=2; i*i <= number; i++)
	{
		if (number % i == 0) return false;	//divisible => not prime
	}
	//is prime if no factors
	return true;
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	08 95       	ret
	if (number <= 1) return false;

	//loop from 2 to sqrt(number)
	for (int i=2; i*i <= number; i++)
	{
		if (number % i == 0) return false;	//divisible => not prime
 3a8:	80 e0       	ldi	r24, 0x00	; 0
 3aa:	08 95       	ret
 3ac:	80 e0       	ldi	r24, 0x00	; 0
	}
	//is prime if no factors
	return true;
}
 3ae:	08 95       	ret

000003b0 <printAt>:
		}
		unlock(&regmutex);
	}
}

void printAt(long num, int pos) {
 3b0:	8f 92       	push	r8
 3b2:	9f 92       	push	r9
 3b4:	af 92       	push	r10
 3b6:	bf 92       	push	r11
 3b8:	cf 92       	push	r12
 3ba:	df 92       	push	r13
 3bc:	ef 92       	push	r14
 3be:	ff 92       	push	r15
 3c0:	0f 93       	push	r16
 3c2:	1f 93       	push	r17
 3c4:	cf 93       	push	r28
 3c6:	df 93       	push	r29
 3c8:	00 d0       	rcall	.+0      	; 0x3ca <printAt+0x1a>
 3ca:	cd b7       	in	r28, 0x3d	; 61
 3cc:	de b7       	in	r29, 0x3e	; 62
 3ce:	4b 01       	movw	r8, r22
 3d0:	5c 01       	movw	r10, r24
 3d2:	14 2f       	mov	r17, r20
 3d4:	05 2f       	mov	r16, r21
	lock(&pp_mutex);
 3d6:	86 e6       	ldi	r24, 0x66	; 102
 3d8:	91 e0       	ldi	r25, 0x01	; 1
 3da:	0e 94 9e 03 	call	0x73c	; 0x73c <lock>

	// Global pp variable
	pp = pos;
 3de:	10 93 64 01 	sts	0x0164, r17	; 0x800164 <pp>
 3e2:	00 93 65 01 	sts	0x0165, r16	; 0x800165 <pp+0x1>
	writeChar((num % 100) / 10 + '0', pp);
 3e6:	c5 01       	movw	r24, r10
 3e8:	b4 01       	movw	r22, r8
 3ea:	24 e6       	ldi	r18, 0x64	; 100
 3ec:	30 e0       	ldi	r19, 0x00	; 0
 3ee:	40 e0       	ldi	r20, 0x00	; 0
 3f0:	50 e0       	ldi	r21, 0x00	; 0
 3f2:	0e 94 26 04 	call	0x84c	; 0x84c <__divmodsi4>
 3f6:	0f 2e       	mov	r0, r31
 3f8:	fa e0       	ldi	r31, 0x0A	; 10
 3fa:	cf 2e       	mov	r12, r31
 3fc:	d1 2c       	mov	r13, r1
 3fe:	e1 2c       	mov	r14, r1
 400:	f1 2c       	mov	r15, r1
 402:	f0 2d       	mov	r31, r0
 404:	a7 01       	movw	r20, r14
 406:	96 01       	movw	r18, r12
 408:	0e 94 26 04 	call	0x84c	; 0x84c <__divmodsi4>
 40c:	61 2f       	mov	r22, r17
 40e:	80 e3       	ldi	r24, 0x30	; 48
 410:	82 0f       	add	r24, r18
 412:	0e 94 bf 00 	call	0x17e	; 0x17e <writeChar>
	pp++;
 416:	00 91 64 01 	lds	r16, 0x0164	; 0x800164 <pp>
 41a:	10 91 65 01 	lds	r17, 0x0165	; 0x800165 <pp+0x1>
 41e:	0f 5f       	subi	r16, 0xFF	; 255
 420:	1f 4f       	sbci	r17, 0xFF	; 255
 422:	10 93 65 01 	sts	0x0165, r17	; 0x800165 <pp+0x1>
 426:	00 93 64 01 	sts	0x0164, r16	; 0x800164 <pp>
	writeChar(num % 10 + '0', pp);
 42a:	c5 01       	movw	r24, r10
 42c:	b4 01       	movw	r22, r8
 42e:	a7 01       	movw	r20, r14
 430:	96 01       	movw	r18, r12
 432:	0e 94 26 04 	call	0x84c	; 0x84c <__divmodsi4>
 436:	86 2f       	mov	r24, r22
 438:	60 2f       	mov	r22, r16
 43a:	80 5d       	subi	r24, 0xD0	; 208
 43c:	0e 94 bf 00 	call	0x17e	; 0x17e <writeChar>

	// Delay loop test
	volatile int i;
	for (i = 0; i < 10000; i++);
 440:	1a 82       	std	Y+2, r1	; 0x02
 442:	19 82       	std	Y+1, r1	; 0x01
 444:	89 81       	ldd	r24, Y+1	; 0x01
 446:	9a 81       	ldd	r25, Y+2	; 0x02
 448:	80 31       	cpi	r24, 0x10	; 16
 44a:	97 42       	sbci	r25, 0x27	; 39
 44c:	54 f4       	brge	.+20     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 44e:	89 81       	ldd	r24, Y+1	; 0x01
 450:	9a 81       	ldd	r25, Y+2	; 0x02
 452:	01 96       	adiw	r24, 0x01	; 1
 454:	9a 83       	std	Y+2, r25	; 0x02
 456:	89 83       	std	Y+1, r24	; 0x01
 458:	89 81       	ldd	r24, Y+1	; 0x01
 45a:	9a 81       	ldd	r25, Y+2	; 0x02
 45c:	80 31       	cpi	r24, 0x10	; 16
 45e:	97 42       	sbci	r25, 0x27	; 39
 460:	b4 f3       	brlt	.-20     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>

	unlock(&pp_mutex);
 462:	86 e6       	ldi	r24, 0x66	; 102
 464:	91 e0       	ldi	r25, 0x01	; 1
 466:	0e 94 c5 03 	call	0x78a	; 0x78a <unlock>
}
 46a:	0f 90       	pop	r0
 46c:	0f 90       	pop	r0
 46e:	df 91       	pop	r29
 470:	cf 91       	pop	r28
 472:	1f 91       	pop	r17
 474:	0f 91       	pop	r16
 476:	ff 90       	pop	r15
 478:	ef 90       	pop	r14
 47a:	df 90       	pop	r13
 47c:	cf 90       	pop	r12
 47e:	bf 90       	pop	r11
 480:	af 90       	pop	r10
 482:	9f 90       	pop	r9
 484:	8f 90       	pop	r8
 486:	08 95       	ret

00000488 <primes>:
	//is prime if no factors
	return true;
}

void primes() {
	long i = 1;
 488:	c1 2c       	mov	r12, r1
 48a:	d1 2c       	mov	r13, r1
 48c:	76 01       	movw	r14, r12
 48e:	c3 94       	inc	r12
	while (true) {
		lock(&regmutex);
 490:	8e e5       	ldi	r24, 0x5E	; 94
 492:	91 e0       	ldi	r25, 0x01	; 1
 494:	0e 94 9e 03 	call	0x73c	; 0x73c <lock>
		if (isPrime(i))
 498:	c6 01       	movw	r24, r12
 49a:	0e 94 a9 01 	call	0x352	; 0x352 <isPrime>
 49e:	88 23       	and	r24, r24
 4a0:	79 f0       	breq	.+30     	; 0x4c0 <primes+0x38>
		{
			printAt(i, 0);
 4a2:	40 e0       	ldi	r20, 0x00	; 0
 4a4:	50 e0       	ldi	r21, 0x00	; 0
 4a6:	c7 01       	movw	r24, r14
 4a8:	b6 01       	movw	r22, r12
 4aa:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <printAt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4ae:	2f e9       	ldi	r18, 0x9F	; 159
 4b0:	86 e8       	ldi	r24, 0x86	; 134
 4b2:	91 e0       	ldi	r25, 0x01	; 1
 4b4:	21 50       	subi	r18, 0x01	; 1
 4b6:	80 40       	sbci	r24, 0x00	; 0
 4b8:	90 40       	sbci	r25, 0x00	; 0
 4ba:	e1 f7       	brne	.-8      	; 0x4b4 <primes+0x2c>
 4bc:	00 c0       	rjmp	.+0      	; 0x4be <primes+0x36>
 4be:	00 00       	nop
			_delay_ms(500);
		}
		i++;
 4c0:	2f ef       	ldi	r18, 0xFF	; 255
 4c2:	c2 1a       	sub	r12, r18
 4c4:	d2 0a       	sbc	r13, r18
 4c6:	e2 0a       	sbc	r14, r18
 4c8:	f2 0a       	sbc	r15, r18
		unlock(&regmutex);
 4ca:	8e e5       	ldi	r24, 0x5E	; 94
 4cc:	91 e0       	ldi	r25, 0x01	; 1
 4ce:	0e 94 c5 03 	call	0x78a	; 0x78a <unlock>
	}
 4d2:	de cf       	rjmp	.-68     	; 0x490 <primes+0x8>

000004d4 <toggle_lcd>:
	unlock(&pp_mutex);
}

// Toggle between two LCD segments
void toggle_lcd(uint8_t *current_segment) {
	if (*current_segment == LCD_SEGMENT1) {
 4d4:	fc 01       	movw	r30, r24
 4d6:	20 81       	ld	r18, Z
 4d8:	21 30       	cpi	r18, 0x01	; 1
 4da:	69 f4       	brne	.+26     	; 0x4f6 <toggle_lcd+0x22>
		*current_segment = LCD_SEGMENT2;
 4dc:	20 e2       	ldi	r18, 0x20	; 32
 4de:	20 83       	st	Z, r18
		// Clear LCD segment 1
		LCDDR3 &= ~LCD_SEGMENT1;
 4e0:	ef ee       	ldi	r30, 0xEF	; 239
 4e2:	f0 e0       	ldi	r31, 0x00	; 0
 4e4:	80 81       	ld	r24, Z
 4e6:	8e 7f       	andi	r24, 0xFE	; 254
 4e8:	80 83       	st	Z, r24
		// Update to LCD segment 2
		LCDDR2 = (LCDDR2 & 0xFF) | LCD_SEGMENT2;
 4ea:	ee ee       	ldi	r30, 0xEE	; 238
 4ec:	f0 e0       	ldi	r31, 0x00	; 0
 4ee:	80 81       	ld	r24, Z
 4f0:	80 62       	ori	r24, 0x20	; 32
 4f2:	80 83       	st	Z, r24
 4f4:	08 95       	ret
		} else {
		*current_segment = LCD_SEGMENT1;
 4f6:	21 e0       	ldi	r18, 0x01	; 1
 4f8:	fc 01       	movw	r30, r24
 4fa:	20 83       	st	Z, r18
		// Clear LCD segment 2
		LCDDR2 &= ~LCD_SEGMENT2;
 4fc:	ee ee       	ldi	r30, 0xEE	; 238
 4fe:	f0 e0       	ldi	r31, 0x00	; 0
 500:	80 81       	ld	r24, Z
 502:	8f 7d       	andi	r24, 0xDF	; 223
 504:	80 83       	st	Z, r24
		// Update to LCD segment 1
		LCDDR3 = (LCDDR3 & 0xFF) | LCD_SEGMENT1;
 506:	ef ee       	ldi	r30, 0xEF	; 239
 508:	f0 e0       	ldi	r31, 0x00	; 0
 50a:	80 81       	ld	r24, Z
 50c:	81 60       	ori	r24, 0x01	; 1
 50e:	80 83       	st	Z, r24
 510:	08 95       	ret

00000512 <keyCounter>:
	}
}

void keyCounter() {
	printAt(keyPresses, 3);
 512:	60 91 62 01 	lds	r22, 0x0162	; 0x800162 <keyPresses>
 516:	70 91 63 01 	lds	r23, 0x0163	; 0x800163 <keyPresses+0x1>
 51a:	07 2e       	mov	r0, r23
 51c:	00 0c       	add	r0, r0
 51e:	88 0b       	sbc	r24, r24
 520:	99 0b       	sbc	r25, r25
 522:	43 e0       	ldi	r20, 0x03	; 3
 524:	50 e0       	ldi	r21, 0x00	; 0
 526:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <printAt>
 52a:	08 95       	ret

0000052c <button>:
}

void button() {
	static uint8_t current_segment = LCD_SEGMENT1;
	uint8_t joystick_pressed = 0;
 52c:	80 e0       	ldi	r24, 0x00	; 0
				keyPresses++;
				keyCounter();
				toggle_lcd(&current_segment);
			}
			} else {
			joystick_pressed = 0;
 52e:	c0 e0       	ldi	r28, 0x00	; 0

	while (true) {
		// Check if joystick is pressed (active low, bit 7 of PINB == 0)
		if (!(PINB & (1 << PB7))) {
			if (!joystick_pressed) {
				joystick_pressed = 1;
 530:	d1 e0       	ldi	r29, 0x01	; 1
	static uint8_t current_segment = LCD_SEGMENT1;
	uint8_t joystick_pressed = 0;

	while (true) {
		// Check if joystick is pressed (active low, bit 7 of PINB == 0)
		if (!(PINB & (1 << PB7))) {
 532:	1f 99       	sbic	0x03, 7	; 3
 534:	13 c0       	rjmp	.+38     	; 0x55c <button+0x30>
			if (!joystick_pressed) {
 536:	81 11       	cpse	r24, r1
 538:	12 c0       	rjmp	.+36     	; 0x55e <button+0x32>
				joystick_pressed = 1;
				keyPresses++;
 53a:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <keyPresses>
 53e:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <keyPresses+0x1>
 542:	01 96       	adiw	r24, 0x01	; 1
 544:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <keyPresses+0x1>
 548:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <keyPresses>
				keyCounter();
 54c:	0e 94 89 02 	call	0x512	; 0x512 <keyCounter>
				toggle_lcd(&current_segment);
 550:	80 e0       	ldi	r24, 0x00	; 0
 552:	91 e0       	ldi	r25, 0x01	; 1
 554:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <toggle_lcd>

	while (true) {
		// Check if joystick is pressed (active low, bit 7 of PINB == 0)
		if (!(PINB & (1 << PB7))) {
			if (!joystick_pressed) {
				joystick_pressed = 1;
 558:	8d 2f       	mov	r24, r29
 55a:	01 c0       	rjmp	.+2      	; 0x55e <button+0x32>
				keyPresses++;
				keyCounter();
				toggle_lcd(&current_segment);
			}
			} else {
			joystick_pressed = 0;
 55c:	8c 2f       	mov	r24, r28
 55e:	e7 ea       	ldi	r30, 0xA7	; 167
 560:	f1 e6       	ldi	r31, 0x61	; 97
 562:	31 97       	sbiw	r30, 0x01	; 1
 564:	f1 f7       	brne	.-4      	; 0x562 <button+0x36>
 566:	00 c0       	rjmp	.+0      	; 0x568 <button+0x3c>
 568:	00 00       	nop
 56a:	e3 cf       	rjmp	.-58     	; 0x532 <button+0x6>

0000056c <main>:
	}
}


int main(void) {
	init();
 56c:	0e 94 6c 00 	call	0xd8	; 0xd8 <init>
	LCD_init();
 570:	0e 94 87 00 	call	0x10e	; 0x10e <LCD_init>
	spawn(primes, 1);
 574:	61 e0       	ldi	r22, 0x01	; 1
 576:	70 e0       	ldi	r23, 0x00	; 0
 578:	84 e4       	ldi	r24, 0x44	; 68
 57a:	92 e0       	ldi	r25, 0x02	; 2
 57c:	0e 94 ff 02 	call	0x5fe	; 0x5fe <spawn>
	spawn(blink, 0);
 580:	60 e0       	ldi	r22, 0x00	; 0
 582:	70 e0       	ldi	r23, 0x00	; 0
 584:	87 e5       	ldi	r24, 0x57	; 87
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	0e 94 ff 02 	call	0x5fe	; 0x5fe <spawn>
	button();
 58c:	0e 94 96 02 	call	0x52c	; 0x52c <button>

00000590 <enqueue>:

	initialized = 1;
}

static void enqueue(thread p, thread *queue) {
	p->next = NULL;
 590:	dc 01       	movw	r26, r24
 592:	15 96       	adiw	r26, 0x05	; 5
 594:	1c 92       	st	X, r1
 596:	1e 92       	st	-X, r1
 598:	14 97       	sbiw	r26, 0x04	; 4
	if (*queue == NULL) {
 59a:	db 01       	movw	r26, r22
 59c:	ed 91       	ld	r30, X+
 59e:	fc 91       	ld	r31, X
 5a0:	11 97       	sbiw	r26, 0x01	; 1
 5a2:	30 97       	sbiw	r30, 0x00	; 0
 5a4:	21 f4       	brne	.+8      	; 0x5ae <enqueue+0x1e>
		*queue = p;
 5a6:	8d 93       	st	X+, r24
 5a8:	9c 93       	st	X, r25
 5aa:	08 95       	ret
		} else {
		thread q = *queue;
		while (q->next)
		q = q->next;
 5ac:	f9 01       	movw	r30, r18
	p->next = NULL;
	if (*queue == NULL) {
		*queue = p;
		} else {
		thread q = *queue;
		while (q->next)
 5ae:	24 81       	ldd	r18, Z+4	; 0x04
 5b0:	35 81       	ldd	r19, Z+5	; 0x05
 5b2:	21 15       	cp	r18, r1
 5b4:	31 05       	cpc	r19, r1
 5b6:	d1 f7       	brne	.-12     	; 0x5ac <enqueue+0x1c>
		q = q->next;
		q->next = p;
 5b8:	95 83       	std	Z+5, r25	; 0x05
 5ba:	84 83       	std	Z+4, r24	; 0x04
 5bc:	08 95       	ret

000005be <dispatch>:
		while (1) ;  // not much else to do....
	}
	return p;
}

static void dispatch(thread next) {
 5be:	cf 93       	push	r28
 5c0:	df 93       	push	r29
 5c2:	00 d0       	rcall	.+0      	; 0x5c4 <dispatch+0x6>
 5c4:	cd b7       	in	r28, 0x3d	; 61
 5c6:	de b7       	in	r29, 0x3e	; 62
 5c8:	9a 83       	std	Y+2, r25	; 0x02
 5ca:	89 83       	std	Y+1, r24	; 0x01
	if (setjmp(current->context) == 0) {
 5cc:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <current>
 5d0:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <current+0x1>
 5d4:	06 96       	adiw	r24, 0x06	; 6
 5d6:	0e 94 81 04 	call	0x902	; 0x902 <setjmp>
 5da:	89 2b       	or	r24, r25
 5dc:	59 f4       	brne	.+22     	; 0x5f4 <dispatch+0x36>
		current = next;
 5de:	89 81       	ldd	r24, Y+1	; 0x01
 5e0:	9a 81       	ldd	r25, Y+2	; 0x02
 5e2:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <current+0x1>
 5e6:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <current>
		longjmp(next->context,1);
 5ea:	61 e0       	ldi	r22, 0x01	; 1
 5ec:	70 e0       	ldi	r23, 0x00	; 0
 5ee:	06 96       	adiw	r24, 0x06	; 6
 5f0:	0e 94 a1 04 	call	0x942	; 0x942 <longjmp>
	}
}
 5f4:	0f 90       	pop	r0
 5f6:	0f 90       	pop	r0
 5f8:	df 91       	pop	r29
 5fa:	cf 91       	pop	r28
 5fc:	08 95       	ret

000005fe <spawn>:

void spawn(void (* function)(int), int arg) {
 5fe:	cf 93       	push	r28
 600:	df 93       	push	r29
 602:	00 d0       	rcall	.+0      	; 0x604 <spawn+0x6>
 604:	cd b7       	in	r28, 0x3d	; 61
 606:	de b7       	in	r29, 0x3e	; 62
	thread newp;

	DISABLE();
 608:	f8 94       	cli
	if (!initialized) initialize();
 60a:	20 91 6c 01 	lds	r18, 0x016C	; 0x80016c <initialized>
 60e:	30 91 6d 01 	lds	r19, 0x016D	; 0x80016d <initialized+0x1>
 612:	23 2b       	or	r18, r19
 614:	e1 f4       	brne	.+56     	; 0x64e <spawn+0x50>
int interruptTimer = 0;

static void initialize(void) {
	int i;
	for (i = 0; i < NTHREADS - 1; i++)
	threads[i].next = &threads[i + 1];
 616:	2a e4       	ldi	r18, 0x4A	; 74
 618:	32 e0       	ldi	r19, 0x02	; 2
 61a:	30 93 e2 01 	sts	0x01E2, r19	; 0x8001e2 <threads+0x5>
 61e:	20 93 e1 01 	sts	0x01E1, r18	; 0x8001e1 <threads+0x4>
 622:	27 eb       	ldi	r18, 0xB7	; 183
 624:	32 e0       	ldi	r19, 0x02	; 2
 626:	30 93 4f 02 	sts	0x024F, r19	; 0x80024f <threads+0x72>
 62a:	20 93 4e 02 	sts	0x024E, r18	; 0x80024e <threads+0x71>
 62e:	24 e2       	ldi	r18, 0x24	; 36
 630:	33 e0       	ldi	r19, 0x03	; 3
 632:	30 93 bc 02 	sts	0x02BC, r19	; 0x8002bc <threads+0xdf>
 636:	20 93 bb 02 	sts	0x02BB, r18	; 0x8002bb <threads+0xde>
	threads[NTHREADS - 1].next = NULL;
 63a:	10 92 29 03 	sts	0x0329, r1	; 0x800329 <threads+0x14c>
 63e:	10 92 28 03 	sts	0x0328, r1	; 0x800328 <threads+0x14b>
	

	initialized = 1;
 642:	21 e0       	ldi	r18, 0x01	; 1
 644:	30 e0       	ldi	r19, 0x00	; 0
 646:	30 93 6d 01 	sts	0x016D, r19	; 0x80016d <initialized+0x1>
 64a:	20 93 6c 01 	sts	0x016C, r18	; 0x80016c <initialized>
		q->next = p;
	}
}

static thread dequeue(thread *queue) {
	thread p = *queue;
 64e:	20 91 53 01 	lds	r18, 0x0153	; 0x800153 <freeQ>
 652:	30 91 54 01 	lds	r19, 0x0154	; 0x800154 <freeQ+0x1>
 656:	3a 83       	std	Y+2, r19	; 0x02
 658:	29 83       	std	Y+1, r18	; 0x01
	if (*queue) {
 65a:	23 2b       	or	r18, r19
 65c:	a9 f0       	breq	.+42     	; 0x688 <spawn+0x8a>
		*queue = (*queue)->next;
 65e:	e9 81       	ldd	r30, Y+1	; 0x01
 660:	fa 81       	ldd	r31, Y+2	; 0x02
 662:	44 81       	ldd	r20, Z+4	; 0x04
 664:	55 81       	ldd	r21, Z+5	; 0x05
 666:	50 93 54 01 	sts	0x0154, r21	; 0x800154 <freeQ+0x1>
 66a:	40 93 53 01 	sts	0x0153, r20	; 0x800153 <freeQ>

	DISABLE();
	if (!initialized) initialize();

	newp = dequeue(&freeQ);
	newp->function = function;
 66e:	91 83       	std	Z+1, r25	; 0x01
 670:	80 83       	st	Z, r24
	newp->arg = arg;
 672:	73 83       	std	Z+3, r23	; 0x03
 674:	62 83       	std	Z+2, r22	; 0x02
	newp->next = NULL;
 676:	15 82       	std	Z+5, r1	; 0x05
 678:	14 82       	std	Z+4, r1	; 0x04
	if (setjmp(newp->context) == 1) {
 67a:	cf 01       	movw	r24, r30
 67c:	06 96       	adiw	r24, 0x06	; 6
 67e:	0e 94 81 04 	call	0x902	; 0x902 <setjmp>
 682:	01 97       	sbiw	r24, 0x01	; 1
 684:	49 f5       	brne	.+82     	; 0x6d8 <spawn+0xda>
 686:	01 c0       	rjmp	.+2      	; 0x68a <spawn+0x8c>
 688:	ff cf       	rjmp	.-2      	; 0x688 <spawn+0x8a>
		ENABLE();
 68a:	78 94       	sei
		current->function(current->arg);
 68c:	a0 91 51 01 	lds	r26, 0x0151	; 0x800151 <current>
 690:	b0 91 52 01 	lds	r27, 0x0152	; 0x800152 <current+0x1>
 694:	ed 91       	ld	r30, X+
 696:	fc 91       	ld	r31, X
 698:	11 97       	sbiw	r26, 0x01	; 1
 69a:	12 96       	adiw	r26, 0x02	; 2
 69c:	8d 91       	ld	r24, X+
 69e:	9c 91       	ld	r25, X
 6a0:	13 97       	sbiw	r26, 0x03	; 3
 6a2:	09 95       	icall
		DISABLE();
 6a4:	f8 94       	cli
		enqueue(current, &freeQ);
 6a6:	63 e5       	ldi	r22, 0x53	; 83
 6a8:	71 e0       	ldi	r23, 0x01	; 1
 6aa:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <current>
 6ae:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <current+0x1>
 6b2:	0e 94 c8 02 	call	0x590	; 0x590 <enqueue>
		q->next = p;
	}
}

static thread dequeue(thread *queue) {
	thread p = *queue;
 6b6:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <readyQ>
 6ba:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <readyQ+0x1>
	if (*queue) {
 6be:	00 97       	sbiw	r24, 0x00	; 0
 6c0:	51 f0       	breq	.+20     	; 0x6d6 <spawn+0xd8>
		*queue = (*queue)->next;
 6c2:	fc 01       	movw	r30, r24
 6c4:	24 81       	ldd	r18, Z+4	; 0x04
 6c6:	35 81       	ldd	r19, Z+5	; 0x05
 6c8:	30 93 6f 01 	sts	0x016F, r19	; 0x80016f <readyQ+0x1>
 6cc:	20 93 6e 01 	sts	0x016E, r18	; 0x80016e <readyQ>
	if (setjmp(newp->context) == 1) {
		ENABLE();
		current->function(current->arg);
		DISABLE();
		enqueue(current, &freeQ);
		dispatch(dequeue(&readyQ));
 6d0:	0e 94 df 02 	call	0x5be	; 0x5be <dispatch>
 6d4:	01 c0       	rjmp	.+2      	; 0x6d8 <spawn+0xda>
 6d6:	ff cf       	rjmp	.-2      	; 0x6d6 <spawn+0xd8>
	}
	SETSTACK(&newp->context, &newp->stack);
 6d8:	e9 81       	ldd	r30, Y+1	; 0x01
 6da:	fa 81       	ldd	r31, Y+2	; 0x02
 6dc:	36 96       	adiw	r30, 0x06	; 6
 6de:	89 81       	ldd	r24, Y+1	; 0x01
 6e0:	9a 81       	ldd	r25, Y+2	; 0x02
 6e2:	87 59       	subi	r24, 0x97	; 151
 6e4:	9f 4f       	sbci	r25, 0xFF	; 255
 6e6:	91 8b       	std	Z+17, r25	; 0x11
 6e8:	80 8b       	std	Z+16, r24	; 0x10
 6ea:	93 8b       	std	Z+19, r25	; 0x13
 6ec:	82 8b       	std	Z+18, r24	; 0x12

	enqueue(newp, &readyQ);
 6ee:	6e e6       	ldi	r22, 0x6E	; 110
 6f0:	71 e0       	ldi	r23, 0x01	; 1
 6f2:	89 81       	ldd	r24, Y+1	; 0x01
 6f4:	9a 81       	ldd	r25, Y+2	; 0x02
 6f6:	0e 94 c8 02 	call	0x590	; 0x590 <enqueue>
	ENABLE();
 6fa:	78 94       	sei
}
 6fc:	0f 90       	pop	r0
 6fe:	0f 90       	pop	r0
 700:	df 91       	pop	r29
 702:	cf 91       	pop	r28
 704:	08 95       	ret

00000706 <yield>:

void yield(void) {
	DISABLE();
 706:	f8 94       	cli
	enqueue(current, &readyQ);
 708:	6e e6       	ldi	r22, 0x6E	; 110
 70a:	71 e0       	ldi	r23, 0x01	; 1
 70c:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <current>
 710:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <current+0x1>
 714:	0e 94 c8 02 	call	0x590	; 0x590 <enqueue>
		q->next = p;
	}
}

static thread dequeue(thread *queue) {
	thread p = *queue;
 718:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <readyQ>
 71c:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <readyQ+0x1>
	if (*queue) {
 720:	00 97       	sbiw	r24, 0x00	; 0
 722:	59 f0       	breq	.+22     	; 0x73a <yield+0x34>
		*queue = (*queue)->next;
 724:	fc 01       	movw	r30, r24
 726:	24 81       	ldd	r18, Z+4	; 0x04
 728:	35 81       	ldd	r19, Z+5	; 0x05
 72a:	30 93 6f 01 	sts	0x016F, r19	; 0x80016f <readyQ+0x1>
 72e:	20 93 6e 01 	sts	0x016E, r18	; 0x80016e <readyQ>
}

void yield(void) {
	DISABLE();
	enqueue(current, &readyQ);
	dispatch(dequeue(&readyQ));
 732:	0e 94 df 02 	call	0x5be	; 0x5be <dispatch>
	ENABLE();
 736:	78 94       	sei
}
 738:	08 95       	ret
 73a:	ff cf       	rjmp	.-2      	; 0x73a <yield+0x34>

0000073c <lock>:

void lock(mutex *m) {
	DISABLE();
 73c:	f8 94       	cli
	// If already locked
	if (m->locked) {
 73e:	fc 01       	movw	r30, r24
 740:	20 81       	ld	r18, Z
 742:	31 81       	ldd	r19, Z+1	; 0x01
 744:	23 2b       	or	r18, r19
 746:	d1 f0       	breq	.+52     	; 0x77c <lock+0x40>
		enqueue(current, &(m->waitQ)); // Add to mutex wait queue
 748:	bc 01       	movw	r22, r24
 74a:	6e 5f       	subi	r22, 0xFE	; 254
 74c:	7f 4f       	sbci	r23, 0xFF	; 255
 74e:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <current>
 752:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <current+0x1>
 756:	0e 94 c8 02 	call	0x590	; 0x590 <enqueue>
		q->next = p;
	}
}

static thread dequeue(thread *queue) {
	thread p = *queue;
 75a:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <readyQ>
 75e:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <readyQ+0x1>
	if (*queue) {
 762:	00 97       	sbiw	r24, 0x00	; 0
 764:	51 f0       	breq	.+20     	; 0x77a <lock+0x3e>
		*queue = (*queue)->next;
 766:	fc 01       	movw	r30, r24
 768:	24 81       	ldd	r18, Z+4	; 0x04
 76a:	35 81       	ldd	r19, Z+5	; 0x05
 76c:	30 93 6f 01 	sts	0x016F, r19	; 0x80016f <readyQ+0x1>
 770:	20 93 6e 01 	sts	0x016E, r18	; 0x80016e <readyQ>
void lock(mutex *m) {
	DISABLE();
	// If already locked
	if (m->locked) {
		enqueue(current, &(m->waitQ)); // Add to mutex wait queue
		dispatch(dequeue(&readyQ));    // Dispatch the next thread
 774:	0e 94 df 02 	call	0x5be	; 0x5be <dispatch>
 778:	06 c0       	rjmp	.+12     	; 0x786 <lock+0x4a>
 77a:	ff cf       	rjmp	.-2      	; 0x77a <lock+0x3e>
		} else {
		m->locked = 1; // Lock the mutex
 77c:	21 e0       	ldi	r18, 0x01	; 1
 77e:	30 e0       	ldi	r19, 0x00	; 0
 780:	fc 01       	movw	r30, r24
 782:	31 83       	std	Z+1, r19	; 0x01
 784:	20 83       	st	Z, r18
	}
	ENABLE();
 786:	78 94       	sei
 788:	08 95       	ret

0000078a <unlock>:
}

void unlock(mutex *m) {
 78a:	fc 01       	movw	r30, r24
	DISABLE();
 78c:	f8 94       	cli
	// If already unlocked
	if (m->waitQ) {
 78e:	82 81       	ldd	r24, Z+2	; 0x02
 790:	93 81       	ldd	r25, Z+3	; 0x03
 792:	00 97       	sbiw	r24, 0x00	; 0
 794:	61 f0       	breq	.+24     	; 0x7ae <unlock+0x24>
}

static thread dequeue(thread *queue) {
	thread p = *queue;
	if (*queue) {
		*queue = (*queue)->next;
 796:	dc 01       	movw	r26, r24
 798:	14 96       	adiw	r26, 0x04	; 4
 79a:	2d 91       	ld	r18, X+
 79c:	3c 91       	ld	r19, X
 79e:	15 97       	sbiw	r26, 0x05	; 5
 7a0:	33 83       	std	Z+3, r19	; 0x03
 7a2:	22 83       	std	Z+2, r18	; 0x02

void unlock(mutex *m) {
	DISABLE();
	// If already unlocked
	if (m->waitQ) {
		enqueue(dequeue(&(m->waitQ)), &readyQ); // Move a thread from the wait queue to the ready queue
 7a4:	6e e6       	ldi	r22, 0x6E	; 110
 7a6:	71 e0       	ldi	r23, 0x01	; 1
 7a8:	0e 94 c8 02 	call	0x590	; 0x590 <enqueue>
 7ac:	02 c0       	rjmp	.+4      	; 0x7b2 <unlock+0x28>
		} else {
		m->locked = 0; // Unlock the mutex
 7ae:	11 82       	std	Z+1, r1	; 0x01
 7b0:	10 82       	st	Z, r1
	}
	ENABLE();
 7b2:	78 94       	sei
 7b4:	08 95       	ret

000007b6 <getTimer>:
}

int getTimer() {
	return interruptTimer;
}
 7b6:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <interruptTimer>
 7ba:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <interruptTimer+0x1>
 7be:	08 95       	ret

000007c0 <setTimer0>:

void setTimer0() {
	interruptTimer = 0;
 7c0:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <interruptTimer+0x1>
 7c4:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <interruptTimer>
 7c8:	08 95       	ret

000007ca <__vector_7>:
	return;
}

// Timer interupt
ISR(TIMER1_COMPA_vect) {
 7ca:	1f 92       	push	r1
 7cc:	0f 92       	push	r0
 7ce:	0f b6       	in	r0, 0x3f	; 63
 7d0:	0f 92       	push	r0
 7d2:	11 24       	eor	r1, r1
 7d4:	2f 93       	push	r18
 7d6:	3f 93       	push	r19
 7d8:	4f 93       	push	r20
 7da:	5f 93       	push	r21
 7dc:	6f 93       	push	r22
 7de:	7f 93       	push	r23
 7e0:	8f 93       	push	r24
 7e2:	9f 93       	push	r25
 7e4:	af 93       	push	r26
 7e6:	bf 93       	push	r27
 7e8:	ef 93       	push	r30
 7ea:	ff 93       	push	r31
	interruptTimer++;
 7ec:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <interruptTimer>
 7f0:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <interruptTimer+0x1>
 7f4:	01 96       	adiw	r24, 0x01	; 1
 7f6:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <interruptTimer+0x1>
 7fa:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <interruptTimer>
	yield(); // Call yield() to switch threads
 7fe:	0e 94 83 03 	call	0x706	; 0x706 <yield>
 802:	ff 91       	pop	r31
 804:	ef 91       	pop	r30
 806:	bf 91       	pop	r27
 808:	af 91       	pop	r26
 80a:	9f 91       	pop	r25
 80c:	8f 91       	pop	r24
 80e:	7f 91       	pop	r23
 810:	6f 91       	pop	r22
 812:	5f 91       	pop	r21
 814:	4f 91       	pop	r20
 816:	3f 91       	pop	r19
 818:	2f 91       	pop	r18
 81a:	0f 90       	pop	r0
 81c:	0f be       	out	0x3f, r0	; 63
 81e:	0f 90       	pop	r0
 820:	1f 90       	pop	r1
 822:	18 95       	reti

00000824 <__divmodhi4>:
 824:	97 fb       	bst	r25, 7
 826:	07 2e       	mov	r0, r23
 828:	16 f4       	brtc	.+4      	; 0x82e <__divmodhi4+0xa>
 82a:	00 94       	com	r0
 82c:	07 d0       	rcall	.+14     	; 0x83c <__divmodhi4_neg1>
 82e:	77 fd       	sbrc	r23, 7
 830:	09 d0       	rcall	.+18     	; 0x844 <__divmodhi4_neg2>
 832:	0e 94 4b 04 	call	0x896	; 0x896 <__udivmodhi4>
 836:	07 fc       	sbrc	r0, 7
 838:	05 d0       	rcall	.+10     	; 0x844 <__divmodhi4_neg2>
 83a:	3e f4       	brtc	.+14     	; 0x84a <__divmodhi4_exit>

0000083c <__divmodhi4_neg1>:
 83c:	90 95       	com	r25
 83e:	81 95       	neg	r24
 840:	9f 4f       	sbci	r25, 0xFF	; 255
 842:	08 95       	ret

00000844 <__divmodhi4_neg2>:
 844:	70 95       	com	r23
 846:	61 95       	neg	r22
 848:	7f 4f       	sbci	r23, 0xFF	; 255

0000084a <__divmodhi4_exit>:
 84a:	08 95       	ret

0000084c <__divmodsi4>:
 84c:	05 2e       	mov	r0, r21
 84e:	97 fb       	bst	r25, 7
 850:	1e f4       	brtc	.+6      	; 0x858 <__divmodsi4+0xc>
 852:	00 94       	com	r0
 854:	0e 94 3d 04 	call	0x87a	; 0x87a <__negsi2>
 858:	57 fd       	sbrc	r21, 7
 85a:	07 d0       	rcall	.+14     	; 0x86a <__divmodsi4_neg2>
 85c:	0e 94 5f 04 	call	0x8be	; 0x8be <__udivmodsi4>
 860:	07 fc       	sbrc	r0, 7
 862:	03 d0       	rcall	.+6      	; 0x86a <__divmodsi4_neg2>
 864:	4e f4       	brtc	.+18     	; 0x878 <__divmodsi4_exit>
 866:	0c 94 3d 04 	jmp	0x87a	; 0x87a <__negsi2>

0000086a <__divmodsi4_neg2>:
 86a:	50 95       	com	r21
 86c:	40 95       	com	r20
 86e:	30 95       	com	r19
 870:	21 95       	neg	r18
 872:	3f 4f       	sbci	r19, 0xFF	; 255
 874:	4f 4f       	sbci	r20, 0xFF	; 255
 876:	5f 4f       	sbci	r21, 0xFF	; 255

00000878 <__divmodsi4_exit>:
 878:	08 95       	ret

0000087a <__negsi2>:
 87a:	90 95       	com	r25
 87c:	80 95       	com	r24
 87e:	70 95       	com	r23
 880:	61 95       	neg	r22
 882:	7f 4f       	sbci	r23, 0xFF	; 255
 884:	8f 4f       	sbci	r24, 0xFF	; 255
 886:	9f 4f       	sbci	r25, 0xFF	; 255
 888:	08 95       	ret

0000088a <__tablejump2__>:
 88a:	ee 0f       	add	r30, r30
 88c:	ff 1f       	adc	r31, r31
 88e:	05 90       	lpm	r0, Z+
 890:	f4 91       	lpm	r31, Z
 892:	e0 2d       	mov	r30, r0
 894:	09 94       	ijmp

00000896 <__udivmodhi4>:
 896:	aa 1b       	sub	r26, r26
 898:	bb 1b       	sub	r27, r27
 89a:	51 e1       	ldi	r21, 0x11	; 17
 89c:	07 c0       	rjmp	.+14     	; 0x8ac <__udivmodhi4_ep>

0000089e <__udivmodhi4_loop>:
 89e:	aa 1f       	adc	r26, r26
 8a0:	bb 1f       	adc	r27, r27
 8a2:	a6 17       	cp	r26, r22
 8a4:	b7 07       	cpc	r27, r23
 8a6:	10 f0       	brcs	.+4      	; 0x8ac <__udivmodhi4_ep>
 8a8:	a6 1b       	sub	r26, r22
 8aa:	b7 0b       	sbc	r27, r23

000008ac <__udivmodhi4_ep>:
 8ac:	88 1f       	adc	r24, r24
 8ae:	99 1f       	adc	r25, r25
 8b0:	5a 95       	dec	r21
 8b2:	a9 f7       	brne	.-22     	; 0x89e <__udivmodhi4_loop>
 8b4:	80 95       	com	r24
 8b6:	90 95       	com	r25
 8b8:	bc 01       	movw	r22, r24
 8ba:	cd 01       	movw	r24, r26
 8bc:	08 95       	ret

000008be <__udivmodsi4>:
 8be:	a1 e2       	ldi	r26, 0x21	; 33
 8c0:	1a 2e       	mov	r1, r26
 8c2:	aa 1b       	sub	r26, r26
 8c4:	bb 1b       	sub	r27, r27
 8c6:	fd 01       	movw	r30, r26
 8c8:	0d c0       	rjmp	.+26     	; 0x8e4 <__udivmodsi4_ep>

000008ca <__udivmodsi4_loop>:
 8ca:	aa 1f       	adc	r26, r26
 8cc:	bb 1f       	adc	r27, r27
 8ce:	ee 1f       	adc	r30, r30
 8d0:	ff 1f       	adc	r31, r31
 8d2:	a2 17       	cp	r26, r18
 8d4:	b3 07       	cpc	r27, r19
 8d6:	e4 07       	cpc	r30, r20
 8d8:	f5 07       	cpc	r31, r21
 8da:	20 f0       	brcs	.+8      	; 0x8e4 <__udivmodsi4_ep>
 8dc:	a2 1b       	sub	r26, r18
 8de:	b3 0b       	sbc	r27, r19
 8e0:	e4 0b       	sbc	r30, r20
 8e2:	f5 0b       	sbc	r31, r21

000008e4 <__udivmodsi4_ep>:
 8e4:	66 1f       	adc	r22, r22
 8e6:	77 1f       	adc	r23, r23
 8e8:	88 1f       	adc	r24, r24
 8ea:	99 1f       	adc	r25, r25
 8ec:	1a 94       	dec	r1
 8ee:	69 f7       	brne	.-38     	; 0x8ca <__udivmodsi4_loop>
 8f0:	60 95       	com	r22
 8f2:	70 95       	com	r23
 8f4:	80 95       	com	r24
 8f6:	90 95       	com	r25
 8f8:	9b 01       	movw	r18, r22
 8fa:	ac 01       	movw	r20, r24
 8fc:	bd 01       	movw	r22, r26
 8fe:	cf 01       	movw	r24, r30
 900:	08 95       	ret

00000902 <setjmp>:
 902:	dc 01       	movw	r26, r24
 904:	2d 92       	st	X+, r2
 906:	3d 92       	st	X+, r3
 908:	4d 92       	st	X+, r4
 90a:	5d 92       	st	X+, r5
 90c:	6d 92       	st	X+, r6
 90e:	7d 92       	st	X+, r7
 910:	8d 92       	st	X+, r8
 912:	9d 92       	st	X+, r9
 914:	ad 92       	st	X+, r10
 916:	bd 92       	st	X+, r11
 918:	cd 92       	st	X+, r12
 91a:	dd 92       	st	X+, r13
 91c:	ed 92       	st	X+, r14
 91e:	fd 92       	st	X+, r15
 920:	0d 93       	st	X+, r16
 922:	1d 93       	st	X+, r17
 924:	cd 93       	st	X+, r28
 926:	dd 93       	st	X+, r29
 928:	ff 91       	pop	r31
 92a:	ef 91       	pop	r30
 92c:	8d b7       	in	r24, 0x3d	; 61
 92e:	8d 93       	st	X+, r24
 930:	8e b7       	in	r24, 0x3e	; 62
 932:	8d 93       	st	X+, r24
 934:	8f b7       	in	r24, 0x3f	; 63
 936:	8d 93       	st	X+, r24
 938:	ed 93       	st	X+, r30
 93a:	fd 93       	st	X+, r31
 93c:	88 27       	eor	r24, r24
 93e:	99 27       	eor	r25, r25
 940:	09 94       	ijmp

00000942 <longjmp>:
 942:	dc 01       	movw	r26, r24
 944:	cb 01       	movw	r24, r22
 946:	81 30       	cpi	r24, 0x01	; 1
 948:	91 05       	cpc	r25, r1
 94a:	81 1d       	adc	r24, r1
 94c:	2d 90       	ld	r2, X+
 94e:	3d 90       	ld	r3, X+
 950:	4d 90       	ld	r4, X+
 952:	5d 90       	ld	r5, X+
 954:	6d 90       	ld	r6, X+
 956:	7d 90       	ld	r7, X+
 958:	8d 90       	ld	r8, X+
 95a:	9d 90       	ld	r9, X+
 95c:	ad 90       	ld	r10, X+
 95e:	bd 90       	ld	r11, X+
 960:	cd 90       	ld	r12, X+
 962:	dd 90       	ld	r13, X+
 964:	ed 90       	ld	r14, X+
 966:	fd 90       	ld	r15, X+
 968:	0d 91       	ld	r16, X+
 96a:	1d 91       	ld	r17, X+
 96c:	cd 91       	ld	r28, X+
 96e:	dd 91       	ld	r29, X+
 970:	ed 91       	ld	r30, X+
 972:	fd 91       	ld	r31, X+
 974:	0d 90       	ld	r0, X+
 976:	f8 94       	cli
 978:	fe bf       	out	0x3e, r31	; 62
 97a:	0f be       	out	0x3f, r0	; 63
 97c:	ed bf       	out	0x3d, r30	; 61
 97e:	ed 91       	ld	r30, X+
 980:	fd 91       	ld	r31, X+
 982:	09 94       	ijmp

00000984 <_exit>:
 984:	f8 94       	cli

00000986 <__stop_program>:
 986:	ff cf       	rjmp	.-2      	; 0x986 <__stop_program>
