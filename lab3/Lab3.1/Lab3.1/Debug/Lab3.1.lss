
Lab3.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000056  00800100  00000868  000008fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000868  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000022f  00800156  00800156  00000952  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000952  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000984  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  000009c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013fc  00000000  00000000  00000a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c0a  00000000  00000000  00001e88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000830  00000000  00000000  00002a92  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000023c  00000000  00000000  000032c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000633  00000000  00000000  00003500  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000aab  00000000  00000000  00003b33  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  000045de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__vector_7>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	a9 00       	.word	0x00a9	; ????
  5e:	8b 00       	.word	0x008b	; ????
  60:	8e 00       	.word	0x008e	; ????
  62:	91 00       	.word	0x0091	; ????
  64:	94 00       	.word	0x0094	; ????
  66:	97 00       	.word	0x0097	; ????
  68:	9a 00       	.word	0x009a	; ????
  6a:	9d 00       	.word	0x009d	; ????
  6c:	a0 00       	.word	0x00a0	; ????
  6e:	a3 00       	.word	0x00a3	; ????

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e8 e6       	ldi	r30, 0x68	; 104
  84:	f8 e0       	ldi	r31, 0x08	; 8
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a6 35       	cpi	r26, 0x56	; 86
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	23 e0       	ldi	r18, 0x03	; 3
  94:	a6 e5       	ldi	r26, 0x56	; 86
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a5 38       	cpi	r26, 0x85	; 133
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 59 02 	call	0x4b2	; 0x4b2 <main>
  a6:	0c 94 32 04 	jmp	0x864	; 0x864 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <blink>:
	// Delay loop test
	volatile int i;
	for (i = 0; i < 10000; i++);

	unlock(&pp_mutex);
}
  ae:	ec ee       	ldi	r30, 0xEC	; 236
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	22 e0       	ldi	r18, 0x02	; 2
  b4:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <interruptTimer>
  b8:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <interruptTimer+0x1>
  bc:	8a 30       	cpi	r24, 0x0A	; 10
  be:	91 05       	cpc	r25, r1
  c0:	e9 f7       	brne	.-6      	; 0xbc <blink+0xe>
  c2:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <interruptTimer+0x1>
  c6:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <interruptTimer>
  ca:	80 81       	ld	r24, Z
  cc:	82 27       	eor	r24, r18
  ce:	80 83       	st	Z, r24
  d0:	f1 cf       	rjmp	.-30     	; 0xb4 <blink+0x6>

000000d2 <init>:
  d2:	e1 e6       	ldi	r30, 0x61	; 97
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 e8       	ldi	r24, 0x80	; 128
  d8:	80 83       	st	Z, r24
  da:	10 82       	st	Z, r1
  dc:	84 e0       	ldi	r24, 0x04	; 4
  de:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
  e2:	27 98       	cbi	0x04, 7	; 4
  e4:	2f 9a       	sbi	0x05, 7	; 5
  e6:	08 95       	ret

000000e8 <LCD_init>:
  e8:	8f e0       	ldi	r24, 0x0F	; 15
  ea:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__DATA_REGION_ORIGIN__+0x87>
  ee:	87 eb       	ldi	r24, 0xB7	; 183
  f0:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
  f4:	87 e0       	ldi	r24, 0x07	; 7
  f6:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__DATA_REGION_ORIGIN__+0x86>
  fa:	80 ec       	ldi	r24, 0xC0	; 192
  fc:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
 100:	08 95       	ret

00000102 <getSegmentForChar>:
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	fc 01       	movw	r30, r24
 106:	f0 97       	sbiw	r30, 0x30	; 48
 108:	ea 30       	cpi	r30, 0x0A	; 10
 10a:	f1 05       	cpc	r31, r1
 10c:	f8 f4       	brcc	.+62     	; 0x14c <getSegmentForChar+0x4a>
 10e:	e2 5d       	subi	r30, 0xD2	; 210
 110:	ff 4f       	sbci	r31, 0xFF	; 255
 112:	0c 94 b5 03 	jmp	0x76a	; 0x76a <__tablejump2__>
 116:	81 e4       	ldi	r24, 0x41	; 65
 118:	91 e0       	ldi	r25, 0x01	; 1
 11a:	08 95       	ret
 11c:	89 e3       	ldi	r24, 0x39	; 57
 11e:	91 e0       	ldi	r25, 0x01	; 1
 120:	08 95       	ret
 122:	81 e3       	ldi	r24, 0x31	; 49
 124:	91 e0       	ldi	r25, 0x01	; 1
 126:	08 95       	ret
 128:	89 e2       	ldi	r24, 0x29	; 41
 12a:	91 e0       	ldi	r25, 0x01	; 1
 12c:	08 95       	ret
 12e:	81 e2       	ldi	r24, 0x21	; 33
 130:	91 e0       	ldi	r25, 0x01	; 1
 132:	08 95       	ret
 134:	89 e1       	ldi	r24, 0x19	; 25
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	08 95       	ret
 13a:	81 e1       	ldi	r24, 0x11	; 17
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	08 95       	ret
 140:	89 e0       	ldi	r24, 0x09	; 9
 142:	91 e0       	ldi	r25, 0x01	; 1
 144:	08 95       	ret
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	91 e0       	ldi	r25, 0x01	; 1
 14a:	08 95       	ret
 14c:	86 e5       	ldi	r24, 0x56	; 86
 14e:	91 e0       	ldi	r25, 0x01	; 1
 150:	08 95       	ret
 152:	89 e4       	ldi	r24, 0x49	; 73
 154:	91 e0       	ldi	r25, 0x01	; 1
 156:	08 95       	ret

00000158 <writeChar>:
 158:	cf 93       	push	r28
 15a:	65 30       	cpi	r22, 0x05	; 5
 15c:	08 f0       	brcs	.+2      	; 0x160 <writeChar+0x8>
 15e:	e4 c0       	rjmp	.+456    	; 0x328 <writeChar+0x1d0>
 160:	c6 2f       	mov	r28, r22
 162:	0e 94 81 00 	call	0x102	; 0x102 <getSegmentForChar>
 166:	fc 01       	movw	r30, r24
 168:	c2 30       	cpi	r28, 0x02	; 2
 16a:	09 f4       	brne	.+2      	; 0x16e <writeChar+0x16>
 16c:	67 c0       	rjmp	.+206    	; 0x23c <writeChar+0xe4>
 16e:	28 f4       	brcc	.+10     	; 0x17a <writeChar+0x22>
 170:	cc 23       	and	r28, r28
 172:	51 f0       	breq	.+20     	; 0x188 <writeChar+0x30>
 174:	c1 30       	cpi	r28, 0x01	; 1
 176:	29 f1       	breq	.+74     	; 0x1c2 <writeChar+0x6a>
 178:	d7 c0       	rjmp	.+430    	; 0x328 <writeChar+0x1d0>
 17a:	c3 30       	cpi	r28, 0x03	; 3
 17c:	09 f4       	brne	.+2      	; 0x180 <writeChar+0x28>
 17e:	7b c0       	rjmp	.+246    	; 0x276 <writeChar+0x11e>
 180:	c4 30       	cpi	r28, 0x04	; 4
 182:	09 f4       	brne	.+2      	; 0x186 <writeChar+0x2e>
 184:	b5 c0       	rjmp	.+362    	; 0x2f0 <writeChar+0x198>
 186:	d0 c0       	rjmp	.+416    	; 0x328 <writeChar+0x1d0>
 188:	ac ee       	ldi	r26, 0xEC	; 236
 18a:	b0 e0       	ldi	r27, 0x00	; 0
 18c:	8c 91       	ld	r24, X
 18e:	80 7f       	andi	r24, 0xF0	; 240
 190:	90 81       	ld	r25, Z
 192:	89 2b       	or	r24, r25
 194:	8c 93       	st	X, r24
 196:	a1 ef       	ldi	r26, 0xF1	; 241
 198:	b0 e0       	ldi	r27, 0x00	; 0
 19a:	8c 91       	ld	r24, X
 19c:	80 7f       	andi	r24, 0xF0	; 240
 19e:	92 81       	ldd	r25, Z+2	; 0x02
 1a0:	89 2b       	or	r24, r25
 1a2:	8c 93       	st	X, r24
 1a4:	a6 ef       	ldi	r26, 0xF6	; 246
 1a6:	b0 e0       	ldi	r27, 0x00	; 0
 1a8:	8c 91       	ld	r24, X
 1aa:	80 7f       	andi	r24, 0xF0	; 240
 1ac:	94 81       	ldd	r25, Z+4	; 0x04
 1ae:	89 2b       	or	r24, r25
 1b0:	8c 93       	st	X, r24
 1b2:	ab ef       	ldi	r26, 0xFB	; 251
 1b4:	b0 e0       	ldi	r27, 0x00	; 0
 1b6:	8c 91       	ld	r24, X
 1b8:	80 7f       	andi	r24, 0xF0	; 240
 1ba:	96 81       	ldd	r25, Z+6	; 0x06
 1bc:	89 2b       	or	r24, r25
 1be:	8c 93       	st	X, r24
 1c0:	b3 c0       	rjmp	.+358    	; 0x328 <writeChar+0x1d0>
 1c2:	ac ee       	ldi	r26, 0xEC	; 236
 1c4:	b0 e0       	ldi	r27, 0x00	; 0
 1c6:	2c 91       	ld	r18, X
 1c8:	80 81       	ld	r24, Z
 1ca:	91 81       	ldd	r25, Z+1	; 0x01
 1cc:	82 95       	swap	r24
 1ce:	92 95       	swap	r25
 1d0:	90 7f       	andi	r25, 0xF0	; 240
 1d2:	98 27       	eor	r25, r24
 1d4:	80 7f       	andi	r24, 0xF0	; 240
 1d6:	98 27       	eor	r25, r24
 1d8:	92 2f       	mov	r25, r18
 1da:	9f 70       	andi	r25, 0x0F	; 15
 1dc:	89 2b       	or	r24, r25
 1de:	8c 93       	st	X, r24
 1e0:	a1 ef       	ldi	r26, 0xF1	; 241
 1e2:	b0 e0       	ldi	r27, 0x00	; 0
 1e4:	2c 91       	ld	r18, X
 1e6:	82 81       	ldd	r24, Z+2	; 0x02
 1e8:	93 81       	ldd	r25, Z+3	; 0x03
 1ea:	82 95       	swap	r24
 1ec:	92 95       	swap	r25
 1ee:	90 7f       	andi	r25, 0xF0	; 240
 1f0:	98 27       	eor	r25, r24
 1f2:	80 7f       	andi	r24, 0xF0	; 240
 1f4:	98 27       	eor	r25, r24
 1f6:	92 2f       	mov	r25, r18
 1f8:	9f 70       	andi	r25, 0x0F	; 15
 1fa:	89 2b       	or	r24, r25
 1fc:	8c 93       	st	X, r24
 1fe:	a6 ef       	ldi	r26, 0xF6	; 246
 200:	b0 e0       	ldi	r27, 0x00	; 0
 202:	2c 91       	ld	r18, X
 204:	84 81       	ldd	r24, Z+4	; 0x04
 206:	95 81       	ldd	r25, Z+5	; 0x05
 208:	82 95       	swap	r24
 20a:	92 95       	swap	r25
 20c:	90 7f       	andi	r25, 0xF0	; 240
 20e:	98 27       	eor	r25, r24
 210:	80 7f       	andi	r24, 0xF0	; 240
 212:	98 27       	eor	r25, r24
 214:	92 2f       	mov	r25, r18
 216:	9f 70       	andi	r25, 0x0F	; 15
 218:	89 2b       	or	r24, r25
 21a:	8c 93       	st	X, r24
 21c:	ab ef       	ldi	r26, 0xFB	; 251
 21e:	b0 e0       	ldi	r27, 0x00	; 0
 220:	2c 91       	ld	r18, X
 222:	86 81       	ldd	r24, Z+6	; 0x06
 224:	97 81       	ldd	r25, Z+7	; 0x07
 226:	82 95       	swap	r24
 228:	92 95       	swap	r25
 22a:	90 7f       	andi	r25, 0xF0	; 240
 22c:	98 27       	eor	r25, r24
 22e:	80 7f       	andi	r24, 0xF0	; 240
 230:	98 27       	eor	r25, r24
 232:	92 2f       	mov	r25, r18
 234:	9f 70       	andi	r25, 0x0F	; 15
 236:	89 2b       	or	r24, r25
 238:	8c 93       	st	X, r24
 23a:	76 c0       	rjmp	.+236    	; 0x328 <writeChar+0x1d0>
 23c:	ad ee       	ldi	r26, 0xED	; 237
 23e:	b0 e0       	ldi	r27, 0x00	; 0
 240:	8c 91       	ld	r24, X
 242:	80 7f       	andi	r24, 0xF0	; 240
 244:	90 81       	ld	r25, Z
 246:	89 2b       	or	r24, r25
 248:	8c 93       	st	X, r24
 24a:	a2 ef       	ldi	r26, 0xF2	; 242
 24c:	b0 e0       	ldi	r27, 0x00	; 0
 24e:	8c 91       	ld	r24, X
 250:	80 7f       	andi	r24, 0xF0	; 240
 252:	92 81       	ldd	r25, Z+2	; 0x02
 254:	89 2b       	or	r24, r25
 256:	8c 93       	st	X, r24
 258:	a7 ef       	ldi	r26, 0xF7	; 247
 25a:	b0 e0       	ldi	r27, 0x00	; 0
 25c:	8c 91       	ld	r24, X
 25e:	80 7f       	andi	r24, 0xF0	; 240
 260:	94 81       	ldd	r25, Z+4	; 0x04
 262:	89 2b       	or	r24, r25
 264:	8c 93       	st	X, r24
 266:	ac ef       	ldi	r26, 0xFC	; 252
 268:	b0 e0       	ldi	r27, 0x00	; 0
 26a:	8c 91       	ld	r24, X
 26c:	80 7f       	andi	r24, 0xF0	; 240
 26e:	96 81       	ldd	r25, Z+6	; 0x06
 270:	89 2b       	or	r24, r25
 272:	8c 93       	st	X, r24
 274:	59 c0       	rjmp	.+178    	; 0x328 <writeChar+0x1d0>
 276:	ad ee       	ldi	r26, 0xED	; 237
 278:	b0 e0       	ldi	r27, 0x00	; 0
 27a:	2c 91       	ld	r18, X
 27c:	80 81       	ld	r24, Z
 27e:	91 81       	ldd	r25, Z+1	; 0x01
 280:	82 95       	swap	r24
 282:	92 95       	swap	r25
 284:	90 7f       	andi	r25, 0xF0	; 240
 286:	98 27       	eor	r25, r24
 288:	80 7f       	andi	r24, 0xF0	; 240
 28a:	98 27       	eor	r25, r24
 28c:	92 2f       	mov	r25, r18
 28e:	9f 70       	andi	r25, 0x0F	; 15
 290:	89 2b       	or	r24, r25
 292:	8c 93       	st	X, r24
 294:	a2 ef       	ldi	r26, 0xF2	; 242
 296:	b0 e0       	ldi	r27, 0x00	; 0
 298:	2c 91       	ld	r18, X
 29a:	82 81       	ldd	r24, Z+2	; 0x02
 29c:	93 81       	ldd	r25, Z+3	; 0x03
 29e:	82 95       	swap	r24
 2a0:	92 95       	swap	r25
 2a2:	90 7f       	andi	r25, 0xF0	; 240
 2a4:	98 27       	eor	r25, r24
 2a6:	80 7f       	andi	r24, 0xF0	; 240
 2a8:	98 27       	eor	r25, r24
 2aa:	92 2f       	mov	r25, r18
 2ac:	9f 70       	andi	r25, 0x0F	; 15
 2ae:	89 2b       	or	r24, r25
 2b0:	8c 93       	st	X, r24
 2b2:	a7 ef       	ldi	r26, 0xF7	; 247
 2b4:	b0 e0       	ldi	r27, 0x00	; 0
 2b6:	2c 91       	ld	r18, X
 2b8:	84 81       	ldd	r24, Z+4	; 0x04
 2ba:	95 81       	ldd	r25, Z+5	; 0x05
 2bc:	82 95       	swap	r24
 2be:	92 95       	swap	r25
 2c0:	90 7f       	andi	r25, 0xF0	; 240
 2c2:	98 27       	eor	r25, r24
 2c4:	80 7f       	andi	r24, 0xF0	; 240
 2c6:	98 27       	eor	r25, r24
 2c8:	92 2f       	mov	r25, r18
 2ca:	9f 70       	andi	r25, 0x0F	; 15
 2cc:	89 2b       	or	r24, r25
 2ce:	8c 93       	st	X, r24
 2d0:	ac ef       	ldi	r26, 0xFC	; 252
 2d2:	b0 e0       	ldi	r27, 0x00	; 0
 2d4:	2c 91       	ld	r18, X
 2d6:	86 81       	ldd	r24, Z+6	; 0x06
 2d8:	97 81       	ldd	r25, Z+7	; 0x07
 2da:	82 95       	swap	r24
 2dc:	92 95       	swap	r25
 2de:	90 7f       	andi	r25, 0xF0	; 240
 2e0:	98 27       	eor	r25, r24
 2e2:	80 7f       	andi	r24, 0xF0	; 240
 2e4:	98 27       	eor	r25, r24
 2e6:	92 2f       	mov	r25, r18
 2e8:	9f 70       	andi	r25, 0x0F	; 15
 2ea:	89 2b       	or	r24, r25
 2ec:	8c 93       	st	X, r24
 2ee:	1c c0       	rjmp	.+56     	; 0x328 <writeChar+0x1d0>
 2f0:	ae ee       	ldi	r26, 0xEE	; 238
 2f2:	b0 e0       	ldi	r27, 0x00	; 0
 2f4:	8c 91       	ld	r24, X
 2f6:	80 7f       	andi	r24, 0xF0	; 240
 2f8:	90 81       	ld	r25, Z
 2fa:	89 2b       	or	r24, r25
 2fc:	8c 93       	st	X, r24
 2fe:	a3 ef       	ldi	r26, 0xF3	; 243
 300:	b0 e0       	ldi	r27, 0x00	; 0
 302:	8c 91       	ld	r24, X
 304:	80 7f       	andi	r24, 0xF0	; 240
 306:	92 81       	ldd	r25, Z+2	; 0x02
 308:	89 2b       	or	r24, r25
 30a:	8c 93       	st	X, r24
 30c:	a8 ef       	ldi	r26, 0xF8	; 248
 30e:	b0 e0       	ldi	r27, 0x00	; 0
 310:	8c 91       	ld	r24, X
 312:	80 7f       	andi	r24, 0xF0	; 240
 314:	94 81       	ldd	r25, Z+4	; 0x04
 316:	89 2b       	or	r24, r25
 318:	8c 93       	st	X, r24
 31a:	ad ef       	ldi	r26, 0xFD	; 253
 31c:	b0 e0       	ldi	r27, 0x00	; 0
 31e:	8c 91       	ld	r24, X
 320:	80 7f       	andi	r24, 0xF0	; 240
 322:	96 81       	ldd	r25, Z+6	; 0x06
 324:	89 2b       	or	r24, r25
 326:	8c 93       	st	X, r24
 328:	cf 91       	pop	r28
 32a:	08 95       	ret

0000032c <writeLong>:
 32c:	8f 92       	push	r8
 32e:	9f 92       	push	r9
 330:	af 92       	push	r10
 332:	bf 92       	push	r11
 334:	cf 92       	push	r12
 336:	df 92       	push	r13
 338:	ef 92       	push	r14
 33a:	ff 92       	push	r15
 33c:	cf 93       	push	r28
 33e:	61 15       	cp	r22, r1
 340:	71 05       	cpc	r23, r1
 342:	81 05       	cpc	r24, r1
 344:	91 05       	cpc	r25, r1
 346:	b1 f4       	brne	.+44     	; 0x374 <writeLong+0x48>
 348:	2b c0       	rjmp	.+86     	; 0x3a0 <writeLong+0x74>
 34a:	c1 14       	cp	r12, r1
 34c:	d1 04       	cpc	r13, r1
 34e:	e1 04       	cpc	r14, r1
 350:	f1 04       	cpc	r15, r1
 352:	31 f1       	breq	.+76     	; 0x3a0 <writeLong+0x74>
 354:	c7 01       	movw	r24, r14
 356:	b6 01       	movw	r22, r12
 358:	a5 01       	movw	r20, r10
 35a:	94 01       	movw	r18, r8
 35c:	0e 94 96 03 	call	0x72c	; 0x72c <__divmodsi4>
 360:	69 01       	movw	r12, r18
 362:	7a 01       	movw	r14, r20
 364:	86 2f       	mov	r24, r22
 366:	6c 2f       	mov	r22, r28
 368:	80 5d       	subi	r24, 0xD0	; 208
 36a:	0e 94 ac 00 	call	0x158	; 0x158 <writeChar>
 36e:	c1 50       	subi	r28, 0x01	; 1
 370:	60 f7       	brcc	.-40     	; 0x34a <writeLong+0x1e>
 372:	16 c0       	rjmp	.+44     	; 0x3a0 <writeLong+0x74>
 374:	2a e0       	ldi	r18, 0x0A	; 10
 376:	30 e0       	ldi	r19, 0x00	; 0
 378:	40 e0       	ldi	r20, 0x00	; 0
 37a:	50 e0       	ldi	r21, 0x00	; 0
 37c:	0e 94 96 03 	call	0x72c	; 0x72c <__divmodsi4>
 380:	69 01       	movw	r12, r18
 382:	7a 01       	movw	r14, r20
 384:	86 2f       	mov	r24, r22
 386:	64 e0       	ldi	r22, 0x04	; 4
 388:	80 5d       	subi	r24, 0xD0	; 208
 38a:	0e 94 ac 00 	call	0x158	; 0x158 <writeChar>
 38e:	c3 e0       	ldi	r28, 0x03	; 3
 390:	0f 2e       	mov	r0, r31
 392:	fa e0       	ldi	r31, 0x0A	; 10
 394:	8f 2e       	mov	r8, r31
 396:	91 2c       	mov	r9, r1
 398:	a1 2c       	mov	r10, r1
 39a:	b1 2c       	mov	r11, r1
 39c:	f0 2d       	mov	r31, r0
 39e:	d5 cf       	rjmp	.-86     	; 0x34a <writeLong+0x1e>
 3a0:	cf 91       	pop	r28
 3a2:	ff 90       	pop	r15
 3a4:	ef 90       	pop	r14
 3a6:	df 90       	pop	r13
 3a8:	cf 90       	pop	r12
 3aa:	bf 90       	pop	r11
 3ac:	af 90       	pop	r10
 3ae:	9f 90       	pop	r9
 3b0:	8f 90       	pop	r8
 3b2:	08 95       	ret

000003b4 <isPrime>:
 3b4:	fc 01       	movw	r30, r24
 3b6:	82 30       	cpi	r24, 0x02	; 2
 3b8:	91 05       	cpc	r25, r1
 3ba:	1c f1       	brlt	.+70     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3bc:	84 30       	cpi	r24, 0x04	; 4
 3be:	91 05       	cpc	r25, r1
 3c0:	14 f1       	brlt	.+68     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3c2:	81 70       	andi	r24, 0x01	; 1
 3c4:	90 78       	andi	r25, 0x80	; 128
 3c6:	99 23       	and	r25, r25
 3c8:	24 f4       	brge	.+8      	; 0x3d2 <isPrime+0x1e>
 3ca:	01 97       	sbiw	r24, 0x01	; 1
 3cc:	8e 6f       	ori	r24, 0xFE	; 254
 3ce:	9f 6f       	ori	r25, 0xFF	; 255
 3d0:	01 96       	adiw	r24, 0x01	; 1
 3d2:	89 2b       	or	r24, r25
 3d4:	d1 f0       	breq	.+52     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3d6:	22 e0       	ldi	r18, 0x02	; 2
 3d8:	30 e0       	ldi	r19, 0x00	; 0
 3da:	06 c0       	rjmp	.+12     	; 0x3e8 <isPrime+0x34>
 3dc:	cf 01       	movw	r24, r30
 3de:	b9 01       	movw	r22, r18
 3e0:	0e 94 82 03 	call	0x704	; 0x704 <__divmodhi4>
 3e4:	89 2b       	or	r24, r25
 3e6:	99 f0       	breq	.+38     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 3e8:	2f 5f       	subi	r18, 0xFF	; 255
 3ea:	3f 4f       	sbci	r19, 0xFF	; 255
 3ec:	22 9f       	mul	r18, r18
 3ee:	c0 01       	movw	r24, r0
 3f0:	23 9f       	mul	r18, r19
 3f2:	90 0d       	add	r25, r0
 3f4:	90 0d       	add	r25, r0
 3f6:	11 24       	eor	r1, r1
 3f8:	e8 17       	cp	r30, r24
 3fa:	f9 07       	cpc	r31, r25
 3fc:	7c f7       	brge	.-34     	; 0x3dc <isPrime+0x28>
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	08 95       	ret
 402:	80 e0       	ldi	r24, 0x00	; 0
 404:	08 95       	ret
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	08 95       	ret
 40a:	80 e0       	ldi	r24, 0x00	; 0
 40c:	08 95       	ret
 40e:	80 e0       	ldi	r24, 0x00	; 0
 410:	08 95       	ret

00000412 <primes>:
 412:	c1 2c       	mov	r12, r1
 414:	d1 2c       	mov	r13, r1
 416:	76 01       	movw	r14, r12
 418:	c3 94       	inc	r12
 41a:	c6 01       	movw	r24, r12
 41c:	0e 94 da 01 	call	0x3b4	; 0x3b4 <isPrime>
 420:	88 23       	and	r24, r24
 422:	69 f0       	breq	.+26     	; 0x43e <primes+0x2c>
 424:	c7 01       	movw	r24, r14
 426:	b6 01       	movw	r22, r12
 428:	0e 94 96 01 	call	0x32c	; 0x32c <writeLong>
 42c:	2f e9       	ldi	r18, 0x9F	; 159
 42e:	86 e8       	ldi	r24, 0x86	; 134
 430:	91 e0       	ldi	r25, 0x01	; 1
 432:	21 50       	subi	r18, 0x01	; 1
 434:	80 40       	sbci	r24, 0x00	; 0
 436:	90 40       	sbci	r25, 0x00	; 0
 438:	e1 f7       	brne	.-8      	; 0x432 <primes+0x20>
 43a:	00 c0       	rjmp	.+0      	; 0x43c <primes+0x2a>
 43c:	00 00       	nop
 43e:	2f ef       	ldi	r18, 0xFF	; 255
 440:	c2 1a       	sub	r12, r18
 442:	d2 0a       	sbc	r13, r18
 444:	e2 0a       	sbc	r14, r18
 446:	f2 0a       	sbc	r15, r18
 448:	e8 cf       	rjmp	.-48     	; 0x41a <primes+0x8>

0000044a <toggle_lcd>:

// Toggle between two LCD segments
void toggle_lcd(uint8_t *current_segment) {
	if (*current_segment == LCD_SEGMENT1) {
 44a:	fc 01       	movw	r30, r24
 44c:	20 81       	ld	r18, Z
 44e:	21 30       	cpi	r18, 0x01	; 1
 450:	69 f4       	brne	.+26     	; 0x46c <toggle_lcd+0x22>
		*current_segment = LCD_SEGMENT2;
 452:	20 e2       	ldi	r18, 0x20	; 32
 454:	20 83       	st	Z, r18
		// Clear LCD segment 1
		LCDDR3 &= ~LCD_SEGMENT1;
 456:	ef ee       	ldi	r30, 0xEF	; 239
 458:	f0 e0       	ldi	r31, 0x00	; 0
 45a:	80 81       	ld	r24, Z
 45c:	8e 7f       	andi	r24, 0xFE	; 254
 45e:	80 83       	st	Z, r24
		// Update to LCD segment 2
		LCDDR2 = (LCDDR2 & 0xFF) | LCD_SEGMENT2;
 460:	ee ee       	ldi	r30, 0xEE	; 238
 462:	f0 e0       	ldi	r31, 0x00	; 0
 464:	80 81       	ld	r24, Z
 466:	80 62       	ori	r24, 0x20	; 32
 468:	80 83       	st	Z, r24
 46a:	08 95       	ret
		} else {
		*current_segment = LCD_SEGMENT1;
 46c:	21 e0       	ldi	r18, 0x01	; 1
 46e:	fc 01       	movw	r30, r24
 470:	20 83       	st	Z, r18
		// Clear LCD segment 2
		LCDDR2 &= ~LCD_SEGMENT2;
 472:	ee ee       	ldi	r30, 0xEE	; 238
 474:	f0 e0       	ldi	r31, 0x00	; 0
 476:	80 81       	ld	r24, Z
 478:	8f 7d       	andi	r24, 0xDF	; 223
 47a:	80 83       	st	Z, r24
		// Update to LCD segment 1
		LCDDR3 = (LCDDR3 & 0xFF) | LCD_SEGMENT1;
 47c:	ef ee       	ldi	r30, 0xEF	; 239
 47e:	f0 e0       	ldi	r31, 0x00	; 0
 480:	80 81       	ld	r24, Z
 482:	81 60       	ori	r24, 0x01	; 1
 484:	80 83       	st	Z, r24
 486:	08 95       	ret

00000488 <button>:
	}
}

void button() {
	static uint8_t current_segment = LCD_SEGMENT1;
	uint8_t joystick_pressed = 0;
 488:	80 e0       	ldi	r24, 0x00	; 0
				joystick_pressed = 1;

				toggle_lcd(&current_segment);
			}
			} else {
			joystick_pressed = 0;
 48a:	c0 e0       	ldi	r28, 0x00	; 0

	while (true) {
		// Check if joystick is pressed (active low, bit 7 of PINB == 0)
		if (!(PINB & (1 << PB7))) {
			if (!joystick_pressed) {
				joystick_pressed = 1;
 48c:	d1 e0       	ldi	r29, 0x01	; 1
	static uint8_t current_segment = LCD_SEGMENT1;
	uint8_t joystick_pressed = 0;

	while (true) {
		// Check if joystick is pressed (active low, bit 7 of PINB == 0)
		if (!(PINB & (1 << PB7))) {
 48e:	1f 99       	sbic	0x03, 7	; 3
 490:	08 c0       	rjmp	.+16     	; 0x4a2 <button+0x1a>
			if (!joystick_pressed) {
 492:	81 11       	cpse	r24, r1
 494:	07 c0       	rjmp	.+14     	; 0x4a4 <button+0x1c>
				joystick_pressed = 1;

				toggle_lcd(&current_segment);
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	91 e0       	ldi	r25, 0x01	; 1
 49a:	0e 94 25 02 	call	0x44a	; 0x44a <toggle_lcd>

	while (true) {
		// Check if joystick is pressed (active low, bit 7 of PINB == 0)
		if (!(PINB & (1 << PB7))) {
			if (!joystick_pressed) {
				joystick_pressed = 1;
 49e:	8d 2f       	mov	r24, r29
 4a0:	01 c0       	rjmp	.+2      	; 0x4a4 <button+0x1c>

				toggle_lcd(&current_segment);
			}
			} else {
			joystick_pressed = 0;
 4a2:	8c 2f       	mov	r24, r28
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4a4:	e7 ea       	ldi	r30, 0xA7	; 167
 4a6:	f1 e6       	ldi	r31, 0x61	; 97
 4a8:	31 97       	sbiw	r30, 0x01	; 1
 4aa:	f1 f7       	brne	.-4      	; 0x4a8 <button+0x20>
 4ac:	00 c0       	rjmp	.+0      	; 0x4ae <button+0x26>
 4ae:	00 00       	nop
 4b0:	ee cf       	rjmp	.-36     	; 0x48e <button+0x6>

000004b2 <main>:
	}
}


int main(void) {
	init();
 4b2:	0e 94 69 00 	call	0xd2	; 0xd2 <init>
	LCD_init();
 4b6:	0e 94 74 00 	call	0xe8	; 0xe8 <LCD_init>
	spawn(primes, 1);
 4ba:	61 e0       	ldi	r22, 0x01	; 1
 4bc:	70 e0       	ldi	r23, 0x00	; 0
 4be:	89 e0       	ldi	r24, 0x09	; 9
 4c0:	92 e0       	ldi	r25, 0x02	; 2
 4c2:	0e 94 a2 02 	call	0x544	; 0x544 <spawn>
	spawn(blink, 0);
 4c6:	60 e0       	ldi	r22, 0x00	; 0
 4c8:	70 e0       	ldi	r23, 0x00	; 0
 4ca:	87 e5       	ldi	r24, 0x57	; 87
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	0e 94 a2 02 	call	0x544	; 0x544 <spawn>
	button();
 4d2:	0e 94 44 02 	call	0x488	; 0x488 <button>

000004d6 <enqueue>:
	if (m->waitQ) {
		enqueue(dequeue(&(m->waitQ)), &readyQ); // Move a thread from the wait queue to the ready queue
		} else {
		m->locked = 0; // Unlock the mutex
	}
	ENABLE();
 4d6:	dc 01       	movw	r26, r24
 4d8:	15 96       	adiw	r26, 0x05	; 5
 4da:	1c 92       	st	X, r1
 4dc:	1e 92       	st	-X, r1
 4de:	14 97       	sbiw	r26, 0x04	; 4
 4e0:	db 01       	movw	r26, r22
 4e2:	ed 91       	ld	r30, X+
 4e4:	fc 91       	ld	r31, X
 4e6:	11 97       	sbiw	r26, 0x01	; 1
 4e8:	30 97       	sbiw	r30, 0x00	; 0
 4ea:	21 f4       	brne	.+8      	; 0x4f4 <enqueue+0x1e>
 4ec:	8d 93       	st	X+, r24
 4ee:	9c 93       	st	X, r25
 4f0:	08 95       	ret
 4f2:	f9 01       	movw	r30, r18
 4f4:	24 81       	ldd	r18, Z+4	; 0x04
 4f6:	35 81       	ldd	r19, Z+5	; 0x05
 4f8:	21 15       	cp	r18, r1
 4fa:	31 05       	cpc	r19, r1
 4fc:	d1 f7       	brne	.-12     	; 0x4f2 <enqueue+0x1c>
 4fe:	95 83       	std	Z+5, r25	; 0x05
 500:	84 83       	std	Z+4, r24	; 0x04
 502:	08 95       	ret

00000504 <dispatch>:
 504:	cf 93       	push	r28
 506:	df 93       	push	r29
 508:	00 d0       	rcall	.+0      	; 0x50a <dispatch+0x6>
 50a:	cd b7       	in	r28, 0x3d	; 61
 50c:	de b7       	in	r29, 0x3e	; 62
 50e:	9a 83       	std	Y+2, r25	; 0x02
 510:	89 83       	std	Y+1, r24	; 0x01
 512:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <current>
 516:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <current+0x1>
 51a:	06 96       	adiw	r24, 0x06	; 6
 51c:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <setjmp>
 520:	89 2b       	or	r24, r25
 522:	59 f4       	brne	.+22     	; 0x53a <dispatch+0x36>
 524:	89 81       	ldd	r24, Y+1	; 0x01
 526:	9a 81       	ldd	r25, Y+2	; 0x02
 528:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <current+0x1>
 52c:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <current>
 530:	61 e0       	ldi	r22, 0x01	; 1
 532:	70 e0       	ldi	r23, 0x00	; 0
 534:	06 96       	adiw	r24, 0x06	; 6
 536:	0e 94 11 04 	call	0x822	; 0x822 <longjmp>
 53a:	0f 90       	pop	r0
 53c:	0f 90       	pop	r0
 53e:	df 91       	pop	r29
 540:	cf 91       	pop	r28
 542:	08 95       	ret

00000544 <spawn>:
 544:	cf 93       	push	r28
 546:	df 93       	push	r29
 548:	00 d0       	rcall	.+0      	; 0x54a <spawn+0x6>
 54a:	cd b7       	in	r28, 0x3d	; 61
 54c:	de b7       	in	r29, 0x3e	; 62
 54e:	f8 94       	cli
 550:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <initialized>
 554:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <initialized+0x1>
 558:	23 2b       	or	r18, r19
 55a:	81 f5       	brne	.+96     	; 0x5bc <spawn+0x78>
 55c:	2e e3       	ldi	r18, 0x3E	; 62
 55e:	32 e0       	ldi	r19, 0x02	; 2
 560:	30 93 d6 01 	sts	0x01D6, r19	; 0x8001d6 <threads+0x5>
 564:	20 93 d5 01 	sts	0x01D5, r18	; 0x8001d5 <threads+0x4>
 568:	2b ea       	ldi	r18, 0xAB	; 171
 56a:	32 e0       	ldi	r19, 0x02	; 2
 56c:	30 93 43 02 	sts	0x0243, r19	; 0x800243 <threads+0x72>
 570:	20 93 42 02 	sts	0x0242, r18	; 0x800242 <threads+0x71>
 574:	28 e1       	ldi	r18, 0x18	; 24
 576:	33 e0       	ldi	r19, 0x03	; 3
 578:	30 93 b0 02 	sts	0x02B0, r19	; 0x8002b0 <threads+0xdf>
 57c:	20 93 af 02 	sts	0x02AF, r18	; 0x8002af <threads+0xde>
 580:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <threads+0x14c>
 584:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <threads+0x14b>
 588:	e1 e8       	ldi	r30, 0x81	; 129
 58a:	f0 e0       	ldi	r31, 0x00	; 0
 58c:	20 81       	ld	r18, Z
 58e:	28 60       	ori	r18, 0x08	; 8
 590:	20 83       	st	Z, r18
 592:	25 e8       	ldi	r18, 0x85	; 133
 594:	31 e0       	ldi	r19, 0x01	; 1
 596:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 59a:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
 59e:	20 81       	ld	r18, Z
 5a0:	25 60       	ori	r18, 0x05	; 5
 5a2:	20 83       	st	Z, r18
 5a4:	ef e6       	ldi	r30, 0x6F	; 111
 5a6:	f0 e0       	ldi	r31, 0x00	; 0
 5a8:	20 81       	ld	r18, Z
 5aa:	22 60       	ori	r18, 0x02	; 2
 5ac:	20 83       	st	Z, r18
 5ae:	78 94       	sei
 5b0:	21 e0       	ldi	r18, 0x01	; 1
 5b2:	30 e0       	ldi	r19, 0x00	; 0
 5b4:	30 93 61 01 	sts	0x0161, r19	; 0x800161 <initialized+0x1>
 5b8:	20 93 60 01 	sts	0x0160, r18	; 0x800160 <initialized>
 5bc:	20 91 53 01 	lds	r18, 0x0153	; 0x800153 <freeQ>
 5c0:	30 91 54 01 	lds	r19, 0x0154	; 0x800154 <freeQ+0x1>
 5c4:	3a 83       	std	Y+2, r19	; 0x02
 5c6:	29 83       	std	Y+1, r18	; 0x01
 5c8:	23 2b       	or	r18, r19
 5ca:	a9 f0       	breq	.+42     	; 0x5f6 <spawn+0xb2>
 5cc:	e9 81       	ldd	r30, Y+1	; 0x01
 5ce:	fa 81       	ldd	r31, Y+2	; 0x02
 5d0:	44 81       	ldd	r20, Z+4	; 0x04
 5d2:	55 81       	ldd	r21, Z+5	; 0x05
 5d4:	50 93 54 01 	sts	0x0154, r21	; 0x800154 <freeQ+0x1>
 5d8:	40 93 53 01 	sts	0x0153, r20	; 0x800153 <freeQ>
 5dc:	91 83       	std	Z+1, r25	; 0x01
 5de:	80 83       	st	Z, r24
 5e0:	73 83       	std	Z+3, r23	; 0x03
 5e2:	62 83       	std	Z+2, r22	; 0x02
 5e4:	15 82       	std	Z+5, r1	; 0x05
 5e6:	14 82       	std	Z+4, r1	; 0x04
 5e8:	cf 01       	movw	r24, r30
 5ea:	06 96       	adiw	r24, 0x06	; 6
 5ec:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <setjmp>
 5f0:	01 97       	sbiw	r24, 0x01	; 1
 5f2:	49 f5       	brne	.+82     	; 0x646 <spawn+0x102>
 5f4:	01 c0       	rjmp	.+2      	; 0x5f8 <spawn+0xb4>
 5f6:	ff cf       	rjmp	.-2      	; 0x5f6 <spawn+0xb2>
 5f8:	78 94       	sei
 5fa:	a0 91 51 01 	lds	r26, 0x0151	; 0x800151 <current>
 5fe:	b0 91 52 01 	lds	r27, 0x0152	; 0x800152 <current+0x1>
 602:	ed 91       	ld	r30, X+
 604:	fc 91       	ld	r31, X
 606:	11 97       	sbiw	r26, 0x01	; 1
 608:	12 96       	adiw	r26, 0x02	; 2
 60a:	8d 91       	ld	r24, X+
 60c:	9c 91       	ld	r25, X
 60e:	13 97       	sbiw	r26, 0x03	; 3
 610:	09 95       	icall
 612:	f8 94       	cli
 614:	63 e5       	ldi	r22, 0x53	; 83
 616:	71 e0       	ldi	r23, 0x01	; 1
 618:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <current>
 61c:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <current+0x1>
 620:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <enqueue>
 624:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <readyQ>
 628:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <readyQ+0x1>
 62c:	00 97       	sbiw	r24, 0x00	; 0
 62e:	51 f0       	breq	.+20     	; 0x644 <spawn+0x100>
 630:	fc 01       	movw	r30, r24
 632:	24 81       	ldd	r18, Z+4	; 0x04
 634:	35 81       	ldd	r19, Z+5	; 0x05
 636:	30 93 63 01 	sts	0x0163, r19	; 0x800163 <readyQ+0x1>
 63a:	20 93 62 01 	sts	0x0162, r18	; 0x800162 <readyQ>
 63e:	0e 94 82 02 	call	0x504	; 0x504 <dispatch>
 642:	01 c0       	rjmp	.+2      	; 0x646 <spawn+0x102>
 644:	ff cf       	rjmp	.-2      	; 0x644 <spawn+0x100>
 646:	e9 81       	ldd	r30, Y+1	; 0x01
 648:	fa 81       	ldd	r31, Y+2	; 0x02
 64a:	36 96       	adiw	r30, 0x06	; 6
 64c:	89 81       	ldd	r24, Y+1	; 0x01
 64e:	9a 81       	ldd	r25, Y+2	; 0x02
 650:	87 59       	subi	r24, 0x97	; 151
 652:	9f 4f       	sbci	r25, 0xFF	; 255
 654:	91 8b       	std	Z+17, r25	; 0x11
 656:	80 8b       	std	Z+16, r24	; 0x10
 658:	93 8b       	std	Z+19, r25	; 0x13
 65a:	82 8b       	std	Z+18, r24	; 0x12
 65c:	62 e6       	ldi	r22, 0x62	; 98
 65e:	71 e0       	ldi	r23, 0x01	; 1
 660:	89 81       	ldd	r24, Y+1	; 0x01
 662:	9a 81       	ldd	r25, Y+2	; 0x02
 664:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <enqueue>
 668:	78 94       	sei
 66a:	0f 90       	pop	r0
 66c:	0f 90       	pop	r0
 66e:	df 91       	pop	r29
 670:	cf 91       	pop	r28
 672:	08 95       	ret

00000674 <yield>:
 674:	f8 94       	cli
 676:	62 e6       	ldi	r22, 0x62	; 98
 678:	71 e0       	ldi	r23, 0x01	; 1
 67a:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <current>
 67e:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <current+0x1>
 682:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <enqueue>
 686:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <readyQ>
 68a:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <readyQ+0x1>
 68e:	00 97       	sbiw	r24, 0x00	; 0
 690:	59 f0       	breq	.+22     	; 0x6a8 <yield+0x34>
 692:	fc 01       	movw	r30, r24
 694:	24 81       	ldd	r18, Z+4	; 0x04
 696:	35 81       	ldd	r19, Z+5	; 0x05
 698:	30 93 63 01 	sts	0x0163, r19	; 0x800163 <readyQ+0x1>
 69c:	20 93 62 01 	sts	0x0162, r18	; 0x800162 <readyQ>
 6a0:	0e 94 82 02 	call	0x504	; 0x504 <dispatch>
 6a4:	78 94       	sei
 6a6:	08 95       	ret
 6a8:	ff cf       	rjmp	.-2      	; 0x6a8 <yield+0x34>

000006aa <__vector_7>:
}

// Timer interupt

ISR(TIMER1_COMPA_vect) {
 6aa:	1f 92       	push	r1
 6ac:	0f 92       	push	r0
 6ae:	0f b6       	in	r0, 0x3f	; 63
 6b0:	0f 92       	push	r0
 6b2:	11 24       	eor	r1, r1
 6b4:	2f 93       	push	r18
 6b6:	3f 93       	push	r19
 6b8:	4f 93       	push	r20
 6ba:	5f 93       	push	r21
 6bc:	6f 93       	push	r22
 6be:	7f 93       	push	r23
 6c0:	8f 93       	push	r24
 6c2:	9f 93       	push	r25
 6c4:	af 93       	push	r26
 6c6:	bf 93       	push	r27
 6c8:	ef 93       	push	r30
 6ca:	ff 93       	push	r31
	interruptTimer++;
 6cc:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <interruptTimer>
 6d0:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <interruptTimer+0x1>
 6d4:	01 96       	adiw	r24, 0x01	; 1
 6d6:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <interruptTimer+0x1>
 6da:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <interruptTimer>
	yield(); // Call yield() to switch threads
 6de:	0e 94 3a 03 	call	0x674	; 0x674 <yield>
}
 6e2:	ff 91       	pop	r31
 6e4:	ef 91       	pop	r30
 6e6:	bf 91       	pop	r27
 6e8:	af 91       	pop	r26
 6ea:	9f 91       	pop	r25
 6ec:	8f 91       	pop	r24
 6ee:	7f 91       	pop	r23
 6f0:	6f 91       	pop	r22
 6f2:	5f 91       	pop	r21
 6f4:	4f 91       	pop	r20
 6f6:	3f 91       	pop	r19
 6f8:	2f 91       	pop	r18
 6fa:	0f 90       	pop	r0
 6fc:	0f be       	out	0x3f, r0	; 63
 6fe:	0f 90       	pop	r0
 700:	1f 90       	pop	r1
 702:	18 95       	reti

00000704 <__divmodhi4>:
 704:	97 fb       	bst	r25, 7
 706:	07 2e       	mov	r0, r23
 708:	16 f4       	brtc	.+4      	; 0x70e <__divmodhi4+0xa>
 70a:	00 94       	com	r0
 70c:	07 d0       	rcall	.+14     	; 0x71c <__divmodhi4_neg1>
 70e:	77 fd       	sbrc	r23, 7
 710:	09 d0       	rcall	.+18     	; 0x724 <__divmodhi4_neg2>
 712:	0e 94 bb 03 	call	0x776	; 0x776 <__udivmodhi4>
 716:	07 fc       	sbrc	r0, 7
 718:	05 d0       	rcall	.+10     	; 0x724 <__divmodhi4_neg2>
 71a:	3e f4       	brtc	.+14     	; 0x72a <__divmodhi4_exit>

0000071c <__divmodhi4_neg1>:
 71c:	90 95       	com	r25
 71e:	81 95       	neg	r24
 720:	9f 4f       	sbci	r25, 0xFF	; 255
 722:	08 95       	ret

00000724 <__divmodhi4_neg2>:
 724:	70 95       	com	r23
 726:	61 95       	neg	r22
 728:	7f 4f       	sbci	r23, 0xFF	; 255

0000072a <__divmodhi4_exit>:
 72a:	08 95       	ret

0000072c <__divmodsi4>:
 72c:	05 2e       	mov	r0, r21
 72e:	97 fb       	bst	r25, 7
 730:	1e f4       	brtc	.+6      	; 0x738 <__divmodsi4+0xc>
 732:	00 94       	com	r0
 734:	0e 94 ad 03 	call	0x75a	; 0x75a <__negsi2>
 738:	57 fd       	sbrc	r21, 7
 73a:	07 d0       	rcall	.+14     	; 0x74a <__divmodsi4_neg2>
 73c:	0e 94 cf 03 	call	0x79e	; 0x79e <__udivmodsi4>
 740:	07 fc       	sbrc	r0, 7
 742:	03 d0       	rcall	.+6      	; 0x74a <__divmodsi4_neg2>
 744:	4e f4       	brtc	.+18     	; 0x758 <__divmodsi4_exit>
 746:	0c 94 ad 03 	jmp	0x75a	; 0x75a <__negsi2>

0000074a <__divmodsi4_neg2>:
 74a:	50 95       	com	r21
 74c:	40 95       	com	r20
 74e:	30 95       	com	r19
 750:	21 95       	neg	r18
 752:	3f 4f       	sbci	r19, 0xFF	; 255
 754:	4f 4f       	sbci	r20, 0xFF	; 255
 756:	5f 4f       	sbci	r21, 0xFF	; 255

00000758 <__divmodsi4_exit>:
 758:	08 95       	ret

0000075a <__negsi2>:
 75a:	90 95       	com	r25
 75c:	80 95       	com	r24
 75e:	70 95       	com	r23
 760:	61 95       	neg	r22
 762:	7f 4f       	sbci	r23, 0xFF	; 255
 764:	8f 4f       	sbci	r24, 0xFF	; 255
 766:	9f 4f       	sbci	r25, 0xFF	; 255
 768:	08 95       	ret

0000076a <__tablejump2__>:
 76a:	ee 0f       	add	r30, r30
 76c:	ff 1f       	adc	r31, r31
 76e:	05 90       	lpm	r0, Z+
 770:	f4 91       	lpm	r31, Z
 772:	e0 2d       	mov	r30, r0
 774:	09 94       	ijmp

00000776 <__udivmodhi4>:
 776:	aa 1b       	sub	r26, r26
 778:	bb 1b       	sub	r27, r27
 77a:	51 e1       	ldi	r21, 0x11	; 17
 77c:	07 c0       	rjmp	.+14     	; 0x78c <__udivmodhi4_ep>

0000077e <__udivmodhi4_loop>:
 77e:	aa 1f       	adc	r26, r26
 780:	bb 1f       	adc	r27, r27
 782:	a6 17       	cp	r26, r22
 784:	b7 07       	cpc	r27, r23
 786:	10 f0       	brcs	.+4      	; 0x78c <__udivmodhi4_ep>
 788:	a6 1b       	sub	r26, r22
 78a:	b7 0b       	sbc	r27, r23

0000078c <__udivmodhi4_ep>:
 78c:	88 1f       	adc	r24, r24
 78e:	99 1f       	adc	r25, r25
 790:	5a 95       	dec	r21
 792:	a9 f7       	brne	.-22     	; 0x77e <__udivmodhi4_loop>
 794:	80 95       	com	r24
 796:	90 95       	com	r25
 798:	bc 01       	movw	r22, r24
 79a:	cd 01       	movw	r24, r26
 79c:	08 95       	ret

0000079e <__udivmodsi4>:
 79e:	a1 e2       	ldi	r26, 0x21	; 33
 7a0:	1a 2e       	mov	r1, r26
 7a2:	aa 1b       	sub	r26, r26
 7a4:	bb 1b       	sub	r27, r27
 7a6:	fd 01       	movw	r30, r26
 7a8:	0d c0       	rjmp	.+26     	; 0x7c4 <__udivmodsi4_ep>

000007aa <__udivmodsi4_loop>:
 7aa:	aa 1f       	adc	r26, r26
 7ac:	bb 1f       	adc	r27, r27
 7ae:	ee 1f       	adc	r30, r30
 7b0:	ff 1f       	adc	r31, r31
 7b2:	a2 17       	cp	r26, r18
 7b4:	b3 07       	cpc	r27, r19
 7b6:	e4 07       	cpc	r30, r20
 7b8:	f5 07       	cpc	r31, r21
 7ba:	20 f0       	brcs	.+8      	; 0x7c4 <__udivmodsi4_ep>
 7bc:	a2 1b       	sub	r26, r18
 7be:	b3 0b       	sbc	r27, r19
 7c0:	e4 0b       	sbc	r30, r20
 7c2:	f5 0b       	sbc	r31, r21

000007c4 <__udivmodsi4_ep>:
 7c4:	66 1f       	adc	r22, r22
 7c6:	77 1f       	adc	r23, r23
 7c8:	88 1f       	adc	r24, r24
 7ca:	99 1f       	adc	r25, r25
 7cc:	1a 94       	dec	r1
 7ce:	69 f7       	brne	.-38     	; 0x7aa <__udivmodsi4_loop>
 7d0:	60 95       	com	r22
 7d2:	70 95       	com	r23
 7d4:	80 95       	com	r24
 7d6:	90 95       	com	r25
 7d8:	9b 01       	movw	r18, r22
 7da:	ac 01       	movw	r20, r24
 7dc:	bd 01       	movw	r22, r26
 7de:	cf 01       	movw	r24, r30
 7e0:	08 95       	ret

000007e2 <setjmp>:
 7e2:	dc 01       	movw	r26, r24
 7e4:	2d 92       	st	X+, r2
 7e6:	3d 92       	st	X+, r3
 7e8:	4d 92       	st	X+, r4
 7ea:	5d 92       	st	X+, r5
 7ec:	6d 92       	st	X+, r6
 7ee:	7d 92       	st	X+, r7
 7f0:	8d 92       	st	X+, r8
 7f2:	9d 92       	st	X+, r9
 7f4:	ad 92       	st	X+, r10
 7f6:	bd 92       	st	X+, r11
 7f8:	cd 92       	st	X+, r12
 7fa:	dd 92       	st	X+, r13
 7fc:	ed 92       	st	X+, r14
 7fe:	fd 92       	st	X+, r15
 800:	0d 93       	st	X+, r16
 802:	1d 93       	st	X+, r17
 804:	cd 93       	st	X+, r28
 806:	dd 93       	st	X+, r29
 808:	ff 91       	pop	r31
 80a:	ef 91       	pop	r30
 80c:	8d b7       	in	r24, 0x3d	; 61
 80e:	8d 93       	st	X+, r24
 810:	8e b7       	in	r24, 0x3e	; 62
 812:	8d 93       	st	X+, r24
 814:	8f b7       	in	r24, 0x3f	; 63
 816:	8d 93       	st	X+, r24
 818:	ed 93       	st	X+, r30
 81a:	fd 93       	st	X+, r31
 81c:	88 27       	eor	r24, r24
 81e:	99 27       	eor	r25, r25
 820:	09 94       	ijmp

00000822 <longjmp>:
 822:	dc 01       	movw	r26, r24
 824:	cb 01       	movw	r24, r22
 826:	81 30       	cpi	r24, 0x01	; 1
 828:	91 05       	cpc	r25, r1
 82a:	81 1d       	adc	r24, r1
 82c:	2d 90       	ld	r2, X+
 82e:	3d 90       	ld	r3, X+
 830:	4d 90       	ld	r4, X+
 832:	5d 90       	ld	r5, X+
 834:	6d 90       	ld	r6, X+
 836:	7d 90       	ld	r7, X+
 838:	8d 90       	ld	r8, X+
 83a:	9d 90       	ld	r9, X+
 83c:	ad 90       	ld	r10, X+
 83e:	bd 90       	ld	r11, X+
 840:	cd 90       	ld	r12, X+
 842:	dd 90       	ld	r13, X+
 844:	ed 90       	ld	r14, X+
 846:	fd 90       	ld	r15, X+
 848:	0d 91       	ld	r16, X+
 84a:	1d 91       	ld	r17, X+
 84c:	cd 91       	ld	r28, X+
 84e:	dd 91       	ld	r29, X+
 850:	ed 91       	ld	r30, X+
 852:	fd 91       	ld	r31, X+
 854:	0d 90       	ld	r0, X+
 856:	f8 94       	cli
 858:	fe bf       	out	0x3e, r31	; 62
 85a:	0f be       	out	0x3f, r0	; 63
 85c:	ed bf       	out	0x3d, r30	; 61
 85e:	ed 91       	ld	r30, X+
 860:	fd 91       	ld	r31, X+
 862:	09 94       	ijmp

00000864 <_exit>:
 864:	f8 94       	cli

00000866 <__stop_program>:
 866:	ff cf       	rjmp	.-2      	; 0x866 <__stop_program>
