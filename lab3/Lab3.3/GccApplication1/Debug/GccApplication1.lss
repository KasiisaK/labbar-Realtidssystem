
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000058  00800100  00000888  0000091c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000888  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000022f  00800158  00800158  00000974  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000974  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  000009e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013e1  00000000  00000000  00000ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b75  00000000  00000000  00001e95  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000080d  00000000  00000000  00002a0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000284  00000000  00000000  00003218  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000665  00000000  00000000  0000349c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000be4  00000000  00000000  00003b01  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  000046e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 87 02 	jmp	0x50e	; 0x50e <__vector_3>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__vector_7>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	b4 00       	.word	0x00b4	; ????
  5e:	96 00       	.word	0x0096	; ????
  60:	99 00       	.word	0x0099	; ????
  62:	9c 00       	.word	0x009c	; ????
  64:	9f 00       	.word	0x009f	; ????
  66:	a2 00       	.word	0x00a2	; ????
  68:	a5 00       	.word	0x00a5	; ????
  6a:	a8 00       	.word	0x00a8	; ????
  6c:	ab 00       	.word	0x00ab	; ????
  6e:	ae 00       	.word	0x00ae	; ????

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e8 e8       	ldi	r30, 0x88	; 136
  84:	f8 e0       	ldi	r31, 0x08	; 8
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a8 35       	cpi	r26, 0x58	; 88
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	23 e0       	ldi	r18, 0x03	; 3
  94:	a8 e5       	ldi	r26, 0x58	; 88
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a7 38       	cpi	r26, 0x87	; 135
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 bc 02 	call	0x578	; 0x578 <main>
  a6:	0c 94 42 04 	jmp	0x884	; 0x884 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <blink>:
			//'0' is 48 in ASCI and digit offsets to right ASCI char
			writeChar(digit + '0', pos);
		}
		pos--; //next pos
	}
}
  ae:	ec ef       	ldi	r30, 0xFC	; 252
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	90 81       	ld	r25, Z
  b4:	82 e0       	ldi	r24, 0x02	; 2
  b6:	89 27       	eor	r24, r25
  b8:	80 83       	st	Z, r24
  ba:	08 95       	ret

000000bc <init>:
  bc:	e1 e6       	ldi	r30, 0x61	; 97
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 e8       	ldi	r24, 0x80	; 128
  c2:	80 83       	st	Z, r24
  c4:	10 82       	st	Z, r1
  c6:	e1 e8       	ldi	r30, 0x81	; 129
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	88 60       	ori	r24, 0x08	; 8
  ce:	80 83       	st	Z, r24
  d0:	81 e4       	ldi	r24, 0x41	; 65
  d2:	9f e0       	ldi	r25, 0x0F	; 15
  d4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
  d8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
  dc:	80 81       	ld	r24, Z
  de:	85 60       	ori	r24, 0x05	; 5
  e0:	80 83       	st	Z, r24
  e2:	ef e6       	ldi	r30, 0x6F	; 111
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	82 60       	ori	r24, 0x02	; 2
  ea:	80 83       	st	Z, r24
  ec:	27 98       	cbi	0x04, 7	; 4
  ee:	2f 9a       	sbi	0x05, 7	; 5
  f0:	ec e6       	ldi	r30, 0x6C	; 108
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	80 68       	ori	r24, 0x80	; 128
  f8:	80 83       	st	Z, r24
  fa:	ef 9a       	sbi	0x1d, 7	; 29
  fc:	08 95       	ret

000000fe <LCD_init>:
  fe:	8f e0       	ldi	r24, 0x0F	; 15
 100:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__DATA_REGION_ORIGIN__+0x87>
 104:	87 eb       	ldi	r24, 0xB7	; 183
 106:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
 10a:	87 e0       	ldi	r24, 0x07	; 7
 10c:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__DATA_REGION_ORIGIN__+0x86>
 110:	80 ec       	ldi	r24, 0xC0	; 192
 112:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
 116:	08 95       	ret

00000118 <getSegmentForChar>:
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	fc 01       	movw	r30, r24
 11c:	f0 97       	sbiw	r30, 0x30	; 48
 11e:	ea 30       	cpi	r30, 0x0A	; 10
 120:	f1 05       	cpc	r31, r1
 122:	f8 f4       	brcc	.+62     	; 0x162 <getSegmentForChar+0x4a>
 124:	e2 5d       	subi	r30, 0xD2	; 210
 126:	ff 4f       	sbci	r31, 0xFF	; 255
 128:	0c 94 c5 03 	jmp	0x78a	; 0x78a <__tablejump2__>
 12c:	81 e4       	ldi	r24, 0x41	; 65
 12e:	91 e0       	ldi	r25, 0x01	; 1
 130:	08 95       	ret
 132:	89 e3       	ldi	r24, 0x39	; 57
 134:	91 e0       	ldi	r25, 0x01	; 1
 136:	08 95       	ret
 138:	81 e3       	ldi	r24, 0x31	; 49
 13a:	91 e0       	ldi	r25, 0x01	; 1
 13c:	08 95       	ret
 13e:	89 e2       	ldi	r24, 0x29	; 41
 140:	91 e0       	ldi	r25, 0x01	; 1
 142:	08 95       	ret
 144:	81 e2       	ldi	r24, 0x21	; 33
 146:	91 e0       	ldi	r25, 0x01	; 1
 148:	08 95       	ret
 14a:	89 e1       	ldi	r24, 0x19	; 25
 14c:	91 e0       	ldi	r25, 0x01	; 1
 14e:	08 95       	ret
 150:	81 e1       	ldi	r24, 0x11	; 17
 152:	91 e0       	ldi	r25, 0x01	; 1
 154:	08 95       	ret
 156:	89 e0       	ldi	r24, 0x09	; 9
 158:	91 e0       	ldi	r25, 0x01	; 1
 15a:	08 95       	ret
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	91 e0       	ldi	r25, 0x01	; 1
 160:	08 95       	ret
 162:	88 e5       	ldi	r24, 0x58	; 88
 164:	91 e0       	ldi	r25, 0x01	; 1
 166:	08 95       	ret
 168:	89 e4       	ldi	r24, 0x49	; 73
 16a:	91 e0       	ldi	r25, 0x01	; 1
 16c:	08 95       	ret

0000016e <writeChar>:
 16e:	cf 93       	push	r28
 170:	65 30       	cpi	r22, 0x05	; 5
 172:	08 f0       	brcs	.+2      	; 0x176 <writeChar+0x8>
 174:	e4 c0       	rjmp	.+456    	; 0x33e <writeChar+0x1d0>
 176:	c6 2f       	mov	r28, r22
 178:	0e 94 8c 00 	call	0x118	; 0x118 <getSegmentForChar>
 17c:	fc 01       	movw	r30, r24
 17e:	c2 30       	cpi	r28, 0x02	; 2
 180:	09 f4       	brne	.+2      	; 0x184 <writeChar+0x16>
 182:	67 c0       	rjmp	.+206    	; 0x252 <writeChar+0xe4>
 184:	28 f4       	brcc	.+10     	; 0x190 <writeChar+0x22>
 186:	cc 23       	and	r28, r28
 188:	51 f0       	breq	.+20     	; 0x19e <writeChar+0x30>
 18a:	c1 30       	cpi	r28, 0x01	; 1
 18c:	29 f1       	breq	.+74     	; 0x1d8 <writeChar+0x6a>
 18e:	d7 c0       	rjmp	.+430    	; 0x33e <writeChar+0x1d0>
 190:	c3 30       	cpi	r28, 0x03	; 3
 192:	09 f4       	brne	.+2      	; 0x196 <writeChar+0x28>
 194:	7b c0       	rjmp	.+246    	; 0x28c <writeChar+0x11e>
 196:	c4 30       	cpi	r28, 0x04	; 4
 198:	09 f4       	brne	.+2      	; 0x19c <writeChar+0x2e>
 19a:	b5 c0       	rjmp	.+362    	; 0x306 <writeChar+0x198>
 19c:	d0 c0       	rjmp	.+416    	; 0x33e <writeChar+0x1d0>
 19e:	ac ee       	ldi	r26, 0xEC	; 236
 1a0:	b0 e0       	ldi	r27, 0x00	; 0
 1a2:	8c 91       	ld	r24, X
 1a4:	80 7f       	andi	r24, 0xF0	; 240
 1a6:	90 81       	ld	r25, Z
 1a8:	89 2b       	or	r24, r25
 1aa:	8c 93       	st	X, r24
 1ac:	a1 ef       	ldi	r26, 0xF1	; 241
 1ae:	b0 e0       	ldi	r27, 0x00	; 0
 1b0:	8c 91       	ld	r24, X
 1b2:	80 7f       	andi	r24, 0xF0	; 240
 1b4:	92 81       	ldd	r25, Z+2	; 0x02
 1b6:	89 2b       	or	r24, r25
 1b8:	8c 93       	st	X, r24
 1ba:	a6 ef       	ldi	r26, 0xF6	; 246
 1bc:	b0 e0       	ldi	r27, 0x00	; 0
 1be:	8c 91       	ld	r24, X
 1c0:	80 7f       	andi	r24, 0xF0	; 240
 1c2:	94 81       	ldd	r25, Z+4	; 0x04
 1c4:	89 2b       	or	r24, r25
 1c6:	8c 93       	st	X, r24
 1c8:	ab ef       	ldi	r26, 0xFB	; 251
 1ca:	b0 e0       	ldi	r27, 0x00	; 0
 1cc:	8c 91       	ld	r24, X
 1ce:	80 7f       	andi	r24, 0xF0	; 240
 1d0:	96 81       	ldd	r25, Z+6	; 0x06
 1d2:	89 2b       	or	r24, r25
 1d4:	8c 93       	st	X, r24
 1d6:	b3 c0       	rjmp	.+358    	; 0x33e <writeChar+0x1d0>
 1d8:	ac ee       	ldi	r26, 0xEC	; 236
 1da:	b0 e0       	ldi	r27, 0x00	; 0
 1dc:	2c 91       	ld	r18, X
 1de:	80 81       	ld	r24, Z
 1e0:	91 81       	ldd	r25, Z+1	; 0x01
 1e2:	82 95       	swap	r24
 1e4:	92 95       	swap	r25
 1e6:	90 7f       	andi	r25, 0xF0	; 240
 1e8:	98 27       	eor	r25, r24
 1ea:	80 7f       	andi	r24, 0xF0	; 240
 1ec:	98 27       	eor	r25, r24
 1ee:	92 2f       	mov	r25, r18
 1f0:	9f 70       	andi	r25, 0x0F	; 15
 1f2:	89 2b       	or	r24, r25
 1f4:	8c 93       	st	X, r24
 1f6:	a1 ef       	ldi	r26, 0xF1	; 241
 1f8:	b0 e0       	ldi	r27, 0x00	; 0
 1fa:	2c 91       	ld	r18, X
 1fc:	82 81       	ldd	r24, Z+2	; 0x02
 1fe:	93 81       	ldd	r25, Z+3	; 0x03
 200:	82 95       	swap	r24
 202:	92 95       	swap	r25
 204:	90 7f       	andi	r25, 0xF0	; 240
 206:	98 27       	eor	r25, r24
 208:	80 7f       	andi	r24, 0xF0	; 240
 20a:	98 27       	eor	r25, r24
 20c:	92 2f       	mov	r25, r18
 20e:	9f 70       	andi	r25, 0x0F	; 15
 210:	89 2b       	or	r24, r25
 212:	8c 93       	st	X, r24
 214:	a6 ef       	ldi	r26, 0xF6	; 246
 216:	b0 e0       	ldi	r27, 0x00	; 0
 218:	2c 91       	ld	r18, X
 21a:	84 81       	ldd	r24, Z+4	; 0x04
 21c:	95 81       	ldd	r25, Z+5	; 0x05
 21e:	82 95       	swap	r24
 220:	92 95       	swap	r25
 222:	90 7f       	andi	r25, 0xF0	; 240
 224:	98 27       	eor	r25, r24
 226:	80 7f       	andi	r24, 0xF0	; 240
 228:	98 27       	eor	r25, r24
 22a:	92 2f       	mov	r25, r18
 22c:	9f 70       	andi	r25, 0x0F	; 15
 22e:	89 2b       	or	r24, r25
 230:	8c 93       	st	X, r24
 232:	ab ef       	ldi	r26, 0xFB	; 251
 234:	b0 e0       	ldi	r27, 0x00	; 0
 236:	2c 91       	ld	r18, X
 238:	86 81       	ldd	r24, Z+6	; 0x06
 23a:	97 81       	ldd	r25, Z+7	; 0x07
 23c:	82 95       	swap	r24
 23e:	92 95       	swap	r25
 240:	90 7f       	andi	r25, 0xF0	; 240
 242:	98 27       	eor	r25, r24
 244:	80 7f       	andi	r24, 0xF0	; 240
 246:	98 27       	eor	r25, r24
 248:	92 2f       	mov	r25, r18
 24a:	9f 70       	andi	r25, 0x0F	; 15
 24c:	89 2b       	or	r24, r25
 24e:	8c 93       	st	X, r24
 250:	76 c0       	rjmp	.+236    	; 0x33e <writeChar+0x1d0>
 252:	ad ee       	ldi	r26, 0xED	; 237
 254:	b0 e0       	ldi	r27, 0x00	; 0
 256:	8c 91       	ld	r24, X
 258:	80 7f       	andi	r24, 0xF0	; 240
 25a:	90 81       	ld	r25, Z
 25c:	89 2b       	or	r24, r25
 25e:	8c 93       	st	X, r24
 260:	a2 ef       	ldi	r26, 0xF2	; 242
 262:	b0 e0       	ldi	r27, 0x00	; 0
 264:	8c 91       	ld	r24, X
 266:	80 7f       	andi	r24, 0xF0	; 240
 268:	92 81       	ldd	r25, Z+2	; 0x02
 26a:	89 2b       	or	r24, r25
 26c:	8c 93       	st	X, r24
 26e:	a7 ef       	ldi	r26, 0xF7	; 247
 270:	b0 e0       	ldi	r27, 0x00	; 0
 272:	8c 91       	ld	r24, X
 274:	80 7f       	andi	r24, 0xF0	; 240
 276:	94 81       	ldd	r25, Z+4	; 0x04
 278:	89 2b       	or	r24, r25
 27a:	8c 93       	st	X, r24
 27c:	ac ef       	ldi	r26, 0xFC	; 252
 27e:	b0 e0       	ldi	r27, 0x00	; 0
 280:	8c 91       	ld	r24, X
 282:	80 7f       	andi	r24, 0xF0	; 240
 284:	96 81       	ldd	r25, Z+6	; 0x06
 286:	89 2b       	or	r24, r25
 288:	8c 93       	st	X, r24
 28a:	59 c0       	rjmp	.+178    	; 0x33e <writeChar+0x1d0>
 28c:	ad ee       	ldi	r26, 0xED	; 237
 28e:	b0 e0       	ldi	r27, 0x00	; 0
 290:	2c 91       	ld	r18, X
 292:	80 81       	ld	r24, Z
 294:	91 81       	ldd	r25, Z+1	; 0x01
 296:	82 95       	swap	r24
 298:	92 95       	swap	r25
 29a:	90 7f       	andi	r25, 0xF0	; 240
 29c:	98 27       	eor	r25, r24
 29e:	80 7f       	andi	r24, 0xF0	; 240
 2a0:	98 27       	eor	r25, r24
 2a2:	92 2f       	mov	r25, r18
 2a4:	9f 70       	andi	r25, 0x0F	; 15
 2a6:	89 2b       	or	r24, r25
 2a8:	8c 93       	st	X, r24
 2aa:	a2 ef       	ldi	r26, 0xF2	; 242
 2ac:	b0 e0       	ldi	r27, 0x00	; 0
 2ae:	2c 91       	ld	r18, X
 2b0:	82 81       	ldd	r24, Z+2	; 0x02
 2b2:	93 81       	ldd	r25, Z+3	; 0x03
 2b4:	82 95       	swap	r24
 2b6:	92 95       	swap	r25
 2b8:	90 7f       	andi	r25, 0xF0	; 240
 2ba:	98 27       	eor	r25, r24
 2bc:	80 7f       	andi	r24, 0xF0	; 240
 2be:	98 27       	eor	r25, r24
 2c0:	92 2f       	mov	r25, r18
 2c2:	9f 70       	andi	r25, 0x0F	; 15
 2c4:	89 2b       	or	r24, r25
 2c6:	8c 93       	st	X, r24
 2c8:	a7 ef       	ldi	r26, 0xF7	; 247
 2ca:	b0 e0       	ldi	r27, 0x00	; 0
 2cc:	2c 91       	ld	r18, X
 2ce:	84 81       	ldd	r24, Z+4	; 0x04
 2d0:	95 81       	ldd	r25, Z+5	; 0x05
 2d2:	82 95       	swap	r24
 2d4:	92 95       	swap	r25
 2d6:	90 7f       	andi	r25, 0xF0	; 240
 2d8:	98 27       	eor	r25, r24
 2da:	80 7f       	andi	r24, 0xF0	; 240
 2dc:	98 27       	eor	r25, r24
 2de:	92 2f       	mov	r25, r18
 2e0:	9f 70       	andi	r25, 0x0F	; 15
 2e2:	89 2b       	or	r24, r25
 2e4:	8c 93       	st	X, r24
 2e6:	ac ef       	ldi	r26, 0xFC	; 252
 2e8:	b0 e0       	ldi	r27, 0x00	; 0
 2ea:	2c 91       	ld	r18, X
 2ec:	86 81       	ldd	r24, Z+6	; 0x06
 2ee:	97 81       	ldd	r25, Z+7	; 0x07
 2f0:	82 95       	swap	r24
 2f2:	92 95       	swap	r25
 2f4:	90 7f       	andi	r25, 0xF0	; 240
 2f6:	98 27       	eor	r25, r24
 2f8:	80 7f       	andi	r24, 0xF0	; 240
 2fa:	98 27       	eor	r25, r24
 2fc:	92 2f       	mov	r25, r18
 2fe:	9f 70       	andi	r25, 0x0F	; 15
 300:	89 2b       	or	r24, r25
 302:	8c 93       	st	X, r24
 304:	1c c0       	rjmp	.+56     	; 0x33e <writeChar+0x1d0>
 306:	ae ee       	ldi	r26, 0xEE	; 238
 308:	b0 e0       	ldi	r27, 0x00	; 0
 30a:	8c 91       	ld	r24, X
 30c:	80 7f       	andi	r24, 0xF0	; 240
 30e:	90 81       	ld	r25, Z
 310:	89 2b       	or	r24, r25
 312:	8c 93       	st	X, r24
 314:	a3 ef       	ldi	r26, 0xF3	; 243
 316:	b0 e0       	ldi	r27, 0x00	; 0
 318:	8c 91       	ld	r24, X
 31a:	80 7f       	andi	r24, 0xF0	; 240
 31c:	92 81       	ldd	r25, Z+2	; 0x02
 31e:	89 2b       	or	r24, r25
 320:	8c 93       	st	X, r24
 322:	a8 ef       	ldi	r26, 0xF8	; 248
 324:	b0 e0       	ldi	r27, 0x00	; 0
 326:	8c 91       	ld	r24, X
 328:	80 7f       	andi	r24, 0xF0	; 240
 32a:	94 81       	ldd	r25, Z+4	; 0x04
 32c:	89 2b       	or	r24, r25
 32e:	8c 93       	st	X, r24
 330:	ad ef       	ldi	r26, 0xFD	; 253
 332:	b0 e0       	ldi	r27, 0x00	; 0
 334:	8c 91       	ld	r24, X
 336:	80 7f       	andi	r24, 0xF0	; 240
 338:	96 81       	ldd	r25, Z+6	; 0x06
 33a:	89 2b       	or	r24, r25
 33c:	8c 93       	st	X, r24
 33e:	cf 91       	pop	r28
 340:	08 95       	ret

00000342 <printAt>:
 342:	8f 92       	push	r8
 344:	9f 92       	push	r9
 346:	af 92       	push	r10
 348:	bf 92       	push	r11
 34a:	cf 92       	push	r12
 34c:	df 92       	push	r13
 34e:	ef 92       	push	r14
 350:	ff 92       	push	r15
 352:	cf 93       	push	r28
 354:	df 93       	push	r29
 356:	4b 01       	movw	r8, r22
 358:	5c 01       	movw	r10, r24
 35a:	ea 01       	movw	r28, r20
 35c:	24 e6       	ldi	r18, 0x64	; 100
 35e:	30 e0       	ldi	r19, 0x00	; 0
 360:	40 e0       	ldi	r20, 0x00	; 0
 362:	50 e0       	ldi	r21, 0x00	; 0
 364:	0e 94 a6 03 	call	0x74c	; 0x74c <__divmodsi4>
 368:	0f 2e       	mov	r0, r31
 36a:	fa e0       	ldi	r31, 0x0A	; 10
 36c:	cf 2e       	mov	r12, r31
 36e:	d1 2c       	mov	r13, r1
 370:	e1 2c       	mov	r14, r1
 372:	f1 2c       	mov	r15, r1
 374:	f0 2d       	mov	r31, r0
 376:	a7 01       	movw	r20, r14
 378:	96 01       	movw	r18, r12
 37a:	0e 94 a6 03 	call	0x74c	; 0x74c <__divmodsi4>
 37e:	6c 2f       	mov	r22, r28
 380:	80 e3       	ldi	r24, 0x30	; 48
 382:	82 0f       	add	r24, r18
 384:	0e 94 b7 00 	call	0x16e	; 0x16e <writeChar>
 388:	21 96       	adiw	r28, 0x01	; 1
 38a:	c5 01       	movw	r24, r10
 38c:	b4 01       	movw	r22, r8
 38e:	a7 01       	movw	r20, r14
 390:	96 01       	movw	r18, r12
 392:	0e 94 a6 03 	call	0x74c	; 0x74c <__divmodsi4>
 396:	86 2f       	mov	r24, r22
 398:	6c 2f       	mov	r22, r28
 39a:	80 5d       	subi	r24, 0xD0	; 208
 39c:	0e 94 b7 00 	call	0x16e	; 0x16e <writeChar>
 3a0:	df 91       	pop	r29
 3a2:	cf 91       	pop	r28
 3a4:	ff 90       	pop	r15
 3a6:	ef 90       	pop	r14
 3a8:	df 90       	pop	r13
 3aa:	cf 90       	pop	r12
 3ac:	bf 90       	pop	r11
 3ae:	af 90       	pop	r10
 3b0:	9f 90       	pop	r9
 3b2:	8f 90       	pop	r8
 3b4:	08 95       	ret

000003b6 <isPrime>:

bool isPrime(int number)
{
 3b6:	fc 01       	movw	r30, r24
	//0 and 1 are not prime numbers
	if (number <= 1) return false;
 3b8:	82 30       	cpi	r24, 0x02	; 2
 3ba:	91 05       	cpc	r25, r1
 3bc:	1c f1       	brlt	.+70     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>

	//loop from 2 to sqrt(number)
	for (int i=2; i*i <= number; i++)
 3be:	84 30       	cpi	r24, 0x04	; 4
 3c0:	91 05       	cpc	r25, r1
 3c2:	14 f1       	brlt	.+68     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
	{
		if (number % i == 0) return false;	//divisible => not prime
 3c4:	81 70       	andi	r24, 0x01	; 1
 3c6:	90 78       	andi	r25, 0x80	; 128
 3c8:	99 23       	and	r25, r25
 3ca:	24 f4       	brge	.+8      	; 0x3d4 <isPrime+0x1e>
 3cc:	01 97       	sbiw	r24, 0x01	; 1
 3ce:	8e 6f       	ori	r24, 0xFE	; 254
 3d0:	9f 6f       	ori	r25, 0xFF	; 255
 3d2:	01 96       	adiw	r24, 0x01	; 1
 3d4:	89 2b       	or	r24, r25
 3d6:	d1 f0       	breq	.+52     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3d8:	22 e0       	ldi	r18, 0x02	; 2
 3da:	30 e0       	ldi	r19, 0x00	; 0
 3dc:	06 c0       	rjmp	.+12     	; 0x3ea <isPrime+0x34>
 3de:	cf 01       	movw	r24, r30
 3e0:	b9 01       	movw	r22, r18
 3e2:	0e 94 92 03 	call	0x724	; 0x724 <__divmodhi4>
 3e6:	89 2b       	or	r24, r25
 3e8:	99 f0       	breq	.+38     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
{
	//0 and 1 are not prime numbers
	if (number <= 1) return false;

	//loop from 2 to sqrt(number)
	for (int i=2; i*i <= number; i++)
 3ea:	2f 5f       	subi	r18, 0xFF	; 255
 3ec:	3f 4f       	sbci	r19, 0xFF	; 255
 3ee:	22 9f       	mul	r18, r18
 3f0:	c0 01       	movw	r24, r0
 3f2:	23 9f       	mul	r18, r19
 3f4:	90 0d       	add	r25, r0
 3f6:	90 0d       	add	r25, r0
 3f8:	11 24       	eor	r1, r1
 3fa:	e8 17       	cp	r30, r24
 3fc:	f9 07       	cpc	r31, r25
 3fe:	7c f7       	brge	.-34     	; 0x3de <isPrime+0x28>
	{
		if (number % i == 0) return false;	//divisible => not prime
	}
	//is prime if no factors
	return true;
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	08 95       	ret
}

bool isPrime(int number)
{
	//0 and 1 are not prime numbers
	if (number <= 1) return false;
 404:	80 e0       	ldi	r24, 0x00	; 0
 406:	08 95       	ret
	for (int i=2; i*i <= number; i++)
	{
		if (number % i == 0) return false;	//divisible => not prime
	}
	//is prime if no factors
	return true;
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	08 95       	ret
	if (number <= 1) return false;

	//loop from 2 to sqrt(number)
	for (int i=2; i*i <= number; i++)
	{
		if (number % i == 0) return false;	//divisible => not prime
 40c:	80 e0       	ldi	r24, 0x00	; 0
 40e:	08 95       	ret
 410:	80 e0       	ldi	r24, 0x00	; 0
	}
	//is prime if no factors
	return true;
}
 412:	08 95       	ret

00000414 <primes>:

void primes() {
	while (true) {
		if (isPrime(primeN))
 414:	c0 91 51 01 	lds	r28, 0x0151	; 0x800151 <primeN>
 418:	d0 91 52 01 	lds	r29, 0x0152	; 0x800152 <primeN+0x1>
 41c:	ce 01       	movw	r24, r28
 41e:	0e 94 db 01 	call	0x3b6	; 0x3b6 <isPrime>
 422:	88 23       	and	r24, r24
 424:	89 f0       	breq	.+34     	; 0x448 <primes+0x34>
		{
			printAt(primeN, 0);
 426:	be 01       	movw	r22, r28
 428:	dd 0f       	add	r29, r29
 42a:	88 0b       	sbc	r24, r24
 42c:	99 0b       	sbc	r25, r25
 42e:	40 e0       	ldi	r20, 0x00	; 0
 430:	50 e0       	ldi	r21, 0x00	; 0
 432:	0e 94 a1 01 	call	0x342	; 0x342 <printAt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 436:	2f e9       	ldi	r18, 0x9F	; 159
 438:	86 e8       	ldi	r24, 0x86	; 134
 43a:	91 e0       	ldi	r25, 0x01	; 1
 43c:	21 50       	subi	r18, 0x01	; 1
 43e:	80 40       	sbci	r24, 0x00	; 0
 440:	90 40       	sbci	r25, 0x00	; 0
 442:	e1 f7       	brne	.-8      	; 0x43c <primes+0x28>
 444:	00 c0       	rjmp	.+0      	; 0x446 <primes+0x32>
 446:	00 00       	nop
			_delay_ms(500);
		}
		primeN++;
 448:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <primeN>
 44c:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <primeN+0x1>
 450:	01 96       	adiw	r24, 0x01	; 1
 452:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <primeN+0x1>
 456:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <primeN>
	}
 45a:	dc cf       	rjmp	.-72     	; 0x414 <primes>

0000045c <toggle_lcd>:
	LCDDR16 ^= (1 << 1);
}

// Toggle between two LCD segments
void toggle_lcd(uint8_t *current_segment) {
	if (*current_segment == LCD_SEGMENT1) {
 45c:	fc 01       	movw	r30, r24
 45e:	20 81       	ld	r18, Z
 460:	21 30       	cpi	r18, 0x01	; 1
 462:	69 f4       	brne	.+26     	; 0x47e <toggle_lcd+0x22>
		*current_segment = LCD_SEGMENT2;
 464:	20 e2       	ldi	r18, 0x20	; 32
 466:	20 83       	st	Z, r18
		// Clear LCD segment 1
		LCDDR3 &= ~LCD_SEGMENT1;
 468:	ef ee       	ldi	r30, 0xEF	; 239
 46a:	f0 e0       	ldi	r31, 0x00	; 0
 46c:	80 81       	ld	r24, Z
 46e:	8e 7f       	andi	r24, 0xFE	; 254
 470:	80 83       	st	Z, r24
		// Update to LCD segment 2
		LCDDR2 = (LCDDR2 & 0xFF) | LCD_SEGMENT2;
 472:	ee ee       	ldi	r30, 0xEE	; 238
 474:	f0 e0       	ldi	r31, 0x00	; 0
 476:	80 81       	ld	r24, Z
 478:	80 62       	ori	r24, 0x20	; 32
 47a:	80 83       	st	Z, r24
 47c:	08 95       	ret
		} else {
		*current_segment = LCD_SEGMENT1;
 47e:	21 e0       	ldi	r18, 0x01	; 1
 480:	fc 01       	movw	r30, r24
 482:	20 83       	st	Z, r18
		// Clear LCD segment 2
		LCDDR2 &= ~LCD_SEGMENT2;
 484:	ee ee       	ldi	r30, 0xEE	; 238
 486:	f0 e0       	ldi	r31, 0x00	; 0
 488:	80 81       	ld	r24, Z
 48a:	8f 7d       	andi	r24, 0xDF	; 223
 48c:	80 83       	st	Z, r24
		// Update to LCD segment 1
		LCDDR3 = (LCDDR3 & 0xFF) | LCD_SEGMENT1;
 48e:	ef ee       	ldi	r30, 0xEF	; 239
 490:	f0 e0       	ldi	r31, 0x00	; 0
 492:	80 81       	ld	r24, Z
 494:	81 60       	ori	r24, 0x01	; 1
 496:	80 83       	st	Z, r24
 498:	08 95       	ret

0000049a <button>:
}

void button() {
	static uint8_t current_segment = LCD_SEGMENT1;

	toggle_lcd(&current_segment);
 49a:	80 e0       	ldi	r24, 0x00	; 0
 49c:	91 e0       	ldi	r25, 0x01	; 1
 49e:	0e 94 2e 02 	call	0x45c	; 0x45c <toggle_lcd>
 4a2:	08 95       	ret

000004a4 <keyCounter>:
}

void keyCounter() {
	printAt(keyPresses, 3);
 4a4:	60 91 60 01 	lds	r22, 0x0160	; 0x800160 <keyPresses>
 4a8:	70 91 61 01 	lds	r23, 0x0161	; 0x800161 <keyPresses+0x1>
 4ac:	07 2e       	mov	r0, r23
 4ae:	00 0c       	add	r0, r0
 4b0:	88 0b       	sbc	r24, r24
 4b2:	99 0b       	sbc	r25, r25
 4b4:	43 e0       	ldi	r20, 0x03	; 3
 4b6:	50 e0       	ldi	r21, 0x00	; 0
 4b8:	0e 94 a1 01 	call	0x342	; 0x342 <printAt>
 4bc:	08 95       	ret

000004be <__vector_7>:
}

// Timer interrupt
ISR(TIMER1_COMPA_vect) {
 4be:	1f 92       	push	r1
 4c0:	0f 92       	push	r0
 4c2:	0f b6       	in	r0, 0x3f	; 63
 4c4:	0f 92       	push	r0
 4c6:	11 24       	eor	r1, r1
 4c8:	2f 93       	push	r18
 4ca:	3f 93       	push	r19
 4cc:	4f 93       	push	r20
 4ce:	5f 93       	push	r21
 4d0:	6f 93       	push	r22
 4d2:	7f 93       	push	r23
 4d4:	8f 93       	push	r24
 4d6:	9f 93       	push	r25
 4d8:	af 93       	push	r26
 4da:	bf 93       	push	r27
 4dc:	ef 93       	push	r30
 4de:	ff 93       	push	r31
	spawn(blink, 0);
 4e0:	60 e0       	ldi	r22, 0x00	; 0
 4e2:	70 e0       	ldi	r23, 0x00	; 0
 4e4:	87 e5       	ldi	r24, 0x57	; 87
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <spawn>
}
 4ec:	ff 91       	pop	r31
 4ee:	ef 91       	pop	r30
 4f0:	bf 91       	pop	r27
 4f2:	af 91       	pop	r26
 4f4:	9f 91       	pop	r25
 4f6:	8f 91       	pop	r24
 4f8:	7f 91       	pop	r23
 4fa:	6f 91       	pop	r22
 4fc:	5f 91       	pop	r21
 4fe:	4f 91       	pop	r20
 500:	3f 91       	pop	r19
 502:	2f 91       	pop	r18
 504:	0f 90       	pop	r0
 506:	0f be       	out	0x3f, r0	; 63
 508:	0f 90       	pop	r0
 50a:	1f 90       	pop	r1
 50c:	18 95       	reti

0000050e <__vector_3>:

// Joystick interrupt
ISR(PCINT1_vect) {
 50e:	1f 92       	push	r1
 510:	0f 92       	push	r0
 512:	0f b6       	in	r0, 0x3f	; 63
 514:	0f 92       	push	r0
 516:	11 24       	eor	r1, r1
 518:	2f 93       	push	r18
 51a:	3f 93       	push	r19
 51c:	4f 93       	push	r20
 51e:	5f 93       	push	r21
 520:	6f 93       	push	r22
 522:	7f 93       	push	r23
 524:	8f 93       	push	r24
 526:	9f 93       	push	r25
 528:	af 93       	push	r26
 52a:	bf 93       	push	r27
 52c:	ef 93       	push	r30
 52e:	ff 93       	push	r31
	// Check if joystick is pressed (active low, bit 7 of PINB == 0)
	if (!(PINB & (1 << PB7))) {
 530:	1f 99       	sbic	0x03, 7	; 3
 532:	11 c0       	rjmp	.+34     	; 0x556 <__vector_3+0x48>
		keyPresses++;
 534:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <keyPresses>
 538:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <keyPresses+0x1>
 53c:	01 96       	adiw	r24, 0x01	; 1
 53e:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <keyPresses+0x1>
 542:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <keyPresses>
		keyCounter();
 546:	0e 94 52 02 	call	0x4a4	; 0x4a4 <keyCounter>
		spawn(button, 0);
 54a:	60 e0       	ldi	r22, 0x00	; 0
 54c:	70 e0       	ldi	r23, 0x00	; 0
 54e:	8d e4       	ldi	r24, 0x4D	; 77
 550:	92 e0       	ldi	r25, 0x02	; 2
 552:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <spawn>
	}
}
 556:	ff 91       	pop	r31
 558:	ef 91       	pop	r30
 55a:	bf 91       	pop	r27
 55c:	af 91       	pop	r26
 55e:	9f 91       	pop	r25
 560:	8f 91       	pop	r24
 562:	7f 91       	pop	r23
 564:	6f 91       	pop	r22
 566:	5f 91       	pop	r21
 568:	4f 91       	pop	r20
 56a:	3f 91       	pop	r19
 56c:	2f 91       	pop	r18
 56e:	0f 90       	pop	r0
 570:	0f be       	out	0x3f, r0	; 63
 572:	0f 90       	pop	r0
 574:	1f 90       	pop	r1
 576:	18 95       	reti

00000578 <main>:


int main(void) {
	cli();
 578:	f8 94       	cli
	init();
 57a:	0e 94 5e 00 	call	0xbc	; 0xbc <init>
	LCD_init();
 57e:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_init>
	sei();
 582:	78 94       	sei

	primes();
 584:	0e 94 0a 02 	call	0x414	; 0x414 <primes>

00000588 <dispatch>:
        while (1) ;  // not much else to do...
    }
    return p;
}

static void dispatch(thread next) {
 588:	cf 93       	push	r28
 58a:	df 93       	push	r29
 58c:	00 d0       	rcall	.+0      	; 0x58e <dispatch+0x6>
 58e:	cd b7       	in	r28, 0x3d	; 61
 590:	de b7       	in	r29, 0x3e	; 62
 592:	9a 83       	std	Y+2, r25	; 0x02
 594:	89 83       	std	Y+1, r24	; 0x01
    if (setjmp(current->context) == 0) {
 596:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <current>
 59a:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <current+0x1>
 59e:	06 96       	adiw	r24, 0x06	; 6
 5a0:	0e 94 01 04 	call	0x802	; 0x802 <setjmp>
 5a4:	89 2b       	or	r24, r25
 5a6:	59 f4       	brne	.+22     	; 0x5be <dispatch+0x36>
        current = next;
 5a8:	89 81       	ldd	r24, Y+1	; 0x01
 5aa:	9a 81       	ldd	r25, Y+2	; 0x02
 5ac:	90 93 54 01 	sts	0x0154, r25	; 0x800154 <current+0x1>
 5b0:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <current>
        longjmp(next->context,1);
 5b4:	61 e0       	ldi	r22, 0x01	; 1
 5b6:	70 e0       	ldi	r23, 0x00	; 0
 5b8:	06 96       	adiw	r24, 0x06	; 6
 5ba:	0e 94 21 04 	call	0x842	; 0x842 <longjmp>
    }
}
 5be:	0f 90       	pop	r0
 5c0:	0f 90       	pop	r0
 5c2:	df 91       	pop	r29
 5c4:	cf 91       	pop	r28
 5c6:	08 95       	ret

000005c8 <spawn>:

void spawn(void (* function)(int), int arg) {
 5c8:	cf 93       	push	r28
 5ca:	df 93       	push	r29
 5cc:	00 d0       	rcall	.+0      	; 0x5ce <spawn+0x6>
 5ce:	cd b7       	in	r28, 0x3d	; 61
 5d0:	de b7       	in	r29, 0x3e	; 62
    thread newp;

    DISABLE();
 5d2:	f8 94       	cli
    if (!initialized) initialize();
 5d4:	20 91 62 01 	lds	r18, 0x0162	; 0x800162 <initialized>
 5d8:	30 91 63 01 	lds	r19, 0x0163	; 0x800163 <initialized+0x1>
 5dc:	23 2b       	or	r18, r19
 5de:	e1 f4       	brne	.+56     	; 0x618 <spawn+0x50>
int initialized = 0;

static void initialize(void) {
    int i;
    for (i=0; i<NTHREADS-1; i++)
        threads[i].next = &threads[i+1];
 5e0:	20 e4       	ldi	r18, 0x40	; 64
 5e2:	32 e0       	ldi	r19, 0x02	; 2
 5e4:	30 93 d8 01 	sts	0x01D8, r19	; 0x8001d8 <threads+0x5>
 5e8:	20 93 d7 01 	sts	0x01D7, r18	; 0x8001d7 <threads+0x4>
 5ec:	2d ea       	ldi	r18, 0xAD	; 173
 5ee:	32 e0       	ldi	r19, 0x02	; 2
 5f0:	30 93 45 02 	sts	0x0245, r19	; 0x800245 <threads+0x72>
 5f4:	20 93 44 02 	sts	0x0244, r18	; 0x800244 <threads+0x71>
 5f8:	2a e1       	ldi	r18, 0x1A	; 26
 5fa:	33 e0       	ldi	r19, 0x03	; 3
 5fc:	30 93 b2 02 	sts	0x02B2, r19	; 0x8002b2 <threads+0xdf>
 600:	20 93 b1 02 	sts	0x02B1, r18	; 0x8002b1 <threads+0xde>
    threads[NTHREADS-1].next = NULL;
 604:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <threads+0x14c>
 608:	10 92 1e 03 	sts	0x031E, r1	; 0x80031e <threads+0x14b>
    
    initialized = 1;
 60c:	21 e0       	ldi	r18, 0x01	; 1
 60e:	30 e0       	ldi	r19, 0x00	; 0
 610:	30 93 63 01 	sts	0x0163, r19	; 0x800163 <initialized+0x1>
 614:	20 93 62 01 	sts	0x0162, r18	; 0x800162 <initialized>
        q->next = p;
    }*/
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 618:	20 91 55 01 	lds	r18, 0x0155	; 0x800155 <freeQ>
 61c:	30 91 56 01 	lds	r19, 0x0156	; 0x800156 <freeQ+0x1>
 620:	3a 83       	std	Y+2, r19	; 0x02
 622:	29 83       	std	Y+1, r18	; 0x01
    if (*queue) {
 624:	23 2b       	or	r18, r19
 626:	e1 f0       	breq	.+56     	; 0x660 <spawn+0x98>
        *queue = (*queue)->next;
 628:	a9 81       	ldd	r26, Y+1	; 0x01
 62a:	ba 81       	ldd	r27, Y+2	; 0x02
 62c:	14 96       	adiw	r26, 0x04	; 4
 62e:	4d 91       	ld	r20, X+
 630:	5c 91       	ld	r21, X
 632:	15 97       	sbiw	r26, 0x05	; 5
 634:	50 93 56 01 	sts	0x0156, r21	; 0x800156 <freeQ+0x1>
 638:	40 93 55 01 	sts	0x0155, r20	; 0x800155 <freeQ>

    DISABLE();
    if (!initialized) initialize();

    newp = dequeue(&freeQ);
    newp->function = function;
 63c:	11 96       	adiw	r26, 0x01	; 1
 63e:	9c 93       	st	X, r25
 640:	8e 93       	st	-X, r24
    newp->arg = arg;
 642:	13 96       	adiw	r26, 0x03	; 3
 644:	7c 93       	st	X, r23
 646:	6e 93       	st	-X, r22
 648:	12 97       	sbiw	r26, 0x02	; 2
    newp->next = NULL;
 64a:	15 96       	adiw	r26, 0x05	; 5
 64c:	1c 92       	st	X, r1
 64e:	1e 92       	st	-X, r1
 650:	14 97       	sbiw	r26, 0x04	; 4
    if (setjmp(newp->context) == 1) {
 652:	cd 01       	movw	r24, r26
 654:	06 96       	adiw	r24, 0x06	; 6
 656:	0e 94 01 04 	call	0x802	; 0x802 <setjmp>
 65a:	01 97       	sbiw	r24, 0x01	; 1
 65c:	79 f5       	brne	.+94     	; 0x6bc <spawn+0xf4>
 65e:	01 c0       	rjmp	.+2      	; 0x662 <spawn+0x9a>
 660:	ff cf       	rjmp	.-2      	; 0x660 <spawn+0x98>
        ENABLE();
 662:	78 94       	sei
        current->function(current->arg);
 664:	a0 91 53 01 	lds	r26, 0x0153	; 0x800153 <current>
 668:	b0 91 54 01 	lds	r27, 0x0154	; 0x800154 <current+0x1>
 66c:	ed 91       	ld	r30, X+
 66e:	fc 91       	ld	r31, X
 670:	11 97       	sbiw	r26, 0x01	; 1
 672:	12 96       	adiw	r26, 0x02	; 2
 674:	8d 91       	ld	r24, X+
 676:	9c 91       	ld	r25, X
 678:	13 97       	sbiw	r26, 0x03	; 3
 67a:	09 95       	icall
        DISABLE();
 67c:	f8 94       	cli
        enqueue(current, &freeQ);
 67e:	e0 91 53 01 	lds	r30, 0x0153	; 0x800153 <current>
 682:	f0 91 54 01 	lds	r31, 0x0154	; 0x800154 <current+0x1>
    
    initialized = 1;
}

static void enqueue(thread p, thread *queue) {
    p->next = *queue;
 686:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <freeQ>
 68a:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <freeQ+0x1>
 68e:	95 83       	std	Z+5, r25	; 0x05
 690:	84 83       	std	Z+4, r24	; 0x04
    *queue = p;
 692:	f0 93 56 01 	sts	0x0156, r31	; 0x800156 <freeQ+0x1>
 696:	e0 93 55 01 	sts	0x0155, r30	; 0x800155 <freeQ>
        q->next = p;
    }*/
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 69a:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <readyQ>
 69e:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <readyQ+0x1>
    if (*queue) {
 6a2:	00 97       	sbiw	r24, 0x00	; 0
 6a4:	51 f0       	breq	.+20     	; 0x6ba <spawn+0xf2>
        *queue = (*queue)->next;
 6a6:	fc 01       	movw	r30, r24
 6a8:	24 81       	ldd	r18, Z+4	; 0x04
 6aa:	35 81       	ldd	r19, Z+5	; 0x05
 6ac:	30 93 65 01 	sts	0x0165, r19	; 0x800165 <readyQ+0x1>
 6b0:	20 93 64 01 	sts	0x0164, r18	; 0x800164 <readyQ>
    if (setjmp(newp->context) == 1) {
        ENABLE();
        current->function(current->arg);
        DISABLE();
        enqueue(current, &freeQ);
        dispatch(dequeue(&readyQ));
 6b4:	0e 94 c4 02 	call	0x588	; 0x588 <dispatch>
 6b8:	01 c0       	rjmp	.+2      	; 0x6bc <spawn+0xf4>
 6ba:	ff cf       	rjmp	.-2      	; 0x6ba <spawn+0xf2>
    }
    SETSTACK(&newp->context, &newp->stack);
 6bc:	e9 81       	ldd	r30, Y+1	; 0x01
 6be:	fa 81       	ldd	r31, Y+2	; 0x02
 6c0:	36 96       	adiw	r30, 0x06	; 6
 6c2:	89 81       	ldd	r24, Y+1	; 0x01
 6c4:	9a 81       	ldd	r25, Y+2	; 0x02
 6c6:	87 59       	subi	r24, 0x97	; 151
 6c8:	9f 4f       	sbci	r25, 0xFF	; 255
 6ca:	91 8b       	std	Z+17, r25	; 0x11
 6cc:	80 8b       	std	Z+16, r24	; 0x10
 6ce:	93 8b       	std	Z+19, r25	; 0x13
 6d0:	82 8b       	std	Z+18, r24	; 0x12

    enqueue(current, &readyQ);  //added
 6d2:	e0 91 53 01 	lds	r30, 0x0153	; 0x800153 <current>
 6d6:	f0 91 54 01 	lds	r31, 0x0154	; 0x800154 <current+0x1>
    
    initialized = 1;
}

static void enqueue(thread p, thread *queue) {
    p->next = *queue;
 6da:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <readyQ>
 6de:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <readyQ+0x1>
 6e2:	95 83       	std	Z+5, r25	; 0x05
 6e4:	84 83       	std	Z+4, r24	; 0x04
 6e6:	a9 81       	ldd	r26, Y+1	; 0x01
 6e8:	ba 81       	ldd	r27, Y+2	; 0x02
 6ea:	15 96       	adiw	r26, 0x05	; 5
 6ec:	fc 93       	st	X, r31
 6ee:	ee 93       	st	-X, r30
 6f0:	14 97       	sbiw	r26, 0x04	; 4
    *queue = p;
 6f2:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <readyQ+0x1>
 6f6:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <readyQ>
    }*/
}

static thread dequeue(thread *queue) {
    thread p = *queue;
    if (*queue) {
 6fa:	10 97       	sbiw	r26, 0x00	; 0
 6fc:	09 f4       	brne	.+2      	; 0x700 <spawn+0x138>
 6fe:	ff cf       	rjmp	.-2      	; 0x6fe <spawn+0x136>
        *queue = (*queue)->next;
 700:	14 96       	adiw	r26, 0x04	; 4
 702:	8d 91       	ld	r24, X+
 704:	9c 91       	ld	r25, X
 706:	15 97       	sbiw	r26, 0x05	; 5
 708:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <readyQ+0x1>
 70c:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <readyQ>
    }
    SETSTACK(&newp->context, &newp->stack);

    enqueue(current, &readyQ);  //added
    enqueue(newp, &readyQ);
    dispatch(dequeue(&readyQ)); //added
 710:	89 81       	ldd	r24, Y+1	; 0x01
 712:	9a 81       	ldd	r25, Y+2	; 0x02
 714:	0e 94 c4 02 	call	0x588	; 0x588 <dispatch>
    ENABLE();
 718:	78 94       	sei
}
 71a:	0f 90       	pop	r0
 71c:	0f 90       	pop	r0
 71e:	df 91       	pop	r29
 720:	cf 91       	pop	r28
 722:	08 95       	ret

00000724 <__divmodhi4>:
 724:	97 fb       	bst	r25, 7
 726:	07 2e       	mov	r0, r23
 728:	16 f4       	brtc	.+4      	; 0x72e <__divmodhi4+0xa>
 72a:	00 94       	com	r0
 72c:	07 d0       	rcall	.+14     	; 0x73c <__divmodhi4_neg1>
 72e:	77 fd       	sbrc	r23, 7
 730:	09 d0       	rcall	.+18     	; 0x744 <__divmodhi4_neg2>
 732:	0e 94 cb 03 	call	0x796	; 0x796 <__udivmodhi4>
 736:	07 fc       	sbrc	r0, 7
 738:	05 d0       	rcall	.+10     	; 0x744 <__divmodhi4_neg2>
 73a:	3e f4       	brtc	.+14     	; 0x74a <__divmodhi4_exit>

0000073c <__divmodhi4_neg1>:
 73c:	90 95       	com	r25
 73e:	81 95       	neg	r24
 740:	9f 4f       	sbci	r25, 0xFF	; 255
 742:	08 95       	ret

00000744 <__divmodhi4_neg2>:
 744:	70 95       	com	r23
 746:	61 95       	neg	r22
 748:	7f 4f       	sbci	r23, 0xFF	; 255

0000074a <__divmodhi4_exit>:
 74a:	08 95       	ret

0000074c <__divmodsi4>:
 74c:	05 2e       	mov	r0, r21
 74e:	97 fb       	bst	r25, 7
 750:	1e f4       	brtc	.+6      	; 0x758 <__divmodsi4+0xc>
 752:	00 94       	com	r0
 754:	0e 94 bd 03 	call	0x77a	; 0x77a <__negsi2>
 758:	57 fd       	sbrc	r21, 7
 75a:	07 d0       	rcall	.+14     	; 0x76a <__divmodsi4_neg2>
 75c:	0e 94 df 03 	call	0x7be	; 0x7be <__udivmodsi4>
 760:	07 fc       	sbrc	r0, 7
 762:	03 d0       	rcall	.+6      	; 0x76a <__divmodsi4_neg2>
 764:	4e f4       	brtc	.+18     	; 0x778 <__divmodsi4_exit>
 766:	0c 94 bd 03 	jmp	0x77a	; 0x77a <__negsi2>

0000076a <__divmodsi4_neg2>:
 76a:	50 95       	com	r21
 76c:	40 95       	com	r20
 76e:	30 95       	com	r19
 770:	21 95       	neg	r18
 772:	3f 4f       	sbci	r19, 0xFF	; 255
 774:	4f 4f       	sbci	r20, 0xFF	; 255
 776:	5f 4f       	sbci	r21, 0xFF	; 255

00000778 <__divmodsi4_exit>:
 778:	08 95       	ret

0000077a <__negsi2>:
 77a:	90 95       	com	r25
 77c:	80 95       	com	r24
 77e:	70 95       	com	r23
 780:	61 95       	neg	r22
 782:	7f 4f       	sbci	r23, 0xFF	; 255
 784:	8f 4f       	sbci	r24, 0xFF	; 255
 786:	9f 4f       	sbci	r25, 0xFF	; 255
 788:	08 95       	ret

0000078a <__tablejump2__>:
 78a:	ee 0f       	add	r30, r30
 78c:	ff 1f       	adc	r31, r31
 78e:	05 90       	lpm	r0, Z+
 790:	f4 91       	lpm	r31, Z
 792:	e0 2d       	mov	r30, r0
 794:	09 94       	ijmp

00000796 <__udivmodhi4>:
 796:	aa 1b       	sub	r26, r26
 798:	bb 1b       	sub	r27, r27
 79a:	51 e1       	ldi	r21, 0x11	; 17
 79c:	07 c0       	rjmp	.+14     	; 0x7ac <__udivmodhi4_ep>

0000079e <__udivmodhi4_loop>:
 79e:	aa 1f       	adc	r26, r26
 7a0:	bb 1f       	adc	r27, r27
 7a2:	a6 17       	cp	r26, r22
 7a4:	b7 07       	cpc	r27, r23
 7a6:	10 f0       	brcs	.+4      	; 0x7ac <__udivmodhi4_ep>
 7a8:	a6 1b       	sub	r26, r22
 7aa:	b7 0b       	sbc	r27, r23

000007ac <__udivmodhi4_ep>:
 7ac:	88 1f       	adc	r24, r24
 7ae:	99 1f       	adc	r25, r25
 7b0:	5a 95       	dec	r21
 7b2:	a9 f7       	brne	.-22     	; 0x79e <__udivmodhi4_loop>
 7b4:	80 95       	com	r24
 7b6:	90 95       	com	r25
 7b8:	bc 01       	movw	r22, r24
 7ba:	cd 01       	movw	r24, r26
 7bc:	08 95       	ret

000007be <__udivmodsi4>:
 7be:	a1 e2       	ldi	r26, 0x21	; 33
 7c0:	1a 2e       	mov	r1, r26
 7c2:	aa 1b       	sub	r26, r26
 7c4:	bb 1b       	sub	r27, r27
 7c6:	fd 01       	movw	r30, r26
 7c8:	0d c0       	rjmp	.+26     	; 0x7e4 <__udivmodsi4_ep>

000007ca <__udivmodsi4_loop>:
 7ca:	aa 1f       	adc	r26, r26
 7cc:	bb 1f       	adc	r27, r27
 7ce:	ee 1f       	adc	r30, r30
 7d0:	ff 1f       	adc	r31, r31
 7d2:	a2 17       	cp	r26, r18
 7d4:	b3 07       	cpc	r27, r19
 7d6:	e4 07       	cpc	r30, r20
 7d8:	f5 07       	cpc	r31, r21
 7da:	20 f0       	brcs	.+8      	; 0x7e4 <__udivmodsi4_ep>
 7dc:	a2 1b       	sub	r26, r18
 7de:	b3 0b       	sbc	r27, r19
 7e0:	e4 0b       	sbc	r30, r20
 7e2:	f5 0b       	sbc	r31, r21

000007e4 <__udivmodsi4_ep>:
 7e4:	66 1f       	adc	r22, r22
 7e6:	77 1f       	adc	r23, r23
 7e8:	88 1f       	adc	r24, r24
 7ea:	99 1f       	adc	r25, r25
 7ec:	1a 94       	dec	r1
 7ee:	69 f7       	brne	.-38     	; 0x7ca <__udivmodsi4_loop>
 7f0:	60 95       	com	r22
 7f2:	70 95       	com	r23
 7f4:	80 95       	com	r24
 7f6:	90 95       	com	r25
 7f8:	9b 01       	movw	r18, r22
 7fa:	ac 01       	movw	r20, r24
 7fc:	bd 01       	movw	r22, r26
 7fe:	cf 01       	movw	r24, r30
 800:	08 95       	ret

00000802 <setjmp>:
 802:	dc 01       	movw	r26, r24
 804:	2d 92       	st	X+, r2
 806:	3d 92       	st	X+, r3
 808:	4d 92       	st	X+, r4
 80a:	5d 92       	st	X+, r5
 80c:	6d 92       	st	X+, r6
 80e:	7d 92       	st	X+, r7
 810:	8d 92       	st	X+, r8
 812:	9d 92       	st	X+, r9
 814:	ad 92       	st	X+, r10
 816:	bd 92       	st	X+, r11
 818:	cd 92       	st	X+, r12
 81a:	dd 92       	st	X+, r13
 81c:	ed 92       	st	X+, r14
 81e:	fd 92       	st	X+, r15
 820:	0d 93       	st	X+, r16
 822:	1d 93       	st	X+, r17
 824:	cd 93       	st	X+, r28
 826:	dd 93       	st	X+, r29
 828:	ff 91       	pop	r31
 82a:	ef 91       	pop	r30
 82c:	8d b7       	in	r24, 0x3d	; 61
 82e:	8d 93       	st	X+, r24
 830:	8e b7       	in	r24, 0x3e	; 62
 832:	8d 93       	st	X+, r24
 834:	8f b7       	in	r24, 0x3f	; 63
 836:	8d 93       	st	X+, r24
 838:	ed 93       	st	X+, r30
 83a:	fd 93       	st	X+, r31
 83c:	88 27       	eor	r24, r24
 83e:	99 27       	eor	r25, r25
 840:	09 94       	ijmp

00000842 <longjmp>:
 842:	dc 01       	movw	r26, r24
 844:	cb 01       	movw	r24, r22
 846:	81 30       	cpi	r24, 0x01	; 1
 848:	91 05       	cpc	r25, r1
 84a:	81 1d       	adc	r24, r1
 84c:	2d 90       	ld	r2, X+
 84e:	3d 90       	ld	r3, X+
 850:	4d 90       	ld	r4, X+
 852:	5d 90       	ld	r5, X+
 854:	6d 90       	ld	r6, X+
 856:	7d 90       	ld	r7, X+
 858:	8d 90       	ld	r8, X+
 85a:	9d 90       	ld	r9, X+
 85c:	ad 90       	ld	r10, X+
 85e:	bd 90       	ld	r11, X+
 860:	cd 90       	ld	r12, X+
 862:	dd 90       	ld	r13, X+
 864:	ed 90       	ld	r14, X+
 866:	fd 90       	ld	r15, X+
 868:	0d 91       	ld	r16, X+
 86a:	1d 91       	ld	r17, X+
 86c:	cd 91       	ld	r28, X+
 86e:	dd 91       	ld	r29, X+
 870:	ed 91       	ld	r30, X+
 872:	fd 91       	ld	r31, X+
 874:	0d 90       	ld	r0, X+
 876:	f8 94       	cli
 878:	fe bf       	out	0x3e, r31	; 62
 87a:	0f be       	out	0x3f, r0	; 63
 87c:	ed bf       	out	0x3d, r30	; 61
 87e:	ed 91       	ld	r30, X+
 880:	fd 91       	ld	r31, X+
 882:	09 94       	ijmp

00000884 <_exit>:
 884:	f8 94       	cli

00000886 <__stop_program>:
 886:	ff cf       	rjmp	.-2      	; 0x886 <__stop_program>
