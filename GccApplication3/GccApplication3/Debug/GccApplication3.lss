
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000020a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000020a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000023c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008fa  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000854  00000000  00000000  00000ba6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c3  00000000  00000000  000013fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000004c  00000000  00000000  000016c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000424  00000000  00000000  0000170c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ad  00000000  00000000  00001b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001bdd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   8:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  10:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  14:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  18:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  1c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  20:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  24:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  28:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  2c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  30:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  34:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  38:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  3c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  40:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  44:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  48:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  4c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  50:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  54:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  58:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e6 eb       	ldi	r30, 0xB6	; 182
  70:	f1 e0       	ldi	r31, 0x01	; 1
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a0 30       	cpi	r26, 0x00	; 0
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>
  7e:	0e 94 ca 00 	call	0x194	; 0x194 <main>
  82:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <_exit>

00000086 <__bad_interrupt>:
  86:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008a <writeChar>:
	0b1101111  // '9'
};

void writeChar(uint8_t pos, uint8_t segment)
{
	if(pos > 5) return;
  8a:	86 30       	cpi	r24, 0x06	; 6
  8c:	08 f0       	brcs	.+2      	; 0x90 <writeChar+0x6>
  8e:	6c c0       	rjmp	.+216    	; 0x168 <writeChar+0xde>
	
	switch (pos) {
  90:	82 30       	cpi	r24, 0x02	; 2
  92:	b9 f1       	breq	.+110    	; 0x102 <writeChar+0x78>
  94:	28 f4       	brcc	.+10     	; 0xa0 <writeChar+0x16>
  96:	88 23       	and	r24, r24
  98:	51 f0       	breq	.+20     	; 0xae <writeChar+0x24>
  9a:	81 30       	cpi	r24, 0x01	; 1
  9c:	e9 f0       	breq	.+58     	; 0xd8 <writeChar+0x4e>
  9e:	08 95       	ret
  a0:	83 30       	cpi	r24, 0x03	; 3
  a2:	09 f4       	brne	.+2      	; 0xa6 <writeChar+0x1c>
  a4:	43 c0       	rjmp	.+134    	; 0x12c <writeChar+0xa2>
  a6:	84 30       	cpi	r24, 0x04	; 4
  a8:	09 f4       	brne	.+2      	; 0xac <writeChar+0x22>
  aa:	54 c0       	rjmp	.+168    	; 0x154 <writeChar+0xca>
  ac:	08 95       	ret
		case 0:
			LCDDR0 = LCDDR0 | 0b00000001;
  ae:	ec ee       	ldi	r30, 0xEC	; 236
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	81 60       	ori	r24, 0x01	; 1
  b6:	80 83       	st	Z, r24
			LCDDR5 = LCDDR5 | 0b00000101;
  b8:	e1 ef       	ldi	r30, 0xF1	; 241
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	85 60       	ori	r24, 0x05	; 5
  c0:	80 83       	st	Z, r24
			LCDDR10 = LCDDR10 | 0b00000101;
  c2:	e6 ef       	ldi	r30, 0xF6	; 246
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	85 60       	ori	r24, 0x05	; 5
  ca:	80 83       	st	Z, r24
			LCDDR15 = LCDDR15 | 0b00000001;
  cc:	eb ef       	ldi	r30, 0xFB	; 251
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	81 60       	ori	r24, 0x01	; 1
  d4:	80 83       	st	Z, r24
			break;
  d6:	08 95       	ret
		case 1:
			LCDDR0 = LCDDR0 | 0b00010000;
  d8:	ec ee       	ldi	r30, 0xEC	; 236
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	80 61       	ori	r24, 0x10	; 16
  e0:	80 83       	st	Z, r24
			LCDDR5 = LCDDR5 | 0b01010000;
  e2:	e1 ef       	ldi	r30, 0xF1	; 241
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	80 65       	ori	r24, 0x50	; 80
  ea:	80 83       	st	Z, r24
			LCDDR10 = LCDDR10 | 0b01010000;
  ec:	e6 ef       	ldi	r30, 0xF6	; 246
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	80 65       	ori	r24, 0x50	; 80
  f4:	80 83       	st	Z, r24
			LCDDR15 = LCDDR15 | 0b00010000;
  f6:	eb ef       	ldi	r30, 0xFB	; 251
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	80 61       	ori	r24, 0x10	; 16
  fe:	80 83       	st	Z, r24
			break;
 100:	08 95       	ret
		case 2:
			LCDDR1 = LCDDR1 | 0b00000001;
 102:	ed ee       	ldi	r30, 0xED	; 237
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	81 60       	ori	r24, 0x01	; 1
 10a:	80 83       	st	Z, r24
			LCDDR6 = LCDDR6 | 0b00000101;
 10c:	e2 ef       	ldi	r30, 0xF2	; 242
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	85 60       	ori	r24, 0x05	; 5
 114:	80 83       	st	Z, r24
			LCDDR11 = LCDDR11 | 0b00000101;
 116:	e7 ef       	ldi	r30, 0xF7	; 247
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	85 60       	ori	r24, 0x05	; 5
 11e:	80 83       	st	Z, r24
			LCDDR16 = LCDDR16 | 0b00000001;
 120:	ec ef       	ldi	r30, 0xFC	; 252
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	81 60       	ori	r24, 0x01	; 1
 128:	80 83       	st	Z, r24
			break;
 12a:	08 95       	ret
		case 3:
			LCDDR1 = LCDDR1 | 0b00010000;
 12c:	ed ee       	ldi	r30, 0xED	; 237
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	80 61       	ori	r24, 0x10	; 16
 134:	80 83       	st	Z, r24
			LCDDR6 = LCDDR6 | 0b01010000;
 136:	e2 ef       	ldi	r30, 0xF2	; 242
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	80 65       	ori	r24, 0x50	; 80
 13e:	80 83       	st	Z, r24
			LCDDR11 = LCDDR11 | 0b01010000;
 140:	e7 ef       	ldi	r30, 0xF7	; 247
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	80 65       	ori	r24, 0x50	; 80
 148:	80 83       	st	Z, r24
			LCDDR16 = LCDDR16 | 0b00010000;
 14a:	ec ef       	ldi	r30, 0xFC	; 252
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	80 61       	ori	r24, 0x10	; 16
 152:	80 83       	st	Z, r24
		case 4:
			LCDDR2 = 0b0001;
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
			LCDDR7 = 0b0101;
 15a:	95 e0       	ldi	r25, 0x05	; 5
 15c:	90 93 f3 00 	sts	0x00F3, r25	; 0x8000f3 <__DATA_REGION_ORIGIN__+0x93>
			LCDDR12 = 0b0101;
 160:	90 93 f8 00 	sts	0x00F8, r25	; 0x8000f8 <__DATA_REGION_ORIGIN__+0x98>
			LCDDR17 = 0b0001;
 164:	80 93 fd 00 	sts	0x00FD, r24	; 0x8000fd <__DATA_REGION_ORIGIN__+0x9d>
 168:	08 95       	ret

0000016a <init>:
			break;
	}
}

void init(){
	CLKPR = 0x80;
 16a:	e1 e6       	ldi	r30, 0x61	; 97
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 e8       	ldi	r24, 0x80	; 128
 170:	80 83       	st	Z, r24
	CLKPR = 0x00;
 172:	10 82       	st	Z, r1
	LCDCRB = (1<<LCDCS) | (1<<LCDMUX1) | (1<<LCDMUX0) | (1<<LCDPM2) | (1<<LCDPM1) | (1<<LCDPM0);
 174:	87 eb       	ldi	r24, 0xB7	; 183
 176:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
	LCDFRR = (1<<LCDCD2) | (1<<LCDCD1) | (1<<LCDCD0);
 17a:	87 e0       	ldi	r24, 0x07	; 7
 17c:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__DATA_REGION_ORIGIN__+0x86>
	LCDCCR = (1<<LCDDC1) | (1<<LCDCC3) | (1<<LCDCC2) | (1<<LCDCC1);
 180:	8e e4       	ldi	r24, 0x4E	; 78
 182:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__DATA_REGION_ORIGIN__+0x87>
	TCCR1A = (1<<WGM13) | (1<<WGM12) | (1<<COM1A1) | (1<<COM1A0);
 186:	88 ed       	ldi	r24, 0xD8	; 216
 188:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	LCDCRA = (1<<LCDEN) | (1<<LCDAB);
 18c:	80 ec       	ldi	r24, 0xC0	; 192
 18e:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
 192:	08 95       	ret

00000194 <main>:
}

int main(void)
{
 194:	cf 93       	push	r28
    init();
 196:	0e 94 b5 00 	call	0x16a	; 0x16a <init>
	for (uint8_t i = 0; i < 5; i++) {
 19a:	c0 e0       	ldi	r28, 0x00	; 0
		writeChar(i, 0);
 19c:	60 e0       	ldi	r22, 0x00	; 0
 19e:	8c 2f       	mov	r24, r28
 1a0:	0e 94 45 00 	call	0x8a	; 0x8a <writeChar>
}

int main(void)
{
    init();
	for (uint8_t i = 0; i < 5; i++) {
 1a4:	cf 5f       	subi	r28, 0xFF	; 255
 1a6:	c5 30       	cpi	r28, 0x05	; 5
 1a8:	c9 f7       	brne	.-14     	; 0x19c <main+0x8>
		writeChar(i, 0);
	}
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	cf 91       	pop	r28
 1b0:	08 95       	ret

000001b2 <_exit>:
 1b2:	f8 94       	cli

000001b4 <__stop_program>:
 1b4:	ff cf       	rjmp	.-2      	; 0x1b4 <__stop_program>
