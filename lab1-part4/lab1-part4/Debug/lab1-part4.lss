
lab1-part4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800100  000005de  00000672  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800152  00800152  000006c4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000734  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c50  00000000  00000000  000007a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000091e  00000000  00000000  000013f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004cb  00000000  00000000  00001d12  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000011c  00000000  00000000  000021e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000519  00000000  00000000  000022fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005db  00000000  00000000  00002815  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002df0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	7f 00       	.word	0x007f	; ????
  5e:	61 00       	.word	0x0061	; ????
  60:	64 00       	.word	0x0064	; ????
  62:	67 00       	.word	0x0067	; ????
  64:	6a 00       	.word	0x006a	; ????
  66:	6d 00       	.word	0x006d	; ????
  68:	70 00       	.word	0x0070	; ????
  6a:	73 00       	.word	0x0073	; ????
  6c:	76 00       	.word	0x0076	; ????
  6e:	79 00       	.word	0x0079	; ????

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ee ed       	ldi	r30, 0xDE	; 222
  84:	f5 e0       	ldi	r31, 0x05	; 5
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a2 35       	cpi	r26, 0x52	; 82
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a2 e5       	ldi	r26, 0x52	; 82
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	ad 35       	cpi	r26, 0x5D	; 93
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <main>
  a6:	0c 94 ed 02 	jmp	0x5da	; 0x5da <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <getSegmentForChar>:
int nine[] = {0b0001, 0b0101, 0b1011, 0b0001};
int none[] = {0b0000, 0b0000, 0b0000, 0b0000};

//returns wall of data based on char input ('0' = 48 (char))
int* getSegmentForChar(char ch) {
	switch (ch) {
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	fc 01       	movw	r30, r24
  b2:	f0 97       	sbiw	r30, 0x30	; 48
  b4:	ea 30       	cpi	r30, 0x0A	; 10
  b6:	f1 05       	cpc	r31, r1
  b8:	f8 f4       	brcc	.+62     	; 0xf8 <getSegmentForChar+0x4a>
  ba:	e2 5d       	subi	r30, 0xD2	; 210
  bc:	ff 4f       	sbci	r31, 0xFF	; 255
  be:	0c 94 b1 02 	jmp	0x562	; 0x562 <__tablejump2__>
		case '0': return zero;
		case '1': return one;
  c2:	81 e4       	ldi	r24, 0x41	; 65
  c4:	91 e0       	ldi	r25, 0x01	; 1
  c6:	08 95       	ret
		case '2': return two;
  c8:	89 e3       	ldi	r24, 0x39	; 57
  ca:	91 e0       	ldi	r25, 0x01	; 1
  cc:	08 95       	ret
		case '3': return three;
  ce:	81 e3       	ldi	r24, 0x31	; 49
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	08 95       	ret
		case '4': return four;
  d4:	89 e2       	ldi	r24, 0x29	; 41
  d6:	91 e0       	ldi	r25, 0x01	; 1
  d8:	08 95       	ret
		case '5': return five;
  da:	81 e2       	ldi	r24, 0x21	; 33
  dc:	91 e0       	ldi	r25, 0x01	; 1
  de:	08 95       	ret
		case '6': return six;
  e0:	89 e1       	ldi	r24, 0x19	; 25
  e2:	91 e0       	ldi	r25, 0x01	; 1
  e4:	08 95       	ret
		case '7': return seven;
  e6:	81 e1       	ldi	r24, 0x11	; 17
  e8:	91 e0       	ldi	r25, 0x01	; 1
  ea:	08 95       	ret
		case '8': return eight;
  ec:	89 e0       	ldi	r24, 0x09	; 9
  ee:	91 e0       	ldi	r25, 0x01	; 1
  f0:	08 95       	ret
		case '9': return nine;
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	91 e0       	ldi	r25, 0x01	; 1
  f6:	08 95       	ret
		default:  return none;
  f8:	84 e5       	ldi	r24, 0x54	; 84
  fa:	91 e0       	ldi	r25, 0x01	; 1
  fc:	08 95       	ret
int none[] = {0b0000, 0b0000, 0b0000, 0b0000};

//returns wall of data based on char input ('0' = 48 (char))
int* getSegmentForChar(char ch) {
	switch (ch) {
		case '0': return zero;
  fe:	89 e4       	ldi	r24, 0x49	; 73
 100:	91 e0       	ldi	r25, 0x01	; 1
		case '7': return seven;
		case '8': return eight;
		case '9': return nine;
		default:  return none;
	}
}
 102:	08 95       	ret

00000104 <init>:


void init() {
	//Clock Prescale Register "maximum speed"
	CLKPR = 0b10000000; //Clock Prescaler Change Enable
 104:	e1 e6       	ldi	r30, 0x61	; 97
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 e8       	ldi	r24, 0x80	; 128
 10a:	80 83       	st	Z, r24
	CLKPR = 0b00000000; //set 0 for sysclock
 10c:	10 82       	st	Z, r1
	//LCD(Contrast Control Register), LCD(Display Configuration)(000): 300 Î¼s, LCD(Contrast Control)(1111): 3.35 V
	LCDCCR = (0 << LCDDC0) | (0 << LCDDC1) | (0 << LCDDC2) | (1 << LCDCC0) | (1 << LCDCC1) | (1 << LCDCC2) | (1 << LCDCC3);
 10e:	8f e0       	ldi	r24, 0x0F	; 15
 110:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__DATA_REGION_ORIGIN__+0x87>
	//LCDCS: asynchronous clock, LCDMUX(11): D=1/4, B=1/3, LCD(Port Mask): 25 segments
	LCDCRB = (1 << LCDCS) | (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM2) | (1 << LCDPM1) | (1 << LCDPM0);
 114:	87 eb       	ldi	r24, 0xB7	; 183
 116:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
	//LCD(Clock Divide)(111): (D=8) 32Hz 
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);	
 11a:	87 e0       	ldi	r24, 0x07	; 7
 11c:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__DATA_REGION_ORIGIN__+0x86>
	//LCD(Control and StatusRegister A), LCD(Enable): True, LCD(Low Power Waveform): True, (no frame interrupt, no blanking)
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
 120:	80 ec       	ldi	r24, 0xC0	; 192
 122:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>

    // Configure Timer/Counter1
	TCCR1B = (1 << CS12); // Set prescaler to 256
 126:	84 e0       	ldi	r24, 0x04	; 4
 128:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>

    // Configure bit 7 of PORTB as input and enable pull-up resistor
	DDRB &= ~(1 << PB7);
 12c:	27 98       	cbi	0x04, 7	; 4
	PORTB |= (1 << PB7);
 12e:	2f 9a       	sbi	0x05, 7	; 5
 130:	08 95       	ret

00000132 <writeChar>:
}

//write a char ch at position pos
void writeChar(char ch, uint8_t pos) {
 132:	cf 93       	push	r28
	//check if outside range
	if (pos > 4 || pos < 0) return;	
 134:	65 30       	cpi	r22, 0x05	; 5
 136:	08 f0       	brcs	.+2      	; 0x13a <writeChar+0x8>
 138:	e4 c0       	rjmp	.+456    	; 0x302 <writeChar+0x1d0>
 13a:	c6 2f       	mov	r28, r22

	//get correct char data
	int* segment = getSegmentForChar(ch);
 13c:	0e 94 57 00 	call	0xae	; 0xae <getSegmentForChar>
 140:	fc 01       	movw	r30, r24
	
	//chose position
	switch (pos) {
 142:	c2 30       	cpi	r28, 0x02	; 2
 144:	09 f4       	brne	.+2      	; 0x148 <writeChar+0x16>
 146:	67 c0       	rjmp	.+206    	; 0x216 <writeChar+0xe4>
 148:	28 f4       	brcc	.+10     	; 0x154 <writeChar+0x22>
 14a:	cc 23       	and	r28, r28
 14c:	51 f0       	breq	.+20     	; 0x162 <writeChar+0x30>
 14e:	c1 30       	cpi	r28, 0x01	; 1
 150:	29 f1       	breq	.+74     	; 0x19c <writeChar+0x6a>
 152:	d7 c0       	rjmp	.+430    	; 0x302 <writeChar+0x1d0>
 154:	c3 30       	cpi	r28, 0x03	; 3
 156:	09 f4       	brne	.+2      	; 0x15a <writeChar+0x28>
 158:	7b c0       	rjmp	.+246    	; 0x250 <writeChar+0x11e>
 15a:	c4 30       	cpi	r28, 0x04	; 4
 15c:	09 f4       	brne	.+2      	; 0x160 <writeChar+0x2e>
 15e:	b5 c0       	rjmp	.+362    	; 0x2ca <writeChar+0x198>
 160:	d0 c0       	rjmp	.+416    	; 0x302 <writeChar+0x1d0>
		case 0:
			//segment start at 0, 5, 10, 15, higher 4 bits.
			//(LCDDR0 & 0xF0) clears the segment before writing 
			LCDDR0 = (LCDDR0 & 0xF0) | segment[0];
 162:	ac ee       	ldi	r26, 0xEC	; 236
 164:	b0 e0       	ldi	r27, 0x00	; 0
 166:	8c 91       	ld	r24, X
 168:	80 7f       	andi	r24, 0xF0	; 240
 16a:	90 81       	ld	r25, Z
 16c:	89 2b       	or	r24, r25
 16e:	8c 93       	st	X, r24
			LCDDR5 = (LCDDR5 & 0xF0) | segment[1];
 170:	a1 ef       	ldi	r26, 0xF1	; 241
 172:	b0 e0       	ldi	r27, 0x00	; 0
 174:	8c 91       	ld	r24, X
 176:	80 7f       	andi	r24, 0xF0	; 240
 178:	92 81       	ldd	r25, Z+2	; 0x02
 17a:	89 2b       	or	r24, r25
 17c:	8c 93       	st	X, r24
			LCDDR10 = (LCDDR10 & 0xF0) | segment[2];
 17e:	a6 ef       	ldi	r26, 0xF6	; 246
 180:	b0 e0       	ldi	r27, 0x00	; 0
 182:	8c 91       	ld	r24, X
 184:	80 7f       	andi	r24, 0xF0	; 240
 186:	94 81       	ldd	r25, Z+4	; 0x04
 188:	89 2b       	or	r24, r25
 18a:	8c 93       	st	X, r24
			LCDDR15 = (LCDDR15 & 0xF0) | segment[3];
 18c:	ab ef       	ldi	r26, 0xFB	; 251
 18e:	b0 e0       	ldi	r27, 0x00	; 0
 190:	8c 91       	ld	r24, X
 192:	80 7f       	andi	r24, 0xF0	; 240
 194:	96 81       	ldd	r25, Z+6	; 0x06
 196:	89 2b       	or	r24, r25
 198:	8c 93       	st	X, r24
			break;
 19a:	b3 c0       	rjmp	.+358    	; 0x302 <writeChar+0x1d0>
		case 1:
			//same register different segments
			LCDDR0 = (LCDDR0 & 0x0F) | (segment[0] << 4);
 19c:	ac ee       	ldi	r26, 0xEC	; 236
 19e:	b0 e0       	ldi	r27, 0x00	; 0
 1a0:	2c 91       	ld	r18, X
 1a2:	80 81       	ld	r24, Z
 1a4:	91 81       	ldd	r25, Z+1	; 0x01
 1a6:	82 95       	swap	r24
 1a8:	92 95       	swap	r25
 1aa:	90 7f       	andi	r25, 0xF0	; 240
 1ac:	98 27       	eor	r25, r24
 1ae:	80 7f       	andi	r24, 0xF0	; 240
 1b0:	98 27       	eor	r25, r24
 1b2:	92 2f       	mov	r25, r18
 1b4:	9f 70       	andi	r25, 0x0F	; 15
 1b6:	89 2b       	or	r24, r25
 1b8:	8c 93       	st	X, r24
			LCDDR5 = (LCDDR5 & 0x0F) | (segment[1] << 4);
 1ba:	a1 ef       	ldi	r26, 0xF1	; 241
 1bc:	b0 e0       	ldi	r27, 0x00	; 0
 1be:	2c 91       	ld	r18, X
 1c0:	82 81       	ldd	r24, Z+2	; 0x02
 1c2:	93 81       	ldd	r25, Z+3	; 0x03
 1c4:	82 95       	swap	r24
 1c6:	92 95       	swap	r25
 1c8:	90 7f       	andi	r25, 0xF0	; 240
 1ca:	98 27       	eor	r25, r24
 1cc:	80 7f       	andi	r24, 0xF0	; 240
 1ce:	98 27       	eor	r25, r24
 1d0:	92 2f       	mov	r25, r18
 1d2:	9f 70       	andi	r25, 0x0F	; 15
 1d4:	89 2b       	or	r24, r25
 1d6:	8c 93       	st	X, r24
			LCDDR10 = (LCDDR10 & 0x0F) | (segment[2] << 4);
 1d8:	a6 ef       	ldi	r26, 0xF6	; 246
 1da:	b0 e0       	ldi	r27, 0x00	; 0
 1dc:	2c 91       	ld	r18, X
 1de:	84 81       	ldd	r24, Z+4	; 0x04
 1e0:	95 81       	ldd	r25, Z+5	; 0x05
 1e2:	82 95       	swap	r24
 1e4:	92 95       	swap	r25
 1e6:	90 7f       	andi	r25, 0xF0	; 240
 1e8:	98 27       	eor	r25, r24
 1ea:	80 7f       	andi	r24, 0xF0	; 240
 1ec:	98 27       	eor	r25, r24
 1ee:	92 2f       	mov	r25, r18
 1f0:	9f 70       	andi	r25, 0x0F	; 15
 1f2:	89 2b       	or	r24, r25
 1f4:	8c 93       	st	X, r24
			LCDDR15 = (LCDDR15 & 0x0F) | (segment[3] << 4);
 1f6:	ab ef       	ldi	r26, 0xFB	; 251
 1f8:	b0 e0       	ldi	r27, 0x00	; 0
 1fa:	2c 91       	ld	r18, X
 1fc:	86 81       	ldd	r24, Z+6	; 0x06
 1fe:	97 81       	ldd	r25, Z+7	; 0x07
 200:	82 95       	swap	r24
 202:	92 95       	swap	r25
 204:	90 7f       	andi	r25, 0xF0	; 240
 206:	98 27       	eor	r25, r24
 208:	80 7f       	andi	r24, 0xF0	; 240
 20a:	98 27       	eor	r25, r24
 20c:	92 2f       	mov	r25, r18
 20e:	9f 70       	andi	r25, 0x0F	; 15
 210:	89 2b       	or	r24, r25
 212:	8c 93       	st	X, r24
			break;
 214:	76 c0       	rjmp	.+236    	; 0x302 <writeChar+0x1d0>
		case 2:
			LCDDR1 = (LCDDR1 & 0xF0) | segment[0];
 216:	ad ee       	ldi	r26, 0xED	; 237
 218:	b0 e0       	ldi	r27, 0x00	; 0
 21a:	8c 91       	ld	r24, X
 21c:	80 7f       	andi	r24, 0xF0	; 240
 21e:	90 81       	ld	r25, Z
 220:	89 2b       	or	r24, r25
 222:	8c 93       	st	X, r24
			LCDDR6 = (LCDDR6 & 0xF0) | segment[1];
 224:	a2 ef       	ldi	r26, 0xF2	; 242
 226:	b0 e0       	ldi	r27, 0x00	; 0
 228:	8c 91       	ld	r24, X
 22a:	80 7f       	andi	r24, 0xF0	; 240
 22c:	92 81       	ldd	r25, Z+2	; 0x02
 22e:	89 2b       	or	r24, r25
 230:	8c 93       	st	X, r24
			LCDDR11 = (LCDDR11 & 0xF0) | segment[2];
 232:	a7 ef       	ldi	r26, 0xF7	; 247
 234:	b0 e0       	ldi	r27, 0x00	; 0
 236:	8c 91       	ld	r24, X
 238:	80 7f       	andi	r24, 0xF0	; 240
 23a:	94 81       	ldd	r25, Z+4	; 0x04
 23c:	89 2b       	or	r24, r25
 23e:	8c 93       	st	X, r24
			LCDDR16 = (LCDDR16 & 0xF0) | segment[3];
 240:	ac ef       	ldi	r26, 0xFC	; 252
 242:	b0 e0       	ldi	r27, 0x00	; 0
 244:	8c 91       	ld	r24, X
 246:	80 7f       	andi	r24, 0xF0	; 240
 248:	96 81       	ldd	r25, Z+6	; 0x06
 24a:	89 2b       	or	r24, r25
 24c:	8c 93       	st	X, r24
			break;
 24e:	59 c0       	rjmp	.+178    	; 0x302 <writeChar+0x1d0>
		case 3:
			LCDDR1 = (LCDDR1 & 0x0F) | (segment[0] << 4);
 250:	ad ee       	ldi	r26, 0xED	; 237
 252:	b0 e0       	ldi	r27, 0x00	; 0
 254:	2c 91       	ld	r18, X
 256:	80 81       	ld	r24, Z
 258:	91 81       	ldd	r25, Z+1	; 0x01
 25a:	82 95       	swap	r24
 25c:	92 95       	swap	r25
 25e:	90 7f       	andi	r25, 0xF0	; 240
 260:	98 27       	eor	r25, r24
 262:	80 7f       	andi	r24, 0xF0	; 240
 264:	98 27       	eor	r25, r24
 266:	92 2f       	mov	r25, r18
 268:	9f 70       	andi	r25, 0x0F	; 15
 26a:	89 2b       	or	r24, r25
 26c:	8c 93       	st	X, r24
			LCDDR6 = (LCDDR6 & 0x0F) | (segment[1] << 4);
 26e:	a2 ef       	ldi	r26, 0xF2	; 242
 270:	b0 e0       	ldi	r27, 0x00	; 0
 272:	2c 91       	ld	r18, X
 274:	82 81       	ldd	r24, Z+2	; 0x02
 276:	93 81       	ldd	r25, Z+3	; 0x03
 278:	82 95       	swap	r24
 27a:	92 95       	swap	r25
 27c:	90 7f       	andi	r25, 0xF0	; 240
 27e:	98 27       	eor	r25, r24
 280:	80 7f       	andi	r24, 0xF0	; 240
 282:	98 27       	eor	r25, r24
 284:	92 2f       	mov	r25, r18
 286:	9f 70       	andi	r25, 0x0F	; 15
 288:	89 2b       	or	r24, r25
 28a:	8c 93       	st	X, r24
			LCDDR11 = (LCDDR11 & 0x0F) | (segment[2] << 4);
 28c:	a7 ef       	ldi	r26, 0xF7	; 247
 28e:	b0 e0       	ldi	r27, 0x00	; 0
 290:	2c 91       	ld	r18, X
 292:	84 81       	ldd	r24, Z+4	; 0x04
 294:	95 81       	ldd	r25, Z+5	; 0x05
 296:	82 95       	swap	r24
 298:	92 95       	swap	r25
 29a:	90 7f       	andi	r25, 0xF0	; 240
 29c:	98 27       	eor	r25, r24
 29e:	80 7f       	andi	r24, 0xF0	; 240
 2a0:	98 27       	eor	r25, r24
 2a2:	92 2f       	mov	r25, r18
 2a4:	9f 70       	andi	r25, 0x0F	; 15
 2a6:	89 2b       	or	r24, r25
 2a8:	8c 93       	st	X, r24
			LCDDR16 = (LCDDR16 & 0x0F) | (segment[3] << 4);
 2aa:	ac ef       	ldi	r26, 0xFC	; 252
 2ac:	b0 e0       	ldi	r27, 0x00	; 0
 2ae:	2c 91       	ld	r18, X
 2b0:	86 81       	ldd	r24, Z+6	; 0x06
 2b2:	97 81       	ldd	r25, Z+7	; 0x07
 2b4:	82 95       	swap	r24
 2b6:	92 95       	swap	r25
 2b8:	90 7f       	andi	r25, 0xF0	; 240
 2ba:	98 27       	eor	r25, r24
 2bc:	80 7f       	andi	r24, 0xF0	; 240
 2be:	98 27       	eor	r25, r24
 2c0:	92 2f       	mov	r25, r18
 2c2:	9f 70       	andi	r25, 0x0F	; 15
 2c4:	89 2b       	or	r24, r25
 2c6:	8c 93       	st	X, r24
			break;
 2c8:	1c c0       	rjmp	.+56     	; 0x302 <writeChar+0x1d0>
		case 4:
			LCDDR2 = (LCDDR2 & 0xF0) | segment[0];
 2ca:	ae ee       	ldi	r26, 0xEE	; 238
 2cc:	b0 e0       	ldi	r27, 0x00	; 0
 2ce:	8c 91       	ld	r24, X
 2d0:	80 7f       	andi	r24, 0xF0	; 240
 2d2:	90 81       	ld	r25, Z
 2d4:	89 2b       	or	r24, r25
 2d6:	8c 93       	st	X, r24
			LCDDR7 = (LCDDR7 & 0xF0) | segment[1];
 2d8:	a3 ef       	ldi	r26, 0xF3	; 243
 2da:	b0 e0       	ldi	r27, 0x00	; 0
 2dc:	8c 91       	ld	r24, X
 2de:	80 7f       	andi	r24, 0xF0	; 240
 2e0:	92 81       	ldd	r25, Z+2	; 0x02
 2e2:	89 2b       	or	r24, r25
 2e4:	8c 93       	st	X, r24
			LCDDR12 = (LCDDR12 & 0xF0) | segment[2];
 2e6:	a8 ef       	ldi	r26, 0xF8	; 248
 2e8:	b0 e0       	ldi	r27, 0x00	; 0
 2ea:	8c 91       	ld	r24, X
 2ec:	80 7f       	andi	r24, 0xF0	; 240
 2ee:	94 81       	ldd	r25, Z+4	; 0x04
 2f0:	89 2b       	or	r24, r25
 2f2:	8c 93       	st	X, r24
			LCDDR17 = (LCDDR17 & 0xF0) | segment[3];
 2f4:	ad ef       	ldi	r26, 0xFD	; 253
 2f6:	b0 e0       	ldi	r27, 0x00	; 0
 2f8:	8c 91       	ld	r24, X
 2fa:	80 7f       	andi	r24, 0xF0	; 240
 2fc:	96 81       	ldd	r25, Z+6	; 0x06
 2fe:	89 2b       	or	r24, r25
 300:	8c 93       	st	X, r24
			break;
	}
}
 302:	cf 91       	pop	r28
 304:	08 95       	ret

00000306 <writeLong>:

//writes a number i to LCD
void writeLong(long i) {	
 306:	8f 92       	push	r8
 308:	9f 92       	push	r9
 30a:	af 92       	push	r10
 30c:	bf 92       	push	r11
 30e:	cf 92       	push	r12
 310:	df 92       	push	r13
 312:	ef 92       	push	r14
 314:	ff 92       	push	r15
 316:	cf 93       	push	r28
	int pos = 4; //start writing at the rightmost pos

	//loop 5 times
	for (int count = 0; count < 5; count++) {
		//stop if number is 0.
		if (i == 0) {
 318:	61 15       	cp	r22, r1
 31a:	71 05       	cpc	r23, r1
 31c:	81 05       	cpc	r24, r1
 31e:	91 05       	cpc	r25, r1
 320:	b1 f4       	brne	.+44     	; 0x34e <writeLong+0x48>
 322:	2b c0       	rjmp	.+86     	; 0x37a <writeLong+0x74>
 324:	c1 14       	cp	r12, r1
 326:	d1 04       	cpc	r13, r1
 328:	e1 04       	cpc	r14, r1
 32a:	f1 04       	cpc	r15, r1
 32c:	31 f1       	breq	.+76     	; 0x37a <writeLong+0x74>
				return;
				//print LS number
			} else {
				//extract least significant digit and remove it from i
				int digit = i % 10;
				i /= 10;
 32e:	c7 01       	movw	r24, r14
 330:	b6 01       	movw	r22, r12
 332:	a5 01       	movw	r20, r10
 334:	94 01       	movw	r18, r8
 336:	0e 94 92 02 	call	0x524	; 0x524 <__divmodsi4>
 33a:	69 01       	movw	r12, r18
 33c:	7a 01       	movw	r14, r20
 33e:	86 2f       	mov	r24, r22
				//'0' is 48 in ASCI and digit offsets to right ASCI char
				writeChar(digit + '0', pos);
 340:	6c 2f       	mov	r22, r28
 342:	80 5d       	subi	r24, 0xD0	; 208
 344:	0e 94 99 00 	call	0x132	; 0x132 <writeChar>
 348:	c1 50       	subi	r28, 0x01	; 1
 34a:	60 f7       	brcc	.-40     	; 0x324 <writeLong+0x1e>
 34c:	16 c0       	rjmp	.+44     	; 0x37a <writeLong+0x74>
				return;
				//print LS number
			} else {
				//extract least significant digit and remove it from i
				int digit = i % 10;
				i /= 10;
 34e:	2a e0       	ldi	r18, 0x0A	; 10
 350:	30 e0       	ldi	r19, 0x00	; 0
 352:	40 e0       	ldi	r20, 0x00	; 0
 354:	50 e0       	ldi	r21, 0x00	; 0
 356:	0e 94 92 02 	call	0x524	; 0x524 <__divmodsi4>
 35a:	69 01       	movw	r12, r18
 35c:	7a 01       	movw	r14, r20
 35e:	86 2f       	mov	r24, r22
				//'0' is 48 in ASCI and digit offsets to right ASCI char
				writeChar(digit + '0', pos);
 360:	64 e0       	ldi	r22, 0x04	; 4
 362:	80 5d       	subi	r24, 0xD0	; 208
 364:	0e 94 99 00 	call	0x132	; 0x132 <writeChar>
 368:	c3 e0       	ldi	r28, 0x03	; 3
		if (i == 0) {
				return;
				//print LS number
			} else {
				//extract least significant digit and remove it from i
				int digit = i % 10;
 36a:	0f 2e       	mov	r0, r31
 36c:	fa e0       	ldi	r31, 0x0A	; 10
 36e:	8f 2e       	mov	r8, r31
 370:	91 2c       	mov	r9, r1
 372:	a1 2c       	mov	r10, r1
 374:	b1 2c       	mov	r11, r1
 376:	f0 2d       	mov	r31, r0
 378:	d5 cf       	rjmp	.-86     	; 0x324 <writeLong+0x1e>
				//'0' is 48 in ASCI and digit offsets to right ASCI char
				writeChar(digit + '0', pos);
		}
		pos--; //next pos
	}
}
 37a:	cf 91       	pop	r28
 37c:	ff 90       	pop	r15
 37e:	ef 90       	pop	r14
 380:	df 90       	pop	r13
 382:	cf 90       	pop	r12
 384:	bf 90       	pop	r11
 386:	af 90       	pop	r10
 388:	9f 90       	pop	r9
 38a:	8f 90       	pop	r8
 38c:	08 95       	ret

0000038e <isPrime>:

bool isPrime(int number)
{
 38e:	fc 01       	movw	r30, r24
	//0 and 1 are not prime numbers
	if (number <= 1) return false; 
 390:	82 30       	cpi	r24, 0x02	; 2
 392:	91 05       	cpc	r25, r1
 394:	1c f1       	brlt	.+70     	; 0x3dc <isPrime+0x4e>

	//loop from 2 to sqrt(number)
	for (int i=2; i*i <= number; i++) 
 396:	84 30       	cpi	r24, 0x04	; 4
 398:	91 05       	cpc	r25, r1
 39a:	14 f1       	brlt	.+68     	; 0x3e0 <isPrime+0x52>
	{
		if (number % i == 0) return false;	//divisible => not prime
 39c:	81 70       	andi	r24, 0x01	; 1
 39e:	90 78       	andi	r25, 0x80	; 128
 3a0:	99 23       	and	r25, r25
 3a2:	24 f4       	brge	.+8      	; 0x3ac <isPrime+0x1e>
 3a4:	01 97       	sbiw	r24, 0x01	; 1
 3a6:	8e 6f       	ori	r24, 0xFE	; 254
 3a8:	9f 6f       	ori	r25, 0xFF	; 255
 3aa:	01 96       	adiw	r24, 0x01	; 1
 3ac:	89 2b       	or	r24, r25
 3ae:	d1 f0       	breq	.+52     	; 0x3e4 <isPrime+0x56>
 3b0:	22 e0       	ldi	r18, 0x02	; 2
 3b2:	30 e0       	ldi	r19, 0x00	; 0
 3b4:	06 c0       	rjmp	.+12     	; 0x3c2 <isPrime+0x34>
 3b6:	cf 01       	movw	r24, r30
 3b8:	b9 01       	movw	r22, r18
 3ba:	0e 94 7e 02 	call	0x4fc	; 0x4fc <__divmodhi4>
 3be:	89 2b       	or	r24, r25
 3c0:	99 f0       	breq	.+38     	; 0x3e8 <isPrime+0x5a>
{
	//0 and 1 are not prime numbers
	if (number <= 1) return false; 

	//loop from 2 to sqrt(number)
	for (int i=2; i*i <= number; i++) 
 3c2:	2f 5f       	subi	r18, 0xFF	; 255
 3c4:	3f 4f       	sbci	r19, 0xFF	; 255
 3c6:	22 9f       	mul	r18, r18
 3c8:	c0 01       	movw	r24, r0
 3ca:	23 9f       	mul	r18, r19
 3cc:	90 0d       	add	r25, r0
 3ce:	90 0d       	add	r25, r0
 3d0:	11 24       	eor	r1, r1
 3d2:	e8 17       	cp	r30, r24
 3d4:	f9 07       	cpc	r31, r25
 3d6:	7c f7       	brge	.-34     	; 0x3b6 <isPrime+0x28>
	{
		if (number % i == 0) return false;	//divisible => not prime
	}
	//is prime if no factors
	return true;
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	08 95       	ret
}

bool isPrime(int number)
{
	//0 and 1 are not prime numbers
	if (number <= 1) return false; 
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	08 95       	ret
	for (int i=2; i*i <= number; i++) 
	{
		if (number % i == 0) return false;	//divisible => not prime
	}
	//is prime if no factors
	return true;
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	08 95       	ret
	if (number <= 1) return false; 

	//loop from 2 to sqrt(number)
	for (int i=2; i*i <= number; i++) 
	{
		if (number % i == 0) return false;	//divisible => not prime
 3e4:	80 e0       	ldi	r24, 0x00	; 0
 3e6:	08 95       	ret
 3e8:	80 e0       	ldi	r24, 0x00	; 0
	}
	//is prime if no factors
	return true;
}
 3ea:	08 95       	ret

000003ec <prime>:

//loop through numbers, and if it is prime print to LCD
void prime(long i) {
 3ec:	cf 92       	push	r12
 3ee:	df 92       	push	r13
 3f0:	ef 92       	push	r14
 3f2:	ff 92       	push	r15
 3f4:	6b 01       	movw	r12, r22
 3f6:	7c 01       	movw	r14, r24
    if (isPrime(i)) 
 3f8:	cb 01       	movw	r24, r22
 3fa:	0e 94 c7 01 	call	0x38e	; 0x38e <isPrime>
 3fe:	88 23       	and	r24, r24
 400:	21 f0       	breq	.+8      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
    {
        writeLong(i);
 402:	c7 01       	movw	r24, r14
 404:	b6 01       	movw	r22, r12
 406:	0e 94 83 01 	call	0x306	; 0x306 <writeLong>
        //_delay_ms(1000);
    }
}
 40a:	ff 90       	pop	r15
 40c:	ef 90       	pop	r14
 40e:	df 90       	pop	r13
 410:	cf 90       	pop	r12
 412:	08 95       	ret

00000414 <busyWaitUntil>:

//part 2
void busyWaitUntil(uint16_t target) {
	while (((int16_t)(TCNT1 - target)) < 0) {
 414:	e4 e8       	ldi	r30, 0x84	; 132
 416:	f0 e0       	ldi	r31, 0x00	; 0
 418:	20 81       	ld	r18, Z
 41a:	31 81       	ldd	r19, Z+1	; 0x01
 41c:	28 1b       	sub	r18, r24
 41e:	39 0b       	sbc	r19, r25
 420:	da f3       	brmi	.-10     	; 0x418 <busyWaitUntil+0x4>
	}
}
 422:	08 95       	ret

00000424 <blink>:

void blink() {
 424:	cf 93       	push	r28
 426:	df 93       	push	r29
	uint16_t half_period = TIMER_TICKS_PER_SECOND / 2; // Half the period for 1 Hz blinking
	static uint16_t next_timer_value = 0;   // Set the initial target time

	if (next_timer_value == 0) {
 428:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <__data_end>
 42c:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <__data_end+0x1>
 430:	89 2b       	or	r24, r25
 432:	51 f4       	brne	.+20     	; 0x448 <blink+0x24>
		next_timer_value = TCNT1 + half_period;
 434:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
 438:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 43c:	87 5f       	subi	r24, 0xF7	; 247
 43e:	92 4c       	sbci	r25, 0xC2	; 194
 440:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <__data_end+0x1>
 444:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__data_end>
	}
	
	// Toggle the segment (replace LCDDR0 and bit as needed for the actual segment)
	LCDDR0 ^= (1 << 1);
 448:	ec ee       	ldi	r30, 0xEC	; 236
 44a:	f0 e0       	ldi	r31, 0x00	; 0
 44c:	90 81       	ld	r25, Z
 44e:	82 e0       	ldi	r24, 0x02	; 2
 450:	89 27       	eor	r24, r25
 452:	80 83       	st	Z, r24

	// Wait for the next half period
	busyWaitUntil(next_timer_value);
 454:	c0 91 52 01 	lds	r28, 0x0152	; 0x800152 <__data_end>
 458:	d0 91 53 01 	lds	r29, 0x0153	; 0x800153 <__data_end+0x1>
 45c:	ce 01       	movw	r24, r28
 45e:	0e 94 0a 02 	call	0x414	; 0x414 <busyWaitUntil>

	// Update the next target time, accounting for wraparound
	next_timer_value += half_period;
 462:	c7 5f       	subi	r28, 0xF7	; 247
 464:	d2 4c       	sbci	r29, 0xC2	; 194
 466:	d0 93 53 01 	sts	0x0153, r29	; 0x800153 <__data_end+0x1>
 46a:	c0 93 52 01 	sts	0x0152, r28	; 0x800152 <__data_end>

}
 46e:	df 91       	pop	r29
 470:	cf 91       	pop	r28
 472:	08 95       	ret

00000474 <toggle_lcd>:

//part 3
void toggle_lcd(uint8_t *current_segment) {
	if (*current_segment == LCD_SEGMENT1) {
 474:	fc 01       	movw	r30, r24
 476:	20 81       	ld	r18, Z
 478:	21 30       	cpi	r18, 0x01	; 1
 47a:	69 f4       	brne	.+26     	; 0x496 <toggle_lcd+0x22>
		*current_segment = LCD_SEGMENT2;
 47c:	20 e2       	ldi	r18, 0x20	; 32
 47e:	20 83       	st	Z, r18
		// Clear LCD segment 1
		LCDDR3 &= ~LCD_SEGMENT1;
 480:	ef ee       	ldi	r30, 0xEF	; 239
 482:	f0 e0       	ldi	r31, 0x00	; 0
 484:	80 81       	ld	r24, Z
 486:	8e 7f       	andi	r24, 0xFE	; 254
 488:	80 83       	st	Z, r24
		// Update to LCD segment 2
		LCDDR2 = (LCDDR2 & 0xFF) | LCD_SEGMENT2;
 48a:	ee ee       	ldi	r30, 0xEE	; 238
 48c:	f0 e0       	ldi	r31, 0x00	; 0
 48e:	80 81       	ld	r24, Z
 490:	80 62       	ori	r24, 0x20	; 32
 492:	80 83       	st	Z, r24
 494:	08 95       	ret
		} else {
		*current_segment = LCD_SEGMENT1;
 496:	21 e0       	ldi	r18, 0x01	; 1
 498:	fc 01       	movw	r30, r24
 49a:	20 83       	st	Z, r18
		// Clear LCD segment 2
		LCDDR2 &= ~LCD_SEGMENT2;
 49c:	ee ee       	ldi	r30, 0xEE	; 238
 49e:	f0 e0       	ldi	r31, 0x00	; 0
 4a0:	80 81       	ld	r24, Z
 4a2:	8f 7d       	andi	r24, 0xDF	; 223
 4a4:	80 83       	st	Z, r24
		// Update to LCD segment 1
		LCDDR3 = (LCDDR3 & 0xFF) | LCD_SEGMENT1;
 4a6:	ef ee       	ldi	r30, 0xEF	; 239
 4a8:	f0 e0       	ldi	r31, 0x00	; 0
 4aa:	80 81       	ld	r24, Z
 4ac:	81 60       	ori	r24, 0x01	; 1
 4ae:	80 83       	st	Z, r24
 4b0:	08 95       	ret

000004b2 <button>:
void button() {
	static uint8_t current_segment = LCD_SEGMENT1;       
	bool oldValue = joystick_pressed;          

	// Check if joystick is pressed (active low, bit 7 of PINB == 0)
	if (!(PINB & (1 << PB7))) {
 4b2:	1f 99       	sbic	0x03, 7	; 3
 4b4:	0c c0       	rjmp	.+24     	; 0x4ce <button+0x1c>
		if (!joystick_pressed) {
 4b6:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <joystick_pressed>
 4ba:	81 11       	cpse	r24, r1
 4bc:	0a c0       	rjmp	.+20     	; 0x4d2 <button+0x20>
			joystick_pressed = 1;
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <joystick_pressed>
			// Checks toggle
			if (oldValue == 0 && joystick_pressed == 1) toggle_lcd(&current_segment);
 4c4:	80 e0       	ldi	r24, 0x00	; 0
 4c6:	91 e0       	ldi	r25, 0x01	; 1
 4c8:	0e 94 3a 02 	call	0x474	; 0x474 <toggle_lcd>
 4cc:	08 95       	ret
		}
		} else {
		joystick_pressed = 0;
 4ce:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <joystick_pressed>
 4d2:	08 95       	ret

000004d4 <main>:
	}
}


int main(void) {
	init();
 4d4:	0e 94 82 00 	call	0x104	; 0x104 <init>
    long primeNumber = 1;
 4d8:	c1 2c       	mov	r12, r1
 4da:	d1 2c       	mov	r13, r1
 4dc:	76 01       	movw	r14, r12
 4de:	c3 94       	inc	r12
    while(1){
        prime(primeNumber);
 4e0:	c7 01       	movw	r24, r14
 4e2:	b6 01       	movw	r22, r12
 4e4:	0e 94 f6 01 	call	0x3ec	; 0x3ec <prime>
		primeNumber++;
 4e8:	8f ef       	ldi	r24, 0xFF	; 255
 4ea:	c8 1a       	sub	r12, r24
 4ec:	d8 0a       	sbc	r13, r24
 4ee:	e8 0a       	sbc	r14, r24
 4f0:	f8 0a       	sbc	r15, r24
		
        blink();
 4f2:	0e 94 12 02 	call	0x424	; 0x424 <blink>
        button();
 4f6:	0e 94 59 02 	call	0x4b2	; 0x4b2 <button>
 4fa:	f2 cf       	rjmp	.-28     	; 0x4e0 <main+0xc>

000004fc <__divmodhi4>:
 4fc:	97 fb       	bst	r25, 7
 4fe:	07 2e       	mov	r0, r23
 500:	16 f4       	brtc	.+4      	; 0x506 <__stack+0x7>
 502:	00 94       	com	r0
 504:	07 d0       	rcall	.+14     	; 0x514 <__divmodhi4_neg1>
 506:	77 fd       	sbrc	r23, 7
 508:	09 d0       	rcall	.+18     	; 0x51c <__divmodhi4_neg2>
 50a:	0e 94 b7 02 	call	0x56e	; 0x56e <__udivmodhi4>
 50e:	07 fc       	sbrc	r0, 7
 510:	05 d0       	rcall	.+10     	; 0x51c <__divmodhi4_neg2>
 512:	3e f4       	brtc	.+14     	; 0x522 <__divmodhi4_exit>

00000514 <__divmodhi4_neg1>:
 514:	90 95       	com	r25
 516:	81 95       	neg	r24
 518:	9f 4f       	sbci	r25, 0xFF	; 255
 51a:	08 95       	ret

0000051c <__divmodhi4_neg2>:
 51c:	70 95       	com	r23
 51e:	61 95       	neg	r22
 520:	7f 4f       	sbci	r23, 0xFF	; 255

00000522 <__divmodhi4_exit>:
 522:	08 95       	ret

00000524 <__divmodsi4>:
 524:	05 2e       	mov	r0, r21
 526:	97 fb       	bst	r25, 7
 528:	1e f4       	brtc	.+6      	; 0x530 <__divmodsi4+0xc>
 52a:	00 94       	com	r0
 52c:	0e 94 a9 02 	call	0x552	; 0x552 <__negsi2>
 530:	57 fd       	sbrc	r21, 7
 532:	07 d0       	rcall	.+14     	; 0x542 <__divmodsi4_neg2>
 534:	0e 94 cb 02 	call	0x596	; 0x596 <__udivmodsi4>
 538:	07 fc       	sbrc	r0, 7
 53a:	03 d0       	rcall	.+6      	; 0x542 <__divmodsi4_neg2>
 53c:	4e f4       	brtc	.+18     	; 0x550 <__divmodsi4_exit>
 53e:	0c 94 a9 02 	jmp	0x552	; 0x552 <__negsi2>

00000542 <__divmodsi4_neg2>:
 542:	50 95       	com	r21
 544:	40 95       	com	r20
 546:	30 95       	com	r19
 548:	21 95       	neg	r18
 54a:	3f 4f       	sbci	r19, 0xFF	; 255
 54c:	4f 4f       	sbci	r20, 0xFF	; 255
 54e:	5f 4f       	sbci	r21, 0xFF	; 255

00000550 <__divmodsi4_exit>:
 550:	08 95       	ret

00000552 <__negsi2>:
 552:	90 95       	com	r25
 554:	80 95       	com	r24
 556:	70 95       	com	r23
 558:	61 95       	neg	r22
 55a:	7f 4f       	sbci	r23, 0xFF	; 255
 55c:	8f 4f       	sbci	r24, 0xFF	; 255
 55e:	9f 4f       	sbci	r25, 0xFF	; 255
 560:	08 95       	ret

00000562 <__tablejump2__>:
 562:	ee 0f       	add	r30, r30
 564:	ff 1f       	adc	r31, r31
 566:	05 90       	lpm	r0, Z+
 568:	f4 91       	lpm	r31, Z
 56a:	e0 2d       	mov	r30, r0
 56c:	09 94       	ijmp

0000056e <__udivmodhi4>:
 56e:	aa 1b       	sub	r26, r26
 570:	bb 1b       	sub	r27, r27
 572:	51 e1       	ldi	r21, 0x11	; 17
 574:	07 c0       	rjmp	.+14     	; 0x584 <__udivmodhi4_ep>

00000576 <__udivmodhi4_loop>:
 576:	aa 1f       	adc	r26, r26
 578:	bb 1f       	adc	r27, r27
 57a:	a6 17       	cp	r26, r22
 57c:	b7 07       	cpc	r27, r23
 57e:	10 f0       	brcs	.+4      	; 0x584 <__udivmodhi4_ep>
 580:	a6 1b       	sub	r26, r22
 582:	b7 0b       	sbc	r27, r23

00000584 <__udivmodhi4_ep>:
 584:	88 1f       	adc	r24, r24
 586:	99 1f       	adc	r25, r25
 588:	5a 95       	dec	r21
 58a:	a9 f7       	brne	.-22     	; 0x576 <__udivmodhi4_loop>
 58c:	80 95       	com	r24
 58e:	90 95       	com	r25
 590:	bc 01       	movw	r22, r24
 592:	cd 01       	movw	r24, r26
 594:	08 95       	ret

00000596 <__udivmodsi4>:
 596:	a1 e2       	ldi	r26, 0x21	; 33
 598:	1a 2e       	mov	r1, r26
 59a:	aa 1b       	sub	r26, r26
 59c:	bb 1b       	sub	r27, r27
 59e:	fd 01       	movw	r30, r26
 5a0:	0d c0       	rjmp	.+26     	; 0x5bc <__udivmodsi4_ep>

000005a2 <__udivmodsi4_loop>:
 5a2:	aa 1f       	adc	r26, r26
 5a4:	bb 1f       	adc	r27, r27
 5a6:	ee 1f       	adc	r30, r30
 5a8:	ff 1f       	adc	r31, r31
 5aa:	a2 17       	cp	r26, r18
 5ac:	b3 07       	cpc	r27, r19
 5ae:	e4 07       	cpc	r30, r20
 5b0:	f5 07       	cpc	r31, r21
 5b2:	20 f0       	brcs	.+8      	; 0x5bc <__udivmodsi4_ep>
 5b4:	a2 1b       	sub	r26, r18
 5b6:	b3 0b       	sbc	r27, r19
 5b8:	e4 0b       	sbc	r30, r20
 5ba:	f5 0b       	sbc	r31, r21

000005bc <__udivmodsi4_ep>:
 5bc:	66 1f       	adc	r22, r22
 5be:	77 1f       	adc	r23, r23
 5c0:	88 1f       	adc	r24, r24
 5c2:	99 1f       	adc	r25, r25
 5c4:	1a 94       	dec	r1
 5c6:	69 f7       	brne	.-38     	; 0x5a2 <__udivmodsi4_loop>
 5c8:	60 95       	com	r22
 5ca:	70 95       	com	r23
 5cc:	80 95       	com	r24
 5ce:	90 95       	com	r25
 5d0:	9b 01       	movw	r18, r22
 5d2:	ac 01       	movw	r20, r24
 5d4:	bd 01       	movw	r22, r26
 5d6:	cf 01       	movw	r24, r30
 5d8:	08 95       	ret

000005da <_exit>:
 5da:	f8 94       	cli

000005dc <__stop_program>:
 5dc:	ff cf       	rjmp	.-2      	; 0x5dc <__stop_program>
