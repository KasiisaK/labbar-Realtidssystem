
lab1-part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  0000050a  0000059e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000050a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800150  00800150  000005ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000620  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000660  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b90  00000000  00000000  000006b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000092a  00000000  00000000  00001240  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000442  00000000  00000000  00001b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  00001fac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004e4  00000000  00000000  0000207c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004ad  00000000  00000000  00002560  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002a0d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	7f 00       	.word	0x007f	; ????
  5e:	61 00       	.word	0x0061	; ????
  60:	64 00       	.word	0x0064	; ????
  62:	67 00       	.word	0x0067	; ????
  64:	6a 00       	.word	0x006a	; ????
  66:	6d 00       	.word	0x006d	; ????
  68:	70 00       	.word	0x0070	; ????
  6a:	73 00       	.word	0x0073	; ????
  6c:	76 00       	.word	0x0076	; ????
  6e:	79 00       	.word	0x0079	; ????

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ea e0       	ldi	r30, 0x0A	; 10
  84:	f5 e0       	ldi	r31, 0x05	; 5
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a0 35       	cpi	r26, 0x50	; 80
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a0 e5       	ldi	r26, 0x50	; 80
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a8 35       	cpi	r26, 0x58	; 88
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 10 02 	call	0x420	; 0x420 <main>
  a6:	0c 94 83 02 	jmp	0x506	; 0x506 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <getSegmentForChar>:
int eight[] = {0b0001, 0b0101, 0b1111, 0b0001};
int nine[] = {0b0001, 0b0101, 0b1011, 0b0001};
int none[] = {0b0000, 0b0000, 0b0000, 0b0000};

int* getSegmentForChar(char ch) {
	switch (ch) {
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	fc 01       	movw	r30, r24
  b2:	f0 97       	sbiw	r30, 0x30	; 48
  b4:	ea 30       	cpi	r30, 0x0A	; 10
  b6:	f1 05       	cpc	r31, r1
  b8:	f8 f4       	brcc	.+62     	; 0xf8 <getSegmentForChar+0x4a>
  ba:	e2 5d       	subi	r30, 0xD2	; 210
  bc:	ff 4f       	sbci	r31, 0xFF	; 255
  be:	0c 94 47 02 	jmp	0x48e	; 0x48e <__tablejump2__>
		case '0': return zero;
		case '1': return one;
  c2:	80 e4       	ldi	r24, 0x40	; 64
  c4:	91 e0       	ldi	r25, 0x01	; 1
  c6:	08 95       	ret
		case '2': return two;
  c8:	88 e3       	ldi	r24, 0x38	; 56
  ca:	91 e0       	ldi	r25, 0x01	; 1
  cc:	08 95       	ret
		case '3': return three;
  ce:	80 e3       	ldi	r24, 0x30	; 48
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	08 95       	ret
		case '4': return four;
  d4:	88 e2       	ldi	r24, 0x28	; 40
  d6:	91 e0       	ldi	r25, 0x01	; 1
  d8:	08 95       	ret
		case '5': return five;
  da:	80 e2       	ldi	r24, 0x20	; 32
  dc:	91 e0       	ldi	r25, 0x01	; 1
  de:	08 95       	ret
		case '6': return six;
  e0:	88 e1       	ldi	r24, 0x18	; 24
  e2:	91 e0       	ldi	r25, 0x01	; 1
  e4:	08 95       	ret
		case '7': return seven;
  e6:	80 e1       	ldi	r24, 0x10	; 16
  e8:	91 e0       	ldi	r25, 0x01	; 1
  ea:	08 95       	ret
		case '8': return eight;
  ec:	88 e0       	ldi	r24, 0x08	; 8
  ee:	91 e0       	ldi	r25, 0x01	; 1
  f0:	08 95       	ret
		case '9': return nine;
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	91 e0       	ldi	r25, 0x01	; 1
  f6:	08 95       	ret
		default:  return none;
  f8:	80 e5       	ldi	r24, 0x50	; 80
  fa:	91 e0       	ldi	r25, 0x01	; 1
  fc:	08 95       	ret
int nine[] = {0b0001, 0b0101, 0b1011, 0b0001};
int none[] = {0b0000, 0b0000, 0b0000, 0b0000};

int* getSegmentForChar(char ch) {
	switch (ch) {
		case '0': return zero;
  fe:	88 e4       	ldi	r24, 0x48	; 72
 100:	91 e0       	ldi	r25, 0x01	; 1
		case '7': return seven;
		case '8': return eight;
		case '9': return nine;
		default:  return none;
	}
}
 102:	08 95       	ret

00000104 <init>:


void init() {
	CLKPR = 0x80;
 104:	e1 e6       	ldi	r30, 0x61	; 97
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 e8       	ldi	r24, 0x80	; 128
 10a:	80 83       	st	Z, r24
	CLKPR = 0x00;
 10c:	10 82       	st	Z, r1
	LCDCRB = (1 << LCDCS) | (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM2) | (1 << LCDPM1) | (1 << LCDPM0);
 10e:	87 eb       	ldi	r24, 0xB7	; 183
 110:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);
 114:	87 e0       	ldi	r24, 0x07	; 7
 116:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__DATA_REGION_ORIGIN__+0x86>
	LCDCCR = (1 << LCDDC1) | (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1);
 11a:	8e e4       	ldi	r24, 0x4E	; 78
 11c:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__DATA_REGION_ORIGIN__+0x87>
	TCCR1A = (1 << WGM13) | (1 << WGM12) | (1 << COM1A1) | (1 << COM1A0);
 120:	88 ed       	ldi	r24, 0xD8	; 216
 122:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
 126:	80 ec       	ldi	r24, 0xC0	; 192
 128:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
 12c:	08 95       	ret

0000012e <writeChar>:
}


void writeChar(char ch, uint8_t pos) {
 12e:	cf 93       	push	r28
	if (pos > 4 || pos < 0) return;
 130:	65 30       	cpi	r22, 0x05	; 5
 132:	08 f0       	brcs	.+2      	; 0x136 <writeChar+0x8>
 134:	e4 c0       	rjmp	.+456    	; 0x2fe <writeChar+0x1d0>
 136:	c6 2f       	mov	r28, r22
	

	int* segment = getSegmentForChar(ch);
 138:	0e 94 57 00 	call	0xae	; 0xae <getSegmentForChar>
 13c:	fc 01       	movw	r30, r24
	
	switch (pos) {
 13e:	c2 30       	cpi	r28, 0x02	; 2
 140:	09 f4       	brne	.+2      	; 0x144 <writeChar+0x16>
 142:	67 c0       	rjmp	.+206    	; 0x212 <writeChar+0xe4>
 144:	28 f4       	brcc	.+10     	; 0x150 <writeChar+0x22>
 146:	cc 23       	and	r28, r28
 148:	51 f0       	breq	.+20     	; 0x15e <writeChar+0x30>
 14a:	c1 30       	cpi	r28, 0x01	; 1
 14c:	29 f1       	breq	.+74     	; 0x198 <writeChar+0x6a>
 14e:	d7 c0       	rjmp	.+430    	; 0x2fe <writeChar+0x1d0>
 150:	c3 30       	cpi	r28, 0x03	; 3
 152:	09 f4       	brne	.+2      	; 0x156 <writeChar+0x28>
 154:	7b c0       	rjmp	.+246    	; 0x24c <writeChar+0x11e>
 156:	c4 30       	cpi	r28, 0x04	; 4
 158:	09 f4       	brne	.+2      	; 0x15c <writeChar+0x2e>
 15a:	b5 c0       	rjmp	.+362    	; 0x2c6 <writeChar+0x198>
 15c:	d0 c0       	rjmp	.+416    	; 0x2fe <writeChar+0x1d0>
		case 0:
			LCDDR0 = (LCDDR0 & 0xF0) | segment[0];
 15e:	ac ee       	ldi	r26, 0xEC	; 236
 160:	b0 e0       	ldi	r27, 0x00	; 0
 162:	8c 91       	ld	r24, X
 164:	80 7f       	andi	r24, 0xF0	; 240
 166:	90 81       	ld	r25, Z
 168:	89 2b       	or	r24, r25
 16a:	8c 93       	st	X, r24
			LCDDR5 = (LCDDR5 & 0xF0) | segment[1];
 16c:	a1 ef       	ldi	r26, 0xF1	; 241
 16e:	b0 e0       	ldi	r27, 0x00	; 0
 170:	8c 91       	ld	r24, X
 172:	80 7f       	andi	r24, 0xF0	; 240
 174:	92 81       	ldd	r25, Z+2	; 0x02
 176:	89 2b       	or	r24, r25
 178:	8c 93       	st	X, r24
			LCDDR10 = (LCDDR10 & 0xF0) | segment[2];
 17a:	a6 ef       	ldi	r26, 0xF6	; 246
 17c:	b0 e0       	ldi	r27, 0x00	; 0
 17e:	8c 91       	ld	r24, X
 180:	80 7f       	andi	r24, 0xF0	; 240
 182:	94 81       	ldd	r25, Z+4	; 0x04
 184:	89 2b       	or	r24, r25
 186:	8c 93       	st	X, r24
			LCDDR15 = (LCDDR15 & 0xF0) | segment[3];
 188:	ab ef       	ldi	r26, 0xFB	; 251
 18a:	b0 e0       	ldi	r27, 0x00	; 0
 18c:	8c 91       	ld	r24, X
 18e:	80 7f       	andi	r24, 0xF0	; 240
 190:	96 81       	ldd	r25, Z+6	; 0x06
 192:	89 2b       	or	r24, r25
 194:	8c 93       	st	X, r24
			break;
 196:	b3 c0       	rjmp	.+358    	; 0x2fe <writeChar+0x1d0>
		case 1:
			LCDDR0 = (LCDDR0 & 0x0F) | (segment[0] << 4);
 198:	ac ee       	ldi	r26, 0xEC	; 236
 19a:	b0 e0       	ldi	r27, 0x00	; 0
 19c:	2c 91       	ld	r18, X
 19e:	80 81       	ld	r24, Z
 1a0:	91 81       	ldd	r25, Z+1	; 0x01
 1a2:	82 95       	swap	r24
 1a4:	92 95       	swap	r25
 1a6:	90 7f       	andi	r25, 0xF0	; 240
 1a8:	98 27       	eor	r25, r24
 1aa:	80 7f       	andi	r24, 0xF0	; 240
 1ac:	98 27       	eor	r25, r24
 1ae:	92 2f       	mov	r25, r18
 1b0:	9f 70       	andi	r25, 0x0F	; 15
 1b2:	89 2b       	or	r24, r25
 1b4:	8c 93       	st	X, r24
			LCDDR5 = (LCDDR5 & 0x0F) | (segment[1] << 4);
 1b6:	a1 ef       	ldi	r26, 0xF1	; 241
 1b8:	b0 e0       	ldi	r27, 0x00	; 0
 1ba:	2c 91       	ld	r18, X
 1bc:	82 81       	ldd	r24, Z+2	; 0x02
 1be:	93 81       	ldd	r25, Z+3	; 0x03
 1c0:	82 95       	swap	r24
 1c2:	92 95       	swap	r25
 1c4:	90 7f       	andi	r25, 0xF0	; 240
 1c6:	98 27       	eor	r25, r24
 1c8:	80 7f       	andi	r24, 0xF0	; 240
 1ca:	98 27       	eor	r25, r24
 1cc:	92 2f       	mov	r25, r18
 1ce:	9f 70       	andi	r25, 0x0F	; 15
 1d0:	89 2b       	or	r24, r25
 1d2:	8c 93       	st	X, r24
			LCDDR10 = (LCDDR10 & 0x0F) | (segment[2] << 4);
 1d4:	a6 ef       	ldi	r26, 0xF6	; 246
 1d6:	b0 e0       	ldi	r27, 0x00	; 0
 1d8:	2c 91       	ld	r18, X
 1da:	84 81       	ldd	r24, Z+4	; 0x04
 1dc:	95 81       	ldd	r25, Z+5	; 0x05
 1de:	82 95       	swap	r24
 1e0:	92 95       	swap	r25
 1e2:	90 7f       	andi	r25, 0xF0	; 240
 1e4:	98 27       	eor	r25, r24
 1e6:	80 7f       	andi	r24, 0xF0	; 240
 1e8:	98 27       	eor	r25, r24
 1ea:	92 2f       	mov	r25, r18
 1ec:	9f 70       	andi	r25, 0x0F	; 15
 1ee:	89 2b       	or	r24, r25
 1f0:	8c 93       	st	X, r24
			LCDDR15 = (LCDDR15 & 0x0F) | (segment[3] << 4);
 1f2:	ab ef       	ldi	r26, 0xFB	; 251
 1f4:	b0 e0       	ldi	r27, 0x00	; 0
 1f6:	2c 91       	ld	r18, X
 1f8:	86 81       	ldd	r24, Z+6	; 0x06
 1fa:	97 81       	ldd	r25, Z+7	; 0x07
 1fc:	82 95       	swap	r24
 1fe:	92 95       	swap	r25
 200:	90 7f       	andi	r25, 0xF0	; 240
 202:	98 27       	eor	r25, r24
 204:	80 7f       	andi	r24, 0xF0	; 240
 206:	98 27       	eor	r25, r24
 208:	92 2f       	mov	r25, r18
 20a:	9f 70       	andi	r25, 0x0F	; 15
 20c:	89 2b       	or	r24, r25
 20e:	8c 93       	st	X, r24
			break;
 210:	76 c0       	rjmp	.+236    	; 0x2fe <writeChar+0x1d0>
		case 2:
			LCDDR1 = (LCDDR1 & 0xF0) | segment[0];
 212:	ad ee       	ldi	r26, 0xED	; 237
 214:	b0 e0       	ldi	r27, 0x00	; 0
 216:	8c 91       	ld	r24, X
 218:	80 7f       	andi	r24, 0xF0	; 240
 21a:	90 81       	ld	r25, Z
 21c:	89 2b       	or	r24, r25
 21e:	8c 93       	st	X, r24
			LCDDR6 = (LCDDR6 & 0xF0) | segment[1];
 220:	a2 ef       	ldi	r26, 0xF2	; 242
 222:	b0 e0       	ldi	r27, 0x00	; 0
 224:	8c 91       	ld	r24, X
 226:	80 7f       	andi	r24, 0xF0	; 240
 228:	92 81       	ldd	r25, Z+2	; 0x02
 22a:	89 2b       	or	r24, r25
 22c:	8c 93       	st	X, r24
			LCDDR11 = (LCDDR11 & 0xF0) | segment[2];
 22e:	a7 ef       	ldi	r26, 0xF7	; 247
 230:	b0 e0       	ldi	r27, 0x00	; 0
 232:	8c 91       	ld	r24, X
 234:	80 7f       	andi	r24, 0xF0	; 240
 236:	94 81       	ldd	r25, Z+4	; 0x04
 238:	89 2b       	or	r24, r25
 23a:	8c 93       	st	X, r24
			LCDDR16 = (LCDDR16 & 0xF0) | segment[3];
 23c:	ac ef       	ldi	r26, 0xFC	; 252
 23e:	b0 e0       	ldi	r27, 0x00	; 0
 240:	8c 91       	ld	r24, X
 242:	80 7f       	andi	r24, 0xF0	; 240
 244:	96 81       	ldd	r25, Z+6	; 0x06
 246:	89 2b       	or	r24, r25
 248:	8c 93       	st	X, r24
			break;
 24a:	59 c0       	rjmp	.+178    	; 0x2fe <writeChar+0x1d0>
		case 3:
			LCDDR1 = (LCDDR1 & 0x0F) | (segment[0] << 4);
 24c:	ad ee       	ldi	r26, 0xED	; 237
 24e:	b0 e0       	ldi	r27, 0x00	; 0
 250:	2c 91       	ld	r18, X
 252:	80 81       	ld	r24, Z
 254:	91 81       	ldd	r25, Z+1	; 0x01
 256:	82 95       	swap	r24
 258:	92 95       	swap	r25
 25a:	90 7f       	andi	r25, 0xF0	; 240
 25c:	98 27       	eor	r25, r24
 25e:	80 7f       	andi	r24, 0xF0	; 240
 260:	98 27       	eor	r25, r24
 262:	92 2f       	mov	r25, r18
 264:	9f 70       	andi	r25, 0x0F	; 15
 266:	89 2b       	or	r24, r25
 268:	8c 93       	st	X, r24
			LCDDR6 = (LCDDR6 & 0x0F) | (segment[1] << 4);
 26a:	a2 ef       	ldi	r26, 0xF2	; 242
 26c:	b0 e0       	ldi	r27, 0x00	; 0
 26e:	2c 91       	ld	r18, X
 270:	82 81       	ldd	r24, Z+2	; 0x02
 272:	93 81       	ldd	r25, Z+3	; 0x03
 274:	82 95       	swap	r24
 276:	92 95       	swap	r25
 278:	90 7f       	andi	r25, 0xF0	; 240
 27a:	98 27       	eor	r25, r24
 27c:	80 7f       	andi	r24, 0xF0	; 240
 27e:	98 27       	eor	r25, r24
 280:	92 2f       	mov	r25, r18
 282:	9f 70       	andi	r25, 0x0F	; 15
 284:	89 2b       	or	r24, r25
 286:	8c 93       	st	X, r24
			LCDDR11 = (LCDDR11 & 0x0F) | (segment[2] << 4);
 288:	a7 ef       	ldi	r26, 0xF7	; 247
 28a:	b0 e0       	ldi	r27, 0x00	; 0
 28c:	2c 91       	ld	r18, X
 28e:	84 81       	ldd	r24, Z+4	; 0x04
 290:	95 81       	ldd	r25, Z+5	; 0x05
 292:	82 95       	swap	r24
 294:	92 95       	swap	r25
 296:	90 7f       	andi	r25, 0xF0	; 240
 298:	98 27       	eor	r25, r24
 29a:	80 7f       	andi	r24, 0xF0	; 240
 29c:	98 27       	eor	r25, r24
 29e:	92 2f       	mov	r25, r18
 2a0:	9f 70       	andi	r25, 0x0F	; 15
 2a2:	89 2b       	or	r24, r25
 2a4:	8c 93       	st	X, r24
			LCDDR16 = (LCDDR16 & 0x0F) | (segment[3] << 4);
 2a6:	ac ef       	ldi	r26, 0xFC	; 252
 2a8:	b0 e0       	ldi	r27, 0x00	; 0
 2aa:	2c 91       	ld	r18, X
 2ac:	86 81       	ldd	r24, Z+6	; 0x06
 2ae:	97 81       	ldd	r25, Z+7	; 0x07
 2b0:	82 95       	swap	r24
 2b2:	92 95       	swap	r25
 2b4:	90 7f       	andi	r25, 0xF0	; 240
 2b6:	98 27       	eor	r25, r24
 2b8:	80 7f       	andi	r24, 0xF0	; 240
 2ba:	98 27       	eor	r25, r24
 2bc:	92 2f       	mov	r25, r18
 2be:	9f 70       	andi	r25, 0x0F	; 15
 2c0:	89 2b       	or	r24, r25
 2c2:	8c 93       	st	X, r24
			break;
 2c4:	1c c0       	rjmp	.+56     	; 0x2fe <writeChar+0x1d0>
		case 4:
			LCDDR2 = (LCDDR2 & 0xF0) | segment[0];
 2c6:	ae ee       	ldi	r26, 0xEE	; 238
 2c8:	b0 e0       	ldi	r27, 0x00	; 0
 2ca:	8c 91       	ld	r24, X
 2cc:	80 7f       	andi	r24, 0xF0	; 240
 2ce:	90 81       	ld	r25, Z
 2d0:	89 2b       	or	r24, r25
 2d2:	8c 93       	st	X, r24
			LCDDR7 = (LCDDR7 & 0xF0) | segment[1];
 2d4:	a3 ef       	ldi	r26, 0xF3	; 243
 2d6:	b0 e0       	ldi	r27, 0x00	; 0
 2d8:	8c 91       	ld	r24, X
 2da:	80 7f       	andi	r24, 0xF0	; 240
 2dc:	92 81       	ldd	r25, Z+2	; 0x02
 2de:	89 2b       	or	r24, r25
 2e0:	8c 93       	st	X, r24
			LCDDR12 = (LCDDR12 & 0xF0) | segment[2];
 2e2:	a8 ef       	ldi	r26, 0xF8	; 248
 2e4:	b0 e0       	ldi	r27, 0x00	; 0
 2e6:	8c 91       	ld	r24, X
 2e8:	80 7f       	andi	r24, 0xF0	; 240
 2ea:	94 81       	ldd	r25, Z+4	; 0x04
 2ec:	89 2b       	or	r24, r25
 2ee:	8c 93       	st	X, r24
			LCDDR17 = (LCDDR17 & 0xF0) | segment[3];
 2f0:	ad ef       	ldi	r26, 0xFD	; 253
 2f2:	b0 e0       	ldi	r27, 0x00	; 0
 2f4:	8c 91       	ld	r24, X
 2f6:	80 7f       	andi	r24, 0xF0	; 240
 2f8:	96 81       	ldd	r25, Z+6	; 0x06
 2fa:	89 2b       	or	r24, r25
 2fc:	8c 93       	st	X, r24
			break;
	}
}
 2fe:	cf 91       	pop	r28
 300:	08 95       	ret

00000302 <writeLong>:


void writeLong(long i) {
 302:	4f 92       	push	r4
 304:	5f 92       	push	r5
 306:	6f 92       	push	r6
 308:	7f 92       	push	r7
 30a:	bf 92       	push	r11
 30c:	cf 92       	push	r12
 30e:	df 92       	push	r13
 310:	ef 92       	push	r14
 312:	ff 92       	push	r15
 314:	0f 93       	push	r16
 316:	1f 93       	push	r17
 318:	cf 93       	push	r28
 31a:	df 93       	push	r29
 31c:	6b 01       	movw	r12, r22
 31e:	7c 01       	movw	r14, r24
 320:	c4 e0       	ldi	r28, 0x04	; 4

	// Loop until the number is reduced to 0 or all positions are filled
	for (int count = 0; count < 5; count++) {
		if (i != 0) {
			int digit = i % 10; // Extract least significant digit
			writeChar(digit + '0', pos); // Convert to char and write to LCD
 322:	0f 2e       	mov	r0, r31
 324:	fa e0       	ldi	r31, 0x0A	; 10
 326:	4f 2e       	mov	r4, r31
 328:	51 2c       	mov	r5, r1
 32a:	61 2c       	mov	r6, r1
 32c:	71 2c       	mov	r7, r1
 32e:	f0 2d       	mov	r31, r0
	
	int pos = 4; // Start writing at the rightmost position on the LCD

	// Loop until the number is reduced to 0 or all positions are filled
	for (int count = 0; count < 5; count++) {
		if (i != 0) {
 330:	c1 14       	cp	r12, r1
 332:	d1 04       	cpc	r13, r1
 334:	e1 04       	cpc	r14, r1
 336:	f1 04       	cpc	r15, r1
 338:	a1 f0       	breq	.+40     	; 0x362 <writeLong+0x60>
			int digit = i % 10; // Extract least significant digit
			writeChar(digit + '0', pos); // Convert to char and write to LCD
 33a:	c7 01       	movw	r24, r14
 33c:	b6 01       	movw	r22, r12
 33e:	a3 01       	movw	r20, r6
 340:	92 01       	movw	r18, r4
 342:	0e 94 28 02 	call	0x450	; 0x450 <__divmodsi4>
 346:	b2 2e       	mov	r11, r18
 348:	03 2f       	mov	r16, r19
 34a:	14 2f       	mov	r17, r20
 34c:	d5 2f       	mov	r29, r21
 34e:	86 2f       	mov	r24, r22
 350:	6c 2f       	mov	r22, r28
 352:	80 5d       	subi	r24, 0xD0	; 208
 354:	0e 94 97 00 	call	0x12e	; 0x12e <writeChar>
			i /= 10; // Remove the processed digit
 358:	cb 2c       	mov	r12, r11
 35a:	d0 2e       	mov	r13, r16
 35c:	e1 2e       	mov	r14, r17
 35e:	fd 2e       	mov	r15, r29
 360:	04 c0       	rjmp	.+8      	; 0x36a <writeLong+0x68>
			} else {
			writeChar(' ', pos); // Clear remaining positions if the number has fewer than 5 digits
 362:	6c 2f       	mov	r22, r28
 364:	80 e2       	ldi	r24, 0x20	; 32
 366:	0e 94 97 00 	call	0x12e	; 0x12e <writeChar>
 36a:	c1 50       	subi	r28, 0x01	; 1
 36c:	08 f7       	brcc	.-62     	; 0x330 <writeLong+0x2e>
		}
		pos--; // Move to the next LCD position to the left
	}
}
 36e:	df 91       	pop	r29
 370:	cf 91       	pop	r28
 372:	1f 91       	pop	r17
 374:	0f 91       	pop	r16
 376:	ff 90       	pop	r15
 378:	ef 90       	pop	r14
 37a:	df 90       	pop	r13
 37c:	cf 90       	pop	r12
 37e:	bf 90       	pop	r11
 380:	7f 90       	pop	r7
 382:	6f 90       	pop	r6
 384:	5f 90       	pop	r5
 386:	4f 90       	pop	r4
 388:	08 95       	ret

0000038a <isPrime>:


bool isPrime(int number)
{
 38a:	fc 01       	movw	r30, r24
	if (number <= 1) // 0 and 1 are not prime numbers
 38c:	82 30       	cpi	r24, 0x02	; 2
 38e:	91 05       	cpc	r25, r1
 390:	1c f1       	brlt	.+70     	; 0x3d8 <isPrime+0x4e>
	{
		return false;
	}
	for (int i=2; i*i <= number; i++) //loop from 2 to sqrt(number)
 392:	84 30       	cpi	r24, 0x04	; 4
 394:	91 05       	cpc	r25, r1
 396:	14 f1       	brlt	.+68     	; 0x3dc <isPrime+0x52>
	{
		if (number % i == 0) return false;	//divisible => not prime
 398:	81 70       	andi	r24, 0x01	; 1
 39a:	90 78       	andi	r25, 0x80	; 128
 39c:	99 23       	and	r25, r25
 39e:	24 f4       	brge	.+8      	; 0x3a8 <isPrime+0x1e>
 3a0:	01 97       	sbiw	r24, 0x01	; 1
 3a2:	8e 6f       	ori	r24, 0xFE	; 254
 3a4:	9f 6f       	ori	r25, 0xFF	; 255
 3a6:	01 96       	adiw	r24, 0x01	; 1
 3a8:	89 2b       	or	r24, r25
 3aa:	d1 f0       	breq	.+52     	; 0x3e0 <isPrime+0x56>
 3ac:	22 e0       	ldi	r18, 0x02	; 2
 3ae:	30 e0       	ldi	r19, 0x00	; 0
 3b0:	06 c0       	rjmp	.+12     	; 0x3be <isPrime+0x34>
 3b2:	cf 01       	movw	r24, r30
 3b4:	b9 01       	movw	r22, r18
 3b6:	0e 94 14 02 	call	0x428	; 0x428 <__divmodhi4>
 3ba:	89 2b       	or	r24, r25
 3bc:	99 f0       	breq	.+38     	; 0x3e4 <isPrime+0x5a>
{
	if (number <= 1) // 0 and 1 are not prime numbers
	{
		return false;
	}
	for (int i=2; i*i <= number; i++) //loop from 2 to sqrt(number)
 3be:	2f 5f       	subi	r18, 0xFF	; 255
 3c0:	3f 4f       	sbci	r19, 0xFF	; 255
 3c2:	22 9f       	mul	r18, r18
 3c4:	c0 01       	movw	r24, r0
 3c6:	23 9f       	mul	r18, r19
 3c8:	90 0d       	add	r25, r0
 3ca:	90 0d       	add	r25, r0
 3cc:	11 24       	eor	r1, r1
 3ce:	e8 17       	cp	r30, r24
 3d0:	f9 07       	cpc	r31, r25
 3d2:	7c f7       	brge	.-34     	; 0x3b2 <isPrime+0x28>
	{
		if (number % i == 0) return false;	//divisible => not prime
	}
	//is prime if no factors
	return true;
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	08 95       	ret

bool isPrime(int number)
{
	if (number <= 1) // 0 and 1 are not prime numbers
	{
		return false;
 3d8:	80 e0       	ldi	r24, 0x00	; 0
 3da:	08 95       	ret
	for (int i=2; i*i <= number; i++) //loop from 2 to sqrt(number)
	{
		if (number % i == 0) return false;	//divisible => not prime
	}
	//is prime if no factors
	return true;
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	08 95       	ret
	{
		return false;
	}
	for (int i=2; i*i <= number; i++) //loop from 2 to sqrt(number)
	{
		if (number % i == 0) return false;	//divisible => not prime
 3e0:	80 e0       	ldi	r24, 0x00	; 0
 3e2:	08 95       	ret
 3e4:	80 e0       	ldi	r24, 0x00	; 0
	}
	//is prime if no factors
	return true;
}
 3e6:	08 95       	ret

000003e8 <primes>:

void primes() {
	long i = 1;
 3e8:	c1 2c       	mov	r12, r1
 3ea:	d1 2c       	mov	r13, r1
 3ec:	76 01       	movw	r14, r12
 3ee:	c3 94       	inc	r12
	while (true) {
		if (isPrime(i)) 
 3f0:	c6 01       	movw	r24, r12
 3f2:	0e 94 c5 01 	call	0x38a	; 0x38a <isPrime>
 3f6:	88 23       	and	r24, r24
 3f8:	69 f0       	breq	.+26     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
		{
			writeLong(i);
 3fa:	c7 01       	movw	r24, r14
 3fc:	b6 01       	movw	r22, r12
 3fe:	0e 94 81 01 	call	0x302	; 0x302 <writeLong>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 402:	2f e3       	ldi	r18, 0x3F	; 63
 404:	82 e4       	ldi	r24, 0x42	; 66
 406:	9f e0       	ldi	r25, 0x0F	; 15
 408:	21 50       	subi	r18, 0x01	; 1
 40a:	80 40       	sbci	r24, 0x00	; 0
 40c:	90 40       	sbci	r25, 0x00	; 0
 40e:	e1 f7       	brne	.-8      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 410:	00 c0       	rjmp	.+0      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 412:	00 00       	nop
			_delay_ms(5000);
		}
		i++;
 414:	2f ef       	ldi	r18, 0xFF	; 255
 416:	c2 1a       	sub	r12, r18
 418:	d2 0a       	sbc	r13, r18
 41a:	e2 0a       	sbc	r14, r18
 41c:	f2 0a       	sbc	r15, r18
	}
 41e:	e8 cf       	rjmp	.-48     	; 0x3f0 <primes+0x8>

00000420 <main>:
	
}

int main(void) {
	init();
 420:	0e 94 82 00 	call	0x104	; 0x104 <init>
	
	primes();
 424:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <primes>

00000428 <__divmodhi4>:
 428:	97 fb       	bst	r25, 7
 42a:	07 2e       	mov	r0, r23
 42c:	16 f4       	brtc	.+4      	; 0x432 <__divmodhi4+0xa>
 42e:	00 94       	com	r0
 430:	07 d0       	rcall	.+14     	; 0x440 <__divmodhi4_neg1>
 432:	77 fd       	sbrc	r23, 7
 434:	09 d0       	rcall	.+18     	; 0x448 <__divmodhi4_neg2>
 436:	0e 94 4d 02 	call	0x49a	; 0x49a <__udivmodhi4>
 43a:	07 fc       	sbrc	r0, 7
 43c:	05 d0       	rcall	.+10     	; 0x448 <__divmodhi4_neg2>
 43e:	3e f4       	brtc	.+14     	; 0x44e <__divmodhi4_exit>

00000440 <__divmodhi4_neg1>:
 440:	90 95       	com	r25
 442:	81 95       	neg	r24
 444:	9f 4f       	sbci	r25, 0xFF	; 255
 446:	08 95       	ret

00000448 <__divmodhi4_neg2>:
 448:	70 95       	com	r23
 44a:	61 95       	neg	r22
 44c:	7f 4f       	sbci	r23, 0xFF	; 255

0000044e <__divmodhi4_exit>:
 44e:	08 95       	ret

00000450 <__divmodsi4>:
 450:	05 2e       	mov	r0, r21
 452:	97 fb       	bst	r25, 7
 454:	1e f4       	brtc	.+6      	; 0x45c <__divmodsi4+0xc>
 456:	00 94       	com	r0
 458:	0e 94 3f 02 	call	0x47e	; 0x47e <__negsi2>
 45c:	57 fd       	sbrc	r21, 7
 45e:	07 d0       	rcall	.+14     	; 0x46e <__divmodsi4_neg2>
 460:	0e 94 61 02 	call	0x4c2	; 0x4c2 <__udivmodsi4>
 464:	07 fc       	sbrc	r0, 7
 466:	03 d0       	rcall	.+6      	; 0x46e <__divmodsi4_neg2>
 468:	4e f4       	brtc	.+18     	; 0x47c <__divmodsi4_exit>
 46a:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__negsi2>

0000046e <__divmodsi4_neg2>:
 46e:	50 95       	com	r21
 470:	40 95       	com	r20
 472:	30 95       	com	r19
 474:	21 95       	neg	r18
 476:	3f 4f       	sbci	r19, 0xFF	; 255
 478:	4f 4f       	sbci	r20, 0xFF	; 255
 47a:	5f 4f       	sbci	r21, 0xFF	; 255

0000047c <__divmodsi4_exit>:
 47c:	08 95       	ret

0000047e <__negsi2>:
 47e:	90 95       	com	r25
 480:	80 95       	com	r24
 482:	70 95       	com	r23
 484:	61 95       	neg	r22
 486:	7f 4f       	sbci	r23, 0xFF	; 255
 488:	8f 4f       	sbci	r24, 0xFF	; 255
 48a:	9f 4f       	sbci	r25, 0xFF	; 255
 48c:	08 95       	ret

0000048e <__tablejump2__>:
 48e:	ee 0f       	add	r30, r30
 490:	ff 1f       	adc	r31, r31
 492:	05 90       	lpm	r0, Z+
 494:	f4 91       	lpm	r31, Z
 496:	e0 2d       	mov	r30, r0
 498:	09 94       	ijmp

0000049a <__udivmodhi4>:
 49a:	aa 1b       	sub	r26, r26
 49c:	bb 1b       	sub	r27, r27
 49e:	51 e1       	ldi	r21, 0x11	; 17
 4a0:	07 c0       	rjmp	.+14     	; 0x4b0 <__udivmodhi4_ep>

000004a2 <__udivmodhi4_loop>:
 4a2:	aa 1f       	adc	r26, r26
 4a4:	bb 1f       	adc	r27, r27
 4a6:	a6 17       	cp	r26, r22
 4a8:	b7 07       	cpc	r27, r23
 4aa:	10 f0       	brcs	.+4      	; 0x4b0 <__udivmodhi4_ep>
 4ac:	a6 1b       	sub	r26, r22
 4ae:	b7 0b       	sbc	r27, r23

000004b0 <__udivmodhi4_ep>:
 4b0:	88 1f       	adc	r24, r24
 4b2:	99 1f       	adc	r25, r25
 4b4:	5a 95       	dec	r21
 4b6:	a9 f7       	brne	.-22     	; 0x4a2 <__udivmodhi4_loop>
 4b8:	80 95       	com	r24
 4ba:	90 95       	com	r25
 4bc:	bc 01       	movw	r22, r24
 4be:	cd 01       	movw	r24, r26
 4c0:	08 95       	ret

000004c2 <__udivmodsi4>:
 4c2:	a1 e2       	ldi	r26, 0x21	; 33
 4c4:	1a 2e       	mov	r1, r26
 4c6:	aa 1b       	sub	r26, r26
 4c8:	bb 1b       	sub	r27, r27
 4ca:	fd 01       	movw	r30, r26
 4cc:	0d c0       	rjmp	.+26     	; 0x4e8 <__udivmodsi4_ep>

000004ce <__udivmodsi4_loop>:
 4ce:	aa 1f       	adc	r26, r26
 4d0:	bb 1f       	adc	r27, r27
 4d2:	ee 1f       	adc	r30, r30
 4d4:	ff 1f       	adc	r31, r31
 4d6:	a2 17       	cp	r26, r18
 4d8:	b3 07       	cpc	r27, r19
 4da:	e4 07       	cpc	r30, r20
 4dc:	f5 07       	cpc	r31, r21
 4de:	20 f0       	brcs	.+8      	; 0x4e8 <__udivmodsi4_ep>
 4e0:	a2 1b       	sub	r26, r18
 4e2:	b3 0b       	sbc	r27, r19
 4e4:	e4 0b       	sbc	r30, r20
 4e6:	f5 0b       	sbc	r31, r21

000004e8 <__udivmodsi4_ep>:
 4e8:	66 1f       	adc	r22, r22
 4ea:	77 1f       	adc	r23, r23
 4ec:	88 1f       	adc	r24, r24
 4ee:	99 1f       	adc	r25, r25
 4f0:	1a 94       	dec	r1
 4f2:	69 f7       	brne	.-38     	; 0x4ce <__udivmodsi4_loop>
 4f4:	60 95       	com	r22
 4f6:	70 95       	com	r23
 4f8:	80 95       	com	r24
 4fa:	90 95       	com	r25
 4fc:	9b 01       	movw	r18, r22
 4fe:	ac 01       	movw	r20, r24
 500:	bd 01       	movw	r22, r26
 502:	cf 01       	movw	r24, r30
 504:	08 95       	ret

00000506 <_exit>:
 506:	f8 94       	cli

00000508 <__stop_program>:
 508:	ff cf       	rjmp	.-2      	; 0x508 <__stop_program>
