
lab1-part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000126  0000019a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000126  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000096f  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008b5  00000000  00000000  00000bb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f2  00000000  00000000  00001468  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  0000175c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000048d  00000000  00000000  000017b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000007a  00000000  00000000  00001c3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001cb7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   8:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  10:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  14:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  18:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  1c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  20:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  24:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  28:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  2c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  30:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  34:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  38:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  3c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  40:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  44:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  48:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  4c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  50:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  54:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  58:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e6 e2       	ldi	r30, 0x26	; 38
  70:	f1 e0       	ldi	r31, 0x01	; 1
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a2 30       	cpi	r26, 0x02	; 2
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>
  7e:	0e 94 8d 00 	call	0x11a	; 0x11a <main>
  82:	0c 94 91 00 	jmp	0x122	; 0x122 <_exit>

00000086 <__bad_interrupt>:
  86:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008a <init>:

#define LCD_SEGMENT1 0b00000001 //  segment 1
#define LCD_SEGMENT2 0b00100000 //  segment 2

void init() {
	CLKPR = 0x80;
  8a:	e1 e6       	ldi	r30, 0x61	; 97
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 e8       	ldi	r24, 0x80	; 128
  90:	80 83       	st	Z, r24
	CLKPR = 0x00;
  92:	10 82       	st	Z, r1

	LCDCRB = (1 << LCDCS) | (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM2) | (1 << LCDPM1) | (1 << LCDPM0);
  94:	87 eb       	ldi	r24, 0xB7	; 183
  96:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);
  9a:	87 e0       	ldi	r24, 0x07	; 7
  9c:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__DATA_REGION_ORIGIN__+0x86>
	LCDCCR = (1 << LCDDC1) | (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1);
  a0:	8e e4       	ldi	r24, 0x4E	; 78
  a2:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__DATA_REGION_ORIGIN__+0x87>
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
  a6:	80 ec       	ldi	r24, 0xC0	; 192
  a8:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>

	// Configure bit 7 of PORTB as input and enable pull-up resistor
	DDRB &= ~(1 << PB7);
  ac:	27 98       	cbi	0x04, 7	; 4
	PORTB |= (1 << PB7);
  ae:	2f 9a       	sbi	0x05, 7	; 5
  b0:	08 95       	ret

000000b2 <toggle_lcd>:

}

// Toggle between two LCD segments
void toggle_lcd(uint8_t *current_segment) {
	if (*current_segment == LCD_SEGMENT1) {
  b2:	fc 01       	movw	r30, r24
  b4:	20 81       	ld	r18, Z
  b6:	21 30       	cpi	r18, 0x01	; 1
  b8:	69 f4       	brne	.+26     	; 0xd4 <toggle_lcd+0x22>
		*current_segment = LCD_SEGMENT2;
  ba:	20 e2       	ldi	r18, 0x20	; 32
  bc:	20 83       	st	Z, r18
		// Update to LCD segment 2
		LCDDR3 &= ~LCD_SEGMENT1;
  be:	ef ee       	ldi	r30, 0xEF	; 239
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	8e 7f       	andi	r24, 0xFE	; 254
  c6:	80 83       	st	Z, r24
		LCDDR2 = (LCDDR2 & 0xFF) | LCD_SEGMENT2;
  c8:	ee ee       	ldi	r30, 0xEE	; 238
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	80 62       	ori	r24, 0x20	; 32
  d0:	80 83       	st	Z, r24
  d2:	08 95       	ret
		} else {
		*current_segment = LCD_SEGMENT1;
  d4:	21 e0       	ldi	r18, 0x01	; 1
  d6:	fc 01       	movw	r30, r24
  d8:	20 83       	st	Z, r18
		// Update to LCD segment 1
		LCDDR2 &= ~LCD_SEGMENT2;
  da:	ee ee       	ldi	r30, 0xEE	; 238
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	8f 7d       	andi	r24, 0xDF	; 223
  e2:	80 83       	st	Z, r24
		LCDDR3 = (LCDDR3 & 0xFF) | LCD_SEGMENT1;
  e4:	ef ee       	ldi	r30, 0xEF	; 239
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	81 60       	ori	r24, 0x01	; 1
  ec:	80 83       	st	Z, r24
  ee:	08 95       	ret

000000f0 <button>:
	}
}

void button() {
	static uint8_t current_segment = LCD_SEGMENT1;
	uint8_t joystick_pressed = 0;                 
  f0:	80 e0       	ldi	r24, 0x00	; 0
				joystick_pressed = 1;

				toggle_lcd(&current_segment);
			}
			} else {
			joystick_pressed = 0;
  f2:	c0 e0       	ldi	r28, 0x00	; 0

	while (true) {
		// Check if joystick is pressed (active low, bit 7 of PINB == 0)
		if (!(PINB & (1 << PB7))) {
			if (!joystick_pressed) {
				joystick_pressed = 1;
  f4:	d1 e0       	ldi	r29, 0x01	; 1
	static uint8_t current_segment = LCD_SEGMENT1;
	uint8_t joystick_pressed = 0;                 

	while (true) {
		// Check if joystick is pressed (active low, bit 7 of PINB == 0)
		if (!(PINB & (1 << PB7))) {
  f6:	1f 99       	sbic	0x03, 7	; 3
  f8:	08 c0       	rjmp	.+16     	; 0x10a <button+0x1a>
			if (!joystick_pressed) {
  fa:	81 11       	cpse	r24, r1
  fc:	07 c0       	rjmp	.+14     	; 0x10c <button+0x1c>
				joystick_pressed = 1;

				toggle_lcd(&current_segment);
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	91 e0       	ldi	r25, 0x01	; 1
 102:	0e 94 59 00 	call	0xb2	; 0xb2 <toggle_lcd>

	while (true) {
		// Check if joystick is pressed (active low, bit 7 of PINB == 0)
		if (!(PINB & (1 << PB7))) {
			if (!joystick_pressed) {
				joystick_pressed = 1;
 106:	8d 2f       	mov	r24, r29
 108:	01 c0       	rjmp	.+2      	; 0x10c <button+0x1c>

				toggle_lcd(&current_segment);
			}
			} else {
			joystick_pressed = 0;
 10a:	8c 2f       	mov	r24, r28
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10c:	e7 ea       	ldi	r30, 0xA7	; 167
 10e:	f1 e6       	ldi	r31, 0x61	; 97
 110:	31 97       	sbiw	r30, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <button+0x20>
 114:	00 c0       	rjmp	.+0      	; 0x116 <button+0x26>
 116:	00 00       	nop
 118:	ee cf       	rjmp	.-36     	; 0xf6 <button+0x6>

0000011a <main>:
		_delay_ms(100);
	}
}

int main(void) {
	init();
 11a:	0e 94 45 00 	call	0x8a	; 0x8a <init>

	button();
 11e:	0e 94 78 00 	call	0xf0	; 0xf0 <button>

00000122 <_exit>:
 122:	f8 94       	cli

00000124 <__stop_program>:
 124:	ff cf       	rjmp	.-2      	; 0x124 <__stop_program>
