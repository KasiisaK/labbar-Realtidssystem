
lab1-part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  00000504  00000598  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000504  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800150  00800150  000005e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000618  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000658  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b89  00000000  00000000  000006a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000921  00000000  00000000  00001231  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000444  00000000  00000000  00001b52  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000bc  00000000  00000000  00001f98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004e4  00000000  00000000  00002054  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004f5  00000000  00000000  00002538  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002a2d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	7f 00       	.word	0x007f	; ????
  5e:	61 00       	.word	0x0061	; ????
  60:	64 00       	.word	0x0064	; ????
  62:	67 00       	.word	0x0067	; ????
  64:	6a 00       	.word	0x006a	; ????
  66:	6d 00       	.word	0x006d	; ????
  68:	70 00       	.word	0x0070	; ????
  6a:	73 00       	.word	0x0073	; ????
  6c:	76 00       	.word	0x0076	; ????
  6e:	79 00       	.word	0x0079	; ????

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e4 e0       	ldi	r30, 0x04	; 4
  84:	f5 e0       	ldi	r31, 0x05	; 5
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a0 35       	cpi	r26, 0x50	; 80
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a0 e5       	ldi	r26, 0x50	; 80
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a8 35       	cpi	r26, 0x58	; 88
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 0d 02 	call	0x41a	; 0x41a <main>
  a6:	0c 94 80 02 	jmp	0x500	; 0x500 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <getSegmentForChar>:
int nine[] = {0b0001, 0b0101, 0b1011, 0b0001};
int none[] = {0b0000, 0b0000, 0b0000, 0b0000};

//returns wall of data based on char input ('0' = 48 (char))
int* getSegmentForChar(char ch) {
	switch (ch) {
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	fc 01       	movw	r30, r24
  b2:	f0 97       	sbiw	r30, 0x30	; 48
  b4:	ea 30       	cpi	r30, 0x0A	; 10
  b6:	f1 05       	cpc	r31, r1
  b8:	f8 f4       	brcc	.+62     	; 0xf8 <getSegmentForChar+0x4a>
  ba:	e2 5d       	subi	r30, 0xD2	; 210
  bc:	ff 4f       	sbci	r31, 0xFF	; 255
  be:	0c 94 44 02 	jmp	0x488	; 0x488 <__tablejump2__>
		case '0': return zero;
		case '1': return one;
  c2:	80 e4       	ldi	r24, 0x40	; 64
  c4:	91 e0       	ldi	r25, 0x01	; 1
  c6:	08 95       	ret
		case '2': return two;
  c8:	88 e3       	ldi	r24, 0x38	; 56
  ca:	91 e0       	ldi	r25, 0x01	; 1
  cc:	08 95       	ret
		case '3': return three;
  ce:	80 e3       	ldi	r24, 0x30	; 48
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	08 95       	ret
		case '4': return four;
  d4:	88 e2       	ldi	r24, 0x28	; 40
  d6:	91 e0       	ldi	r25, 0x01	; 1
  d8:	08 95       	ret
		case '5': return five;
  da:	80 e2       	ldi	r24, 0x20	; 32
  dc:	91 e0       	ldi	r25, 0x01	; 1
  de:	08 95       	ret
		case '6': return six;
  e0:	88 e1       	ldi	r24, 0x18	; 24
  e2:	91 e0       	ldi	r25, 0x01	; 1
  e4:	08 95       	ret
		case '7': return seven;
  e6:	80 e1       	ldi	r24, 0x10	; 16
  e8:	91 e0       	ldi	r25, 0x01	; 1
  ea:	08 95       	ret
		case '8': return eight;
  ec:	88 e0       	ldi	r24, 0x08	; 8
  ee:	91 e0       	ldi	r25, 0x01	; 1
  f0:	08 95       	ret
		case '9': return nine;
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	91 e0       	ldi	r25, 0x01	; 1
  f6:	08 95       	ret
		default:  return none;
  f8:	80 e5       	ldi	r24, 0x50	; 80
  fa:	91 e0       	ldi	r25, 0x01	; 1
  fc:	08 95       	ret
int none[] = {0b0000, 0b0000, 0b0000, 0b0000};

//returns wall of data based on char input ('0' = 48 (char))
int* getSegmentForChar(char ch) {
	switch (ch) {
		case '0': return zero;
  fe:	88 e4       	ldi	r24, 0x48	; 72
 100:	91 e0       	ldi	r25, 0x01	; 1
		case '7': return seven;
		case '8': return eight;
		case '9': return nine;
		default:  return none;
	}
}
 102:	08 95       	ret

00000104 <init>:


void init() {
	//Clock Prescale Register "maximum speed"
	CLKPR = 0b10000000; //Clock Prescaler Change Enable
 104:	e1 e6       	ldi	r30, 0x61	; 97
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 e8       	ldi	r24, 0x80	; 128
 10a:	80 83       	st	Z, r24
	CLKPR = 0b00000000; //set 0 for sysclock
 10c:	10 82       	st	Z, r1
	//LCD(Contrast Control Register), LCD(Display Configuration)(000): 300 Î¼s, LCD(Contrast Control)(1111): 3.35 V
	LCDCCR = (0 << LCDDC0) | (0 << LCDDC1) | (0 << LCDDC2) | (1 << LCDCC0) | (1 << LCDCC1) | (1 << LCDCC2) | (1 << LCDCC3);
 10e:	8f e0       	ldi	r24, 0x0F	; 15
 110:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__DATA_REGION_ORIGIN__+0x87>
	//LCDCS: asynchronous clock, LCDMUX(11): D=1/4, B=1/3, LCD(Port Mask): 25 segments
	LCDCRB = (1 << LCDCS) | (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM2) | (1 << LCDPM1) | (1 << LCDPM0);
 114:	87 eb       	ldi	r24, 0xB7	; 183
 116:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
	//LCD(Clock Divide)(111): (D=8) 32Hz 
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);	
 11a:	87 e0       	ldi	r24, 0x07	; 7
 11c:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__DATA_REGION_ORIGIN__+0x86>
	//LCD(Control and StatusRegister A), LCD(Enable): True, LCD(Low Power Waveform): True, (no frame interrupt, no blanking)
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
 120:	80 ec       	ldi	r24, 0xC0	; 192
 122:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
 126:	08 95       	ret

00000128 <writeChar>:
}

//write a char ch at position pos
void writeChar(char ch, uint8_t pos) {
 128:	cf 93       	push	r28
	//check if outside range
	if (pos > 4 || pos < 0) return;	
 12a:	65 30       	cpi	r22, 0x05	; 5
 12c:	08 f0       	brcs	.+2      	; 0x130 <writeChar+0x8>
 12e:	e4 c0       	rjmp	.+456    	; 0x2f8 <writeChar+0x1d0>
 130:	c6 2f       	mov	r28, r22

	//get correct char data
	int* segment = getSegmentForChar(ch);
 132:	0e 94 57 00 	call	0xae	; 0xae <getSegmentForChar>
 136:	fc 01       	movw	r30, r24
	
	//chose position
	switch (pos) {
 138:	c2 30       	cpi	r28, 0x02	; 2
 13a:	09 f4       	brne	.+2      	; 0x13e <writeChar+0x16>
 13c:	67 c0       	rjmp	.+206    	; 0x20c <writeChar+0xe4>
 13e:	28 f4       	brcc	.+10     	; 0x14a <writeChar+0x22>
 140:	cc 23       	and	r28, r28
 142:	51 f0       	breq	.+20     	; 0x158 <writeChar+0x30>
 144:	c1 30       	cpi	r28, 0x01	; 1
 146:	29 f1       	breq	.+74     	; 0x192 <writeChar+0x6a>
 148:	d7 c0       	rjmp	.+430    	; 0x2f8 <writeChar+0x1d0>
 14a:	c3 30       	cpi	r28, 0x03	; 3
 14c:	09 f4       	brne	.+2      	; 0x150 <writeChar+0x28>
 14e:	7b c0       	rjmp	.+246    	; 0x246 <writeChar+0x11e>
 150:	c4 30       	cpi	r28, 0x04	; 4
 152:	09 f4       	brne	.+2      	; 0x156 <writeChar+0x2e>
 154:	b5 c0       	rjmp	.+362    	; 0x2c0 <writeChar+0x198>
 156:	d0 c0       	rjmp	.+416    	; 0x2f8 <writeChar+0x1d0>
		case 0:
			//segment start att 0, 5, 10, 15, higher 4 bits.
			//(LCDDR0 & 0xF0) clears the segment before writing 
			LCDDR0 = (LCDDR0 & 0xF0) | segment[0];
 158:	ac ee       	ldi	r26, 0xEC	; 236
 15a:	b0 e0       	ldi	r27, 0x00	; 0
 15c:	8c 91       	ld	r24, X
 15e:	80 7f       	andi	r24, 0xF0	; 240
 160:	90 81       	ld	r25, Z
 162:	89 2b       	or	r24, r25
 164:	8c 93       	st	X, r24
			LCDDR5 = (LCDDR5 & 0xF0) | segment[1];
 166:	a1 ef       	ldi	r26, 0xF1	; 241
 168:	b0 e0       	ldi	r27, 0x00	; 0
 16a:	8c 91       	ld	r24, X
 16c:	80 7f       	andi	r24, 0xF0	; 240
 16e:	92 81       	ldd	r25, Z+2	; 0x02
 170:	89 2b       	or	r24, r25
 172:	8c 93       	st	X, r24
			LCDDR10 = (LCDDR10 & 0xF0) | segment[2];
 174:	a6 ef       	ldi	r26, 0xF6	; 246
 176:	b0 e0       	ldi	r27, 0x00	; 0
 178:	8c 91       	ld	r24, X
 17a:	80 7f       	andi	r24, 0xF0	; 240
 17c:	94 81       	ldd	r25, Z+4	; 0x04
 17e:	89 2b       	or	r24, r25
 180:	8c 93       	st	X, r24
			LCDDR15 = (LCDDR15 & 0xF0) | segment[3];
 182:	ab ef       	ldi	r26, 0xFB	; 251
 184:	b0 e0       	ldi	r27, 0x00	; 0
 186:	8c 91       	ld	r24, X
 188:	80 7f       	andi	r24, 0xF0	; 240
 18a:	96 81       	ldd	r25, Z+6	; 0x06
 18c:	89 2b       	or	r24, r25
 18e:	8c 93       	st	X, r24
			break;
 190:	b3 c0       	rjmp	.+358    	; 0x2f8 <writeChar+0x1d0>
		case 1:
			//same segment just lower 4 bits
			LCDDR0 = (LCDDR0 & 0x0F) | (segment[0] << 4);
 192:	ac ee       	ldi	r26, 0xEC	; 236
 194:	b0 e0       	ldi	r27, 0x00	; 0
 196:	2c 91       	ld	r18, X
 198:	80 81       	ld	r24, Z
 19a:	91 81       	ldd	r25, Z+1	; 0x01
 19c:	82 95       	swap	r24
 19e:	92 95       	swap	r25
 1a0:	90 7f       	andi	r25, 0xF0	; 240
 1a2:	98 27       	eor	r25, r24
 1a4:	80 7f       	andi	r24, 0xF0	; 240
 1a6:	98 27       	eor	r25, r24
 1a8:	92 2f       	mov	r25, r18
 1aa:	9f 70       	andi	r25, 0x0F	; 15
 1ac:	89 2b       	or	r24, r25
 1ae:	8c 93       	st	X, r24
			LCDDR5 = (LCDDR5 & 0x0F) | (segment[1] << 4);
 1b0:	a1 ef       	ldi	r26, 0xF1	; 241
 1b2:	b0 e0       	ldi	r27, 0x00	; 0
 1b4:	2c 91       	ld	r18, X
 1b6:	82 81       	ldd	r24, Z+2	; 0x02
 1b8:	93 81       	ldd	r25, Z+3	; 0x03
 1ba:	82 95       	swap	r24
 1bc:	92 95       	swap	r25
 1be:	90 7f       	andi	r25, 0xF0	; 240
 1c0:	98 27       	eor	r25, r24
 1c2:	80 7f       	andi	r24, 0xF0	; 240
 1c4:	98 27       	eor	r25, r24
 1c6:	92 2f       	mov	r25, r18
 1c8:	9f 70       	andi	r25, 0x0F	; 15
 1ca:	89 2b       	or	r24, r25
 1cc:	8c 93       	st	X, r24
			LCDDR10 = (LCDDR10 & 0x0F) | (segment[2] << 4);
 1ce:	a6 ef       	ldi	r26, 0xF6	; 246
 1d0:	b0 e0       	ldi	r27, 0x00	; 0
 1d2:	2c 91       	ld	r18, X
 1d4:	84 81       	ldd	r24, Z+4	; 0x04
 1d6:	95 81       	ldd	r25, Z+5	; 0x05
 1d8:	82 95       	swap	r24
 1da:	92 95       	swap	r25
 1dc:	90 7f       	andi	r25, 0xF0	; 240
 1de:	98 27       	eor	r25, r24
 1e0:	80 7f       	andi	r24, 0xF0	; 240
 1e2:	98 27       	eor	r25, r24
 1e4:	92 2f       	mov	r25, r18
 1e6:	9f 70       	andi	r25, 0x0F	; 15
 1e8:	89 2b       	or	r24, r25
 1ea:	8c 93       	st	X, r24
			LCDDR15 = (LCDDR15 & 0x0F) | (segment[3] << 4);
 1ec:	ab ef       	ldi	r26, 0xFB	; 251
 1ee:	b0 e0       	ldi	r27, 0x00	; 0
 1f0:	2c 91       	ld	r18, X
 1f2:	86 81       	ldd	r24, Z+6	; 0x06
 1f4:	97 81       	ldd	r25, Z+7	; 0x07
 1f6:	82 95       	swap	r24
 1f8:	92 95       	swap	r25
 1fa:	90 7f       	andi	r25, 0xF0	; 240
 1fc:	98 27       	eor	r25, r24
 1fe:	80 7f       	andi	r24, 0xF0	; 240
 200:	98 27       	eor	r25, r24
 202:	92 2f       	mov	r25, r18
 204:	9f 70       	andi	r25, 0x0F	; 15
 206:	89 2b       	or	r24, r25
 208:	8c 93       	st	X, r24
			break;
 20a:	76 c0       	rjmp	.+236    	; 0x2f8 <writeChar+0x1d0>
		case 2:
			LCDDR1 = (LCDDR1 & 0xF0) | segment[0];
 20c:	ad ee       	ldi	r26, 0xED	; 237
 20e:	b0 e0       	ldi	r27, 0x00	; 0
 210:	8c 91       	ld	r24, X
 212:	80 7f       	andi	r24, 0xF0	; 240
 214:	90 81       	ld	r25, Z
 216:	89 2b       	or	r24, r25
 218:	8c 93       	st	X, r24
			LCDDR6 = (LCDDR6 & 0xF0) | segment[1];
 21a:	a2 ef       	ldi	r26, 0xF2	; 242
 21c:	b0 e0       	ldi	r27, 0x00	; 0
 21e:	8c 91       	ld	r24, X
 220:	80 7f       	andi	r24, 0xF0	; 240
 222:	92 81       	ldd	r25, Z+2	; 0x02
 224:	89 2b       	or	r24, r25
 226:	8c 93       	st	X, r24
			LCDDR11 = (LCDDR11 & 0xF0) | segment[2];
 228:	a7 ef       	ldi	r26, 0xF7	; 247
 22a:	b0 e0       	ldi	r27, 0x00	; 0
 22c:	8c 91       	ld	r24, X
 22e:	80 7f       	andi	r24, 0xF0	; 240
 230:	94 81       	ldd	r25, Z+4	; 0x04
 232:	89 2b       	or	r24, r25
 234:	8c 93       	st	X, r24
			LCDDR16 = (LCDDR16 & 0xF0) | segment[3];
 236:	ac ef       	ldi	r26, 0xFC	; 252
 238:	b0 e0       	ldi	r27, 0x00	; 0
 23a:	8c 91       	ld	r24, X
 23c:	80 7f       	andi	r24, 0xF0	; 240
 23e:	96 81       	ldd	r25, Z+6	; 0x06
 240:	89 2b       	or	r24, r25
 242:	8c 93       	st	X, r24
			break;
 244:	59 c0       	rjmp	.+178    	; 0x2f8 <writeChar+0x1d0>
		case 3:
			LCDDR1 = (LCDDR1 & 0x0F) | (segment[0] << 4);
 246:	ad ee       	ldi	r26, 0xED	; 237
 248:	b0 e0       	ldi	r27, 0x00	; 0
 24a:	2c 91       	ld	r18, X
 24c:	80 81       	ld	r24, Z
 24e:	91 81       	ldd	r25, Z+1	; 0x01
 250:	82 95       	swap	r24
 252:	92 95       	swap	r25
 254:	90 7f       	andi	r25, 0xF0	; 240
 256:	98 27       	eor	r25, r24
 258:	80 7f       	andi	r24, 0xF0	; 240
 25a:	98 27       	eor	r25, r24
 25c:	92 2f       	mov	r25, r18
 25e:	9f 70       	andi	r25, 0x0F	; 15
 260:	89 2b       	or	r24, r25
 262:	8c 93       	st	X, r24
			LCDDR6 = (LCDDR6 & 0x0F) | (segment[1] << 4);
 264:	a2 ef       	ldi	r26, 0xF2	; 242
 266:	b0 e0       	ldi	r27, 0x00	; 0
 268:	2c 91       	ld	r18, X
 26a:	82 81       	ldd	r24, Z+2	; 0x02
 26c:	93 81       	ldd	r25, Z+3	; 0x03
 26e:	82 95       	swap	r24
 270:	92 95       	swap	r25
 272:	90 7f       	andi	r25, 0xF0	; 240
 274:	98 27       	eor	r25, r24
 276:	80 7f       	andi	r24, 0xF0	; 240
 278:	98 27       	eor	r25, r24
 27a:	92 2f       	mov	r25, r18
 27c:	9f 70       	andi	r25, 0x0F	; 15
 27e:	89 2b       	or	r24, r25
 280:	8c 93       	st	X, r24
			LCDDR11 = (LCDDR11 & 0x0F) | (segment[2] << 4);
 282:	a7 ef       	ldi	r26, 0xF7	; 247
 284:	b0 e0       	ldi	r27, 0x00	; 0
 286:	2c 91       	ld	r18, X
 288:	84 81       	ldd	r24, Z+4	; 0x04
 28a:	95 81       	ldd	r25, Z+5	; 0x05
 28c:	82 95       	swap	r24
 28e:	92 95       	swap	r25
 290:	90 7f       	andi	r25, 0xF0	; 240
 292:	98 27       	eor	r25, r24
 294:	80 7f       	andi	r24, 0xF0	; 240
 296:	98 27       	eor	r25, r24
 298:	92 2f       	mov	r25, r18
 29a:	9f 70       	andi	r25, 0x0F	; 15
 29c:	89 2b       	or	r24, r25
 29e:	8c 93       	st	X, r24
			LCDDR16 = (LCDDR16 & 0x0F) | (segment[3] << 4);
 2a0:	ac ef       	ldi	r26, 0xFC	; 252
 2a2:	b0 e0       	ldi	r27, 0x00	; 0
 2a4:	2c 91       	ld	r18, X
 2a6:	86 81       	ldd	r24, Z+6	; 0x06
 2a8:	97 81       	ldd	r25, Z+7	; 0x07
 2aa:	82 95       	swap	r24
 2ac:	92 95       	swap	r25
 2ae:	90 7f       	andi	r25, 0xF0	; 240
 2b0:	98 27       	eor	r25, r24
 2b2:	80 7f       	andi	r24, 0xF0	; 240
 2b4:	98 27       	eor	r25, r24
 2b6:	92 2f       	mov	r25, r18
 2b8:	9f 70       	andi	r25, 0x0F	; 15
 2ba:	89 2b       	or	r24, r25
 2bc:	8c 93       	st	X, r24
			break;
 2be:	1c c0       	rjmp	.+56     	; 0x2f8 <writeChar+0x1d0>
		case 4:
			LCDDR2 = (LCDDR2 & 0xF0) | segment[0];
 2c0:	ae ee       	ldi	r26, 0xEE	; 238
 2c2:	b0 e0       	ldi	r27, 0x00	; 0
 2c4:	8c 91       	ld	r24, X
 2c6:	80 7f       	andi	r24, 0xF0	; 240
 2c8:	90 81       	ld	r25, Z
 2ca:	89 2b       	or	r24, r25
 2cc:	8c 93       	st	X, r24
			LCDDR7 = (LCDDR7 & 0xF0) | segment[1];
 2ce:	a3 ef       	ldi	r26, 0xF3	; 243
 2d0:	b0 e0       	ldi	r27, 0x00	; 0
 2d2:	8c 91       	ld	r24, X
 2d4:	80 7f       	andi	r24, 0xF0	; 240
 2d6:	92 81       	ldd	r25, Z+2	; 0x02
 2d8:	89 2b       	or	r24, r25
 2da:	8c 93       	st	X, r24
			LCDDR12 = (LCDDR12 & 0xF0) | segment[2];
 2dc:	a8 ef       	ldi	r26, 0xF8	; 248
 2de:	b0 e0       	ldi	r27, 0x00	; 0
 2e0:	8c 91       	ld	r24, X
 2e2:	80 7f       	andi	r24, 0xF0	; 240
 2e4:	94 81       	ldd	r25, Z+4	; 0x04
 2e6:	89 2b       	or	r24, r25
 2e8:	8c 93       	st	X, r24
			LCDDR17 = (LCDDR17 & 0xF0) | segment[3];
 2ea:	ad ef       	ldi	r26, 0xFD	; 253
 2ec:	b0 e0       	ldi	r27, 0x00	; 0
 2ee:	8c 91       	ld	r24, X
 2f0:	80 7f       	andi	r24, 0xF0	; 240
 2f2:	96 81       	ldd	r25, Z+6	; 0x06
 2f4:	89 2b       	or	r24, r25
 2f6:	8c 93       	st	X, r24
			break;
	}
}
 2f8:	cf 91       	pop	r28
 2fa:	08 95       	ret

000002fc <writeLong>:

//writes a number i to LCD
void writeLong(long i) {	
 2fc:	8f 92       	push	r8
 2fe:	9f 92       	push	r9
 300:	af 92       	push	r10
 302:	bf 92       	push	r11
 304:	cf 92       	push	r12
 306:	df 92       	push	r13
 308:	ef 92       	push	r14
 30a:	ff 92       	push	r15
 30c:	cf 93       	push	r28
	int pos = 4; //start writing at the rightmost pos

	//loop 5 times
	for (int count = 0; count < 5; count++) {
		//stop if number is 0.
		if (i == 0) {
 30e:	61 15       	cp	r22, r1
 310:	71 05       	cpc	r23, r1
 312:	81 05       	cpc	r24, r1
 314:	91 05       	cpc	r25, r1
 316:	b1 f4       	brne	.+44     	; 0x344 <writeLong+0x48>
 318:	2b c0       	rjmp	.+86     	; 0x370 <writeLong+0x74>
 31a:	c1 14       	cp	r12, r1
 31c:	d1 04       	cpc	r13, r1
 31e:	e1 04       	cpc	r14, r1
 320:	f1 04       	cpc	r15, r1
 322:	31 f1       	breq	.+76     	; 0x370 <writeLong+0x74>
			return;
			//print LS number
			} else {
			//extract least significant digit and remove it from i
			int digit = i % 10;
			i /= 10;
 324:	c7 01       	movw	r24, r14
 326:	b6 01       	movw	r22, r12
 328:	a5 01       	movw	r20, r10
 32a:	94 01       	movw	r18, r8
 32c:	0e 94 25 02 	call	0x44a	; 0x44a <__divmodsi4>
 330:	69 01       	movw	r12, r18
 332:	7a 01       	movw	r14, r20
 334:	86 2f       	mov	r24, r22
			//'0' is 48 in ASCI and digit ofsets to right ASCI char
			writeChar(digit + '0', pos);
 336:	6c 2f       	mov	r22, r28
 338:	80 5d       	subi	r24, 0xD0	; 208
 33a:	0e 94 94 00 	call	0x128	; 0x128 <writeChar>
 33e:	c1 50       	subi	r28, 0x01	; 1
 340:	60 f7       	brcc	.-40     	; 0x31a <writeLong+0x1e>
 342:	16 c0       	rjmp	.+44     	; 0x370 <writeLong+0x74>
			return;
			//print LS number
			} else {
			//extract least significant digit and remove it from i
			int digit = i % 10;
			i /= 10;
 344:	2a e0       	ldi	r18, 0x0A	; 10
 346:	30 e0       	ldi	r19, 0x00	; 0
 348:	40 e0       	ldi	r20, 0x00	; 0
 34a:	50 e0       	ldi	r21, 0x00	; 0
 34c:	0e 94 25 02 	call	0x44a	; 0x44a <__divmodsi4>
 350:	69 01       	movw	r12, r18
 352:	7a 01       	movw	r14, r20
 354:	86 2f       	mov	r24, r22
			//'0' is 48 in ASCI and digit ofsets to right ASCI char
			writeChar(digit + '0', pos);
 356:	64 e0       	ldi	r22, 0x04	; 4
 358:	80 5d       	subi	r24, 0xD0	; 208
 35a:	0e 94 94 00 	call	0x128	; 0x128 <writeChar>
 35e:	c3 e0       	ldi	r28, 0x03	; 3
		if (i == 0) {
			return;
			//print LS number
			} else {
			//extract least significant digit and remove it from i
			int digit = i % 10;
 360:	0f 2e       	mov	r0, r31
 362:	fa e0       	ldi	r31, 0x0A	; 10
 364:	8f 2e       	mov	r8, r31
 366:	91 2c       	mov	r9, r1
 368:	a1 2c       	mov	r10, r1
 36a:	b1 2c       	mov	r11, r1
 36c:	f0 2d       	mov	r31, r0
 36e:	d5 cf       	rjmp	.-86     	; 0x31a <writeLong+0x1e>
			//'0' is 48 in ASCI and digit ofsets to right ASCI char
			writeChar(digit + '0', pos);
		}
		pos--; //next pos
	}
}
 370:	cf 91       	pop	r28
 372:	ff 90       	pop	r15
 374:	ef 90       	pop	r14
 376:	df 90       	pop	r13
 378:	cf 90       	pop	r12
 37a:	bf 90       	pop	r11
 37c:	af 90       	pop	r10
 37e:	9f 90       	pop	r9
 380:	8f 90       	pop	r8
 382:	08 95       	ret

00000384 <isPrime>:


bool isPrime(int number)
{
 384:	fc 01       	movw	r30, r24
	//0 and 1 are not prime numbers
	if (number <= 1) return false; 
 386:	82 30       	cpi	r24, 0x02	; 2
 388:	91 05       	cpc	r25, r1
 38a:	1c f1       	brlt	.+70     	; 0x3d2 <isPrime+0x4e>

	//loop from 2 to sqrt(number)
	for (int i=2; i*i <= number; i++) 
 38c:	84 30       	cpi	r24, 0x04	; 4
 38e:	91 05       	cpc	r25, r1
 390:	14 f1       	brlt	.+68     	; 0x3d6 <isPrime+0x52>
	{
		if (number % i == 0) return false;	//divisible => not prime
 392:	81 70       	andi	r24, 0x01	; 1
 394:	90 78       	andi	r25, 0x80	; 128
 396:	99 23       	and	r25, r25
 398:	24 f4       	brge	.+8      	; 0x3a2 <isPrime+0x1e>
 39a:	01 97       	sbiw	r24, 0x01	; 1
 39c:	8e 6f       	ori	r24, 0xFE	; 254
 39e:	9f 6f       	ori	r25, 0xFF	; 255
 3a0:	01 96       	adiw	r24, 0x01	; 1
 3a2:	89 2b       	or	r24, r25
 3a4:	d1 f0       	breq	.+52     	; 0x3da <isPrime+0x56>
 3a6:	22 e0       	ldi	r18, 0x02	; 2
 3a8:	30 e0       	ldi	r19, 0x00	; 0
 3aa:	06 c0       	rjmp	.+12     	; 0x3b8 <isPrime+0x34>
 3ac:	cf 01       	movw	r24, r30
 3ae:	b9 01       	movw	r22, r18
 3b0:	0e 94 11 02 	call	0x422	; 0x422 <__divmodhi4>
 3b4:	89 2b       	or	r24, r25
 3b6:	99 f0       	breq	.+38     	; 0x3de <isPrime+0x5a>
{
	//0 and 1 are not prime numbers
	if (number <= 1) return false; 

	//loop from 2 to sqrt(number)
	for (int i=2; i*i <= number; i++) 
 3b8:	2f 5f       	subi	r18, 0xFF	; 255
 3ba:	3f 4f       	sbci	r19, 0xFF	; 255
 3bc:	22 9f       	mul	r18, r18
 3be:	c0 01       	movw	r24, r0
 3c0:	23 9f       	mul	r18, r19
 3c2:	90 0d       	add	r25, r0
 3c4:	90 0d       	add	r25, r0
 3c6:	11 24       	eor	r1, r1
 3c8:	e8 17       	cp	r30, r24
 3ca:	f9 07       	cpc	r31, r25
 3cc:	7c f7       	brge	.-34     	; 0x3ac <isPrime+0x28>
	{
		if (number % i == 0) return false;	//divisible => not prime
	}
	//is prime if no factors
	return true;
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	08 95       	ret


bool isPrime(int number)
{
	//0 and 1 are not prime numbers
	if (number <= 1) return false; 
 3d2:	80 e0       	ldi	r24, 0x00	; 0
 3d4:	08 95       	ret
	for (int i=2; i*i <= number; i++) 
	{
		if (number % i == 0) return false;	//divisible => not prime
	}
	//is prime if no factors
	return true;
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	08 95       	ret
	if (number <= 1) return false; 

	//loop from 2 to sqrt(number)
	for (int i=2; i*i <= number; i++) 
	{
		if (number % i == 0) return false;	//divisible => not prime
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	08 95       	ret
 3de:	80 e0       	ldi	r24, 0x00	; 0
	}
	//is prime if no factors
	return true;
}
 3e0:	08 95       	ret

000003e2 <primes>:

//loop through numbers, and if it is prime print to LCD
void primes() {
	long i = 1;
 3e2:	c1 2c       	mov	r12, r1
 3e4:	d1 2c       	mov	r13, r1
 3e6:	76 01       	movw	r14, r12
 3e8:	c3 94       	inc	r12
	while (true) {
		if (isPrime(i)) 
 3ea:	c6 01       	movw	r24, r12
 3ec:	0e 94 c2 01 	call	0x384	; 0x384 <isPrime>
 3f0:	88 23       	and	r24, r24
 3f2:	69 f0       	breq	.+26     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
		{
			writeLong(i);
 3f4:	c7 01       	movw	r24, r14
 3f6:	b6 01       	movw	r22, r12
 3f8:	0e 94 7e 01 	call	0x2fc	; 0x2fc <writeLong>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3fc:	2f e3       	ldi	r18, 0x3F	; 63
 3fe:	82 e4       	ldi	r24, 0x42	; 66
 400:	9f e0       	ldi	r25, 0x0F	; 15
 402:	21 50       	subi	r18, 0x01	; 1
 404:	80 40       	sbci	r24, 0x00	; 0
 406:	90 40       	sbci	r25, 0x00	; 0
 408:	e1 f7       	brne	.-8      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 40a:	00 c0       	rjmp	.+0      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 40c:	00 00       	nop
			_delay_ms(5000);
		}
		i++;
 40e:	2f ef       	ldi	r18, 0xFF	; 255
 410:	c2 1a       	sub	r12, r18
 412:	d2 0a       	sbc	r13, r18
 414:	e2 0a       	sbc	r14, r18
 416:	f2 0a       	sbc	r15, r18
	}
 418:	e8 cf       	rjmp	.-48     	; 0x3ea <primes+0x8>

0000041a <main>:
}


int main(void) {
	init();
 41a:	0e 94 82 00 	call	0x104	; 0x104 <init>
	primes();    
 41e:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <primes>

00000422 <__divmodhi4>:
 422:	97 fb       	bst	r25, 7
 424:	07 2e       	mov	r0, r23
 426:	16 f4       	brtc	.+4      	; 0x42c <__divmodhi4+0xa>
 428:	00 94       	com	r0
 42a:	07 d0       	rcall	.+14     	; 0x43a <__divmodhi4_neg1>
 42c:	77 fd       	sbrc	r23, 7
 42e:	09 d0       	rcall	.+18     	; 0x442 <__divmodhi4_neg2>
 430:	0e 94 4a 02 	call	0x494	; 0x494 <__udivmodhi4>
 434:	07 fc       	sbrc	r0, 7
 436:	05 d0       	rcall	.+10     	; 0x442 <__divmodhi4_neg2>
 438:	3e f4       	brtc	.+14     	; 0x448 <__divmodhi4_exit>

0000043a <__divmodhi4_neg1>:
 43a:	90 95       	com	r25
 43c:	81 95       	neg	r24
 43e:	9f 4f       	sbci	r25, 0xFF	; 255
 440:	08 95       	ret

00000442 <__divmodhi4_neg2>:
 442:	70 95       	com	r23
 444:	61 95       	neg	r22
 446:	7f 4f       	sbci	r23, 0xFF	; 255

00000448 <__divmodhi4_exit>:
 448:	08 95       	ret

0000044a <__divmodsi4>:
 44a:	05 2e       	mov	r0, r21
 44c:	97 fb       	bst	r25, 7
 44e:	1e f4       	brtc	.+6      	; 0x456 <__divmodsi4+0xc>
 450:	00 94       	com	r0
 452:	0e 94 3c 02 	call	0x478	; 0x478 <__negsi2>
 456:	57 fd       	sbrc	r21, 7
 458:	07 d0       	rcall	.+14     	; 0x468 <__divmodsi4_neg2>
 45a:	0e 94 5e 02 	call	0x4bc	; 0x4bc <__udivmodsi4>
 45e:	07 fc       	sbrc	r0, 7
 460:	03 d0       	rcall	.+6      	; 0x468 <__divmodsi4_neg2>
 462:	4e f4       	brtc	.+18     	; 0x476 <__divmodsi4_exit>
 464:	0c 94 3c 02 	jmp	0x478	; 0x478 <__negsi2>

00000468 <__divmodsi4_neg2>:
 468:	50 95       	com	r21
 46a:	40 95       	com	r20
 46c:	30 95       	com	r19
 46e:	21 95       	neg	r18
 470:	3f 4f       	sbci	r19, 0xFF	; 255
 472:	4f 4f       	sbci	r20, 0xFF	; 255
 474:	5f 4f       	sbci	r21, 0xFF	; 255

00000476 <__divmodsi4_exit>:
 476:	08 95       	ret

00000478 <__negsi2>:
 478:	90 95       	com	r25
 47a:	80 95       	com	r24
 47c:	70 95       	com	r23
 47e:	61 95       	neg	r22
 480:	7f 4f       	sbci	r23, 0xFF	; 255
 482:	8f 4f       	sbci	r24, 0xFF	; 255
 484:	9f 4f       	sbci	r25, 0xFF	; 255
 486:	08 95       	ret

00000488 <__tablejump2__>:
 488:	ee 0f       	add	r30, r30
 48a:	ff 1f       	adc	r31, r31
 48c:	05 90       	lpm	r0, Z+
 48e:	f4 91       	lpm	r31, Z
 490:	e0 2d       	mov	r30, r0
 492:	09 94       	ijmp

00000494 <__udivmodhi4>:
 494:	aa 1b       	sub	r26, r26
 496:	bb 1b       	sub	r27, r27
 498:	51 e1       	ldi	r21, 0x11	; 17
 49a:	07 c0       	rjmp	.+14     	; 0x4aa <__udivmodhi4_ep>

0000049c <__udivmodhi4_loop>:
 49c:	aa 1f       	adc	r26, r26
 49e:	bb 1f       	adc	r27, r27
 4a0:	a6 17       	cp	r26, r22
 4a2:	b7 07       	cpc	r27, r23
 4a4:	10 f0       	brcs	.+4      	; 0x4aa <__udivmodhi4_ep>
 4a6:	a6 1b       	sub	r26, r22
 4a8:	b7 0b       	sbc	r27, r23

000004aa <__udivmodhi4_ep>:
 4aa:	88 1f       	adc	r24, r24
 4ac:	99 1f       	adc	r25, r25
 4ae:	5a 95       	dec	r21
 4b0:	a9 f7       	brne	.-22     	; 0x49c <__udivmodhi4_loop>
 4b2:	80 95       	com	r24
 4b4:	90 95       	com	r25
 4b6:	bc 01       	movw	r22, r24
 4b8:	cd 01       	movw	r24, r26
 4ba:	08 95       	ret

000004bc <__udivmodsi4>:
 4bc:	a1 e2       	ldi	r26, 0x21	; 33
 4be:	1a 2e       	mov	r1, r26
 4c0:	aa 1b       	sub	r26, r26
 4c2:	bb 1b       	sub	r27, r27
 4c4:	fd 01       	movw	r30, r26
 4c6:	0d c0       	rjmp	.+26     	; 0x4e2 <__udivmodsi4_ep>

000004c8 <__udivmodsi4_loop>:
 4c8:	aa 1f       	adc	r26, r26
 4ca:	bb 1f       	adc	r27, r27
 4cc:	ee 1f       	adc	r30, r30
 4ce:	ff 1f       	adc	r31, r31
 4d0:	a2 17       	cp	r26, r18
 4d2:	b3 07       	cpc	r27, r19
 4d4:	e4 07       	cpc	r30, r20
 4d6:	f5 07       	cpc	r31, r21
 4d8:	20 f0       	brcs	.+8      	; 0x4e2 <__udivmodsi4_ep>
 4da:	a2 1b       	sub	r26, r18
 4dc:	b3 0b       	sbc	r27, r19
 4de:	e4 0b       	sbc	r30, r20
 4e0:	f5 0b       	sbc	r31, r21

000004e2 <__udivmodsi4_ep>:
 4e2:	66 1f       	adc	r22, r22
 4e4:	77 1f       	adc	r23, r23
 4e6:	88 1f       	adc	r24, r24
 4e8:	99 1f       	adc	r25, r25
 4ea:	1a 94       	dec	r1
 4ec:	69 f7       	brne	.-38     	; 0x4c8 <__udivmodsi4_loop>
 4ee:	60 95       	com	r22
 4f0:	70 95       	com	r23
 4f2:	80 95       	com	r24
 4f4:	90 95       	com	r25
 4f6:	9b 01       	movw	r18, r22
 4f8:	ac 01       	movw	r20, r24
 4fa:	bd 01       	movw	r22, r26
 4fc:	cf 01       	movw	r24, r30
 4fe:	08 95       	ret

00000500 <_exit>:
 500:	f8 94       	cli

00000502 <__stop_program>:
 502:	ff cf       	rjmp	.-2      	; 0x502 <__stop_program>
