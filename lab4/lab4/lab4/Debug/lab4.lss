
lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000084  00800100  00001f62  00001ff6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f62  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000035b  00800184  00800184  0000207a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000207a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000020ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000248  00000000  00000000  000020ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000029db  00000000  00000000  00002334  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000107c  00000000  00000000  00004d0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000156b  00000000  00000000  00005d8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b9c  00000000  00000000  000072f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009e8  00000000  00000000  00007e94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000026fc  00000000  00000000  0000887c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f8  00000000  00000000  0000af78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 a9 03 	jmp	0x752	; 0x752 <__vector_1>
       8:	0c 94 15 04 	jmp	0x82a	; 0x82a <__vector_2>
       c:	0c 94 81 04 	jmp	0x902	; 0x902 <__vector_3>
      10:	0c 94 ed 04 	jmp	0x9da	; 0x9da <__vector_4>
      14:	0c 94 59 05 	jmp	0xab2	; 0xab2 <__vector_5>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 30 0c 	jmp	0x1860	; 0x1860 <__vector_7>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 de 0b 	jmp	0x17bc	; 0x17bc <__vector_9>
      28:	0c 94 c5 05 	jmp	0xb8a	; 0xb8a <__vector_10>
      2c:	0c 94 31 06 	jmp	0xc62	; 0xc62 <__vector_11>
      30:	0c 94 9d 06 	jmp	0xd3a	; 0xd3a <__vector_12>
      34:	0c 94 09 07 	jmp	0xe12	; 0xe12 <__vector_13>
      38:	0c 94 75 07 	jmp	0xeea	; 0xeea <__vector_14>
      3c:	0c 94 e1 07 	jmp	0xfc2	; 0xfc2 <__vector_15>
      40:	0c 94 4d 08 	jmp	0x109a	; 0x109a <__vector_16>
      44:	0c 94 b9 08 	jmp	0x1172	; 0x1172 <__vector_17>
      48:	0c 94 25 09 	jmp	0x124a	; 0x124a <__vector_18>
      4c:	0c 94 91 09 	jmp	0x1322	; 0x1322 <__vector_19>
      50:	0c 94 fd 09 	jmp	0x13fa	; 0x13fa <__vector_20>
      54:	0c 94 69 0a 	jmp	0x14d2	; 0x14d2 <__vector_21>
      58:	0c 94 d5 0a 	jmp	0x15aa	; 0x15aa <__vector_22>
      5c:	8c 00       	.word	0x008c	; ????
      5e:	6e 00       	.word	0x006e	; ????
      60:	71 00       	.word	0x0071	; ????
      62:	74 00       	.word	0x0074	; ????
      64:	77 00       	.word	0x0077	; ????
      66:	7a 00       	.word	0x007a	; ????
      68:	7d 00       	.word	0x007d	; ????
      6a:	80 00       	.word	0x0080	; ????
      6c:	83 00       	.word	0x0083	; ????
      6e:	86 00       	.word	0x0086	; ????

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	11 e0       	ldi	r17, 0x01	; 1
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	e2 e6       	ldi	r30, 0x62	; 98
      84:	ff e1       	ldi	r31, 0x1F	; 31
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	a4 38       	cpi	r26, 0x84	; 132
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	24 e0       	ldi	r18, 0x04	; 4
      94:	a4 e8       	ldi	r26, 0x84	; 132
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	af 3d       	cpi	r26, 0xDF	; 223
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 b7 02 	call	0x56e	; 0x56e <main>
      a6:	0c 94 af 0f 	jmp	0x1f5e	; 0x1f5e <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <LCD_init>:
#include "PulseGen.h"
#include "TinyTimber.h"

void LCD_init() {
	// LCD(Contrast Control Register), LCD(Display Configuration)(000): 300 s, LCD(Contrast Control)(1111): 3.35 V
	LCDCCR = (0 << LCDDC0) | (0 << LCDDC1) | (0 << LCDDC2) | (1 << LCDCC0) | (1 << LCDCC1) | (1 << LCDCC2) | (1 << LCDCC3);
      ae:	8f e0       	ldi	r24, 0x0F	; 15
      b0:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__DATA_REGION_ORIGIN__+0x87>
	// LCDCS: asynchronous clock, LCDMUX(11): D=1/4, B=1/3, LCD(Port Mask): 25 segments
	LCDCRB = (1 << LCDCS) | (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM2) | (1 << LCDPM1) | (1 << LCDPM0);
      b4:	87 eb       	ldi	r24, 0xB7	; 183
      b6:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
	// LCD(Clock Divide)(111): (D=8) 32Hz
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);
      ba:	87 e0       	ldi	r24, 0x07	; 7
      bc:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__DATA_REGION_ORIGIN__+0x86>
	// LCD(Control and Status Register A), LCD(Enable): True, LCD(Low Power Waveform): True, (no frame interrupt, no blanking)
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
      c0:	80 ec       	ldi	r24, 0xC0	; 192
      c2:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
      c6:	08 95       	ret

000000c8 <getSegmentForChar>:
int none[] = {0b0000, 0b0000, 0b0000, 0b0000};

// Returns wall of data based on char input ('0' = 48 (char))
int* getSegmentForChar(char ch) {

	switch (ch) {
      c8:	90 e0       	ldi	r25, 0x00	; 0
      ca:	fc 01       	movw	r30, r24
      cc:	f0 97       	sbiw	r30, 0x30	; 48
      ce:	ea 30       	cpi	r30, 0x0A	; 10
      d0:	f1 05       	cpc	r31, r1
      d2:	f8 f4       	brcc	.+62     	; 0x112 <getSegmentForChar+0x4a>
      d4:	e2 5d       	subi	r30, 0xD2	; 210
      d6:	ff 4f       	sbci	r31, 0xFF	; 255
      d8:	0c 94 46 0f 	jmp	0x1e8c	; 0x1e8c <__tablejump2__>
		case '0': return zero;
		case '1': return one;
      dc:	80 e4       	ldi	r24, 0x40	; 64
      de:	91 e0       	ldi	r25, 0x01	; 1
      e0:	08 95       	ret
		case '2': return two;
      e2:	88 e3       	ldi	r24, 0x38	; 56
      e4:	91 e0       	ldi	r25, 0x01	; 1
      e6:	08 95       	ret
		case '3': return three;
      e8:	80 e3       	ldi	r24, 0x30	; 48
      ea:	91 e0       	ldi	r25, 0x01	; 1
      ec:	08 95       	ret
		case '4': return four;
      ee:	88 e2       	ldi	r24, 0x28	; 40
      f0:	91 e0       	ldi	r25, 0x01	; 1
      f2:	08 95       	ret
		case '5': return five;
      f4:	80 e2       	ldi	r24, 0x20	; 32
      f6:	91 e0       	ldi	r25, 0x01	; 1
      f8:	08 95       	ret
		case '6': return six;
      fa:	88 e1       	ldi	r24, 0x18	; 24
      fc:	91 e0       	ldi	r25, 0x01	; 1
      fe:	08 95       	ret
		case '7': return seven;
     100:	80 e1       	ldi	r24, 0x10	; 16
     102:	91 e0       	ldi	r25, 0x01	; 1
     104:	08 95       	ret
		case '8': return eight;
     106:	88 e0       	ldi	r24, 0x08	; 8
     108:	91 e0       	ldi	r25, 0x01	; 1
     10a:	08 95       	ret
		case '9': return nine;
     10c:	80 e0       	ldi	r24, 0x00	; 0
     10e:	91 e0       	ldi	r25, 0x01	; 1
     110:	08 95       	ret
		default:  return none;
     112:	84 e8       	ldi	r24, 0x84	; 132
     114:	91 e0       	ldi	r25, 0x01	; 1
     116:	08 95       	ret

// Returns wall of data based on char input ('0' = 48 (char))
int* getSegmentForChar(char ch) {

	switch (ch) {
		case '0': return zero;
     118:	88 e4       	ldi	r24, 0x48	; 72
     11a:	91 e0       	ldi	r25, 0x01	; 1
		case '7': return seven;
		case '8': return eight;
		case '9': return nine;
		default:  return none;
	}
}
     11c:	08 95       	ret

0000011e <writeChar>:

// Write a char ch at position pos
void writeChar(char ch, uint8_t pos) {
     11e:	cf 93       	push	r28
	// Check if outside range
	if (pos > 5 || pos < 0) return;	
     120:	66 30       	cpi	r22, 0x06	; 6
     122:	08 f0       	brcs	.+2      	; 0x126 <writeChar+0x8>
     124:	e4 c0       	rjmp	.+456    	; 0x2ee <writeChar+0x1d0>
     126:	c6 2f       	mov	r28, r22

	// Get correct char data
	int* segment = getSegmentForChar(ch);
     128:	0e 94 64 00 	call	0xc8	; 0xc8 <getSegmentForChar>
     12c:	fc 01       	movw	r30, r24
	
	// Chose position
	switch (pos) {
     12e:	c2 30       	cpi	r28, 0x02	; 2
     130:	09 f4       	brne	.+2      	; 0x134 <writeChar+0x16>
     132:	67 c0       	rjmp	.+206    	; 0x202 <writeChar+0xe4>
     134:	28 f4       	brcc	.+10     	; 0x140 <writeChar+0x22>
     136:	cc 23       	and	r28, r28
     138:	51 f0       	breq	.+20     	; 0x14e <writeChar+0x30>
     13a:	c1 30       	cpi	r28, 0x01	; 1
     13c:	29 f1       	breq	.+74     	; 0x188 <writeChar+0x6a>
     13e:	d7 c0       	rjmp	.+430    	; 0x2ee <writeChar+0x1d0>
     140:	c3 30       	cpi	r28, 0x03	; 3
     142:	09 f4       	brne	.+2      	; 0x146 <writeChar+0x28>
     144:	7b c0       	rjmp	.+246    	; 0x23c <writeChar+0x11e>
     146:	c4 30       	cpi	r28, 0x04	; 4
     148:	09 f4       	brne	.+2      	; 0x14c <writeChar+0x2e>
     14a:	b5 c0       	rjmp	.+362    	; 0x2b6 <writeChar+0x198>
     14c:	d0 c0       	rjmp	.+416    	; 0x2ee <writeChar+0x1d0>
		case 0:
			// Segment start at 0, 5, 10, 15, higher 4 bits.
			// (LCDDR0 & 0xF0) clears the segment before writing 
			LCDDR0 = (LCDDR0 & 0xF0) | segment[0];
     14e:	ac ee       	ldi	r26, 0xEC	; 236
     150:	b0 e0       	ldi	r27, 0x00	; 0
     152:	8c 91       	ld	r24, X
     154:	80 7f       	andi	r24, 0xF0	; 240
     156:	90 81       	ld	r25, Z
     158:	89 2b       	or	r24, r25
     15a:	8c 93       	st	X, r24
			LCDDR5 = (LCDDR5 & 0xF0) | segment[1];
     15c:	a1 ef       	ldi	r26, 0xF1	; 241
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	8c 91       	ld	r24, X
     162:	80 7f       	andi	r24, 0xF0	; 240
     164:	92 81       	ldd	r25, Z+2	; 0x02
     166:	89 2b       	or	r24, r25
     168:	8c 93       	st	X, r24
			LCDDR10 = (LCDDR10 & 0xF0) | segment[2];
     16a:	a6 ef       	ldi	r26, 0xF6	; 246
     16c:	b0 e0       	ldi	r27, 0x00	; 0
     16e:	8c 91       	ld	r24, X
     170:	80 7f       	andi	r24, 0xF0	; 240
     172:	94 81       	ldd	r25, Z+4	; 0x04
     174:	89 2b       	or	r24, r25
     176:	8c 93       	st	X, r24
			LCDDR15 = (LCDDR15 & 0xF0) | segment[3];
     178:	ab ef       	ldi	r26, 0xFB	; 251
     17a:	b0 e0       	ldi	r27, 0x00	; 0
     17c:	8c 91       	ld	r24, X
     17e:	80 7f       	andi	r24, 0xF0	; 240
     180:	96 81       	ldd	r25, Z+6	; 0x06
     182:	89 2b       	or	r24, r25
     184:	8c 93       	st	X, r24
			break;
     186:	b3 c0       	rjmp	.+358    	; 0x2ee <writeChar+0x1d0>
		case 1:
			// Same segment just lower 4 bits
			LCDDR0 = (LCDDR0 & 0x0F) | (segment[0] << 4);
     188:	ac ee       	ldi	r26, 0xEC	; 236
     18a:	b0 e0       	ldi	r27, 0x00	; 0
     18c:	2c 91       	ld	r18, X
     18e:	80 81       	ld	r24, Z
     190:	91 81       	ldd	r25, Z+1	; 0x01
     192:	82 95       	swap	r24
     194:	92 95       	swap	r25
     196:	90 7f       	andi	r25, 0xF0	; 240
     198:	98 27       	eor	r25, r24
     19a:	80 7f       	andi	r24, 0xF0	; 240
     19c:	98 27       	eor	r25, r24
     19e:	92 2f       	mov	r25, r18
     1a0:	9f 70       	andi	r25, 0x0F	; 15
     1a2:	89 2b       	or	r24, r25
     1a4:	8c 93       	st	X, r24
			LCDDR5 = (LCDDR5 & 0x0F) | (segment[1] << 4);
     1a6:	a1 ef       	ldi	r26, 0xF1	; 241
     1a8:	b0 e0       	ldi	r27, 0x00	; 0
     1aa:	2c 91       	ld	r18, X
     1ac:	82 81       	ldd	r24, Z+2	; 0x02
     1ae:	93 81       	ldd	r25, Z+3	; 0x03
     1b0:	82 95       	swap	r24
     1b2:	92 95       	swap	r25
     1b4:	90 7f       	andi	r25, 0xF0	; 240
     1b6:	98 27       	eor	r25, r24
     1b8:	80 7f       	andi	r24, 0xF0	; 240
     1ba:	98 27       	eor	r25, r24
     1bc:	92 2f       	mov	r25, r18
     1be:	9f 70       	andi	r25, 0x0F	; 15
     1c0:	89 2b       	or	r24, r25
     1c2:	8c 93       	st	X, r24
			LCDDR10 = (LCDDR10 & 0x0F) | (segment[2] << 4);
     1c4:	a6 ef       	ldi	r26, 0xF6	; 246
     1c6:	b0 e0       	ldi	r27, 0x00	; 0
     1c8:	2c 91       	ld	r18, X
     1ca:	84 81       	ldd	r24, Z+4	; 0x04
     1cc:	95 81       	ldd	r25, Z+5	; 0x05
     1ce:	82 95       	swap	r24
     1d0:	92 95       	swap	r25
     1d2:	90 7f       	andi	r25, 0xF0	; 240
     1d4:	98 27       	eor	r25, r24
     1d6:	80 7f       	andi	r24, 0xF0	; 240
     1d8:	98 27       	eor	r25, r24
     1da:	92 2f       	mov	r25, r18
     1dc:	9f 70       	andi	r25, 0x0F	; 15
     1de:	89 2b       	or	r24, r25
     1e0:	8c 93       	st	X, r24
			LCDDR15 = (LCDDR15 & 0x0F) | (segment[3] << 4);
     1e2:	ab ef       	ldi	r26, 0xFB	; 251
     1e4:	b0 e0       	ldi	r27, 0x00	; 0
     1e6:	2c 91       	ld	r18, X
     1e8:	86 81       	ldd	r24, Z+6	; 0x06
     1ea:	97 81       	ldd	r25, Z+7	; 0x07
     1ec:	82 95       	swap	r24
     1ee:	92 95       	swap	r25
     1f0:	90 7f       	andi	r25, 0xF0	; 240
     1f2:	98 27       	eor	r25, r24
     1f4:	80 7f       	andi	r24, 0xF0	; 240
     1f6:	98 27       	eor	r25, r24
     1f8:	92 2f       	mov	r25, r18
     1fa:	9f 70       	andi	r25, 0x0F	; 15
     1fc:	89 2b       	or	r24, r25
     1fe:	8c 93       	st	X, r24
			break;
     200:	76 c0       	rjmp	.+236    	; 0x2ee <writeChar+0x1d0>
		case 2:
			LCDDR1 = (LCDDR1 & 0xF0) | segment[0];
     202:	ad ee       	ldi	r26, 0xED	; 237
     204:	b0 e0       	ldi	r27, 0x00	; 0
     206:	8c 91       	ld	r24, X
     208:	80 7f       	andi	r24, 0xF0	; 240
     20a:	90 81       	ld	r25, Z
     20c:	89 2b       	or	r24, r25
     20e:	8c 93       	st	X, r24
			LCDDR6 = (LCDDR6 & 0xF0) | segment[1];
     210:	a2 ef       	ldi	r26, 0xF2	; 242
     212:	b0 e0       	ldi	r27, 0x00	; 0
     214:	8c 91       	ld	r24, X
     216:	80 7f       	andi	r24, 0xF0	; 240
     218:	92 81       	ldd	r25, Z+2	; 0x02
     21a:	89 2b       	or	r24, r25
     21c:	8c 93       	st	X, r24
			LCDDR11 = (LCDDR11 & 0xF0) | segment[2];
     21e:	a7 ef       	ldi	r26, 0xF7	; 247
     220:	b0 e0       	ldi	r27, 0x00	; 0
     222:	8c 91       	ld	r24, X
     224:	80 7f       	andi	r24, 0xF0	; 240
     226:	94 81       	ldd	r25, Z+4	; 0x04
     228:	89 2b       	or	r24, r25
     22a:	8c 93       	st	X, r24
			LCDDR16 = (LCDDR16 & 0xF0) | segment[3];
     22c:	ac ef       	ldi	r26, 0xFC	; 252
     22e:	b0 e0       	ldi	r27, 0x00	; 0
     230:	8c 91       	ld	r24, X
     232:	80 7f       	andi	r24, 0xF0	; 240
     234:	96 81       	ldd	r25, Z+6	; 0x06
     236:	89 2b       	or	r24, r25
     238:	8c 93       	st	X, r24
			break;
     23a:	59 c0       	rjmp	.+178    	; 0x2ee <writeChar+0x1d0>
		case 3:
			LCDDR1 = (LCDDR1 & 0x0F) | (segment[0] << 4);
     23c:	ad ee       	ldi	r26, 0xED	; 237
     23e:	b0 e0       	ldi	r27, 0x00	; 0
     240:	2c 91       	ld	r18, X
     242:	80 81       	ld	r24, Z
     244:	91 81       	ldd	r25, Z+1	; 0x01
     246:	82 95       	swap	r24
     248:	92 95       	swap	r25
     24a:	90 7f       	andi	r25, 0xF0	; 240
     24c:	98 27       	eor	r25, r24
     24e:	80 7f       	andi	r24, 0xF0	; 240
     250:	98 27       	eor	r25, r24
     252:	92 2f       	mov	r25, r18
     254:	9f 70       	andi	r25, 0x0F	; 15
     256:	89 2b       	or	r24, r25
     258:	8c 93       	st	X, r24
			LCDDR6 = (LCDDR6 & 0x0F) | (segment[1] << 4);
     25a:	a2 ef       	ldi	r26, 0xF2	; 242
     25c:	b0 e0       	ldi	r27, 0x00	; 0
     25e:	2c 91       	ld	r18, X
     260:	82 81       	ldd	r24, Z+2	; 0x02
     262:	93 81       	ldd	r25, Z+3	; 0x03
     264:	82 95       	swap	r24
     266:	92 95       	swap	r25
     268:	90 7f       	andi	r25, 0xF0	; 240
     26a:	98 27       	eor	r25, r24
     26c:	80 7f       	andi	r24, 0xF0	; 240
     26e:	98 27       	eor	r25, r24
     270:	92 2f       	mov	r25, r18
     272:	9f 70       	andi	r25, 0x0F	; 15
     274:	89 2b       	or	r24, r25
     276:	8c 93       	st	X, r24
			LCDDR11 = (LCDDR11 & 0x0F) | (segment[2] << 4);
     278:	a7 ef       	ldi	r26, 0xF7	; 247
     27a:	b0 e0       	ldi	r27, 0x00	; 0
     27c:	2c 91       	ld	r18, X
     27e:	84 81       	ldd	r24, Z+4	; 0x04
     280:	95 81       	ldd	r25, Z+5	; 0x05
     282:	82 95       	swap	r24
     284:	92 95       	swap	r25
     286:	90 7f       	andi	r25, 0xF0	; 240
     288:	98 27       	eor	r25, r24
     28a:	80 7f       	andi	r24, 0xF0	; 240
     28c:	98 27       	eor	r25, r24
     28e:	92 2f       	mov	r25, r18
     290:	9f 70       	andi	r25, 0x0F	; 15
     292:	89 2b       	or	r24, r25
     294:	8c 93       	st	X, r24
			LCDDR16 = (LCDDR16 & 0x0F) | (segment[3] << 4);
     296:	ac ef       	ldi	r26, 0xFC	; 252
     298:	b0 e0       	ldi	r27, 0x00	; 0
     29a:	2c 91       	ld	r18, X
     29c:	86 81       	ldd	r24, Z+6	; 0x06
     29e:	97 81       	ldd	r25, Z+7	; 0x07
     2a0:	82 95       	swap	r24
     2a2:	92 95       	swap	r25
     2a4:	90 7f       	andi	r25, 0xF0	; 240
     2a6:	98 27       	eor	r25, r24
     2a8:	80 7f       	andi	r24, 0xF0	; 240
     2aa:	98 27       	eor	r25, r24
     2ac:	92 2f       	mov	r25, r18
     2ae:	9f 70       	andi	r25, 0x0F	; 15
     2b0:	89 2b       	or	r24, r25
     2b2:	8c 93       	st	X, r24
			break;
     2b4:	1c c0       	rjmp	.+56     	; 0x2ee <writeChar+0x1d0>
		case 4:
			LCDDR2 = (LCDDR2 & 0xF0) | segment[0];
     2b6:	ae ee       	ldi	r26, 0xEE	; 238
     2b8:	b0 e0       	ldi	r27, 0x00	; 0
     2ba:	8c 91       	ld	r24, X
     2bc:	80 7f       	andi	r24, 0xF0	; 240
     2be:	90 81       	ld	r25, Z
     2c0:	89 2b       	or	r24, r25
     2c2:	8c 93       	st	X, r24
			LCDDR7 = (LCDDR7 & 0xF0) | segment[1];
     2c4:	a3 ef       	ldi	r26, 0xF3	; 243
     2c6:	b0 e0       	ldi	r27, 0x00	; 0
     2c8:	8c 91       	ld	r24, X
     2ca:	80 7f       	andi	r24, 0xF0	; 240
     2cc:	92 81       	ldd	r25, Z+2	; 0x02
     2ce:	89 2b       	or	r24, r25
     2d0:	8c 93       	st	X, r24
			LCDDR12 = (LCDDR12 & 0xF0) | segment[2];
     2d2:	a8 ef       	ldi	r26, 0xF8	; 248
     2d4:	b0 e0       	ldi	r27, 0x00	; 0
     2d6:	8c 91       	ld	r24, X
     2d8:	80 7f       	andi	r24, 0xF0	; 240
     2da:	94 81       	ldd	r25, Z+4	; 0x04
     2dc:	89 2b       	or	r24, r25
     2de:	8c 93       	st	X, r24
			LCDDR17 = (LCDDR17 & 0xF0) | segment[3];
     2e0:	ad ef       	ldi	r26, 0xFD	; 253
     2e2:	b0 e0       	ldi	r27, 0x00	; 0
     2e4:	8c 91       	ld	r24, X
     2e6:	80 7f       	andi	r24, 0xF0	; 240
     2e8:	96 81       	ldd	r25, Z+6	; 0x06
     2ea:	89 2b       	or	r24, r25
     2ec:	8c 93       	st	X, r24
			break;
	}
}
     2ee:	cf 91       	pop	r28
     2f0:	08 95       	ret

000002f2 <printAt>:

void printAt(long num, int pos) {
     2f2:	8f 92       	push	r8
     2f4:	9f 92       	push	r9
     2f6:	af 92       	push	r10
     2f8:	bf 92       	push	r11
     2fa:	cf 92       	push	r12
     2fc:	df 92       	push	r13
     2fe:	ef 92       	push	r14
     300:	ff 92       	push	r15
     302:	cf 93       	push	r28
     304:	df 93       	push	r29
     306:	4b 01       	movw	r8, r22
     308:	5c 01       	movw	r10, r24
     30a:	ea 01       	movw	r28, r20
	writeChar((num % 100) / 10 + '0', pos);
     30c:	24 e6       	ldi	r18, 0x64	; 100
     30e:	30 e0       	ldi	r19, 0x00	; 0
     310:	40 e0       	ldi	r20, 0x00	; 0
     312:	50 e0       	ldi	r21, 0x00	; 0
     314:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <__divmodsi4>
     318:	0f 2e       	mov	r0, r31
     31a:	fa e0       	ldi	r31, 0x0A	; 10
     31c:	cf 2e       	mov	r12, r31
     31e:	d1 2c       	mov	r13, r1
     320:	e1 2c       	mov	r14, r1
     322:	f1 2c       	mov	r15, r1
     324:	f0 2d       	mov	r31, r0
     326:	a7 01       	movw	r20, r14
     328:	96 01       	movw	r18, r12
     32a:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <__divmodsi4>
     32e:	6c 2f       	mov	r22, r28
     330:	80 e3       	ldi	r24, 0x30	; 48
     332:	82 0f       	add	r24, r18
     334:	0e 94 8f 00 	call	0x11e	; 0x11e <writeChar>
	pos++;
	writeChar(num % 10 + '0', pos);
     338:	21 96       	adiw	r28, 0x01	; 1
     33a:	c5 01       	movw	r24, r10
     33c:	b4 01       	movw	r22, r8
     33e:	a7 01       	movw	r20, r14
     340:	96 01       	movw	r18, r12
     342:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <__divmodsi4>
     346:	86 2f       	mov	r24, r22
     348:	6c 2f       	mov	r22, r28
     34a:	80 5d       	subi	r24, 0xD0	; 208
     34c:	0e 94 8f 00 	call	0x11e	; 0x11e <writeChar>
}
     350:	df 91       	pop	r29
     352:	cf 91       	pop	r28
     354:	ff 90       	pop	r15
     356:	ef 90       	pop	r14
     358:	df 90       	pop	r13
     35a:	cf 90       	pop	r12
     35c:	bf 90       	pop	r11
     35e:	af 90       	pop	r10
     360:	9f 90       	pop	r9
     362:	8f 90       	pop	r8
     364:	08 95       	ret

00000366 <updateDisplay>:
void saveRestore(GUI *self) {
	if (SYNC(self->activeGen, getFrequency, 0) == 0) {
		SYNC(self->activeGen, restore, 0);
		} else {
		SYNC(self->activeGen, save, 0);
		SYNC(self->activeGen, setFrequency, 0);
     366:	0f 93       	push	r16
     368:	1f 93       	push	r17
     36a:	cf 93       	push	r28
     36c:	df 93       	push	r29
     36e:	ec 01       	movw	r28, r24
	}
     370:	40 e0       	ldi	r20, 0x00	; 0
     372:	50 e0       	ldi	r21, 0x00	; 0
     374:	6f ed       	ldi	r22, 0xDF	; 223
     376:	72 e0       	ldi	r23, 0x02	; 2
     378:	8c 81       	ldd	r24, Y+4	; 0x04
     37a:	9d 81       	ldd	r25, Y+5	; 0x05
     37c:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <sync>
     380:	8c 01       	movw	r16, r24
	ASYNC(self, updateDisplay, 0);
     382:	40 e0       	ldi	r20, 0x00	; 0
     384:	50 e0       	ldi	r21, 0x00	; 0
     386:	6f ed       	ldi	r22, 0xDF	; 223
     388:	72 e0       	ldi	r23, 0x02	; 2
     38a:	8e 81       	ldd	r24, Y+6	; 0x06
     38c:	9f 81       	ldd	r25, Y+7	; 0x07
     38e:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <sync>
     392:	ec 01       	movw	r28, r24
}
     394:	b8 01       	movw	r22, r16
     396:	11 0f       	add	r17, r17
     398:	88 0b       	sbc	r24, r24
     39a:	99 0b       	sbc	r25, r25
     39c:	40 e0       	ldi	r20, 0x00	; 0
     39e:	50 e0       	ldi	r21, 0x00	; 0
     3a0:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printAt>

     3a4:	be 01       	movw	r22, r28
     3a6:	dd 0f       	add	r29, r29
     3a8:	88 0b       	sbc	r24, r24
     3aa:	99 0b       	sbc	r25, r25
     3ac:	43 e0       	ldi	r20, 0x03	; 3
     3ae:	50 e0       	ldi	r21, 0x00	; 0
     3b0:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printAt>
void updateDisplay(GUI *self) {
     3b4:	df 91       	pop	r29
     3b6:	cf 91       	pop	r28
     3b8:	1f 91       	pop	r17
     3ba:	0f 91       	pop	r16
     3bc:	08 95       	ret

000003be <swithToLeftGen>:
	pos++;
	writeChar(num % 10 + '0', pos);
}

void activeGenIndicator(GUI *self) {
	// Clear 1 and 2
     3be:	fc 01       	movw	r30, r24
     3c0:	24 81       	ldd	r18, Z+4	; 0x04
     3c2:	35 81       	ldd	r19, Z+5	; 0x05
     3c4:	31 87       	std	Z+9, r19	; 0x09
     3c6:	20 87       	std	Z+8, r18	; 0x08
	LCDDR0 &= ~(0b01000100);
	//turn on 1 or 2
     3c8:	ec ee       	ldi	r30, 0xEC	; 236
     3ca:	f0 e0       	ldi	r31, 0x00	; 0
     3cc:	80 81       	ld	r24, Z
     3ce:	8b 7b       	andi	r24, 0xBB	; 187
     3d0:	80 83       	st	Z, r24
	if (self->activeGen == self->gen1) {
		LCDDR0 |= 0b00000100;
     3d2:	80 81       	ld	r24, Z
     3d4:	84 60       	ori	r24, 0x04	; 4
     3d6:	80 83       	st	Z, r24
     3d8:	08 95       	ret

000003da <swithToRightGen>:
	} else {
		LCDDR0 |= 0b01000000;
	}
}
     3da:	fc 01       	movw	r30, r24
     3dc:	26 81       	ldd	r18, Z+6	; 0x06
     3de:	37 81       	ldd	r19, Z+7	; 0x07
     3e0:	31 87       	std	Z+9, r19	; 0x09
     3e2:	20 87       	std	Z+8, r18	; 0x08

void swithToLeftGen(GUI *self) {
     3e4:	ec ee       	ldi	r30, 0xEC	; 236
     3e6:	f0 e0       	ldi	r31, 0x00	; 0
     3e8:	80 81       	ld	r24, Z
     3ea:	8b 7b       	andi	r24, 0xBB	; 187
     3ec:	80 83       	st	Z, r24
	self->activeGen = self->gen1;
	ASYNC(self, updateDisplay, 0);
     3ee:	80 81       	ld	r24, Z
     3f0:	80 64       	ori	r24, 0x40	; 64
     3f2:	80 83       	st	Z, r24
     3f4:	08 95       	ret

000003f6 <adjustFrequency>:
}

void swithToRightGen(GUI *self) {
     3f6:	cf 92       	push	r12
     3f8:	df 92       	push	r13
     3fa:	ef 92       	push	r14
     3fc:	ff 92       	push	r15
     3fe:	0f 93       	push	r16
     400:	1f 93       	push	r17
     402:	cf 93       	push	r28
     404:	df 93       	push	r29
     406:	8c 01       	movw	r16, r24
     408:	eb 01       	movw	r28, r22
	self->activeGen = self->gen2;
	ASYNC(self, updateDisplay, 0);
     40a:	40 e0       	ldi	r20, 0x00	; 0
     40c:	50 e0       	ldi	r21, 0x00	; 0
     40e:	6f ed       	ldi	r22, 0xDF	; 223
     410:	72 e0       	ldi	r23, 0x02	; 2
     412:	fc 01       	movw	r30, r24
     414:	80 85       	ldd	r24, Z+8	; 0x08
     416:	91 85       	ldd	r25, Z+9	; 0x09
     418:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <sync>
     41c:	ac 01       	movw	r20, r24
     41e:	4c 0f       	add	r20, r28
     420:	5d 1f       	adc	r21, r29
}

void adjustFrequency(GUI *self, int delta) {
     422:	55 23       	and	r21, r21
     424:	14 f4       	brge	.+4      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     426:	40 e0       	ldi	r20, 0x00	; 0
     428:	50 e0       	ldi	r21, 0x00	; 0
     42a:	6f ec       	ldi	r22, 0xCF	; 207
     42c:	72 e0       	ldi	r23, 0x02	; 2
     42e:	f8 01       	movw	r30, r16
     430:	80 85       	ldd	r24, Z+8	; 0x08
     432:	91 85       	ldd	r25, Z+9	; 0x09
     434:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <sync>
	// Get right target gen
     438:	c1 2c       	mov	r12, r1
     43a:	d1 2c       	mov	r13, r1
     43c:	0f 2e       	mov	r0, r31
     43e:	f3 eb       	ldi	r31, 0xB3	; 179
     440:	ef 2e       	mov	r14, r31
     442:	f1 e0       	ldi	r31, 0x01	; 1
     444:	ff 2e       	mov	r15, r31
     446:	f0 2d       	mov	r31, r0
     448:	20 e0       	ldi	r18, 0x00	; 0
     44a:	30 e0       	ldi	r19, 0x00	; 0
     44c:	a9 01       	movw	r20, r18
     44e:	60 e0       	ldi	r22, 0x00	; 0
     450:	70 e0       	ldi	r23, 0x00	; 0
     452:	cb 01       	movw	r24, r22
     454:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <async>
	int newFreq = SYNC(self->activeGen, getFrequency, 0) + delta;
     458:	df 91       	pop	r29
     45a:	cf 91       	pop	r28
     45c:	1f 91       	pop	r17
     45e:	0f 91       	pop	r16
     460:	ff 90       	pop	r15
     462:	ef 90       	pop	r14
     464:	df 90       	pop	r13
     466:	cf 90       	pop	r12
     468:	08 95       	ret

0000046a <saveRestore>:
	if (newFreq < 0) newFreq = 0;
	// Update everything
     46a:	cf 92       	push	r12
     46c:	df 92       	push	r13
     46e:	ef 92       	push	r14
     470:	ff 92       	push	r15
     472:	0f 93       	push	r16
     474:	1f 93       	push	r17
     476:	cf 93       	push	r28
     478:	df 93       	push	r29
     47a:	ec 01       	movw	r28, r24
	SYNC(self->activeGen, setFrequency, newFreq);
     47c:	40 e0       	ldi	r20, 0x00	; 0
     47e:	50 e0       	ldi	r21, 0x00	; 0
     480:	6f ed       	ldi	r22, 0xDF	; 223
     482:	72 e0       	ldi	r23, 0x02	; 2
     484:	88 85       	ldd	r24, Y+8	; 0x08
     486:	99 85       	ldd	r25, Y+9	; 0x09
     488:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <sync>
     48c:	89 2b       	or	r24, r25
     48e:	49 f4       	brne	.+18     	; 0x4a2 <saveRestore+0x38>
	ASYNC(self, updateDisplay, 0);
     490:	40 e0       	ldi	r20, 0x00	; 0
     492:	50 e0       	ldi	r21, 0x00	; 0
     494:	69 ed       	ldi	r22, 0xD9	; 217
     496:	72 e0       	ldi	r23, 0x02	; 2
     498:	88 85       	ldd	r24, Y+8	; 0x08
     49a:	99 85       	ldd	r25, Y+9	; 0x09
     49c:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <sync>
     4a0:	10 c0       	rjmp	.+32     	; 0x4c2 <saveRestore+0x58>
}

     4a2:	40 e0       	ldi	r20, 0x00	; 0
     4a4:	50 e0       	ldi	r21, 0x00	; 0
     4a6:	63 ed       	ldi	r22, 0xD3	; 211
     4a8:	72 e0       	ldi	r23, 0x02	; 2
     4aa:	88 85       	ldd	r24, Y+8	; 0x08
     4ac:	99 85       	ldd	r25, Y+9	; 0x09
     4ae:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <sync>
void saveRestore(GUI *self) {
     4b2:	40 e0       	ldi	r20, 0x00	; 0
     4b4:	50 e0       	ldi	r21, 0x00	; 0
     4b6:	6f ec       	ldi	r22, 0xCF	; 207
     4b8:	72 e0       	ldi	r23, 0x02	; 2
     4ba:	88 85       	ldd	r24, Y+8	; 0x08
     4bc:	99 85       	ldd	r25, Y+9	; 0x09
     4be:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <sync>
	if (SYNC(self->activeGen, getFrequency, 0) == 0) {
		SYNC(self->activeGen, restore, 0);
     4c2:	c1 2c       	mov	r12, r1
     4c4:	d1 2c       	mov	r13, r1
     4c6:	0f 2e       	mov	r0, r31
     4c8:	f3 eb       	ldi	r31, 0xB3	; 179
     4ca:	ef 2e       	mov	r14, r31
     4cc:	f1 e0       	ldi	r31, 0x01	; 1
     4ce:	ff 2e       	mov	r15, r31
     4d0:	f0 2d       	mov	r31, r0
     4d2:	8e 01       	movw	r16, r28
     4d4:	20 e0       	ldi	r18, 0x00	; 0
     4d6:	30 e0       	ldi	r19, 0x00	; 0
     4d8:	a9 01       	movw	r20, r18
     4da:	60 e0       	ldi	r22, 0x00	; 0
     4dc:	70 e0       	ldi	r23, 0x00	; 0
     4de:	cb 01       	movw	r24, r22
     4e0:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <async>
		} else {
     4e4:	df 91       	pop	r29
     4e6:	cf 91       	pop	r28
     4e8:	1f 91       	pop	r17
     4ea:	0f 91       	pop	r16
     4ec:	ff 90       	pop	r15
     4ee:	ef 90       	pop	r14
     4f0:	df 90       	pop	r13
     4f2:	cf 90       	pop	r12
     4f4:	08 95       	ret

000004f6 <joystickInit>:
#include "PulseGen.h"


void joystickInit() {
    // Set 7 to 3 as inputs
    PORTB |= (1 << PB7) | (1 << PB6) | (1 << PB5) | (1 << PB4) | (1 << PB3);
     4f6:	85 b1       	in	r24, 0x05	; 5
     4f8:	88 6f       	ori	r24, 0xF8	; 248
     4fa:	85 b9       	out	0x05, r24	; 5
    // Turn on interupts for 0 to 7
    EIMSK |= (1 << PCINT15);
     4fc:	ef 9a       	sbi	0x1d, 7	; 29

    // Deffine interupts from PB7-3
    PCMSK1 |= (1 << PCINT15) | (1 << PCINT14) | (1 << PCINT12) | (1 << PCINT11) | (1 << PCINT10);
     4fe:	ec e6       	ldi	r30, 0x6C	; 108
     500:	f0 e0       	ldi	r31, 0x00	; 0
     502:	80 81       	ld	r24, Z
     504:	8c 6d       	ori	r24, 0xDC	; 220
     506:	80 83       	st	Z, r24
     508:	08 95       	ret

0000050a <joysticckInteruptHandler>:
}


// Joystick input handler
void joysticckInteruptHandler(JoystickHandler *self) { 
     50a:	cf 93       	push	r28
     50c:	df 93       	push	r29
     50e:	ec 01       	movw	r28, r24
    // Down
    if (!(PINB & (1 << PB7))) {
     510:	1f 99       	sbic	0x03, 7	; 3
     512:	06 c0       	rjmp	.+12     	; 0x520 <joysticckInteruptHandler+0x16>
        adjustFrequency(self->gui, 1);
     514:	61 e0       	ldi	r22, 0x01	; 1
     516:	70 e0       	ldi	r23, 0x00	; 0
     518:	8c 81       	ldd	r24, Y+4	; 0x04
     51a:	9d 81       	ldd	r25, Y+5	; 0x05
     51c:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <adjustFrequency>
    }
    // Up
    if (!(PINB & (1 << PB6))) {
     520:	1e 99       	sbic	0x03, 6	; 3
     522:	06 c0       	rjmp	.+12     	; 0x530 <joysticckInteruptHandler+0x26>
        adjustFrequency(self->gui, -1);
     524:	6f ef       	ldi	r22, 0xFF	; 255
     526:	7f ef       	ldi	r23, 0xFF	; 255
     528:	8c 81       	ldd	r24, Y+4	; 0x04
     52a:	9d 81       	ldd	r25, Y+5	; 0x05
     52c:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <adjustFrequency>
    }
    // Left
    if (!(PINB & (1 << PB5))) {
     530:	1d 99       	sbic	0x03, 5	; 3
     532:	04 c0       	rjmp	.+8      	; 0x53c <joysticckInteruptHandler+0x32>
        swithToLeftGen(self->gui);
     534:	8c 81       	ldd	r24, Y+4	; 0x04
     536:	9d 81       	ldd	r25, Y+5	; 0x05
     538:	0e 94 df 01 	call	0x3be	; 0x3be <swithToLeftGen>
    }
    // Right
    if (!(PINB & (1 << PB4))) {
     53c:	1c 99       	sbic	0x03, 4	; 3
     53e:	04 c0       	rjmp	.+8      	; 0x548 <joysticckInteruptHandler+0x3e>
        swithToRightGen(self->gui);
     540:	8c 81       	ldd	r24, Y+4	; 0x04
     542:	9d 81       	ldd	r25, Y+5	; 0x05
     544:	0e 94 ed 01 	call	0x3da	; 0x3da <swithToRightGen>
    }
    // CLick
    if (!(PINB & (1 << PB3))) {
     548:	1b 99       	sbic	0x03, 3	; 3
     54a:	04 c0       	rjmp	.+8      	; 0x554 <joysticckInteruptHandler+0x4a>
        saveRestore(self->gui);
     54c:	8c 81       	ldd	r24, Y+4	; 0x04
     54e:	9d 81       	ldd	r25, Y+5	; 0x05
     550:	0e 94 35 02 	call	0x46a	; 0x46a <saveRestore>
    }
     554:	df 91       	pop	r29
     556:	cf 91       	pop	r28
     558:	08 95       	ret

0000055a <sysInit>:
GUI gui = initGUI(&gen1, &gen2);
JoystickHandler joystick = initJoystickHandler(&gui);

void sysInit(){
    // Clock Prescale Register "maximum speed"
	CLKPR = 0b10000000; // Clock Prescaler Change Enable
     55a:	e1 e6       	ldi	r30, 0x61	; 97
     55c:	f0 e0       	ldi	r31, 0x00	; 0
     55e:	80 e8       	ldi	r24, 0x80	; 128
     560:	80 83       	st	Z, r24
	CLKPR = 0b00000000; // Set 0 for sysclock
     562:	10 82       	st	Z, r1
     564:	08 95       	ret

00000566 <pinOutputInit>:
}

void pinOutputInit(){
    // Initialize Port E as output for PE4 and PE6
	DDRE |= (1 << PE4) | (1 << PE6);
     566:	8d b1       	in	r24, 0x0d	; 13
     568:	80 65       	ori	r24, 0x50	; 80
     56a:	8d b9       	out	0x0d, r24	; 13
     56c:	08 95       	ret

0000056e <main>:
}


int main() {
    sysInit();
     56e:	0e 94 ad 02 	call	0x55a	; 0x55a <sysInit>
    pinOutputInit();
     572:	0e 94 b3 02 	call	0x566	; 0x566 <pinOutputInit>
    joystickInit();
     576:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <joystickInit>
    LCD_init();
     57a:	0e 94 57 00 	call	0xae	; 0xae <LCD_init>
	//LCDDR0 = 0b01000100;
	//LCDDR0 = 0b01000100;
	
    // Instal interupt handler
    //when the joystick's vertical state changes
    INSTALL(&joystick, joysticckInteruptHandler, IRQ_PCINT1);
     57e:	42 e0       	ldi	r20, 0x02	; 2
     580:	65 e8       	ldi	r22, 0x85	; 133
     582:	72 e0       	ldi	r23, 0x02	; 2
     584:	80 e5       	ldi	r24, 0x50	; 80
     586:	91 e0       	ldi	r25, 0x01	; 1
     588:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <install>
    //when the joystick's horizontal (minus middle) state changes
    
    // Start kernel
    return TINYTIMBER(&gui, NULL, NULL);
     58c:	40 e0       	ldi	r20, 0x00	; 0
     58e:	50 e0       	ldi	r21, 0x00	; 0
     590:	60 e0       	ldi	r22, 0x00	; 0
     592:	70 e0       	ldi	r23, 0x00	; 0
     594:	86 e5       	ldi	r24, 0x56	; 86
     596:	91 e0       	ldi	r25, 0x01	; 1
     598:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <tinytimber>
}
     59c:	08 95       	ret

0000059e <setFrequency>:
#include "PortWrite.h"
#include "TinyTimber.h"


void setFrequency(PulseGen *self, int freq) {
	self->frequency = freq;
     59e:	fc 01       	movw	r30, r24
     5a0:	71 87       	std	Z+9, r23	; 0x09
     5a2:	60 87       	std	Z+8, r22	; 0x08
     5a4:	08 95       	ret

000005a6 <save>:
    }
}

// Saves the freq
void save(PulseGen *self) {
	self->saved_freq = self->frequency;
     5a6:	fc 01       	movw	r30, r24
     5a8:	20 85       	ldd	r18, Z+8	; 0x08
     5aa:	31 85       	ldd	r19, Z+9	; 0x09
     5ac:	33 87       	std	Z+11, r19	; 0x0b
     5ae:	22 87       	std	Z+10, r18	; 0x0a
     5b0:	08 95       	ret

000005b2 <restore>:
}

// Restores freq to last saved
void restore(PulseGen *self) {
	self->frequency = self->saved_freq;
     5b2:	fc 01       	movw	r30, r24
     5b4:	22 85       	ldd	r18, Z+10	; 0x0a
     5b6:	33 85       	ldd	r19, Z+11	; 0x0b
     5b8:	31 87       	std	Z+9, r19	; 0x09
     5ba:	20 87       	std	Z+8, r18	; 0x08
     5bc:	08 95       	ret

000005be <getFrequency>:
}

int getFrequency(PulseGen *self) {
	return self->frequency;
}
     5be:	fc 01       	movw	r30, r24
     5c0:	80 85       	ldd	r24, Z+8	; 0x08
     5c2:	91 85       	ldd	r25, Z+9	; 0x09
     5c4:	08 95       	ret

000005c6 <initialize>:
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
}
     5c6:	cf 93       	push	r28
     5c8:	df 93       	push	r29
     5ca:	00 d0       	rcall	.+0      	; 0x5cc <initialize+0x6>
     5cc:	00 d0       	rcall	.+0      	; 0x5ce <initialize+0x8>
     5ce:	cd b7       	in	r28, 0x3d	; 61
     5d0:	de b7       	in	r29, 0x3e	; 62
     5d2:	8f e7       	ldi	r24, 0x7F	; 127
     5d4:	92 e0       	ldi	r25, 0x02	; 2
     5d6:	2f e5       	ldi	r18, 0x5F	; 95
     5d8:	33 e0       	ldi	r19, 0x03	; 3
     5da:	fc 01       	movw	r30, r24
     5dc:	70 97       	sbiw	r30, 0x10	; 16
     5de:	91 83       	std	Z+1, r25	; 0x01
     5e0:	80 83       	st	Z, r24
     5e2:	40 96       	adiw	r24, 0x10	; 16
     5e4:	82 17       	cp	r24, r18
     5e6:	93 07       	cpc	r25, r19
     5e8:	c1 f7       	brne	.-16     	; 0x5da <initialize+0x14>
     5ea:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <messages+0xe1>
     5ee:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <messages+0xe0>
     5f2:	ea eb       	ldi	r30, 0xBA	; 186
     5f4:	f1 e0       	ldi	r31, 0x01	; 1
     5f6:	87 ed       	ldi	r24, 0xD7	; 215
     5f8:	91 e0       	ldi	r25, 0x01	; 1
     5fa:	91 83       	std	Z+1, r25	; 0x01
     5fc:	80 83       	st	Z, r24
     5fe:	84 ef       	ldi	r24, 0xF4	; 244
     600:	91 e0       	ldi	r25, 0x01	; 1
     602:	96 8f       	std	Z+30, r25	; 0x1e
     604:	85 8f       	std	Z+29, r24	; 0x1d
     606:	a1 e1       	ldi	r26, 0x11	; 17
     608:	b2 e0       	ldi	r27, 0x02	; 2
     60a:	b3 af       	std	Z+59, r27	; 0x3b
     60c:	a2 af       	std	Z+58, r26	; 0x3a
     60e:	1d 92       	st	X+, r1
     610:	1c 92       	st	X, r1
     612:	fa 83       	std	Y+2, r31	; 0x02
     614:	e9 83       	std	Y+1, r30	; 0x01
     616:	eb eb       	ldi	r30, 0xBB	; 187
     618:	f3 e0       	ldi	r31, 0x03	; 3
     61a:	fc 83       	std	Y+4, r31	; 0x04
     61c:	eb 83       	std	Y+3, r30	; 0x03
     61e:	89 81       	ldd	r24, Y+1	; 0x01
     620:	9a 81       	ldd	r25, Y+2	; 0x02
     622:	06 96       	adiw	r24, 0x06	; 6
     624:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <setjmp>
     628:	8b 81       	ldd	r24, Y+3	; 0x03
     62a:	9c 81       	ldd	r25, Y+4	; 0x04
     62c:	e9 81       	ldd	r30, Y+1	; 0x01
     62e:	fa 81       	ldd	r31, Y+2	; 0x02
     630:	97 8b       	std	Z+23, r25	; 0x17
     632:	86 8b       	std	Z+22, r24	; 0x16
     634:	91 8f       	std	Z+25, r25	; 0x19
     636:	80 8f       	std	Z+24, r24	; 0x18
     638:	83 e8       	ldi	r24, 0x83	; 131
     63a:	9e e0       	ldi	r25, 0x0E	; 14
     63c:	94 8f       	std	Z+28, r25	; 0x1c
     63e:	83 8f       	std	Z+27, r24	; 0x1b
     640:	15 82       	std	Z+5, r1	; 0x05
     642:	14 82       	std	Z+4, r1	; 0x04
     644:	7d 96       	adiw	r30, 0x1d	; 29
     646:	fa 83       	std	Y+2, r31	; 0x02
     648:	e9 83       	std	Y+1, r30	; 0x01
     64a:	eb 81       	ldd	r30, Y+3	; 0x03
     64c:	fc 81       	ldd	r31, Y+4	; 0x04
     64e:	e0 5a       	subi	r30, 0xA0	; 160
     650:	ff 4f       	sbci	r31, 0xFF	; 255
     652:	fc 83       	std	Y+4, r31	; 0x04
     654:	eb 83       	std	Y+3, r30	; 0x03
     656:	89 81       	ldd	r24, Y+1	; 0x01
     658:	9a 81       	ldd	r25, Y+2	; 0x02
     65a:	8e 52       	subi	r24, 0x2E	; 46
     65c:	92 40       	sbci	r25, 0x02	; 2
     65e:	f9 f6       	brne	.-66     	; 0x61e <initialize+0x58>
     660:	e2 e5       	ldi	r30, 0x52	; 82
     662:	f2 e0       	ldi	r31, 0x02	; 2
     664:	11 82       	std	Z+1, r1	; 0x01
     666:	10 82       	st	Z, r1
     668:	15 82       	std	Z+5, r1	; 0x05
     66a:	14 82       	std	Z+4, r1	; 0x04
     66c:	13 82       	std	Z+3, r1	; 0x03
     66e:	12 82       	std	Z+2, r1	; 0x02
     670:	e1 e6       	ldi	r30, 0x61	; 97
     672:	f0 e0       	ldi	r31, 0x00	; 0
     674:	80 e8       	ldi	r24, 0x80	; 128
     676:	80 83       	st	Z, r24
     678:	10 82       	st	Z, r1
     67a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     67e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     682:	84 e0       	ldi	r24, 0x04	; 4
     684:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
     68e:	0f 90       	pop	r0
     690:	0f 90       	pop	r0
     692:	0f 90       	pop	r0
     694:	0f 90       	pop	r0
     696:	df 91       	pop	r29
     698:	cf 91       	pop	r28
     69a:	08 95       	ret

0000069c <dispatch>:
     69c:	cf 93       	push	r28
     69e:	df 93       	push	r29
     6a0:	00 d0       	rcall	.+0      	; 0x6a2 <dispatch+0x6>
     6a2:	cd b7       	in	r28, 0x3d	; 61
     6a4:	de b7       	in	r29, 0x3e	; 62
     6a6:	9a 83       	std	Y+2, r25	; 0x02
     6a8:	89 83       	std	Y+1, r24	; 0x01
     6aa:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <current>
     6ae:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <current+0x1>
     6b2:	06 96       	adiw	r24, 0x06	; 6
     6b4:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <setjmp>
     6b8:	89 2b       	or	r24, r25
     6ba:	59 f4       	brne	.+22     	; 0x6d2 <dispatch+0x36>
     6bc:	89 81       	ldd	r24, Y+1	; 0x01
     6be:	9a 81       	ldd	r25, Y+2	; 0x02
     6c0:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <current+0x1>
     6c4:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <current>
     6c8:	61 e0       	ldi	r22, 0x01	; 1
     6ca:	70 e0       	ldi	r23, 0x00	; 0
     6cc:	06 96       	adiw	r24, 0x06	; 6
     6ce:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <longjmp>
     6d2:	0f 90       	pop	r0
     6d4:	0f 90       	pop	r0
     6d6:	df 91       	pop	r29
     6d8:	cf 91       	pop	r28
     6da:	08 95       	ret

000006dc <schedule>:
     6dc:	0f 93       	push	r16
     6de:	1f 93       	push	r17
     6e0:	cf 93       	push	r28
     6e2:	df 93       	push	r29
     6e4:	e0 91 94 01 	lds	r30, 0x0194	; 0x800194 <msgQ>
     6e8:	f0 91 95 01 	lds	r31, 0x0195	; 0x800195 <msgQ+0x1>
     6ec:	30 97       	sbiw	r30, 0x00	; 0
     6ee:	61 f1       	breq	.+88     	; 0x748 <schedule+0x6c>
     6f0:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <threadPool>
     6f4:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <threadPool+0x1>
     6f8:	00 97       	sbiw	r24, 0x00	; 0
     6fa:	31 f1       	breq	.+76     	; 0x748 <schedule+0x6c>
     6fc:	c0 91 7e 01 	lds	r28, 0x017E	; 0x80017e <activeStack>
     700:	d0 91 7f 01 	lds	r29, 0x017F	; 0x80017f <activeStack+0x1>
     704:	aa 81       	ldd	r26, Y+2	; 0x02
     706:	bb 81       	ldd	r27, Y+3	; 0x03
     708:	10 97       	sbiw	r26, 0x00	; 0
     70a:	79 f0       	breq	.+30     	; 0x72a <schedule+0x4e>
     70c:	46 81       	ldd	r20, Z+6	; 0x06
     70e:	57 81       	ldd	r21, Z+7	; 0x07
     710:	60 85       	ldd	r22, Z+8	; 0x08
     712:	71 85       	ldd	r23, Z+9	; 0x09
     714:	16 96       	adiw	r26, 0x06	; 6
     716:	0d 91       	ld	r16, X+
     718:	1d 91       	ld	r17, X+
     71a:	2d 91       	ld	r18, X+
     71c:	3c 91       	ld	r19, X
     71e:	19 97       	sbiw	r26, 0x09	; 9
     720:	40 1b       	sub	r20, r16
     722:	51 0b       	sbc	r21, r17
     724:	62 0b       	sbc	r22, r18
     726:	73 0b       	sbc	r23, r19
     728:	7a f4       	brpl	.+30     	; 0x748 <schedule+0x6c>
     72a:	fc 01       	movw	r30, r24
     72c:	20 81       	ld	r18, Z
     72e:	31 81       	ldd	r19, Z+1	; 0x01
     730:	30 93 81 01 	sts	0x0181, r19	; 0x800181 <threadPool+0x1>
     734:	20 93 80 01 	sts	0x0180, r18	; 0x800180 <threadPool>
     738:	d1 83       	std	Z+1, r29	; 0x01
     73a:	c0 83       	st	Z, r28
     73c:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <activeStack+0x1>
     740:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <activeStack>
     744:	0e 94 4e 03 	call	0x69c	; 0x69c <dispatch>
     748:	df 91       	pop	r29
     74a:	cf 91       	pop	r28
     74c:	1f 91       	pop	r17
     74e:	0f 91       	pop	r16
     750:	08 95       	ret

00000752 <__vector_1>:
     752:	1f 92       	push	r1
     754:	0f 92       	push	r0
     756:	0f b6       	in	r0, 0x3f	; 63
     758:	0f 92       	push	r0
     75a:	11 24       	eor	r1, r1
     75c:	2f 93       	push	r18
     75e:	3f 93       	push	r19
     760:	4f 93       	push	r20
     762:	5f 93       	push	r21
     764:	6f 93       	push	r22
     766:	7f 93       	push	r23
     768:	8f 93       	push	r24
     76a:	9f 93       	push	r25
     76c:	af 93       	push	r26
     76e:	bf 93       	push	r27
     770:	ef 93       	push	r30
     772:	ff 93       	push	r31
     774:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     778:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     77c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     780:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     784:	c9 01       	movw	r24, r18
     786:	03 2e       	mov	r0, r19
     788:	00 0c       	add	r0, r0
     78a:	aa 0b       	sbc	r26, r26
     78c:	bb 0b       	sbc	r27, r27
     78e:	dc 01       	movw	r26, r24
     790:	99 27       	eor	r25, r25
     792:	88 27       	eor	r24, r24
     794:	60 e0       	ldi	r22, 0x00	; 0
     796:	70 e0       	ldi	r23, 0x00	; 0
     798:	84 2b       	or	r24, r20
     79a:	95 2b       	or	r25, r21
     79c:	a6 2b       	or	r26, r22
     79e:	b7 2b       	or	r27, r23
     7a0:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     7a4:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     7a8:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     7ac:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     7b0:	b0 9b       	sbis	0x16, 0	; 22
     7b2:	1b c0       	rjmp	.+54     	; 0x7ea <__vector_1+0x98>
     7b4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     7b8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     7bc:	c9 01       	movw	r24, r18
     7be:	01 96       	adiw	r24, 0x01	; 1
     7c0:	09 2e       	mov	r0, r25
     7c2:	00 0c       	add	r0, r0
     7c4:	aa 0b       	sbc	r26, r26
     7c6:	bb 0b       	sbc	r27, r27
     7c8:	dc 01       	movw	r26, r24
     7ca:	99 27       	eor	r25, r25
     7cc:	88 27       	eor	r24, r24
     7ce:	60 e0       	ldi	r22, 0x00	; 0
     7d0:	70 e0       	ldi	r23, 0x00	; 0
     7d2:	84 2b       	or	r24, r20
     7d4:	95 2b       	or	r25, r21
     7d6:	a6 2b       	or	r26, r22
     7d8:	b7 2b       	or	r27, r23
     7da:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     7de:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     7e2:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     7e6:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     7ea:	e0 91 2e 02 	lds	r30, 0x022E	; 0x80022e <mtable>
     7ee:	f0 91 2f 02 	lds	r31, 0x022F	; 0x80022f <mtable+0x1>
     7f2:	30 97       	sbiw	r30, 0x00	; 0
     7f4:	39 f0       	breq	.+14     	; 0x804 <__vector_1+0xb2>
     7f6:	60 e0       	ldi	r22, 0x00	; 0
     7f8:	70 e0       	ldi	r23, 0x00	; 0
     7fa:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <otable>
     7fe:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <otable+0x1>
     802:	09 95       	icall
     804:	0e 94 6e 03 	call	0x6dc	; 0x6dc <schedule>
     808:	ff 91       	pop	r31
     80a:	ef 91       	pop	r30
     80c:	bf 91       	pop	r27
     80e:	af 91       	pop	r26
     810:	9f 91       	pop	r25
     812:	8f 91       	pop	r24
     814:	7f 91       	pop	r23
     816:	6f 91       	pop	r22
     818:	5f 91       	pop	r21
     81a:	4f 91       	pop	r20
     81c:	3f 91       	pop	r19
     81e:	2f 91       	pop	r18
     820:	0f 90       	pop	r0
     822:	0f be       	out	0x3f, r0	; 63
     824:	0f 90       	pop	r0
     826:	1f 90       	pop	r1
     828:	18 95       	reti

0000082a <__vector_2>:
     82a:	1f 92       	push	r1
     82c:	0f 92       	push	r0
     82e:	0f b6       	in	r0, 0x3f	; 63
     830:	0f 92       	push	r0
     832:	11 24       	eor	r1, r1
     834:	2f 93       	push	r18
     836:	3f 93       	push	r19
     838:	4f 93       	push	r20
     83a:	5f 93       	push	r21
     83c:	6f 93       	push	r22
     83e:	7f 93       	push	r23
     840:	8f 93       	push	r24
     842:	9f 93       	push	r25
     844:	af 93       	push	r26
     846:	bf 93       	push	r27
     848:	ef 93       	push	r30
     84a:	ff 93       	push	r31
     84c:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     850:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     854:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     858:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     85c:	c9 01       	movw	r24, r18
     85e:	03 2e       	mov	r0, r19
     860:	00 0c       	add	r0, r0
     862:	aa 0b       	sbc	r26, r26
     864:	bb 0b       	sbc	r27, r27
     866:	dc 01       	movw	r26, r24
     868:	99 27       	eor	r25, r25
     86a:	88 27       	eor	r24, r24
     86c:	60 e0       	ldi	r22, 0x00	; 0
     86e:	70 e0       	ldi	r23, 0x00	; 0
     870:	84 2b       	or	r24, r20
     872:	95 2b       	or	r25, r21
     874:	a6 2b       	or	r26, r22
     876:	b7 2b       	or	r27, r23
     878:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     87c:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     880:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     884:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     888:	b0 9b       	sbis	0x16, 0	; 22
     88a:	1b c0       	rjmp	.+54     	; 0x8c2 <__vector_2+0x98>
     88c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     890:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     894:	c9 01       	movw	r24, r18
     896:	01 96       	adiw	r24, 0x01	; 1
     898:	09 2e       	mov	r0, r25
     89a:	00 0c       	add	r0, r0
     89c:	aa 0b       	sbc	r26, r26
     89e:	bb 0b       	sbc	r27, r27
     8a0:	dc 01       	movw	r26, r24
     8a2:	99 27       	eor	r25, r25
     8a4:	88 27       	eor	r24, r24
     8a6:	60 e0       	ldi	r22, 0x00	; 0
     8a8:	70 e0       	ldi	r23, 0x00	; 0
     8aa:	84 2b       	or	r24, r20
     8ac:	95 2b       	or	r25, r21
     8ae:	a6 2b       	or	r26, r22
     8b0:	b7 2b       	or	r27, r23
     8b2:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     8b6:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     8ba:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     8be:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     8c2:	e0 91 30 02 	lds	r30, 0x0230	; 0x800230 <mtable+0x2>
     8c6:	f0 91 31 02 	lds	r31, 0x0231	; 0x800231 <mtable+0x3>
     8ca:	30 97       	sbiw	r30, 0x00	; 0
     8cc:	39 f0       	breq	.+14     	; 0x8dc <__vector_2+0xb2>
     8ce:	61 e0       	ldi	r22, 0x01	; 1
     8d0:	70 e0       	ldi	r23, 0x00	; 0
     8d2:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <otable+0x2>
     8d6:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <otable+0x3>
     8da:	09 95       	icall
     8dc:	0e 94 6e 03 	call	0x6dc	; 0x6dc <schedule>
     8e0:	ff 91       	pop	r31
     8e2:	ef 91       	pop	r30
     8e4:	bf 91       	pop	r27
     8e6:	af 91       	pop	r26
     8e8:	9f 91       	pop	r25
     8ea:	8f 91       	pop	r24
     8ec:	7f 91       	pop	r23
     8ee:	6f 91       	pop	r22
     8f0:	5f 91       	pop	r21
     8f2:	4f 91       	pop	r20
     8f4:	3f 91       	pop	r19
     8f6:	2f 91       	pop	r18
     8f8:	0f 90       	pop	r0
     8fa:	0f be       	out	0x3f, r0	; 63
     8fc:	0f 90       	pop	r0
     8fe:	1f 90       	pop	r1
     900:	18 95       	reti

00000902 <__vector_3>:
     902:	1f 92       	push	r1
     904:	0f 92       	push	r0
     906:	0f b6       	in	r0, 0x3f	; 63
     908:	0f 92       	push	r0
     90a:	11 24       	eor	r1, r1
     90c:	2f 93       	push	r18
     90e:	3f 93       	push	r19
     910:	4f 93       	push	r20
     912:	5f 93       	push	r21
     914:	6f 93       	push	r22
     916:	7f 93       	push	r23
     918:	8f 93       	push	r24
     91a:	9f 93       	push	r25
     91c:	af 93       	push	r26
     91e:	bf 93       	push	r27
     920:	ef 93       	push	r30
     922:	ff 93       	push	r31
     924:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     928:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     92c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     930:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     934:	c9 01       	movw	r24, r18
     936:	03 2e       	mov	r0, r19
     938:	00 0c       	add	r0, r0
     93a:	aa 0b       	sbc	r26, r26
     93c:	bb 0b       	sbc	r27, r27
     93e:	dc 01       	movw	r26, r24
     940:	99 27       	eor	r25, r25
     942:	88 27       	eor	r24, r24
     944:	60 e0       	ldi	r22, 0x00	; 0
     946:	70 e0       	ldi	r23, 0x00	; 0
     948:	84 2b       	or	r24, r20
     94a:	95 2b       	or	r25, r21
     94c:	a6 2b       	or	r26, r22
     94e:	b7 2b       	or	r27, r23
     950:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     954:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     958:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     95c:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     960:	b0 9b       	sbis	0x16, 0	; 22
     962:	1b c0       	rjmp	.+54     	; 0x99a <__vector_3+0x98>
     964:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     968:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     96c:	c9 01       	movw	r24, r18
     96e:	01 96       	adiw	r24, 0x01	; 1
     970:	09 2e       	mov	r0, r25
     972:	00 0c       	add	r0, r0
     974:	aa 0b       	sbc	r26, r26
     976:	bb 0b       	sbc	r27, r27
     978:	dc 01       	movw	r26, r24
     97a:	99 27       	eor	r25, r25
     97c:	88 27       	eor	r24, r24
     97e:	60 e0       	ldi	r22, 0x00	; 0
     980:	70 e0       	ldi	r23, 0x00	; 0
     982:	84 2b       	or	r24, r20
     984:	95 2b       	or	r25, r21
     986:	a6 2b       	or	r26, r22
     988:	b7 2b       	or	r27, r23
     98a:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     98e:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     992:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     996:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     99a:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <mtable+0x4>
     99e:	f0 91 33 02 	lds	r31, 0x0233	; 0x800233 <mtable+0x5>
     9a2:	30 97       	sbiw	r30, 0x00	; 0
     9a4:	39 f0       	breq	.+14     	; 0x9b4 <__vector_3+0xb2>
     9a6:	62 e0       	ldi	r22, 0x02	; 2
     9a8:	70 e0       	ldi	r23, 0x00	; 0
     9aa:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <otable+0x4>
     9ae:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <otable+0x5>
     9b2:	09 95       	icall
     9b4:	0e 94 6e 03 	call	0x6dc	; 0x6dc <schedule>
     9b8:	ff 91       	pop	r31
     9ba:	ef 91       	pop	r30
     9bc:	bf 91       	pop	r27
     9be:	af 91       	pop	r26
     9c0:	9f 91       	pop	r25
     9c2:	8f 91       	pop	r24
     9c4:	7f 91       	pop	r23
     9c6:	6f 91       	pop	r22
     9c8:	5f 91       	pop	r21
     9ca:	4f 91       	pop	r20
     9cc:	3f 91       	pop	r19
     9ce:	2f 91       	pop	r18
     9d0:	0f 90       	pop	r0
     9d2:	0f be       	out	0x3f, r0	; 63
     9d4:	0f 90       	pop	r0
     9d6:	1f 90       	pop	r1
     9d8:	18 95       	reti

000009da <__vector_4>:
     9da:	1f 92       	push	r1
     9dc:	0f 92       	push	r0
     9de:	0f b6       	in	r0, 0x3f	; 63
     9e0:	0f 92       	push	r0
     9e2:	11 24       	eor	r1, r1
     9e4:	2f 93       	push	r18
     9e6:	3f 93       	push	r19
     9e8:	4f 93       	push	r20
     9ea:	5f 93       	push	r21
     9ec:	6f 93       	push	r22
     9ee:	7f 93       	push	r23
     9f0:	8f 93       	push	r24
     9f2:	9f 93       	push	r25
     9f4:	af 93       	push	r26
     9f6:	bf 93       	push	r27
     9f8:	ef 93       	push	r30
     9fa:	ff 93       	push	r31
     9fc:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     a00:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     a04:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     a08:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     a0c:	c9 01       	movw	r24, r18
     a0e:	03 2e       	mov	r0, r19
     a10:	00 0c       	add	r0, r0
     a12:	aa 0b       	sbc	r26, r26
     a14:	bb 0b       	sbc	r27, r27
     a16:	dc 01       	movw	r26, r24
     a18:	99 27       	eor	r25, r25
     a1a:	88 27       	eor	r24, r24
     a1c:	60 e0       	ldi	r22, 0x00	; 0
     a1e:	70 e0       	ldi	r23, 0x00	; 0
     a20:	84 2b       	or	r24, r20
     a22:	95 2b       	or	r25, r21
     a24:	a6 2b       	or	r26, r22
     a26:	b7 2b       	or	r27, r23
     a28:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     a2c:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     a30:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     a34:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     a38:	b0 9b       	sbis	0x16, 0	; 22
     a3a:	1b c0       	rjmp	.+54     	; 0xa72 <__vector_4+0x98>
     a3c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     a40:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     a44:	c9 01       	movw	r24, r18
     a46:	01 96       	adiw	r24, 0x01	; 1
     a48:	09 2e       	mov	r0, r25
     a4a:	00 0c       	add	r0, r0
     a4c:	aa 0b       	sbc	r26, r26
     a4e:	bb 0b       	sbc	r27, r27
     a50:	dc 01       	movw	r26, r24
     a52:	99 27       	eor	r25, r25
     a54:	88 27       	eor	r24, r24
     a56:	60 e0       	ldi	r22, 0x00	; 0
     a58:	70 e0       	ldi	r23, 0x00	; 0
     a5a:	84 2b       	or	r24, r20
     a5c:	95 2b       	or	r25, r21
     a5e:	a6 2b       	or	r26, r22
     a60:	b7 2b       	or	r27, r23
     a62:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     a66:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     a6a:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     a6e:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     a72:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <mtable+0x6>
     a76:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <mtable+0x7>
     a7a:	30 97       	sbiw	r30, 0x00	; 0
     a7c:	39 f0       	breq	.+14     	; 0xa8c <__vector_4+0xb2>
     a7e:	63 e0       	ldi	r22, 0x03	; 3
     a80:	70 e0       	ldi	r23, 0x00	; 0
     a82:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <otable+0x6>
     a86:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <otable+0x7>
     a8a:	09 95       	icall
     a8c:	0e 94 6e 03 	call	0x6dc	; 0x6dc <schedule>
     a90:	ff 91       	pop	r31
     a92:	ef 91       	pop	r30
     a94:	bf 91       	pop	r27
     a96:	af 91       	pop	r26
     a98:	9f 91       	pop	r25
     a9a:	8f 91       	pop	r24
     a9c:	7f 91       	pop	r23
     a9e:	6f 91       	pop	r22
     aa0:	5f 91       	pop	r21
     aa2:	4f 91       	pop	r20
     aa4:	3f 91       	pop	r19
     aa6:	2f 91       	pop	r18
     aa8:	0f 90       	pop	r0
     aaa:	0f be       	out	0x3f, r0	; 63
     aac:	0f 90       	pop	r0
     aae:	1f 90       	pop	r1
     ab0:	18 95       	reti

00000ab2 <__vector_5>:
     ab2:	1f 92       	push	r1
     ab4:	0f 92       	push	r0
     ab6:	0f b6       	in	r0, 0x3f	; 63
     ab8:	0f 92       	push	r0
     aba:	11 24       	eor	r1, r1
     abc:	2f 93       	push	r18
     abe:	3f 93       	push	r19
     ac0:	4f 93       	push	r20
     ac2:	5f 93       	push	r21
     ac4:	6f 93       	push	r22
     ac6:	7f 93       	push	r23
     ac8:	8f 93       	push	r24
     aca:	9f 93       	push	r25
     acc:	af 93       	push	r26
     ace:	bf 93       	push	r27
     ad0:	ef 93       	push	r30
     ad2:	ff 93       	push	r31
     ad4:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     ad8:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     adc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     ae0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     ae4:	c9 01       	movw	r24, r18
     ae6:	03 2e       	mov	r0, r19
     ae8:	00 0c       	add	r0, r0
     aea:	aa 0b       	sbc	r26, r26
     aec:	bb 0b       	sbc	r27, r27
     aee:	dc 01       	movw	r26, r24
     af0:	99 27       	eor	r25, r25
     af2:	88 27       	eor	r24, r24
     af4:	60 e0       	ldi	r22, 0x00	; 0
     af6:	70 e0       	ldi	r23, 0x00	; 0
     af8:	84 2b       	or	r24, r20
     afa:	95 2b       	or	r25, r21
     afc:	a6 2b       	or	r26, r22
     afe:	b7 2b       	or	r27, r23
     b00:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     b04:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     b08:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     b0c:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     b10:	b0 9b       	sbis	0x16, 0	; 22
     b12:	1b c0       	rjmp	.+54     	; 0xb4a <__vector_5+0x98>
     b14:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     b18:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     b1c:	c9 01       	movw	r24, r18
     b1e:	01 96       	adiw	r24, 0x01	; 1
     b20:	09 2e       	mov	r0, r25
     b22:	00 0c       	add	r0, r0
     b24:	aa 0b       	sbc	r26, r26
     b26:	bb 0b       	sbc	r27, r27
     b28:	dc 01       	movw	r26, r24
     b2a:	99 27       	eor	r25, r25
     b2c:	88 27       	eor	r24, r24
     b2e:	60 e0       	ldi	r22, 0x00	; 0
     b30:	70 e0       	ldi	r23, 0x00	; 0
     b32:	84 2b       	or	r24, r20
     b34:	95 2b       	or	r25, r21
     b36:	a6 2b       	or	r26, r22
     b38:	b7 2b       	or	r27, r23
     b3a:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     b3e:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     b42:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     b46:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     b4a:	e0 91 36 02 	lds	r30, 0x0236	; 0x800236 <mtable+0x8>
     b4e:	f0 91 37 02 	lds	r31, 0x0237	; 0x800237 <mtable+0x9>
     b52:	30 97       	sbiw	r30, 0x00	; 0
     b54:	39 f0       	breq	.+14     	; 0xb64 <__vector_5+0xb2>
     b56:	64 e0       	ldi	r22, 0x04	; 4
     b58:	70 e0       	ldi	r23, 0x00	; 0
     b5a:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <otable+0x8>
     b5e:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <otable+0x9>
     b62:	09 95       	icall
     b64:	0e 94 6e 03 	call	0x6dc	; 0x6dc <schedule>
     b68:	ff 91       	pop	r31
     b6a:	ef 91       	pop	r30
     b6c:	bf 91       	pop	r27
     b6e:	af 91       	pop	r26
     b70:	9f 91       	pop	r25
     b72:	8f 91       	pop	r24
     b74:	7f 91       	pop	r23
     b76:	6f 91       	pop	r22
     b78:	5f 91       	pop	r21
     b7a:	4f 91       	pop	r20
     b7c:	3f 91       	pop	r19
     b7e:	2f 91       	pop	r18
     b80:	0f 90       	pop	r0
     b82:	0f be       	out	0x3f, r0	; 63
     b84:	0f 90       	pop	r0
     b86:	1f 90       	pop	r1
     b88:	18 95       	reti

00000b8a <__vector_10>:
     b8a:	1f 92       	push	r1
     b8c:	0f 92       	push	r0
     b8e:	0f b6       	in	r0, 0x3f	; 63
     b90:	0f 92       	push	r0
     b92:	11 24       	eor	r1, r1
     b94:	2f 93       	push	r18
     b96:	3f 93       	push	r19
     b98:	4f 93       	push	r20
     b9a:	5f 93       	push	r21
     b9c:	6f 93       	push	r22
     b9e:	7f 93       	push	r23
     ba0:	8f 93       	push	r24
     ba2:	9f 93       	push	r25
     ba4:	af 93       	push	r26
     ba6:	bf 93       	push	r27
     ba8:	ef 93       	push	r30
     baa:	ff 93       	push	r31
     bac:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     bb0:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     bb4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     bb8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     bbc:	c9 01       	movw	r24, r18
     bbe:	03 2e       	mov	r0, r19
     bc0:	00 0c       	add	r0, r0
     bc2:	aa 0b       	sbc	r26, r26
     bc4:	bb 0b       	sbc	r27, r27
     bc6:	dc 01       	movw	r26, r24
     bc8:	99 27       	eor	r25, r25
     bca:	88 27       	eor	r24, r24
     bcc:	60 e0       	ldi	r22, 0x00	; 0
     bce:	70 e0       	ldi	r23, 0x00	; 0
     bd0:	84 2b       	or	r24, r20
     bd2:	95 2b       	or	r25, r21
     bd4:	a6 2b       	or	r26, r22
     bd6:	b7 2b       	or	r27, r23
     bd8:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     bdc:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     be0:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     be4:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     be8:	b0 9b       	sbis	0x16, 0	; 22
     bea:	1b c0       	rjmp	.+54     	; 0xc22 <__vector_10+0x98>
     bec:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     bf0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     bf4:	c9 01       	movw	r24, r18
     bf6:	01 96       	adiw	r24, 0x01	; 1
     bf8:	09 2e       	mov	r0, r25
     bfa:	00 0c       	add	r0, r0
     bfc:	aa 0b       	sbc	r26, r26
     bfe:	bb 0b       	sbc	r27, r27
     c00:	dc 01       	movw	r26, r24
     c02:	99 27       	eor	r25, r25
     c04:	88 27       	eor	r24, r24
     c06:	60 e0       	ldi	r22, 0x00	; 0
     c08:	70 e0       	ldi	r23, 0x00	; 0
     c0a:	84 2b       	or	r24, r20
     c0c:	95 2b       	or	r25, r21
     c0e:	a6 2b       	or	r26, r22
     c10:	b7 2b       	or	r27, r23
     c12:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     c16:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     c1a:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     c1e:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     c22:	e0 91 38 02 	lds	r30, 0x0238	; 0x800238 <mtable+0xa>
     c26:	f0 91 39 02 	lds	r31, 0x0239	; 0x800239 <mtable+0xb>
     c2a:	30 97       	sbiw	r30, 0x00	; 0
     c2c:	39 f0       	breq	.+14     	; 0xc3c <__vector_10+0xb2>
     c2e:	65 e0       	ldi	r22, 0x05	; 5
     c30:	70 e0       	ldi	r23, 0x00	; 0
     c32:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <otable+0xa>
     c36:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <otable+0xb>
     c3a:	09 95       	icall
     c3c:	0e 94 6e 03 	call	0x6dc	; 0x6dc <schedule>
     c40:	ff 91       	pop	r31
     c42:	ef 91       	pop	r30
     c44:	bf 91       	pop	r27
     c46:	af 91       	pop	r26
     c48:	9f 91       	pop	r25
     c4a:	8f 91       	pop	r24
     c4c:	7f 91       	pop	r23
     c4e:	6f 91       	pop	r22
     c50:	5f 91       	pop	r21
     c52:	4f 91       	pop	r20
     c54:	3f 91       	pop	r19
     c56:	2f 91       	pop	r18
     c58:	0f 90       	pop	r0
     c5a:	0f be       	out	0x3f, r0	; 63
     c5c:	0f 90       	pop	r0
     c5e:	1f 90       	pop	r1
     c60:	18 95       	reti

00000c62 <__vector_11>:
     c62:	1f 92       	push	r1
     c64:	0f 92       	push	r0
     c66:	0f b6       	in	r0, 0x3f	; 63
     c68:	0f 92       	push	r0
     c6a:	11 24       	eor	r1, r1
     c6c:	2f 93       	push	r18
     c6e:	3f 93       	push	r19
     c70:	4f 93       	push	r20
     c72:	5f 93       	push	r21
     c74:	6f 93       	push	r22
     c76:	7f 93       	push	r23
     c78:	8f 93       	push	r24
     c7a:	9f 93       	push	r25
     c7c:	af 93       	push	r26
     c7e:	bf 93       	push	r27
     c80:	ef 93       	push	r30
     c82:	ff 93       	push	r31
     c84:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     c88:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     c8c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     c90:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     c94:	c9 01       	movw	r24, r18
     c96:	03 2e       	mov	r0, r19
     c98:	00 0c       	add	r0, r0
     c9a:	aa 0b       	sbc	r26, r26
     c9c:	bb 0b       	sbc	r27, r27
     c9e:	dc 01       	movw	r26, r24
     ca0:	99 27       	eor	r25, r25
     ca2:	88 27       	eor	r24, r24
     ca4:	60 e0       	ldi	r22, 0x00	; 0
     ca6:	70 e0       	ldi	r23, 0x00	; 0
     ca8:	84 2b       	or	r24, r20
     caa:	95 2b       	or	r25, r21
     cac:	a6 2b       	or	r26, r22
     cae:	b7 2b       	or	r27, r23
     cb0:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     cb4:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     cb8:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     cbc:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     cc0:	b0 9b       	sbis	0x16, 0	; 22
     cc2:	1b c0       	rjmp	.+54     	; 0xcfa <__vector_11+0x98>
     cc4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     cc8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     ccc:	c9 01       	movw	r24, r18
     cce:	01 96       	adiw	r24, 0x01	; 1
     cd0:	09 2e       	mov	r0, r25
     cd2:	00 0c       	add	r0, r0
     cd4:	aa 0b       	sbc	r26, r26
     cd6:	bb 0b       	sbc	r27, r27
     cd8:	dc 01       	movw	r26, r24
     cda:	99 27       	eor	r25, r25
     cdc:	88 27       	eor	r24, r24
     cde:	60 e0       	ldi	r22, 0x00	; 0
     ce0:	70 e0       	ldi	r23, 0x00	; 0
     ce2:	84 2b       	or	r24, r20
     ce4:	95 2b       	or	r25, r21
     ce6:	a6 2b       	or	r26, r22
     ce8:	b7 2b       	or	r27, r23
     cea:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     cee:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     cf2:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     cf6:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     cfa:	e0 91 3a 02 	lds	r30, 0x023A	; 0x80023a <mtable+0xc>
     cfe:	f0 91 3b 02 	lds	r31, 0x023B	; 0x80023b <mtable+0xd>
     d02:	30 97       	sbiw	r30, 0x00	; 0
     d04:	39 f0       	breq	.+14     	; 0xd14 <__vector_11+0xb2>
     d06:	66 e0       	ldi	r22, 0x06	; 6
     d08:	70 e0       	ldi	r23, 0x00	; 0
     d0a:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <otable+0xc>
     d0e:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <otable+0xd>
     d12:	09 95       	icall
     d14:	0e 94 6e 03 	call	0x6dc	; 0x6dc <schedule>
     d18:	ff 91       	pop	r31
     d1a:	ef 91       	pop	r30
     d1c:	bf 91       	pop	r27
     d1e:	af 91       	pop	r26
     d20:	9f 91       	pop	r25
     d22:	8f 91       	pop	r24
     d24:	7f 91       	pop	r23
     d26:	6f 91       	pop	r22
     d28:	5f 91       	pop	r21
     d2a:	4f 91       	pop	r20
     d2c:	3f 91       	pop	r19
     d2e:	2f 91       	pop	r18
     d30:	0f 90       	pop	r0
     d32:	0f be       	out	0x3f, r0	; 63
     d34:	0f 90       	pop	r0
     d36:	1f 90       	pop	r1
     d38:	18 95       	reti

00000d3a <__vector_12>:
     d3a:	1f 92       	push	r1
     d3c:	0f 92       	push	r0
     d3e:	0f b6       	in	r0, 0x3f	; 63
     d40:	0f 92       	push	r0
     d42:	11 24       	eor	r1, r1
     d44:	2f 93       	push	r18
     d46:	3f 93       	push	r19
     d48:	4f 93       	push	r20
     d4a:	5f 93       	push	r21
     d4c:	6f 93       	push	r22
     d4e:	7f 93       	push	r23
     d50:	8f 93       	push	r24
     d52:	9f 93       	push	r25
     d54:	af 93       	push	r26
     d56:	bf 93       	push	r27
     d58:	ef 93       	push	r30
     d5a:	ff 93       	push	r31
     d5c:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     d60:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     d64:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     d68:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     d6c:	c9 01       	movw	r24, r18
     d6e:	03 2e       	mov	r0, r19
     d70:	00 0c       	add	r0, r0
     d72:	aa 0b       	sbc	r26, r26
     d74:	bb 0b       	sbc	r27, r27
     d76:	dc 01       	movw	r26, r24
     d78:	99 27       	eor	r25, r25
     d7a:	88 27       	eor	r24, r24
     d7c:	60 e0       	ldi	r22, 0x00	; 0
     d7e:	70 e0       	ldi	r23, 0x00	; 0
     d80:	84 2b       	or	r24, r20
     d82:	95 2b       	or	r25, r21
     d84:	a6 2b       	or	r26, r22
     d86:	b7 2b       	or	r27, r23
     d88:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     d8c:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     d90:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     d94:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     d98:	b0 9b       	sbis	0x16, 0	; 22
     d9a:	1b c0       	rjmp	.+54     	; 0xdd2 <__vector_12+0x98>
     d9c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     da0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     da4:	c9 01       	movw	r24, r18
     da6:	01 96       	adiw	r24, 0x01	; 1
     da8:	09 2e       	mov	r0, r25
     daa:	00 0c       	add	r0, r0
     dac:	aa 0b       	sbc	r26, r26
     dae:	bb 0b       	sbc	r27, r27
     db0:	dc 01       	movw	r26, r24
     db2:	99 27       	eor	r25, r25
     db4:	88 27       	eor	r24, r24
     db6:	60 e0       	ldi	r22, 0x00	; 0
     db8:	70 e0       	ldi	r23, 0x00	; 0
     dba:	84 2b       	or	r24, r20
     dbc:	95 2b       	or	r25, r21
     dbe:	a6 2b       	or	r26, r22
     dc0:	b7 2b       	or	r27, r23
     dc2:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     dc6:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     dca:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     dce:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     dd2:	e0 91 3c 02 	lds	r30, 0x023C	; 0x80023c <mtable+0xe>
     dd6:	f0 91 3d 02 	lds	r31, 0x023D	; 0x80023d <mtable+0xf>
     dda:	30 97       	sbiw	r30, 0x00	; 0
     ddc:	39 f0       	breq	.+14     	; 0xdec <__vector_12+0xb2>
     dde:	67 e0       	ldi	r22, 0x07	; 7
     de0:	70 e0       	ldi	r23, 0x00	; 0
     de2:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <otable+0xe>
     de6:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <otable+0xf>
     dea:	09 95       	icall
     dec:	0e 94 6e 03 	call	0x6dc	; 0x6dc <schedule>
     df0:	ff 91       	pop	r31
     df2:	ef 91       	pop	r30
     df4:	bf 91       	pop	r27
     df6:	af 91       	pop	r26
     df8:	9f 91       	pop	r25
     dfa:	8f 91       	pop	r24
     dfc:	7f 91       	pop	r23
     dfe:	6f 91       	pop	r22
     e00:	5f 91       	pop	r21
     e02:	4f 91       	pop	r20
     e04:	3f 91       	pop	r19
     e06:	2f 91       	pop	r18
     e08:	0f 90       	pop	r0
     e0a:	0f be       	out	0x3f, r0	; 63
     e0c:	0f 90       	pop	r0
     e0e:	1f 90       	pop	r1
     e10:	18 95       	reti

00000e12 <__vector_13>:
     e12:	1f 92       	push	r1
     e14:	0f 92       	push	r0
     e16:	0f b6       	in	r0, 0x3f	; 63
     e18:	0f 92       	push	r0
     e1a:	11 24       	eor	r1, r1
     e1c:	2f 93       	push	r18
     e1e:	3f 93       	push	r19
     e20:	4f 93       	push	r20
     e22:	5f 93       	push	r21
     e24:	6f 93       	push	r22
     e26:	7f 93       	push	r23
     e28:	8f 93       	push	r24
     e2a:	9f 93       	push	r25
     e2c:	af 93       	push	r26
     e2e:	bf 93       	push	r27
     e30:	ef 93       	push	r30
     e32:	ff 93       	push	r31
     e34:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     e38:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     e3c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     e40:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     e44:	c9 01       	movw	r24, r18
     e46:	03 2e       	mov	r0, r19
     e48:	00 0c       	add	r0, r0
     e4a:	aa 0b       	sbc	r26, r26
     e4c:	bb 0b       	sbc	r27, r27
     e4e:	dc 01       	movw	r26, r24
     e50:	99 27       	eor	r25, r25
     e52:	88 27       	eor	r24, r24
     e54:	60 e0       	ldi	r22, 0x00	; 0
     e56:	70 e0       	ldi	r23, 0x00	; 0
     e58:	84 2b       	or	r24, r20
     e5a:	95 2b       	or	r25, r21
     e5c:	a6 2b       	or	r26, r22
     e5e:	b7 2b       	or	r27, r23
     e60:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     e64:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     e68:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     e6c:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     e70:	b0 9b       	sbis	0x16, 0	; 22
     e72:	1b c0       	rjmp	.+54     	; 0xeaa <__vector_13+0x98>
     e74:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     e78:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     e7c:	c9 01       	movw	r24, r18
     e7e:	01 96       	adiw	r24, 0x01	; 1
     e80:	09 2e       	mov	r0, r25
     e82:	00 0c       	add	r0, r0
     e84:	aa 0b       	sbc	r26, r26
     e86:	bb 0b       	sbc	r27, r27
     e88:	dc 01       	movw	r26, r24
     e8a:	99 27       	eor	r25, r25
     e8c:	88 27       	eor	r24, r24
     e8e:	60 e0       	ldi	r22, 0x00	; 0
     e90:	70 e0       	ldi	r23, 0x00	; 0
     e92:	84 2b       	or	r24, r20
     e94:	95 2b       	or	r25, r21
     e96:	a6 2b       	or	r26, r22
     e98:	b7 2b       	or	r27, r23
     e9a:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     e9e:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     ea2:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     ea6:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     eaa:	e0 91 3e 02 	lds	r30, 0x023E	; 0x80023e <mtable+0x10>
     eae:	f0 91 3f 02 	lds	r31, 0x023F	; 0x80023f <mtable+0x11>
     eb2:	30 97       	sbiw	r30, 0x00	; 0
     eb4:	39 f0       	breq	.+14     	; 0xec4 <__vector_13+0xb2>
     eb6:	68 e0       	ldi	r22, 0x08	; 8
     eb8:	70 e0       	ldi	r23, 0x00	; 0
     eba:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <otable+0x10>
     ebe:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <otable+0x11>
     ec2:	09 95       	icall
     ec4:	0e 94 6e 03 	call	0x6dc	; 0x6dc <schedule>
     ec8:	ff 91       	pop	r31
     eca:	ef 91       	pop	r30
     ecc:	bf 91       	pop	r27
     ece:	af 91       	pop	r26
     ed0:	9f 91       	pop	r25
     ed2:	8f 91       	pop	r24
     ed4:	7f 91       	pop	r23
     ed6:	6f 91       	pop	r22
     ed8:	5f 91       	pop	r21
     eda:	4f 91       	pop	r20
     edc:	3f 91       	pop	r19
     ede:	2f 91       	pop	r18
     ee0:	0f 90       	pop	r0
     ee2:	0f be       	out	0x3f, r0	; 63
     ee4:	0f 90       	pop	r0
     ee6:	1f 90       	pop	r1
     ee8:	18 95       	reti

00000eea <__vector_14>:
     eea:	1f 92       	push	r1
     eec:	0f 92       	push	r0
     eee:	0f b6       	in	r0, 0x3f	; 63
     ef0:	0f 92       	push	r0
     ef2:	11 24       	eor	r1, r1
     ef4:	2f 93       	push	r18
     ef6:	3f 93       	push	r19
     ef8:	4f 93       	push	r20
     efa:	5f 93       	push	r21
     efc:	6f 93       	push	r22
     efe:	7f 93       	push	r23
     f00:	8f 93       	push	r24
     f02:	9f 93       	push	r25
     f04:	af 93       	push	r26
     f06:	bf 93       	push	r27
     f08:	ef 93       	push	r30
     f0a:	ff 93       	push	r31
     f0c:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     f10:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     f14:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     f18:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     f1c:	c9 01       	movw	r24, r18
     f1e:	03 2e       	mov	r0, r19
     f20:	00 0c       	add	r0, r0
     f22:	aa 0b       	sbc	r26, r26
     f24:	bb 0b       	sbc	r27, r27
     f26:	dc 01       	movw	r26, r24
     f28:	99 27       	eor	r25, r25
     f2a:	88 27       	eor	r24, r24
     f2c:	60 e0       	ldi	r22, 0x00	; 0
     f2e:	70 e0       	ldi	r23, 0x00	; 0
     f30:	84 2b       	or	r24, r20
     f32:	95 2b       	or	r25, r21
     f34:	a6 2b       	or	r26, r22
     f36:	b7 2b       	or	r27, r23
     f38:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     f3c:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     f40:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     f44:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     f48:	b0 9b       	sbis	0x16, 0	; 22
     f4a:	1b c0       	rjmp	.+54     	; 0xf82 <__vector_14+0x98>
     f4c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     f50:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     f54:	c9 01       	movw	r24, r18
     f56:	01 96       	adiw	r24, 0x01	; 1
     f58:	09 2e       	mov	r0, r25
     f5a:	00 0c       	add	r0, r0
     f5c:	aa 0b       	sbc	r26, r26
     f5e:	bb 0b       	sbc	r27, r27
     f60:	dc 01       	movw	r26, r24
     f62:	99 27       	eor	r25, r25
     f64:	88 27       	eor	r24, r24
     f66:	60 e0       	ldi	r22, 0x00	; 0
     f68:	70 e0       	ldi	r23, 0x00	; 0
     f6a:	84 2b       	or	r24, r20
     f6c:	95 2b       	or	r25, r21
     f6e:	a6 2b       	or	r26, r22
     f70:	b7 2b       	or	r27, r23
     f72:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     f76:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     f7a:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     f7e:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     f82:	e0 91 40 02 	lds	r30, 0x0240	; 0x800240 <mtable+0x12>
     f86:	f0 91 41 02 	lds	r31, 0x0241	; 0x800241 <mtable+0x13>
     f8a:	30 97       	sbiw	r30, 0x00	; 0
     f8c:	39 f0       	breq	.+14     	; 0xf9c <__vector_14+0xb2>
     f8e:	69 e0       	ldi	r22, 0x09	; 9
     f90:	70 e0       	ldi	r23, 0x00	; 0
     f92:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <otable+0x12>
     f96:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <otable+0x13>
     f9a:	09 95       	icall
     f9c:	0e 94 6e 03 	call	0x6dc	; 0x6dc <schedule>
     fa0:	ff 91       	pop	r31
     fa2:	ef 91       	pop	r30
     fa4:	bf 91       	pop	r27
     fa6:	af 91       	pop	r26
     fa8:	9f 91       	pop	r25
     faa:	8f 91       	pop	r24
     fac:	7f 91       	pop	r23
     fae:	6f 91       	pop	r22
     fb0:	5f 91       	pop	r21
     fb2:	4f 91       	pop	r20
     fb4:	3f 91       	pop	r19
     fb6:	2f 91       	pop	r18
     fb8:	0f 90       	pop	r0
     fba:	0f be       	out	0x3f, r0	; 63
     fbc:	0f 90       	pop	r0
     fbe:	1f 90       	pop	r1
     fc0:	18 95       	reti

00000fc2 <__vector_15>:
     fc2:	1f 92       	push	r1
     fc4:	0f 92       	push	r0
     fc6:	0f b6       	in	r0, 0x3f	; 63
     fc8:	0f 92       	push	r0
     fca:	11 24       	eor	r1, r1
     fcc:	2f 93       	push	r18
     fce:	3f 93       	push	r19
     fd0:	4f 93       	push	r20
     fd2:	5f 93       	push	r21
     fd4:	6f 93       	push	r22
     fd6:	7f 93       	push	r23
     fd8:	8f 93       	push	r24
     fda:	9f 93       	push	r25
     fdc:	af 93       	push	r26
     fde:	bf 93       	push	r27
     fe0:	ef 93       	push	r30
     fe2:	ff 93       	push	r31
     fe4:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     fe8:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     fec:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     ff0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     ff4:	c9 01       	movw	r24, r18
     ff6:	03 2e       	mov	r0, r19
     ff8:	00 0c       	add	r0, r0
     ffa:	aa 0b       	sbc	r26, r26
     ffc:	bb 0b       	sbc	r27, r27
     ffe:	dc 01       	movw	r26, r24
    1000:	99 27       	eor	r25, r25
    1002:	88 27       	eor	r24, r24
    1004:	60 e0       	ldi	r22, 0x00	; 0
    1006:	70 e0       	ldi	r23, 0x00	; 0
    1008:	84 2b       	or	r24, r20
    100a:	95 2b       	or	r25, r21
    100c:	a6 2b       	or	r26, r22
    100e:	b7 2b       	or	r27, r23
    1010:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    1014:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    1018:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    101c:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    1020:	b0 9b       	sbis	0x16, 0	; 22
    1022:	1b c0       	rjmp	.+54     	; 0x105a <__vector_15+0x98>
    1024:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1028:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    102c:	c9 01       	movw	r24, r18
    102e:	01 96       	adiw	r24, 0x01	; 1
    1030:	09 2e       	mov	r0, r25
    1032:	00 0c       	add	r0, r0
    1034:	aa 0b       	sbc	r26, r26
    1036:	bb 0b       	sbc	r27, r27
    1038:	dc 01       	movw	r26, r24
    103a:	99 27       	eor	r25, r25
    103c:	88 27       	eor	r24, r24
    103e:	60 e0       	ldi	r22, 0x00	; 0
    1040:	70 e0       	ldi	r23, 0x00	; 0
    1042:	84 2b       	or	r24, r20
    1044:	95 2b       	or	r25, r21
    1046:	a6 2b       	or	r26, r22
    1048:	b7 2b       	or	r27, r23
    104a:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    104e:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    1052:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    1056:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    105a:	e0 91 42 02 	lds	r30, 0x0242	; 0x800242 <mtable+0x14>
    105e:	f0 91 43 02 	lds	r31, 0x0243	; 0x800243 <mtable+0x15>
    1062:	30 97       	sbiw	r30, 0x00	; 0
    1064:	39 f0       	breq	.+14     	; 0x1074 <__vector_15+0xb2>
    1066:	6a e0       	ldi	r22, 0x0A	; 10
    1068:	70 e0       	ldi	r23, 0x00	; 0
    106a:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <otable+0x14>
    106e:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <otable+0x15>
    1072:	09 95       	icall
    1074:	0e 94 6e 03 	call	0x6dc	; 0x6dc <schedule>
    1078:	ff 91       	pop	r31
    107a:	ef 91       	pop	r30
    107c:	bf 91       	pop	r27
    107e:	af 91       	pop	r26
    1080:	9f 91       	pop	r25
    1082:	8f 91       	pop	r24
    1084:	7f 91       	pop	r23
    1086:	6f 91       	pop	r22
    1088:	5f 91       	pop	r21
    108a:	4f 91       	pop	r20
    108c:	3f 91       	pop	r19
    108e:	2f 91       	pop	r18
    1090:	0f 90       	pop	r0
    1092:	0f be       	out	0x3f, r0	; 63
    1094:	0f 90       	pop	r0
    1096:	1f 90       	pop	r1
    1098:	18 95       	reti

0000109a <__vector_16>:
    109a:	1f 92       	push	r1
    109c:	0f 92       	push	r0
    109e:	0f b6       	in	r0, 0x3f	; 63
    10a0:	0f 92       	push	r0
    10a2:	11 24       	eor	r1, r1
    10a4:	2f 93       	push	r18
    10a6:	3f 93       	push	r19
    10a8:	4f 93       	push	r20
    10aa:	5f 93       	push	r21
    10ac:	6f 93       	push	r22
    10ae:	7f 93       	push	r23
    10b0:	8f 93       	push	r24
    10b2:	9f 93       	push	r25
    10b4:	af 93       	push	r26
    10b6:	bf 93       	push	r27
    10b8:	ef 93       	push	r30
    10ba:	ff 93       	push	r31
    10bc:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    10c0:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    10c4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    10c8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    10cc:	c9 01       	movw	r24, r18
    10ce:	03 2e       	mov	r0, r19
    10d0:	00 0c       	add	r0, r0
    10d2:	aa 0b       	sbc	r26, r26
    10d4:	bb 0b       	sbc	r27, r27
    10d6:	dc 01       	movw	r26, r24
    10d8:	99 27       	eor	r25, r25
    10da:	88 27       	eor	r24, r24
    10dc:	60 e0       	ldi	r22, 0x00	; 0
    10de:	70 e0       	ldi	r23, 0x00	; 0
    10e0:	84 2b       	or	r24, r20
    10e2:	95 2b       	or	r25, r21
    10e4:	a6 2b       	or	r26, r22
    10e6:	b7 2b       	or	r27, r23
    10e8:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    10ec:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    10f0:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    10f4:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    10f8:	b0 9b       	sbis	0x16, 0	; 22
    10fa:	1b c0       	rjmp	.+54     	; 0x1132 <__vector_16+0x98>
    10fc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1100:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1104:	c9 01       	movw	r24, r18
    1106:	01 96       	adiw	r24, 0x01	; 1
    1108:	09 2e       	mov	r0, r25
    110a:	00 0c       	add	r0, r0
    110c:	aa 0b       	sbc	r26, r26
    110e:	bb 0b       	sbc	r27, r27
    1110:	dc 01       	movw	r26, r24
    1112:	99 27       	eor	r25, r25
    1114:	88 27       	eor	r24, r24
    1116:	60 e0       	ldi	r22, 0x00	; 0
    1118:	70 e0       	ldi	r23, 0x00	; 0
    111a:	84 2b       	or	r24, r20
    111c:	95 2b       	or	r25, r21
    111e:	a6 2b       	or	r26, r22
    1120:	b7 2b       	or	r27, r23
    1122:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    1126:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    112a:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    112e:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    1132:	e0 91 44 02 	lds	r30, 0x0244	; 0x800244 <mtable+0x16>
    1136:	f0 91 45 02 	lds	r31, 0x0245	; 0x800245 <mtable+0x17>
    113a:	30 97       	sbiw	r30, 0x00	; 0
    113c:	39 f0       	breq	.+14     	; 0x114c <__vector_16+0xb2>
    113e:	6b e0       	ldi	r22, 0x0B	; 11
    1140:	70 e0       	ldi	r23, 0x00	; 0
    1142:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <otable+0x16>
    1146:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <otable+0x17>
    114a:	09 95       	icall
    114c:	0e 94 6e 03 	call	0x6dc	; 0x6dc <schedule>
    1150:	ff 91       	pop	r31
    1152:	ef 91       	pop	r30
    1154:	bf 91       	pop	r27
    1156:	af 91       	pop	r26
    1158:	9f 91       	pop	r25
    115a:	8f 91       	pop	r24
    115c:	7f 91       	pop	r23
    115e:	6f 91       	pop	r22
    1160:	5f 91       	pop	r21
    1162:	4f 91       	pop	r20
    1164:	3f 91       	pop	r19
    1166:	2f 91       	pop	r18
    1168:	0f 90       	pop	r0
    116a:	0f be       	out	0x3f, r0	; 63
    116c:	0f 90       	pop	r0
    116e:	1f 90       	pop	r1
    1170:	18 95       	reti

00001172 <__vector_17>:
    1172:	1f 92       	push	r1
    1174:	0f 92       	push	r0
    1176:	0f b6       	in	r0, 0x3f	; 63
    1178:	0f 92       	push	r0
    117a:	11 24       	eor	r1, r1
    117c:	2f 93       	push	r18
    117e:	3f 93       	push	r19
    1180:	4f 93       	push	r20
    1182:	5f 93       	push	r21
    1184:	6f 93       	push	r22
    1186:	7f 93       	push	r23
    1188:	8f 93       	push	r24
    118a:	9f 93       	push	r25
    118c:	af 93       	push	r26
    118e:	bf 93       	push	r27
    1190:	ef 93       	push	r30
    1192:	ff 93       	push	r31
    1194:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    1198:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    119c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    11a0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    11a4:	c9 01       	movw	r24, r18
    11a6:	03 2e       	mov	r0, r19
    11a8:	00 0c       	add	r0, r0
    11aa:	aa 0b       	sbc	r26, r26
    11ac:	bb 0b       	sbc	r27, r27
    11ae:	dc 01       	movw	r26, r24
    11b0:	99 27       	eor	r25, r25
    11b2:	88 27       	eor	r24, r24
    11b4:	60 e0       	ldi	r22, 0x00	; 0
    11b6:	70 e0       	ldi	r23, 0x00	; 0
    11b8:	84 2b       	or	r24, r20
    11ba:	95 2b       	or	r25, r21
    11bc:	a6 2b       	or	r26, r22
    11be:	b7 2b       	or	r27, r23
    11c0:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    11c4:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    11c8:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    11cc:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    11d0:	b0 9b       	sbis	0x16, 0	; 22
    11d2:	1b c0       	rjmp	.+54     	; 0x120a <__vector_17+0x98>
    11d4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    11d8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    11dc:	c9 01       	movw	r24, r18
    11de:	01 96       	adiw	r24, 0x01	; 1
    11e0:	09 2e       	mov	r0, r25
    11e2:	00 0c       	add	r0, r0
    11e4:	aa 0b       	sbc	r26, r26
    11e6:	bb 0b       	sbc	r27, r27
    11e8:	dc 01       	movw	r26, r24
    11ea:	99 27       	eor	r25, r25
    11ec:	88 27       	eor	r24, r24
    11ee:	60 e0       	ldi	r22, 0x00	; 0
    11f0:	70 e0       	ldi	r23, 0x00	; 0
    11f2:	84 2b       	or	r24, r20
    11f4:	95 2b       	or	r25, r21
    11f6:	a6 2b       	or	r26, r22
    11f8:	b7 2b       	or	r27, r23
    11fa:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    11fe:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    1202:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    1206:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    120a:	e0 91 46 02 	lds	r30, 0x0246	; 0x800246 <mtable+0x18>
    120e:	f0 91 47 02 	lds	r31, 0x0247	; 0x800247 <mtable+0x19>
    1212:	30 97       	sbiw	r30, 0x00	; 0
    1214:	39 f0       	breq	.+14     	; 0x1224 <__vector_17+0xb2>
    1216:	6c e0       	ldi	r22, 0x0C	; 12
    1218:	70 e0       	ldi	r23, 0x00	; 0
    121a:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <otable+0x18>
    121e:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <otable+0x19>
    1222:	09 95       	icall
    1224:	0e 94 6e 03 	call	0x6dc	; 0x6dc <schedule>
    1228:	ff 91       	pop	r31
    122a:	ef 91       	pop	r30
    122c:	bf 91       	pop	r27
    122e:	af 91       	pop	r26
    1230:	9f 91       	pop	r25
    1232:	8f 91       	pop	r24
    1234:	7f 91       	pop	r23
    1236:	6f 91       	pop	r22
    1238:	5f 91       	pop	r21
    123a:	4f 91       	pop	r20
    123c:	3f 91       	pop	r19
    123e:	2f 91       	pop	r18
    1240:	0f 90       	pop	r0
    1242:	0f be       	out	0x3f, r0	; 63
    1244:	0f 90       	pop	r0
    1246:	1f 90       	pop	r1
    1248:	18 95       	reti

0000124a <__vector_18>:
    124a:	1f 92       	push	r1
    124c:	0f 92       	push	r0
    124e:	0f b6       	in	r0, 0x3f	; 63
    1250:	0f 92       	push	r0
    1252:	11 24       	eor	r1, r1
    1254:	2f 93       	push	r18
    1256:	3f 93       	push	r19
    1258:	4f 93       	push	r20
    125a:	5f 93       	push	r21
    125c:	6f 93       	push	r22
    125e:	7f 93       	push	r23
    1260:	8f 93       	push	r24
    1262:	9f 93       	push	r25
    1264:	af 93       	push	r26
    1266:	bf 93       	push	r27
    1268:	ef 93       	push	r30
    126a:	ff 93       	push	r31
    126c:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    1270:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    1274:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1278:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    127c:	c9 01       	movw	r24, r18
    127e:	03 2e       	mov	r0, r19
    1280:	00 0c       	add	r0, r0
    1282:	aa 0b       	sbc	r26, r26
    1284:	bb 0b       	sbc	r27, r27
    1286:	dc 01       	movw	r26, r24
    1288:	99 27       	eor	r25, r25
    128a:	88 27       	eor	r24, r24
    128c:	60 e0       	ldi	r22, 0x00	; 0
    128e:	70 e0       	ldi	r23, 0x00	; 0
    1290:	84 2b       	or	r24, r20
    1292:	95 2b       	or	r25, r21
    1294:	a6 2b       	or	r26, r22
    1296:	b7 2b       	or	r27, r23
    1298:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    129c:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    12a0:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    12a4:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    12a8:	b0 9b       	sbis	0x16, 0	; 22
    12aa:	1b c0       	rjmp	.+54     	; 0x12e2 <__vector_18+0x98>
    12ac:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    12b0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    12b4:	c9 01       	movw	r24, r18
    12b6:	01 96       	adiw	r24, 0x01	; 1
    12b8:	09 2e       	mov	r0, r25
    12ba:	00 0c       	add	r0, r0
    12bc:	aa 0b       	sbc	r26, r26
    12be:	bb 0b       	sbc	r27, r27
    12c0:	dc 01       	movw	r26, r24
    12c2:	99 27       	eor	r25, r25
    12c4:	88 27       	eor	r24, r24
    12c6:	60 e0       	ldi	r22, 0x00	; 0
    12c8:	70 e0       	ldi	r23, 0x00	; 0
    12ca:	84 2b       	or	r24, r20
    12cc:	95 2b       	or	r25, r21
    12ce:	a6 2b       	or	r26, r22
    12d0:	b7 2b       	or	r27, r23
    12d2:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    12d6:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    12da:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    12de:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    12e2:	e0 91 48 02 	lds	r30, 0x0248	; 0x800248 <mtable+0x1a>
    12e6:	f0 91 49 02 	lds	r31, 0x0249	; 0x800249 <mtable+0x1b>
    12ea:	30 97       	sbiw	r30, 0x00	; 0
    12ec:	39 f0       	breq	.+14     	; 0x12fc <__vector_18+0xb2>
    12ee:	6d e0       	ldi	r22, 0x0D	; 13
    12f0:	70 e0       	ldi	r23, 0x00	; 0
    12f2:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <otable+0x1a>
    12f6:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <otable+0x1b>
    12fa:	09 95       	icall
    12fc:	0e 94 6e 03 	call	0x6dc	; 0x6dc <schedule>
    1300:	ff 91       	pop	r31
    1302:	ef 91       	pop	r30
    1304:	bf 91       	pop	r27
    1306:	af 91       	pop	r26
    1308:	9f 91       	pop	r25
    130a:	8f 91       	pop	r24
    130c:	7f 91       	pop	r23
    130e:	6f 91       	pop	r22
    1310:	5f 91       	pop	r21
    1312:	4f 91       	pop	r20
    1314:	3f 91       	pop	r19
    1316:	2f 91       	pop	r18
    1318:	0f 90       	pop	r0
    131a:	0f be       	out	0x3f, r0	; 63
    131c:	0f 90       	pop	r0
    131e:	1f 90       	pop	r1
    1320:	18 95       	reti

00001322 <__vector_19>:
    1322:	1f 92       	push	r1
    1324:	0f 92       	push	r0
    1326:	0f b6       	in	r0, 0x3f	; 63
    1328:	0f 92       	push	r0
    132a:	11 24       	eor	r1, r1
    132c:	2f 93       	push	r18
    132e:	3f 93       	push	r19
    1330:	4f 93       	push	r20
    1332:	5f 93       	push	r21
    1334:	6f 93       	push	r22
    1336:	7f 93       	push	r23
    1338:	8f 93       	push	r24
    133a:	9f 93       	push	r25
    133c:	af 93       	push	r26
    133e:	bf 93       	push	r27
    1340:	ef 93       	push	r30
    1342:	ff 93       	push	r31
    1344:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    1348:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    134c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1350:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1354:	c9 01       	movw	r24, r18
    1356:	03 2e       	mov	r0, r19
    1358:	00 0c       	add	r0, r0
    135a:	aa 0b       	sbc	r26, r26
    135c:	bb 0b       	sbc	r27, r27
    135e:	dc 01       	movw	r26, r24
    1360:	99 27       	eor	r25, r25
    1362:	88 27       	eor	r24, r24
    1364:	60 e0       	ldi	r22, 0x00	; 0
    1366:	70 e0       	ldi	r23, 0x00	; 0
    1368:	84 2b       	or	r24, r20
    136a:	95 2b       	or	r25, r21
    136c:	a6 2b       	or	r26, r22
    136e:	b7 2b       	or	r27, r23
    1370:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    1374:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    1378:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    137c:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    1380:	b0 9b       	sbis	0x16, 0	; 22
    1382:	1b c0       	rjmp	.+54     	; 0x13ba <__vector_19+0x98>
    1384:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1388:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    138c:	c9 01       	movw	r24, r18
    138e:	01 96       	adiw	r24, 0x01	; 1
    1390:	09 2e       	mov	r0, r25
    1392:	00 0c       	add	r0, r0
    1394:	aa 0b       	sbc	r26, r26
    1396:	bb 0b       	sbc	r27, r27
    1398:	dc 01       	movw	r26, r24
    139a:	99 27       	eor	r25, r25
    139c:	88 27       	eor	r24, r24
    139e:	60 e0       	ldi	r22, 0x00	; 0
    13a0:	70 e0       	ldi	r23, 0x00	; 0
    13a2:	84 2b       	or	r24, r20
    13a4:	95 2b       	or	r25, r21
    13a6:	a6 2b       	or	r26, r22
    13a8:	b7 2b       	or	r27, r23
    13aa:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    13ae:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    13b2:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    13b6:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    13ba:	e0 91 4a 02 	lds	r30, 0x024A	; 0x80024a <mtable+0x1c>
    13be:	f0 91 4b 02 	lds	r31, 0x024B	; 0x80024b <mtable+0x1d>
    13c2:	30 97       	sbiw	r30, 0x00	; 0
    13c4:	39 f0       	breq	.+14     	; 0x13d4 <__vector_19+0xb2>
    13c6:	6e e0       	ldi	r22, 0x0E	; 14
    13c8:	70 e0       	ldi	r23, 0x00	; 0
    13ca:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <otable+0x1c>
    13ce:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <otable+0x1d>
    13d2:	09 95       	icall
    13d4:	0e 94 6e 03 	call	0x6dc	; 0x6dc <schedule>
    13d8:	ff 91       	pop	r31
    13da:	ef 91       	pop	r30
    13dc:	bf 91       	pop	r27
    13de:	af 91       	pop	r26
    13e0:	9f 91       	pop	r25
    13e2:	8f 91       	pop	r24
    13e4:	7f 91       	pop	r23
    13e6:	6f 91       	pop	r22
    13e8:	5f 91       	pop	r21
    13ea:	4f 91       	pop	r20
    13ec:	3f 91       	pop	r19
    13ee:	2f 91       	pop	r18
    13f0:	0f 90       	pop	r0
    13f2:	0f be       	out	0x3f, r0	; 63
    13f4:	0f 90       	pop	r0
    13f6:	1f 90       	pop	r1
    13f8:	18 95       	reti

000013fa <__vector_20>:
    13fa:	1f 92       	push	r1
    13fc:	0f 92       	push	r0
    13fe:	0f b6       	in	r0, 0x3f	; 63
    1400:	0f 92       	push	r0
    1402:	11 24       	eor	r1, r1
    1404:	2f 93       	push	r18
    1406:	3f 93       	push	r19
    1408:	4f 93       	push	r20
    140a:	5f 93       	push	r21
    140c:	6f 93       	push	r22
    140e:	7f 93       	push	r23
    1410:	8f 93       	push	r24
    1412:	9f 93       	push	r25
    1414:	af 93       	push	r26
    1416:	bf 93       	push	r27
    1418:	ef 93       	push	r30
    141a:	ff 93       	push	r31
    141c:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    1420:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    1424:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1428:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    142c:	c9 01       	movw	r24, r18
    142e:	03 2e       	mov	r0, r19
    1430:	00 0c       	add	r0, r0
    1432:	aa 0b       	sbc	r26, r26
    1434:	bb 0b       	sbc	r27, r27
    1436:	dc 01       	movw	r26, r24
    1438:	99 27       	eor	r25, r25
    143a:	88 27       	eor	r24, r24
    143c:	60 e0       	ldi	r22, 0x00	; 0
    143e:	70 e0       	ldi	r23, 0x00	; 0
    1440:	84 2b       	or	r24, r20
    1442:	95 2b       	or	r25, r21
    1444:	a6 2b       	or	r26, r22
    1446:	b7 2b       	or	r27, r23
    1448:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    144c:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    1450:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    1454:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    1458:	b0 9b       	sbis	0x16, 0	; 22
    145a:	1b c0       	rjmp	.+54     	; 0x1492 <__vector_20+0x98>
    145c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1460:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1464:	c9 01       	movw	r24, r18
    1466:	01 96       	adiw	r24, 0x01	; 1
    1468:	09 2e       	mov	r0, r25
    146a:	00 0c       	add	r0, r0
    146c:	aa 0b       	sbc	r26, r26
    146e:	bb 0b       	sbc	r27, r27
    1470:	dc 01       	movw	r26, r24
    1472:	99 27       	eor	r25, r25
    1474:	88 27       	eor	r24, r24
    1476:	60 e0       	ldi	r22, 0x00	; 0
    1478:	70 e0       	ldi	r23, 0x00	; 0
    147a:	84 2b       	or	r24, r20
    147c:	95 2b       	or	r25, r21
    147e:	a6 2b       	or	r26, r22
    1480:	b7 2b       	or	r27, r23
    1482:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    1486:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    148a:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    148e:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    1492:	e0 91 4c 02 	lds	r30, 0x024C	; 0x80024c <mtable+0x1e>
    1496:	f0 91 4d 02 	lds	r31, 0x024D	; 0x80024d <mtable+0x1f>
    149a:	30 97       	sbiw	r30, 0x00	; 0
    149c:	39 f0       	breq	.+14     	; 0x14ac <__vector_20+0xb2>
    149e:	6f e0       	ldi	r22, 0x0F	; 15
    14a0:	70 e0       	ldi	r23, 0x00	; 0
    14a2:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <otable+0x1e>
    14a6:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <otable+0x1f>
    14aa:	09 95       	icall
    14ac:	0e 94 6e 03 	call	0x6dc	; 0x6dc <schedule>
    14b0:	ff 91       	pop	r31
    14b2:	ef 91       	pop	r30
    14b4:	bf 91       	pop	r27
    14b6:	af 91       	pop	r26
    14b8:	9f 91       	pop	r25
    14ba:	8f 91       	pop	r24
    14bc:	7f 91       	pop	r23
    14be:	6f 91       	pop	r22
    14c0:	5f 91       	pop	r21
    14c2:	4f 91       	pop	r20
    14c4:	3f 91       	pop	r19
    14c6:	2f 91       	pop	r18
    14c8:	0f 90       	pop	r0
    14ca:	0f be       	out	0x3f, r0	; 63
    14cc:	0f 90       	pop	r0
    14ce:	1f 90       	pop	r1
    14d0:	18 95       	reti

000014d2 <__vector_21>:
    14d2:	1f 92       	push	r1
    14d4:	0f 92       	push	r0
    14d6:	0f b6       	in	r0, 0x3f	; 63
    14d8:	0f 92       	push	r0
    14da:	11 24       	eor	r1, r1
    14dc:	2f 93       	push	r18
    14de:	3f 93       	push	r19
    14e0:	4f 93       	push	r20
    14e2:	5f 93       	push	r21
    14e4:	6f 93       	push	r22
    14e6:	7f 93       	push	r23
    14e8:	8f 93       	push	r24
    14ea:	9f 93       	push	r25
    14ec:	af 93       	push	r26
    14ee:	bf 93       	push	r27
    14f0:	ef 93       	push	r30
    14f2:	ff 93       	push	r31
    14f4:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    14f8:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    14fc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1500:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1504:	c9 01       	movw	r24, r18
    1506:	03 2e       	mov	r0, r19
    1508:	00 0c       	add	r0, r0
    150a:	aa 0b       	sbc	r26, r26
    150c:	bb 0b       	sbc	r27, r27
    150e:	dc 01       	movw	r26, r24
    1510:	99 27       	eor	r25, r25
    1512:	88 27       	eor	r24, r24
    1514:	60 e0       	ldi	r22, 0x00	; 0
    1516:	70 e0       	ldi	r23, 0x00	; 0
    1518:	84 2b       	or	r24, r20
    151a:	95 2b       	or	r25, r21
    151c:	a6 2b       	or	r26, r22
    151e:	b7 2b       	or	r27, r23
    1520:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    1524:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    1528:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    152c:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    1530:	b0 9b       	sbis	0x16, 0	; 22
    1532:	1b c0       	rjmp	.+54     	; 0x156a <__vector_21+0x98>
    1534:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1538:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    153c:	c9 01       	movw	r24, r18
    153e:	01 96       	adiw	r24, 0x01	; 1
    1540:	09 2e       	mov	r0, r25
    1542:	00 0c       	add	r0, r0
    1544:	aa 0b       	sbc	r26, r26
    1546:	bb 0b       	sbc	r27, r27
    1548:	dc 01       	movw	r26, r24
    154a:	99 27       	eor	r25, r25
    154c:	88 27       	eor	r24, r24
    154e:	60 e0       	ldi	r22, 0x00	; 0
    1550:	70 e0       	ldi	r23, 0x00	; 0
    1552:	84 2b       	or	r24, r20
    1554:	95 2b       	or	r25, r21
    1556:	a6 2b       	or	r26, r22
    1558:	b7 2b       	or	r27, r23
    155a:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    155e:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    1562:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    1566:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    156a:	e0 91 4e 02 	lds	r30, 0x024E	; 0x80024e <mtable+0x20>
    156e:	f0 91 4f 02 	lds	r31, 0x024F	; 0x80024f <mtable+0x21>
    1572:	30 97       	sbiw	r30, 0x00	; 0
    1574:	39 f0       	breq	.+14     	; 0x1584 <__vector_21+0xb2>
    1576:	60 e1       	ldi	r22, 0x10	; 16
    1578:	70 e0       	ldi	r23, 0x00	; 0
    157a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <otable+0x20>
    157e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <otable+0x21>
    1582:	09 95       	icall
    1584:	0e 94 6e 03 	call	0x6dc	; 0x6dc <schedule>
    1588:	ff 91       	pop	r31
    158a:	ef 91       	pop	r30
    158c:	bf 91       	pop	r27
    158e:	af 91       	pop	r26
    1590:	9f 91       	pop	r25
    1592:	8f 91       	pop	r24
    1594:	7f 91       	pop	r23
    1596:	6f 91       	pop	r22
    1598:	5f 91       	pop	r21
    159a:	4f 91       	pop	r20
    159c:	3f 91       	pop	r19
    159e:	2f 91       	pop	r18
    15a0:	0f 90       	pop	r0
    15a2:	0f be       	out	0x3f, r0	; 63
    15a4:	0f 90       	pop	r0
    15a6:	1f 90       	pop	r1
    15a8:	18 95       	reti

000015aa <__vector_22>:
    15aa:	1f 92       	push	r1
    15ac:	0f 92       	push	r0
    15ae:	0f b6       	in	r0, 0x3f	; 63
    15b0:	0f 92       	push	r0
    15b2:	11 24       	eor	r1, r1
    15b4:	2f 93       	push	r18
    15b6:	3f 93       	push	r19
    15b8:	4f 93       	push	r20
    15ba:	5f 93       	push	r21
    15bc:	6f 93       	push	r22
    15be:	7f 93       	push	r23
    15c0:	8f 93       	push	r24
    15c2:	9f 93       	push	r25
    15c4:	af 93       	push	r26
    15c6:	bf 93       	push	r27
    15c8:	ef 93       	push	r30
    15ca:	ff 93       	push	r31
    15cc:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    15d0:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    15d4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    15d8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    15dc:	c9 01       	movw	r24, r18
    15de:	03 2e       	mov	r0, r19
    15e0:	00 0c       	add	r0, r0
    15e2:	aa 0b       	sbc	r26, r26
    15e4:	bb 0b       	sbc	r27, r27
    15e6:	dc 01       	movw	r26, r24
    15e8:	99 27       	eor	r25, r25
    15ea:	88 27       	eor	r24, r24
    15ec:	60 e0       	ldi	r22, 0x00	; 0
    15ee:	70 e0       	ldi	r23, 0x00	; 0
    15f0:	84 2b       	or	r24, r20
    15f2:	95 2b       	or	r25, r21
    15f4:	a6 2b       	or	r26, r22
    15f6:	b7 2b       	or	r27, r23
    15f8:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    15fc:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    1600:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    1604:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    1608:	b0 9b       	sbis	0x16, 0	; 22
    160a:	1b c0       	rjmp	.+54     	; 0x1642 <__vector_22+0x98>
    160c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1610:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1614:	c9 01       	movw	r24, r18
    1616:	01 96       	adiw	r24, 0x01	; 1
    1618:	09 2e       	mov	r0, r25
    161a:	00 0c       	add	r0, r0
    161c:	aa 0b       	sbc	r26, r26
    161e:	bb 0b       	sbc	r27, r27
    1620:	dc 01       	movw	r26, r24
    1622:	99 27       	eor	r25, r25
    1624:	88 27       	eor	r24, r24
    1626:	60 e0       	ldi	r22, 0x00	; 0
    1628:	70 e0       	ldi	r23, 0x00	; 0
    162a:	84 2b       	or	r24, r20
    162c:	95 2b       	or	r25, r21
    162e:	a6 2b       	or	r26, r22
    1630:	b7 2b       	or	r27, r23
    1632:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    1636:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    163a:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    163e:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    1642:	e0 91 50 02 	lds	r30, 0x0250	; 0x800250 <mtable+0x22>
    1646:	f0 91 51 02 	lds	r31, 0x0251	; 0x800251 <mtable+0x23>
    164a:	30 97       	sbiw	r30, 0x00	; 0
    164c:	39 f0       	breq	.+14     	; 0x165c <__vector_22+0xb2>
    164e:	61 e1       	ldi	r22, 0x11	; 17
    1650:	70 e0       	ldi	r23, 0x00	; 0
    1652:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <otable+0x22>
    1656:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <otable+0x23>
    165a:	09 95       	icall
    165c:	0e 94 6e 03 	call	0x6dc	; 0x6dc <schedule>
    1660:	ff 91       	pop	r31
    1662:	ef 91       	pop	r30
    1664:	bf 91       	pop	r27
    1666:	af 91       	pop	r26
    1668:	9f 91       	pop	r25
    166a:	8f 91       	pop	r24
    166c:	7f 91       	pop	r23
    166e:	6f 91       	pop	r22
    1670:	5f 91       	pop	r21
    1672:	4f 91       	pop	r20
    1674:	3f 91       	pop	r19
    1676:	2f 91       	pop	r18
    1678:	0f 90       	pop	r0
    167a:	0f be       	out	0x3f, r0	; 63
    167c:	0f 90       	pop	r0
    167e:	1f 90       	pop	r1
    1680:	18 95       	reti

00001682 <enqueueByDeadline>:
    1682:	ef 92       	push	r14
    1684:	ff 92       	push	r15
    1686:	0f 93       	push	r16
    1688:	1f 93       	push	r17
    168a:	cf 93       	push	r28
    168c:	df 93       	push	r29
    168e:	7b 01       	movw	r14, r22
    1690:	eb 01       	movw	r28, r22
    1692:	a8 81       	ld	r26, Y
    1694:	b9 81       	ldd	r27, Y+1	; 0x01
    1696:	10 97       	sbiw	r26, 0x00	; 0
    1698:	61 f1       	breq	.+88     	; 0x16f2 <enqueueByDeadline+0x70>
    169a:	fc 01       	movw	r30, r24
    169c:	06 81       	ldd	r16, Z+6	; 0x06
    169e:	17 81       	ldd	r17, Z+7	; 0x07
    16a0:	20 85       	ldd	r18, Z+8	; 0x08
    16a2:	31 85       	ldd	r19, Z+9	; 0x09
    16a4:	16 96       	adiw	r26, 0x06	; 6
    16a6:	4d 91       	ld	r20, X+
    16a8:	5d 91       	ld	r21, X+
    16aa:	6d 91       	ld	r22, X+
    16ac:	7c 91       	ld	r23, X
    16ae:	19 97       	sbiw	r26, 0x09	; 9
    16b0:	04 17       	cp	r16, r20
    16b2:	15 07       	cpc	r17, r21
    16b4:	26 07       	cpc	r18, r22
    16b6:	37 07       	cpc	r19, r23
    16b8:	14 f4       	brge	.+4      	; 0x16be <enqueueByDeadline+0x3c>
    16ba:	1b c0       	rjmp	.+54     	; 0x16f2 <enqueueByDeadline+0x70>
    16bc:	df 01       	movw	r26, r30
    16be:	ed 91       	ld	r30, X+
    16c0:	fc 91       	ld	r31, X
    16c2:	11 97       	sbiw	r26, 0x01	; 1
    16c4:	30 97       	sbiw	r30, 0x00	; 0
    16c6:	49 f0       	breq	.+18     	; 0x16da <enqueueByDeadline+0x58>
    16c8:	46 81       	ldd	r20, Z+6	; 0x06
    16ca:	57 81       	ldd	r21, Z+7	; 0x07
    16cc:	60 85       	ldd	r22, Z+8	; 0x08
    16ce:	71 85       	ldd	r23, Z+9	; 0x09
    16d0:	04 17       	cp	r16, r20
    16d2:	15 07       	cpc	r17, r21
    16d4:	26 07       	cpc	r18, r22
    16d6:	37 07       	cpc	r19, r23
    16d8:	8c f7       	brge	.-30     	; 0x16bc <enqueueByDeadline+0x3a>
    16da:	ec 01       	movw	r28, r24
    16dc:	f9 83       	std	Y+1, r31	; 0x01
    16de:	e8 83       	st	Y, r30
    16e0:	10 97       	sbiw	r26, 0x00	; 0
    16e2:	21 f4       	brne	.+8      	; 0x16ec <enqueueByDeadline+0x6a>
    16e4:	f7 01       	movw	r30, r14
    16e6:	91 83       	std	Z+1, r25	; 0x01
    16e8:	80 83       	st	Z, r24
    16ea:	07 c0       	rjmp	.+14     	; 0x16fa <enqueueByDeadline+0x78>
    16ec:	8d 93       	st	X+, r24
    16ee:	9c 93       	st	X, r25
    16f0:	04 c0       	rjmp	.+8      	; 0x16fa <enqueueByDeadline+0x78>
    16f2:	ec 01       	movw	r28, r24
    16f4:	b9 83       	std	Y+1, r27	; 0x01
    16f6:	a8 83       	st	Y, r26
    16f8:	f5 cf       	rjmp	.-22     	; 0x16e4 <enqueueByDeadline+0x62>
    16fa:	df 91       	pop	r29
    16fc:	cf 91       	pop	r28
    16fe:	1f 91       	pop	r17
    1700:	0f 91       	pop	r16
    1702:	ff 90       	pop	r15
    1704:	ef 90       	pop	r14
    1706:	08 95       	ret

00001708 <enqueueByBaseline>:
    1708:	ef 92       	push	r14
    170a:	ff 92       	push	r15
    170c:	0f 93       	push	r16
    170e:	1f 93       	push	r17
    1710:	cf 93       	push	r28
    1712:	df 93       	push	r29
    1714:	7b 01       	movw	r14, r22
    1716:	eb 01       	movw	r28, r22
    1718:	a8 81       	ld	r26, Y
    171a:	b9 81       	ldd	r27, Y+1	; 0x01
    171c:	10 97       	sbiw	r26, 0x00	; 0
    171e:	61 f1       	breq	.+88     	; 0x1778 <enqueueByBaseline+0x70>
    1720:	fc 01       	movw	r30, r24
    1722:	02 81       	ldd	r16, Z+2	; 0x02
    1724:	13 81       	ldd	r17, Z+3	; 0x03
    1726:	24 81       	ldd	r18, Z+4	; 0x04
    1728:	35 81       	ldd	r19, Z+5	; 0x05
    172a:	12 96       	adiw	r26, 0x02	; 2
    172c:	4d 91       	ld	r20, X+
    172e:	5d 91       	ld	r21, X+
    1730:	6d 91       	ld	r22, X+
    1732:	7c 91       	ld	r23, X
    1734:	15 97       	sbiw	r26, 0x05	; 5
    1736:	04 17       	cp	r16, r20
    1738:	15 07       	cpc	r17, r21
    173a:	26 07       	cpc	r18, r22
    173c:	37 07       	cpc	r19, r23
    173e:	14 f4       	brge	.+4      	; 0x1744 <enqueueByBaseline+0x3c>
    1740:	1b c0       	rjmp	.+54     	; 0x1778 <enqueueByBaseline+0x70>
    1742:	df 01       	movw	r26, r30
    1744:	ed 91       	ld	r30, X+
    1746:	fc 91       	ld	r31, X
    1748:	11 97       	sbiw	r26, 0x01	; 1
    174a:	30 97       	sbiw	r30, 0x00	; 0
    174c:	49 f0       	breq	.+18     	; 0x1760 <enqueueByBaseline+0x58>
    174e:	42 81       	ldd	r20, Z+2	; 0x02
    1750:	53 81       	ldd	r21, Z+3	; 0x03
    1752:	64 81       	ldd	r22, Z+4	; 0x04
    1754:	75 81       	ldd	r23, Z+5	; 0x05
    1756:	04 17       	cp	r16, r20
    1758:	15 07       	cpc	r17, r21
    175a:	26 07       	cpc	r18, r22
    175c:	37 07       	cpc	r19, r23
    175e:	8c f7       	brge	.-30     	; 0x1742 <enqueueByBaseline+0x3a>
    1760:	ec 01       	movw	r28, r24
    1762:	f9 83       	std	Y+1, r31	; 0x01
    1764:	e8 83       	st	Y, r30
    1766:	10 97       	sbiw	r26, 0x00	; 0
    1768:	21 f4       	brne	.+8      	; 0x1772 <enqueueByBaseline+0x6a>
    176a:	f7 01       	movw	r30, r14
    176c:	91 83       	std	Z+1, r25	; 0x01
    176e:	80 83       	st	Z, r24
    1770:	07 c0       	rjmp	.+14     	; 0x1780 <enqueueByBaseline+0x78>
    1772:	8d 93       	st	X+, r24
    1774:	9c 93       	st	X, r25
    1776:	04 c0       	rjmp	.+8      	; 0x1780 <enqueueByBaseline+0x78>
    1778:	ec 01       	movw	r28, r24
    177a:	b9 83       	std	Y+1, r27	; 0x01
    177c:	a8 83       	st	Y, r26
    177e:	f5 cf       	rjmp	.-22     	; 0x176a <enqueueByBaseline+0x62>
    1780:	df 91       	pop	r29
    1782:	cf 91       	pop	r28
    1784:	1f 91       	pop	r17
    1786:	0f 91       	pop	r16
    1788:	ff 90       	pop	r15
    178a:	ef 90       	pop	r14
    178c:	08 95       	ret

0000178e <dequeue>:
    178e:	dc 01       	movw	r26, r24
    1790:	ed 91       	ld	r30, X+
    1792:	fc 91       	ld	r31, X
    1794:	11 97       	sbiw	r26, 0x01	; 1
    1796:	30 97       	sbiw	r30, 0x00	; 0
    1798:	59 f4       	brne	.+22     	; 0x17b0 <dequeue+0x22>
    179a:	8f ef       	ldi	r24, 0xFF	; 255
    179c:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
    17a0:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
    17a4:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	83 bf       	out	0x33, r24	; 51
    17ac:	88 95       	sleep
    17ae:	fd cf       	rjmp	.-6      	; 0x17aa <dequeue+0x1c>
    17b0:	20 81       	ld	r18, Z
    17b2:	31 81       	ldd	r19, Z+1	; 0x01
    17b4:	2d 93       	st	X+, r18
    17b6:	3c 93       	st	X, r19
    17b8:	cf 01       	movw	r24, r30
    17ba:	08 95       	ret

000017bc <__vector_9>:
    17bc:	1f 92       	push	r1
    17be:	0f 92       	push	r0
    17c0:	0f b6       	in	r0, 0x3f	; 63
    17c2:	0f 92       	push	r0
    17c4:	11 24       	eor	r1, r1
    17c6:	2f 93       	push	r18
    17c8:	3f 93       	push	r19
    17ca:	4f 93       	push	r20
    17cc:	5f 93       	push	r21
    17ce:	6f 93       	push	r22
    17d0:	7f 93       	push	r23
    17d2:	8f 93       	push	r24
    17d4:	9f 93       	push	r25
    17d6:	ef 93       	push	r30
    17d8:	ff 93       	push	r31
    17da:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <overflows>
    17de:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <overflows+0x1>
    17e2:	01 96       	adiw	r24, 0x01	; 1
    17e4:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <overflows+0x1>
    17e8:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <overflows>
    17ec:	e0 91 92 01 	lds	r30, 0x0192	; 0x800192 <timerQ>
    17f0:	f0 91 93 01 	lds	r31, 0x0193	; 0x800193 <timerQ+0x1>
    17f4:	30 97       	sbiw	r30, 0x00	; 0
    17f6:	01 f1       	breq	.+64     	; 0x1838 <__vector_9+0x7c>
    17f8:	42 81       	ldd	r20, Z+2	; 0x02
    17fa:	53 81       	ldd	r21, Z+3	; 0x03
    17fc:	64 81       	ldd	r22, Z+4	; 0x04
    17fe:	75 81       	ldd	r23, Z+5	; 0x05
    1800:	86 17       	cp	r24, r22
    1802:	97 07       	cpc	r25, r23
    1804:	c9 f4       	brne	.+50     	; 0x1838 <__vector_9+0x7c>
    1806:	ca 01       	movw	r24, r20
    1808:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    180c:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1810:	42 1b       	sub	r20, r18
    1812:	53 0b       	sbc	r21, r19
    1814:	41 30       	cpi	r20, 0x01	; 1
    1816:	51 05       	cpc	r21, r1
    1818:	29 f4       	brne	.+10     	; 0x1824 <__vector_9+0x68>
    181a:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    181e:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1822:	01 96       	adiw	r24, 0x01	; 1
    1824:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1828:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    182c:	ef e6       	ldi	r30, 0x6F	; 111
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	80 81       	ld	r24, Z
    1832:	82 60       	ori	r24, 0x02	; 2
    1834:	80 83       	st	Z, r24
    1836:	05 c0       	rjmp	.+10     	; 0x1842 <__vector_9+0x86>
    1838:	ef e6       	ldi	r30, 0x6F	; 111
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	80 81       	ld	r24, Z
    183e:	8d 7f       	andi	r24, 0xFD	; 253
    1840:	80 83       	st	Z, r24
    1842:	ff 91       	pop	r31
    1844:	ef 91       	pop	r30
    1846:	9f 91       	pop	r25
    1848:	8f 91       	pop	r24
    184a:	7f 91       	pop	r23
    184c:	6f 91       	pop	r22
    184e:	5f 91       	pop	r21
    1850:	4f 91       	pop	r20
    1852:	3f 91       	pop	r19
    1854:	2f 91       	pop	r18
    1856:	0f 90       	pop	r0
    1858:	0f be       	out	0x3f, r0	; 63
    185a:	0f 90       	pop	r0
    185c:	1f 90       	pop	r1
    185e:	18 95       	reti

00001860 <__vector_7>:
    1860:	1f 92       	push	r1
    1862:	0f 92       	push	r0
    1864:	0f b6       	in	r0, 0x3f	; 63
    1866:	0f 92       	push	r0
    1868:	11 24       	eor	r1, r1
    186a:	cf 92       	push	r12
    186c:	df 92       	push	r13
    186e:	ef 92       	push	r14
    1870:	ff 92       	push	r15
    1872:	2f 93       	push	r18
    1874:	3f 93       	push	r19
    1876:	4f 93       	push	r20
    1878:	5f 93       	push	r21
    187a:	6f 93       	push	r22
    187c:	7f 93       	push	r23
    187e:	8f 93       	push	r24
    1880:	9f 93       	push	r25
    1882:	af 93       	push	r26
    1884:	bf 93       	push	r27
    1886:	ef 93       	push	r30
    1888:	ff 93       	push	r31
    188a:	c0 90 8c 01 	lds	r12, 0x018C	; 0x80018c <overflows>
    188e:	d0 90 8d 01 	lds	r13, 0x018D	; 0x80018d <overflows+0x1>
    1892:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1896:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    189a:	b0 99       	sbic	0x16, 0	; 22
    189c:	0f c0       	rjmp	.+30     	; 0x18bc <__vector_7+0x5c>
    189e:	0d 2c       	mov	r0, r13
    18a0:	00 0c       	add	r0, r0
    18a2:	ee 08       	sbc	r14, r14
    18a4:	ff 08       	sbc	r15, r15
    18a6:	d6 01       	movw	r26, r12
    18a8:	99 27       	eor	r25, r25
    18aa:	88 27       	eor	r24, r24
    18ac:	69 01       	movw	r12, r18
    18ae:	e1 2c       	mov	r14, r1
    18b0:	f1 2c       	mov	r15, r1
    18b2:	c8 2a       	or	r12, r24
    18b4:	d9 2a       	or	r13, r25
    18b6:	ea 2a       	or	r14, r26
    18b8:	fb 2a       	or	r15, r27
    18ba:	15 c0       	rjmp	.+42     	; 0x18e6 <__vector_7+0x86>
    18bc:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    18c0:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    18c4:	8f ef       	ldi	r24, 0xFF	; 255
    18c6:	c8 1a       	sub	r12, r24
    18c8:	d8 0a       	sbc	r13, r24
    18ca:	0d 2c       	mov	r0, r13
    18cc:	00 0c       	add	r0, r0
    18ce:	ee 08       	sbc	r14, r14
    18d0:	ff 08       	sbc	r15, r15
    18d2:	d6 01       	movw	r26, r12
    18d4:	99 27       	eor	r25, r25
    18d6:	88 27       	eor	r24, r24
    18d8:	69 01       	movw	r12, r18
    18da:	e1 2c       	mov	r14, r1
    18dc:	f1 2c       	mov	r15, r1
    18de:	c8 2a       	or	r12, r24
    18e0:	d9 2a       	or	r13, r25
    18e2:	ea 2a       	or	r14, r26
    18e4:	fb 2a       	or	r15, r27
    18e6:	e0 91 92 01 	lds	r30, 0x0192	; 0x800192 <timerQ>
    18ea:	f0 91 93 01 	lds	r31, 0x0193	; 0x800193 <timerQ+0x1>
    18ee:	30 97       	sbiw	r30, 0x00	; 0
    18f0:	09 f4       	brne	.+2      	; 0x18f4 <__vector_7+0x94>
    18f2:	42 c0       	rjmp	.+132    	; 0x1978 <__vector_7+0x118>
    18f4:	82 81       	ldd	r24, Z+2	; 0x02
    18f6:	93 81       	ldd	r25, Z+3	; 0x03
    18f8:	a4 81       	ldd	r26, Z+4	; 0x04
    18fa:	b5 81       	ldd	r27, Z+5	; 0x05
    18fc:	8c 19       	sub	r24, r12
    18fe:	9d 09       	sbc	r25, r13
    1900:	ae 09       	sbc	r26, r14
    1902:	bf 09       	sbc	r27, r15
    1904:	18 16       	cp	r1, r24
    1906:	19 06       	cpc	r1, r25
    1908:	1a 06       	cpc	r1, r26
    190a:	1b 06       	cpc	r1, r27
    190c:	ec f1       	brlt	.+122    	; 0x1988 <__vector_7+0x128>
    190e:	82 e9       	ldi	r24, 0x92	; 146
    1910:	91 e0       	ldi	r25, 0x01	; 1
    1912:	0e 94 c7 0b 	call	0x178e	; 0x178e <dequeue>
    1916:	64 e9       	ldi	r22, 0x94	; 148
    1918:	71 e0       	ldi	r23, 0x01	; 1
    191a:	0e 94 41 0b 	call	0x1682	; 0x1682 <enqueueByDeadline>
    191e:	e0 91 92 01 	lds	r30, 0x0192	; 0x800192 <timerQ>
    1922:	f0 91 93 01 	lds	r31, 0x0193	; 0x800193 <timerQ+0x1>
    1926:	30 97       	sbiw	r30, 0x00	; 0
    1928:	39 f1       	breq	.+78     	; 0x1978 <__vector_7+0x118>
    192a:	82 81       	ldd	r24, Z+2	; 0x02
    192c:	93 81       	ldd	r25, Z+3	; 0x03
    192e:	a4 81       	ldd	r26, Z+4	; 0x04
    1930:	b5 81       	ldd	r27, Z+5	; 0x05
    1932:	8c 19       	sub	r24, r12
    1934:	9d 09       	sbc	r25, r13
    1936:	ae 09       	sbc	r26, r14
    1938:	bf 09       	sbc	r27, r15
    193a:	18 16       	cp	r1, r24
    193c:	19 06       	cpc	r1, r25
    193e:	1a 06       	cpc	r1, r26
    1940:	1b 06       	cpc	r1, r27
    1942:	2c f7       	brge	.-54     	; 0x190e <__vector_7+0xae>
    1944:	21 c0       	rjmp	.+66     	; 0x1988 <__vector_7+0x128>
    1946:	9c 01       	movw	r18, r24
    1948:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    194c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1950:	84 1b       	sub	r24, r20
    1952:	95 0b       	sbc	r25, r21
    1954:	01 97       	sbiw	r24, 0x01	; 1
    1956:	31 f4       	brne	.+12     	; 0x1964 <__vector_7+0x104>
    1958:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    195c:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1960:	2f 5f       	subi	r18, 0xFF	; 255
    1962:	3f 4f       	sbci	r19, 0xFF	; 255
    1964:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1968:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    196c:	ef e6       	ldi	r30, 0x6F	; 111
    196e:	f0 e0       	ldi	r31, 0x00	; 0
    1970:	80 81       	ld	r24, Z
    1972:	82 60       	ori	r24, 0x02	; 2
    1974:	80 83       	st	Z, r24
    1976:	05 c0       	rjmp	.+10     	; 0x1982 <__vector_7+0x122>
    1978:	ef e6       	ldi	r30, 0x6F	; 111
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	80 81       	ld	r24, Z
    197e:	8d 7f       	andi	r24, 0xFD	; 253
    1980:	80 83       	st	Z, r24
    1982:	0e 94 6e 03 	call	0x6dc	; 0x6dc <schedule>
    1986:	0c c0       	rjmp	.+24     	; 0x19a0 <__vector_7+0x140>
    1988:	82 81       	ldd	r24, Z+2	; 0x02
    198a:	93 81       	ldd	r25, Z+3	; 0x03
    198c:	a4 81       	ldd	r26, Z+4	; 0x04
    198e:	b5 81       	ldd	r27, Z+5	; 0x05
    1990:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    1994:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    1998:	2a 17       	cp	r18, r26
    199a:	3b 07       	cpc	r19, r27
    199c:	69 f7       	brne	.-38     	; 0x1978 <__vector_7+0x118>
    199e:	d3 cf       	rjmp	.-90     	; 0x1946 <__vector_7+0xe6>
    19a0:	ff 91       	pop	r31
    19a2:	ef 91       	pop	r30
    19a4:	bf 91       	pop	r27
    19a6:	af 91       	pop	r26
    19a8:	9f 91       	pop	r25
    19aa:	8f 91       	pop	r24
    19ac:	7f 91       	pop	r23
    19ae:	6f 91       	pop	r22
    19b0:	5f 91       	pop	r21
    19b2:	4f 91       	pop	r20
    19b4:	3f 91       	pop	r19
    19b6:	2f 91       	pop	r18
    19b8:	ff 90       	pop	r15
    19ba:	ef 90       	pop	r14
    19bc:	df 90       	pop	r13
    19be:	cf 90       	pop	r12
    19c0:	0f 90       	pop	r0
    19c2:	0f be       	out	0x3f, r0	; 63
    19c4:	0f 90       	pop	r0
    19c6:	1f 90       	pop	r1
    19c8:	18 95       	reti

000019ca <async>:
    19ca:	3f 92       	push	r3
    19cc:	4f 92       	push	r4
    19ce:	5f 92       	push	r5
    19d0:	6f 92       	push	r6
    19d2:	7f 92       	push	r7
    19d4:	8f 92       	push	r8
    19d6:	9f 92       	push	r9
    19d8:	af 92       	push	r10
    19da:	bf 92       	push	r11
    19dc:	cf 92       	push	r12
    19de:	df 92       	push	r13
    19e0:	ef 92       	push	r14
    19e2:	ff 92       	push	r15
    19e4:	0f 93       	push	r16
    19e6:	1f 93       	push	r17
    19e8:	cf 93       	push	r28
    19ea:	df 93       	push	r29
    19ec:	2b 01       	movw	r4, r22
    19ee:	3c 01       	movw	r6, r24
    19f0:	49 01       	movw	r8, r18
    19f2:	5a 01       	movw	r10, r20
    19f4:	8f b7       	in	r24, 0x3f	; 63
    19f6:	80 78       	andi	r24, 0x80	; 128
    19f8:	38 2e       	mov	r3, r24
    19fa:	f8 94       	cli
    19fc:	82 e8       	ldi	r24, 0x82	; 130
    19fe:	91 e0       	ldi	r25, 0x01	; 1
    1a00:	0e 94 c7 0b 	call	0x178e	; 0x178e <dequeue>
    1a04:	ec 01       	movw	r28, r24
    1a06:	1b 87       	std	Y+11, r17	; 0x0b
    1a08:	0a 87       	std	Y+10, r16	; 0x0a
    1a0a:	fd 86       	std	Y+13, r15	; 0x0d
    1a0c:	ec 86       	std	Y+12, r14	; 0x0c
    1a0e:	df 86       	std	Y+15, r13	; 0x0f
    1a10:	ce 86       	std	Y+14, r12	; 0x0e
    1a12:	33 20       	and	r3, r3
    1a14:	61 f0       	breq	.+24     	; 0x1a2e <async+0x64>
    1a16:	e0 91 7c 01 	lds	r30, 0x017C	; 0x80017c <current>
    1a1a:	f0 91 7d 01 	lds	r31, 0x017D	; 0x80017d <current+0x1>
    1a1e:	02 80       	ldd	r0, Z+2	; 0x02
    1a20:	f3 81       	ldd	r31, Z+3	; 0x03
    1a22:	e0 2d       	mov	r30, r0
    1a24:	82 81       	ldd	r24, Z+2	; 0x02
    1a26:	93 81       	ldd	r25, Z+3	; 0x03
    1a28:	a4 81       	ldd	r26, Z+4	; 0x04
    1a2a:	b5 81       	ldd	r27, Z+5	; 0x05
    1a2c:	08 c0       	rjmp	.+16     	; 0x1a3e <async+0x74>
    1a2e:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <timestamp>
    1a32:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <timestamp+0x1>
    1a36:	a0 91 90 01 	lds	r26, 0x0190	; 0x800190 <timestamp+0x2>
    1a3a:	b0 91 91 01 	lds	r27, 0x0191	; 0x800191 <timestamp+0x3>
    1a3e:	48 0e       	add	r4, r24
    1a40:	59 1e       	adc	r5, r25
    1a42:	6a 1e       	adc	r6, r26
    1a44:	7b 1e       	adc	r7, r27
    1a46:	4a 82       	std	Y+2, r4	; 0x02
    1a48:	5b 82       	std	Y+3, r5	; 0x03
    1a4a:	6c 82       	std	Y+4, r6	; 0x04
    1a4c:	7d 82       	std	Y+5, r7	; 0x05
    1a4e:	18 14       	cp	r1, r8
    1a50:	19 04       	cpc	r1, r9
    1a52:	1a 04       	cpc	r1, r10
    1a54:	1b 04       	cpc	r1, r11
    1a56:	44 f0       	brlt	.+16     	; 0x1a68 <async+0x9e>
    1a58:	0f 2e       	mov	r0, r31
    1a5a:	88 24       	eor	r8, r8
    1a5c:	8a 94       	dec	r8
    1a5e:	98 2c       	mov	r9, r8
    1a60:	a8 2c       	mov	r10, r8
    1a62:	ff e7       	ldi	r31, 0x7F	; 127
    1a64:	bf 2e       	mov	r11, r31
    1a66:	f0 2d       	mov	r31, r0
    1a68:	84 0c       	add	r8, r4
    1a6a:	95 1c       	adc	r9, r5
    1a6c:	a6 1c       	adc	r10, r6
    1a6e:	b7 1c       	adc	r11, r7
    1a70:	8e 82       	std	Y+6, r8	; 0x06
    1a72:	9f 82       	std	Y+7, r9	; 0x07
    1a74:	a8 86       	std	Y+8, r10	; 0x08
    1a76:	b9 86       	std	Y+9, r11	; 0x09
    1a78:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <overflows>
    1a7c:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <overflows+0x1>
    1a80:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1a84:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1a88:	b0 99       	sbic	0x16, 0	; 22
    1a8a:	0e c0       	rjmp	.+28     	; 0x1aa8 <async+0xde>
    1a8c:	09 2e       	mov	r0, r25
    1a8e:	00 0c       	add	r0, r0
    1a90:	aa 0b       	sbc	r26, r26
    1a92:	bb 0b       	sbc	r27, r27
    1a94:	dc 01       	movw	r26, r24
    1a96:	99 27       	eor	r25, r25
    1a98:	88 27       	eor	r24, r24
    1a9a:	60 e0       	ldi	r22, 0x00	; 0
    1a9c:	70 e0       	ldi	r23, 0x00	; 0
    1a9e:	84 2b       	or	r24, r20
    1aa0:	95 2b       	or	r25, r21
    1aa2:	a6 2b       	or	r26, r22
    1aa4:	b7 2b       	or	r27, r23
    1aa6:	13 c0       	rjmp	.+38     	; 0x1ace <async+0x104>
    1aa8:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1aac:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1ab0:	01 96       	adiw	r24, 0x01	; 1
    1ab2:	09 2e       	mov	r0, r25
    1ab4:	00 0c       	add	r0, r0
    1ab6:	aa 0b       	sbc	r26, r26
    1ab8:	bb 0b       	sbc	r27, r27
    1aba:	dc 01       	movw	r26, r24
    1abc:	99 27       	eor	r25, r25
    1abe:	88 27       	eor	r24, r24
    1ac0:	a9 01       	movw	r20, r18
    1ac2:	60 e0       	ldi	r22, 0x00	; 0
    1ac4:	70 e0       	ldi	r23, 0x00	; 0
    1ac6:	84 2b       	or	r24, r20
    1ac8:	95 2b       	or	r25, r21
    1aca:	a6 2b       	or	r26, r22
    1acc:	b7 2b       	or	r27, r23
    1ace:	48 1a       	sub	r4, r24
    1ad0:	59 0a       	sbc	r5, r25
    1ad2:	6a 0a       	sbc	r6, r26
    1ad4:	7b 0a       	sbc	r7, r27
    1ad6:	14 14       	cp	r1, r4
    1ad8:	15 04       	cpc	r1, r5
    1ada:	16 04       	cpc	r1, r6
    1adc:	17 04       	cpc	r1, r7
    1ade:	ac f5       	brge	.+106    	; 0x1b4a <async+0x180>
    1ae0:	62 e9       	ldi	r22, 0x92	; 146
    1ae2:	71 e0       	ldi	r23, 0x01	; 1
    1ae4:	ce 01       	movw	r24, r28
    1ae6:	0e 94 84 0b 	call	0x1708	; 0x1708 <enqueueByBaseline>
    1aea:	e0 91 92 01 	lds	r30, 0x0192	; 0x800192 <timerQ>
    1aee:	f0 91 93 01 	lds	r31, 0x0193	; 0x800193 <timerQ+0x1>
    1af2:	30 97       	sbiw	r30, 0x00	; 0
    1af4:	21 f1       	breq	.+72     	; 0x1b3e <async+0x174>
    1af6:	82 81       	ldd	r24, Z+2	; 0x02
    1af8:	93 81       	ldd	r25, Z+3	; 0x03
    1afa:	a4 81       	ldd	r26, Z+4	; 0x04
    1afc:	b5 81       	ldd	r27, Z+5	; 0x05
    1afe:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    1b02:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    1b06:	2a 17       	cp	r18, r26
    1b08:	3b 07       	cpc	r19, r27
    1b0a:	c9 f4       	brne	.+50     	; 0x1b3e <async+0x174>
    1b0c:	9c 01       	movw	r18, r24
    1b0e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1b12:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1b16:	84 1b       	sub	r24, r20
    1b18:	95 0b       	sbc	r25, r21
    1b1a:	01 97       	sbiw	r24, 0x01	; 1
    1b1c:	31 f4       	brne	.+12     	; 0x1b2a <async+0x160>
    1b1e:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1b22:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1b26:	2f 5f       	subi	r18, 0xFF	; 255
    1b28:	3f 4f       	sbci	r19, 0xFF	; 255
    1b2a:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1b2e:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1b32:	ef e6       	ldi	r30, 0x6F	; 111
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	80 81       	ld	r24, Z
    1b38:	82 60       	ori	r24, 0x02	; 2
    1b3a:	80 83       	st	Z, r24
    1b3c:	41 c0       	rjmp	.+130    	; 0x1bc0 <async+0x1f6>
    1b3e:	ef e6       	ldi	r30, 0x6F	; 111
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	80 81       	ld	r24, Z
    1b44:	8d 7f       	andi	r24, 0xFD	; 253
    1b46:	80 83       	st	Z, r24
    1b48:	3b c0       	rjmp	.+118    	; 0x1bc0 <async+0x1f6>
    1b4a:	64 e9       	ldi	r22, 0x94	; 148
    1b4c:	71 e0       	ldi	r23, 0x01	; 1
    1b4e:	ce 01       	movw	r24, r28
    1b50:	0e 94 41 0b 	call	0x1682	; 0x1682 <enqueueByDeadline>
    1b54:	33 20       	and	r3, r3
    1b56:	b9 f1       	breq	.+110    	; 0x1bc6 <async+0x1fc>
    1b58:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <threadPool>
    1b5c:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <threadPool+0x1>
    1b60:	00 97       	sbiw	r24, 0x00	; 0
    1b62:	81 f1       	breq	.+96     	; 0x1bc4 <async+0x1fa>
    1b64:	e0 91 7e 01 	lds	r30, 0x017E	; 0x80017e <activeStack>
    1b68:	f0 91 7f 01 	lds	r31, 0x017F	; 0x80017f <activeStack+0x1>
    1b6c:	20 91 94 01 	lds	r18, 0x0194	; 0x800194 <msgQ>
    1b70:	30 91 95 01 	lds	r19, 0x0195	; 0x800195 <msgQ+0x1>
    1b74:	02 81       	ldd	r16, Z+2	; 0x02
    1b76:	13 81       	ldd	r17, Z+3	; 0x03
    1b78:	d9 01       	movw	r26, r18
    1b7a:	16 96       	adiw	r26, 0x06	; 6
    1b7c:	4d 91       	ld	r20, X+
    1b7e:	5d 91       	ld	r21, X+
    1b80:	6d 91       	ld	r22, X+
    1b82:	7c 91       	ld	r23, X
    1b84:	19 97       	sbiw	r26, 0x09	; 9
    1b86:	d8 01       	movw	r26, r16
    1b88:	16 96       	adiw	r26, 0x06	; 6
    1b8a:	0d 91       	ld	r16, X+
    1b8c:	1d 91       	ld	r17, X+
    1b8e:	2d 91       	ld	r18, X+
    1b90:	3c 91       	ld	r19, X
    1b92:	19 97       	sbiw	r26, 0x09	; 9
    1b94:	40 1b       	sub	r20, r16
    1b96:	51 0b       	sbc	r21, r17
    1b98:	62 0b       	sbc	r22, r18
    1b9a:	73 0b       	sbc	r23, r19
    1b9c:	9a f4       	brpl	.+38     	; 0x1bc4 <async+0x1fa>
    1b9e:	dc 01       	movw	r26, r24
    1ba0:	2d 91       	ld	r18, X+
    1ba2:	3c 91       	ld	r19, X
    1ba4:	11 97       	sbiw	r26, 0x01	; 1
    1ba6:	30 93 81 01 	sts	0x0181, r19	; 0x800181 <threadPool+0x1>
    1baa:	20 93 80 01 	sts	0x0180, r18	; 0x800180 <threadPool>
    1bae:	ed 93       	st	X+, r30
    1bb0:	fc 93       	st	X, r31
    1bb2:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <activeStack+0x1>
    1bb6:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <activeStack>
    1bba:	0e 94 4e 03 	call	0x69c	; 0x69c <dispatch>
    1bbe:	02 c0       	rjmp	.+4      	; 0x1bc4 <async+0x1fa>
    1bc0:	33 20       	and	r3, r3
    1bc2:	09 f0       	breq	.+2      	; 0x1bc6 <async+0x1fc>
    1bc4:	78 94       	sei
    1bc6:	ce 01       	movw	r24, r28
    1bc8:	df 91       	pop	r29
    1bca:	cf 91       	pop	r28
    1bcc:	1f 91       	pop	r17
    1bce:	0f 91       	pop	r16
    1bd0:	ff 90       	pop	r15
    1bd2:	ef 90       	pop	r14
    1bd4:	df 90       	pop	r13
    1bd6:	cf 90       	pop	r12
    1bd8:	bf 90       	pop	r11
    1bda:	af 90       	pop	r10
    1bdc:	9f 90       	pop	r9
    1bde:	8f 90       	pop	r8
    1be0:	7f 90       	pop	r7
    1be2:	6f 90       	pop	r6
    1be4:	5f 90       	pop	r5
    1be6:	4f 90       	pop	r4
    1be8:	3f 90       	pop	r3
    1bea:	08 95       	ret

00001bec <sync>:
    1bec:	cf 92       	push	r12
    1bee:	df 92       	push	r13
    1bf0:	ef 92       	push	r14
    1bf2:	ff 92       	push	r15
    1bf4:	0f 93       	push	r16
    1bf6:	1f 93       	push	r17
    1bf8:	cf 93       	push	r28
    1bfa:	df 93       	push	r29
    1bfc:	ec 01       	movw	r28, r24
    1bfe:	7b 01       	movw	r14, r22
    1c00:	6a 01       	movw	r12, r20
    1c02:	1f b7       	in	r17, 0x3f	; 63
    1c04:	10 78       	andi	r17, 0x80	; 128
    1c06:	f8 94       	cli
    1c08:	a8 81       	ld	r26, Y
    1c0a:	b9 81       	ldd	r27, Y+1	; 0x01
    1c0c:	10 97       	sbiw	r26, 0x00	; 0
    1c0e:	61 f1       	breq	.+88     	; 0x1c68 <sync+0x7c>
    1c10:	14 96       	adiw	r26, 0x04	; 4
    1c12:	ed 91       	ld	r30, X+
    1c14:	fc 91       	ld	r31, X
    1c16:	15 97       	sbiw	r26, 0x05	; 5
    1c18:	30 97       	sbiw	r30, 0x00	; 0
    1c1a:	41 f0       	breq	.+16     	; 0x1c2c <sync+0x40>
    1c1c:	a0 81       	ld	r26, Z
    1c1e:	b1 81       	ldd	r27, Z+1	; 0x01
    1c20:	14 96       	adiw	r26, 0x04	; 4
    1c22:	ed 91       	ld	r30, X+
    1c24:	fc 91       	ld	r31, X
    1c26:	15 97       	sbiw	r26, 0x05	; 5
    1c28:	30 97       	sbiw	r30, 0x00	; 0
    1c2a:	c1 f7       	brne	.-16     	; 0x1c1c <sync+0x30>
    1c2c:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <current>
    1c30:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <current+0x1>
    1c34:	2a 17       	cp	r18, r26
    1c36:	3b 07       	cpc	r19, r27
    1c38:	21 f0       	breq	.+8      	; 0x1c42 <sync+0x56>
    1c3a:	11 23       	and	r17, r17
    1c3c:	09 f4       	brne	.+2      	; 0x1c40 <sync+0x54>
    1c3e:	3d c0       	rjmp	.+122    	; 0x1cba <sync+0xce>
    1c40:	07 c0       	rjmp	.+14     	; 0x1c50 <sync+0x64>
    1c42:	11 23       	and	r17, r17
    1c44:	09 f4       	brne	.+2      	; 0x1c48 <sync+0x5c>
    1c46:	3c c0       	rjmp	.+120    	; 0x1cc0 <sync+0xd4>
    1c48:	78 94       	sei
    1c4a:	8f ef       	ldi	r24, 0xFF	; 255
    1c4c:	9f ef       	ldi	r25, 0xFF	; 255
    1c4e:	52 c0       	rjmp	.+164    	; 0x1cf4 <sync+0x108>
    1c50:	8a 81       	ldd	r24, Y+2	; 0x02
    1c52:	9b 81       	ldd	r25, Y+3	; 0x03
    1c54:	00 97       	sbiw	r24, 0x00	; 0
    1c56:	d1 f1       	breq	.+116    	; 0x1ccc <sync+0xe0>
    1c58:	fc 01       	movw	r30, r24
    1c5a:	15 82       	std	Z+5, r1	; 0x05
    1c5c:	14 82       	std	Z+4, r1	; 0x04
    1c5e:	36 c0       	rjmp	.+108    	; 0x1ccc <sync+0xe0>
    1c60:	78 94       	sei
    1c62:	80 e0       	ldi	r24, 0x00	; 0
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	46 c0       	rjmp	.+140    	; 0x1cf4 <sync+0x108>
    1c68:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <current>
    1c6c:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <current+0x1>
    1c70:	99 83       	std	Y+1, r25	; 0x01
    1c72:	88 83       	st	Y, r24
    1c74:	11 23       	and	r17, r17
    1c76:	29 f0       	breq	.+10     	; 0x1c82 <sync+0x96>
    1c78:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c7c:	01 97       	sbiw	r24, 0x01	; 1
    1c7e:	09 f0       	breq	.+2      	; 0x1c82 <sync+0x96>
    1c80:	78 94       	sei
    1c82:	b6 01       	movw	r22, r12
    1c84:	ce 01       	movw	r24, r28
    1c86:	f7 01       	movw	r30, r14
    1c88:	09 95       	icall
    1c8a:	f8 2e       	mov	r15, r24
    1c8c:	09 2f       	mov	r16, r25
    1c8e:	8f b7       	in	r24, 0x3f	; 63
    1c90:	f8 94       	cli
    1c92:	19 82       	std	Y+1, r1	; 0x01
    1c94:	18 82       	st	Y, r1
    1c96:	8a 81       	ldd	r24, Y+2	; 0x02
    1c98:	9b 81       	ldd	r25, Y+3	; 0x03
    1c9a:	82 30       	cpi	r24, 0x02	; 2
    1c9c:	91 05       	cpc	r25, r1
    1c9e:	38 f0       	brcs	.+14     	; 0x1cae <sync+0xc2>
    1ca0:	1b 82       	std	Y+3, r1	; 0x03
    1ca2:	1a 82       	std	Y+2, r1	; 0x02
    1ca4:	fc 01       	movw	r30, r24
    1ca6:	15 82       	std	Z+5, r1	; 0x05
    1ca8:	14 82       	std	Z+4, r1	; 0x04
    1caa:	0e 94 4e 03 	call	0x69c	; 0x69c <dispatch>
    1cae:	11 23       	and	r17, r17
    1cb0:	51 f0       	breq	.+20     	; 0x1cc6 <sync+0xda>
    1cb2:	78 94       	sei
    1cb4:	8f 2d       	mov	r24, r15
    1cb6:	90 2f       	mov	r25, r16
    1cb8:	1d c0       	rjmp	.+58     	; 0x1cf4 <sync+0x108>
    1cba:	8f ef       	ldi	r24, 0xFF	; 255
    1cbc:	9f ef       	ldi	r25, 0xFF	; 255
    1cbe:	1a c0       	rjmp	.+52     	; 0x1cf4 <sync+0x108>
    1cc0:	8f ef       	ldi	r24, 0xFF	; 255
    1cc2:	9f ef       	ldi	r25, 0xFF	; 255
    1cc4:	17 c0       	rjmp	.+46     	; 0x1cf4 <sync+0x108>
    1cc6:	8f 2d       	mov	r24, r15
    1cc8:	90 2f       	mov	r25, r16
    1cca:	14 c0       	rjmp	.+40     	; 0x1cf4 <sync+0x108>
    1ccc:	3b 83       	std	Y+3, r19	; 0x03
    1cce:	2a 83       	std	Y+2, r18	; 0x02
    1cd0:	f9 01       	movw	r30, r18
    1cd2:	d5 83       	std	Z+5, r29	; 0x05
    1cd4:	c4 83       	std	Z+4, r28	; 0x04
    1cd6:	cd 01       	movw	r24, r26
    1cd8:	0e 94 4e 03 	call	0x69c	; 0x69c <dispatch>
    1cdc:	e0 91 7c 01 	lds	r30, 0x017C	; 0x80017c <current>
    1ce0:	f0 91 7d 01 	lds	r31, 0x017D	; 0x80017d <current+0x1>
    1ce4:	82 81       	ldd	r24, Z+2	; 0x02
    1ce6:	93 81       	ldd	r25, Z+3	; 0x03
    1ce8:	89 2b       	or	r24, r25
    1cea:	09 f4       	brne	.+2      	; 0x1cee <sync+0x102>
    1cec:	b9 cf       	rjmp	.-142    	; 0x1c60 <sync+0x74>
    1cee:	f9 83       	std	Y+1, r31	; 0x01
    1cf0:	e8 83       	st	Y, r30
    1cf2:	c2 cf       	rjmp	.-124    	; 0x1c78 <sync+0x8c>
    1cf4:	df 91       	pop	r29
    1cf6:	cf 91       	pop	r28
    1cf8:	1f 91       	pop	r17
    1cfa:	0f 91       	pop	r16
    1cfc:	ff 90       	pop	r15
    1cfe:	ef 90       	pop	r14
    1d00:	df 90       	pop	r13
    1d02:	cf 90       	pop	r12
    1d04:	08 95       	ret

00001d06 <run>:
    1d06:	00 91 7c 01 	lds	r16, 0x017C	; 0x80017c <current>
    1d0a:	10 91 7d 01 	lds	r17, 0x017D	; 0x80017d <current+0x1>
    1d0e:	84 e9       	ldi	r24, 0x94	; 148
    1d10:	91 e0       	ldi	r25, 0x01	; 1
    1d12:	0e 94 c7 0b 	call	0x178e	; 0x178e <dequeue>
    1d16:	ec 01       	movw	r28, r24
    1d18:	d8 01       	movw	r26, r16
    1d1a:	13 96       	adiw	r26, 0x03	; 3
    1d1c:	9c 93       	st	X, r25
    1d1e:	8e 93       	st	-X, r24
    1d20:	12 97       	sbiw	r26, 0x02	; 2
    1d22:	78 94       	sei
    1d24:	4e 85       	ldd	r20, Y+14	; 0x0e
    1d26:	5f 85       	ldd	r21, Y+15	; 0x0f
    1d28:	6c 85       	ldd	r22, Y+12	; 0x0c
    1d2a:	7d 85       	ldd	r23, Y+13	; 0x0d
    1d2c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d2e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d30:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <sync>
    1d34:	8f b7       	in	r24, 0x3f	; 63
    1d36:	f8 94       	cli
    1d38:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <msgPool>
    1d3c:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <msgPool+0x1>
    1d40:	99 83       	std	Y+1, r25	; 0x01
    1d42:	88 83       	st	Y, r24
    1d44:	d0 93 83 01 	sts	0x0183, r29	; 0x800183 <msgPool+0x1>
    1d48:	c0 93 82 01 	sts	0x0182, r28	; 0x800182 <msgPool>
    1d4c:	e0 91 7e 01 	lds	r30, 0x017E	; 0x80017e <activeStack>
    1d50:	f0 91 7f 01 	lds	r31, 0x017F	; 0x80017f <activeStack+0x1>
    1d54:	00 81       	ld	r16, Z
    1d56:	11 81       	ldd	r17, Z+1	; 0x01
    1d58:	e8 01       	movw	r28, r16
    1d5a:	2a 81       	ldd	r18, Y+2	; 0x02
    1d5c:	3b 81       	ldd	r19, Y+3	; 0x03
    1d5e:	a0 91 94 01 	lds	r26, 0x0194	; 0x800194 <msgQ>
    1d62:	b0 91 95 01 	lds	r27, 0x0195	; 0x800195 <msgQ+0x1>
    1d66:	10 97       	sbiw	r26, 0x00	; 0
    1d68:	c1 f0       	breq	.+48     	; 0x1d9a <run+0x94>
    1d6a:	21 15       	cp	r18, r1
    1d6c:	31 05       	cpc	r19, r1
    1d6e:	59 f2       	breq	.-106    	; 0x1d06 <run>
    1d70:	16 96       	adiw	r26, 0x06	; 6
    1d72:	8d 91       	ld	r24, X+
    1d74:	9d 91       	ld	r25, X+
    1d76:	0d 90       	ld	r0, X+
    1d78:	bc 91       	ld	r27, X
    1d7a:	a0 2d       	mov	r26, r0
    1d7c:	e9 01       	movw	r28, r18
    1d7e:	4e 81       	ldd	r20, Y+6	; 0x06
    1d80:	5f 81       	ldd	r21, Y+7	; 0x07
    1d82:	68 85       	ldd	r22, Y+8	; 0x08
    1d84:	79 85       	ldd	r23, Y+9	; 0x09
    1d86:	84 1b       	sub	r24, r20
    1d88:	95 0b       	sbc	r25, r21
    1d8a:	a6 0b       	sbc	r26, r22
    1d8c:	b7 0b       	sbc	r27, r23
    1d8e:	18 16       	cp	r1, r24
    1d90:	19 06       	cpc	r1, r25
    1d92:	1a 06       	cpc	r1, r26
    1d94:	1b 06       	cpc	r1, r27
    1d96:	0c f0       	brlt	.+2      	; 0x1d9a <run+0x94>
    1d98:	b6 cf       	rjmp	.-148    	; 0x1d06 <run>
    1d9a:	10 93 7f 01 	sts	0x017F, r17	; 0x80017f <activeStack+0x1>
    1d9e:	00 93 7e 01 	sts	0x017E, r16	; 0x80017e <activeStack>
    1da2:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <threadPool>
    1da6:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <threadPool+0x1>
    1daa:	91 83       	std	Z+1, r25	; 0x01
    1dac:	80 83       	st	Z, r24
    1dae:	f0 93 81 01 	sts	0x0181, r31	; 0x800181 <threadPool+0x1>
    1db2:	e0 93 80 01 	sts	0x0180, r30	; 0x800180 <threadPool>
    1db6:	a0 91 7e 01 	lds	r26, 0x017E	; 0x80017e <activeStack>
    1dba:	b0 91 7f 01 	lds	r27, 0x017F	; 0x80017f <activeStack+0x1>
    1dbe:	14 96       	adiw	r26, 0x04	; 4
    1dc0:	ed 91       	ld	r30, X+
    1dc2:	fc 91       	ld	r31, X
    1dc4:	15 97       	sbiw	r26, 0x05	; 5
    1dc6:	30 97       	sbiw	r30, 0x00	; 0
    1dc8:	41 f0       	breq	.+16     	; 0x1dda <run+0xd4>
    1dca:	a0 81       	ld	r26, Z
    1dcc:	b1 81       	ldd	r27, Z+1	; 0x01
    1dce:	14 96       	adiw	r26, 0x04	; 4
    1dd0:	ed 91       	ld	r30, X+
    1dd2:	fc 91       	ld	r31, X
    1dd4:	15 97       	sbiw	r26, 0x05	; 5
    1dd6:	30 97       	sbiw	r30, 0x00	; 0
    1dd8:	c1 f7       	brne	.-16     	; 0x1dca <run+0xc4>
    1dda:	cd 01       	movw	r24, r26
    1ddc:	0e 94 4e 03 	call	0x69c	; 0x69c <dispatch>
    1de0:	92 cf       	rjmp	.-220    	; 0x1d06 <run>

00001de2 <install>:
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    if (i >= 0 && i < N_VECTORS) {
    1de2:	42 31       	cpi	r20, 0x12	; 18
    1de4:	b8 f4       	brcc	.+46     	; 0x1e14 <install+0x32>
        char status;
        DISABLE(status);
    1de6:	2f b7       	in	r18, 0x3f	; 63
    1de8:	f8 94       	cli
        otable[i] = obj;
    1dea:	50 e0       	ldi	r21, 0x00	; 0
    1dec:	44 0f       	add	r20, r20
    1dee:	55 1f       	adc	r21, r21
    1df0:	fa 01       	movw	r30, r20
    1df2:	ea 56       	subi	r30, 0x6A	; 106
    1df4:	fe 4f       	sbci	r31, 0xFE	; 254
    1df6:	91 83       	std	Z+1, r25	; 0x01
    1df8:	80 83       	st	Z, r24
        mtable[i] = m;
    1dfa:	fa 01       	movw	r30, r20
    1dfc:	e2 5d       	subi	r30, 0xD2	; 210
    1dfe:	fd 4f       	sbci	r31, 0xFD	; 253
    1e00:	71 83       	std	Z+1, r23	; 0x01
    1e02:	60 83       	st	Z, r22
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    1e04:	41 e0       	ldi	r20, 0x01	; 1
    1e06:	50 e0       	ldi	r21, 0x00	; 0
    1e08:	fc 01       	movw	r30, r24
    1e0a:	53 83       	std	Z+3, r21	; 0x03
    1e0c:	42 83       	std	Z+2, r20	; 0x02
        ENABLE(status);
    1e0e:	22 23       	and	r18, r18
    1e10:	0c f4       	brge	.+2      	; 0x1e14 <install+0x32>
    1e12:	78 94       	sei
    1e14:	08 95       	ret

00001e16 <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    1e16:	8c 01       	movw	r16, r24
    1e18:	7b 01       	movw	r14, r22
    1e1a:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    1e1c:	8f b7       	in	r24, 0x3f	; 63
    1e1e:	f8 94       	cli
    initialize();
    1e20:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <initialize>
    ENABLE(1);
    1e24:	78 94       	sei
    if (m != NULL)
    1e26:	e1 14       	cp	r14, r1
    1e28:	f1 04       	cpc	r15, r1
    1e2a:	41 f0       	breq	.+16     	; 0x1e3c <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    1e2c:	20 e0       	ldi	r18, 0x00	; 0
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	a9 01       	movw	r20, r18
    1e32:	60 e0       	ldi	r22, 0x00	; 0
    1e34:	70 e0       	ldi	r23, 0x00	; 0
    1e36:	cb 01       	movw	r24, r22
    1e38:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <async>
    DISABLE(status);
    1e3c:	8f b7       	in	r24, 0x3f	; 63
    1e3e:	f8 94       	cli
        }
    }
}

static void idle(void) {
    schedule();
    1e40:	0e 94 6e 03 	call	0x6dc	; 0x6dc <schedule>
    ENABLE(1);
    1e44:	78 94       	sei
    while (1) {
        SLEEP();
    1e46:	81 e0       	ldi	r24, 0x01	; 1
    1e48:	83 bf       	out	0x33, r24	; 51
    1e4a:	88 95       	sleep
    1e4c:	fd cf       	rjmp	.-6      	; 0x1e48 <tinytimber+0x32>

00001e4e <__divmodsi4>:
    1e4e:	05 2e       	mov	r0, r21
    1e50:	97 fb       	bst	r25, 7
    1e52:	1e f4       	brtc	.+6      	; 0x1e5a <__divmodsi4+0xc>
    1e54:	00 94       	com	r0
    1e56:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <__negsi2>
    1e5a:	57 fd       	sbrc	r21, 7
    1e5c:	07 d0       	rcall	.+14     	; 0x1e6c <__divmodsi4_neg2>
    1e5e:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <__udivmodsi4>
    1e62:	07 fc       	sbrc	r0, 7
    1e64:	03 d0       	rcall	.+6      	; 0x1e6c <__divmodsi4_neg2>
    1e66:	4e f4       	brtc	.+18     	; 0x1e7a <__divmodsi4_exit>
    1e68:	0c 94 3e 0f 	jmp	0x1e7c	; 0x1e7c <__negsi2>

00001e6c <__divmodsi4_neg2>:
    1e6c:	50 95       	com	r21
    1e6e:	40 95       	com	r20
    1e70:	30 95       	com	r19
    1e72:	21 95       	neg	r18
    1e74:	3f 4f       	sbci	r19, 0xFF	; 255
    1e76:	4f 4f       	sbci	r20, 0xFF	; 255
    1e78:	5f 4f       	sbci	r21, 0xFF	; 255

00001e7a <__divmodsi4_exit>:
    1e7a:	08 95       	ret

00001e7c <__negsi2>:
    1e7c:	90 95       	com	r25
    1e7e:	80 95       	com	r24
    1e80:	70 95       	com	r23
    1e82:	61 95       	neg	r22
    1e84:	7f 4f       	sbci	r23, 0xFF	; 255
    1e86:	8f 4f       	sbci	r24, 0xFF	; 255
    1e88:	9f 4f       	sbci	r25, 0xFF	; 255
    1e8a:	08 95       	ret

00001e8c <__tablejump2__>:
    1e8c:	ee 0f       	add	r30, r30
    1e8e:	ff 1f       	adc	r31, r31
    1e90:	05 90       	lpm	r0, Z+
    1e92:	f4 91       	lpm	r31, Z
    1e94:	e0 2d       	mov	r30, r0
    1e96:	09 94       	ijmp

00001e98 <__udivmodsi4>:
    1e98:	a1 e2       	ldi	r26, 0x21	; 33
    1e9a:	1a 2e       	mov	r1, r26
    1e9c:	aa 1b       	sub	r26, r26
    1e9e:	bb 1b       	sub	r27, r27
    1ea0:	fd 01       	movw	r30, r26
    1ea2:	0d c0       	rjmp	.+26     	; 0x1ebe <__udivmodsi4_ep>

00001ea4 <__udivmodsi4_loop>:
    1ea4:	aa 1f       	adc	r26, r26
    1ea6:	bb 1f       	adc	r27, r27
    1ea8:	ee 1f       	adc	r30, r30
    1eaa:	ff 1f       	adc	r31, r31
    1eac:	a2 17       	cp	r26, r18
    1eae:	b3 07       	cpc	r27, r19
    1eb0:	e4 07       	cpc	r30, r20
    1eb2:	f5 07       	cpc	r31, r21
    1eb4:	20 f0       	brcs	.+8      	; 0x1ebe <__udivmodsi4_ep>
    1eb6:	a2 1b       	sub	r26, r18
    1eb8:	b3 0b       	sbc	r27, r19
    1eba:	e4 0b       	sbc	r30, r20
    1ebc:	f5 0b       	sbc	r31, r21

00001ebe <__udivmodsi4_ep>:
    1ebe:	66 1f       	adc	r22, r22
    1ec0:	77 1f       	adc	r23, r23
    1ec2:	88 1f       	adc	r24, r24
    1ec4:	99 1f       	adc	r25, r25
    1ec6:	1a 94       	dec	r1
    1ec8:	69 f7       	brne	.-38     	; 0x1ea4 <__udivmodsi4_loop>
    1eca:	60 95       	com	r22
    1ecc:	70 95       	com	r23
    1ece:	80 95       	com	r24
    1ed0:	90 95       	com	r25
    1ed2:	9b 01       	movw	r18, r22
    1ed4:	ac 01       	movw	r20, r24
    1ed6:	bd 01       	movw	r22, r26
    1ed8:	cf 01       	movw	r24, r30
    1eda:	08 95       	ret

00001edc <setjmp>:
    1edc:	dc 01       	movw	r26, r24
    1ede:	2d 92       	st	X+, r2
    1ee0:	3d 92       	st	X+, r3
    1ee2:	4d 92       	st	X+, r4
    1ee4:	5d 92       	st	X+, r5
    1ee6:	6d 92       	st	X+, r6
    1ee8:	7d 92       	st	X+, r7
    1eea:	8d 92       	st	X+, r8
    1eec:	9d 92       	st	X+, r9
    1eee:	ad 92       	st	X+, r10
    1ef0:	bd 92       	st	X+, r11
    1ef2:	cd 92       	st	X+, r12
    1ef4:	dd 92       	st	X+, r13
    1ef6:	ed 92       	st	X+, r14
    1ef8:	fd 92       	st	X+, r15
    1efa:	0d 93       	st	X+, r16
    1efc:	1d 93       	st	X+, r17
    1efe:	cd 93       	st	X+, r28
    1f00:	dd 93       	st	X+, r29
    1f02:	ff 91       	pop	r31
    1f04:	ef 91       	pop	r30
    1f06:	8d b7       	in	r24, 0x3d	; 61
    1f08:	8d 93       	st	X+, r24
    1f0a:	8e b7       	in	r24, 0x3e	; 62
    1f0c:	8d 93       	st	X+, r24
    1f0e:	8f b7       	in	r24, 0x3f	; 63
    1f10:	8d 93       	st	X+, r24
    1f12:	ed 93       	st	X+, r30
    1f14:	fd 93       	st	X+, r31
    1f16:	88 27       	eor	r24, r24
    1f18:	99 27       	eor	r25, r25
    1f1a:	09 94       	ijmp

00001f1c <longjmp>:
    1f1c:	dc 01       	movw	r26, r24
    1f1e:	cb 01       	movw	r24, r22
    1f20:	81 30       	cpi	r24, 0x01	; 1
    1f22:	91 05       	cpc	r25, r1
    1f24:	81 1d       	adc	r24, r1
    1f26:	2d 90       	ld	r2, X+
    1f28:	3d 90       	ld	r3, X+
    1f2a:	4d 90       	ld	r4, X+
    1f2c:	5d 90       	ld	r5, X+
    1f2e:	6d 90       	ld	r6, X+
    1f30:	7d 90       	ld	r7, X+
    1f32:	8d 90       	ld	r8, X+
    1f34:	9d 90       	ld	r9, X+
    1f36:	ad 90       	ld	r10, X+
    1f38:	bd 90       	ld	r11, X+
    1f3a:	cd 90       	ld	r12, X+
    1f3c:	dd 90       	ld	r13, X+
    1f3e:	ed 90       	ld	r14, X+
    1f40:	fd 90       	ld	r15, X+
    1f42:	0d 91       	ld	r16, X+
    1f44:	1d 91       	ld	r17, X+
    1f46:	cd 91       	ld	r28, X+
    1f48:	dd 91       	ld	r29, X+
    1f4a:	ed 91       	ld	r30, X+
    1f4c:	fd 91       	ld	r31, X+
    1f4e:	0d 90       	ld	r0, X+
    1f50:	f8 94       	cli
    1f52:	fe bf       	out	0x3e, r31	; 62
    1f54:	0f be       	out	0x3f, r0	; 63
    1f56:	ed bf       	out	0x3d, r30	; 61
    1f58:	ed 91       	ld	r30, X+
    1f5a:	fd 91       	ld	r31, X+
    1f5c:	09 94       	ijmp

00001f5e <_exit>:
    1f5e:	f8 94       	cli

00001f60 <__stop_program>:
    1f60:	ff cf       	rjmp	.-2      	; 0x1f60 <__stop_program>
