
lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000088  00800100  000022de  00002372  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000022de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000035f  00800188  00800188  000023fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000023fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000242c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000268  00000000  00000000  0000246c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002d42  00000000  00000000  000026d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000113a  00000000  00000000  00005416  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000166b  00000000  00000000  00006550  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c14  00000000  00000000  00007bbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a59  00000000  00000000  000087d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000028b7  00000000  00000000  00009229  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000208  00000000  00000000  0000bae0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 ee 04 	jmp	0x9dc	; 0x9dc <__vector_1>
       8:	0c 94 5a 05 	jmp	0xab4	; 0xab4 <__vector_2>
       c:	0c 94 c6 05 	jmp	0xb8c	; 0xb8c <__vector_3>
      10:	0c 94 32 06 	jmp	0xc64	; 0xc64 <__vector_4>
      14:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__vector_5>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 75 0d 	jmp	0x1aea	; 0x1aea <__vector_7>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 23 0d 	jmp	0x1a46	; 0x1a46 <__vector_9>
      28:	0c 94 0a 07 	jmp	0xe14	; 0xe14 <__vector_10>
      2c:	0c 94 76 07 	jmp	0xeec	; 0xeec <__vector_11>
      30:	0c 94 e2 07 	jmp	0xfc4	; 0xfc4 <__vector_12>
      34:	0c 94 4e 08 	jmp	0x109c	; 0x109c <__vector_13>
      38:	0c 94 ba 08 	jmp	0x1174	; 0x1174 <__vector_14>
      3c:	0c 94 26 09 	jmp	0x124c	; 0x124c <__vector_15>
      40:	0c 94 92 09 	jmp	0x1324	; 0x1324 <__vector_16>
      44:	0c 94 fe 09 	jmp	0x13fc	; 0x13fc <__vector_17>
      48:	0c 94 6a 0a 	jmp	0x14d4	; 0x14d4 <__vector_18>
      4c:	0c 94 d6 0a 	jmp	0x15ac	; 0x15ac <__vector_19>
      50:	0c 94 42 0b 	jmp	0x1684	; 0x1684 <__vector_20>
      54:	0c 94 ae 0b 	jmp	0x175c	; 0x175c <__vector_21>
      58:	0c 94 1a 0c 	jmp	0x1834	; 0x1834 <__vector_22>
      5c:	8c 00       	.word	0x008c	; ????
      5e:	6e 00       	.word	0x006e	; ????
      60:	71 00       	.word	0x0071	; ????
      62:	74 00       	.word	0x0074	; ????
      64:	77 00       	.word	0x0077	; ????
      66:	7a 00       	.word	0x007a	; ????
      68:	7d 00       	.word	0x007d	; ????
      6a:	80 00       	.word	0x0080	; ????
      6c:	83 00       	.word	0x0083	; ????
      6e:	86 00       	.word	0x0086	; ????

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	11 e0       	ldi	r17, 0x01	; 1
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	ee ed       	ldi	r30, 0xDE	; 222
      84:	f2 e2       	ldi	r31, 0x22	; 34
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	a8 38       	cpi	r26, 0x88	; 136
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	24 e0       	ldi	r18, 0x04	; 4
      94:	a8 e8       	ldi	r26, 0x88	; 136
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	a7 3e       	cpi	r26, 0xE7	; 231
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <main>
      a6:	0c 94 6d 11 	jmp	0x22da	; 0x22da <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <LCD_init>:
#include "PulseGen.h"
#include "TinyTimber.h"

void LCD_init() {
	// LCD(Contrast Control Register), LCD(Display Configuration)(000): 300 s, LCD(Contrast Control)(1111): 3.35 V
	LCDCCR = (0 << LCDDC0) | (0 << LCDDC1) | (0 << LCDDC2) | (1 << LCDCC0) | (1 << LCDCC1) | (1 << LCDCC2) | (1 << LCDCC3);
      ae:	8f e0       	ldi	r24, 0x0F	; 15
      b0:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__DATA_REGION_ORIGIN__+0x87>
	// LCDCS: asynchronous clock, LCDMUX(11): D=1/4, B=1/3, LCD(Port Mask): 25 segments
	LCDCRB = (1 << LCDCS) | (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM2) | (1 << LCDPM1) | (1 << LCDPM0);
      b4:	87 eb       	ldi	r24, 0xB7	; 183
      b6:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
	// LCD(Clock Divide)(111): (D=8) 32Hz
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);
      ba:	87 e0       	ldi	r24, 0x07	; 7
      bc:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__DATA_REGION_ORIGIN__+0x86>
	// LCD(Control and Status Register A), LCD(Enable): True, LCD(Low Power Waveform): True, (no frame interrupt, no blanking)
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
      c0:	80 ec       	ldi	r24, 0xC0	; 192
      c2:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
      c6:	08 95       	ret

000000c8 <getSegmentForChar>:
int nine[] = {0b0001, 0b0101, 0b1011, 0b0001};
int none[] = {0b0000, 0b0000, 0b0000, 0b0000};
	
// Returns wall of data based on char input ('0' = 48 (char))
int* getSegmentForChar(char ch) {
	switch (ch) {
      c8:	90 e0       	ldi	r25, 0x00	; 0
      ca:	fc 01       	movw	r30, r24
      cc:	f0 97       	sbiw	r30, 0x30	; 48
      ce:	ea 30       	cpi	r30, 0x0A	; 10
      d0:	f1 05       	cpc	r31, r1
      d2:	f8 f4       	brcc	.+62     	; 0x112 <getSegmentForChar+0x4a>
      d4:	e2 5d       	subi	r30, 0xD2	; 210
      d6:	ff 4f       	sbci	r31, 0xFF	; 255
      d8:	0c 94 f0 10 	jmp	0x21e0	; 0x21e0 <__tablejump2__>
		case '0': return zero;
		case '1': return one;
      dc:	80 e4       	ldi	r24, 0x40	; 64
      de:	91 e0       	ldi	r25, 0x01	; 1
      e0:	08 95       	ret
		case '2': return two;
      e2:	88 e3       	ldi	r24, 0x38	; 56
      e4:	91 e0       	ldi	r25, 0x01	; 1
      e6:	08 95       	ret
		case '3': return three;
      e8:	80 e3       	ldi	r24, 0x30	; 48
      ea:	91 e0       	ldi	r25, 0x01	; 1
      ec:	08 95       	ret
		case '4': return four;
      ee:	88 e2       	ldi	r24, 0x28	; 40
      f0:	91 e0       	ldi	r25, 0x01	; 1
      f2:	08 95       	ret
		case '5': return five;
      f4:	80 e2       	ldi	r24, 0x20	; 32
      f6:	91 e0       	ldi	r25, 0x01	; 1
      f8:	08 95       	ret
		case '6': return six;
      fa:	88 e1       	ldi	r24, 0x18	; 24
      fc:	91 e0       	ldi	r25, 0x01	; 1
      fe:	08 95       	ret
		case '7': return seven;
     100:	80 e1       	ldi	r24, 0x10	; 16
     102:	91 e0       	ldi	r25, 0x01	; 1
     104:	08 95       	ret
		case '8': return eight;
     106:	88 e0       	ldi	r24, 0x08	; 8
     108:	91 e0       	ldi	r25, 0x01	; 1
     10a:	08 95       	ret
		case '9': return nine;
     10c:	80 e0       	ldi	r24, 0x00	; 0
     10e:	91 e0       	ldi	r25, 0x01	; 1
     110:	08 95       	ret
		default:  return none;
     112:	88 e8       	ldi	r24, 0x88	; 136
     114:	91 e0       	ldi	r25, 0x01	; 1
     116:	08 95       	ret
int none[] = {0b0000, 0b0000, 0b0000, 0b0000};
	
// Returns wall of data based on char input ('0' = 48 (char))
int* getSegmentForChar(char ch) {
	switch (ch) {
		case '0': return zero;
     118:	88 e4       	ldi	r24, 0x48	; 72
     11a:	91 e0       	ldi	r25, 0x01	; 1
		case '7': return seven;
		case '8': return eight;
		case '9': return nine;
		default:  return none;
	}
}
     11c:	08 95       	ret

0000011e <writeChar>:

// Write a char ch at position pos
void writeChar(char ch, uint8_t pos) {
     11e:	cf 93       	push	r28
	// Check if outside range
	if (pos > 4 || pos < 0) return;	
     120:	65 30       	cpi	r22, 0x05	; 5
     122:	08 f0       	brcs	.+2      	; 0x126 <writeChar+0x8>
     124:	e4 c0       	rjmp	.+456    	; 0x2ee <writeChar+0x1d0>
     126:	c6 2f       	mov	r28, r22

	// Get correct char data
	int* segment = getSegmentForChar(ch);
     128:	0e 94 64 00 	call	0xc8	; 0xc8 <getSegmentForChar>
     12c:	fc 01       	movw	r30, r24
	
	// Chose position
	switch (pos) {
     12e:	c2 30       	cpi	r28, 0x02	; 2
     130:	09 f4       	brne	.+2      	; 0x134 <writeChar+0x16>
     132:	67 c0       	rjmp	.+206    	; 0x202 <writeChar+0xe4>
     134:	28 f4       	brcc	.+10     	; 0x140 <writeChar+0x22>
     136:	cc 23       	and	r28, r28
     138:	51 f0       	breq	.+20     	; 0x14e <writeChar+0x30>
     13a:	c1 30       	cpi	r28, 0x01	; 1
     13c:	29 f1       	breq	.+74     	; 0x188 <writeChar+0x6a>
     13e:	d7 c0       	rjmp	.+430    	; 0x2ee <writeChar+0x1d0>
     140:	c3 30       	cpi	r28, 0x03	; 3
     142:	09 f4       	brne	.+2      	; 0x146 <writeChar+0x28>
     144:	7b c0       	rjmp	.+246    	; 0x23c <writeChar+0x11e>
     146:	c4 30       	cpi	r28, 0x04	; 4
     148:	09 f4       	brne	.+2      	; 0x14c <writeChar+0x2e>
     14a:	b5 c0       	rjmp	.+362    	; 0x2b6 <writeChar+0x198>
     14c:	d0 c0       	rjmp	.+416    	; 0x2ee <writeChar+0x1d0>
		case 0:
			// Segment start at 0, 5, 10, 15, higher 4 bits.
			// (LCDDR0 & 0xF0) clears the segment before writing 
			LCDDR0 = (LCDDR0 & 0xF0) | segment[0];
     14e:	ac ee       	ldi	r26, 0xEC	; 236
     150:	b0 e0       	ldi	r27, 0x00	; 0
     152:	8c 91       	ld	r24, X
     154:	80 7f       	andi	r24, 0xF0	; 240
     156:	90 81       	ld	r25, Z
     158:	89 2b       	or	r24, r25
     15a:	8c 93       	st	X, r24
			LCDDR5 = (LCDDR5 & 0xF0) | segment[1];
     15c:	a1 ef       	ldi	r26, 0xF1	; 241
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	8c 91       	ld	r24, X
     162:	80 7f       	andi	r24, 0xF0	; 240
     164:	92 81       	ldd	r25, Z+2	; 0x02
     166:	89 2b       	or	r24, r25
     168:	8c 93       	st	X, r24
			LCDDR10 = (LCDDR10 & 0xF0) | segment[2];
     16a:	a6 ef       	ldi	r26, 0xF6	; 246
     16c:	b0 e0       	ldi	r27, 0x00	; 0
     16e:	8c 91       	ld	r24, X
     170:	80 7f       	andi	r24, 0xF0	; 240
     172:	94 81       	ldd	r25, Z+4	; 0x04
     174:	89 2b       	or	r24, r25
     176:	8c 93       	st	X, r24
			LCDDR15 = (LCDDR15 & 0xF0) | segment[3];
     178:	ab ef       	ldi	r26, 0xFB	; 251
     17a:	b0 e0       	ldi	r27, 0x00	; 0
     17c:	8c 91       	ld	r24, X
     17e:	80 7f       	andi	r24, 0xF0	; 240
     180:	96 81       	ldd	r25, Z+6	; 0x06
     182:	89 2b       	or	r24, r25
     184:	8c 93       	st	X, r24
			break;
     186:	b3 c0       	rjmp	.+358    	; 0x2ee <writeChar+0x1d0>
		case 1:
			// Same segment just lower 4 bits
			LCDDR0 = (LCDDR0 & 0x0F) | (segment[0] << 4);
     188:	ac ee       	ldi	r26, 0xEC	; 236
     18a:	b0 e0       	ldi	r27, 0x00	; 0
     18c:	2c 91       	ld	r18, X
     18e:	80 81       	ld	r24, Z
     190:	91 81       	ldd	r25, Z+1	; 0x01
     192:	82 95       	swap	r24
     194:	92 95       	swap	r25
     196:	90 7f       	andi	r25, 0xF0	; 240
     198:	98 27       	eor	r25, r24
     19a:	80 7f       	andi	r24, 0xF0	; 240
     19c:	98 27       	eor	r25, r24
     19e:	92 2f       	mov	r25, r18
     1a0:	9f 70       	andi	r25, 0x0F	; 15
     1a2:	89 2b       	or	r24, r25
     1a4:	8c 93       	st	X, r24
			LCDDR5 = (LCDDR5 & 0x0F) | (segment[1] << 4);
     1a6:	a1 ef       	ldi	r26, 0xF1	; 241
     1a8:	b0 e0       	ldi	r27, 0x00	; 0
     1aa:	2c 91       	ld	r18, X
     1ac:	82 81       	ldd	r24, Z+2	; 0x02
     1ae:	93 81       	ldd	r25, Z+3	; 0x03
     1b0:	82 95       	swap	r24
     1b2:	92 95       	swap	r25
     1b4:	90 7f       	andi	r25, 0xF0	; 240
     1b6:	98 27       	eor	r25, r24
     1b8:	80 7f       	andi	r24, 0xF0	; 240
     1ba:	98 27       	eor	r25, r24
     1bc:	92 2f       	mov	r25, r18
     1be:	9f 70       	andi	r25, 0x0F	; 15
     1c0:	89 2b       	or	r24, r25
     1c2:	8c 93       	st	X, r24
			LCDDR10 = (LCDDR10 & 0x0F) | (segment[2] << 4);
     1c4:	a6 ef       	ldi	r26, 0xF6	; 246
     1c6:	b0 e0       	ldi	r27, 0x00	; 0
     1c8:	2c 91       	ld	r18, X
     1ca:	84 81       	ldd	r24, Z+4	; 0x04
     1cc:	95 81       	ldd	r25, Z+5	; 0x05
     1ce:	82 95       	swap	r24
     1d0:	92 95       	swap	r25
     1d2:	90 7f       	andi	r25, 0xF0	; 240
     1d4:	98 27       	eor	r25, r24
     1d6:	80 7f       	andi	r24, 0xF0	; 240
     1d8:	98 27       	eor	r25, r24
     1da:	92 2f       	mov	r25, r18
     1dc:	9f 70       	andi	r25, 0x0F	; 15
     1de:	89 2b       	or	r24, r25
     1e0:	8c 93       	st	X, r24
			LCDDR15 = (LCDDR15 & 0x0F) | (segment[3] << 4);
     1e2:	ab ef       	ldi	r26, 0xFB	; 251
     1e4:	b0 e0       	ldi	r27, 0x00	; 0
     1e6:	2c 91       	ld	r18, X
     1e8:	86 81       	ldd	r24, Z+6	; 0x06
     1ea:	97 81       	ldd	r25, Z+7	; 0x07
     1ec:	82 95       	swap	r24
     1ee:	92 95       	swap	r25
     1f0:	90 7f       	andi	r25, 0xF0	; 240
     1f2:	98 27       	eor	r25, r24
     1f4:	80 7f       	andi	r24, 0xF0	; 240
     1f6:	98 27       	eor	r25, r24
     1f8:	92 2f       	mov	r25, r18
     1fa:	9f 70       	andi	r25, 0x0F	; 15
     1fc:	89 2b       	or	r24, r25
     1fe:	8c 93       	st	X, r24
			break;
     200:	76 c0       	rjmp	.+236    	; 0x2ee <writeChar+0x1d0>
		case 2:
			LCDDR1 = (LCDDR1 & 0xF0) | segment[0];
     202:	ad ee       	ldi	r26, 0xED	; 237
     204:	b0 e0       	ldi	r27, 0x00	; 0
     206:	8c 91       	ld	r24, X
     208:	80 7f       	andi	r24, 0xF0	; 240
     20a:	90 81       	ld	r25, Z
     20c:	89 2b       	or	r24, r25
     20e:	8c 93       	st	X, r24
			LCDDR6 = (LCDDR6 & 0xF0) | segment[1];
     210:	a2 ef       	ldi	r26, 0xF2	; 242
     212:	b0 e0       	ldi	r27, 0x00	; 0
     214:	8c 91       	ld	r24, X
     216:	80 7f       	andi	r24, 0xF0	; 240
     218:	92 81       	ldd	r25, Z+2	; 0x02
     21a:	89 2b       	or	r24, r25
     21c:	8c 93       	st	X, r24
			LCDDR11 = (LCDDR11 & 0xF0) | segment[2];
     21e:	a7 ef       	ldi	r26, 0xF7	; 247
     220:	b0 e0       	ldi	r27, 0x00	; 0
     222:	8c 91       	ld	r24, X
     224:	80 7f       	andi	r24, 0xF0	; 240
     226:	94 81       	ldd	r25, Z+4	; 0x04
     228:	89 2b       	or	r24, r25
     22a:	8c 93       	st	X, r24
			LCDDR16 = (LCDDR16 & 0xF0) | segment[3];
     22c:	ac ef       	ldi	r26, 0xFC	; 252
     22e:	b0 e0       	ldi	r27, 0x00	; 0
     230:	8c 91       	ld	r24, X
     232:	80 7f       	andi	r24, 0xF0	; 240
     234:	96 81       	ldd	r25, Z+6	; 0x06
     236:	89 2b       	or	r24, r25
     238:	8c 93       	st	X, r24
			break;
     23a:	59 c0       	rjmp	.+178    	; 0x2ee <writeChar+0x1d0>
		case 3:
			LCDDR1 = (LCDDR1 & 0x0F) | (segment[0] << 4);
     23c:	ad ee       	ldi	r26, 0xED	; 237
     23e:	b0 e0       	ldi	r27, 0x00	; 0
     240:	2c 91       	ld	r18, X
     242:	80 81       	ld	r24, Z
     244:	91 81       	ldd	r25, Z+1	; 0x01
     246:	82 95       	swap	r24
     248:	92 95       	swap	r25
     24a:	90 7f       	andi	r25, 0xF0	; 240
     24c:	98 27       	eor	r25, r24
     24e:	80 7f       	andi	r24, 0xF0	; 240
     250:	98 27       	eor	r25, r24
     252:	92 2f       	mov	r25, r18
     254:	9f 70       	andi	r25, 0x0F	; 15
     256:	89 2b       	or	r24, r25
     258:	8c 93       	st	X, r24
			LCDDR6 = (LCDDR6 & 0x0F) | (segment[1] << 4);
     25a:	a2 ef       	ldi	r26, 0xF2	; 242
     25c:	b0 e0       	ldi	r27, 0x00	; 0
     25e:	2c 91       	ld	r18, X
     260:	82 81       	ldd	r24, Z+2	; 0x02
     262:	93 81       	ldd	r25, Z+3	; 0x03
     264:	82 95       	swap	r24
     266:	92 95       	swap	r25
     268:	90 7f       	andi	r25, 0xF0	; 240
     26a:	98 27       	eor	r25, r24
     26c:	80 7f       	andi	r24, 0xF0	; 240
     26e:	98 27       	eor	r25, r24
     270:	92 2f       	mov	r25, r18
     272:	9f 70       	andi	r25, 0x0F	; 15
     274:	89 2b       	or	r24, r25
     276:	8c 93       	st	X, r24
			LCDDR11 = (LCDDR11 & 0x0F) | (segment[2] << 4);
     278:	a7 ef       	ldi	r26, 0xF7	; 247
     27a:	b0 e0       	ldi	r27, 0x00	; 0
     27c:	2c 91       	ld	r18, X
     27e:	84 81       	ldd	r24, Z+4	; 0x04
     280:	95 81       	ldd	r25, Z+5	; 0x05
     282:	82 95       	swap	r24
     284:	92 95       	swap	r25
     286:	90 7f       	andi	r25, 0xF0	; 240
     288:	98 27       	eor	r25, r24
     28a:	80 7f       	andi	r24, 0xF0	; 240
     28c:	98 27       	eor	r25, r24
     28e:	92 2f       	mov	r25, r18
     290:	9f 70       	andi	r25, 0x0F	; 15
     292:	89 2b       	or	r24, r25
     294:	8c 93       	st	X, r24
			LCDDR16 = (LCDDR16 & 0x0F) | (segment[3] << 4);
     296:	ac ef       	ldi	r26, 0xFC	; 252
     298:	b0 e0       	ldi	r27, 0x00	; 0
     29a:	2c 91       	ld	r18, X
     29c:	86 81       	ldd	r24, Z+6	; 0x06
     29e:	97 81       	ldd	r25, Z+7	; 0x07
     2a0:	82 95       	swap	r24
     2a2:	92 95       	swap	r25
     2a4:	90 7f       	andi	r25, 0xF0	; 240
     2a6:	98 27       	eor	r25, r24
     2a8:	80 7f       	andi	r24, 0xF0	; 240
     2aa:	98 27       	eor	r25, r24
     2ac:	92 2f       	mov	r25, r18
     2ae:	9f 70       	andi	r25, 0x0F	; 15
     2b0:	89 2b       	or	r24, r25
     2b2:	8c 93       	st	X, r24
			break;
     2b4:	1c c0       	rjmp	.+56     	; 0x2ee <writeChar+0x1d0>
		case 4:
			LCDDR2 = (LCDDR2 & 0xF0) | segment[0];
     2b6:	ae ee       	ldi	r26, 0xEE	; 238
     2b8:	b0 e0       	ldi	r27, 0x00	; 0
     2ba:	8c 91       	ld	r24, X
     2bc:	80 7f       	andi	r24, 0xF0	; 240
     2be:	90 81       	ld	r25, Z
     2c0:	89 2b       	or	r24, r25
     2c2:	8c 93       	st	X, r24
			LCDDR7 = (LCDDR7 & 0xF0) | segment[1];
     2c4:	a3 ef       	ldi	r26, 0xF3	; 243
     2c6:	b0 e0       	ldi	r27, 0x00	; 0
     2c8:	8c 91       	ld	r24, X
     2ca:	80 7f       	andi	r24, 0xF0	; 240
     2cc:	92 81       	ldd	r25, Z+2	; 0x02
     2ce:	89 2b       	or	r24, r25
     2d0:	8c 93       	st	X, r24
			LCDDR12 = (LCDDR12 & 0xF0) | segment[2];
     2d2:	a8 ef       	ldi	r26, 0xF8	; 248
     2d4:	b0 e0       	ldi	r27, 0x00	; 0
     2d6:	8c 91       	ld	r24, X
     2d8:	80 7f       	andi	r24, 0xF0	; 240
     2da:	94 81       	ldd	r25, Z+4	; 0x04
     2dc:	89 2b       	or	r24, r25
     2de:	8c 93       	st	X, r24
			LCDDR17 = (LCDDR17 & 0xF0) | segment[3];
     2e0:	ad ef       	ldi	r26, 0xFD	; 253
     2e2:	b0 e0       	ldi	r27, 0x00	; 0
     2e4:	8c 91       	ld	r24, X
     2e6:	80 7f       	andi	r24, 0xF0	; 240
     2e8:	96 81       	ldd	r25, Z+6	; 0x06
     2ea:	89 2b       	or	r24, r25
     2ec:	8c 93       	st	X, r24
			break;
	}
}
     2ee:	cf 91       	pop	r28
     2f0:	08 95       	ret

000002f2 <printAt>:

void printAt(long num, int pos) {
     2f2:	8f 92       	push	r8
     2f4:	9f 92       	push	r9
     2f6:	af 92       	push	r10
     2f8:	bf 92       	push	r11
     2fa:	cf 92       	push	r12
     2fc:	df 92       	push	r13
     2fe:	ef 92       	push	r14
     300:	ff 92       	push	r15
     302:	cf 93       	push	r28
     304:	df 93       	push	r29
     306:	4b 01       	movw	r8, r22
     308:	5c 01       	movw	r10, r24
     30a:	ea 01       	movw	r28, r20
	writeChar((num % 100) / 10 + '0', pos);
     30c:	24 e6       	ldi	r18, 0x64	; 100
     30e:	30 e0       	ldi	r19, 0x00	; 0
     310:	40 e0       	ldi	r20, 0x00	; 0
     312:	50 e0       	ldi	r21, 0x00	; 0
     314:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <__divmodsi4>
     318:	0f 2e       	mov	r0, r31
     31a:	fa e0       	ldi	r31, 0x0A	; 10
     31c:	cf 2e       	mov	r12, r31
     31e:	d1 2c       	mov	r13, r1
     320:	e1 2c       	mov	r14, r1
     322:	f1 2c       	mov	r15, r1
     324:	f0 2d       	mov	r31, r0
     326:	a7 01       	movw	r20, r14
     328:	96 01       	movw	r18, r12
     32a:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <__divmodsi4>
     32e:	6c 2f       	mov	r22, r28
     330:	80 e3       	ldi	r24, 0x30	; 48
     332:	82 0f       	add	r24, r18
     334:	0e 94 8f 00 	call	0x11e	; 0x11e <writeChar>
	pos++;
	writeChar(num % 10 + '0', pos);
     338:	21 96       	adiw	r28, 0x01	; 1
     33a:	c5 01       	movw	r24, r10
     33c:	b4 01       	movw	r22, r8
     33e:	a7 01       	movw	r20, r14
     340:	96 01       	movw	r18, r12
     342:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <__divmodsi4>
     346:	86 2f       	mov	r24, r22
     348:	6c 2f       	mov	r22, r28
     34a:	80 5d       	subi	r24, 0xD0	; 208
     34c:	0e 94 8f 00 	call	0x11e	; 0x11e <writeChar>
}
     350:	df 91       	pop	r29
     352:	cf 91       	pop	r28
     354:	ff 90       	pop	r15
     356:	ef 90       	pop	r14
     358:	df 90       	pop	r13
     35a:	cf 90       	pop	r12
     35c:	bf 90       	pop	r11
     35e:	af 90       	pop	r10
     360:	9f 90       	pop	r9
     362:	8f 90       	pop	r8
     364:	08 95       	ret

00000366 <updateDisplay>:
        ASYNC(target, setFrequency, 0);
    }
    ASYNC(self, updateDisplay, 0);
}

void updateDisplay(GUI *self) {
     366:	cf 93       	push	r28
     368:	df 93       	push	r29
     36a:	ec 01       	movw	r28, r24
    printAt(self->gen1->frequency, 0); //gen1 hz at pos 0-1
     36c:	ec 81       	ldd	r30, Y+4	; 0x04
     36e:	fd 81       	ldd	r31, Y+5	; 0x05
     370:	60 85       	ldd	r22, Z+8	; 0x08
     372:	71 85       	ldd	r23, Z+9	; 0x09
     374:	07 2e       	mov	r0, r23
     376:	00 0c       	add	r0, r0
     378:	88 0b       	sbc	r24, r24
     37a:	99 0b       	sbc	r25, r25
     37c:	40 e0       	ldi	r20, 0x00	; 0
     37e:	50 e0       	ldi	r21, 0x00	; 0
     380:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printAt>
    printAt(self->gen2->frequency, 3); //gen2 hz at pos 3-4
     384:	ee 81       	ldd	r30, Y+6	; 0x06
     386:	ff 81       	ldd	r31, Y+7	; 0x07
     388:	60 85       	ldd	r22, Z+8	; 0x08
     38a:	71 85       	ldd	r23, Z+9	; 0x09
     38c:	07 2e       	mov	r0, r23
     38e:	00 0c       	add	r0, r0
     390:	88 0b       	sbc	r24, r24
     392:	99 0b       	sbc	r25, r25
     394:	43 e0       	ldi	r20, 0x03	; 3
     396:	50 e0       	ldi	r21, 0x00	; 0
     398:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printAt>
     39c:	df 91       	pop	r29
     39e:	cf 91       	pop	r28
     3a0:	08 95       	ret

000003a2 <switchFocus>:
	pos++;
	writeChar(num % 10 + '0', pos);
}

void switchFocus(GUI *self, int newActive) {
	writeChar("4", 1);
     3a2:	61 e0       	ldi	r22, 0x01	; 1
     3a4:	84 e8       	ldi	r24, 0x84	; 132
     3a6:	91 e0       	ldi	r25, 0x01	; 1
     3a8:	0e 94 8f 00 	call	0x11e	; 0x11e <writeChar>
     3ac:	08 95       	ret

000003ae <adjustFrequency>:
    /* self->activeGen = newActive;
    ASYNC(self, updateDisplay, 0); */
}

void adjustFrequency(GUI *self, int delta) {
	writeChar("5", 4);
     3ae:	64 e0       	ldi	r22, 0x04	; 4
     3b0:	86 e8       	ldi	r24, 0x86	; 134
     3b2:	91 e0       	ldi	r25, 0x01	; 1
     3b4:	0e 94 8f 00 	call	0x11e	; 0x11e <writeChar>
     3b8:	08 95       	ret

000003ba <saveRestore>:
	// Update everything
    SYNC(target, setFrequency, newFreq);
    ASYNC(self, updateDisplay, 0); */
}

void saveRestore(GUI *self) {
     3ba:	af 92       	push	r10
     3bc:	bf 92       	push	r11
     3be:	cf 92       	push	r12
     3c0:	df 92       	push	r13
     3c2:	ef 92       	push	r14
     3c4:	ff 92       	push	r15
     3c6:	0f 93       	push	r16
     3c8:	1f 93       	push	r17
     3ca:	cf 93       	push	r28
     3cc:	df 93       	push	r29
     3ce:	ec 01       	movw	r28, r24
    PulseGen *target = self->activeGen ? self->gen2 : self->gen1;
     3d0:	88 85       	ldd	r24, Y+8	; 0x08
     3d2:	99 85       	ldd	r25, Y+9	; 0x09
     3d4:	89 2b       	or	r24, r25
     3d6:	19 f0       	breq	.+6      	; 0x3de <saveRestore+0x24>
     3d8:	ae 80       	ldd	r10, Y+6	; 0x06
     3da:	bf 80       	ldd	r11, Y+7	; 0x07
     3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <saveRestore+0x28>
     3de:	ac 80       	ldd	r10, Y+4	; 0x04
     3e0:	bd 80       	ldd	r11, Y+5	; 0x05
    if (target->frequency == 0) {
     3e2:	f5 01       	movw	r30, r10
     3e4:	80 85       	ldd	r24, Z+8	; 0x08
     3e6:	91 85       	ldd	r25, Z+9	; 0x09
     3e8:	89 2b       	or	r24, r25
     3ea:	91 f4       	brne	.+36     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
        ASYNC(target, restore, 0);
     3ec:	c1 2c       	mov	r12, r1
     3ee:	d1 2c       	mov	r13, r1
     3f0:	0f 2e       	mov	r0, r31
     3f2:	f6 ef       	ldi	r31, 0xF6	; 246
     3f4:	ef 2e       	mov	r14, r31
     3f6:	f3 e0       	ldi	r31, 0x03	; 3
     3f8:	ff 2e       	mov	r15, r31
     3fa:	f0 2d       	mov	r31, r0
     3fc:	85 01       	movw	r16, r10
     3fe:	20 e0       	ldi	r18, 0x00	; 0
     400:	30 e0       	ldi	r19, 0x00	; 0
     402:	a9 01       	movw	r20, r18
     404:	60 e0       	ldi	r22, 0x00	; 0
     406:	70 e0       	ldi	r23, 0x00	; 0
     408:	cb 01       	movw	r24, r22
     40a:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <async>
     40e:	1f c0       	rjmp	.+62     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
    } else {
        ASYNC(target, save, 0);
     410:	c1 2c       	mov	r12, r1
     412:	d1 2c       	mov	r13, r1
     414:	0f 2e       	mov	r0, r31
     416:	f0 ef       	ldi	r31, 0xF0	; 240
     418:	ef 2e       	mov	r14, r31
     41a:	f3 e0       	ldi	r31, 0x03	; 3
     41c:	ff 2e       	mov	r15, r31
     41e:	f0 2d       	mov	r31, r0
     420:	85 01       	movw	r16, r10
     422:	20 e0       	ldi	r18, 0x00	; 0
     424:	30 e0       	ldi	r19, 0x00	; 0
     426:	a9 01       	movw	r20, r18
     428:	60 e0       	ldi	r22, 0x00	; 0
     42a:	70 e0       	ldi	r23, 0x00	; 0
     42c:	cb 01       	movw	r24, r22
     42e:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <async>
        ASYNC(target, setFrequency, 0);
     432:	0f 2e       	mov	r0, r31
     434:	f8 e7       	ldi	r31, 0x78	; 120
     436:	ef 2e       	mov	r14, r31
     438:	f3 e0       	ldi	r31, 0x03	; 3
     43a:	ff 2e       	mov	r15, r31
     43c:	f0 2d       	mov	r31, r0
     43e:	20 e0       	ldi	r18, 0x00	; 0
     440:	30 e0       	ldi	r19, 0x00	; 0
     442:	a9 01       	movw	r20, r18
     444:	60 e0       	ldi	r22, 0x00	; 0
     446:	70 e0       	ldi	r23, 0x00	; 0
     448:	cb 01       	movw	r24, r22
     44a:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <async>
    }
    ASYNC(self, updateDisplay, 0);
     44e:	c1 2c       	mov	r12, r1
     450:	d1 2c       	mov	r13, r1
     452:	0f 2e       	mov	r0, r31
     454:	f3 eb       	ldi	r31, 0xB3	; 179
     456:	ef 2e       	mov	r14, r31
     458:	f1 e0       	ldi	r31, 0x01	; 1
     45a:	ff 2e       	mov	r15, r31
     45c:	f0 2d       	mov	r31, r0
     45e:	8e 01       	movw	r16, r28
     460:	20 e0       	ldi	r18, 0x00	; 0
     462:	30 e0       	ldi	r19, 0x00	; 0
     464:	a9 01       	movw	r20, r18
     466:	60 e0       	ldi	r22, 0x00	; 0
     468:	70 e0       	ldi	r23, 0x00	; 0
     46a:	cb 01       	movw	r24, r22
     46c:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <async>
}
     470:	df 91       	pop	r29
     472:	cf 91       	pop	r28
     474:	1f 91       	pop	r17
     476:	0f 91       	pop	r16
     478:	ff 90       	pop	r15
     47a:	ef 90       	pop	r14
     47c:	df 90       	pop	r13
     47e:	cf 90       	pop	r12
     480:	bf 90       	pop	r11
     482:	af 90       	pop	r10
     484:	08 95       	ret

00000486 <joystickInit>:
#include "PulseGen.h"


void joystickInit() {
    //sätter på upp, ner och inåt som input
    PORTB = PORTB | 0b11010000;
     486:	85 b1       	in	r24, 0x05	; 5
     488:	80 6d       	ori	r24, 0xD0	; 208
     48a:	85 b9       	out	0x05, r24	; 5
    //sätter på höger och vänster  som input
    PORTE = PORTE | 0b00001100;
     48c:	8e b1       	in	r24, 0x0e	; 14
     48e:	8c 60       	ori	r24, 0x0C	; 12
     490:	8e b9       	out	0x0e, r24	; 14
    //DDRE = 0b01010000;
    //sätter på upp,ner,in (15) hög,ven (14) //sida 53 AVr..169 nånitng
    EIMSK = EIMSK | (1<<PCINT15) | (1<<PCINT14);
     492:	8d b3       	in	r24, 0x1d	; 29
     494:	80 6c       	ori	r24, 0xC0	; 192
     496:	8d bb       	out	0x1d, r24	; 29

    //sätter på upp, ner och inåt på joystick (som interrupt)
    PCMSK1 = PCMSK1 | (1<<PCINT15) | (1<<PCINT14) | (1<<PCINT12);
     498:	ec e6       	ldi	r30, 0x6C	; 108
     49a:	f0 e0       	ldi	r31, 0x00	; 0
     49c:	80 81       	ld	r24, Z
     49e:	80 6d       	ori	r24, 0xD0	; 208
     4a0:	80 83       	st	Z, r24
    //sätter på höger och vänster på joystick (som interrupt)
    PCMSK0 = PCMSK0 | (1<<PCINT3) | (1<<PCINT2);
     4a2:	eb e6       	ldi	r30, 0x6B	; 107
     4a4:	f0 e0       	ldi	r31, 0x00	; 0
     4a6:	80 81       	ld	r24, Z
     4a8:	8c 60       	ori	r24, 0x0C	; 12
     4aa:	80 83       	st	Z, r24
     4ac:	08 95       	ret

000004ae <interruptPinB>:
}


// Joystick input handler
void interruptPinB(JoystickHandler *self) { 
     4ae:	cf 92       	push	r12
     4b0:	df 92       	push	r13
     4b2:	ef 92       	push	r14
     4b4:	ff 92       	push	r15
     4b6:	0f 93       	push	r16
     4b8:	1f 93       	push	r17
     4ba:	cf 93       	push	r28
     4bc:	df 93       	push	r29
     4be:	ec 01       	movw	r28, r24
    if((PINB & 0b10000000) >> 7 == 0){ //down press on joystick
     4c0:	1f 99       	sbic	0x03, 7	; 3
     4c2:	13 c0       	rjmp	.+38     	; 0x4ea <interruptPinB+0x3c>
        ASYNC(self->gui, adjustFrequency, -1);
     4c4:	0c 81       	ldd	r16, Y+4	; 0x04
     4c6:	1d 81       	ldd	r17, Y+5	; 0x05
     4c8:	cc 24       	eor	r12, r12
     4ca:	ca 94       	dec	r12
     4cc:	dc 2c       	mov	r13, r12
     4ce:	0f 2e       	mov	r0, r31
     4d0:	f7 ed       	ldi	r31, 0xD7	; 215
     4d2:	ef 2e       	mov	r14, r31
     4d4:	f1 e0       	ldi	r31, 0x01	; 1
     4d6:	ff 2e       	mov	r15, r31
     4d8:	f0 2d       	mov	r31, r0
     4da:	20 e0       	ldi	r18, 0x00	; 0
     4dc:	30 e0       	ldi	r19, 0x00	; 0
     4de:	a9 01       	movw	r20, r18
     4e0:	60 e0       	ldi	r22, 0x00	; 0
     4e2:	70 e0       	ldi	r23, 0x00	; 0
     4e4:	cb 01       	movw	r24, r22
     4e6:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <async>
    }

    if((PINB & 0b01000000) >> 6 == 0){ //up press on joystick
     4ea:	1e 99       	sbic	0x03, 6	; 3
     4ec:	13 c0       	rjmp	.+38     	; 0x514 <__stack+0x15>
        ASYNC(self->gui, adjustFrequency, 1);
     4ee:	0c 81       	ldd	r16, Y+4	; 0x04
     4f0:	1d 81       	ldd	r17, Y+5	; 0x05
     4f2:	cc 24       	eor	r12, r12
     4f4:	c3 94       	inc	r12
     4f6:	d1 2c       	mov	r13, r1
     4f8:	0f 2e       	mov	r0, r31
     4fa:	f7 ed       	ldi	r31, 0xD7	; 215
     4fc:	ef 2e       	mov	r14, r31
     4fe:	f1 e0       	ldi	r31, 0x01	; 1
     500:	ff 2e       	mov	r15, r31
     502:	f0 2d       	mov	r31, r0
     504:	20 e0       	ldi	r18, 0x00	; 0
     506:	30 e0       	ldi	r19, 0x00	; 0
     508:	a9 01       	movw	r20, r18
     50a:	60 e0       	ldi	r22, 0x00	; 0
     50c:	70 e0       	ldi	r23, 0x00	; 0
     50e:	cb 01       	movw	r24, r22
     510:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <async>
    }

    if((PINB & 0b00010000) >> 4 == 0){ //middle press
     514:	1c 99       	sbic	0x03, 4	; 3
     516:	12 c0       	rjmp	.+36     	; 0x53c <__stack+0x3d>
        ASYNC(self->gui, saveRestore, 0);
     518:	0c 81       	ldd	r16, Y+4	; 0x04
     51a:	1d 81       	ldd	r17, Y+5	; 0x05
     51c:	c1 2c       	mov	r12, r1
     51e:	d1 2c       	mov	r13, r1
     520:	0f 2e       	mov	r0, r31
     522:	fd ed       	ldi	r31, 0xDD	; 221
     524:	ef 2e       	mov	r14, r31
     526:	f1 e0       	ldi	r31, 0x01	; 1
     528:	ff 2e       	mov	r15, r31
     52a:	f0 2d       	mov	r31, r0
     52c:	20 e0       	ldi	r18, 0x00	; 0
     52e:	30 e0       	ldi	r19, 0x00	; 0
     530:	a9 01       	movw	r20, r18
     532:	60 e0       	ldi	r22, 0x00	; 0
     534:	70 e0       	ldi	r23, 0x00	; 0
     536:	cb 01       	movw	r24, r22
     538:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <async>
    }
}
     53c:	df 91       	pop	r29
     53e:	cf 91       	pop	r28
     540:	1f 91       	pop	r17
     542:	0f 91       	pop	r16
     544:	ff 90       	pop	r15
     546:	ef 90       	pop	r14
     548:	df 90       	pop	r13
     54a:	cf 90       	pop	r12
     54c:	08 95       	ret

0000054e <interruptPinE>:

void interruptPinE(JoystickHandler *self) {  
     54e:	cf 92       	push	r12
     550:	df 92       	push	r13
     552:	ef 92       	push	r14
     554:	ff 92       	push	r15
     556:	0f 93       	push	r16
     558:	1f 93       	push	r17
     55a:	cf 93       	push	r28
     55c:	df 93       	push	r29
     55e:	ec 01       	movw	r28, r24
    if((PINE & 0b00000100) >> 2 == 0){ //left press
     560:	62 99       	sbic	0x0c, 2	; 12
     562:	12 c0       	rjmp	.+36     	; 0x588 <interruptPinE+0x3a>
        ASYNC(self->gui, switchFocus, 0);
     564:	0c 81       	ldd	r16, Y+4	; 0x04
     566:	1d 81       	ldd	r17, Y+5	; 0x05
     568:	c1 2c       	mov	r12, r1
     56a:	d1 2c       	mov	r13, r1
     56c:	0f 2e       	mov	r0, r31
     56e:	f1 ed       	ldi	r31, 0xD1	; 209
     570:	ef 2e       	mov	r14, r31
     572:	f1 e0       	ldi	r31, 0x01	; 1
     574:	ff 2e       	mov	r15, r31
     576:	f0 2d       	mov	r31, r0
     578:	20 e0       	ldi	r18, 0x00	; 0
     57a:	30 e0       	ldi	r19, 0x00	; 0
     57c:	a9 01       	movw	r20, r18
     57e:	60 e0       	ldi	r22, 0x00	; 0
     580:	70 e0       	ldi	r23, 0x00	; 0
     582:	cb 01       	movw	r24, r22
     584:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <async>
    }

    if((PINE & 0b00001000) >> 3 == 0){  //right press
     588:	63 99       	sbic	0x0c, 3	; 12
     58a:	13 c0       	rjmp	.+38     	; 0x5b2 <interruptPinE+0x64>
        ASYNC(self->gui, switchFocus, 1);
     58c:	0c 81       	ldd	r16, Y+4	; 0x04
     58e:	1d 81       	ldd	r17, Y+5	; 0x05
     590:	cc 24       	eor	r12, r12
     592:	c3 94       	inc	r12
     594:	d1 2c       	mov	r13, r1
     596:	0f 2e       	mov	r0, r31
     598:	f1 ed       	ldi	r31, 0xD1	; 209
     59a:	ef 2e       	mov	r14, r31
     59c:	f1 e0       	ldi	r31, 0x01	; 1
     59e:	ff 2e       	mov	r15, r31
     5a0:	f0 2d       	mov	r31, r0
     5a2:	20 e0       	ldi	r18, 0x00	; 0
     5a4:	30 e0       	ldi	r19, 0x00	; 0
     5a6:	a9 01       	movw	r20, r18
     5a8:	60 e0       	ldi	r22, 0x00	; 0
     5aa:	70 e0       	ldi	r23, 0x00	; 0
     5ac:	cb 01       	movw	r24, r22
     5ae:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <async>
    }
     5b2:	df 91       	pop	r29
     5b4:	cf 91       	pop	r28
     5b6:	1f 91       	pop	r17
     5b8:	0f 91       	pop	r16
     5ba:	ff 90       	pop	r15
     5bc:	ef 90       	pop	r14
     5be:	df 90       	pop	r13
     5c0:	cf 90       	pop	r12
     5c2:	08 95       	ret

000005c4 <sysInit>:
GUI gui = initGUI(&gen1, &gen2);
JoystickHandler joystick = initJoystickHandler(&gui);

void sysInit(){
    // Clock Prescale Register "maximum speed"
	CLKPR = 0b10000000; // Clock Prescaler Change Enable
     5c4:	e1 e6       	ldi	r30, 0x61	; 97
     5c6:	f0 e0       	ldi	r31, 0x00	; 0
     5c8:	80 e8       	ldi	r24, 0x80	; 128
     5ca:	80 83       	st	Z, r24
	CLKPR = 0b00000000; // Set 0 for sysclock
     5cc:	10 82       	st	Z, r1
     5ce:	08 95       	ret

000005d0 <pinOutputInit>:
}

void pinOutputInit(){
    // Initialize Port E as output for PE4 and PE6
	DDRE |= (1 << PE4) | (1 << PE6);
     5d0:	8d b1       	in	r24, 0x0d	; 13
     5d2:	80 65       	ori	r24, 0x50	; 80
     5d4:	8d b9       	out	0x0d, r24	; 13
     5d6:	08 95       	ret

000005d8 <main>:
}


int main() {
    sysInit();
     5d8:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <sysInit>
    pinOutputInit();
     5dc:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <pinOutputInit>
    joystickInit();
     5e0:	0e 94 43 02 	call	0x486	; 0x486 <joystickInit>
    LCD_init();
     5e4:	0e 94 57 00 	call	0xae	; 0xae <LCD_init>
    
    // Instal interupt handler
    //when the joystick's vertical state changes
    INSTALL(&joystick, interruptPinB, IRQ_PCINT1);
     5e8:	42 e0       	ldi	r20, 0x02	; 2
     5ea:	67 e5       	ldi	r22, 0x57	; 87
     5ec:	72 e0       	ldi	r23, 0x02	; 2
     5ee:	80 e5       	ldi	r24, 0x50	; 80
     5f0:	91 e0       	ldi	r25, 0x01	; 1
     5f2:	0e 94 87 10 	call	0x210e	; 0x210e <install>
    //when the joystick's horizontal (minus middle) state changes
    INSTALL(&joystick, interruptPinE, IRQ_PCINT0);
     5f6:	41 e0       	ldi	r20, 0x01	; 1
     5f8:	67 ea       	ldi	r22, 0xA7	; 167
     5fa:	72 e0       	ldi	r23, 0x02	; 2
     5fc:	80 e5       	ldi	r24, 0x50	; 80
     5fe:	91 e0       	ldi	r25, 0x01	; 1
     600:	0e 94 87 10 	call	0x210e	; 0x210e <install>
    
    // Start kernel
    return TINYTIMBER(&gui, NULL, NULL);
     604:	40 e0       	ldi	r20, 0x00	; 0
     606:	50 e0       	ldi	r21, 0x00	; 0
     608:	60 e0       	ldi	r22, 0x00	; 0
     60a:	70 e0       	ldi	r23, 0x00	; 0
     60c:	86 e5       	ldi	r24, 0x56	; 86
     60e:	91 e0       	ldi	r25, 0x01	; 1
     610:	0e 94 a1 10 	call	0x2142	; 0x2142 <tinytimber>
}
     614:	08 95       	ret

00000616 <setPin>:
#include "PortWrite.h"

// Set a specific bit on Port E high or low
void setPin(PortWrite *self, int bit, int value) {
    if (value) {
     616:	45 2b       	or	r20, r21
     618:	59 f0       	breq	.+22     	; 0x630 <setPin+0x1a>
        PORTE |= (1 << bit);   // Set bit high
     61a:	2e b1       	in	r18, 0x0e	; 14
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	02 c0       	rjmp	.+4      	; 0x626 <setPin+0x10>
     622:	88 0f       	add	r24, r24
     624:	99 1f       	adc	r25, r25
     626:	6a 95       	dec	r22
     628:	e2 f7       	brpl	.-8      	; 0x622 <setPin+0xc>
     62a:	82 2b       	or	r24, r18
     62c:	8e b9       	out	0x0e, r24	; 14
     62e:	08 95       	ret
    } else {
        PORTE &= ~(1 << bit);  // Set bit low
     630:	2e b1       	in	r18, 0x0e	; 14
     632:	81 e0       	ldi	r24, 0x01	; 1
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	02 c0       	rjmp	.+4      	; 0x63c <setPin+0x26>
     638:	88 0f       	add	r24, r24
     63a:	99 1f       	adc	r25, r25
     63c:	6a 95       	dec	r22
     63e:	e2 f7       	brpl	.-8      	; 0x638 <setPin+0x22>
     640:	80 95       	com	r24
     642:	82 23       	and	r24, r18
     644:	8e b9       	out	0x0e, r24	; 14
     646:	08 95       	ret

00000648 <toggle>:
     648:	cf 92       	push	r12
     64a:	df 92       	push	r13
     64c:	ef 92       	push	r14
     64e:	ff 92       	push	r15
     650:	0f 93       	push	r16
     652:	1f 93       	push	r17
     654:	cf 93       	push	r28
     656:	df 93       	push	r29
     658:	ec 01       	movw	r28, r24
     65a:	81 e0       	ldi	r24, 0x01	; 1
     65c:	9d 81       	ldd	r25, Y+5	; 0x05
     65e:	91 11       	cpse	r25, r1
     660:	80 e0       	ldi	r24, 0x00	; 0
     662:	8d 83       	std	Y+5, r24	; 0x05
     664:	9c 81       	ldd	r25, Y+4	; 0x04
     666:	c8 2e       	mov	r12, r24
     668:	d1 2c       	mov	r13, r1
     66a:	09 2e       	mov	r0, r25
     66c:	02 c0       	rjmp	.+4      	; 0x672 <toggle+0x2a>
     66e:	cc 0c       	add	r12, r12
     670:	dd 1c       	adc	r13, r13
     672:	0a 94       	dec	r0
     674:	e2 f7       	brpl	.-8      	; 0x66e <toggle+0x26>
     676:	c9 2a       	or	r12, r25
     678:	0c 85       	ldd	r16, Y+12	; 0x0c
     67a:	1d 85       	ldd	r17, Y+13	; 0x0d
     67c:	0f 2e       	mov	r0, r31
     67e:	fb e0       	ldi	r31, 0x0B	; 11
     680:	ef 2e       	mov	r14, r31
     682:	f3 e0       	ldi	r31, 0x03	; 3
     684:	ff 2e       	mov	r15, r31
     686:	f0 2d       	mov	r31, r0
     688:	20 e0       	ldi	r18, 0x00	; 0
     68a:	30 e0       	ldi	r19, 0x00	; 0
     68c:	a9 01       	movw	r20, r18
     68e:	60 e0       	ldi	r22, 0x00	; 0
     690:	70 e0       	ldi	r23, 0x00	; 0
     692:	cb 01       	movw	r24, r22
     694:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <async>
     698:	68 85       	ldd	r22, Y+8	; 0x08
     69a:	79 85       	ldd	r23, Y+9	; 0x09
     69c:	16 16       	cp	r1, r22
     69e:	17 06       	cpc	r1, r23
     6a0:	f4 f4       	brge	.+60     	; 0x6de <toggle+0x96>
     6a2:	88 ee       	ldi	r24, 0xE8	; 232
     6a4:	93 e0       	ldi	r25, 0x03	; 3
     6a6:	0e 94 bd 10 	call	0x217a	; 0x217a <__divmodhi4>
     6aa:	77 23       	and	r23, r23
     6ac:	14 f4       	brge	.+4      	; 0x6b2 <toggle+0x6a>
     6ae:	6f 5f       	subi	r22, 0xFF	; 255
     6b0:	7f 4f       	sbci	r23, 0xFF	; 255
     6b2:	75 95       	asr	r23
     6b4:	67 95       	ror	r22
     6b6:	07 2e       	mov	r0, r23
     6b8:	00 0c       	add	r0, r0
     6ba:	88 0b       	sbc	r24, r24
     6bc:	99 0b       	sbc	r25, r25
     6be:	c1 2c       	mov	r12, r1
     6c0:	d1 2c       	mov	r13, r1
     6c2:	0f 2e       	mov	r0, r31
     6c4:	f4 e2       	ldi	r31, 0x24	; 36
     6c6:	ef 2e       	mov	r14, r31
     6c8:	f3 e0       	ldi	r31, 0x03	; 3
     6ca:	ff 2e       	mov	r15, r31
     6cc:	f0 2d       	mov	r31, r0
     6ce:	8e 01       	movw	r16, r28
     6d0:	20 e0       	ldi	r18, 0x00	; 0
     6d2:	30 e0       	ldi	r19, 0x00	; 0
     6d4:	a9 01       	movw	r20, r18
     6d6:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <async>
     6da:	9f 83       	std	Y+7, r25	; 0x07
     6dc:	8e 83       	std	Y+6, r24	; 0x06
     6de:	df 91       	pop	r29
     6e0:	cf 91       	pop	r28
     6e2:	1f 91       	pop	r17
     6e4:	0f 91       	pop	r16
     6e6:	ff 90       	pop	r15
     6e8:	ef 90       	pop	r14
     6ea:	df 90       	pop	r13
     6ec:	cf 90       	pop	r12
     6ee:	08 95       	ret

000006f0 <setFrequency>:
     6f0:	af 92       	push	r10
     6f2:	bf 92       	push	r11
     6f4:	cf 92       	push	r12
     6f6:	df 92       	push	r13
     6f8:	ef 92       	push	r14
     6fa:	ff 92       	push	r15
     6fc:	0f 93       	push	r16
     6fe:	1f 93       	push	r17
     700:	cf 93       	push	r28
     702:	df 93       	push	r29
     704:	fc 01       	movw	r30, r24
     706:	20 85       	ldd	r18, Z+8	; 0x08
     708:	31 85       	ldd	r19, Z+9	; 0x09
     70a:	26 17       	cp	r18, r22
     70c:	37 07       	cpc	r19, r23
     70e:	09 f4       	brne	.+2      	; 0x712 <setFrequency+0x22>
     710:	5c c0       	rjmp	.+184    	; 0x7ca <setFrequency+0xda>
     712:	5b 01       	movw	r10, r22
     714:	ec 01       	movw	r28, r24
     716:	86 81       	ldd	r24, Z+6	; 0x06
     718:	97 81       	ldd	r25, Z+7	; 0x07
     71a:	00 97       	sbiw	r24, 0x00	; 0
     71c:	11 f0       	breq	.+4      	; 0x722 <setFrequency+0x32>
     71e:	0e 94 36 10 	call	0x206c	; 0x206c <ABORT>
     722:	b9 86       	std	Y+9, r11	; 0x09
     724:	a8 86       	std	Y+8, r10	; 0x08
     726:	1a 14       	cp	r1, r10
     728:	1b 04       	cpc	r1, r11
     72a:	ec f5       	brge	.+122    	; 0x7a6 <setFrequency+0xb6>
     72c:	81 e0       	ldi	r24, 0x01	; 1
     72e:	8d 83       	std	Y+5, r24	; 0x05
     730:	8c 81       	ldd	r24, Y+4	; 0x04
     732:	21 e0       	ldi	r18, 0x01	; 1
     734:	30 e0       	ldi	r19, 0x00	; 0
     736:	69 01       	movw	r12, r18
     738:	08 2e       	mov	r0, r24
     73a:	02 c0       	rjmp	.+4      	; 0x740 <setFrequency+0x50>
     73c:	cc 0c       	add	r12, r12
     73e:	dd 1c       	adc	r13, r13
     740:	0a 94       	dec	r0
     742:	e2 f7       	brpl	.-8      	; 0x73c <setFrequency+0x4c>
     744:	c8 2a       	or	r12, r24
     746:	0c 85       	ldd	r16, Y+12	; 0x0c
     748:	1d 85       	ldd	r17, Y+13	; 0x0d
     74a:	0f 2e       	mov	r0, r31
     74c:	fb e0       	ldi	r31, 0x0B	; 11
     74e:	ef 2e       	mov	r14, r31
     750:	f3 e0       	ldi	r31, 0x03	; 3
     752:	ff 2e       	mov	r15, r31
     754:	f0 2d       	mov	r31, r0
     756:	20 e0       	ldi	r18, 0x00	; 0
     758:	30 e0       	ldi	r19, 0x00	; 0
     75a:	a9 01       	movw	r20, r18
     75c:	60 e0       	ldi	r22, 0x00	; 0
     75e:	70 e0       	ldi	r23, 0x00	; 0
     760:	cb 01       	movw	r24, r22
     762:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <async>
     766:	88 ee       	ldi	r24, 0xE8	; 232
     768:	93 e0       	ldi	r25, 0x03	; 3
     76a:	b5 01       	movw	r22, r10
     76c:	0e 94 bd 10 	call	0x217a	; 0x217a <__divmodhi4>
     770:	77 23       	and	r23, r23
     772:	14 f4       	brge	.+4      	; 0x778 <setFrequency+0x88>
     774:	6f 5f       	subi	r22, 0xFF	; 255
     776:	7f 4f       	sbci	r23, 0xFF	; 255
     778:	75 95       	asr	r23
     77a:	67 95       	ror	r22
     77c:	07 2e       	mov	r0, r23
     77e:	00 0c       	add	r0, r0
     780:	88 0b       	sbc	r24, r24
     782:	99 0b       	sbc	r25, r25
     784:	c1 2c       	mov	r12, r1
     786:	d1 2c       	mov	r13, r1
     788:	0f 2e       	mov	r0, r31
     78a:	f4 e2       	ldi	r31, 0x24	; 36
     78c:	ef 2e       	mov	r14, r31
     78e:	f3 e0       	ldi	r31, 0x03	; 3
     790:	ff 2e       	mov	r15, r31
     792:	f0 2d       	mov	r31, r0
     794:	8e 01       	movw	r16, r28
     796:	20 e0       	ldi	r18, 0x00	; 0
     798:	30 e0       	ldi	r19, 0x00	; 0
     79a:	a9 01       	movw	r20, r18
     79c:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <async>
     7a0:	9f 83       	std	Y+7, r25	; 0x07
     7a2:	8e 83       	std	Y+6, r24	; 0x06
     7a4:	12 c0       	rjmp	.+36     	; 0x7ca <setFrequency+0xda>
     7a6:	cc 80       	ldd	r12, Y+4	; 0x04
     7a8:	d1 2c       	mov	r13, r1
     7aa:	0c 85       	ldd	r16, Y+12	; 0x0c
     7ac:	1d 85       	ldd	r17, Y+13	; 0x0d
     7ae:	0f 2e       	mov	r0, r31
     7b0:	fb e0       	ldi	r31, 0x0B	; 11
     7b2:	ef 2e       	mov	r14, r31
     7b4:	f3 e0       	ldi	r31, 0x03	; 3
     7b6:	ff 2e       	mov	r15, r31
     7b8:	f0 2d       	mov	r31, r0
     7ba:	20 e0       	ldi	r18, 0x00	; 0
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	a9 01       	movw	r20, r18
     7c0:	60 e0       	ldi	r22, 0x00	; 0
     7c2:	70 e0       	ldi	r23, 0x00	; 0
     7c4:	cb 01       	movw	r24, r22
     7c6:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <async>
     7ca:	df 91       	pop	r29
     7cc:	cf 91       	pop	r28
     7ce:	1f 91       	pop	r17
     7d0:	0f 91       	pop	r16
     7d2:	ff 90       	pop	r15
     7d4:	ef 90       	pop	r14
     7d6:	df 90       	pop	r13
     7d8:	cf 90       	pop	r12
     7da:	bf 90       	pop	r11
     7dc:	af 90       	pop	r10
     7de:	08 95       	ret

000007e0 <save>:
     7e0:	fc 01       	movw	r30, r24
     7e2:	20 85       	ldd	r18, Z+8	; 0x08
     7e4:	31 85       	ldd	r19, Z+9	; 0x09
     7e6:	33 87       	std	Z+11, r19	; 0x0b
     7e8:	22 87       	std	Z+10, r18	; 0x0a
     7ea:	08 95       	ret

000007ec <restore>:
     7ec:	fc 01       	movw	r30, r24
     7ee:	22 85       	ldd	r18, Z+10	; 0x0a
     7f0:	33 85       	ldd	r19, Z+11	; 0x0b
     7f2:	31 87       	std	Z+9, r19	; 0x09
     7f4:	20 87       	std	Z+8, r18	; 0x08
     7f6:	08 95       	ret

000007f8 <remove>:
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
}
     7f8:	fb 01       	movw	r30, r22
     7fa:	a0 81       	ld	r26, Z
     7fc:	b1 81       	ldd	r27, Z+1	; 0x01
     7fe:	10 97       	sbiw	r26, 0x00	; 0
     800:	f1 f0       	breq	.+60     	; 0x83e <remove+0x46>
     802:	a8 17       	cp	r26, r24
     804:	b9 07       	cpc	r27, r25
     806:	11 f4       	brne	.+4      	; 0x80c <remove+0x14>
     808:	11 c0       	rjmp	.+34     	; 0x82c <remove+0x34>
     80a:	df 01       	movw	r26, r30
     80c:	ed 91       	ld	r30, X+
     80e:	fc 91       	ld	r31, X
     810:	11 97       	sbiw	r26, 0x01	; 1
     812:	30 97       	sbiw	r30, 0x00	; 0
     814:	b9 f0       	breq	.+46     	; 0x844 <remove+0x4c>
     816:	8e 17       	cp	r24, r30
     818:	9f 07       	cpc	r25, r31
     81a:	b9 f7       	brne	.-18     	; 0x80a <remove+0x12>
     81c:	16 c0       	rjmp	.+44     	; 0x84a <remove+0x52>
     81e:	80 81       	ld	r24, Z
     820:	91 81       	ldd	r25, Z+1	; 0x01
     822:	8d 93       	st	X+, r24
     824:	9c 93       	st	X, r25
     826:	81 e0       	ldi	r24, 0x01	; 1
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	08 95       	ret
     82c:	fd 01       	movw	r30, r26
     82e:	80 81       	ld	r24, Z
     830:	91 81       	ldd	r25, Z+1	; 0x01
     832:	fb 01       	movw	r30, r22
     834:	91 83       	std	Z+1, r25	; 0x01
     836:	80 83       	st	Z, r24
     838:	81 e0       	ldi	r24, 0x01	; 1
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	08 95       	ret
     83e:	80 e0       	ldi	r24, 0x00	; 0
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	08 95       	ret
     844:	80 e0       	ldi	r24, 0x00	; 0
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	08 95       	ret
     84a:	10 97       	sbiw	r26, 0x00	; 0
     84c:	41 f7       	brne	.-48     	; 0x81e <remove+0x26>
     84e:	ef cf       	rjmp	.-34     	; 0x82e <remove+0x36>

00000850 <initialize>:
     850:	cf 93       	push	r28
     852:	df 93       	push	r29
     854:	00 d0       	rcall	.+0      	; 0x856 <initialize+0x6>
     856:	00 d0       	rcall	.+0      	; 0x858 <initialize+0x8>
     858:	cd b7       	in	r28, 0x3d	; 61
     85a:	de b7       	in	r29, 0x3e	; 62
     85c:	87 e8       	ldi	r24, 0x87	; 135
     85e:	92 e0       	ldi	r25, 0x02	; 2
     860:	27 e6       	ldi	r18, 0x67	; 103
     862:	33 e0       	ldi	r19, 0x03	; 3
     864:	fc 01       	movw	r30, r24
     866:	70 97       	sbiw	r30, 0x10	; 16
     868:	91 83       	std	Z+1, r25	; 0x01
     86a:	80 83       	st	Z, r24
     86c:	40 96       	adiw	r24, 0x10	; 16
     86e:	82 17       	cp	r24, r18
     870:	93 07       	cpc	r25, r19
     872:	c1 f7       	brne	.-16     	; 0x864 <initialize+0x14>
     874:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <messages+0xe1>
     878:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <messages+0xe0>
     87c:	e2 ec       	ldi	r30, 0xC2	; 194
     87e:	f1 e0       	ldi	r31, 0x01	; 1
     880:	8f ed       	ldi	r24, 0xDF	; 223
     882:	91 e0       	ldi	r25, 0x01	; 1
     884:	91 83       	std	Z+1, r25	; 0x01
     886:	80 83       	st	Z, r24
     888:	8c ef       	ldi	r24, 0xFC	; 252
     88a:	91 e0       	ldi	r25, 0x01	; 1
     88c:	96 8f       	std	Z+30, r25	; 0x1e
     88e:	85 8f       	std	Z+29, r24	; 0x1d
     890:	a9 e1       	ldi	r26, 0x19	; 25
     892:	b2 e0       	ldi	r27, 0x02	; 2
     894:	b3 af       	std	Z+59, r27	; 0x3b
     896:	a2 af       	std	Z+58, r26	; 0x3a
     898:	1d 92       	st	X+, r1
     89a:	1c 92       	st	X, r1
     89c:	fa 83       	std	Y+2, r31	; 0x02
     89e:	e9 83       	std	Y+1, r30	; 0x01
     8a0:	e3 ec       	ldi	r30, 0xC3	; 195
     8a2:	f3 e0       	ldi	r31, 0x03	; 3
     8a4:	fc 83       	std	Y+4, r31	; 0x04
     8a6:	eb 83       	std	Y+3, r30	; 0x03
     8a8:	89 81       	ldd	r24, Y+1	; 0x01
     8aa:	9a 81       	ldd	r25, Y+2	; 0x02
     8ac:	06 96       	adiw	r24, 0x06	; 6
     8ae:	0e 94 2c 11 	call	0x2258	; 0x2258 <setjmp>
     8b2:	8b 81       	ldd	r24, Y+3	; 0x03
     8b4:	9c 81       	ldd	r25, Y+4	; 0x04
     8b6:	e9 81       	ldd	r30, Y+1	; 0x01
     8b8:	fa 81       	ldd	r31, Y+2	; 0x02
     8ba:	97 8b       	std	Z+23, r25	; 0x17
     8bc:	86 8b       	std	Z+22, r24	; 0x16
     8be:	91 8f       	std	Z+25, r25	; 0x19
     8c0:	80 8f       	std	Z+24, r24	; 0x18
     8c2:	88 ec       	ldi	r24, 0xC8	; 200
     8c4:	9f e0       	ldi	r25, 0x0F	; 15
     8c6:	94 8f       	std	Z+28, r25	; 0x1c
     8c8:	83 8f       	std	Z+27, r24	; 0x1b
     8ca:	15 82       	std	Z+5, r1	; 0x05
     8cc:	14 82       	std	Z+4, r1	; 0x04
     8ce:	7d 96       	adiw	r30, 0x1d	; 29
     8d0:	fa 83       	std	Y+2, r31	; 0x02
     8d2:	e9 83       	std	Y+1, r30	; 0x01
     8d4:	eb 81       	ldd	r30, Y+3	; 0x03
     8d6:	fc 81       	ldd	r31, Y+4	; 0x04
     8d8:	e0 5a       	subi	r30, 0xA0	; 160
     8da:	ff 4f       	sbci	r31, 0xFF	; 255
     8dc:	fc 83       	std	Y+4, r31	; 0x04
     8de:	eb 83       	std	Y+3, r30	; 0x03
     8e0:	89 81       	ldd	r24, Y+1	; 0x01
     8e2:	9a 81       	ldd	r25, Y+2	; 0x02
     8e4:	86 53       	subi	r24, 0x36	; 54
     8e6:	92 40       	sbci	r25, 0x02	; 2
     8e8:	f9 f6       	brne	.-66     	; 0x8a8 <initialize+0x58>
     8ea:	ea e5       	ldi	r30, 0x5A	; 90
     8ec:	f2 e0       	ldi	r31, 0x02	; 2
     8ee:	11 82       	std	Z+1, r1	; 0x01
     8f0:	10 82       	st	Z, r1
     8f2:	15 82       	std	Z+5, r1	; 0x05
     8f4:	14 82       	std	Z+4, r1	; 0x04
     8f6:	13 82       	std	Z+3, r1	; 0x03
     8f8:	12 82       	std	Z+2, r1	; 0x02
     8fa:	e1 e6       	ldi	r30, 0x61	; 97
     8fc:	f0 e0       	ldi	r31, 0x00	; 0
     8fe:	80 e8       	ldi	r24, 0x80	; 128
     900:	80 83       	st	Z, r24
     902:	10 82       	st	Z, r1
     904:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     908:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     90c:	84 e0       	ldi	r24, 0x04	; 4
     90e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     912:	81 e0       	ldi	r24, 0x01	; 1
     914:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
     918:	0f 90       	pop	r0
     91a:	0f 90       	pop	r0
     91c:	0f 90       	pop	r0
     91e:	0f 90       	pop	r0
     920:	df 91       	pop	r29
     922:	cf 91       	pop	r28
     924:	08 95       	ret

00000926 <dispatch>:
     926:	cf 93       	push	r28
     928:	df 93       	push	r29
     92a:	00 d0       	rcall	.+0      	; 0x92c <dispatch+0x6>
     92c:	cd b7       	in	r28, 0x3d	; 61
     92e:	de b7       	in	r29, 0x3e	; 62
     930:	9a 83       	std	Y+2, r25	; 0x02
     932:	89 83       	std	Y+1, r24	; 0x01
     934:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <current>
     938:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <current+0x1>
     93c:	06 96       	adiw	r24, 0x06	; 6
     93e:	0e 94 2c 11 	call	0x2258	; 0x2258 <setjmp>
     942:	89 2b       	or	r24, r25
     944:	59 f4       	brne	.+22     	; 0x95c <dispatch+0x36>
     946:	89 81       	ldd	r24, Y+1	; 0x01
     948:	9a 81       	ldd	r25, Y+2	; 0x02
     94a:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <current+0x1>
     94e:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <current>
     952:	61 e0       	ldi	r22, 0x01	; 1
     954:	70 e0       	ldi	r23, 0x00	; 0
     956:	06 96       	adiw	r24, 0x06	; 6
     958:	0e 94 4c 11 	call	0x2298	; 0x2298 <longjmp>
     95c:	0f 90       	pop	r0
     95e:	0f 90       	pop	r0
     960:	df 91       	pop	r29
     962:	cf 91       	pop	r28
     964:	08 95       	ret

00000966 <schedule>:
     966:	0f 93       	push	r16
     968:	1f 93       	push	r17
     96a:	cf 93       	push	r28
     96c:	df 93       	push	r29
     96e:	e0 91 9c 01 	lds	r30, 0x019C	; 0x80019c <msgQ>
     972:	f0 91 9d 01 	lds	r31, 0x019D	; 0x80019d <msgQ+0x1>
     976:	30 97       	sbiw	r30, 0x00	; 0
     978:	61 f1       	breq	.+88     	; 0x9d2 <schedule+0x6c>
     97a:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <threadPool>
     97e:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <threadPool+0x1>
     982:	00 97       	sbiw	r24, 0x00	; 0
     984:	31 f1       	breq	.+76     	; 0x9d2 <schedule+0x6c>
     986:	c0 91 7e 01 	lds	r28, 0x017E	; 0x80017e <activeStack>
     98a:	d0 91 7f 01 	lds	r29, 0x017F	; 0x80017f <activeStack+0x1>
     98e:	aa 81       	ldd	r26, Y+2	; 0x02
     990:	bb 81       	ldd	r27, Y+3	; 0x03
     992:	10 97       	sbiw	r26, 0x00	; 0
     994:	79 f0       	breq	.+30     	; 0x9b4 <schedule+0x4e>
     996:	46 81       	ldd	r20, Z+6	; 0x06
     998:	57 81       	ldd	r21, Z+7	; 0x07
     99a:	60 85       	ldd	r22, Z+8	; 0x08
     99c:	71 85       	ldd	r23, Z+9	; 0x09
     99e:	16 96       	adiw	r26, 0x06	; 6
     9a0:	0d 91       	ld	r16, X+
     9a2:	1d 91       	ld	r17, X+
     9a4:	2d 91       	ld	r18, X+
     9a6:	3c 91       	ld	r19, X
     9a8:	19 97       	sbiw	r26, 0x09	; 9
     9aa:	40 1b       	sub	r20, r16
     9ac:	51 0b       	sbc	r21, r17
     9ae:	62 0b       	sbc	r22, r18
     9b0:	73 0b       	sbc	r23, r19
     9b2:	7a f4       	brpl	.+30     	; 0x9d2 <schedule+0x6c>
     9b4:	fc 01       	movw	r30, r24
     9b6:	20 81       	ld	r18, Z
     9b8:	31 81       	ldd	r19, Z+1	; 0x01
     9ba:	30 93 81 01 	sts	0x0181, r19	; 0x800181 <threadPool+0x1>
     9be:	20 93 80 01 	sts	0x0180, r18	; 0x800180 <threadPool>
     9c2:	d1 83       	std	Z+1, r29	; 0x01
     9c4:	c0 83       	st	Z, r28
     9c6:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <activeStack+0x1>
     9ca:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <activeStack>
     9ce:	0e 94 93 04 	call	0x926	; 0x926 <dispatch>
     9d2:	df 91       	pop	r29
     9d4:	cf 91       	pop	r28
     9d6:	1f 91       	pop	r17
     9d8:	0f 91       	pop	r16
     9da:	08 95       	ret

000009dc <__vector_1>:
     9dc:	1f 92       	push	r1
     9de:	0f 92       	push	r0
     9e0:	0f b6       	in	r0, 0x3f	; 63
     9e2:	0f 92       	push	r0
     9e4:	11 24       	eor	r1, r1
     9e6:	2f 93       	push	r18
     9e8:	3f 93       	push	r19
     9ea:	4f 93       	push	r20
     9ec:	5f 93       	push	r21
     9ee:	6f 93       	push	r22
     9f0:	7f 93       	push	r23
     9f2:	8f 93       	push	r24
     9f4:	9f 93       	push	r25
     9f6:	af 93       	push	r26
     9f8:	bf 93       	push	r27
     9fa:	ef 93       	push	r30
     9fc:	ff 93       	push	r31
     9fe:	20 91 94 01 	lds	r18, 0x0194	; 0x800194 <overflows>
     a02:	30 91 95 01 	lds	r19, 0x0195	; 0x800195 <overflows+0x1>
     a06:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     a0a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     a0e:	c9 01       	movw	r24, r18
     a10:	03 2e       	mov	r0, r19
     a12:	00 0c       	add	r0, r0
     a14:	aa 0b       	sbc	r26, r26
     a16:	bb 0b       	sbc	r27, r27
     a18:	dc 01       	movw	r26, r24
     a1a:	99 27       	eor	r25, r25
     a1c:	88 27       	eor	r24, r24
     a1e:	60 e0       	ldi	r22, 0x00	; 0
     a20:	70 e0       	ldi	r23, 0x00	; 0
     a22:	84 2b       	or	r24, r20
     a24:	95 2b       	or	r25, r21
     a26:	a6 2b       	or	r26, r22
     a28:	b7 2b       	or	r27, r23
     a2a:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <timestamp>
     a2e:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <timestamp+0x1>
     a32:	a0 93 98 01 	sts	0x0198, r26	; 0x800198 <timestamp+0x2>
     a36:	b0 93 99 01 	sts	0x0199, r27	; 0x800199 <timestamp+0x3>
     a3a:	b0 9b       	sbis	0x16, 0	; 22
     a3c:	1b c0       	rjmp	.+54     	; 0xa74 <__vector_1+0x98>
     a3e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     a42:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     a46:	c9 01       	movw	r24, r18
     a48:	01 96       	adiw	r24, 0x01	; 1
     a4a:	09 2e       	mov	r0, r25
     a4c:	00 0c       	add	r0, r0
     a4e:	aa 0b       	sbc	r26, r26
     a50:	bb 0b       	sbc	r27, r27
     a52:	dc 01       	movw	r26, r24
     a54:	99 27       	eor	r25, r25
     a56:	88 27       	eor	r24, r24
     a58:	60 e0       	ldi	r22, 0x00	; 0
     a5a:	70 e0       	ldi	r23, 0x00	; 0
     a5c:	84 2b       	or	r24, r20
     a5e:	95 2b       	or	r25, r21
     a60:	a6 2b       	or	r26, r22
     a62:	b7 2b       	or	r27, r23
     a64:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <timestamp>
     a68:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <timestamp+0x1>
     a6c:	a0 93 98 01 	sts	0x0198, r26	; 0x800198 <timestamp+0x2>
     a70:	b0 93 99 01 	sts	0x0199, r27	; 0x800199 <timestamp+0x3>
     a74:	e0 91 36 02 	lds	r30, 0x0236	; 0x800236 <mtable>
     a78:	f0 91 37 02 	lds	r31, 0x0237	; 0x800237 <mtable+0x1>
     a7c:	30 97       	sbiw	r30, 0x00	; 0
     a7e:	39 f0       	breq	.+14     	; 0xa8e <__vector_1+0xb2>
     a80:	60 e0       	ldi	r22, 0x00	; 0
     a82:	70 e0       	ldi	r23, 0x00	; 0
     a84:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <otable>
     a88:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <otable+0x1>
     a8c:	09 95       	icall
     a8e:	0e 94 b3 04 	call	0x966	; 0x966 <schedule>
     a92:	ff 91       	pop	r31
     a94:	ef 91       	pop	r30
     a96:	bf 91       	pop	r27
     a98:	af 91       	pop	r26
     a9a:	9f 91       	pop	r25
     a9c:	8f 91       	pop	r24
     a9e:	7f 91       	pop	r23
     aa0:	6f 91       	pop	r22
     aa2:	5f 91       	pop	r21
     aa4:	4f 91       	pop	r20
     aa6:	3f 91       	pop	r19
     aa8:	2f 91       	pop	r18
     aaa:	0f 90       	pop	r0
     aac:	0f be       	out	0x3f, r0	; 63
     aae:	0f 90       	pop	r0
     ab0:	1f 90       	pop	r1
     ab2:	18 95       	reti

00000ab4 <__vector_2>:
     ab4:	1f 92       	push	r1
     ab6:	0f 92       	push	r0
     ab8:	0f b6       	in	r0, 0x3f	; 63
     aba:	0f 92       	push	r0
     abc:	11 24       	eor	r1, r1
     abe:	2f 93       	push	r18
     ac0:	3f 93       	push	r19
     ac2:	4f 93       	push	r20
     ac4:	5f 93       	push	r21
     ac6:	6f 93       	push	r22
     ac8:	7f 93       	push	r23
     aca:	8f 93       	push	r24
     acc:	9f 93       	push	r25
     ace:	af 93       	push	r26
     ad0:	bf 93       	push	r27
     ad2:	ef 93       	push	r30
     ad4:	ff 93       	push	r31
     ad6:	20 91 94 01 	lds	r18, 0x0194	; 0x800194 <overflows>
     ada:	30 91 95 01 	lds	r19, 0x0195	; 0x800195 <overflows+0x1>
     ade:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     ae2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     ae6:	c9 01       	movw	r24, r18
     ae8:	03 2e       	mov	r0, r19
     aea:	00 0c       	add	r0, r0
     aec:	aa 0b       	sbc	r26, r26
     aee:	bb 0b       	sbc	r27, r27
     af0:	dc 01       	movw	r26, r24
     af2:	99 27       	eor	r25, r25
     af4:	88 27       	eor	r24, r24
     af6:	60 e0       	ldi	r22, 0x00	; 0
     af8:	70 e0       	ldi	r23, 0x00	; 0
     afa:	84 2b       	or	r24, r20
     afc:	95 2b       	or	r25, r21
     afe:	a6 2b       	or	r26, r22
     b00:	b7 2b       	or	r27, r23
     b02:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <timestamp>
     b06:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <timestamp+0x1>
     b0a:	a0 93 98 01 	sts	0x0198, r26	; 0x800198 <timestamp+0x2>
     b0e:	b0 93 99 01 	sts	0x0199, r27	; 0x800199 <timestamp+0x3>
     b12:	b0 9b       	sbis	0x16, 0	; 22
     b14:	1b c0       	rjmp	.+54     	; 0xb4c <__vector_2+0x98>
     b16:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     b1a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     b1e:	c9 01       	movw	r24, r18
     b20:	01 96       	adiw	r24, 0x01	; 1
     b22:	09 2e       	mov	r0, r25
     b24:	00 0c       	add	r0, r0
     b26:	aa 0b       	sbc	r26, r26
     b28:	bb 0b       	sbc	r27, r27
     b2a:	dc 01       	movw	r26, r24
     b2c:	99 27       	eor	r25, r25
     b2e:	88 27       	eor	r24, r24
     b30:	60 e0       	ldi	r22, 0x00	; 0
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	84 2b       	or	r24, r20
     b36:	95 2b       	or	r25, r21
     b38:	a6 2b       	or	r26, r22
     b3a:	b7 2b       	or	r27, r23
     b3c:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <timestamp>
     b40:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <timestamp+0x1>
     b44:	a0 93 98 01 	sts	0x0198, r26	; 0x800198 <timestamp+0x2>
     b48:	b0 93 99 01 	sts	0x0199, r27	; 0x800199 <timestamp+0x3>
     b4c:	e0 91 38 02 	lds	r30, 0x0238	; 0x800238 <mtable+0x2>
     b50:	f0 91 39 02 	lds	r31, 0x0239	; 0x800239 <mtable+0x3>
     b54:	30 97       	sbiw	r30, 0x00	; 0
     b56:	39 f0       	breq	.+14     	; 0xb66 <__vector_2+0xb2>
     b58:	61 e0       	ldi	r22, 0x01	; 1
     b5a:	70 e0       	ldi	r23, 0x00	; 0
     b5c:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <otable+0x2>
     b60:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <otable+0x3>
     b64:	09 95       	icall
     b66:	0e 94 b3 04 	call	0x966	; 0x966 <schedule>
     b6a:	ff 91       	pop	r31
     b6c:	ef 91       	pop	r30
     b6e:	bf 91       	pop	r27
     b70:	af 91       	pop	r26
     b72:	9f 91       	pop	r25
     b74:	8f 91       	pop	r24
     b76:	7f 91       	pop	r23
     b78:	6f 91       	pop	r22
     b7a:	5f 91       	pop	r21
     b7c:	4f 91       	pop	r20
     b7e:	3f 91       	pop	r19
     b80:	2f 91       	pop	r18
     b82:	0f 90       	pop	r0
     b84:	0f be       	out	0x3f, r0	; 63
     b86:	0f 90       	pop	r0
     b88:	1f 90       	pop	r1
     b8a:	18 95       	reti

00000b8c <__vector_3>:
     b8c:	1f 92       	push	r1
     b8e:	0f 92       	push	r0
     b90:	0f b6       	in	r0, 0x3f	; 63
     b92:	0f 92       	push	r0
     b94:	11 24       	eor	r1, r1
     b96:	2f 93       	push	r18
     b98:	3f 93       	push	r19
     b9a:	4f 93       	push	r20
     b9c:	5f 93       	push	r21
     b9e:	6f 93       	push	r22
     ba0:	7f 93       	push	r23
     ba2:	8f 93       	push	r24
     ba4:	9f 93       	push	r25
     ba6:	af 93       	push	r26
     ba8:	bf 93       	push	r27
     baa:	ef 93       	push	r30
     bac:	ff 93       	push	r31
     bae:	20 91 94 01 	lds	r18, 0x0194	; 0x800194 <overflows>
     bb2:	30 91 95 01 	lds	r19, 0x0195	; 0x800195 <overflows+0x1>
     bb6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     bba:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     bbe:	c9 01       	movw	r24, r18
     bc0:	03 2e       	mov	r0, r19
     bc2:	00 0c       	add	r0, r0
     bc4:	aa 0b       	sbc	r26, r26
     bc6:	bb 0b       	sbc	r27, r27
     bc8:	dc 01       	movw	r26, r24
     bca:	99 27       	eor	r25, r25
     bcc:	88 27       	eor	r24, r24
     bce:	60 e0       	ldi	r22, 0x00	; 0
     bd0:	70 e0       	ldi	r23, 0x00	; 0
     bd2:	84 2b       	or	r24, r20
     bd4:	95 2b       	or	r25, r21
     bd6:	a6 2b       	or	r26, r22
     bd8:	b7 2b       	or	r27, r23
     bda:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <timestamp>
     bde:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <timestamp+0x1>
     be2:	a0 93 98 01 	sts	0x0198, r26	; 0x800198 <timestamp+0x2>
     be6:	b0 93 99 01 	sts	0x0199, r27	; 0x800199 <timestamp+0x3>
     bea:	b0 9b       	sbis	0x16, 0	; 22
     bec:	1b c0       	rjmp	.+54     	; 0xc24 <__vector_3+0x98>
     bee:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     bf2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     bf6:	c9 01       	movw	r24, r18
     bf8:	01 96       	adiw	r24, 0x01	; 1
     bfa:	09 2e       	mov	r0, r25
     bfc:	00 0c       	add	r0, r0
     bfe:	aa 0b       	sbc	r26, r26
     c00:	bb 0b       	sbc	r27, r27
     c02:	dc 01       	movw	r26, r24
     c04:	99 27       	eor	r25, r25
     c06:	88 27       	eor	r24, r24
     c08:	60 e0       	ldi	r22, 0x00	; 0
     c0a:	70 e0       	ldi	r23, 0x00	; 0
     c0c:	84 2b       	or	r24, r20
     c0e:	95 2b       	or	r25, r21
     c10:	a6 2b       	or	r26, r22
     c12:	b7 2b       	or	r27, r23
     c14:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <timestamp>
     c18:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <timestamp+0x1>
     c1c:	a0 93 98 01 	sts	0x0198, r26	; 0x800198 <timestamp+0x2>
     c20:	b0 93 99 01 	sts	0x0199, r27	; 0x800199 <timestamp+0x3>
     c24:	e0 91 3a 02 	lds	r30, 0x023A	; 0x80023a <mtable+0x4>
     c28:	f0 91 3b 02 	lds	r31, 0x023B	; 0x80023b <mtable+0x5>
     c2c:	30 97       	sbiw	r30, 0x00	; 0
     c2e:	39 f0       	breq	.+14     	; 0xc3e <__vector_3+0xb2>
     c30:	62 e0       	ldi	r22, 0x02	; 2
     c32:	70 e0       	ldi	r23, 0x00	; 0
     c34:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <otable+0x4>
     c38:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <otable+0x5>
     c3c:	09 95       	icall
     c3e:	0e 94 b3 04 	call	0x966	; 0x966 <schedule>
     c42:	ff 91       	pop	r31
     c44:	ef 91       	pop	r30
     c46:	bf 91       	pop	r27
     c48:	af 91       	pop	r26
     c4a:	9f 91       	pop	r25
     c4c:	8f 91       	pop	r24
     c4e:	7f 91       	pop	r23
     c50:	6f 91       	pop	r22
     c52:	5f 91       	pop	r21
     c54:	4f 91       	pop	r20
     c56:	3f 91       	pop	r19
     c58:	2f 91       	pop	r18
     c5a:	0f 90       	pop	r0
     c5c:	0f be       	out	0x3f, r0	; 63
     c5e:	0f 90       	pop	r0
     c60:	1f 90       	pop	r1
     c62:	18 95       	reti

00000c64 <__vector_4>:
     c64:	1f 92       	push	r1
     c66:	0f 92       	push	r0
     c68:	0f b6       	in	r0, 0x3f	; 63
     c6a:	0f 92       	push	r0
     c6c:	11 24       	eor	r1, r1
     c6e:	2f 93       	push	r18
     c70:	3f 93       	push	r19
     c72:	4f 93       	push	r20
     c74:	5f 93       	push	r21
     c76:	6f 93       	push	r22
     c78:	7f 93       	push	r23
     c7a:	8f 93       	push	r24
     c7c:	9f 93       	push	r25
     c7e:	af 93       	push	r26
     c80:	bf 93       	push	r27
     c82:	ef 93       	push	r30
     c84:	ff 93       	push	r31
     c86:	20 91 94 01 	lds	r18, 0x0194	; 0x800194 <overflows>
     c8a:	30 91 95 01 	lds	r19, 0x0195	; 0x800195 <overflows+0x1>
     c8e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     c92:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     c96:	c9 01       	movw	r24, r18
     c98:	03 2e       	mov	r0, r19
     c9a:	00 0c       	add	r0, r0
     c9c:	aa 0b       	sbc	r26, r26
     c9e:	bb 0b       	sbc	r27, r27
     ca0:	dc 01       	movw	r26, r24
     ca2:	99 27       	eor	r25, r25
     ca4:	88 27       	eor	r24, r24
     ca6:	60 e0       	ldi	r22, 0x00	; 0
     ca8:	70 e0       	ldi	r23, 0x00	; 0
     caa:	84 2b       	or	r24, r20
     cac:	95 2b       	or	r25, r21
     cae:	a6 2b       	or	r26, r22
     cb0:	b7 2b       	or	r27, r23
     cb2:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <timestamp>
     cb6:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <timestamp+0x1>
     cba:	a0 93 98 01 	sts	0x0198, r26	; 0x800198 <timestamp+0x2>
     cbe:	b0 93 99 01 	sts	0x0199, r27	; 0x800199 <timestamp+0x3>
     cc2:	b0 9b       	sbis	0x16, 0	; 22
     cc4:	1b c0       	rjmp	.+54     	; 0xcfc <__vector_4+0x98>
     cc6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     cca:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     cce:	c9 01       	movw	r24, r18
     cd0:	01 96       	adiw	r24, 0x01	; 1
     cd2:	09 2e       	mov	r0, r25
     cd4:	00 0c       	add	r0, r0
     cd6:	aa 0b       	sbc	r26, r26
     cd8:	bb 0b       	sbc	r27, r27
     cda:	dc 01       	movw	r26, r24
     cdc:	99 27       	eor	r25, r25
     cde:	88 27       	eor	r24, r24
     ce0:	60 e0       	ldi	r22, 0x00	; 0
     ce2:	70 e0       	ldi	r23, 0x00	; 0
     ce4:	84 2b       	or	r24, r20
     ce6:	95 2b       	or	r25, r21
     ce8:	a6 2b       	or	r26, r22
     cea:	b7 2b       	or	r27, r23
     cec:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <timestamp>
     cf0:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <timestamp+0x1>
     cf4:	a0 93 98 01 	sts	0x0198, r26	; 0x800198 <timestamp+0x2>
     cf8:	b0 93 99 01 	sts	0x0199, r27	; 0x800199 <timestamp+0x3>
     cfc:	e0 91 3c 02 	lds	r30, 0x023C	; 0x80023c <mtable+0x6>
     d00:	f0 91 3d 02 	lds	r31, 0x023D	; 0x80023d <mtable+0x7>
     d04:	30 97       	sbiw	r30, 0x00	; 0
     d06:	39 f0       	breq	.+14     	; 0xd16 <__vector_4+0xb2>
     d08:	63 e0       	ldi	r22, 0x03	; 3
     d0a:	70 e0       	ldi	r23, 0x00	; 0
     d0c:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <otable+0x6>
     d10:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <otable+0x7>
     d14:	09 95       	icall
     d16:	0e 94 b3 04 	call	0x966	; 0x966 <schedule>
     d1a:	ff 91       	pop	r31
     d1c:	ef 91       	pop	r30
     d1e:	bf 91       	pop	r27
     d20:	af 91       	pop	r26
     d22:	9f 91       	pop	r25
     d24:	8f 91       	pop	r24
     d26:	7f 91       	pop	r23
     d28:	6f 91       	pop	r22
     d2a:	5f 91       	pop	r21
     d2c:	4f 91       	pop	r20
     d2e:	3f 91       	pop	r19
     d30:	2f 91       	pop	r18
     d32:	0f 90       	pop	r0
     d34:	0f be       	out	0x3f, r0	; 63
     d36:	0f 90       	pop	r0
     d38:	1f 90       	pop	r1
     d3a:	18 95       	reti

00000d3c <__vector_5>:
     d3c:	1f 92       	push	r1
     d3e:	0f 92       	push	r0
     d40:	0f b6       	in	r0, 0x3f	; 63
     d42:	0f 92       	push	r0
     d44:	11 24       	eor	r1, r1
     d46:	2f 93       	push	r18
     d48:	3f 93       	push	r19
     d4a:	4f 93       	push	r20
     d4c:	5f 93       	push	r21
     d4e:	6f 93       	push	r22
     d50:	7f 93       	push	r23
     d52:	8f 93       	push	r24
     d54:	9f 93       	push	r25
     d56:	af 93       	push	r26
     d58:	bf 93       	push	r27
     d5a:	ef 93       	push	r30
     d5c:	ff 93       	push	r31
     d5e:	20 91 94 01 	lds	r18, 0x0194	; 0x800194 <overflows>
     d62:	30 91 95 01 	lds	r19, 0x0195	; 0x800195 <overflows+0x1>
     d66:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     d6a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     d6e:	c9 01       	movw	r24, r18
     d70:	03 2e       	mov	r0, r19
     d72:	00 0c       	add	r0, r0
     d74:	aa 0b       	sbc	r26, r26
     d76:	bb 0b       	sbc	r27, r27
     d78:	dc 01       	movw	r26, r24
     d7a:	99 27       	eor	r25, r25
     d7c:	88 27       	eor	r24, r24
     d7e:	60 e0       	ldi	r22, 0x00	; 0
     d80:	70 e0       	ldi	r23, 0x00	; 0
     d82:	84 2b       	or	r24, r20
     d84:	95 2b       	or	r25, r21
     d86:	a6 2b       	or	r26, r22
     d88:	b7 2b       	or	r27, r23
     d8a:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <timestamp>
     d8e:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <timestamp+0x1>
     d92:	a0 93 98 01 	sts	0x0198, r26	; 0x800198 <timestamp+0x2>
     d96:	b0 93 99 01 	sts	0x0199, r27	; 0x800199 <timestamp+0x3>
     d9a:	b0 9b       	sbis	0x16, 0	; 22
     d9c:	1b c0       	rjmp	.+54     	; 0xdd4 <__vector_5+0x98>
     d9e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     da2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     da6:	c9 01       	movw	r24, r18
     da8:	01 96       	adiw	r24, 0x01	; 1
     daa:	09 2e       	mov	r0, r25
     dac:	00 0c       	add	r0, r0
     dae:	aa 0b       	sbc	r26, r26
     db0:	bb 0b       	sbc	r27, r27
     db2:	dc 01       	movw	r26, r24
     db4:	99 27       	eor	r25, r25
     db6:	88 27       	eor	r24, r24
     db8:	60 e0       	ldi	r22, 0x00	; 0
     dba:	70 e0       	ldi	r23, 0x00	; 0
     dbc:	84 2b       	or	r24, r20
     dbe:	95 2b       	or	r25, r21
     dc0:	a6 2b       	or	r26, r22
     dc2:	b7 2b       	or	r27, r23
     dc4:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <timestamp>
     dc8:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <timestamp+0x1>
     dcc:	a0 93 98 01 	sts	0x0198, r26	; 0x800198 <timestamp+0x2>
     dd0:	b0 93 99 01 	sts	0x0199, r27	; 0x800199 <timestamp+0x3>
     dd4:	e0 91 3e 02 	lds	r30, 0x023E	; 0x80023e <mtable+0x8>
     dd8:	f0 91 3f 02 	lds	r31, 0x023F	; 0x80023f <mtable+0x9>
     ddc:	30 97       	sbiw	r30, 0x00	; 0
     dde:	39 f0       	breq	.+14     	; 0xdee <__vector_5+0xb2>
     de0:	64 e0       	ldi	r22, 0x04	; 4
     de2:	70 e0       	ldi	r23, 0x00	; 0
     de4:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <otable+0x8>
     de8:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <otable+0x9>
     dec:	09 95       	icall
     dee:	0e 94 b3 04 	call	0x966	; 0x966 <schedule>
     df2:	ff 91       	pop	r31
     df4:	ef 91       	pop	r30
     df6:	bf 91       	pop	r27
     df8:	af 91       	pop	r26
     dfa:	9f 91       	pop	r25
     dfc:	8f 91       	pop	r24
     dfe:	7f 91       	pop	r23
     e00:	6f 91       	pop	r22
     e02:	5f 91       	pop	r21
     e04:	4f 91       	pop	r20
     e06:	3f 91       	pop	r19
     e08:	2f 91       	pop	r18
     e0a:	0f 90       	pop	r0
     e0c:	0f be       	out	0x3f, r0	; 63
     e0e:	0f 90       	pop	r0
     e10:	1f 90       	pop	r1
     e12:	18 95       	reti

00000e14 <__vector_10>:
     e14:	1f 92       	push	r1
     e16:	0f 92       	push	r0
     e18:	0f b6       	in	r0, 0x3f	; 63
     e1a:	0f 92       	push	r0
     e1c:	11 24       	eor	r1, r1
     e1e:	2f 93       	push	r18
     e20:	3f 93       	push	r19
     e22:	4f 93       	push	r20
     e24:	5f 93       	push	r21
     e26:	6f 93       	push	r22
     e28:	7f 93       	push	r23
     e2a:	8f 93       	push	r24
     e2c:	9f 93       	push	r25
     e2e:	af 93       	push	r26
     e30:	bf 93       	push	r27
     e32:	ef 93       	push	r30
     e34:	ff 93       	push	r31
     e36:	20 91 94 01 	lds	r18, 0x0194	; 0x800194 <overflows>
     e3a:	30 91 95 01 	lds	r19, 0x0195	; 0x800195 <overflows+0x1>
     e3e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     e42:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     e46:	c9 01       	movw	r24, r18
     e48:	03 2e       	mov	r0, r19
     e4a:	00 0c       	add	r0, r0
     e4c:	aa 0b       	sbc	r26, r26
     e4e:	bb 0b       	sbc	r27, r27
     e50:	dc 01       	movw	r26, r24
     e52:	99 27       	eor	r25, r25
     e54:	88 27       	eor	r24, r24
     e56:	60 e0       	ldi	r22, 0x00	; 0
     e58:	70 e0       	ldi	r23, 0x00	; 0
     e5a:	84 2b       	or	r24, r20
     e5c:	95 2b       	or	r25, r21
     e5e:	a6 2b       	or	r26, r22
     e60:	b7 2b       	or	r27, r23
     e62:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <timestamp>
     e66:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <timestamp+0x1>
     e6a:	a0 93 98 01 	sts	0x0198, r26	; 0x800198 <timestamp+0x2>
     e6e:	b0 93 99 01 	sts	0x0199, r27	; 0x800199 <timestamp+0x3>
     e72:	b0 9b       	sbis	0x16, 0	; 22
     e74:	1b c0       	rjmp	.+54     	; 0xeac <__vector_10+0x98>
     e76:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     e7a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     e7e:	c9 01       	movw	r24, r18
     e80:	01 96       	adiw	r24, 0x01	; 1
     e82:	09 2e       	mov	r0, r25
     e84:	00 0c       	add	r0, r0
     e86:	aa 0b       	sbc	r26, r26
     e88:	bb 0b       	sbc	r27, r27
     e8a:	dc 01       	movw	r26, r24
     e8c:	99 27       	eor	r25, r25
     e8e:	88 27       	eor	r24, r24
     e90:	60 e0       	ldi	r22, 0x00	; 0
     e92:	70 e0       	ldi	r23, 0x00	; 0
     e94:	84 2b       	or	r24, r20
     e96:	95 2b       	or	r25, r21
     e98:	a6 2b       	or	r26, r22
     e9a:	b7 2b       	or	r27, r23
     e9c:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <timestamp>
     ea0:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <timestamp+0x1>
     ea4:	a0 93 98 01 	sts	0x0198, r26	; 0x800198 <timestamp+0x2>
     ea8:	b0 93 99 01 	sts	0x0199, r27	; 0x800199 <timestamp+0x3>
     eac:	e0 91 40 02 	lds	r30, 0x0240	; 0x800240 <mtable+0xa>
     eb0:	f0 91 41 02 	lds	r31, 0x0241	; 0x800241 <mtable+0xb>
     eb4:	30 97       	sbiw	r30, 0x00	; 0
     eb6:	39 f0       	breq	.+14     	; 0xec6 <__vector_10+0xb2>
     eb8:	65 e0       	ldi	r22, 0x05	; 5
     eba:	70 e0       	ldi	r23, 0x00	; 0
     ebc:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <otable+0xa>
     ec0:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <otable+0xb>
     ec4:	09 95       	icall
     ec6:	0e 94 b3 04 	call	0x966	; 0x966 <schedule>
     eca:	ff 91       	pop	r31
     ecc:	ef 91       	pop	r30
     ece:	bf 91       	pop	r27
     ed0:	af 91       	pop	r26
     ed2:	9f 91       	pop	r25
     ed4:	8f 91       	pop	r24
     ed6:	7f 91       	pop	r23
     ed8:	6f 91       	pop	r22
     eda:	5f 91       	pop	r21
     edc:	4f 91       	pop	r20
     ede:	3f 91       	pop	r19
     ee0:	2f 91       	pop	r18
     ee2:	0f 90       	pop	r0
     ee4:	0f be       	out	0x3f, r0	; 63
     ee6:	0f 90       	pop	r0
     ee8:	1f 90       	pop	r1
     eea:	18 95       	reti

00000eec <__vector_11>:
     eec:	1f 92       	push	r1
     eee:	0f 92       	push	r0
     ef0:	0f b6       	in	r0, 0x3f	; 63
     ef2:	0f 92       	push	r0
     ef4:	11 24       	eor	r1, r1
     ef6:	2f 93       	push	r18
     ef8:	3f 93       	push	r19
     efa:	4f 93       	push	r20
     efc:	5f 93       	push	r21
     efe:	6f 93       	push	r22
     f00:	7f 93       	push	r23
     f02:	8f 93       	push	r24
     f04:	9f 93       	push	r25
     f06:	af 93       	push	r26
     f08:	bf 93       	push	r27
     f0a:	ef 93       	push	r30
     f0c:	ff 93       	push	r31
     f0e:	20 91 94 01 	lds	r18, 0x0194	; 0x800194 <overflows>
     f12:	30 91 95 01 	lds	r19, 0x0195	; 0x800195 <overflows+0x1>
     f16:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     f1a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     f1e:	c9 01       	movw	r24, r18
     f20:	03 2e       	mov	r0, r19
     f22:	00 0c       	add	r0, r0
     f24:	aa 0b       	sbc	r26, r26
     f26:	bb 0b       	sbc	r27, r27
     f28:	dc 01       	movw	r26, r24
     f2a:	99 27       	eor	r25, r25
     f2c:	88 27       	eor	r24, r24
     f2e:	60 e0       	ldi	r22, 0x00	; 0
     f30:	70 e0       	ldi	r23, 0x00	; 0
     f32:	84 2b       	or	r24, r20
     f34:	95 2b       	or	r25, r21
     f36:	a6 2b       	or	r26, r22
     f38:	b7 2b       	or	r27, r23
     f3a:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <timestamp>
     f3e:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <timestamp+0x1>
     f42:	a0 93 98 01 	sts	0x0198, r26	; 0x800198 <timestamp+0x2>
     f46:	b0 93 99 01 	sts	0x0199, r27	; 0x800199 <timestamp+0x3>
     f4a:	b0 9b       	sbis	0x16, 0	; 22
     f4c:	1b c0       	rjmp	.+54     	; 0xf84 <__vector_11+0x98>
     f4e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     f52:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     f56:	c9 01       	movw	r24, r18
     f58:	01 96       	adiw	r24, 0x01	; 1
     f5a:	09 2e       	mov	r0, r25
     f5c:	00 0c       	add	r0, r0
     f5e:	aa 0b       	sbc	r26, r26
     f60:	bb 0b       	sbc	r27, r27
     f62:	dc 01       	movw	r26, r24
     f64:	99 27       	eor	r25, r25
     f66:	88 27       	eor	r24, r24
     f68:	60 e0       	ldi	r22, 0x00	; 0
     f6a:	70 e0       	ldi	r23, 0x00	; 0
     f6c:	84 2b       	or	r24, r20
     f6e:	95 2b       	or	r25, r21
     f70:	a6 2b       	or	r26, r22
     f72:	b7 2b       	or	r27, r23
     f74:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <timestamp>
     f78:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <timestamp+0x1>
     f7c:	a0 93 98 01 	sts	0x0198, r26	; 0x800198 <timestamp+0x2>
     f80:	b0 93 99 01 	sts	0x0199, r27	; 0x800199 <timestamp+0x3>
     f84:	e0 91 42 02 	lds	r30, 0x0242	; 0x800242 <mtable+0xc>
     f88:	f0 91 43 02 	lds	r31, 0x0243	; 0x800243 <mtable+0xd>
     f8c:	30 97       	sbiw	r30, 0x00	; 0
     f8e:	39 f0       	breq	.+14     	; 0xf9e <__vector_11+0xb2>
     f90:	66 e0       	ldi	r22, 0x06	; 6
     f92:	70 e0       	ldi	r23, 0x00	; 0
     f94:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <otable+0xc>
     f98:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <otable+0xd>
     f9c:	09 95       	icall
     f9e:	0e 94 b3 04 	call	0x966	; 0x966 <schedule>
     fa2:	ff 91       	pop	r31
     fa4:	ef 91       	pop	r30
     fa6:	bf 91       	pop	r27
     fa8:	af 91       	pop	r26
     faa:	9f 91       	pop	r25
     fac:	8f 91       	pop	r24
     fae:	7f 91       	pop	r23
     fb0:	6f 91       	pop	r22
     fb2:	5f 91       	pop	r21
     fb4:	4f 91       	pop	r20
     fb6:	3f 91       	pop	r19
     fb8:	2f 91       	pop	r18
     fba:	0f 90       	pop	r0
     fbc:	0f be       	out	0x3f, r0	; 63
     fbe:	0f 90       	pop	r0
     fc0:	1f 90       	pop	r1
     fc2:	18 95       	reti

00000fc4 <__vector_12>:
     fc4:	1f 92       	push	r1
     fc6:	0f 92       	push	r0
     fc8:	0f b6       	in	r0, 0x3f	; 63
     fca:	0f 92       	push	r0
     fcc:	11 24       	eor	r1, r1
     fce:	2f 93       	push	r18
     fd0:	3f 93       	push	r19
     fd2:	4f 93       	push	r20
     fd4:	5f 93       	push	r21
     fd6:	6f 93       	push	r22
     fd8:	7f 93       	push	r23
     fda:	8f 93       	push	r24
     fdc:	9f 93       	push	r25
     fde:	af 93       	push	r26
     fe0:	bf 93       	push	r27
     fe2:	ef 93       	push	r30
     fe4:	ff 93       	push	r31
     fe6:	20 91 94 01 	lds	r18, 0x0194	; 0x800194 <overflows>
     fea:	30 91 95 01 	lds	r19, 0x0195	; 0x800195 <overflows+0x1>
     fee:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     ff2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     ff6:	c9 01       	movw	r24, r18
     ff8:	03 2e       	mov	r0, r19
     ffa:	00 0c       	add	r0, r0
     ffc:	aa 0b       	sbc	r26, r26
     ffe:	bb 0b       	sbc	r27, r27
    1000:	dc 01       	movw	r26, r24
    1002:	99 27       	eor	r25, r25
    1004:	88 27       	eor	r24, r24
    1006:	60 e0       	ldi	r22, 0x00	; 0
    1008:	70 e0       	ldi	r23, 0x00	; 0
    100a:	84 2b       	or	r24, r20
    100c:	95 2b       	or	r25, r21
    100e:	a6 2b       	or	r26, r22
    1010:	b7 2b       	or	r27, r23
    1012:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <timestamp>
    1016:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <timestamp+0x1>
    101a:	a0 93 98 01 	sts	0x0198, r26	; 0x800198 <timestamp+0x2>
    101e:	b0 93 99 01 	sts	0x0199, r27	; 0x800199 <timestamp+0x3>
    1022:	b0 9b       	sbis	0x16, 0	; 22
    1024:	1b c0       	rjmp	.+54     	; 0x105c <__vector_12+0x98>
    1026:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    102a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    102e:	c9 01       	movw	r24, r18
    1030:	01 96       	adiw	r24, 0x01	; 1
    1032:	09 2e       	mov	r0, r25
    1034:	00 0c       	add	r0, r0
    1036:	aa 0b       	sbc	r26, r26
    1038:	bb 0b       	sbc	r27, r27
    103a:	dc 01       	movw	r26, r24
    103c:	99 27       	eor	r25, r25
    103e:	88 27       	eor	r24, r24
    1040:	60 e0       	ldi	r22, 0x00	; 0
    1042:	70 e0       	ldi	r23, 0x00	; 0
    1044:	84 2b       	or	r24, r20
    1046:	95 2b       	or	r25, r21
    1048:	a6 2b       	or	r26, r22
    104a:	b7 2b       	or	r27, r23
    104c:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <timestamp>
    1050:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <timestamp+0x1>
    1054:	a0 93 98 01 	sts	0x0198, r26	; 0x800198 <timestamp+0x2>
    1058:	b0 93 99 01 	sts	0x0199, r27	; 0x800199 <timestamp+0x3>
    105c:	e0 91 44 02 	lds	r30, 0x0244	; 0x800244 <mtable+0xe>
    1060:	f0 91 45 02 	lds	r31, 0x0245	; 0x800245 <mtable+0xf>
    1064:	30 97       	sbiw	r30, 0x00	; 0
    1066:	39 f0       	breq	.+14     	; 0x1076 <__vector_12+0xb2>
    1068:	67 e0       	ldi	r22, 0x07	; 7
    106a:	70 e0       	ldi	r23, 0x00	; 0
    106c:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <otable+0xe>
    1070:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <otable+0xf>
    1074:	09 95       	icall
    1076:	0e 94 b3 04 	call	0x966	; 0x966 <schedule>
    107a:	ff 91       	pop	r31
    107c:	ef 91       	pop	r30
    107e:	bf 91       	pop	r27
    1080:	af 91       	pop	r26
    1082:	9f 91       	pop	r25
    1084:	8f 91       	pop	r24
    1086:	7f 91       	pop	r23
    1088:	6f 91       	pop	r22
    108a:	5f 91       	pop	r21
    108c:	4f 91       	pop	r20
    108e:	3f 91       	pop	r19
    1090:	2f 91       	pop	r18
    1092:	0f 90       	pop	r0
    1094:	0f be       	out	0x3f, r0	; 63
    1096:	0f 90       	pop	r0
    1098:	1f 90       	pop	r1
    109a:	18 95       	reti

0000109c <__vector_13>:
    109c:	1f 92       	push	r1
    109e:	0f 92       	push	r0
    10a0:	0f b6       	in	r0, 0x3f	; 63
    10a2:	0f 92       	push	r0
    10a4:	11 24       	eor	r1, r1
    10a6:	2f 93       	push	r18
    10a8:	3f 93       	push	r19
    10aa:	4f 93       	push	r20
    10ac:	5f 93       	push	r21
    10ae:	6f 93       	push	r22
    10b0:	7f 93       	push	r23
    10b2:	8f 93       	push	r24
    10b4:	9f 93       	push	r25
    10b6:	af 93       	push	r26
    10b8:	bf 93       	push	r27
    10ba:	ef 93       	push	r30
    10bc:	ff 93       	push	r31
    10be:	20 91 94 01 	lds	r18, 0x0194	; 0x800194 <overflows>
    10c2:	30 91 95 01 	lds	r19, 0x0195	; 0x800195 <overflows+0x1>
    10c6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    10ca:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    10ce:	c9 01       	movw	r24, r18
    10d0:	03 2e       	mov	r0, r19
    10d2:	00 0c       	add	r0, r0
    10d4:	aa 0b       	sbc	r26, r26
    10d6:	bb 0b       	sbc	r27, r27
    10d8:	dc 01       	movw	r26, r24
    10da:	99 27       	eor	r25, r25
    10dc:	88 27       	eor	r24, r24
    10de:	60 e0       	ldi	r22, 0x00	; 0
    10e0:	70 e0       	ldi	r23, 0x00	; 0
    10e2:	84 2b       	or	r24, r20
    10e4:	95 2b       	or	r25, r21
    10e6:	a6 2b       	or	r26, r22
    10e8:	b7 2b       	or	r27, r23
    10ea:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <timestamp>
    10ee:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <timestamp+0x1>
    10f2:	a0 93 98 01 	sts	0x0198, r26	; 0x800198 <timestamp+0x2>
    10f6:	b0 93 99 01 	sts	0x0199, r27	; 0x800199 <timestamp+0x3>
    10fa:	b0 9b       	sbis	0x16, 0	; 22
    10fc:	1b c0       	rjmp	.+54     	; 0x1134 <__vector_13+0x98>
    10fe:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1102:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1106:	c9 01       	movw	r24, r18
    1108:	01 96       	adiw	r24, 0x01	; 1
    110a:	09 2e       	mov	r0, r25
    110c:	00 0c       	add	r0, r0
    110e:	aa 0b       	sbc	r26, r26
    1110:	bb 0b       	sbc	r27, r27
    1112:	dc 01       	movw	r26, r24
    1114:	99 27       	eor	r25, r25
    1116:	88 27       	eor	r24, r24
    1118:	60 e0       	ldi	r22, 0x00	; 0
    111a:	70 e0       	ldi	r23, 0x00	; 0
    111c:	84 2b       	or	r24, r20
    111e:	95 2b       	or	r25, r21
    1120:	a6 2b       	or	r26, r22
    1122:	b7 2b       	or	r27, r23
    1124:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <timestamp>
    1128:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <timestamp+0x1>
    112c:	a0 93 98 01 	sts	0x0198, r26	; 0x800198 <timestamp+0x2>
    1130:	b0 93 99 01 	sts	0x0199, r27	; 0x800199 <timestamp+0x3>
    1134:	e0 91 46 02 	lds	r30, 0x0246	; 0x800246 <mtable+0x10>
    1138:	f0 91 47 02 	lds	r31, 0x0247	; 0x800247 <mtable+0x11>
    113c:	30 97       	sbiw	r30, 0x00	; 0
    113e:	39 f0       	breq	.+14     	; 0x114e <__vector_13+0xb2>
    1140:	68 e0       	ldi	r22, 0x08	; 8
    1142:	70 e0       	ldi	r23, 0x00	; 0
    1144:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <otable+0x10>
    1148:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <otable+0x11>
    114c:	09 95       	icall
    114e:	0e 94 b3 04 	call	0x966	; 0x966 <schedule>
    1152:	ff 91       	pop	r31
    1154:	ef 91       	pop	r30
    1156:	bf 91       	pop	r27
    1158:	af 91       	pop	r26
    115a:	9f 91       	pop	r25
    115c:	8f 91       	pop	r24
    115e:	7f 91       	pop	r23
    1160:	6f 91       	pop	r22
    1162:	5f 91       	pop	r21
    1164:	4f 91       	pop	r20
    1166:	3f 91       	pop	r19
    1168:	2f 91       	pop	r18
    116a:	0f 90       	pop	r0
    116c:	0f be       	out	0x3f, r0	; 63
    116e:	0f 90       	pop	r0
    1170:	1f 90       	pop	r1
    1172:	18 95       	reti

00001174 <__vector_14>:
    1174:	1f 92       	push	r1
    1176:	0f 92       	push	r0
    1178:	0f b6       	in	r0, 0x3f	; 63
    117a:	0f 92       	push	r0
    117c:	11 24       	eor	r1, r1
    117e:	2f 93       	push	r18
    1180:	3f 93       	push	r19
    1182:	4f 93       	push	r20
    1184:	5f 93       	push	r21
    1186:	6f 93       	push	r22
    1188:	7f 93       	push	r23
    118a:	8f 93       	push	r24
    118c:	9f 93       	push	r25
    118e:	af 93       	push	r26
    1190:	bf 93       	push	r27
    1192:	ef 93       	push	r30
    1194:	ff 93       	push	r31
    1196:	20 91 94 01 	lds	r18, 0x0194	; 0x800194 <overflows>
    119a:	30 91 95 01 	lds	r19, 0x0195	; 0x800195 <overflows+0x1>
    119e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    11a2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    11a6:	c9 01       	movw	r24, r18
    11a8:	03 2e       	mov	r0, r19
    11aa:	00 0c       	add	r0, r0
    11ac:	aa 0b       	sbc	r26, r26
    11ae:	bb 0b       	sbc	r27, r27
    11b0:	dc 01       	movw	r26, r24
    11b2:	99 27       	eor	r25, r25
    11b4:	88 27       	eor	r24, r24
    11b6:	60 e0       	ldi	r22, 0x00	; 0
    11b8:	70 e0       	ldi	r23, 0x00	; 0
    11ba:	84 2b       	or	r24, r20
    11bc:	95 2b       	or	r25, r21
    11be:	a6 2b       	or	r26, r22
    11c0:	b7 2b       	or	r27, r23
    11c2:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <timestamp>
    11c6:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <timestamp+0x1>
    11ca:	a0 93 98 01 	sts	0x0198, r26	; 0x800198 <timestamp+0x2>
    11ce:	b0 93 99 01 	sts	0x0199, r27	; 0x800199 <timestamp+0x3>
    11d2:	b0 9b       	sbis	0x16, 0	; 22
    11d4:	1b c0       	rjmp	.+54     	; 0x120c <__vector_14+0x98>
    11d6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    11da:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    11de:	c9 01       	movw	r24, r18
    11e0:	01 96       	adiw	r24, 0x01	; 1
    11e2:	09 2e       	mov	r0, r25
    11e4:	00 0c       	add	r0, r0
    11e6:	aa 0b       	sbc	r26, r26
    11e8:	bb 0b       	sbc	r27, r27
    11ea:	dc 01       	movw	r26, r24
    11ec:	99 27       	eor	r25, r25
    11ee:	88 27       	eor	r24, r24
    11f0:	60 e0       	ldi	r22, 0x00	; 0
    11f2:	70 e0       	ldi	r23, 0x00	; 0
    11f4:	84 2b       	or	r24, r20
    11f6:	95 2b       	or	r25, r21
    11f8:	a6 2b       	or	r26, r22
    11fa:	b7 2b       	or	r27, r23
    11fc:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <timestamp>
    1200:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <timestamp+0x1>
    1204:	a0 93 98 01 	sts	0x0198, r26	; 0x800198 <timestamp+0x2>
    1208:	b0 93 99 01 	sts	0x0199, r27	; 0x800199 <timestamp+0x3>
    120c:	e0 91 48 02 	lds	r30, 0x0248	; 0x800248 <mtable+0x12>
    1210:	f0 91 49 02 	lds	r31, 0x0249	; 0x800249 <mtable+0x13>
    1214:	30 97       	sbiw	r30, 0x00	; 0
    1216:	39 f0       	breq	.+14     	; 0x1226 <__vector_14+0xb2>
    1218:	69 e0       	ldi	r22, 0x09	; 9
    121a:	70 e0       	ldi	r23, 0x00	; 0
    121c:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <otable+0x12>
    1220:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <otable+0x13>
    1224:	09 95       	icall
    1226:	0e 94 b3 04 	call	0x966	; 0x966 <schedule>
    122a:	ff 91       	pop	r31
    122c:	ef 91       	pop	r30
    122e:	bf 91       	pop	r27
    1230:	af 91       	pop	r26
    1232:	9f 91       	pop	r25
    1234:	8f 91       	pop	r24
    1236:	7f 91       	pop	r23
    1238:	6f 91       	pop	r22
    123a:	5f 91       	pop	r21
    123c:	4f 91       	pop	r20
    123e:	3f 91       	pop	r19
    1240:	2f 91       	pop	r18
    1242:	0f 90       	pop	r0
    1244:	0f be       	out	0x3f, r0	; 63
    1246:	0f 90       	pop	r0
    1248:	1f 90       	pop	r1
    124a:	18 95       	reti

0000124c <__vector_15>:
    124c:	1f 92       	push	r1
    124e:	0f 92       	push	r0
    1250:	0f b6       	in	r0, 0x3f	; 63
    1252:	0f 92       	push	r0
    1254:	11 24       	eor	r1, r1
    1256:	2f 93       	push	r18
    1258:	3f 93       	push	r19
    125a:	4f 93       	push	r20
    125c:	5f 93       	push	r21
    125e:	6f 93       	push	r22
    1260:	7f 93       	push	r23
    1262:	8f 93       	push	r24
    1264:	9f 93       	push	r25
    1266:	af 93       	push	r26
    1268:	bf 93       	push	r27
    126a:	ef 93       	push	r30
    126c:	ff 93       	push	r31
    126e:	20 91 94 01 	lds	r18, 0x0194	; 0x800194 <overflows>
    1272:	30 91 95 01 	lds	r19, 0x0195	; 0x800195 <overflows+0x1>
    1276:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    127a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    127e:	c9 01       	movw	r24, r18
    1280:	03 2e       	mov	r0, r19
    1282:	00 0c       	add	r0, r0
    1284:	aa 0b       	sbc	r26, r26
    1286:	bb 0b       	sbc	r27, r27
    1288:	dc 01       	movw	r26, r24
    128a:	99 27       	eor	r25, r25
    128c:	88 27       	eor	r24, r24
    128e:	60 e0       	ldi	r22, 0x00	; 0
    1290:	70 e0       	ldi	r23, 0x00	; 0
    1292:	84 2b       	or	r24, r20
    1294:	95 2b       	or	r25, r21
    1296:	a6 2b       	or	r26, r22
    1298:	b7 2b       	or	r27, r23
    129a:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <timestamp>
    129e:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <timestamp+0x1>
    12a2:	a0 93 98 01 	sts	0x0198, r26	; 0x800198 <timestamp+0x2>
    12a6:	b0 93 99 01 	sts	0x0199, r27	; 0x800199 <timestamp+0x3>
    12aa:	b0 9b       	sbis	0x16, 0	; 22
    12ac:	1b c0       	rjmp	.+54     	; 0x12e4 <__vector_15+0x98>
    12ae:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    12b2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    12b6:	c9 01       	movw	r24, r18
    12b8:	01 96       	adiw	r24, 0x01	; 1
    12ba:	09 2e       	mov	r0, r25
    12bc:	00 0c       	add	r0, r0
    12be:	aa 0b       	sbc	r26, r26
    12c0:	bb 0b       	sbc	r27, r27
    12c2:	dc 01       	movw	r26, r24
    12c4:	99 27       	eor	r25, r25
    12c6:	88 27       	eor	r24, r24
    12c8:	60 e0       	ldi	r22, 0x00	; 0
    12ca:	70 e0       	ldi	r23, 0x00	; 0
    12cc:	84 2b       	or	r24, r20
    12ce:	95 2b       	or	r25, r21
    12d0:	a6 2b       	or	r26, r22
    12d2:	b7 2b       	or	r27, r23
    12d4:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <timestamp>
    12d8:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <timestamp+0x1>
    12dc:	a0 93 98 01 	sts	0x0198, r26	; 0x800198 <timestamp+0x2>
    12e0:	b0 93 99 01 	sts	0x0199, r27	; 0x800199 <timestamp+0x3>
    12e4:	e0 91 4a 02 	lds	r30, 0x024A	; 0x80024a <mtable+0x14>
    12e8:	f0 91 4b 02 	lds	r31, 0x024B	; 0x80024b <mtable+0x15>
    12ec:	30 97       	sbiw	r30, 0x00	; 0
    12ee:	39 f0       	breq	.+14     	; 0x12fe <__vector_15+0xb2>
    12f0:	6a e0       	ldi	r22, 0x0A	; 10
    12f2:	70 e0       	ldi	r23, 0x00	; 0
    12f4:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <otable+0x14>
    12f8:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <otable+0x15>
    12fc:	09 95       	icall
    12fe:	0e 94 b3 04 	call	0x966	; 0x966 <schedule>
    1302:	ff 91       	pop	r31
    1304:	ef 91       	pop	r30
    1306:	bf 91       	pop	r27
    1308:	af 91       	pop	r26
    130a:	9f 91       	pop	r25
    130c:	8f 91       	pop	r24
    130e:	7f 91       	pop	r23
    1310:	6f 91       	pop	r22
    1312:	5f 91       	pop	r21
    1314:	4f 91       	pop	r20
    1316:	3f 91       	pop	r19
    1318:	2f 91       	pop	r18
    131a:	0f 90       	pop	r0
    131c:	0f be       	out	0x3f, r0	; 63
    131e:	0f 90       	pop	r0
    1320:	1f 90       	pop	r1
    1322:	18 95       	reti

00001324 <__vector_16>:
    1324:	1f 92       	push	r1
    1326:	0f 92       	push	r0
    1328:	0f b6       	in	r0, 0x3f	; 63
    132a:	0f 92       	push	r0
    132c:	11 24       	eor	r1, r1
    132e:	2f 93       	push	r18
    1330:	3f 93       	push	r19
    1332:	4f 93       	push	r20
    1334:	5f 93       	push	r21
    1336:	6f 93       	push	r22
    1338:	7f 93       	push	r23
    133a:	8f 93       	push	r24
    133c:	9f 93       	push	r25
    133e:	af 93       	push	r26
    1340:	bf 93       	push	r27
    1342:	ef 93       	push	r30
    1344:	ff 93       	push	r31
    1346:	20 91 94 01 	lds	r18, 0x0194	; 0x800194 <overflows>
    134a:	30 91 95 01 	lds	r19, 0x0195	; 0x800195 <overflows+0x1>
    134e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1352:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1356:	c9 01       	movw	r24, r18
    1358:	03 2e       	mov	r0, r19
    135a:	00 0c       	add	r0, r0
    135c:	aa 0b       	sbc	r26, r26
    135e:	bb 0b       	sbc	r27, r27
    1360:	dc 01       	movw	r26, r24
    1362:	99 27       	eor	r25, r25
    1364:	88 27       	eor	r24, r24
    1366:	60 e0       	ldi	r22, 0x00	; 0
    1368:	70 e0       	ldi	r23, 0x00	; 0
    136a:	84 2b       	or	r24, r20
    136c:	95 2b       	or	r25, r21
    136e:	a6 2b       	or	r26, r22
    1370:	b7 2b       	or	r27, r23
    1372:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <timestamp>
    1376:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <timestamp+0x1>
    137a:	a0 93 98 01 	sts	0x0198, r26	; 0x800198 <timestamp+0x2>
    137e:	b0 93 99 01 	sts	0x0199, r27	; 0x800199 <timestamp+0x3>
    1382:	b0 9b       	sbis	0x16, 0	; 22
    1384:	1b c0       	rjmp	.+54     	; 0x13bc <__vector_16+0x98>
    1386:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    138a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    138e:	c9 01       	movw	r24, r18
    1390:	01 96       	adiw	r24, 0x01	; 1
    1392:	09 2e       	mov	r0, r25
    1394:	00 0c       	add	r0, r0
    1396:	aa 0b       	sbc	r26, r26
    1398:	bb 0b       	sbc	r27, r27
    139a:	dc 01       	movw	r26, r24
    139c:	99 27       	eor	r25, r25
    139e:	88 27       	eor	r24, r24
    13a0:	60 e0       	ldi	r22, 0x00	; 0
    13a2:	70 e0       	ldi	r23, 0x00	; 0
    13a4:	84 2b       	or	r24, r20
    13a6:	95 2b       	or	r25, r21
    13a8:	a6 2b       	or	r26, r22
    13aa:	b7 2b       	or	r27, r23
    13ac:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <timestamp>
    13b0:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <timestamp+0x1>
    13b4:	a0 93 98 01 	sts	0x0198, r26	; 0x800198 <timestamp+0x2>
    13b8:	b0 93 99 01 	sts	0x0199, r27	; 0x800199 <timestamp+0x3>
    13bc:	e0 91 4c 02 	lds	r30, 0x024C	; 0x80024c <mtable+0x16>
    13c0:	f0 91 4d 02 	lds	r31, 0x024D	; 0x80024d <mtable+0x17>
    13c4:	30 97       	sbiw	r30, 0x00	; 0
    13c6:	39 f0       	breq	.+14     	; 0x13d6 <__vector_16+0xb2>
    13c8:	6b e0       	ldi	r22, 0x0B	; 11
    13ca:	70 e0       	ldi	r23, 0x00	; 0
    13cc:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <otable+0x16>
    13d0:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <otable+0x17>
    13d4:	09 95       	icall
    13d6:	0e 94 b3 04 	call	0x966	; 0x966 <schedule>
    13da:	ff 91       	pop	r31
    13dc:	ef 91       	pop	r30
    13de:	bf 91       	pop	r27
    13e0:	af 91       	pop	r26
    13e2:	9f 91       	pop	r25
    13e4:	8f 91       	pop	r24
    13e6:	7f 91       	pop	r23
    13e8:	6f 91       	pop	r22
    13ea:	5f 91       	pop	r21
    13ec:	4f 91       	pop	r20
    13ee:	3f 91       	pop	r19
    13f0:	2f 91       	pop	r18
    13f2:	0f 90       	pop	r0
    13f4:	0f be       	out	0x3f, r0	; 63
    13f6:	0f 90       	pop	r0
    13f8:	1f 90       	pop	r1
    13fa:	18 95       	reti

000013fc <__vector_17>:
    13fc:	1f 92       	push	r1
    13fe:	0f 92       	push	r0
    1400:	0f b6       	in	r0, 0x3f	; 63
    1402:	0f 92       	push	r0
    1404:	11 24       	eor	r1, r1
    1406:	2f 93       	push	r18
    1408:	3f 93       	push	r19
    140a:	4f 93       	push	r20
    140c:	5f 93       	push	r21
    140e:	6f 93       	push	r22
    1410:	7f 93       	push	r23
    1412:	8f 93       	push	r24
    1414:	9f 93       	push	r25
    1416:	af 93       	push	r26
    1418:	bf 93       	push	r27
    141a:	ef 93       	push	r30
    141c:	ff 93       	push	r31
    141e:	20 91 94 01 	lds	r18, 0x0194	; 0x800194 <overflows>
    1422:	30 91 95 01 	lds	r19, 0x0195	; 0x800195 <overflows+0x1>
    1426:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    142a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    142e:	c9 01       	movw	r24, r18
    1430:	03 2e       	mov	r0, r19
    1432:	00 0c       	add	r0, r0
    1434:	aa 0b       	sbc	r26, r26
    1436:	bb 0b       	sbc	r27, r27
    1438:	dc 01       	movw	r26, r24
    143a:	99 27       	eor	r25, r25
    143c:	88 27       	eor	r24, r24
    143e:	60 e0       	ldi	r22, 0x00	; 0
    1440:	70 e0       	ldi	r23, 0x00	; 0
    1442:	84 2b       	or	r24, r20
    1444:	95 2b       	or	r25, r21
    1446:	a6 2b       	or	r26, r22
    1448:	b7 2b       	or	r27, r23
    144a:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <timestamp>
    144e:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <timestamp+0x1>
    1452:	a0 93 98 01 	sts	0x0198, r26	; 0x800198 <timestamp+0x2>
    1456:	b0 93 99 01 	sts	0x0199, r27	; 0x800199 <timestamp+0x3>
    145a:	b0 9b       	sbis	0x16, 0	; 22
    145c:	1b c0       	rjmp	.+54     	; 0x1494 <__vector_17+0x98>
    145e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1462:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1466:	c9 01       	movw	r24, r18
    1468:	01 96       	adiw	r24, 0x01	; 1
    146a:	09 2e       	mov	r0, r25
    146c:	00 0c       	add	r0, r0
    146e:	aa 0b       	sbc	r26, r26
    1470:	bb 0b       	sbc	r27, r27
    1472:	dc 01       	movw	r26, r24
    1474:	99 27       	eor	r25, r25
    1476:	88 27       	eor	r24, r24
    1478:	60 e0       	ldi	r22, 0x00	; 0
    147a:	70 e0       	ldi	r23, 0x00	; 0
    147c:	84 2b       	or	r24, r20
    147e:	95 2b       	or	r25, r21
    1480:	a6 2b       	or	r26, r22
    1482:	b7 2b       	or	r27, r23
    1484:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <timestamp>
    1488:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <timestamp+0x1>
    148c:	a0 93 98 01 	sts	0x0198, r26	; 0x800198 <timestamp+0x2>
    1490:	b0 93 99 01 	sts	0x0199, r27	; 0x800199 <timestamp+0x3>
    1494:	e0 91 4e 02 	lds	r30, 0x024E	; 0x80024e <mtable+0x18>
    1498:	f0 91 4f 02 	lds	r31, 0x024F	; 0x80024f <mtable+0x19>
    149c:	30 97       	sbiw	r30, 0x00	; 0
    149e:	39 f0       	breq	.+14     	; 0x14ae <__vector_17+0xb2>
    14a0:	6c e0       	ldi	r22, 0x0C	; 12
    14a2:	70 e0       	ldi	r23, 0x00	; 0
    14a4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <otable+0x18>
    14a8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <otable+0x19>
    14ac:	09 95       	icall
    14ae:	0e 94 b3 04 	call	0x966	; 0x966 <schedule>
    14b2:	ff 91       	pop	r31
    14b4:	ef 91       	pop	r30
    14b6:	bf 91       	pop	r27
    14b8:	af 91       	pop	r26
    14ba:	9f 91       	pop	r25
    14bc:	8f 91       	pop	r24
    14be:	7f 91       	pop	r23
    14c0:	6f 91       	pop	r22
    14c2:	5f 91       	pop	r21
    14c4:	4f 91       	pop	r20
    14c6:	3f 91       	pop	r19
    14c8:	2f 91       	pop	r18
    14ca:	0f 90       	pop	r0
    14cc:	0f be       	out	0x3f, r0	; 63
    14ce:	0f 90       	pop	r0
    14d0:	1f 90       	pop	r1
    14d2:	18 95       	reti

000014d4 <__vector_18>:
    14d4:	1f 92       	push	r1
    14d6:	0f 92       	push	r0
    14d8:	0f b6       	in	r0, 0x3f	; 63
    14da:	0f 92       	push	r0
    14dc:	11 24       	eor	r1, r1
    14de:	2f 93       	push	r18
    14e0:	3f 93       	push	r19
    14e2:	4f 93       	push	r20
    14e4:	5f 93       	push	r21
    14e6:	6f 93       	push	r22
    14e8:	7f 93       	push	r23
    14ea:	8f 93       	push	r24
    14ec:	9f 93       	push	r25
    14ee:	af 93       	push	r26
    14f0:	bf 93       	push	r27
    14f2:	ef 93       	push	r30
    14f4:	ff 93       	push	r31
    14f6:	20 91 94 01 	lds	r18, 0x0194	; 0x800194 <overflows>
    14fa:	30 91 95 01 	lds	r19, 0x0195	; 0x800195 <overflows+0x1>
    14fe:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1502:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1506:	c9 01       	movw	r24, r18
    1508:	03 2e       	mov	r0, r19
    150a:	00 0c       	add	r0, r0
    150c:	aa 0b       	sbc	r26, r26
    150e:	bb 0b       	sbc	r27, r27
    1510:	dc 01       	movw	r26, r24
    1512:	99 27       	eor	r25, r25
    1514:	88 27       	eor	r24, r24
    1516:	60 e0       	ldi	r22, 0x00	; 0
    1518:	70 e0       	ldi	r23, 0x00	; 0
    151a:	84 2b       	or	r24, r20
    151c:	95 2b       	or	r25, r21
    151e:	a6 2b       	or	r26, r22
    1520:	b7 2b       	or	r27, r23
    1522:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <timestamp>
    1526:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <timestamp+0x1>
    152a:	a0 93 98 01 	sts	0x0198, r26	; 0x800198 <timestamp+0x2>
    152e:	b0 93 99 01 	sts	0x0199, r27	; 0x800199 <timestamp+0x3>
    1532:	b0 9b       	sbis	0x16, 0	; 22
    1534:	1b c0       	rjmp	.+54     	; 0x156c <__vector_18+0x98>
    1536:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    153a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    153e:	c9 01       	movw	r24, r18
    1540:	01 96       	adiw	r24, 0x01	; 1
    1542:	09 2e       	mov	r0, r25
    1544:	00 0c       	add	r0, r0
    1546:	aa 0b       	sbc	r26, r26
    1548:	bb 0b       	sbc	r27, r27
    154a:	dc 01       	movw	r26, r24
    154c:	99 27       	eor	r25, r25
    154e:	88 27       	eor	r24, r24
    1550:	60 e0       	ldi	r22, 0x00	; 0
    1552:	70 e0       	ldi	r23, 0x00	; 0
    1554:	84 2b       	or	r24, r20
    1556:	95 2b       	or	r25, r21
    1558:	a6 2b       	or	r26, r22
    155a:	b7 2b       	or	r27, r23
    155c:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <timestamp>
    1560:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <timestamp+0x1>
    1564:	a0 93 98 01 	sts	0x0198, r26	; 0x800198 <timestamp+0x2>
    1568:	b0 93 99 01 	sts	0x0199, r27	; 0x800199 <timestamp+0x3>
    156c:	e0 91 50 02 	lds	r30, 0x0250	; 0x800250 <mtable+0x1a>
    1570:	f0 91 51 02 	lds	r31, 0x0251	; 0x800251 <mtable+0x1b>
    1574:	30 97       	sbiw	r30, 0x00	; 0
    1576:	39 f0       	breq	.+14     	; 0x1586 <__vector_18+0xb2>
    1578:	6d e0       	ldi	r22, 0x0D	; 13
    157a:	70 e0       	ldi	r23, 0x00	; 0
    157c:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <otable+0x1a>
    1580:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <otable+0x1b>
    1584:	09 95       	icall
    1586:	0e 94 b3 04 	call	0x966	; 0x966 <schedule>
    158a:	ff 91       	pop	r31
    158c:	ef 91       	pop	r30
    158e:	bf 91       	pop	r27
    1590:	af 91       	pop	r26
    1592:	9f 91       	pop	r25
    1594:	8f 91       	pop	r24
    1596:	7f 91       	pop	r23
    1598:	6f 91       	pop	r22
    159a:	5f 91       	pop	r21
    159c:	4f 91       	pop	r20
    159e:	3f 91       	pop	r19
    15a0:	2f 91       	pop	r18
    15a2:	0f 90       	pop	r0
    15a4:	0f be       	out	0x3f, r0	; 63
    15a6:	0f 90       	pop	r0
    15a8:	1f 90       	pop	r1
    15aa:	18 95       	reti

000015ac <__vector_19>:
    15ac:	1f 92       	push	r1
    15ae:	0f 92       	push	r0
    15b0:	0f b6       	in	r0, 0x3f	; 63
    15b2:	0f 92       	push	r0
    15b4:	11 24       	eor	r1, r1
    15b6:	2f 93       	push	r18
    15b8:	3f 93       	push	r19
    15ba:	4f 93       	push	r20
    15bc:	5f 93       	push	r21
    15be:	6f 93       	push	r22
    15c0:	7f 93       	push	r23
    15c2:	8f 93       	push	r24
    15c4:	9f 93       	push	r25
    15c6:	af 93       	push	r26
    15c8:	bf 93       	push	r27
    15ca:	ef 93       	push	r30
    15cc:	ff 93       	push	r31
    15ce:	20 91 94 01 	lds	r18, 0x0194	; 0x800194 <overflows>
    15d2:	30 91 95 01 	lds	r19, 0x0195	; 0x800195 <overflows+0x1>
    15d6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    15da:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    15de:	c9 01       	movw	r24, r18
    15e0:	03 2e       	mov	r0, r19
    15e2:	00 0c       	add	r0, r0
    15e4:	aa 0b       	sbc	r26, r26
    15e6:	bb 0b       	sbc	r27, r27
    15e8:	dc 01       	movw	r26, r24
    15ea:	99 27       	eor	r25, r25
    15ec:	88 27       	eor	r24, r24
    15ee:	60 e0       	ldi	r22, 0x00	; 0
    15f0:	70 e0       	ldi	r23, 0x00	; 0
    15f2:	84 2b       	or	r24, r20
    15f4:	95 2b       	or	r25, r21
    15f6:	a6 2b       	or	r26, r22
    15f8:	b7 2b       	or	r27, r23
    15fa:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <timestamp>
    15fe:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <timestamp+0x1>
    1602:	a0 93 98 01 	sts	0x0198, r26	; 0x800198 <timestamp+0x2>
    1606:	b0 93 99 01 	sts	0x0199, r27	; 0x800199 <timestamp+0x3>
    160a:	b0 9b       	sbis	0x16, 0	; 22
    160c:	1b c0       	rjmp	.+54     	; 0x1644 <__vector_19+0x98>
    160e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1612:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1616:	c9 01       	movw	r24, r18
    1618:	01 96       	adiw	r24, 0x01	; 1
    161a:	09 2e       	mov	r0, r25
    161c:	00 0c       	add	r0, r0
    161e:	aa 0b       	sbc	r26, r26
    1620:	bb 0b       	sbc	r27, r27
    1622:	dc 01       	movw	r26, r24
    1624:	99 27       	eor	r25, r25
    1626:	88 27       	eor	r24, r24
    1628:	60 e0       	ldi	r22, 0x00	; 0
    162a:	70 e0       	ldi	r23, 0x00	; 0
    162c:	84 2b       	or	r24, r20
    162e:	95 2b       	or	r25, r21
    1630:	a6 2b       	or	r26, r22
    1632:	b7 2b       	or	r27, r23
    1634:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <timestamp>
    1638:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <timestamp+0x1>
    163c:	a0 93 98 01 	sts	0x0198, r26	; 0x800198 <timestamp+0x2>
    1640:	b0 93 99 01 	sts	0x0199, r27	; 0x800199 <timestamp+0x3>
    1644:	e0 91 52 02 	lds	r30, 0x0252	; 0x800252 <mtable+0x1c>
    1648:	f0 91 53 02 	lds	r31, 0x0253	; 0x800253 <mtable+0x1d>
    164c:	30 97       	sbiw	r30, 0x00	; 0
    164e:	39 f0       	breq	.+14     	; 0x165e <__vector_19+0xb2>
    1650:	6e e0       	ldi	r22, 0x0E	; 14
    1652:	70 e0       	ldi	r23, 0x00	; 0
    1654:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <otable+0x1c>
    1658:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <otable+0x1d>
    165c:	09 95       	icall
    165e:	0e 94 b3 04 	call	0x966	; 0x966 <schedule>
    1662:	ff 91       	pop	r31
    1664:	ef 91       	pop	r30
    1666:	bf 91       	pop	r27
    1668:	af 91       	pop	r26
    166a:	9f 91       	pop	r25
    166c:	8f 91       	pop	r24
    166e:	7f 91       	pop	r23
    1670:	6f 91       	pop	r22
    1672:	5f 91       	pop	r21
    1674:	4f 91       	pop	r20
    1676:	3f 91       	pop	r19
    1678:	2f 91       	pop	r18
    167a:	0f 90       	pop	r0
    167c:	0f be       	out	0x3f, r0	; 63
    167e:	0f 90       	pop	r0
    1680:	1f 90       	pop	r1
    1682:	18 95       	reti

00001684 <__vector_20>:
    1684:	1f 92       	push	r1
    1686:	0f 92       	push	r0
    1688:	0f b6       	in	r0, 0x3f	; 63
    168a:	0f 92       	push	r0
    168c:	11 24       	eor	r1, r1
    168e:	2f 93       	push	r18
    1690:	3f 93       	push	r19
    1692:	4f 93       	push	r20
    1694:	5f 93       	push	r21
    1696:	6f 93       	push	r22
    1698:	7f 93       	push	r23
    169a:	8f 93       	push	r24
    169c:	9f 93       	push	r25
    169e:	af 93       	push	r26
    16a0:	bf 93       	push	r27
    16a2:	ef 93       	push	r30
    16a4:	ff 93       	push	r31
    16a6:	20 91 94 01 	lds	r18, 0x0194	; 0x800194 <overflows>
    16aa:	30 91 95 01 	lds	r19, 0x0195	; 0x800195 <overflows+0x1>
    16ae:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    16b2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    16b6:	c9 01       	movw	r24, r18
    16b8:	03 2e       	mov	r0, r19
    16ba:	00 0c       	add	r0, r0
    16bc:	aa 0b       	sbc	r26, r26
    16be:	bb 0b       	sbc	r27, r27
    16c0:	dc 01       	movw	r26, r24
    16c2:	99 27       	eor	r25, r25
    16c4:	88 27       	eor	r24, r24
    16c6:	60 e0       	ldi	r22, 0x00	; 0
    16c8:	70 e0       	ldi	r23, 0x00	; 0
    16ca:	84 2b       	or	r24, r20
    16cc:	95 2b       	or	r25, r21
    16ce:	a6 2b       	or	r26, r22
    16d0:	b7 2b       	or	r27, r23
    16d2:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <timestamp>
    16d6:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <timestamp+0x1>
    16da:	a0 93 98 01 	sts	0x0198, r26	; 0x800198 <timestamp+0x2>
    16de:	b0 93 99 01 	sts	0x0199, r27	; 0x800199 <timestamp+0x3>
    16e2:	b0 9b       	sbis	0x16, 0	; 22
    16e4:	1b c0       	rjmp	.+54     	; 0x171c <__vector_20+0x98>
    16e6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    16ea:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    16ee:	c9 01       	movw	r24, r18
    16f0:	01 96       	adiw	r24, 0x01	; 1
    16f2:	09 2e       	mov	r0, r25
    16f4:	00 0c       	add	r0, r0
    16f6:	aa 0b       	sbc	r26, r26
    16f8:	bb 0b       	sbc	r27, r27
    16fa:	dc 01       	movw	r26, r24
    16fc:	99 27       	eor	r25, r25
    16fe:	88 27       	eor	r24, r24
    1700:	60 e0       	ldi	r22, 0x00	; 0
    1702:	70 e0       	ldi	r23, 0x00	; 0
    1704:	84 2b       	or	r24, r20
    1706:	95 2b       	or	r25, r21
    1708:	a6 2b       	or	r26, r22
    170a:	b7 2b       	or	r27, r23
    170c:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <timestamp>
    1710:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <timestamp+0x1>
    1714:	a0 93 98 01 	sts	0x0198, r26	; 0x800198 <timestamp+0x2>
    1718:	b0 93 99 01 	sts	0x0199, r27	; 0x800199 <timestamp+0x3>
    171c:	e0 91 54 02 	lds	r30, 0x0254	; 0x800254 <mtable+0x1e>
    1720:	f0 91 55 02 	lds	r31, 0x0255	; 0x800255 <mtable+0x1f>
    1724:	30 97       	sbiw	r30, 0x00	; 0
    1726:	39 f0       	breq	.+14     	; 0x1736 <__vector_20+0xb2>
    1728:	6f e0       	ldi	r22, 0x0F	; 15
    172a:	70 e0       	ldi	r23, 0x00	; 0
    172c:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <otable+0x1e>
    1730:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <otable+0x1f>
    1734:	09 95       	icall
    1736:	0e 94 b3 04 	call	0x966	; 0x966 <schedule>
    173a:	ff 91       	pop	r31
    173c:	ef 91       	pop	r30
    173e:	bf 91       	pop	r27
    1740:	af 91       	pop	r26
    1742:	9f 91       	pop	r25
    1744:	8f 91       	pop	r24
    1746:	7f 91       	pop	r23
    1748:	6f 91       	pop	r22
    174a:	5f 91       	pop	r21
    174c:	4f 91       	pop	r20
    174e:	3f 91       	pop	r19
    1750:	2f 91       	pop	r18
    1752:	0f 90       	pop	r0
    1754:	0f be       	out	0x3f, r0	; 63
    1756:	0f 90       	pop	r0
    1758:	1f 90       	pop	r1
    175a:	18 95       	reti

0000175c <__vector_21>:
    175c:	1f 92       	push	r1
    175e:	0f 92       	push	r0
    1760:	0f b6       	in	r0, 0x3f	; 63
    1762:	0f 92       	push	r0
    1764:	11 24       	eor	r1, r1
    1766:	2f 93       	push	r18
    1768:	3f 93       	push	r19
    176a:	4f 93       	push	r20
    176c:	5f 93       	push	r21
    176e:	6f 93       	push	r22
    1770:	7f 93       	push	r23
    1772:	8f 93       	push	r24
    1774:	9f 93       	push	r25
    1776:	af 93       	push	r26
    1778:	bf 93       	push	r27
    177a:	ef 93       	push	r30
    177c:	ff 93       	push	r31
    177e:	20 91 94 01 	lds	r18, 0x0194	; 0x800194 <overflows>
    1782:	30 91 95 01 	lds	r19, 0x0195	; 0x800195 <overflows+0x1>
    1786:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    178a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    178e:	c9 01       	movw	r24, r18
    1790:	03 2e       	mov	r0, r19
    1792:	00 0c       	add	r0, r0
    1794:	aa 0b       	sbc	r26, r26
    1796:	bb 0b       	sbc	r27, r27
    1798:	dc 01       	movw	r26, r24
    179a:	99 27       	eor	r25, r25
    179c:	88 27       	eor	r24, r24
    179e:	60 e0       	ldi	r22, 0x00	; 0
    17a0:	70 e0       	ldi	r23, 0x00	; 0
    17a2:	84 2b       	or	r24, r20
    17a4:	95 2b       	or	r25, r21
    17a6:	a6 2b       	or	r26, r22
    17a8:	b7 2b       	or	r27, r23
    17aa:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <timestamp>
    17ae:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <timestamp+0x1>
    17b2:	a0 93 98 01 	sts	0x0198, r26	; 0x800198 <timestamp+0x2>
    17b6:	b0 93 99 01 	sts	0x0199, r27	; 0x800199 <timestamp+0x3>
    17ba:	b0 9b       	sbis	0x16, 0	; 22
    17bc:	1b c0       	rjmp	.+54     	; 0x17f4 <__vector_21+0x98>
    17be:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    17c2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    17c6:	c9 01       	movw	r24, r18
    17c8:	01 96       	adiw	r24, 0x01	; 1
    17ca:	09 2e       	mov	r0, r25
    17cc:	00 0c       	add	r0, r0
    17ce:	aa 0b       	sbc	r26, r26
    17d0:	bb 0b       	sbc	r27, r27
    17d2:	dc 01       	movw	r26, r24
    17d4:	99 27       	eor	r25, r25
    17d6:	88 27       	eor	r24, r24
    17d8:	60 e0       	ldi	r22, 0x00	; 0
    17da:	70 e0       	ldi	r23, 0x00	; 0
    17dc:	84 2b       	or	r24, r20
    17de:	95 2b       	or	r25, r21
    17e0:	a6 2b       	or	r26, r22
    17e2:	b7 2b       	or	r27, r23
    17e4:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <timestamp>
    17e8:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <timestamp+0x1>
    17ec:	a0 93 98 01 	sts	0x0198, r26	; 0x800198 <timestamp+0x2>
    17f0:	b0 93 99 01 	sts	0x0199, r27	; 0x800199 <timestamp+0x3>
    17f4:	e0 91 56 02 	lds	r30, 0x0256	; 0x800256 <mtable+0x20>
    17f8:	f0 91 57 02 	lds	r31, 0x0257	; 0x800257 <mtable+0x21>
    17fc:	30 97       	sbiw	r30, 0x00	; 0
    17fe:	39 f0       	breq	.+14     	; 0x180e <__vector_21+0xb2>
    1800:	60 e1       	ldi	r22, 0x10	; 16
    1802:	70 e0       	ldi	r23, 0x00	; 0
    1804:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <otable+0x20>
    1808:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <otable+0x21>
    180c:	09 95       	icall
    180e:	0e 94 b3 04 	call	0x966	; 0x966 <schedule>
    1812:	ff 91       	pop	r31
    1814:	ef 91       	pop	r30
    1816:	bf 91       	pop	r27
    1818:	af 91       	pop	r26
    181a:	9f 91       	pop	r25
    181c:	8f 91       	pop	r24
    181e:	7f 91       	pop	r23
    1820:	6f 91       	pop	r22
    1822:	5f 91       	pop	r21
    1824:	4f 91       	pop	r20
    1826:	3f 91       	pop	r19
    1828:	2f 91       	pop	r18
    182a:	0f 90       	pop	r0
    182c:	0f be       	out	0x3f, r0	; 63
    182e:	0f 90       	pop	r0
    1830:	1f 90       	pop	r1
    1832:	18 95       	reti

00001834 <__vector_22>:
    1834:	1f 92       	push	r1
    1836:	0f 92       	push	r0
    1838:	0f b6       	in	r0, 0x3f	; 63
    183a:	0f 92       	push	r0
    183c:	11 24       	eor	r1, r1
    183e:	2f 93       	push	r18
    1840:	3f 93       	push	r19
    1842:	4f 93       	push	r20
    1844:	5f 93       	push	r21
    1846:	6f 93       	push	r22
    1848:	7f 93       	push	r23
    184a:	8f 93       	push	r24
    184c:	9f 93       	push	r25
    184e:	af 93       	push	r26
    1850:	bf 93       	push	r27
    1852:	ef 93       	push	r30
    1854:	ff 93       	push	r31
    1856:	20 91 94 01 	lds	r18, 0x0194	; 0x800194 <overflows>
    185a:	30 91 95 01 	lds	r19, 0x0195	; 0x800195 <overflows+0x1>
    185e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1862:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1866:	c9 01       	movw	r24, r18
    1868:	03 2e       	mov	r0, r19
    186a:	00 0c       	add	r0, r0
    186c:	aa 0b       	sbc	r26, r26
    186e:	bb 0b       	sbc	r27, r27
    1870:	dc 01       	movw	r26, r24
    1872:	99 27       	eor	r25, r25
    1874:	88 27       	eor	r24, r24
    1876:	60 e0       	ldi	r22, 0x00	; 0
    1878:	70 e0       	ldi	r23, 0x00	; 0
    187a:	84 2b       	or	r24, r20
    187c:	95 2b       	or	r25, r21
    187e:	a6 2b       	or	r26, r22
    1880:	b7 2b       	or	r27, r23
    1882:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <timestamp>
    1886:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <timestamp+0x1>
    188a:	a0 93 98 01 	sts	0x0198, r26	; 0x800198 <timestamp+0x2>
    188e:	b0 93 99 01 	sts	0x0199, r27	; 0x800199 <timestamp+0x3>
    1892:	b0 9b       	sbis	0x16, 0	; 22
    1894:	1b c0       	rjmp	.+54     	; 0x18cc <__vector_22+0x98>
    1896:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    189a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    189e:	c9 01       	movw	r24, r18
    18a0:	01 96       	adiw	r24, 0x01	; 1
    18a2:	09 2e       	mov	r0, r25
    18a4:	00 0c       	add	r0, r0
    18a6:	aa 0b       	sbc	r26, r26
    18a8:	bb 0b       	sbc	r27, r27
    18aa:	dc 01       	movw	r26, r24
    18ac:	99 27       	eor	r25, r25
    18ae:	88 27       	eor	r24, r24
    18b0:	60 e0       	ldi	r22, 0x00	; 0
    18b2:	70 e0       	ldi	r23, 0x00	; 0
    18b4:	84 2b       	or	r24, r20
    18b6:	95 2b       	or	r25, r21
    18b8:	a6 2b       	or	r26, r22
    18ba:	b7 2b       	or	r27, r23
    18bc:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <timestamp>
    18c0:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <timestamp+0x1>
    18c4:	a0 93 98 01 	sts	0x0198, r26	; 0x800198 <timestamp+0x2>
    18c8:	b0 93 99 01 	sts	0x0199, r27	; 0x800199 <timestamp+0x3>
    18cc:	e0 91 58 02 	lds	r30, 0x0258	; 0x800258 <mtable+0x22>
    18d0:	f0 91 59 02 	lds	r31, 0x0259	; 0x800259 <mtable+0x23>
    18d4:	30 97       	sbiw	r30, 0x00	; 0
    18d6:	39 f0       	breq	.+14     	; 0x18e6 <__vector_22+0xb2>
    18d8:	61 e1       	ldi	r22, 0x11	; 17
    18da:	70 e0       	ldi	r23, 0x00	; 0
    18dc:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <otable+0x22>
    18e0:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <otable+0x23>
    18e4:	09 95       	icall
    18e6:	0e 94 b3 04 	call	0x966	; 0x966 <schedule>
    18ea:	ff 91       	pop	r31
    18ec:	ef 91       	pop	r30
    18ee:	bf 91       	pop	r27
    18f0:	af 91       	pop	r26
    18f2:	9f 91       	pop	r25
    18f4:	8f 91       	pop	r24
    18f6:	7f 91       	pop	r23
    18f8:	6f 91       	pop	r22
    18fa:	5f 91       	pop	r21
    18fc:	4f 91       	pop	r20
    18fe:	3f 91       	pop	r19
    1900:	2f 91       	pop	r18
    1902:	0f 90       	pop	r0
    1904:	0f be       	out	0x3f, r0	; 63
    1906:	0f 90       	pop	r0
    1908:	1f 90       	pop	r1
    190a:	18 95       	reti

0000190c <enqueueByDeadline>:
    190c:	ef 92       	push	r14
    190e:	ff 92       	push	r15
    1910:	0f 93       	push	r16
    1912:	1f 93       	push	r17
    1914:	cf 93       	push	r28
    1916:	df 93       	push	r29
    1918:	7b 01       	movw	r14, r22
    191a:	eb 01       	movw	r28, r22
    191c:	a8 81       	ld	r26, Y
    191e:	b9 81       	ldd	r27, Y+1	; 0x01
    1920:	10 97       	sbiw	r26, 0x00	; 0
    1922:	61 f1       	breq	.+88     	; 0x197c <enqueueByDeadline+0x70>
    1924:	fc 01       	movw	r30, r24
    1926:	06 81       	ldd	r16, Z+6	; 0x06
    1928:	17 81       	ldd	r17, Z+7	; 0x07
    192a:	20 85       	ldd	r18, Z+8	; 0x08
    192c:	31 85       	ldd	r19, Z+9	; 0x09
    192e:	16 96       	adiw	r26, 0x06	; 6
    1930:	4d 91       	ld	r20, X+
    1932:	5d 91       	ld	r21, X+
    1934:	6d 91       	ld	r22, X+
    1936:	7c 91       	ld	r23, X
    1938:	19 97       	sbiw	r26, 0x09	; 9
    193a:	04 17       	cp	r16, r20
    193c:	15 07       	cpc	r17, r21
    193e:	26 07       	cpc	r18, r22
    1940:	37 07       	cpc	r19, r23
    1942:	14 f4       	brge	.+4      	; 0x1948 <enqueueByDeadline+0x3c>
    1944:	1b c0       	rjmp	.+54     	; 0x197c <enqueueByDeadline+0x70>
    1946:	df 01       	movw	r26, r30
    1948:	ed 91       	ld	r30, X+
    194a:	fc 91       	ld	r31, X
    194c:	11 97       	sbiw	r26, 0x01	; 1
    194e:	30 97       	sbiw	r30, 0x00	; 0
    1950:	49 f0       	breq	.+18     	; 0x1964 <enqueueByDeadline+0x58>
    1952:	46 81       	ldd	r20, Z+6	; 0x06
    1954:	57 81       	ldd	r21, Z+7	; 0x07
    1956:	60 85       	ldd	r22, Z+8	; 0x08
    1958:	71 85       	ldd	r23, Z+9	; 0x09
    195a:	04 17       	cp	r16, r20
    195c:	15 07       	cpc	r17, r21
    195e:	26 07       	cpc	r18, r22
    1960:	37 07       	cpc	r19, r23
    1962:	8c f7       	brge	.-30     	; 0x1946 <enqueueByDeadline+0x3a>
    1964:	ec 01       	movw	r28, r24
    1966:	f9 83       	std	Y+1, r31	; 0x01
    1968:	e8 83       	st	Y, r30
    196a:	10 97       	sbiw	r26, 0x00	; 0
    196c:	21 f4       	brne	.+8      	; 0x1976 <enqueueByDeadline+0x6a>
    196e:	f7 01       	movw	r30, r14
    1970:	91 83       	std	Z+1, r25	; 0x01
    1972:	80 83       	st	Z, r24
    1974:	07 c0       	rjmp	.+14     	; 0x1984 <enqueueByDeadline+0x78>
    1976:	8d 93       	st	X+, r24
    1978:	9c 93       	st	X, r25
    197a:	04 c0       	rjmp	.+8      	; 0x1984 <enqueueByDeadline+0x78>
    197c:	ec 01       	movw	r28, r24
    197e:	b9 83       	std	Y+1, r27	; 0x01
    1980:	a8 83       	st	Y, r26
    1982:	f5 cf       	rjmp	.-22     	; 0x196e <enqueueByDeadline+0x62>
    1984:	df 91       	pop	r29
    1986:	cf 91       	pop	r28
    1988:	1f 91       	pop	r17
    198a:	0f 91       	pop	r16
    198c:	ff 90       	pop	r15
    198e:	ef 90       	pop	r14
    1990:	08 95       	ret

00001992 <enqueueByBaseline>:
    1992:	ef 92       	push	r14
    1994:	ff 92       	push	r15
    1996:	0f 93       	push	r16
    1998:	1f 93       	push	r17
    199a:	cf 93       	push	r28
    199c:	df 93       	push	r29
    199e:	7b 01       	movw	r14, r22
    19a0:	eb 01       	movw	r28, r22
    19a2:	a8 81       	ld	r26, Y
    19a4:	b9 81       	ldd	r27, Y+1	; 0x01
    19a6:	10 97       	sbiw	r26, 0x00	; 0
    19a8:	61 f1       	breq	.+88     	; 0x1a02 <enqueueByBaseline+0x70>
    19aa:	fc 01       	movw	r30, r24
    19ac:	02 81       	ldd	r16, Z+2	; 0x02
    19ae:	13 81       	ldd	r17, Z+3	; 0x03
    19b0:	24 81       	ldd	r18, Z+4	; 0x04
    19b2:	35 81       	ldd	r19, Z+5	; 0x05
    19b4:	12 96       	adiw	r26, 0x02	; 2
    19b6:	4d 91       	ld	r20, X+
    19b8:	5d 91       	ld	r21, X+
    19ba:	6d 91       	ld	r22, X+
    19bc:	7c 91       	ld	r23, X
    19be:	15 97       	sbiw	r26, 0x05	; 5
    19c0:	04 17       	cp	r16, r20
    19c2:	15 07       	cpc	r17, r21
    19c4:	26 07       	cpc	r18, r22
    19c6:	37 07       	cpc	r19, r23
    19c8:	14 f4       	brge	.+4      	; 0x19ce <enqueueByBaseline+0x3c>
    19ca:	1b c0       	rjmp	.+54     	; 0x1a02 <enqueueByBaseline+0x70>
    19cc:	df 01       	movw	r26, r30
    19ce:	ed 91       	ld	r30, X+
    19d0:	fc 91       	ld	r31, X
    19d2:	11 97       	sbiw	r26, 0x01	; 1
    19d4:	30 97       	sbiw	r30, 0x00	; 0
    19d6:	49 f0       	breq	.+18     	; 0x19ea <enqueueByBaseline+0x58>
    19d8:	42 81       	ldd	r20, Z+2	; 0x02
    19da:	53 81       	ldd	r21, Z+3	; 0x03
    19dc:	64 81       	ldd	r22, Z+4	; 0x04
    19de:	75 81       	ldd	r23, Z+5	; 0x05
    19e0:	04 17       	cp	r16, r20
    19e2:	15 07       	cpc	r17, r21
    19e4:	26 07       	cpc	r18, r22
    19e6:	37 07       	cpc	r19, r23
    19e8:	8c f7       	brge	.-30     	; 0x19cc <enqueueByBaseline+0x3a>
    19ea:	ec 01       	movw	r28, r24
    19ec:	f9 83       	std	Y+1, r31	; 0x01
    19ee:	e8 83       	st	Y, r30
    19f0:	10 97       	sbiw	r26, 0x00	; 0
    19f2:	21 f4       	brne	.+8      	; 0x19fc <enqueueByBaseline+0x6a>
    19f4:	f7 01       	movw	r30, r14
    19f6:	91 83       	std	Z+1, r25	; 0x01
    19f8:	80 83       	st	Z, r24
    19fa:	07 c0       	rjmp	.+14     	; 0x1a0a <enqueueByBaseline+0x78>
    19fc:	8d 93       	st	X+, r24
    19fe:	9c 93       	st	X, r25
    1a00:	04 c0       	rjmp	.+8      	; 0x1a0a <enqueueByBaseline+0x78>
    1a02:	ec 01       	movw	r28, r24
    1a04:	b9 83       	std	Y+1, r27	; 0x01
    1a06:	a8 83       	st	Y, r26
    1a08:	f5 cf       	rjmp	.-22     	; 0x19f4 <enqueueByBaseline+0x62>
    1a0a:	df 91       	pop	r29
    1a0c:	cf 91       	pop	r28
    1a0e:	1f 91       	pop	r17
    1a10:	0f 91       	pop	r16
    1a12:	ff 90       	pop	r15
    1a14:	ef 90       	pop	r14
    1a16:	08 95       	ret

00001a18 <dequeue>:
    1a18:	dc 01       	movw	r26, r24
    1a1a:	ed 91       	ld	r30, X+
    1a1c:	fc 91       	ld	r31, X
    1a1e:	11 97       	sbiw	r26, 0x01	; 1
    1a20:	30 97       	sbiw	r30, 0x00	; 0
    1a22:	59 f4       	brne	.+22     	; 0x1a3a <dequeue+0x22>
    1a24:	8f ef       	ldi	r24, 0xFF	; 255
    1a26:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
    1a2a:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
    1a2e:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	83 bf       	out	0x33, r24	; 51
    1a36:	88 95       	sleep
    1a38:	fd cf       	rjmp	.-6      	; 0x1a34 <dequeue+0x1c>
    1a3a:	20 81       	ld	r18, Z
    1a3c:	31 81       	ldd	r19, Z+1	; 0x01
    1a3e:	2d 93       	st	X+, r18
    1a40:	3c 93       	st	X, r19
    1a42:	cf 01       	movw	r24, r30
    1a44:	08 95       	ret

00001a46 <__vector_9>:
    1a46:	1f 92       	push	r1
    1a48:	0f 92       	push	r0
    1a4a:	0f b6       	in	r0, 0x3f	; 63
    1a4c:	0f 92       	push	r0
    1a4e:	11 24       	eor	r1, r1
    1a50:	2f 93       	push	r18
    1a52:	3f 93       	push	r19
    1a54:	4f 93       	push	r20
    1a56:	5f 93       	push	r21
    1a58:	6f 93       	push	r22
    1a5a:	7f 93       	push	r23
    1a5c:	8f 93       	push	r24
    1a5e:	9f 93       	push	r25
    1a60:	ef 93       	push	r30
    1a62:	ff 93       	push	r31
    1a64:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <overflows>
    1a68:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <overflows+0x1>
    1a6c:	01 96       	adiw	r24, 0x01	; 1
    1a6e:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <overflows+0x1>
    1a72:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <overflows>
    1a76:	e0 91 9a 01 	lds	r30, 0x019A	; 0x80019a <timerQ>
    1a7a:	f0 91 9b 01 	lds	r31, 0x019B	; 0x80019b <timerQ+0x1>
    1a7e:	30 97       	sbiw	r30, 0x00	; 0
    1a80:	01 f1       	breq	.+64     	; 0x1ac2 <__vector_9+0x7c>
    1a82:	42 81       	ldd	r20, Z+2	; 0x02
    1a84:	53 81       	ldd	r21, Z+3	; 0x03
    1a86:	64 81       	ldd	r22, Z+4	; 0x04
    1a88:	75 81       	ldd	r23, Z+5	; 0x05
    1a8a:	86 17       	cp	r24, r22
    1a8c:	97 07       	cpc	r25, r23
    1a8e:	c9 f4       	brne	.+50     	; 0x1ac2 <__vector_9+0x7c>
    1a90:	ca 01       	movw	r24, r20
    1a92:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1a96:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1a9a:	42 1b       	sub	r20, r18
    1a9c:	53 0b       	sbc	r21, r19
    1a9e:	41 30       	cpi	r20, 0x01	; 1
    1aa0:	51 05       	cpc	r21, r1
    1aa2:	29 f4       	brne	.+10     	; 0x1aae <__vector_9+0x68>
    1aa4:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1aa8:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1aac:	01 96       	adiw	r24, 0x01	; 1
    1aae:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1ab2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1ab6:	ef e6       	ldi	r30, 0x6F	; 111
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	80 81       	ld	r24, Z
    1abc:	82 60       	ori	r24, 0x02	; 2
    1abe:	80 83       	st	Z, r24
    1ac0:	05 c0       	rjmp	.+10     	; 0x1acc <__vector_9+0x86>
    1ac2:	ef e6       	ldi	r30, 0x6F	; 111
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	80 81       	ld	r24, Z
    1ac8:	8d 7f       	andi	r24, 0xFD	; 253
    1aca:	80 83       	st	Z, r24
    1acc:	ff 91       	pop	r31
    1ace:	ef 91       	pop	r30
    1ad0:	9f 91       	pop	r25
    1ad2:	8f 91       	pop	r24
    1ad4:	7f 91       	pop	r23
    1ad6:	6f 91       	pop	r22
    1ad8:	5f 91       	pop	r21
    1ada:	4f 91       	pop	r20
    1adc:	3f 91       	pop	r19
    1ade:	2f 91       	pop	r18
    1ae0:	0f 90       	pop	r0
    1ae2:	0f be       	out	0x3f, r0	; 63
    1ae4:	0f 90       	pop	r0
    1ae6:	1f 90       	pop	r1
    1ae8:	18 95       	reti

00001aea <__vector_7>:
    1aea:	1f 92       	push	r1
    1aec:	0f 92       	push	r0
    1aee:	0f b6       	in	r0, 0x3f	; 63
    1af0:	0f 92       	push	r0
    1af2:	11 24       	eor	r1, r1
    1af4:	cf 92       	push	r12
    1af6:	df 92       	push	r13
    1af8:	ef 92       	push	r14
    1afa:	ff 92       	push	r15
    1afc:	2f 93       	push	r18
    1afe:	3f 93       	push	r19
    1b00:	4f 93       	push	r20
    1b02:	5f 93       	push	r21
    1b04:	6f 93       	push	r22
    1b06:	7f 93       	push	r23
    1b08:	8f 93       	push	r24
    1b0a:	9f 93       	push	r25
    1b0c:	af 93       	push	r26
    1b0e:	bf 93       	push	r27
    1b10:	ef 93       	push	r30
    1b12:	ff 93       	push	r31
    1b14:	c0 90 94 01 	lds	r12, 0x0194	; 0x800194 <overflows>
    1b18:	d0 90 95 01 	lds	r13, 0x0195	; 0x800195 <overflows+0x1>
    1b1c:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1b20:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1b24:	b0 99       	sbic	0x16, 0	; 22
    1b26:	0f c0       	rjmp	.+30     	; 0x1b46 <__vector_7+0x5c>
    1b28:	0d 2c       	mov	r0, r13
    1b2a:	00 0c       	add	r0, r0
    1b2c:	ee 08       	sbc	r14, r14
    1b2e:	ff 08       	sbc	r15, r15
    1b30:	d6 01       	movw	r26, r12
    1b32:	99 27       	eor	r25, r25
    1b34:	88 27       	eor	r24, r24
    1b36:	69 01       	movw	r12, r18
    1b38:	e1 2c       	mov	r14, r1
    1b3a:	f1 2c       	mov	r15, r1
    1b3c:	c8 2a       	or	r12, r24
    1b3e:	d9 2a       	or	r13, r25
    1b40:	ea 2a       	or	r14, r26
    1b42:	fb 2a       	or	r15, r27
    1b44:	15 c0       	rjmp	.+42     	; 0x1b70 <__vector_7+0x86>
    1b46:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1b4a:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1b4e:	8f ef       	ldi	r24, 0xFF	; 255
    1b50:	c8 1a       	sub	r12, r24
    1b52:	d8 0a       	sbc	r13, r24
    1b54:	0d 2c       	mov	r0, r13
    1b56:	00 0c       	add	r0, r0
    1b58:	ee 08       	sbc	r14, r14
    1b5a:	ff 08       	sbc	r15, r15
    1b5c:	d6 01       	movw	r26, r12
    1b5e:	99 27       	eor	r25, r25
    1b60:	88 27       	eor	r24, r24
    1b62:	69 01       	movw	r12, r18
    1b64:	e1 2c       	mov	r14, r1
    1b66:	f1 2c       	mov	r15, r1
    1b68:	c8 2a       	or	r12, r24
    1b6a:	d9 2a       	or	r13, r25
    1b6c:	ea 2a       	or	r14, r26
    1b6e:	fb 2a       	or	r15, r27
    1b70:	e0 91 9a 01 	lds	r30, 0x019A	; 0x80019a <timerQ>
    1b74:	f0 91 9b 01 	lds	r31, 0x019B	; 0x80019b <timerQ+0x1>
    1b78:	30 97       	sbiw	r30, 0x00	; 0
    1b7a:	09 f4       	brne	.+2      	; 0x1b7e <__vector_7+0x94>
    1b7c:	42 c0       	rjmp	.+132    	; 0x1c02 <__vector_7+0x118>
    1b7e:	82 81       	ldd	r24, Z+2	; 0x02
    1b80:	93 81       	ldd	r25, Z+3	; 0x03
    1b82:	a4 81       	ldd	r26, Z+4	; 0x04
    1b84:	b5 81       	ldd	r27, Z+5	; 0x05
    1b86:	8c 19       	sub	r24, r12
    1b88:	9d 09       	sbc	r25, r13
    1b8a:	ae 09       	sbc	r26, r14
    1b8c:	bf 09       	sbc	r27, r15
    1b8e:	18 16       	cp	r1, r24
    1b90:	19 06       	cpc	r1, r25
    1b92:	1a 06       	cpc	r1, r26
    1b94:	1b 06       	cpc	r1, r27
    1b96:	ec f1       	brlt	.+122    	; 0x1c12 <__vector_7+0x128>
    1b98:	8a e9       	ldi	r24, 0x9A	; 154
    1b9a:	91 e0       	ldi	r25, 0x01	; 1
    1b9c:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <dequeue>
    1ba0:	6c e9       	ldi	r22, 0x9C	; 156
    1ba2:	71 e0       	ldi	r23, 0x01	; 1
    1ba4:	0e 94 86 0c 	call	0x190c	; 0x190c <enqueueByDeadline>
    1ba8:	e0 91 9a 01 	lds	r30, 0x019A	; 0x80019a <timerQ>
    1bac:	f0 91 9b 01 	lds	r31, 0x019B	; 0x80019b <timerQ+0x1>
    1bb0:	30 97       	sbiw	r30, 0x00	; 0
    1bb2:	39 f1       	breq	.+78     	; 0x1c02 <__vector_7+0x118>
    1bb4:	82 81       	ldd	r24, Z+2	; 0x02
    1bb6:	93 81       	ldd	r25, Z+3	; 0x03
    1bb8:	a4 81       	ldd	r26, Z+4	; 0x04
    1bba:	b5 81       	ldd	r27, Z+5	; 0x05
    1bbc:	8c 19       	sub	r24, r12
    1bbe:	9d 09       	sbc	r25, r13
    1bc0:	ae 09       	sbc	r26, r14
    1bc2:	bf 09       	sbc	r27, r15
    1bc4:	18 16       	cp	r1, r24
    1bc6:	19 06       	cpc	r1, r25
    1bc8:	1a 06       	cpc	r1, r26
    1bca:	1b 06       	cpc	r1, r27
    1bcc:	2c f7       	brge	.-54     	; 0x1b98 <__vector_7+0xae>
    1bce:	21 c0       	rjmp	.+66     	; 0x1c12 <__vector_7+0x128>
    1bd0:	9c 01       	movw	r18, r24
    1bd2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1bd6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1bda:	84 1b       	sub	r24, r20
    1bdc:	95 0b       	sbc	r25, r21
    1bde:	01 97       	sbiw	r24, 0x01	; 1
    1be0:	31 f4       	brne	.+12     	; 0x1bee <__vector_7+0x104>
    1be2:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1be6:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1bea:	2f 5f       	subi	r18, 0xFF	; 255
    1bec:	3f 4f       	sbci	r19, 0xFF	; 255
    1bee:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1bf2:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1bf6:	ef e6       	ldi	r30, 0x6F	; 111
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	80 81       	ld	r24, Z
    1bfc:	82 60       	ori	r24, 0x02	; 2
    1bfe:	80 83       	st	Z, r24
    1c00:	05 c0       	rjmp	.+10     	; 0x1c0c <__vector_7+0x122>
    1c02:	ef e6       	ldi	r30, 0x6F	; 111
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	80 81       	ld	r24, Z
    1c08:	8d 7f       	andi	r24, 0xFD	; 253
    1c0a:	80 83       	st	Z, r24
    1c0c:	0e 94 b3 04 	call	0x966	; 0x966 <schedule>
    1c10:	0c c0       	rjmp	.+24     	; 0x1c2a <__vector_7+0x140>
    1c12:	82 81       	ldd	r24, Z+2	; 0x02
    1c14:	93 81       	ldd	r25, Z+3	; 0x03
    1c16:	a4 81       	ldd	r26, Z+4	; 0x04
    1c18:	b5 81       	ldd	r27, Z+5	; 0x05
    1c1a:	20 91 94 01 	lds	r18, 0x0194	; 0x800194 <overflows>
    1c1e:	30 91 95 01 	lds	r19, 0x0195	; 0x800195 <overflows+0x1>
    1c22:	2a 17       	cp	r18, r26
    1c24:	3b 07       	cpc	r19, r27
    1c26:	69 f7       	brne	.-38     	; 0x1c02 <__vector_7+0x118>
    1c28:	d3 cf       	rjmp	.-90     	; 0x1bd0 <__vector_7+0xe6>
    1c2a:	ff 91       	pop	r31
    1c2c:	ef 91       	pop	r30
    1c2e:	bf 91       	pop	r27
    1c30:	af 91       	pop	r26
    1c32:	9f 91       	pop	r25
    1c34:	8f 91       	pop	r24
    1c36:	7f 91       	pop	r23
    1c38:	6f 91       	pop	r22
    1c3a:	5f 91       	pop	r21
    1c3c:	4f 91       	pop	r20
    1c3e:	3f 91       	pop	r19
    1c40:	2f 91       	pop	r18
    1c42:	ff 90       	pop	r15
    1c44:	ef 90       	pop	r14
    1c46:	df 90       	pop	r13
    1c48:	cf 90       	pop	r12
    1c4a:	0f 90       	pop	r0
    1c4c:	0f be       	out	0x3f, r0	; 63
    1c4e:	0f 90       	pop	r0
    1c50:	1f 90       	pop	r1
    1c52:	18 95       	reti

00001c54 <async>:
    1c54:	3f 92       	push	r3
    1c56:	4f 92       	push	r4
    1c58:	5f 92       	push	r5
    1c5a:	6f 92       	push	r6
    1c5c:	7f 92       	push	r7
    1c5e:	8f 92       	push	r8
    1c60:	9f 92       	push	r9
    1c62:	af 92       	push	r10
    1c64:	bf 92       	push	r11
    1c66:	cf 92       	push	r12
    1c68:	df 92       	push	r13
    1c6a:	ef 92       	push	r14
    1c6c:	ff 92       	push	r15
    1c6e:	0f 93       	push	r16
    1c70:	1f 93       	push	r17
    1c72:	cf 93       	push	r28
    1c74:	df 93       	push	r29
    1c76:	2b 01       	movw	r4, r22
    1c78:	3c 01       	movw	r6, r24
    1c7a:	49 01       	movw	r8, r18
    1c7c:	5a 01       	movw	r10, r20
    1c7e:	8f b7       	in	r24, 0x3f	; 63
    1c80:	80 78       	andi	r24, 0x80	; 128
    1c82:	38 2e       	mov	r3, r24
    1c84:	f8 94       	cli
    1c86:	82 e8       	ldi	r24, 0x82	; 130
    1c88:	91 e0       	ldi	r25, 0x01	; 1
    1c8a:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <dequeue>
    1c8e:	ec 01       	movw	r28, r24
    1c90:	1b 87       	std	Y+11, r17	; 0x0b
    1c92:	0a 87       	std	Y+10, r16	; 0x0a
    1c94:	fd 86       	std	Y+13, r15	; 0x0d
    1c96:	ec 86       	std	Y+12, r14	; 0x0c
    1c98:	df 86       	std	Y+15, r13	; 0x0f
    1c9a:	ce 86       	std	Y+14, r12	; 0x0e
    1c9c:	33 20       	and	r3, r3
    1c9e:	61 f0       	breq	.+24     	; 0x1cb8 <async+0x64>
    1ca0:	e0 91 7c 01 	lds	r30, 0x017C	; 0x80017c <current>
    1ca4:	f0 91 7d 01 	lds	r31, 0x017D	; 0x80017d <current+0x1>
    1ca8:	02 80       	ldd	r0, Z+2	; 0x02
    1caa:	f3 81       	ldd	r31, Z+3	; 0x03
    1cac:	e0 2d       	mov	r30, r0
    1cae:	82 81       	ldd	r24, Z+2	; 0x02
    1cb0:	93 81       	ldd	r25, Z+3	; 0x03
    1cb2:	a4 81       	ldd	r26, Z+4	; 0x04
    1cb4:	b5 81       	ldd	r27, Z+5	; 0x05
    1cb6:	08 c0       	rjmp	.+16     	; 0x1cc8 <async+0x74>
    1cb8:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <timestamp>
    1cbc:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <timestamp+0x1>
    1cc0:	a0 91 98 01 	lds	r26, 0x0198	; 0x800198 <timestamp+0x2>
    1cc4:	b0 91 99 01 	lds	r27, 0x0199	; 0x800199 <timestamp+0x3>
    1cc8:	48 0e       	add	r4, r24
    1cca:	59 1e       	adc	r5, r25
    1ccc:	6a 1e       	adc	r6, r26
    1cce:	7b 1e       	adc	r7, r27
    1cd0:	4a 82       	std	Y+2, r4	; 0x02
    1cd2:	5b 82       	std	Y+3, r5	; 0x03
    1cd4:	6c 82       	std	Y+4, r6	; 0x04
    1cd6:	7d 82       	std	Y+5, r7	; 0x05
    1cd8:	18 14       	cp	r1, r8
    1cda:	19 04       	cpc	r1, r9
    1cdc:	1a 04       	cpc	r1, r10
    1cde:	1b 04       	cpc	r1, r11
    1ce0:	44 f0       	brlt	.+16     	; 0x1cf2 <async+0x9e>
    1ce2:	0f 2e       	mov	r0, r31
    1ce4:	88 24       	eor	r8, r8
    1ce6:	8a 94       	dec	r8
    1ce8:	98 2c       	mov	r9, r8
    1cea:	a8 2c       	mov	r10, r8
    1cec:	ff e7       	ldi	r31, 0x7F	; 127
    1cee:	bf 2e       	mov	r11, r31
    1cf0:	f0 2d       	mov	r31, r0
    1cf2:	84 0c       	add	r8, r4
    1cf4:	95 1c       	adc	r9, r5
    1cf6:	a6 1c       	adc	r10, r6
    1cf8:	b7 1c       	adc	r11, r7
    1cfa:	8e 82       	std	Y+6, r8	; 0x06
    1cfc:	9f 82       	std	Y+7, r9	; 0x07
    1cfe:	a8 86       	std	Y+8, r10	; 0x08
    1d00:	b9 86       	std	Y+9, r11	; 0x09
    1d02:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <overflows>
    1d06:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <overflows+0x1>
    1d0a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1d0e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1d12:	b0 99       	sbic	0x16, 0	; 22
    1d14:	0e c0       	rjmp	.+28     	; 0x1d32 <async+0xde>
    1d16:	09 2e       	mov	r0, r25
    1d18:	00 0c       	add	r0, r0
    1d1a:	aa 0b       	sbc	r26, r26
    1d1c:	bb 0b       	sbc	r27, r27
    1d1e:	dc 01       	movw	r26, r24
    1d20:	99 27       	eor	r25, r25
    1d22:	88 27       	eor	r24, r24
    1d24:	60 e0       	ldi	r22, 0x00	; 0
    1d26:	70 e0       	ldi	r23, 0x00	; 0
    1d28:	84 2b       	or	r24, r20
    1d2a:	95 2b       	or	r25, r21
    1d2c:	a6 2b       	or	r26, r22
    1d2e:	b7 2b       	or	r27, r23
    1d30:	13 c0       	rjmp	.+38     	; 0x1d58 <async+0x104>
    1d32:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1d36:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1d3a:	01 96       	adiw	r24, 0x01	; 1
    1d3c:	09 2e       	mov	r0, r25
    1d3e:	00 0c       	add	r0, r0
    1d40:	aa 0b       	sbc	r26, r26
    1d42:	bb 0b       	sbc	r27, r27
    1d44:	dc 01       	movw	r26, r24
    1d46:	99 27       	eor	r25, r25
    1d48:	88 27       	eor	r24, r24
    1d4a:	a9 01       	movw	r20, r18
    1d4c:	60 e0       	ldi	r22, 0x00	; 0
    1d4e:	70 e0       	ldi	r23, 0x00	; 0
    1d50:	84 2b       	or	r24, r20
    1d52:	95 2b       	or	r25, r21
    1d54:	a6 2b       	or	r26, r22
    1d56:	b7 2b       	or	r27, r23
    1d58:	48 1a       	sub	r4, r24
    1d5a:	59 0a       	sbc	r5, r25
    1d5c:	6a 0a       	sbc	r6, r26
    1d5e:	7b 0a       	sbc	r7, r27
    1d60:	14 14       	cp	r1, r4
    1d62:	15 04       	cpc	r1, r5
    1d64:	16 04       	cpc	r1, r6
    1d66:	17 04       	cpc	r1, r7
    1d68:	ac f5       	brge	.+106    	; 0x1dd4 <async+0x180>
    1d6a:	6a e9       	ldi	r22, 0x9A	; 154
    1d6c:	71 e0       	ldi	r23, 0x01	; 1
    1d6e:	ce 01       	movw	r24, r28
    1d70:	0e 94 c9 0c 	call	0x1992	; 0x1992 <enqueueByBaseline>
    1d74:	e0 91 9a 01 	lds	r30, 0x019A	; 0x80019a <timerQ>
    1d78:	f0 91 9b 01 	lds	r31, 0x019B	; 0x80019b <timerQ+0x1>
    1d7c:	30 97       	sbiw	r30, 0x00	; 0
    1d7e:	21 f1       	breq	.+72     	; 0x1dc8 <async+0x174>
    1d80:	82 81       	ldd	r24, Z+2	; 0x02
    1d82:	93 81       	ldd	r25, Z+3	; 0x03
    1d84:	a4 81       	ldd	r26, Z+4	; 0x04
    1d86:	b5 81       	ldd	r27, Z+5	; 0x05
    1d88:	20 91 94 01 	lds	r18, 0x0194	; 0x800194 <overflows>
    1d8c:	30 91 95 01 	lds	r19, 0x0195	; 0x800195 <overflows+0x1>
    1d90:	2a 17       	cp	r18, r26
    1d92:	3b 07       	cpc	r19, r27
    1d94:	c9 f4       	brne	.+50     	; 0x1dc8 <async+0x174>
    1d96:	9c 01       	movw	r18, r24
    1d98:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1d9c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1da0:	84 1b       	sub	r24, r20
    1da2:	95 0b       	sbc	r25, r21
    1da4:	01 97       	sbiw	r24, 0x01	; 1
    1da6:	31 f4       	brne	.+12     	; 0x1db4 <async+0x160>
    1da8:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1dac:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1db0:	2f 5f       	subi	r18, 0xFF	; 255
    1db2:	3f 4f       	sbci	r19, 0xFF	; 255
    1db4:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1db8:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1dbc:	ef e6       	ldi	r30, 0x6F	; 111
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	80 81       	ld	r24, Z
    1dc2:	82 60       	ori	r24, 0x02	; 2
    1dc4:	80 83       	st	Z, r24
    1dc6:	41 c0       	rjmp	.+130    	; 0x1e4a <async+0x1f6>
    1dc8:	ef e6       	ldi	r30, 0x6F	; 111
    1dca:	f0 e0       	ldi	r31, 0x00	; 0
    1dcc:	80 81       	ld	r24, Z
    1dce:	8d 7f       	andi	r24, 0xFD	; 253
    1dd0:	80 83       	st	Z, r24
    1dd2:	3b c0       	rjmp	.+118    	; 0x1e4a <async+0x1f6>
    1dd4:	6c e9       	ldi	r22, 0x9C	; 156
    1dd6:	71 e0       	ldi	r23, 0x01	; 1
    1dd8:	ce 01       	movw	r24, r28
    1dda:	0e 94 86 0c 	call	0x190c	; 0x190c <enqueueByDeadline>
    1dde:	33 20       	and	r3, r3
    1de0:	b9 f1       	breq	.+110    	; 0x1e50 <async+0x1fc>
    1de2:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <threadPool>
    1de6:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <threadPool+0x1>
    1dea:	00 97       	sbiw	r24, 0x00	; 0
    1dec:	81 f1       	breq	.+96     	; 0x1e4e <async+0x1fa>
    1dee:	e0 91 7e 01 	lds	r30, 0x017E	; 0x80017e <activeStack>
    1df2:	f0 91 7f 01 	lds	r31, 0x017F	; 0x80017f <activeStack+0x1>
    1df6:	20 91 9c 01 	lds	r18, 0x019C	; 0x80019c <msgQ>
    1dfa:	30 91 9d 01 	lds	r19, 0x019D	; 0x80019d <msgQ+0x1>
    1dfe:	02 81       	ldd	r16, Z+2	; 0x02
    1e00:	13 81       	ldd	r17, Z+3	; 0x03
    1e02:	d9 01       	movw	r26, r18
    1e04:	16 96       	adiw	r26, 0x06	; 6
    1e06:	4d 91       	ld	r20, X+
    1e08:	5d 91       	ld	r21, X+
    1e0a:	6d 91       	ld	r22, X+
    1e0c:	7c 91       	ld	r23, X
    1e0e:	19 97       	sbiw	r26, 0x09	; 9
    1e10:	d8 01       	movw	r26, r16
    1e12:	16 96       	adiw	r26, 0x06	; 6
    1e14:	0d 91       	ld	r16, X+
    1e16:	1d 91       	ld	r17, X+
    1e18:	2d 91       	ld	r18, X+
    1e1a:	3c 91       	ld	r19, X
    1e1c:	19 97       	sbiw	r26, 0x09	; 9
    1e1e:	40 1b       	sub	r20, r16
    1e20:	51 0b       	sbc	r21, r17
    1e22:	62 0b       	sbc	r22, r18
    1e24:	73 0b       	sbc	r23, r19
    1e26:	9a f4       	brpl	.+38     	; 0x1e4e <async+0x1fa>
    1e28:	dc 01       	movw	r26, r24
    1e2a:	2d 91       	ld	r18, X+
    1e2c:	3c 91       	ld	r19, X
    1e2e:	11 97       	sbiw	r26, 0x01	; 1
    1e30:	30 93 81 01 	sts	0x0181, r19	; 0x800181 <threadPool+0x1>
    1e34:	20 93 80 01 	sts	0x0180, r18	; 0x800180 <threadPool>
    1e38:	ed 93       	st	X+, r30
    1e3a:	fc 93       	st	X, r31
    1e3c:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <activeStack+0x1>
    1e40:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <activeStack>
    1e44:	0e 94 93 04 	call	0x926	; 0x926 <dispatch>
    1e48:	02 c0       	rjmp	.+4      	; 0x1e4e <async+0x1fa>
    1e4a:	33 20       	and	r3, r3
    1e4c:	09 f0       	breq	.+2      	; 0x1e50 <async+0x1fc>
    1e4e:	78 94       	sei
    1e50:	ce 01       	movw	r24, r28
    1e52:	df 91       	pop	r29
    1e54:	cf 91       	pop	r28
    1e56:	1f 91       	pop	r17
    1e58:	0f 91       	pop	r16
    1e5a:	ff 90       	pop	r15
    1e5c:	ef 90       	pop	r14
    1e5e:	df 90       	pop	r13
    1e60:	cf 90       	pop	r12
    1e62:	bf 90       	pop	r11
    1e64:	af 90       	pop	r10
    1e66:	9f 90       	pop	r9
    1e68:	8f 90       	pop	r8
    1e6a:	7f 90       	pop	r7
    1e6c:	6f 90       	pop	r6
    1e6e:	5f 90       	pop	r5
    1e70:	4f 90       	pop	r4
    1e72:	3f 90       	pop	r3
    1e74:	08 95       	ret

00001e76 <sync>:
    1e76:	cf 92       	push	r12
    1e78:	df 92       	push	r13
    1e7a:	ef 92       	push	r14
    1e7c:	ff 92       	push	r15
    1e7e:	0f 93       	push	r16
    1e80:	1f 93       	push	r17
    1e82:	cf 93       	push	r28
    1e84:	df 93       	push	r29
    1e86:	ec 01       	movw	r28, r24
    1e88:	7b 01       	movw	r14, r22
    1e8a:	6a 01       	movw	r12, r20
    1e8c:	1f b7       	in	r17, 0x3f	; 63
    1e8e:	10 78       	andi	r17, 0x80	; 128
    1e90:	f8 94       	cli
    1e92:	a8 81       	ld	r26, Y
    1e94:	b9 81       	ldd	r27, Y+1	; 0x01
    1e96:	10 97       	sbiw	r26, 0x00	; 0
    1e98:	61 f1       	breq	.+88     	; 0x1ef2 <sync+0x7c>
    1e9a:	14 96       	adiw	r26, 0x04	; 4
    1e9c:	ed 91       	ld	r30, X+
    1e9e:	fc 91       	ld	r31, X
    1ea0:	15 97       	sbiw	r26, 0x05	; 5
    1ea2:	30 97       	sbiw	r30, 0x00	; 0
    1ea4:	41 f0       	breq	.+16     	; 0x1eb6 <sync+0x40>
    1ea6:	a0 81       	ld	r26, Z
    1ea8:	b1 81       	ldd	r27, Z+1	; 0x01
    1eaa:	14 96       	adiw	r26, 0x04	; 4
    1eac:	ed 91       	ld	r30, X+
    1eae:	fc 91       	ld	r31, X
    1eb0:	15 97       	sbiw	r26, 0x05	; 5
    1eb2:	30 97       	sbiw	r30, 0x00	; 0
    1eb4:	c1 f7       	brne	.-16     	; 0x1ea6 <sync+0x30>
    1eb6:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <current>
    1eba:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <current+0x1>
    1ebe:	2a 17       	cp	r18, r26
    1ec0:	3b 07       	cpc	r19, r27
    1ec2:	21 f0       	breq	.+8      	; 0x1ecc <sync+0x56>
    1ec4:	11 23       	and	r17, r17
    1ec6:	09 f4       	brne	.+2      	; 0x1eca <sync+0x54>
    1ec8:	3d c0       	rjmp	.+122    	; 0x1f44 <sync+0xce>
    1eca:	07 c0       	rjmp	.+14     	; 0x1eda <sync+0x64>
    1ecc:	11 23       	and	r17, r17
    1ece:	09 f4       	brne	.+2      	; 0x1ed2 <sync+0x5c>
    1ed0:	3c c0       	rjmp	.+120    	; 0x1f4a <sync+0xd4>
    1ed2:	78 94       	sei
    1ed4:	8f ef       	ldi	r24, 0xFF	; 255
    1ed6:	9f ef       	ldi	r25, 0xFF	; 255
    1ed8:	52 c0       	rjmp	.+164    	; 0x1f7e <sync+0x108>
    1eda:	8a 81       	ldd	r24, Y+2	; 0x02
    1edc:	9b 81       	ldd	r25, Y+3	; 0x03
    1ede:	00 97       	sbiw	r24, 0x00	; 0
    1ee0:	d1 f1       	breq	.+116    	; 0x1f56 <sync+0xe0>
    1ee2:	fc 01       	movw	r30, r24
    1ee4:	15 82       	std	Z+5, r1	; 0x05
    1ee6:	14 82       	std	Z+4, r1	; 0x04
    1ee8:	36 c0       	rjmp	.+108    	; 0x1f56 <sync+0xe0>
    1eea:	78 94       	sei
    1eec:	80 e0       	ldi	r24, 0x00	; 0
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	46 c0       	rjmp	.+140    	; 0x1f7e <sync+0x108>
    1ef2:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <current>
    1ef6:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <current+0x1>
    1efa:	99 83       	std	Y+1, r25	; 0x01
    1efc:	88 83       	st	Y, r24
    1efe:	11 23       	and	r17, r17
    1f00:	29 f0       	breq	.+10     	; 0x1f0c <sync+0x96>
    1f02:	8a 81       	ldd	r24, Y+2	; 0x02
    1f04:	9b 81       	ldd	r25, Y+3	; 0x03
    1f06:	01 97       	sbiw	r24, 0x01	; 1
    1f08:	09 f0       	breq	.+2      	; 0x1f0c <sync+0x96>
    1f0a:	78 94       	sei
    1f0c:	b6 01       	movw	r22, r12
    1f0e:	ce 01       	movw	r24, r28
    1f10:	f7 01       	movw	r30, r14
    1f12:	09 95       	icall
    1f14:	f8 2e       	mov	r15, r24
    1f16:	09 2f       	mov	r16, r25
    1f18:	8f b7       	in	r24, 0x3f	; 63
    1f1a:	f8 94       	cli
    1f1c:	19 82       	std	Y+1, r1	; 0x01
    1f1e:	18 82       	st	Y, r1
    1f20:	8a 81       	ldd	r24, Y+2	; 0x02
    1f22:	9b 81       	ldd	r25, Y+3	; 0x03
    1f24:	82 30       	cpi	r24, 0x02	; 2
    1f26:	91 05       	cpc	r25, r1
    1f28:	38 f0       	brcs	.+14     	; 0x1f38 <sync+0xc2>
    1f2a:	1b 82       	std	Y+3, r1	; 0x03
    1f2c:	1a 82       	std	Y+2, r1	; 0x02
    1f2e:	fc 01       	movw	r30, r24
    1f30:	15 82       	std	Z+5, r1	; 0x05
    1f32:	14 82       	std	Z+4, r1	; 0x04
    1f34:	0e 94 93 04 	call	0x926	; 0x926 <dispatch>
    1f38:	11 23       	and	r17, r17
    1f3a:	51 f0       	breq	.+20     	; 0x1f50 <sync+0xda>
    1f3c:	78 94       	sei
    1f3e:	8f 2d       	mov	r24, r15
    1f40:	90 2f       	mov	r25, r16
    1f42:	1d c0       	rjmp	.+58     	; 0x1f7e <sync+0x108>
    1f44:	8f ef       	ldi	r24, 0xFF	; 255
    1f46:	9f ef       	ldi	r25, 0xFF	; 255
    1f48:	1a c0       	rjmp	.+52     	; 0x1f7e <sync+0x108>
    1f4a:	8f ef       	ldi	r24, 0xFF	; 255
    1f4c:	9f ef       	ldi	r25, 0xFF	; 255
    1f4e:	17 c0       	rjmp	.+46     	; 0x1f7e <sync+0x108>
    1f50:	8f 2d       	mov	r24, r15
    1f52:	90 2f       	mov	r25, r16
    1f54:	14 c0       	rjmp	.+40     	; 0x1f7e <sync+0x108>
    1f56:	3b 83       	std	Y+3, r19	; 0x03
    1f58:	2a 83       	std	Y+2, r18	; 0x02
    1f5a:	f9 01       	movw	r30, r18
    1f5c:	d5 83       	std	Z+5, r29	; 0x05
    1f5e:	c4 83       	std	Z+4, r28	; 0x04
    1f60:	cd 01       	movw	r24, r26
    1f62:	0e 94 93 04 	call	0x926	; 0x926 <dispatch>
    1f66:	e0 91 7c 01 	lds	r30, 0x017C	; 0x80017c <current>
    1f6a:	f0 91 7d 01 	lds	r31, 0x017D	; 0x80017d <current+0x1>
    1f6e:	82 81       	ldd	r24, Z+2	; 0x02
    1f70:	93 81       	ldd	r25, Z+3	; 0x03
    1f72:	89 2b       	or	r24, r25
    1f74:	09 f4       	brne	.+2      	; 0x1f78 <sync+0x102>
    1f76:	b9 cf       	rjmp	.-142    	; 0x1eea <sync+0x74>
    1f78:	f9 83       	std	Y+1, r31	; 0x01
    1f7a:	e8 83       	st	Y, r30
    1f7c:	c2 cf       	rjmp	.-124    	; 0x1f02 <sync+0x8c>
    1f7e:	df 91       	pop	r29
    1f80:	cf 91       	pop	r28
    1f82:	1f 91       	pop	r17
    1f84:	0f 91       	pop	r16
    1f86:	ff 90       	pop	r15
    1f88:	ef 90       	pop	r14
    1f8a:	df 90       	pop	r13
    1f8c:	cf 90       	pop	r12
    1f8e:	08 95       	ret

00001f90 <run>:
    1f90:	00 91 7c 01 	lds	r16, 0x017C	; 0x80017c <current>
    1f94:	10 91 7d 01 	lds	r17, 0x017D	; 0x80017d <current+0x1>
    1f98:	8c e9       	ldi	r24, 0x9C	; 156
    1f9a:	91 e0       	ldi	r25, 0x01	; 1
    1f9c:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <dequeue>
    1fa0:	ec 01       	movw	r28, r24
    1fa2:	d8 01       	movw	r26, r16
    1fa4:	13 96       	adiw	r26, 0x03	; 3
    1fa6:	9c 93       	st	X, r25
    1fa8:	8e 93       	st	-X, r24
    1faa:	12 97       	sbiw	r26, 0x02	; 2
    1fac:	78 94       	sei
    1fae:	4e 85       	ldd	r20, Y+14	; 0x0e
    1fb0:	5f 85       	ldd	r21, Y+15	; 0x0f
    1fb2:	6c 85       	ldd	r22, Y+12	; 0x0c
    1fb4:	7d 85       	ldd	r23, Y+13	; 0x0d
    1fb6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fb8:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fba:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <sync>
    1fbe:	8f b7       	in	r24, 0x3f	; 63
    1fc0:	f8 94       	cli
    1fc2:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <msgPool>
    1fc6:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <msgPool+0x1>
    1fca:	99 83       	std	Y+1, r25	; 0x01
    1fcc:	88 83       	st	Y, r24
    1fce:	d0 93 83 01 	sts	0x0183, r29	; 0x800183 <msgPool+0x1>
    1fd2:	c0 93 82 01 	sts	0x0182, r28	; 0x800182 <msgPool>
    1fd6:	e0 91 7e 01 	lds	r30, 0x017E	; 0x80017e <activeStack>
    1fda:	f0 91 7f 01 	lds	r31, 0x017F	; 0x80017f <activeStack+0x1>
    1fde:	00 81       	ld	r16, Z
    1fe0:	11 81       	ldd	r17, Z+1	; 0x01
    1fe2:	e8 01       	movw	r28, r16
    1fe4:	2a 81       	ldd	r18, Y+2	; 0x02
    1fe6:	3b 81       	ldd	r19, Y+3	; 0x03
    1fe8:	a0 91 9c 01 	lds	r26, 0x019C	; 0x80019c <msgQ>
    1fec:	b0 91 9d 01 	lds	r27, 0x019D	; 0x80019d <msgQ+0x1>
    1ff0:	10 97       	sbiw	r26, 0x00	; 0
    1ff2:	c1 f0       	breq	.+48     	; 0x2024 <run+0x94>
    1ff4:	21 15       	cp	r18, r1
    1ff6:	31 05       	cpc	r19, r1
    1ff8:	59 f2       	breq	.-106    	; 0x1f90 <run>
    1ffa:	16 96       	adiw	r26, 0x06	; 6
    1ffc:	8d 91       	ld	r24, X+
    1ffe:	9d 91       	ld	r25, X+
    2000:	0d 90       	ld	r0, X+
    2002:	bc 91       	ld	r27, X
    2004:	a0 2d       	mov	r26, r0
    2006:	e9 01       	movw	r28, r18
    2008:	4e 81       	ldd	r20, Y+6	; 0x06
    200a:	5f 81       	ldd	r21, Y+7	; 0x07
    200c:	68 85       	ldd	r22, Y+8	; 0x08
    200e:	79 85       	ldd	r23, Y+9	; 0x09
    2010:	84 1b       	sub	r24, r20
    2012:	95 0b       	sbc	r25, r21
    2014:	a6 0b       	sbc	r26, r22
    2016:	b7 0b       	sbc	r27, r23
    2018:	18 16       	cp	r1, r24
    201a:	19 06       	cpc	r1, r25
    201c:	1a 06       	cpc	r1, r26
    201e:	1b 06       	cpc	r1, r27
    2020:	0c f0       	brlt	.+2      	; 0x2024 <run+0x94>
    2022:	b6 cf       	rjmp	.-148    	; 0x1f90 <run>
    2024:	10 93 7f 01 	sts	0x017F, r17	; 0x80017f <activeStack+0x1>
    2028:	00 93 7e 01 	sts	0x017E, r16	; 0x80017e <activeStack>
    202c:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <threadPool>
    2030:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <threadPool+0x1>
    2034:	91 83       	std	Z+1, r25	; 0x01
    2036:	80 83       	st	Z, r24
    2038:	f0 93 81 01 	sts	0x0181, r31	; 0x800181 <threadPool+0x1>
    203c:	e0 93 80 01 	sts	0x0180, r30	; 0x800180 <threadPool>
    2040:	a0 91 7e 01 	lds	r26, 0x017E	; 0x80017e <activeStack>
    2044:	b0 91 7f 01 	lds	r27, 0x017F	; 0x80017f <activeStack+0x1>
    2048:	14 96       	adiw	r26, 0x04	; 4
    204a:	ed 91       	ld	r30, X+
    204c:	fc 91       	ld	r31, X
    204e:	15 97       	sbiw	r26, 0x05	; 5
    2050:	30 97       	sbiw	r30, 0x00	; 0
    2052:	41 f0       	breq	.+16     	; 0x2064 <run+0xd4>
    2054:	a0 81       	ld	r26, Z
    2056:	b1 81       	ldd	r27, Z+1	; 0x01
    2058:	14 96       	adiw	r26, 0x04	; 4
    205a:	ed 91       	ld	r30, X+
    205c:	fc 91       	ld	r31, X
    205e:	15 97       	sbiw	r26, 0x05	; 5
    2060:	30 97       	sbiw	r30, 0x00	; 0
    2062:	c1 f7       	brne	.-16     	; 0x2054 <run+0xc4>
    2064:	cd 01       	movw	r24, r26
    2066:	0e 94 93 04 	call	0x926	; 0x926 <dispatch>
    206a:	92 cf       	rjmp	.-220    	; 0x1f90 <run>

0000206c <ABORT>:
    206c:	1f 93       	push	r17
    206e:	cf 93       	push	r28
    2070:	df 93       	push	r29
    2072:	ec 01       	movw	r28, r24
    2074:	1f b7       	in	r17, 0x3f	; 63
    2076:	10 78       	andi	r17, 0x80	; 128
    2078:	f8 94       	cli
    207a:	6a e9       	ldi	r22, 0x9A	; 154
    207c:	71 e0       	ldi	r23, 0x01	; 1
    207e:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <remove>
    2082:	89 2b       	or	r24, r25
    2084:	39 f4       	brne	.+14     	; 0x2094 <ABORT+0x28>
    2086:	6c e9       	ldi	r22, 0x9C	; 156
    2088:	71 e0       	ldi	r23, 0x01	; 1
    208a:	ce 01       	movw	r24, r28
    208c:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <remove>
    2090:	89 2b       	or	r24, r25
    2092:	59 f0       	breq	.+22     	; 0x20aa <ABORT+0x3e>
    2094:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <msgPool>
    2098:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <msgPool+0x1>
    209c:	99 83       	std	Y+1, r25	; 0x01
    209e:	88 83       	st	Y, r24
    20a0:	d0 93 83 01 	sts	0x0183, r29	; 0x800183 <msgPool+0x1>
    20a4:	c0 93 82 01 	sts	0x0182, r28	; 0x800182 <msgPool>
    20a8:	2b c0       	rjmp	.+86     	; 0x2100 <ABORT+0x94>
    20aa:	e0 91 7e 01 	lds	r30, 0x017E	; 0x80017e <activeStack>
    20ae:	f0 91 7f 01 	lds	r31, 0x017F	; 0x80017f <activeStack+0x1>
    20b2:	30 97       	sbiw	r30, 0x00	; 0
    20b4:	29 f1       	breq	.+74     	; 0x2100 <ABORT+0x94>
    20b6:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <current>
    20ba:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <current+0x1>
    20be:	2e 17       	cp	r18, r30
    20c0:	3f 07       	cpc	r19, r31
    20c2:	c9 f0       	breq	.+50     	; 0x20f6 <ABORT+0x8a>
    20c4:	82 81       	ldd	r24, Z+2	; 0x02
    20c6:	93 81       	ldd	r25, Z+3	; 0x03
    20c8:	c8 17       	cp	r28, r24
    20ca:	d9 07       	cpc	r29, r25
    20cc:	a1 f4       	brne	.+40     	; 0x20f6 <ABORT+0x8a>
    20ce:	44 81       	ldd	r20, Z+4	; 0x04
    20d0:	55 81       	ldd	r21, Z+5	; 0x05
    20d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    20d4:	9b 85       	ldd	r25, Y+11	; 0x0b
    20d6:	48 17       	cp	r20, r24
    20d8:	59 07       	cpc	r21, r25
    20da:	69 f4       	brne	.+26     	; 0x20f6 <ABORT+0x8a>
    20dc:	13 82       	std	Z+3, r1	; 0x03
    20de:	12 82       	std	Z+2, r1	; 0x02
    20e0:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <msgPool>
    20e4:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <msgPool+0x1>
    20e8:	99 83       	std	Y+1, r25	; 0x01
    20ea:	88 83       	st	Y, r24
    20ec:	d0 93 83 01 	sts	0x0183, r29	; 0x800183 <msgPool+0x1>
    20f0:	c0 93 82 01 	sts	0x0182, r28	; 0x800182 <msgPool>
    20f4:	05 c0       	rjmp	.+10     	; 0x2100 <ABORT+0x94>
    20f6:	01 90       	ld	r0, Z+
    20f8:	f0 81       	ld	r31, Z
    20fa:	e0 2d       	mov	r30, r0
    20fc:	30 97       	sbiw	r30, 0x00	; 0
    20fe:	f9 f6       	brne	.-66     	; 0x20be <ABORT+0x52>
    2100:	11 23       	and	r17, r17
    2102:	09 f0       	breq	.+2      	; 0x2106 <ABORT+0x9a>
    2104:	78 94       	sei
    2106:	df 91       	pop	r29
    2108:	cf 91       	pop	r28
    210a:	1f 91       	pop	r17
    210c:	08 95       	ret

0000210e <install>:
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    if (i >= 0 && i < N_VECTORS) {
    210e:	42 31       	cpi	r20, 0x12	; 18
    2110:	b8 f4       	brcc	.+46     	; 0x2140 <install+0x32>
        char status;
        DISABLE(status);
    2112:	2f b7       	in	r18, 0x3f	; 63
    2114:	f8 94       	cli
        otable[i] = obj;
    2116:	50 e0       	ldi	r21, 0x00	; 0
    2118:	44 0f       	add	r20, r20
    211a:	55 1f       	adc	r21, r21
    211c:	fa 01       	movw	r30, r20
    211e:	e2 56       	subi	r30, 0x62	; 98
    2120:	fe 4f       	sbci	r31, 0xFE	; 254
    2122:	91 83       	std	Z+1, r25	; 0x01
    2124:	80 83       	st	Z, r24
        mtable[i] = m;
    2126:	fa 01       	movw	r30, r20
    2128:	ea 5c       	subi	r30, 0xCA	; 202
    212a:	fd 4f       	sbci	r31, 0xFD	; 253
    212c:	71 83       	std	Z+1, r23	; 0x01
    212e:	60 83       	st	Z, r22
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    2130:	41 e0       	ldi	r20, 0x01	; 1
    2132:	50 e0       	ldi	r21, 0x00	; 0
    2134:	fc 01       	movw	r30, r24
    2136:	53 83       	std	Z+3, r21	; 0x03
    2138:	42 83       	std	Z+2, r20	; 0x02
        ENABLE(status);
    213a:	22 23       	and	r18, r18
    213c:	0c f4       	brge	.+2      	; 0x2140 <install+0x32>
    213e:	78 94       	sei
    2140:	08 95       	ret

00002142 <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    2142:	8c 01       	movw	r16, r24
    2144:	7b 01       	movw	r14, r22
    2146:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    2148:	8f b7       	in	r24, 0x3f	; 63
    214a:	f8 94       	cli
    initialize();
    214c:	0e 94 28 04 	call	0x850	; 0x850 <initialize>
    ENABLE(1);
    2150:	78 94       	sei
    if (m != NULL)
    2152:	e1 14       	cp	r14, r1
    2154:	f1 04       	cpc	r15, r1
    2156:	41 f0       	breq	.+16     	; 0x2168 <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    2158:	20 e0       	ldi	r18, 0x00	; 0
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	a9 01       	movw	r20, r18
    215e:	60 e0       	ldi	r22, 0x00	; 0
    2160:	70 e0       	ldi	r23, 0x00	; 0
    2162:	cb 01       	movw	r24, r22
    2164:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <async>
    DISABLE(status);
    2168:	8f b7       	in	r24, 0x3f	; 63
    216a:	f8 94       	cli
        }
    }
}

static void idle(void) {
    schedule();
    216c:	0e 94 b3 04 	call	0x966	; 0x966 <schedule>
    ENABLE(1);
    2170:	78 94       	sei
    while (1) {
        SLEEP();
    2172:	81 e0       	ldi	r24, 0x01	; 1
    2174:	83 bf       	out	0x33, r24	; 51
    2176:	88 95       	sleep
    2178:	fd cf       	rjmp	.-6      	; 0x2174 <tinytimber+0x32>

0000217a <__divmodhi4>:
    217a:	97 fb       	bst	r25, 7
    217c:	07 2e       	mov	r0, r23
    217e:	16 f4       	brtc	.+4      	; 0x2184 <__divmodhi4+0xa>
    2180:	00 94       	com	r0
    2182:	07 d0       	rcall	.+14     	; 0x2192 <__divmodhi4_neg1>
    2184:	77 fd       	sbrc	r23, 7
    2186:	09 d0       	rcall	.+18     	; 0x219a <__divmodhi4_neg2>
    2188:	0e 94 f6 10 	call	0x21ec	; 0x21ec <__udivmodhi4>
    218c:	07 fc       	sbrc	r0, 7
    218e:	05 d0       	rcall	.+10     	; 0x219a <__divmodhi4_neg2>
    2190:	3e f4       	brtc	.+14     	; 0x21a0 <__divmodhi4_exit>

00002192 <__divmodhi4_neg1>:
    2192:	90 95       	com	r25
    2194:	81 95       	neg	r24
    2196:	9f 4f       	sbci	r25, 0xFF	; 255
    2198:	08 95       	ret

0000219a <__divmodhi4_neg2>:
    219a:	70 95       	com	r23
    219c:	61 95       	neg	r22
    219e:	7f 4f       	sbci	r23, 0xFF	; 255

000021a0 <__divmodhi4_exit>:
    21a0:	08 95       	ret

000021a2 <__divmodsi4>:
    21a2:	05 2e       	mov	r0, r21
    21a4:	97 fb       	bst	r25, 7
    21a6:	1e f4       	brtc	.+6      	; 0x21ae <__divmodsi4+0xc>
    21a8:	00 94       	com	r0
    21aa:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <__negsi2>
    21ae:	57 fd       	sbrc	r21, 7
    21b0:	07 d0       	rcall	.+14     	; 0x21c0 <__divmodsi4_neg2>
    21b2:	0e 94 0a 11 	call	0x2214	; 0x2214 <__udivmodsi4>
    21b6:	07 fc       	sbrc	r0, 7
    21b8:	03 d0       	rcall	.+6      	; 0x21c0 <__divmodsi4_neg2>
    21ba:	4e f4       	brtc	.+18     	; 0x21ce <__divmodsi4_exit>
    21bc:	0c 94 e8 10 	jmp	0x21d0	; 0x21d0 <__negsi2>

000021c0 <__divmodsi4_neg2>:
    21c0:	50 95       	com	r21
    21c2:	40 95       	com	r20
    21c4:	30 95       	com	r19
    21c6:	21 95       	neg	r18
    21c8:	3f 4f       	sbci	r19, 0xFF	; 255
    21ca:	4f 4f       	sbci	r20, 0xFF	; 255
    21cc:	5f 4f       	sbci	r21, 0xFF	; 255

000021ce <__divmodsi4_exit>:
    21ce:	08 95       	ret

000021d0 <__negsi2>:
    21d0:	90 95       	com	r25
    21d2:	80 95       	com	r24
    21d4:	70 95       	com	r23
    21d6:	61 95       	neg	r22
    21d8:	7f 4f       	sbci	r23, 0xFF	; 255
    21da:	8f 4f       	sbci	r24, 0xFF	; 255
    21dc:	9f 4f       	sbci	r25, 0xFF	; 255
    21de:	08 95       	ret

000021e0 <__tablejump2__>:
    21e0:	ee 0f       	add	r30, r30
    21e2:	ff 1f       	adc	r31, r31
    21e4:	05 90       	lpm	r0, Z+
    21e6:	f4 91       	lpm	r31, Z
    21e8:	e0 2d       	mov	r30, r0
    21ea:	09 94       	ijmp

000021ec <__udivmodhi4>:
    21ec:	aa 1b       	sub	r26, r26
    21ee:	bb 1b       	sub	r27, r27
    21f0:	51 e1       	ldi	r21, 0x11	; 17
    21f2:	07 c0       	rjmp	.+14     	; 0x2202 <__udivmodhi4_ep>

000021f4 <__udivmodhi4_loop>:
    21f4:	aa 1f       	adc	r26, r26
    21f6:	bb 1f       	adc	r27, r27
    21f8:	a6 17       	cp	r26, r22
    21fa:	b7 07       	cpc	r27, r23
    21fc:	10 f0       	brcs	.+4      	; 0x2202 <__udivmodhi4_ep>
    21fe:	a6 1b       	sub	r26, r22
    2200:	b7 0b       	sbc	r27, r23

00002202 <__udivmodhi4_ep>:
    2202:	88 1f       	adc	r24, r24
    2204:	99 1f       	adc	r25, r25
    2206:	5a 95       	dec	r21
    2208:	a9 f7       	brne	.-22     	; 0x21f4 <__udivmodhi4_loop>
    220a:	80 95       	com	r24
    220c:	90 95       	com	r25
    220e:	bc 01       	movw	r22, r24
    2210:	cd 01       	movw	r24, r26
    2212:	08 95       	ret

00002214 <__udivmodsi4>:
    2214:	a1 e2       	ldi	r26, 0x21	; 33
    2216:	1a 2e       	mov	r1, r26
    2218:	aa 1b       	sub	r26, r26
    221a:	bb 1b       	sub	r27, r27
    221c:	fd 01       	movw	r30, r26
    221e:	0d c0       	rjmp	.+26     	; 0x223a <__udivmodsi4_ep>

00002220 <__udivmodsi4_loop>:
    2220:	aa 1f       	adc	r26, r26
    2222:	bb 1f       	adc	r27, r27
    2224:	ee 1f       	adc	r30, r30
    2226:	ff 1f       	adc	r31, r31
    2228:	a2 17       	cp	r26, r18
    222a:	b3 07       	cpc	r27, r19
    222c:	e4 07       	cpc	r30, r20
    222e:	f5 07       	cpc	r31, r21
    2230:	20 f0       	brcs	.+8      	; 0x223a <__udivmodsi4_ep>
    2232:	a2 1b       	sub	r26, r18
    2234:	b3 0b       	sbc	r27, r19
    2236:	e4 0b       	sbc	r30, r20
    2238:	f5 0b       	sbc	r31, r21

0000223a <__udivmodsi4_ep>:
    223a:	66 1f       	adc	r22, r22
    223c:	77 1f       	adc	r23, r23
    223e:	88 1f       	adc	r24, r24
    2240:	99 1f       	adc	r25, r25
    2242:	1a 94       	dec	r1
    2244:	69 f7       	brne	.-38     	; 0x2220 <__udivmodsi4_loop>
    2246:	60 95       	com	r22
    2248:	70 95       	com	r23
    224a:	80 95       	com	r24
    224c:	90 95       	com	r25
    224e:	9b 01       	movw	r18, r22
    2250:	ac 01       	movw	r20, r24
    2252:	bd 01       	movw	r22, r26
    2254:	cf 01       	movw	r24, r30
    2256:	08 95       	ret

00002258 <setjmp>:
    2258:	dc 01       	movw	r26, r24
    225a:	2d 92       	st	X+, r2
    225c:	3d 92       	st	X+, r3
    225e:	4d 92       	st	X+, r4
    2260:	5d 92       	st	X+, r5
    2262:	6d 92       	st	X+, r6
    2264:	7d 92       	st	X+, r7
    2266:	8d 92       	st	X+, r8
    2268:	9d 92       	st	X+, r9
    226a:	ad 92       	st	X+, r10
    226c:	bd 92       	st	X+, r11
    226e:	cd 92       	st	X+, r12
    2270:	dd 92       	st	X+, r13
    2272:	ed 92       	st	X+, r14
    2274:	fd 92       	st	X+, r15
    2276:	0d 93       	st	X+, r16
    2278:	1d 93       	st	X+, r17
    227a:	cd 93       	st	X+, r28
    227c:	dd 93       	st	X+, r29
    227e:	ff 91       	pop	r31
    2280:	ef 91       	pop	r30
    2282:	8d b7       	in	r24, 0x3d	; 61
    2284:	8d 93       	st	X+, r24
    2286:	8e b7       	in	r24, 0x3e	; 62
    2288:	8d 93       	st	X+, r24
    228a:	8f b7       	in	r24, 0x3f	; 63
    228c:	8d 93       	st	X+, r24
    228e:	ed 93       	st	X+, r30
    2290:	fd 93       	st	X+, r31
    2292:	88 27       	eor	r24, r24
    2294:	99 27       	eor	r25, r25
    2296:	09 94       	ijmp

00002298 <longjmp>:
    2298:	dc 01       	movw	r26, r24
    229a:	cb 01       	movw	r24, r22
    229c:	81 30       	cpi	r24, 0x01	; 1
    229e:	91 05       	cpc	r25, r1
    22a0:	81 1d       	adc	r24, r1
    22a2:	2d 90       	ld	r2, X+
    22a4:	3d 90       	ld	r3, X+
    22a6:	4d 90       	ld	r4, X+
    22a8:	5d 90       	ld	r5, X+
    22aa:	6d 90       	ld	r6, X+
    22ac:	7d 90       	ld	r7, X+
    22ae:	8d 90       	ld	r8, X+
    22b0:	9d 90       	ld	r9, X+
    22b2:	ad 90       	ld	r10, X+
    22b4:	bd 90       	ld	r11, X+
    22b6:	cd 90       	ld	r12, X+
    22b8:	dd 90       	ld	r13, X+
    22ba:	ed 90       	ld	r14, X+
    22bc:	fd 90       	ld	r15, X+
    22be:	0d 91       	ld	r16, X+
    22c0:	1d 91       	ld	r17, X+
    22c2:	cd 91       	ld	r28, X+
    22c4:	dd 91       	ld	r29, X+
    22c6:	ed 91       	ld	r30, X+
    22c8:	fd 91       	ld	r31, X+
    22ca:	0d 90       	ld	r0, X+
    22cc:	f8 94       	cli
    22ce:	fe bf       	out	0x3e, r31	; 62
    22d0:	0f be       	out	0x3f, r0	; 63
    22d2:	ed bf       	out	0x3d, r30	; 61
    22d4:	ed 91       	ld	r30, X+
    22d6:	fd 91       	ld	r31, X+
    22d8:	09 94       	ijmp

000022da <_exit>:
    22da:	f8 94       	cli

000022dc <__stop_program>:
    22dc:	ff cf       	rjmp	.-2      	; 0x22dc <__stop_program>
