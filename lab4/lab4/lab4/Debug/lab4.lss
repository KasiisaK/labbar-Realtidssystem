
lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000084  00800100  00001fa6  0000203a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001fa6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000035b  00800184  00800184  000020be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000020be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000020f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000258  00000000  00000000  00002130  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a6f  00000000  00000000  00002388  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000108b  00000000  00000000  00004df7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015aa  00000000  00000000  00005e82  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bc8  00000000  00000000  0000742c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009fa  00000000  00000000  00007ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002769  00000000  00000000  000089ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000208  00000000  00000000  0000b157  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 cb 03 	jmp	0x796	; 0x796 <__vector_1>
       8:	0c 94 37 04 	jmp	0x86e	; 0x86e <__vector_2>
       c:	0c 94 a3 04 	jmp	0x946	; 0x946 <__vector_3>
      10:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <__vector_4>
      14:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <__vector_5>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 52 0c 	jmp	0x18a4	; 0x18a4 <__vector_7>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 00 0c 	jmp	0x1800	; 0x1800 <__vector_9>
      28:	0c 94 e7 05 	jmp	0xbce	; 0xbce <__vector_10>
      2c:	0c 94 53 06 	jmp	0xca6	; 0xca6 <__vector_11>
      30:	0c 94 bf 06 	jmp	0xd7e	; 0xd7e <__vector_12>
      34:	0c 94 2b 07 	jmp	0xe56	; 0xe56 <__vector_13>
      38:	0c 94 97 07 	jmp	0xf2e	; 0xf2e <__vector_14>
      3c:	0c 94 03 08 	jmp	0x1006	; 0x1006 <__vector_15>
      40:	0c 94 6f 08 	jmp	0x10de	; 0x10de <__vector_16>
      44:	0c 94 db 08 	jmp	0x11b6	; 0x11b6 <__vector_17>
      48:	0c 94 47 09 	jmp	0x128e	; 0x128e <__vector_18>
      4c:	0c 94 b3 09 	jmp	0x1366	; 0x1366 <__vector_19>
      50:	0c 94 1f 0a 	jmp	0x143e	; 0x143e <__vector_20>
      54:	0c 94 8b 0a 	jmp	0x1516	; 0x1516 <__vector_21>
      58:	0c 94 f7 0a 	jmp	0x15ee	; 0x15ee <__vector_22>
      5c:	8c 00       	.word	0x008c	; ????
      5e:	6e 00       	.word	0x006e	; ????
      60:	71 00       	.word	0x0071	; ????
      62:	74 00       	.word	0x0074	; ????
      64:	77 00       	.word	0x0077	; ????
      66:	7a 00       	.word	0x007a	; ????
      68:	7d 00       	.word	0x007d	; ????
      6a:	80 00       	.word	0x0080	; ????
      6c:	83 00       	.word	0x0083	; ????
      6e:	86 00       	.word	0x0086	; ????

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	11 e0       	ldi	r17, 0x01	; 1
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	e6 ea       	ldi	r30, 0xA6	; 166
      84:	ff e1       	ldi	r31, 0x1F	; 31
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	a4 38       	cpi	r26, 0x84	; 132
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	24 e0       	ldi	r18, 0x04	; 4
      94:	a4 e8       	ldi	r26, 0x84	; 132
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	af 3d       	cpi	r26, 0xDF	; 223
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <main>
      a6:	0c 94 d1 0f 	jmp	0x1fa2	; 0x1fa2 <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <LCD_init>:
#include "PulseGen.h"
#include "TinyTimber.h"

void LCD_init() {
	// LCD(Contrast Control Register), LCD(Display Configuration)(000): 300 s, LCD(Contrast Control)(1111): 3.35 V
	LCDCCR = (0 << LCDDC0) | (0 << LCDDC1) | (0 << LCDDC2) | (1 << LCDCC0) | (1 << LCDCC1) | (1 << LCDCC2) | (1 << LCDCC3);
      ae:	8f e0       	ldi	r24, 0x0F	; 15
      b0:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__DATA_REGION_ORIGIN__+0x87>
	// LCDCS: asynchronous clock, LCDMUX(11): D=1/4, B=1/3, LCD(Port Mask): 25 segments
	LCDCRB = (1 << LCDCS) | (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM2) | (1 << LCDPM1) | (1 << LCDPM0);
      b4:	87 eb       	ldi	r24, 0xB7	; 183
      b6:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
	// LCD(Clock Divide)(111): (D=8) 32Hz
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);
      ba:	87 e0       	ldi	r24, 0x07	; 7
      bc:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__DATA_REGION_ORIGIN__+0x86>
	// LCD(Control and Status Register A), LCD(Enable): True, LCD(Low Power Waveform): True, (no frame interrupt, no blanking)
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
      c0:	80 ec       	ldi	r24, 0xC0	; 192
      c2:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
      c6:	08 95       	ret

000000c8 <getSegmentForChar>:
int none[] = {0b0000, 0b0000, 0b0000, 0b0000};

// Returns wall of data based on char input ('0' = 48 (char))
int* getSegmentForChar(char ch) {

	switch (ch) {
      c8:	90 e0       	ldi	r25, 0x00	; 0
      ca:	fc 01       	movw	r30, r24
      cc:	f0 97       	sbiw	r30, 0x30	; 48
      ce:	ea 30       	cpi	r30, 0x0A	; 10
      d0:	f1 05       	cpc	r31, r1
      d2:	f8 f4       	brcc	.+62     	; 0x112 <getSegmentForChar+0x4a>
      d4:	e2 5d       	subi	r30, 0xD2	; 210
      d6:	ff 4f       	sbci	r31, 0xFF	; 255
      d8:	0c 94 68 0f 	jmp	0x1ed0	; 0x1ed0 <__tablejump2__>
		case '0': return zero;
		case '1': return one;
      dc:	80 e4       	ldi	r24, 0x40	; 64
      de:	91 e0       	ldi	r25, 0x01	; 1
      e0:	08 95       	ret
		case '2': return two;
      e2:	88 e3       	ldi	r24, 0x38	; 56
      e4:	91 e0       	ldi	r25, 0x01	; 1
      e6:	08 95       	ret
		case '3': return three;
      e8:	80 e3       	ldi	r24, 0x30	; 48
      ea:	91 e0       	ldi	r25, 0x01	; 1
      ec:	08 95       	ret
		case '4': return four;
      ee:	88 e2       	ldi	r24, 0x28	; 40
      f0:	91 e0       	ldi	r25, 0x01	; 1
      f2:	08 95       	ret
		case '5': return five;
      f4:	80 e2       	ldi	r24, 0x20	; 32
      f6:	91 e0       	ldi	r25, 0x01	; 1
      f8:	08 95       	ret
		case '6': return six;
      fa:	88 e1       	ldi	r24, 0x18	; 24
      fc:	91 e0       	ldi	r25, 0x01	; 1
      fe:	08 95       	ret
		case '7': return seven;
     100:	80 e1       	ldi	r24, 0x10	; 16
     102:	91 e0       	ldi	r25, 0x01	; 1
     104:	08 95       	ret
		case '8': return eight;
     106:	88 e0       	ldi	r24, 0x08	; 8
     108:	91 e0       	ldi	r25, 0x01	; 1
     10a:	08 95       	ret
		case '9': return nine;
     10c:	80 e0       	ldi	r24, 0x00	; 0
     10e:	91 e0       	ldi	r25, 0x01	; 1
     110:	08 95       	ret
		default:  return none;
     112:	84 e8       	ldi	r24, 0x84	; 132
     114:	91 e0       	ldi	r25, 0x01	; 1
     116:	08 95       	ret

// Returns wall of data based on char input ('0' = 48 (char))
int* getSegmentForChar(char ch) {

	switch (ch) {
		case '0': return zero;
     118:	88 e4       	ldi	r24, 0x48	; 72
     11a:	91 e0       	ldi	r25, 0x01	; 1
		case '7': return seven;
		case '8': return eight;
		case '9': return nine;
		default:  return none;
	}
}
     11c:	08 95       	ret

0000011e <writeChar>:

// Write a char ch at position pos
void writeChar(char ch, uint8_t pos) {
     11e:	cf 93       	push	r28
	// Check if outside range
	if (pos > 5 || pos < 0) return;	
     120:	66 30       	cpi	r22, 0x06	; 6
     122:	08 f0       	brcs	.+2      	; 0x126 <writeChar+0x8>
     124:	e4 c0       	rjmp	.+456    	; 0x2ee <writeChar+0x1d0>
     126:	c6 2f       	mov	r28, r22

	// Get correct char data
	int* segment = getSegmentForChar(ch);
     128:	0e 94 64 00 	call	0xc8	; 0xc8 <getSegmentForChar>
     12c:	fc 01       	movw	r30, r24
	
	// Chose position
	switch (pos) {
     12e:	c2 30       	cpi	r28, 0x02	; 2
     130:	09 f4       	brne	.+2      	; 0x134 <writeChar+0x16>
     132:	67 c0       	rjmp	.+206    	; 0x202 <writeChar+0xe4>
     134:	28 f4       	brcc	.+10     	; 0x140 <writeChar+0x22>
     136:	cc 23       	and	r28, r28
     138:	51 f0       	breq	.+20     	; 0x14e <writeChar+0x30>
     13a:	c1 30       	cpi	r28, 0x01	; 1
     13c:	29 f1       	breq	.+74     	; 0x188 <writeChar+0x6a>
     13e:	d7 c0       	rjmp	.+430    	; 0x2ee <writeChar+0x1d0>
     140:	c3 30       	cpi	r28, 0x03	; 3
     142:	09 f4       	brne	.+2      	; 0x146 <writeChar+0x28>
     144:	7b c0       	rjmp	.+246    	; 0x23c <writeChar+0x11e>
     146:	c4 30       	cpi	r28, 0x04	; 4
     148:	09 f4       	brne	.+2      	; 0x14c <writeChar+0x2e>
     14a:	b5 c0       	rjmp	.+362    	; 0x2b6 <writeChar+0x198>
     14c:	d0 c0       	rjmp	.+416    	; 0x2ee <writeChar+0x1d0>
		case 0:
			// Segment start at 0, 5, 10, 15, higher 4 bits.
			// (LCDDR0 & 0xF0) clears the segment before writing 
			LCDDR0 = (LCDDR0 & 0xF0) | segment[0];
     14e:	ac ee       	ldi	r26, 0xEC	; 236
     150:	b0 e0       	ldi	r27, 0x00	; 0
     152:	8c 91       	ld	r24, X
     154:	80 7f       	andi	r24, 0xF0	; 240
     156:	90 81       	ld	r25, Z
     158:	89 2b       	or	r24, r25
     15a:	8c 93       	st	X, r24
			LCDDR5 = (LCDDR5 & 0xF0) | segment[1];
     15c:	a1 ef       	ldi	r26, 0xF1	; 241
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	8c 91       	ld	r24, X
     162:	80 7f       	andi	r24, 0xF0	; 240
     164:	92 81       	ldd	r25, Z+2	; 0x02
     166:	89 2b       	or	r24, r25
     168:	8c 93       	st	X, r24
			LCDDR10 = (LCDDR10 & 0xF0) | segment[2];
     16a:	a6 ef       	ldi	r26, 0xF6	; 246
     16c:	b0 e0       	ldi	r27, 0x00	; 0
     16e:	8c 91       	ld	r24, X
     170:	80 7f       	andi	r24, 0xF0	; 240
     172:	94 81       	ldd	r25, Z+4	; 0x04
     174:	89 2b       	or	r24, r25
     176:	8c 93       	st	X, r24
			LCDDR15 = (LCDDR15 & 0xF0) | segment[3];
     178:	ab ef       	ldi	r26, 0xFB	; 251
     17a:	b0 e0       	ldi	r27, 0x00	; 0
     17c:	8c 91       	ld	r24, X
     17e:	80 7f       	andi	r24, 0xF0	; 240
     180:	96 81       	ldd	r25, Z+6	; 0x06
     182:	89 2b       	or	r24, r25
     184:	8c 93       	st	X, r24
			break;
     186:	b3 c0       	rjmp	.+358    	; 0x2ee <writeChar+0x1d0>
		case 1:
			// Same segment just lower 4 bits
			LCDDR0 = (LCDDR0 & 0x0F) | (segment[0] << 4);
     188:	ac ee       	ldi	r26, 0xEC	; 236
     18a:	b0 e0       	ldi	r27, 0x00	; 0
     18c:	2c 91       	ld	r18, X
     18e:	80 81       	ld	r24, Z
     190:	91 81       	ldd	r25, Z+1	; 0x01
     192:	82 95       	swap	r24
     194:	92 95       	swap	r25
     196:	90 7f       	andi	r25, 0xF0	; 240
     198:	98 27       	eor	r25, r24
     19a:	80 7f       	andi	r24, 0xF0	; 240
     19c:	98 27       	eor	r25, r24
     19e:	92 2f       	mov	r25, r18
     1a0:	9f 70       	andi	r25, 0x0F	; 15
     1a2:	89 2b       	or	r24, r25
     1a4:	8c 93       	st	X, r24
			LCDDR5 = (LCDDR5 & 0x0F) | (segment[1] << 4);
     1a6:	a1 ef       	ldi	r26, 0xF1	; 241
     1a8:	b0 e0       	ldi	r27, 0x00	; 0
     1aa:	2c 91       	ld	r18, X
     1ac:	82 81       	ldd	r24, Z+2	; 0x02
     1ae:	93 81       	ldd	r25, Z+3	; 0x03
     1b0:	82 95       	swap	r24
     1b2:	92 95       	swap	r25
     1b4:	90 7f       	andi	r25, 0xF0	; 240
     1b6:	98 27       	eor	r25, r24
     1b8:	80 7f       	andi	r24, 0xF0	; 240
     1ba:	98 27       	eor	r25, r24
     1bc:	92 2f       	mov	r25, r18
     1be:	9f 70       	andi	r25, 0x0F	; 15
     1c0:	89 2b       	or	r24, r25
     1c2:	8c 93       	st	X, r24
			LCDDR10 = (LCDDR10 & 0x0F) | (segment[2] << 4);
     1c4:	a6 ef       	ldi	r26, 0xF6	; 246
     1c6:	b0 e0       	ldi	r27, 0x00	; 0
     1c8:	2c 91       	ld	r18, X
     1ca:	84 81       	ldd	r24, Z+4	; 0x04
     1cc:	95 81       	ldd	r25, Z+5	; 0x05
     1ce:	82 95       	swap	r24
     1d0:	92 95       	swap	r25
     1d2:	90 7f       	andi	r25, 0xF0	; 240
     1d4:	98 27       	eor	r25, r24
     1d6:	80 7f       	andi	r24, 0xF0	; 240
     1d8:	98 27       	eor	r25, r24
     1da:	92 2f       	mov	r25, r18
     1dc:	9f 70       	andi	r25, 0x0F	; 15
     1de:	89 2b       	or	r24, r25
     1e0:	8c 93       	st	X, r24
			LCDDR15 = (LCDDR15 & 0x0F) | (segment[3] << 4);
     1e2:	ab ef       	ldi	r26, 0xFB	; 251
     1e4:	b0 e0       	ldi	r27, 0x00	; 0
     1e6:	2c 91       	ld	r18, X
     1e8:	86 81       	ldd	r24, Z+6	; 0x06
     1ea:	97 81       	ldd	r25, Z+7	; 0x07
     1ec:	82 95       	swap	r24
     1ee:	92 95       	swap	r25
     1f0:	90 7f       	andi	r25, 0xF0	; 240
     1f2:	98 27       	eor	r25, r24
     1f4:	80 7f       	andi	r24, 0xF0	; 240
     1f6:	98 27       	eor	r25, r24
     1f8:	92 2f       	mov	r25, r18
     1fa:	9f 70       	andi	r25, 0x0F	; 15
     1fc:	89 2b       	or	r24, r25
     1fe:	8c 93       	st	X, r24
			break;
     200:	76 c0       	rjmp	.+236    	; 0x2ee <writeChar+0x1d0>
		case 2:
			LCDDR1 = (LCDDR1 & 0xF0) | segment[0];
     202:	ad ee       	ldi	r26, 0xED	; 237
     204:	b0 e0       	ldi	r27, 0x00	; 0
     206:	8c 91       	ld	r24, X
     208:	80 7f       	andi	r24, 0xF0	; 240
     20a:	90 81       	ld	r25, Z
     20c:	89 2b       	or	r24, r25
     20e:	8c 93       	st	X, r24
			LCDDR6 = (LCDDR6 & 0xF0) | segment[1];
     210:	a2 ef       	ldi	r26, 0xF2	; 242
     212:	b0 e0       	ldi	r27, 0x00	; 0
     214:	8c 91       	ld	r24, X
     216:	80 7f       	andi	r24, 0xF0	; 240
     218:	92 81       	ldd	r25, Z+2	; 0x02
     21a:	89 2b       	or	r24, r25
     21c:	8c 93       	st	X, r24
			LCDDR11 = (LCDDR11 & 0xF0) | segment[2];
     21e:	a7 ef       	ldi	r26, 0xF7	; 247
     220:	b0 e0       	ldi	r27, 0x00	; 0
     222:	8c 91       	ld	r24, X
     224:	80 7f       	andi	r24, 0xF0	; 240
     226:	94 81       	ldd	r25, Z+4	; 0x04
     228:	89 2b       	or	r24, r25
     22a:	8c 93       	st	X, r24
			LCDDR16 = (LCDDR16 & 0xF0) | segment[3];
     22c:	ac ef       	ldi	r26, 0xFC	; 252
     22e:	b0 e0       	ldi	r27, 0x00	; 0
     230:	8c 91       	ld	r24, X
     232:	80 7f       	andi	r24, 0xF0	; 240
     234:	96 81       	ldd	r25, Z+6	; 0x06
     236:	89 2b       	or	r24, r25
     238:	8c 93       	st	X, r24
			break;
     23a:	59 c0       	rjmp	.+178    	; 0x2ee <writeChar+0x1d0>
		case 3:
			LCDDR1 = (LCDDR1 & 0x0F) | (segment[0] << 4);
     23c:	ad ee       	ldi	r26, 0xED	; 237
     23e:	b0 e0       	ldi	r27, 0x00	; 0
     240:	2c 91       	ld	r18, X
     242:	80 81       	ld	r24, Z
     244:	91 81       	ldd	r25, Z+1	; 0x01
     246:	82 95       	swap	r24
     248:	92 95       	swap	r25
     24a:	90 7f       	andi	r25, 0xF0	; 240
     24c:	98 27       	eor	r25, r24
     24e:	80 7f       	andi	r24, 0xF0	; 240
     250:	98 27       	eor	r25, r24
     252:	92 2f       	mov	r25, r18
     254:	9f 70       	andi	r25, 0x0F	; 15
     256:	89 2b       	or	r24, r25
     258:	8c 93       	st	X, r24
			LCDDR6 = (LCDDR6 & 0x0F) | (segment[1] << 4);
     25a:	a2 ef       	ldi	r26, 0xF2	; 242
     25c:	b0 e0       	ldi	r27, 0x00	; 0
     25e:	2c 91       	ld	r18, X
     260:	82 81       	ldd	r24, Z+2	; 0x02
     262:	93 81       	ldd	r25, Z+3	; 0x03
     264:	82 95       	swap	r24
     266:	92 95       	swap	r25
     268:	90 7f       	andi	r25, 0xF0	; 240
     26a:	98 27       	eor	r25, r24
     26c:	80 7f       	andi	r24, 0xF0	; 240
     26e:	98 27       	eor	r25, r24
     270:	92 2f       	mov	r25, r18
     272:	9f 70       	andi	r25, 0x0F	; 15
     274:	89 2b       	or	r24, r25
     276:	8c 93       	st	X, r24
			LCDDR11 = (LCDDR11 & 0x0F) | (segment[2] << 4);
     278:	a7 ef       	ldi	r26, 0xF7	; 247
     27a:	b0 e0       	ldi	r27, 0x00	; 0
     27c:	2c 91       	ld	r18, X
     27e:	84 81       	ldd	r24, Z+4	; 0x04
     280:	95 81       	ldd	r25, Z+5	; 0x05
     282:	82 95       	swap	r24
     284:	92 95       	swap	r25
     286:	90 7f       	andi	r25, 0xF0	; 240
     288:	98 27       	eor	r25, r24
     28a:	80 7f       	andi	r24, 0xF0	; 240
     28c:	98 27       	eor	r25, r24
     28e:	92 2f       	mov	r25, r18
     290:	9f 70       	andi	r25, 0x0F	; 15
     292:	89 2b       	or	r24, r25
     294:	8c 93       	st	X, r24
			LCDDR16 = (LCDDR16 & 0x0F) | (segment[3] << 4);
     296:	ac ef       	ldi	r26, 0xFC	; 252
     298:	b0 e0       	ldi	r27, 0x00	; 0
     29a:	2c 91       	ld	r18, X
     29c:	86 81       	ldd	r24, Z+6	; 0x06
     29e:	97 81       	ldd	r25, Z+7	; 0x07
     2a0:	82 95       	swap	r24
     2a2:	92 95       	swap	r25
     2a4:	90 7f       	andi	r25, 0xF0	; 240
     2a6:	98 27       	eor	r25, r24
     2a8:	80 7f       	andi	r24, 0xF0	; 240
     2aa:	98 27       	eor	r25, r24
     2ac:	92 2f       	mov	r25, r18
     2ae:	9f 70       	andi	r25, 0x0F	; 15
     2b0:	89 2b       	or	r24, r25
     2b2:	8c 93       	st	X, r24
			break;
     2b4:	1c c0       	rjmp	.+56     	; 0x2ee <writeChar+0x1d0>
		case 4:
			LCDDR2 = (LCDDR2 & 0xF0) | segment[0];
     2b6:	ae ee       	ldi	r26, 0xEE	; 238
     2b8:	b0 e0       	ldi	r27, 0x00	; 0
     2ba:	8c 91       	ld	r24, X
     2bc:	80 7f       	andi	r24, 0xF0	; 240
     2be:	90 81       	ld	r25, Z
     2c0:	89 2b       	or	r24, r25
     2c2:	8c 93       	st	X, r24
			LCDDR7 = (LCDDR7 & 0xF0) | segment[1];
     2c4:	a3 ef       	ldi	r26, 0xF3	; 243
     2c6:	b0 e0       	ldi	r27, 0x00	; 0
     2c8:	8c 91       	ld	r24, X
     2ca:	80 7f       	andi	r24, 0xF0	; 240
     2cc:	92 81       	ldd	r25, Z+2	; 0x02
     2ce:	89 2b       	or	r24, r25
     2d0:	8c 93       	st	X, r24
			LCDDR12 = (LCDDR12 & 0xF0) | segment[2];
     2d2:	a8 ef       	ldi	r26, 0xF8	; 248
     2d4:	b0 e0       	ldi	r27, 0x00	; 0
     2d6:	8c 91       	ld	r24, X
     2d8:	80 7f       	andi	r24, 0xF0	; 240
     2da:	94 81       	ldd	r25, Z+4	; 0x04
     2dc:	89 2b       	or	r24, r25
     2de:	8c 93       	st	X, r24
			LCDDR17 = (LCDDR17 & 0xF0) | segment[3];
     2e0:	ad ef       	ldi	r26, 0xFD	; 253
     2e2:	b0 e0       	ldi	r27, 0x00	; 0
     2e4:	8c 91       	ld	r24, X
     2e6:	80 7f       	andi	r24, 0xF0	; 240
     2e8:	96 81       	ldd	r25, Z+6	; 0x06
     2ea:	89 2b       	or	r24, r25
     2ec:	8c 93       	st	X, r24
			break;
	}
}
     2ee:	cf 91       	pop	r28
     2f0:	08 95       	ret

000002f2 <printAt>:

void printAt(long num, int pos) {
     2f2:	8f 92       	push	r8
     2f4:	9f 92       	push	r9
     2f6:	af 92       	push	r10
     2f8:	bf 92       	push	r11
     2fa:	cf 92       	push	r12
     2fc:	df 92       	push	r13
     2fe:	ef 92       	push	r14
     300:	ff 92       	push	r15
     302:	cf 93       	push	r28
     304:	df 93       	push	r29
     306:	4b 01       	movw	r8, r22
     308:	5c 01       	movw	r10, r24
     30a:	ea 01       	movw	r28, r20
	writeChar((num % 100) / 10 + '0', pos);
     30c:	24 e6       	ldi	r18, 0x64	; 100
     30e:	30 e0       	ldi	r19, 0x00	; 0
     310:	40 e0       	ldi	r20, 0x00	; 0
     312:	50 e0       	ldi	r21, 0x00	; 0
     314:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <__divmodsi4>
     318:	0f 2e       	mov	r0, r31
     31a:	fa e0       	ldi	r31, 0x0A	; 10
     31c:	cf 2e       	mov	r12, r31
     31e:	d1 2c       	mov	r13, r1
     320:	e1 2c       	mov	r14, r1
     322:	f1 2c       	mov	r15, r1
     324:	f0 2d       	mov	r31, r0
     326:	a7 01       	movw	r20, r14
     328:	96 01       	movw	r18, r12
     32a:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <__divmodsi4>
     32e:	6c 2f       	mov	r22, r28
     330:	80 e3       	ldi	r24, 0x30	; 48
     332:	82 0f       	add	r24, r18
     334:	0e 94 8f 00 	call	0x11e	; 0x11e <writeChar>
	pos++;
	writeChar(num % 10 + '0', pos);
     338:	21 96       	adiw	r28, 0x01	; 1
     33a:	c5 01       	movw	r24, r10
     33c:	b4 01       	movw	r22, r8
     33e:	a7 01       	movw	r20, r14
     340:	96 01       	movw	r18, r12
     342:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <__divmodsi4>
     346:	86 2f       	mov	r24, r22
     348:	6c 2f       	mov	r22, r28
     34a:	80 5d       	subi	r24, 0xD0	; 208
     34c:	0e 94 8f 00 	call	0x11e	; 0x11e <writeChar>
}
     350:	df 91       	pop	r29
     352:	cf 91       	pop	r28
     354:	ff 90       	pop	r15
     356:	ef 90       	pop	r14
     358:	df 90       	pop	r13
     35a:	cf 90       	pop	r12
     35c:	bf 90       	pop	r11
     35e:	af 90       	pop	r10
     360:	9f 90       	pop	r9
     362:	8f 90       	pop	r8
     364:	08 95       	ret

00000366 <updateOneOrTwo>:

void updateOneOrTwo(GUI *self) {
     366:	fc 01       	movw	r30, r24
	LCDDR0 &= ~(0b01000100);
     368:	ac ee       	ldi	r26, 0xEC	; 236
     36a:	b0 e0       	ldi	r27, 0x00	; 0
     36c:	9c 91       	ld	r25, X
     36e:	9b 7b       	andi	r25, 0xBB	; 187
     370:	9c 93       	st	X, r25
	if (self->activeGen == self->gen1) {		
     372:	20 85       	ldd	r18, Z+8	; 0x08
     374:	31 85       	ldd	r19, Z+9	; 0x09
     376:	84 81       	ldd	r24, Z+4	; 0x04
     378:	95 81       	ldd	r25, Z+5	; 0x05
     37a:	28 17       	cp	r18, r24
     37c:	39 07       	cpc	r19, r25
     37e:	31 f4       	brne	.+12     	; 0x38c <updateOneOrTwo+0x26>
		LCDDR0 |= 0b01000000;
     380:	ec ee       	ldi	r30, 0xEC	; 236
     382:	f0 e0       	ldi	r31, 0x00	; 0
     384:	80 81       	ld	r24, Z
     386:	80 64       	ori	r24, 0x40	; 64
     388:	80 83       	st	Z, r24
     38a:	08 95       	ret
	} else {
		LCDDR0 |= 0b00000100;
     38c:	ec ee       	ldi	r30, 0xEC	; 236
     38e:	f0 e0       	ldi	r31, 0x00	; 0
     390:	80 81       	ld	r24, Z
     392:	84 60       	ori	r24, 0x04	; 4
     394:	80 83       	st	Z, r24
     396:	08 95       	ret

00000398 <updateDisplay>:
		SYNC(self->activeGen, setFrequency, 0);
	}
	ASYNC(self, updateDisplay, 0);
}

void updateDisplay(GUI *self) {
     398:	0f 93       	push	r16
     39a:	1f 93       	push	r17
     39c:	cf 93       	push	r28
     39e:	df 93       	push	r29
     3a0:	ec 01       	movw	r28, r24
	updateOneOrTwo(self);
     3a2:	0e 94 b3 01 	call	0x366	; 0x366 <updateOneOrTwo>
	int gen1Freq = SYNC(self->gen1, getFrequency, 0);
     3a6:	40 e0       	ldi	r20, 0x00	; 0
     3a8:	50 e0       	ldi	r21, 0x00	; 0
     3aa:	61 e0       	ldi	r22, 0x01	; 1
     3ac:	73 e0       	ldi	r23, 0x03	; 3
     3ae:	8c 81       	ldd	r24, Y+4	; 0x04
     3b0:	9d 81       	ldd	r25, Y+5	; 0x05
     3b2:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <sync>
     3b6:	8c 01       	movw	r16, r24
	int gen2Freq = SYNC(self->gen2, getFrequency, 0);
     3b8:	40 e0       	ldi	r20, 0x00	; 0
     3ba:	50 e0       	ldi	r21, 0x00	; 0
     3bc:	61 e0       	ldi	r22, 0x01	; 1
     3be:	73 e0       	ldi	r23, 0x03	; 3
     3c0:	8e 81       	ldd	r24, Y+6	; 0x06
     3c2:	9f 81       	ldd	r25, Y+7	; 0x07
     3c4:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <sync>
     3c8:	ec 01       	movw	r28, r24
    printAt(gen1Freq, 0); //gen1 hz at pos 0-1
     3ca:	b8 01       	movw	r22, r16
     3cc:	11 0f       	add	r17, r17
     3ce:	88 0b       	sbc	r24, r24
     3d0:	99 0b       	sbc	r25, r25
     3d2:	40 e0       	ldi	r20, 0x00	; 0
     3d4:	50 e0       	ldi	r21, 0x00	; 0
     3d6:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printAt>
    printAt(gen2Freq, 3); //gen2 hz at pos 3-4	
     3da:	be 01       	movw	r22, r28
     3dc:	dd 0f       	add	r29, r29
     3de:	88 0b       	sbc	r24, r24
     3e0:	99 0b       	sbc	r25, r25
     3e2:	43 e0       	ldi	r20, 0x03	; 3
     3e4:	50 e0       	ldi	r21, 0x00	; 0
     3e6:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printAt>
     3ea:	df 91       	pop	r29
     3ec:	cf 91       	pop	r28
     3ee:	1f 91       	pop	r17
     3f0:	0f 91       	pop	r16
     3f2:	08 95       	ret

000003f4 <swithToLeftGen>:
		LCDDR0 |= 0b00000100;
	}
}

void swithToLeftGen(GUI *self) {
	self->activeGen = self->gen1;
     3f4:	fc 01       	movw	r30, r24
     3f6:	24 81       	ldd	r18, Z+4	; 0x04
     3f8:	35 81       	ldd	r19, Z+5	; 0x05
     3fa:	31 87       	std	Z+9, r19	; 0x09
     3fc:	20 87       	std	Z+8, r18	; 0x08
     3fe:	08 95       	ret

00000400 <swithToRightGen>:
}

void swithToRightGen(GUI *self) {
	self->activeGen = self->gen2;
     400:	fc 01       	movw	r30, r24
     402:	26 81       	ldd	r18, Z+6	; 0x06
     404:	37 81       	ldd	r19, Z+7	; 0x07
     406:	31 87       	std	Z+9, r19	; 0x09
     408:	20 87       	std	Z+8, r18	; 0x08
     40a:	08 95       	ret

0000040c <adjustFrequency>:
}

void adjustFrequency(GUI *self, int delta) {
     40c:	cf 92       	push	r12
     40e:	df 92       	push	r13
     410:	ef 92       	push	r14
     412:	ff 92       	push	r15
     414:	0f 93       	push	r16
     416:	1f 93       	push	r17
     418:	cf 93       	push	r28
     41a:	df 93       	push	r29
     41c:	8c 01       	movw	r16, r24
     41e:	eb 01       	movw	r28, r22
	// Get right target gen
	int newFreq = SYNC(self->activeGen, getFrequency, 0) + delta;
     420:	40 e0       	ldi	r20, 0x00	; 0
     422:	50 e0       	ldi	r21, 0x00	; 0
     424:	61 e0       	ldi	r22, 0x01	; 1
     426:	73 e0       	ldi	r23, 0x03	; 3
     428:	fc 01       	movw	r30, r24
     42a:	80 85       	ldd	r24, Z+8	; 0x08
     42c:	91 85       	ldd	r25, Z+9	; 0x09
     42e:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <sync>
     432:	ac 01       	movw	r20, r24
     434:	4c 0f       	add	r20, r28
     436:	5d 1f       	adc	r21, r29
	if (newFreq < 0) newFreq = 0;
	// Update everything
	SYNC(self->activeGen, setFrequency, newFreq);
     438:	55 23       	and	r21, r21
     43a:	14 f4       	brge	.+4      	; 0x440 <adjustFrequency+0x34>
     43c:	40 e0       	ldi	r20, 0x00	; 0
     43e:	50 e0       	ldi	r21, 0x00	; 0
     440:	61 ef       	ldi	r22, 0xF1	; 241
     442:	72 e0       	ldi	r23, 0x02	; 2
     444:	f8 01       	movw	r30, r16
     446:	80 85       	ldd	r24, Z+8	; 0x08
     448:	91 85       	ldd	r25, Z+9	; 0x09
     44a:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <sync>
	ASYNC(self, updateDisplay, 0);
     44e:	c1 2c       	mov	r12, r1
     450:	d1 2c       	mov	r13, r1
     452:	0f 2e       	mov	r0, r31
     454:	fc ec       	ldi	r31, 0xCC	; 204
     456:	ef 2e       	mov	r14, r31
     458:	f1 e0       	ldi	r31, 0x01	; 1
     45a:	ff 2e       	mov	r15, r31
     45c:	f0 2d       	mov	r31, r0
     45e:	20 e0       	ldi	r18, 0x00	; 0
     460:	30 e0       	ldi	r19, 0x00	; 0
     462:	a9 01       	movw	r20, r18
     464:	60 e0       	ldi	r22, 0x00	; 0
     466:	70 e0       	ldi	r23, 0x00	; 0
     468:	cb 01       	movw	r24, r22
     46a:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <async>
}
     46e:	df 91       	pop	r29
     470:	cf 91       	pop	r28
     472:	1f 91       	pop	r17
     474:	0f 91       	pop	r16
     476:	ff 90       	pop	r15
     478:	ef 90       	pop	r14
     47a:	df 90       	pop	r13
     47c:	cf 90       	pop	r12
     47e:	08 95       	ret

00000480 <saveRestore>:

void saveRestore(GUI *self) {
     480:	cf 92       	push	r12
     482:	df 92       	push	r13
     484:	ef 92       	push	r14
     486:	ff 92       	push	r15
     488:	0f 93       	push	r16
     48a:	1f 93       	push	r17
     48c:	cf 93       	push	r28
     48e:	df 93       	push	r29
     490:	ec 01       	movw	r28, r24
	if (SYNC(self->activeGen, getFrequency, 0) == 0) {
     492:	40 e0       	ldi	r20, 0x00	; 0
     494:	50 e0       	ldi	r21, 0x00	; 0
     496:	61 e0       	ldi	r22, 0x01	; 1
     498:	73 e0       	ldi	r23, 0x03	; 3
     49a:	88 85       	ldd	r24, Y+8	; 0x08
     49c:	99 85       	ldd	r25, Y+9	; 0x09
     49e:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <sync>
     4a2:	89 2b       	or	r24, r25
     4a4:	49 f4       	brne	.+18     	; 0x4b8 <saveRestore+0x38>
		SYNC(self->activeGen, restore, 0);
     4a6:	40 e0       	ldi	r20, 0x00	; 0
     4a8:	50 e0       	ldi	r21, 0x00	; 0
     4aa:	6b ef       	ldi	r22, 0xFB	; 251
     4ac:	72 e0       	ldi	r23, 0x02	; 2
     4ae:	88 85       	ldd	r24, Y+8	; 0x08
     4b0:	99 85       	ldd	r25, Y+9	; 0x09
     4b2:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <sync>
     4b6:	10 c0       	rjmp	.+32     	; 0x4d8 <saveRestore+0x58>
		} else {
		SYNC(self->activeGen, save, 0);
     4b8:	40 e0       	ldi	r20, 0x00	; 0
     4ba:	50 e0       	ldi	r21, 0x00	; 0
     4bc:	65 ef       	ldi	r22, 0xF5	; 245
     4be:	72 e0       	ldi	r23, 0x02	; 2
     4c0:	88 85       	ldd	r24, Y+8	; 0x08
     4c2:	99 85       	ldd	r25, Y+9	; 0x09
     4c4:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <sync>
		SYNC(self->activeGen, setFrequency, 0);
     4c8:	40 e0       	ldi	r20, 0x00	; 0
     4ca:	50 e0       	ldi	r21, 0x00	; 0
     4cc:	61 ef       	ldi	r22, 0xF1	; 241
     4ce:	72 e0       	ldi	r23, 0x02	; 2
     4d0:	88 85       	ldd	r24, Y+8	; 0x08
     4d2:	99 85       	ldd	r25, Y+9	; 0x09
     4d4:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <sync>
	}
	ASYNC(self, updateDisplay, 0);
     4d8:	c1 2c       	mov	r12, r1
     4da:	d1 2c       	mov	r13, r1
     4dc:	0f 2e       	mov	r0, r31
     4de:	fc ec       	ldi	r31, 0xCC	; 204
     4e0:	ef 2e       	mov	r14, r31
     4e2:	f1 e0       	ldi	r31, 0x01	; 1
     4e4:	ff 2e       	mov	r15, r31
     4e6:	f0 2d       	mov	r31, r0
     4e8:	8e 01       	movw	r16, r28
     4ea:	20 e0       	ldi	r18, 0x00	; 0
     4ec:	30 e0       	ldi	r19, 0x00	; 0
     4ee:	a9 01       	movw	r20, r18
     4f0:	60 e0       	ldi	r22, 0x00	; 0
     4f2:	70 e0       	ldi	r23, 0x00	; 0
     4f4:	cb 01       	movw	r24, r22
     4f6:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <async>
}
     4fa:	df 91       	pop	r29
     4fc:	cf 91       	pop	r28
     4fe:	1f 91       	pop	r17
     500:	0f 91       	pop	r16
     502:	ff 90       	pop	r15
     504:	ef 90       	pop	r14
     506:	df 90       	pop	r13
     508:	cf 90       	pop	r12
     50a:	08 95       	ret

0000050c <joystickInit>:
#include "PulseGen.h"


void joystickInit() {
    //sätter på upp, ner och inåt som input
    PORTB = PORTB | 0b11010000;
     50c:	85 b1       	in	r24, 0x05	; 5
     50e:	80 6d       	ori	r24, 0xD0	; 208
     510:	85 b9       	out	0x05, r24	; 5
    //sätter på höger och vänster  som input
    PORTE = PORTE | 0b00001100;
     512:	8e b1       	in	r24, 0x0e	; 14
     514:	8c 60       	ori	r24, 0x0C	; 12
     516:	8e b9       	out	0x0e, r24	; 14
    //DDRE = 0b01010000;
    //sätter på upp,ner,in (15) hög,ven (14) //sida 53 AVr..169 nånitng
    EIMSK = EIMSK | (1<<PCINT15) | (1<<PCINT14);
     518:	8d b3       	in	r24, 0x1d	; 29
     51a:	80 6c       	ori	r24, 0xC0	; 192
     51c:	8d bb       	out	0x1d, r24	; 29

    //sätter på upp, ner och inåt på joystick (som interrupt)
    PCMSK1 = PCMSK1 | (1<<PCINT15) | (1<<PCINT14) | (1<<PCINT12);
     51e:	ec e6       	ldi	r30, 0x6C	; 108
     520:	f0 e0       	ldi	r31, 0x00	; 0
     522:	80 81       	ld	r24, Z
     524:	80 6d       	ori	r24, 0xD0	; 208
     526:	80 83       	st	Z, r24
    //sätter på höger och vänster på joystick (som interrupt)
    PCMSK0 = PCMSK0 | (1<<PCINT3) | (1<<PCINT2);
     528:	eb e6       	ldi	r30, 0x6B	; 107
     52a:	f0 e0       	ldi	r31, 0x00	; 0
     52c:	80 81       	ld	r24, Z
     52e:	8c 60       	ori	r24, 0x0C	; 12
     530:	80 83       	st	Z, r24
     532:	08 95       	ret

00000534 <interruptPinB>:
}


// Joystick input handler
void interruptPinB(JoystickHandler *self) { 
     534:	cf 93       	push	r28
     536:	df 93       	push	r29
     538:	ec 01       	movw	r28, r24
    if((PINB & 0b10000000) >> 7 == 0){ //down press on joystick
     53a:	1f 99       	sbic	0x03, 7	; 3
     53c:	06 c0       	rjmp	.+12     	; 0x54a <interruptPinB+0x16>
        adjustFrequency(self->gui, -1);
     53e:	6f ef       	ldi	r22, 0xFF	; 255
     540:	7f ef       	ldi	r23, 0xFF	; 255
     542:	8c 81       	ldd	r24, Y+4	; 0x04
     544:	9d 81       	ldd	r25, Y+5	; 0x05
     546:	0e 94 06 02 	call	0x40c	; 0x40c <adjustFrequency>
    }

    if((PINB & 0b01000000) >> 6 == 0){ //up press on joystick
     54a:	1e 99       	sbic	0x03, 6	; 3
     54c:	06 c0       	rjmp	.+12     	; 0x55a <interruptPinB+0x26>
        adjustFrequency(self->gui, 1);
     54e:	61 e0       	ldi	r22, 0x01	; 1
     550:	70 e0       	ldi	r23, 0x00	; 0
     552:	8c 81       	ldd	r24, Y+4	; 0x04
     554:	9d 81       	ldd	r25, Y+5	; 0x05
     556:	0e 94 06 02 	call	0x40c	; 0x40c <adjustFrequency>
    }

    if((PINB & 0b00010000) >> 4 == 0){ //middle press
     55a:	1c 99       	sbic	0x03, 4	; 3
     55c:	04 c0       	rjmp	.+8      	; 0x566 <interruptPinB+0x32>
        saveRestore(self->gui);
     55e:	8c 81       	ldd	r24, Y+4	; 0x04
     560:	9d 81       	ldd	r25, Y+5	; 0x05
     562:	0e 94 40 02 	call	0x480	; 0x480 <saveRestore>
    }
}
     566:	df 91       	pop	r29
     568:	cf 91       	pop	r28
     56a:	08 95       	ret

0000056c <interruptPinE>:

void interruptPinE(JoystickHandler *self) {  
     56c:	cf 93       	push	r28
     56e:	df 93       	push	r29
     570:	ec 01       	movw	r28, r24
    if((PINE & 0b00000100) >> 2 == 0){ //left press
     572:	62 99       	sbic	0x0c, 2	; 12
     574:	04 c0       	rjmp	.+8      	; 0x57e <interruptPinE+0x12>
       swithToLeftGen(self->gui);
     576:	8c 81       	ldd	r24, Y+4	; 0x04
     578:	9d 81       	ldd	r25, Y+5	; 0x05
     57a:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <swithToLeftGen>
    }

    if((PINE & 0b00001000) >> 3 == 0){  //right press
     57e:	63 99       	sbic	0x0c, 3	; 12
     580:	04 c0       	rjmp	.+8      	; 0x58a <interruptPinE+0x1e>
       swithToRightGen(self->gui);
     582:	8c 81       	ldd	r24, Y+4	; 0x04
     584:	9d 81       	ldd	r25, Y+5	; 0x05
     586:	0e 94 00 02 	call	0x400	; 0x400 <swithToRightGen>
    }
     58a:	df 91       	pop	r29
     58c:	cf 91       	pop	r28
     58e:	08 95       	ret

00000590 <sysInit>:
GUI gui = initGUI(&gen1, &gen2);
JoystickHandler joystick = initJoystickHandler(&gui);

void sysInit(){
    // Clock Prescale Register "maximum speed"
	CLKPR = 0b10000000; // Clock Prescaler Change Enable
     590:	e1 e6       	ldi	r30, 0x61	; 97
     592:	f0 e0       	ldi	r31, 0x00	; 0
     594:	80 e8       	ldi	r24, 0x80	; 128
     596:	80 83       	st	Z, r24
	CLKPR = 0b00000000; // Set 0 for sysclock
     598:	10 82       	st	Z, r1
     59a:	08 95       	ret

0000059c <pinOutputInit>:
}

void pinOutputInit(){
    // Initialize Port E as output for PE4 and PE6
	DDRE |= (1 << PE4) | (1 << PE6);
     59c:	8d b1       	in	r24, 0x0d	; 13
     59e:	80 65       	ori	r24, 0x50	; 80
     5a0:	8d b9       	out	0x0d, r24	; 13
     5a2:	08 95       	ret

000005a4 <main>:
}


int main() {
    sysInit();
     5a4:	0e 94 c8 02 	call	0x590	; 0x590 <sysInit>
    pinOutputInit();
     5a8:	0e 94 ce 02 	call	0x59c	; 0x59c <pinOutputInit>
    joystickInit();
     5ac:	0e 94 86 02 	call	0x50c	; 0x50c <joystickInit>
    LCD_init();
     5b0:	0e 94 57 00 	call	0xae	; 0xae <LCD_init>
	//LCDDR0 = 0b01000100;
	//LCDDR0 = 0b01000100;
	
    // Instal interupt handler
    //when the joystick's vertical state changes
    INSTALL(&joystick, interruptPinB, IRQ_PCINT1);
     5b4:	42 e0       	ldi	r20, 0x02	; 2
     5b6:	6a e9       	ldi	r22, 0x9A	; 154
     5b8:	72 e0       	ldi	r23, 0x02	; 2
     5ba:	80 e5       	ldi	r24, 0x50	; 80
     5bc:	91 e0       	ldi	r25, 0x01	; 1
     5be:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <install>
    //when the joystick's horizontal (minus middle) state changes
    INSTALL(&joystick, interruptPinE, IRQ_PCINT0);
     5c2:	41 e0       	ldi	r20, 0x01	; 1
     5c4:	66 eb       	ldi	r22, 0xB6	; 182
     5c6:	72 e0       	ldi	r23, 0x02	; 2
     5c8:	80 e5       	ldi	r24, 0x50	; 80
     5ca:	91 e0       	ldi	r25, 0x01	; 1
     5cc:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <install>
    
    // Start kernel
    return TINYTIMBER(&gui, NULL, NULL);
     5d0:	40 e0       	ldi	r20, 0x00	; 0
     5d2:	50 e0       	ldi	r21, 0x00	; 0
     5d4:	60 e0       	ldi	r22, 0x00	; 0
     5d6:	70 e0       	ldi	r23, 0x00	; 0
     5d8:	86 e5       	ldi	r24, 0x56	; 86
     5da:	91 e0       	ldi	r25, 0x01	; 1
     5dc:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <tinytimber>
}
     5e0:	08 95       	ret

000005e2 <setFrequency>:
#include "PortWrite.h"
#include "TinyTimber.h"


void setFrequency(PulseGen *self, int freq) {
	self->frequency = freq;
     5e2:	fc 01       	movw	r30, r24
     5e4:	71 87       	std	Z+9, r23	; 0x09
     5e6:	60 87       	std	Z+8, r22	; 0x08
     5e8:	08 95       	ret

000005ea <save>:
    }
}

// Saves the freq
void save(PulseGen *self) {
	self->saved_freq = self->frequency;
     5ea:	fc 01       	movw	r30, r24
     5ec:	20 85       	ldd	r18, Z+8	; 0x08
     5ee:	31 85       	ldd	r19, Z+9	; 0x09
     5f0:	33 87       	std	Z+11, r19	; 0x0b
     5f2:	22 87       	std	Z+10, r18	; 0x0a
     5f4:	08 95       	ret

000005f6 <restore>:
}

// Restores freq to last saved
void restore(PulseGen *self) {
	self->frequency = self->saved_freq;
     5f6:	fc 01       	movw	r30, r24
     5f8:	22 85       	ldd	r18, Z+10	; 0x0a
     5fa:	33 85       	ldd	r19, Z+11	; 0x0b
     5fc:	31 87       	std	Z+9, r19	; 0x09
     5fe:	20 87       	std	Z+8, r18	; 0x08
     600:	08 95       	ret

00000602 <getFrequency>:
}

int getFrequency(PulseGen *self) {
	return self->frequency;
}
     602:	fc 01       	movw	r30, r24
     604:	80 85       	ldd	r24, Z+8	; 0x08
     606:	91 85       	ldd	r25, Z+9	; 0x09
     608:	08 95       	ret

0000060a <initialize>:
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
}
     60a:	cf 93       	push	r28
     60c:	df 93       	push	r29
     60e:	00 d0       	rcall	.+0      	; 0x610 <initialize+0x6>
     610:	00 d0       	rcall	.+0      	; 0x612 <initialize+0x8>
     612:	cd b7       	in	r28, 0x3d	; 61
     614:	de b7       	in	r29, 0x3e	; 62
     616:	8f e7       	ldi	r24, 0x7F	; 127
     618:	92 e0       	ldi	r25, 0x02	; 2
     61a:	2f e5       	ldi	r18, 0x5F	; 95
     61c:	33 e0       	ldi	r19, 0x03	; 3
     61e:	fc 01       	movw	r30, r24
     620:	70 97       	sbiw	r30, 0x10	; 16
     622:	91 83       	std	Z+1, r25	; 0x01
     624:	80 83       	st	Z, r24
     626:	40 96       	adiw	r24, 0x10	; 16
     628:	82 17       	cp	r24, r18
     62a:	93 07       	cpc	r25, r19
     62c:	c1 f7       	brne	.-16     	; 0x61e <initialize+0x14>
     62e:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <messages+0xe1>
     632:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <messages+0xe0>
     636:	ea eb       	ldi	r30, 0xBA	; 186
     638:	f1 e0       	ldi	r31, 0x01	; 1
     63a:	87 ed       	ldi	r24, 0xD7	; 215
     63c:	91 e0       	ldi	r25, 0x01	; 1
     63e:	91 83       	std	Z+1, r25	; 0x01
     640:	80 83       	st	Z, r24
     642:	84 ef       	ldi	r24, 0xF4	; 244
     644:	91 e0       	ldi	r25, 0x01	; 1
     646:	96 8f       	std	Z+30, r25	; 0x1e
     648:	85 8f       	std	Z+29, r24	; 0x1d
     64a:	a1 e1       	ldi	r26, 0x11	; 17
     64c:	b2 e0       	ldi	r27, 0x02	; 2
     64e:	b3 af       	std	Z+59, r27	; 0x3b
     650:	a2 af       	std	Z+58, r26	; 0x3a
     652:	1d 92       	st	X+, r1
     654:	1c 92       	st	X, r1
     656:	fa 83       	std	Y+2, r31	; 0x02
     658:	e9 83       	std	Y+1, r30	; 0x01
     65a:	eb eb       	ldi	r30, 0xBB	; 187
     65c:	f3 e0       	ldi	r31, 0x03	; 3
     65e:	fc 83       	std	Y+4, r31	; 0x04
     660:	eb 83       	std	Y+3, r30	; 0x03
     662:	89 81       	ldd	r24, Y+1	; 0x01
     664:	9a 81       	ldd	r25, Y+2	; 0x02
     666:	06 96       	adiw	r24, 0x06	; 6
     668:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <setjmp>
     66c:	8b 81       	ldd	r24, Y+3	; 0x03
     66e:	9c 81       	ldd	r25, Y+4	; 0x04
     670:	e9 81       	ldd	r30, Y+1	; 0x01
     672:	fa 81       	ldd	r31, Y+2	; 0x02
     674:	97 8b       	std	Z+23, r25	; 0x17
     676:	86 8b       	std	Z+22, r24	; 0x16
     678:	91 8f       	std	Z+25, r25	; 0x19
     67a:	80 8f       	std	Z+24, r24	; 0x18
     67c:	85 ea       	ldi	r24, 0xA5	; 165
     67e:	9e e0       	ldi	r25, 0x0E	; 14
     680:	94 8f       	std	Z+28, r25	; 0x1c
     682:	83 8f       	std	Z+27, r24	; 0x1b
     684:	15 82       	std	Z+5, r1	; 0x05
     686:	14 82       	std	Z+4, r1	; 0x04
     688:	7d 96       	adiw	r30, 0x1d	; 29
     68a:	fa 83       	std	Y+2, r31	; 0x02
     68c:	e9 83       	std	Y+1, r30	; 0x01
     68e:	eb 81       	ldd	r30, Y+3	; 0x03
     690:	fc 81       	ldd	r31, Y+4	; 0x04
     692:	e0 5a       	subi	r30, 0xA0	; 160
     694:	ff 4f       	sbci	r31, 0xFF	; 255
     696:	fc 83       	std	Y+4, r31	; 0x04
     698:	eb 83       	std	Y+3, r30	; 0x03
     69a:	89 81       	ldd	r24, Y+1	; 0x01
     69c:	9a 81       	ldd	r25, Y+2	; 0x02
     69e:	8e 52       	subi	r24, 0x2E	; 46
     6a0:	92 40       	sbci	r25, 0x02	; 2
     6a2:	f9 f6       	brne	.-66     	; 0x662 <initialize+0x58>
     6a4:	e2 e5       	ldi	r30, 0x52	; 82
     6a6:	f2 e0       	ldi	r31, 0x02	; 2
     6a8:	11 82       	std	Z+1, r1	; 0x01
     6aa:	10 82       	st	Z, r1
     6ac:	15 82       	std	Z+5, r1	; 0x05
     6ae:	14 82       	std	Z+4, r1	; 0x04
     6b0:	13 82       	std	Z+3, r1	; 0x03
     6b2:	12 82       	std	Z+2, r1	; 0x02
     6b4:	e1 e6       	ldi	r30, 0x61	; 97
     6b6:	f0 e0       	ldi	r31, 0x00	; 0
     6b8:	80 e8       	ldi	r24, 0x80	; 128
     6ba:	80 83       	st	Z, r24
     6bc:	10 82       	st	Z, r1
     6be:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     6c2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     6c6:	84 e0       	ldi	r24, 0x04	; 4
     6c8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     6cc:	81 e0       	ldi	r24, 0x01	; 1
     6ce:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
     6d2:	0f 90       	pop	r0
     6d4:	0f 90       	pop	r0
     6d6:	0f 90       	pop	r0
     6d8:	0f 90       	pop	r0
     6da:	df 91       	pop	r29
     6dc:	cf 91       	pop	r28
     6de:	08 95       	ret

000006e0 <dispatch>:
     6e0:	cf 93       	push	r28
     6e2:	df 93       	push	r29
     6e4:	00 d0       	rcall	.+0      	; 0x6e6 <dispatch+0x6>
     6e6:	cd b7       	in	r28, 0x3d	; 61
     6e8:	de b7       	in	r29, 0x3e	; 62
     6ea:	9a 83       	std	Y+2, r25	; 0x02
     6ec:	89 83       	std	Y+1, r24	; 0x01
     6ee:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <current>
     6f2:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <current+0x1>
     6f6:	06 96       	adiw	r24, 0x06	; 6
     6f8:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <setjmp>
     6fc:	89 2b       	or	r24, r25
     6fe:	59 f4       	brne	.+22     	; 0x716 <dispatch+0x36>
     700:	89 81       	ldd	r24, Y+1	; 0x01
     702:	9a 81       	ldd	r25, Y+2	; 0x02
     704:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <current+0x1>
     708:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <current>
     70c:	61 e0       	ldi	r22, 0x01	; 1
     70e:	70 e0       	ldi	r23, 0x00	; 0
     710:	06 96       	adiw	r24, 0x06	; 6
     712:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <longjmp>
     716:	0f 90       	pop	r0
     718:	0f 90       	pop	r0
     71a:	df 91       	pop	r29
     71c:	cf 91       	pop	r28
     71e:	08 95       	ret

00000720 <schedule>:
     720:	0f 93       	push	r16
     722:	1f 93       	push	r17
     724:	cf 93       	push	r28
     726:	df 93       	push	r29
     728:	e0 91 94 01 	lds	r30, 0x0194	; 0x800194 <msgQ>
     72c:	f0 91 95 01 	lds	r31, 0x0195	; 0x800195 <msgQ+0x1>
     730:	30 97       	sbiw	r30, 0x00	; 0
     732:	61 f1       	breq	.+88     	; 0x78c <schedule+0x6c>
     734:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <threadPool>
     738:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <threadPool+0x1>
     73c:	00 97       	sbiw	r24, 0x00	; 0
     73e:	31 f1       	breq	.+76     	; 0x78c <schedule+0x6c>
     740:	c0 91 7e 01 	lds	r28, 0x017E	; 0x80017e <activeStack>
     744:	d0 91 7f 01 	lds	r29, 0x017F	; 0x80017f <activeStack+0x1>
     748:	aa 81       	ldd	r26, Y+2	; 0x02
     74a:	bb 81       	ldd	r27, Y+3	; 0x03
     74c:	10 97       	sbiw	r26, 0x00	; 0
     74e:	79 f0       	breq	.+30     	; 0x76e <schedule+0x4e>
     750:	46 81       	ldd	r20, Z+6	; 0x06
     752:	57 81       	ldd	r21, Z+7	; 0x07
     754:	60 85       	ldd	r22, Z+8	; 0x08
     756:	71 85       	ldd	r23, Z+9	; 0x09
     758:	16 96       	adiw	r26, 0x06	; 6
     75a:	0d 91       	ld	r16, X+
     75c:	1d 91       	ld	r17, X+
     75e:	2d 91       	ld	r18, X+
     760:	3c 91       	ld	r19, X
     762:	19 97       	sbiw	r26, 0x09	; 9
     764:	40 1b       	sub	r20, r16
     766:	51 0b       	sbc	r21, r17
     768:	62 0b       	sbc	r22, r18
     76a:	73 0b       	sbc	r23, r19
     76c:	7a f4       	brpl	.+30     	; 0x78c <schedule+0x6c>
     76e:	fc 01       	movw	r30, r24
     770:	20 81       	ld	r18, Z
     772:	31 81       	ldd	r19, Z+1	; 0x01
     774:	30 93 81 01 	sts	0x0181, r19	; 0x800181 <threadPool+0x1>
     778:	20 93 80 01 	sts	0x0180, r18	; 0x800180 <threadPool>
     77c:	d1 83       	std	Z+1, r29	; 0x01
     77e:	c0 83       	st	Z, r28
     780:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <activeStack+0x1>
     784:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <activeStack>
     788:	0e 94 70 03 	call	0x6e0	; 0x6e0 <dispatch>
     78c:	df 91       	pop	r29
     78e:	cf 91       	pop	r28
     790:	1f 91       	pop	r17
     792:	0f 91       	pop	r16
     794:	08 95       	ret

00000796 <__vector_1>:
     796:	1f 92       	push	r1
     798:	0f 92       	push	r0
     79a:	0f b6       	in	r0, 0x3f	; 63
     79c:	0f 92       	push	r0
     79e:	11 24       	eor	r1, r1
     7a0:	2f 93       	push	r18
     7a2:	3f 93       	push	r19
     7a4:	4f 93       	push	r20
     7a6:	5f 93       	push	r21
     7a8:	6f 93       	push	r22
     7aa:	7f 93       	push	r23
     7ac:	8f 93       	push	r24
     7ae:	9f 93       	push	r25
     7b0:	af 93       	push	r26
     7b2:	bf 93       	push	r27
     7b4:	ef 93       	push	r30
     7b6:	ff 93       	push	r31
     7b8:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     7bc:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     7c0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     7c4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     7c8:	c9 01       	movw	r24, r18
     7ca:	03 2e       	mov	r0, r19
     7cc:	00 0c       	add	r0, r0
     7ce:	aa 0b       	sbc	r26, r26
     7d0:	bb 0b       	sbc	r27, r27
     7d2:	dc 01       	movw	r26, r24
     7d4:	99 27       	eor	r25, r25
     7d6:	88 27       	eor	r24, r24
     7d8:	60 e0       	ldi	r22, 0x00	; 0
     7da:	70 e0       	ldi	r23, 0x00	; 0
     7dc:	84 2b       	or	r24, r20
     7de:	95 2b       	or	r25, r21
     7e0:	a6 2b       	or	r26, r22
     7e2:	b7 2b       	or	r27, r23
     7e4:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     7e8:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     7ec:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     7f0:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     7f4:	b0 9b       	sbis	0x16, 0	; 22
     7f6:	1b c0       	rjmp	.+54     	; 0x82e <__vector_1+0x98>
     7f8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     7fc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     800:	c9 01       	movw	r24, r18
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	09 2e       	mov	r0, r25
     806:	00 0c       	add	r0, r0
     808:	aa 0b       	sbc	r26, r26
     80a:	bb 0b       	sbc	r27, r27
     80c:	dc 01       	movw	r26, r24
     80e:	99 27       	eor	r25, r25
     810:	88 27       	eor	r24, r24
     812:	60 e0       	ldi	r22, 0x00	; 0
     814:	70 e0       	ldi	r23, 0x00	; 0
     816:	84 2b       	or	r24, r20
     818:	95 2b       	or	r25, r21
     81a:	a6 2b       	or	r26, r22
     81c:	b7 2b       	or	r27, r23
     81e:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     822:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     826:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     82a:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     82e:	e0 91 2e 02 	lds	r30, 0x022E	; 0x80022e <mtable>
     832:	f0 91 2f 02 	lds	r31, 0x022F	; 0x80022f <mtable+0x1>
     836:	30 97       	sbiw	r30, 0x00	; 0
     838:	39 f0       	breq	.+14     	; 0x848 <__vector_1+0xb2>
     83a:	60 e0       	ldi	r22, 0x00	; 0
     83c:	70 e0       	ldi	r23, 0x00	; 0
     83e:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <otable>
     842:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <otable+0x1>
     846:	09 95       	icall
     848:	0e 94 90 03 	call	0x720	; 0x720 <schedule>
     84c:	ff 91       	pop	r31
     84e:	ef 91       	pop	r30
     850:	bf 91       	pop	r27
     852:	af 91       	pop	r26
     854:	9f 91       	pop	r25
     856:	8f 91       	pop	r24
     858:	7f 91       	pop	r23
     85a:	6f 91       	pop	r22
     85c:	5f 91       	pop	r21
     85e:	4f 91       	pop	r20
     860:	3f 91       	pop	r19
     862:	2f 91       	pop	r18
     864:	0f 90       	pop	r0
     866:	0f be       	out	0x3f, r0	; 63
     868:	0f 90       	pop	r0
     86a:	1f 90       	pop	r1
     86c:	18 95       	reti

0000086e <__vector_2>:
     86e:	1f 92       	push	r1
     870:	0f 92       	push	r0
     872:	0f b6       	in	r0, 0x3f	; 63
     874:	0f 92       	push	r0
     876:	11 24       	eor	r1, r1
     878:	2f 93       	push	r18
     87a:	3f 93       	push	r19
     87c:	4f 93       	push	r20
     87e:	5f 93       	push	r21
     880:	6f 93       	push	r22
     882:	7f 93       	push	r23
     884:	8f 93       	push	r24
     886:	9f 93       	push	r25
     888:	af 93       	push	r26
     88a:	bf 93       	push	r27
     88c:	ef 93       	push	r30
     88e:	ff 93       	push	r31
     890:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     894:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     898:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     89c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     8a0:	c9 01       	movw	r24, r18
     8a2:	03 2e       	mov	r0, r19
     8a4:	00 0c       	add	r0, r0
     8a6:	aa 0b       	sbc	r26, r26
     8a8:	bb 0b       	sbc	r27, r27
     8aa:	dc 01       	movw	r26, r24
     8ac:	99 27       	eor	r25, r25
     8ae:	88 27       	eor	r24, r24
     8b0:	60 e0       	ldi	r22, 0x00	; 0
     8b2:	70 e0       	ldi	r23, 0x00	; 0
     8b4:	84 2b       	or	r24, r20
     8b6:	95 2b       	or	r25, r21
     8b8:	a6 2b       	or	r26, r22
     8ba:	b7 2b       	or	r27, r23
     8bc:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     8c0:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     8c4:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     8c8:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     8cc:	b0 9b       	sbis	0x16, 0	; 22
     8ce:	1b c0       	rjmp	.+54     	; 0x906 <__vector_2+0x98>
     8d0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     8d4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     8d8:	c9 01       	movw	r24, r18
     8da:	01 96       	adiw	r24, 0x01	; 1
     8dc:	09 2e       	mov	r0, r25
     8de:	00 0c       	add	r0, r0
     8e0:	aa 0b       	sbc	r26, r26
     8e2:	bb 0b       	sbc	r27, r27
     8e4:	dc 01       	movw	r26, r24
     8e6:	99 27       	eor	r25, r25
     8e8:	88 27       	eor	r24, r24
     8ea:	60 e0       	ldi	r22, 0x00	; 0
     8ec:	70 e0       	ldi	r23, 0x00	; 0
     8ee:	84 2b       	or	r24, r20
     8f0:	95 2b       	or	r25, r21
     8f2:	a6 2b       	or	r26, r22
     8f4:	b7 2b       	or	r27, r23
     8f6:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     8fa:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     8fe:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     902:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     906:	e0 91 30 02 	lds	r30, 0x0230	; 0x800230 <mtable+0x2>
     90a:	f0 91 31 02 	lds	r31, 0x0231	; 0x800231 <mtable+0x3>
     90e:	30 97       	sbiw	r30, 0x00	; 0
     910:	39 f0       	breq	.+14     	; 0x920 <__vector_2+0xb2>
     912:	61 e0       	ldi	r22, 0x01	; 1
     914:	70 e0       	ldi	r23, 0x00	; 0
     916:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <otable+0x2>
     91a:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <otable+0x3>
     91e:	09 95       	icall
     920:	0e 94 90 03 	call	0x720	; 0x720 <schedule>
     924:	ff 91       	pop	r31
     926:	ef 91       	pop	r30
     928:	bf 91       	pop	r27
     92a:	af 91       	pop	r26
     92c:	9f 91       	pop	r25
     92e:	8f 91       	pop	r24
     930:	7f 91       	pop	r23
     932:	6f 91       	pop	r22
     934:	5f 91       	pop	r21
     936:	4f 91       	pop	r20
     938:	3f 91       	pop	r19
     93a:	2f 91       	pop	r18
     93c:	0f 90       	pop	r0
     93e:	0f be       	out	0x3f, r0	; 63
     940:	0f 90       	pop	r0
     942:	1f 90       	pop	r1
     944:	18 95       	reti

00000946 <__vector_3>:
     946:	1f 92       	push	r1
     948:	0f 92       	push	r0
     94a:	0f b6       	in	r0, 0x3f	; 63
     94c:	0f 92       	push	r0
     94e:	11 24       	eor	r1, r1
     950:	2f 93       	push	r18
     952:	3f 93       	push	r19
     954:	4f 93       	push	r20
     956:	5f 93       	push	r21
     958:	6f 93       	push	r22
     95a:	7f 93       	push	r23
     95c:	8f 93       	push	r24
     95e:	9f 93       	push	r25
     960:	af 93       	push	r26
     962:	bf 93       	push	r27
     964:	ef 93       	push	r30
     966:	ff 93       	push	r31
     968:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     96c:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     970:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     974:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     978:	c9 01       	movw	r24, r18
     97a:	03 2e       	mov	r0, r19
     97c:	00 0c       	add	r0, r0
     97e:	aa 0b       	sbc	r26, r26
     980:	bb 0b       	sbc	r27, r27
     982:	dc 01       	movw	r26, r24
     984:	99 27       	eor	r25, r25
     986:	88 27       	eor	r24, r24
     988:	60 e0       	ldi	r22, 0x00	; 0
     98a:	70 e0       	ldi	r23, 0x00	; 0
     98c:	84 2b       	or	r24, r20
     98e:	95 2b       	or	r25, r21
     990:	a6 2b       	or	r26, r22
     992:	b7 2b       	or	r27, r23
     994:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     998:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     99c:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     9a0:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     9a4:	b0 9b       	sbis	0x16, 0	; 22
     9a6:	1b c0       	rjmp	.+54     	; 0x9de <__vector_3+0x98>
     9a8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     9ac:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     9b0:	c9 01       	movw	r24, r18
     9b2:	01 96       	adiw	r24, 0x01	; 1
     9b4:	09 2e       	mov	r0, r25
     9b6:	00 0c       	add	r0, r0
     9b8:	aa 0b       	sbc	r26, r26
     9ba:	bb 0b       	sbc	r27, r27
     9bc:	dc 01       	movw	r26, r24
     9be:	99 27       	eor	r25, r25
     9c0:	88 27       	eor	r24, r24
     9c2:	60 e0       	ldi	r22, 0x00	; 0
     9c4:	70 e0       	ldi	r23, 0x00	; 0
     9c6:	84 2b       	or	r24, r20
     9c8:	95 2b       	or	r25, r21
     9ca:	a6 2b       	or	r26, r22
     9cc:	b7 2b       	or	r27, r23
     9ce:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     9d2:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     9d6:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     9da:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     9de:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <mtable+0x4>
     9e2:	f0 91 33 02 	lds	r31, 0x0233	; 0x800233 <mtable+0x5>
     9e6:	30 97       	sbiw	r30, 0x00	; 0
     9e8:	39 f0       	breq	.+14     	; 0x9f8 <__vector_3+0xb2>
     9ea:	62 e0       	ldi	r22, 0x02	; 2
     9ec:	70 e0       	ldi	r23, 0x00	; 0
     9ee:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <otable+0x4>
     9f2:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <otable+0x5>
     9f6:	09 95       	icall
     9f8:	0e 94 90 03 	call	0x720	; 0x720 <schedule>
     9fc:	ff 91       	pop	r31
     9fe:	ef 91       	pop	r30
     a00:	bf 91       	pop	r27
     a02:	af 91       	pop	r26
     a04:	9f 91       	pop	r25
     a06:	8f 91       	pop	r24
     a08:	7f 91       	pop	r23
     a0a:	6f 91       	pop	r22
     a0c:	5f 91       	pop	r21
     a0e:	4f 91       	pop	r20
     a10:	3f 91       	pop	r19
     a12:	2f 91       	pop	r18
     a14:	0f 90       	pop	r0
     a16:	0f be       	out	0x3f, r0	; 63
     a18:	0f 90       	pop	r0
     a1a:	1f 90       	pop	r1
     a1c:	18 95       	reti

00000a1e <__vector_4>:
     a1e:	1f 92       	push	r1
     a20:	0f 92       	push	r0
     a22:	0f b6       	in	r0, 0x3f	; 63
     a24:	0f 92       	push	r0
     a26:	11 24       	eor	r1, r1
     a28:	2f 93       	push	r18
     a2a:	3f 93       	push	r19
     a2c:	4f 93       	push	r20
     a2e:	5f 93       	push	r21
     a30:	6f 93       	push	r22
     a32:	7f 93       	push	r23
     a34:	8f 93       	push	r24
     a36:	9f 93       	push	r25
     a38:	af 93       	push	r26
     a3a:	bf 93       	push	r27
     a3c:	ef 93       	push	r30
     a3e:	ff 93       	push	r31
     a40:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     a44:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     a48:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     a4c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     a50:	c9 01       	movw	r24, r18
     a52:	03 2e       	mov	r0, r19
     a54:	00 0c       	add	r0, r0
     a56:	aa 0b       	sbc	r26, r26
     a58:	bb 0b       	sbc	r27, r27
     a5a:	dc 01       	movw	r26, r24
     a5c:	99 27       	eor	r25, r25
     a5e:	88 27       	eor	r24, r24
     a60:	60 e0       	ldi	r22, 0x00	; 0
     a62:	70 e0       	ldi	r23, 0x00	; 0
     a64:	84 2b       	or	r24, r20
     a66:	95 2b       	or	r25, r21
     a68:	a6 2b       	or	r26, r22
     a6a:	b7 2b       	or	r27, r23
     a6c:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     a70:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     a74:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     a78:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     a7c:	b0 9b       	sbis	0x16, 0	; 22
     a7e:	1b c0       	rjmp	.+54     	; 0xab6 <__vector_4+0x98>
     a80:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     a84:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     a88:	c9 01       	movw	r24, r18
     a8a:	01 96       	adiw	r24, 0x01	; 1
     a8c:	09 2e       	mov	r0, r25
     a8e:	00 0c       	add	r0, r0
     a90:	aa 0b       	sbc	r26, r26
     a92:	bb 0b       	sbc	r27, r27
     a94:	dc 01       	movw	r26, r24
     a96:	99 27       	eor	r25, r25
     a98:	88 27       	eor	r24, r24
     a9a:	60 e0       	ldi	r22, 0x00	; 0
     a9c:	70 e0       	ldi	r23, 0x00	; 0
     a9e:	84 2b       	or	r24, r20
     aa0:	95 2b       	or	r25, r21
     aa2:	a6 2b       	or	r26, r22
     aa4:	b7 2b       	or	r27, r23
     aa6:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     aaa:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     aae:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     ab2:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     ab6:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <mtable+0x6>
     aba:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <mtable+0x7>
     abe:	30 97       	sbiw	r30, 0x00	; 0
     ac0:	39 f0       	breq	.+14     	; 0xad0 <__vector_4+0xb2>
     ac2:	63 e0       	ldi	r22, 0x03	; 3
     ac4:	70 e0       	ldi	r23, 0x00	; 0
     ac6:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <otable+0x6>
     aca:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <otable+0x7>
     ace:	09 95       	icall
     ad0:	0e 94 90 03 	call	0x720	; 0x720 <schedule>
     ad4:	ff 91       	pop	r31
     ad6:	ef 91       	pop	r30
     ad8:	bf 91       	pop	r27
     ada:	af 91       	pop	r26
     adc:	9f 91       	pop	r25
     ade:	8f 91       	pop	r24
     ae0:	7f 91       	pop	r23
     ae2:	6f 91       	pop	r22
     ae4:	5f 91       	pop	r21
     ae6:	4f 91       	pop	r20
     ae8:	3f 91       	pop	r19
     aea:	2f 91       	pop	r18
     aec:	0f 90       	pop	r0
     aee:	0f be       	out	0x3f, r0	; 63
     af0:	0f 90       	pop	r0
     af2:	1f 90       	pop	r1
     af4:	18 95       	reti

00000af6 <__vector_5>:
     af6:	1f 92       	push	r1
     af8:	0f 92       	push	r0
     afa:	0f b6       	in	r0, 0x3f	; 63
     afc:	0f 92       	push	r0
     afe:	11 24       	eor	r1, r1
     b00:	2f 93       	push	r18
     b02:	3f 93       	push	r19
     b04:	4f 93       	push	r20
     b06:	5f 93       	push	r21
     b08:	6f 93       	push	r22
     b0a:	7f 93       	push	r23
     b0c:	8f 93       	push	r24
     b0e:	9f 93       	push	r25
     b10:	af 93       	push	r26
     b12:	bf 93       	push	r27
     b14:	ef 93       	push	r30
     b16:	ff 93       	push	r31
     b18:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     b1c:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     b20:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     b24:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     b28:	c9 01       	movw	r24, r18
     b2a:	03 2e       	mov	r0, r19
     b2c:	00 0c       	add	r0, r0
     b2e:	aa 0b       	sbc	r26, r26
     b30:	bb 0b       	sbc	r27, r27
     b32:	dc 01       	movw	r26, r24
     b34:	99 27       	eor	r25, r25
     b36:	88 27       	eor	r24, r24
     b38:	60 e0       	ldi	r22, 0x00	; 0
     b3a:	70 e0       	ldi	r23, 0x00	; 0
     b3c:	84 2b       	or	r24, r20
     b3e:	95 2b       	or	r25, r21
     b40:	a6 2b       	or	r26, r22
     b42:	b7 2b       	or	r27, r23
     b44:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     b48:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     b4c:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     b50:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     b54:	b0 9b       	sbis	0x16, 0	; 22
     b56:	1b c0       	rjmp	.+54     	; 0xb8e <__vector_5+0x98>
     b58:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     b5c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     b60:	c9 01       	movw	r24, r18
     b62:	01 96       	adiw	r24, 0x01	; 1
     b64:	09 2e       	mov	r0, r25
     b66:	00 0c       	add	r0, r0
     b68:	aa 0b       	sbc	r26, r26
     b6a:	bb 0b       	sbc	r27, r27
     b6c:	dc 01       	movw	r26, r24
     b6e:	99 27       	eor	r25, r25
     b70:	88 27       	eor	r24, r24
     b72:	60 e0       	ldi	r22, 0x00	; 0
     b74:	70 e0       	ldi	r23, 0x00	; 0
     b76:	84 2b       	or	r24, r20
     b78:	95 2b       	or	r25, r21
     b7a:	a6 2b       	or	r26, r22
     b7c:	b7 2b       	or	r27, r23
     b7e:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     b82:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     b86:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     b8a:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     b8e:	e0 91 36 02 	lds	r30, 0x0236	; 0x800236 <mtable+0x8>
     b92:	f0 91 37 02 	lds	r31, 0x0237	; 0x800237 <mtable+0x9>
     b96:	30 97       	sbiw	r30, 0x00	; 0
     b98:	39 f0       	breq	.+14     	; 0xba8 <__vector_5+0xb2>
     b9a:	64 e0       	ldi	r22, 0x04	; 4
     b9c:	70 e0       	ldi	r23, 0x00	; 0
     b9e:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <otable+0x8>
     ba2:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <otable+0x9>
     ba6:	09 95       	icall
     ba8:	0e 94 90 03 	call	0x720	; 0x720 <schedule>
     bac:	ff 91       	pop	r31
     bae:	ef 91       	pop	r30
     bb0:	bf 91       	pop	r27
     bb2:	af 91       	pop	r26
     bb4:	9f 91       	pop	r25
     bb6:	8f 91       	pop	r24
     bb8:	7f 91       	pop	r23
     bba:	6f 91       	pop	r22
     bbc:	5f 91       	pop	r21
     bbe:	4f 91       	pop	r20
     bc0:	3f 91       	pop	r19
     bc2:	2f 91       	pop	r18
     bc4:	0f 90       	pop	r0
     bc6:	0f be       	out	0x3f, r0	; 63
     bc8:	0f 90       	pop	r0
     bca:	1f 90       	pop	r1
     bcc:	18 95       	reti

00000bce <__vector_10>:
     bce:	1f 92       	push	r1
     bd0:	0f 92       	push	r0
     bd2:	0f b6       	in	r0, 0x3f	; 63
     bd4:	0f 92       	push	r0
     bd6:	11 24       	eor	r1, r1
     bd8:	2f 93       	push	r18
     bda:	3f 93       	push	r19
     bdc:	4f 93       	push	r20
     bde:	5f 93       	push	r21
     be0:	6f 93       	push	r22
     be2:	7f 93       	push	r23
     be4:	8f 93       	push	r24
     be6:	9f 93       	push	r25
     be8:	af 93       	push	r26
     bea:	bf 93       	push	r27
     bec:	ef 93       	push	r30
     bee:	ff 93       	push	r31
     bf0:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     bf4:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     bf8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     bfc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     c00:	c9 01       	movw	r24, r18
     c02:	03 2e       	mov	r0, r19
     c04:	00 0c       	add	r0, r0
     c06:	aa 0b       	sbc	r26, r26
     c08:	bb 0b       	sbc	r27, r27
     c0a:	dc 01       	movw	r26, r24
     c0c:	99 27       	eor	r25, r25
     c0e:	88 27       	eor	r24, r24
     c10:	60 e0       	ldi	r22, 0x00	; 0
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	84 2b       	or	r24, r20
     c16:	95 2b       	or	r25, r21
     c18:	a6 2b       	or	r26, r22
     c1a:	b7 2b       	or	r27, r23
     c1c:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     c20:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     c24:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     c28:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     c2c:	b0 9b       	sbis	0x16, 0	; 22
     c2e:	1b c0       	rjmp	.+54     	; 0xc66 <__vector_10+0x98>
     c30:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     c34:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     c38:	c9 01       	movw	r24, r18
     c3a:	01 96       	adiw	r24, 0x01	; 1
     c3c:	09 2e       	mov	r0, r25
     c3e:	00 0c       	add	r0, r0
     c40:	aa 0b       	sbc	r26, r26
     c42:	bb 0b       	sbc	r27, r27
     c44:	dc 01       	movw	r26, r24
     c46:	99 27       	eor	r25, r25
     c48:	88 27       	eor	r24, r24
     c4a:	60 e0       	ldi	r22, 0x00	; 0
     c4c:	70 e0       	ldi	r23, 0x00	; 0
     c4e:	84 2b       	or	r24, r20
     c50:	95 2b       	or	r25, r21
     c52:	a6 2b       	or	r26, r22
     c54:	b7 2b       	or	r27, r23
     c56:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     c5a:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     c5e:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     c62:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     c66:	e0 91 38 02 	lds	r30, 0x0238	; 0x800238 <mtable+0xa>
     c6a:	f0 91 39 02 	lds	r31, 0x0239	; 0x800239 <mtable+0xb>
     c6e:	30 97       	sbiw	r30, 0x00	; 0
     c70:	39 f0       	breq	.+14     	; 0xc80 <__vector_10+0xb2>
     c72:	65 e0       	ldi	r22, 0x05	; 5
     c74:	70 e0       	ldi	r23, 0x00	; 0
     c76:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <otable+0xa>
     c7a:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <otable+0xb>
     c7e:	09 95       	icall
     c80:	0e 94 90 03 	call	0x720	; 0x720 <schedule>
     c84:	ff 91       	pop	r31
     c86:	ef 91       	pop	r30
     c88:	bf 91       	pop	r27
     c8a:	af 91       	pop	r26
     c8c:	9f 91       	pop	r25
     c8e:	8f 91       	pop	r24
     c90:	7f 91       	pop	r23
     c92:	6f 91       	pop	r22
     c94:	5f 91       	pop	r21
     c96:	4f 91       	pop	r20
     c98:	3f 91       	pop	r19
     c9a:	2f 91       	pop	r18
     c9c:	0f 90       	pop	r0
     c9e:	0f be       	out	0x3f, r0	; 63
     ca0:	0f 90       	pop	r0
     ca2:	1f 90       	pop	r1
     ca4:	18 95       	reti

00000ca6 <__vector_11>:
     ca6:	1f 92       	push	r1
     ca8:	0f 92       	push	r0
     caa:	0f b6       	in	r0, 0x3f	; 63
     cac:	0f 92       	push	r0
     cae:	11 24       	eor	r1, r1
     cb0:	2f 93       	push	r18
     cb2:	3f 93       	push	r19
     cb4:	4f 93       	push	r20
     cb6:	5f 93       	push	r21
     cb8:	6f 93       	push	r22
     cba:	7f 93       	push	r23
     cbc:	8f 93       	push	r24
     cbe:	9f 93       	push	r25
     cc0:	af 93       	push	r26
     cc2:	bf 93       	push	r27
     cc4:	ef 93       	push	r30
     cc6:	ff 93       	push	r31
     cc8:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     ccc:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     cd0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     cd4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     cd8:	c9 01       	movw	r24, r18
     cda:	03 2e       	mov	r0, r19
     cdc:	00 0c       	add	r0, r0
     cde:	aa 0b       	sbc	r26, r26
     ce0:	bb 0b       	sbc	r27, r27
     ce2:	dc 01       	movw	r26, r24
     ce4:	99 27       	eor	r25, r25
     ce6:	88 27       	eor	r24, r24
     ce8:	60 e0       	ldi	r22, 0x00	; 0
     cea:	70 e0       	ldi	r23, 0x00	; 0
     cec:	84 2b       	or	r24, r20
     cee:	95 2b       	or	r25, r21
     cf0:	a6 2b       	or	r26, r22
     cf2:	b7 2b       	or	r27, r23
     cf4:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     cf8:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     cfc:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     d00:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     d04:	b0 9b       	sbis	0x16, 0	; 22
     d06:	1b c0       	rjmp	.+54     	; 0xd3e <__vector_11+0x98>
     d08:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     d0c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     d10:	c9 01       	movw	r24, r18
     d12:	01 96       	adiw	r24, 0x01	; 1
     d14:	09 2e       	mov	r0, r25
     d16:	00 0c       	add	r0, r0
     d18:	aa 0b       	sbc	r26, r26
     d1a:	bb 0b       	sbc	r27, r27
     d1c:	dc 01       	movw	r26, r24
     d1e:	99 27       	eor	r25, r25
     d20:	88 27       	eor	r24, r24
     d22:	60 e0       	ldi	r22, 0x00	; 0
     d24:	70 e0       	ldi	r23, 0x00	; 0
     d26:	84 2b       	or	r24, r20
     d28:	95 2b       	or	r25, r21
     d2a:	a6 2b       	or	r26, r22
     d2c:	b7 2b       	or	r27, r23
     d2e:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     d32:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     d36:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     d3a:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     d3e:	e0 91 3a 02 	lds	r30, 0x023A	; 0x80023a <mtable+0xc>
     d42:	f0 91 3b 02 	lds	r31, 0x023B	; 0x80023b <mtable+0xd>
     d46:	30 97       	sbiw	r30, 0x00	; 0
     d48:	39 f0       	breq	.+14     	; 0xd58 <__vector_11+0xb2>
     d4a:	66 e0       	ldi	r22, 0x06	; 6
     d4c:	70 e0       	ldi	r23, 0x00	; 0
     d4e:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <otable+0xc>
     d52:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <otable+0xd>
     d56:	09 95       	icall
     d58:	0e 94 90 03 	call	0x720	; 0x720 <schedule>
     d5c:	ff 91       	pop	r31
     d5e:	ef 91       	pop	r30
     d60:	bf 91       	pop	r27
     d62:	af 91       	pop	r26
     d64:	9f 91       	pop	r25
     d66:	8f 91       	pop	r24
     d68:	7f 91       	pop	r23
     d6a:	6f 91       	pop	r22
     d6c:	5f 91       	pop	r21
     d6e:	4f 91       	pop	r20
     d70:	3f 91       	pop	r19
     d72:	2f 91       	pop	r18
     d74:	0f 90       	pop	r0
     d76:	0f be       	out	0x3f, r0	; 63
     d78:	0f 90       	pop	r0
     d7a:	1f 90       	pop	r1
     d7c:	18 95       	reti

00000d7e <__vector_12>:
     d7e:	1f 92       	push	r1
     d80:	0f 92       	push	r0
     d82:	0f b6       	in	r0, 0x3f	; 63
     d84:	0f 92       	push	r0
     d86:	11 24       	eor	r1, r1
     d88:	2f 93       	push	r18
     d8a:	3f 93       	push	r19
     d8c:	4f 93       	push	r20
     d8e:	5f 93       	push	r21
     d90:	6f 93       	push	r22
     d92:	7f 93       	push	r23
     d94:	8f 93       	push	r24
     d96:	9f 93       	push	r25
     d98:	af 93       	push	r26
     d9a:	bf 93       	push	r27
     d9c:	ef 93       	push	r30
     d9e:	ff 93       	push	r31
     da0:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     da4:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     da8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     dac:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     db0:	c9 01       	movw	r24, r18
     db2:	03 2e       	mov	r0, r19
     db4:	00 0c       	add	r0, r0
     db6:	aa 0b       	sbc	r26, r26
     db8:	bb 0b       	sbc	r27, r27
     dba:	dc 01       	movw	r26, r24
     dbc:	99 27       	eor	r25, r25
     dbe:	88 27       	eor	r24, r24
     dc0:	60 e0       	ldi	r22, 0x00	; 0
     dc2:	70 e0       	ldi	r23, 0x00	; 0
     dc4:	84 2b       	or	r24, r20
     dc6:	95 2b       	or	r25, r21
     dc8:	a6 2b       	or	r26, r22
     dca:	b7 2b       	or	r27, r23
     dcc:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     dd0:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     dd4:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     dd8:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     ddc:	b0 9b       	sbis	0x16, 0	; 22
     dde:	1b c0       	rjmp	.+54     	; 0xe16 <__vector_12+0x98>
     de0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     de4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     de8:	c9 01       	movw	r24, r18
     dea:	01 96       	adiw	r24, 0x01	; 1
     dec:	09 2e       	mov	r0, r25
     dee:	00 0c       	add	r0, r0
     df0:	aa 0b       	sbc	r26, r26
     df2:	bb 0b       	sbc	r27, r27
     df4:	dc 01       	movw	r26, r24
     df6:	99 27       	eor	r25, r25
     df8:	88 27       	eor	r24, r24
     dfa:	60 e0       	ldi	r22, 0x00	; 0
     dfc:	70 e0       	ldi	r23, 0x00	; 0
     dfe:	84 2b       	or	r24, r20
     e00:	95 2b       	or	r25, r21
     e02:	a6 2b       	or	r26, r22
     e04:	b7 2b       	or	r27, r23
     e06:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     e0a:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     e0e:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     e12:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     e16:	e0 91 3c 02 	lds	r30, 0x023C	; 0x80023c <mtable+0xe>
     e1a:	f0 91 3d 02 	lds	r31, 0x023D	; 0x80023d <mtable+0xf>
     e1e:	30 97       	sbiw	r30, 0x00	; 0
     e20:	39 f0       	breq	.+14     	; 0xe30 <__vector_12+0xb2>
     e22:	67 e0       	ldi	r22, 0x07	; 7
     e24:	70 e0       	ldi	r23, 0x00	; 0
     e26:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <otable+0xe>
     e2a:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <otable+0xf>
     e2e:	09 95       	icall
     e30:	0e 94 90 03 	call	0x720	; 0x720 <schedule>
     e34:	ff 91       	pop	r31
     e36:	ef 91       	pop	r30
     e38:	bf 91       	pop	r27
     e3a:	af 91       	pop	r26
     e3c:	9f 91       	pop	r25
     e3e:	8f 91       	pop	r24
     e40:	7f 91       	pop	r23
     e42:	6f 91       	pop	r22
     e44:	5f 91       	pop	r21
     e46:	4f 91       	pop	r20
     e48:	3f 91       	pop	r19
     e4a:	2f 91       	pop	r18
     e4c:	0f 90       	pop	r0
     e4e:	0f be       	out	0x3f, r0	; 63
     e50:	0f 90       	pop	r0
     e52:	1f 90       	pop	r1
     e54:	18 95       	reti

00000e56 <__vector_13>:
     e56:	1f 92       	push	r1
     e58:	0f 92       	push	r0
     e5a:	0f b6       	in	r0, 0x3f	; 63
     e5c:	0f 92       	push	r0
     e5e:	11 24       	eor	r1, r1
     e60:	2f 93       	push	r18
     e62:	3f 93       	push	r19
     e64:	4f 93       	push	r20
     e66:	5f 93       	push	r21
     e68:	6f 93       	push	r22
     e6a:	7f 93       	push	r23
     e6c:	8f 93       	push	r24
     e6e:	9f 93       	push	r25
     e70:	af 93       	push	r26
     e72:	bf 93       	push	r27
     e74:	ef 93       	push	r30
     e76:	ff 93       	push	r31
     e78:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     e7c:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     e80:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     e84:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     e88:	c9 01       	movw	r24, r18
     e8a:	03 2e       	mov	r0, r19
     e8c:	00 0c       	add	r0, r0
     e8e:	aa 0b       	sbc	r26, r26
     e90:	bb 0b       	sbc	r27, r27
     e92:	dc 01       	movw	r26, r24
     e94:	99 27       	eor	r25, r25
     e96:	88 27       	eor	r24, r24
     e98:	60 e0       	ldi	r22, 0x00	; 0
     e9a:	70 e0       	ldi	r23, 0x00	; 0
     e9c:	84 2b       	or	r24, r20
     e9e:	95 2b       	or	r25, r21
     ea0:	a6 2b       	or	r26, r22
     ea2:	b7 2b       	or	r27, r23
     ea4:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     ea8:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     eac:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     eb0:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     eb4:	b0 9b       	sbis	0x16, 0	; 22
     eb6:	1b c0       	rjmp	.+54     	; 0xeee <__vector_13+0x98>
     eb8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     ebc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     ec0:	c9 01       	movw	r24, r18
     ec2:	01 96       	adiw	r24, 0x01	; 1
     ec4:	09 2e       	mov	r0, r25
     ec6:	00 0c       	add	r0, r0
     ec8:	aa 0b       	sbc	r26, r26
     eca:	bb 0b       	sbc	r27, r27
     ecc:	dc 01       	movw	r26, r24
     ece:	99 27       	eor	r25, r25
     ed0:	88 27       	eor	r24, r24
     ed2:	60 e0       	ldi	r22, 0x00	; 0
     ed4:	70 e0       	ldi	r23, 0x00	; 0
     ed6:	84 2b       	or	r24, r20
     ed8:	95 2b       	or	r25, r21
     eda:	a6 2b       	or	r26, r22
     edc:	b7 2b       	or	r27, r23
     ede:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     ee2:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     ee6:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     eea:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     eee:	e0 91 3e 02 	lds	r30, 0x023E	; 0x80023e <mtable+0x10>
     ef2:	f0 91 3f 02 	lds	r31, 0x023F	; 0x80023f <mtable+0x11>
     ef6:	30 97       	sbiw	r30, 0x00	; 0
     ef8:	39 f0       	breq	.+14     	; 0xf08 <__vector_13+0xb2>
     efa:	68 e0       	ldi	r22, 0x08	; 8
     efc:	70 e0       	ldi	r23, 0x00	; 0
     efe:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <otable+0x10>
     f02:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <otable+0x11>
     f06:	09 95       	icall
     f08:	0e 94 90 03 	call	0x720	; 0x720 <schedule>
     f0c:	ff 91       	pop	r31
     f0e:	ef 91       	pop	r30
     f10:	bf 91       	pop	r27
     f12:	af 91       	pop	r26
     f14:	9f 91       	pop	r25
     f16:	8f 91       	pop	r24
     f18:	7f 91       	pop	r23
     f1a:	6f 91       	pop	r22
     f1c:	5f 91       	pop	r21
     f1e:	4f 91       	pop	r20
     f20:	3f 91       	pop	r19
     f22:	2f 91       	pop	r18
     f24:	0f 90       	pop	r0
     f26:	0f be       	out	0x3f, r0	; 63
     f28:	0f 90       	pop	r0
     f2a:	1f 90       	pop	r1
     f2c:	18 95       	reti

00000f2e <__vector_14>:
     f2e:	1f 92       	push	r1
     f30:	0f 92       	push	r0
     f32:	0f b6       	in	r0, 0x3f	; 63
     f34:	0f 92       	push	r0
     f36:	11 24       	eor	r1, r1
     f38:	2f 93       	push	r18
     f3a:	3f 93       	push	r19
     f3c:	4f 93       	push	r20
     f3e:	5f 93       	push	r21
     f40:	6f 93       	push	r22
     f42:	7f 93       	push	r23
     f44:	8f 93       	push	r24
     f46:	9f 93       	push	r25
     f48:	af 93       	push	r26
     f4a:	bf 93       	push	r27
     f4c:	ef 93       	push	r30
     f4e:	ff 93       	push	r31
     f50:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     f54:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     f58:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     f5c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     f60:	c9 01       	movw	r24, r18
     f62:	03 2e       	mov	r0, r19
     f64:	00 0c       	add	r0, r0
     f66:	aa 0b       	sbc	r26, r26
     f68:	bb 0b       	sbc	r27, r27
     f6a:	dc 01       	movw	r26, r24
     f6c:	99 27       	eor	r25, r25
     f6e:	88 27       	eor	r24, r24
     f70:	60 e0       	ldi	r22, 0x00	; 0
     f72:	70 e0       	ldi	r23, 0x00	; 0
     f74:	84 2b       	or	r24, r20
     f76:	95 2b       	or	r25, r21
     f78:	a6 2b       	or	r26, r22
     f7a:	b7 2b       	or	r27, r23
     f7c:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     f80:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     f84:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     f88:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     f8c:	b0 9b       	sbis	0x16, 0	; 22
     f8e:	1b c0       	rjmp	.+54     	; 0xfc6 <__vector_14+0x98>
     f90:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     f94:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     f98:	c9 01       	movw	r24, r18
     f9a:	01 96       	adiw	r24, 0x01	; 1
     f9c:	09 2e       	mov	r0, r25
     f9e:	00 0c       	add	r0, r0
     fa0:	aa 0b       	sbc	r26, r26
     fa2:	bb 0b       	sbc	r27, r27
     fa4:	dc 01       	movw	r26, r24
     fa6:	99 27       	eor	r25, r25
     fa8:	88 27       	eor	r24, r24
     faa:	60 e0       	ldi	r22, 0x00	; 0
     fac:	70 e0       	ldi	r23, 0x00	; 0
     fae:	84 2b       	or	r24, r20
     fb0:	95 2b       	or	r25, r21
     fb2:	a6 2b       	or	r26, r22
     fb4:	b7 2b       	or	r27, r23
     fb6:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     fba:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     fbe:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     fc2:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     fc6:	e0 91 40 02 	lds	r30, 0x0240	; 0x800240 <mtable+0x12>
     fca:	f0 91 41 02 	lds	r31, 0x0241	; 0x800241 <mtable+0x13>
     fce:	30 97       	sbiw	r30, 0x00	; 0
     fd0:	39 f0       	breq	.+14     	; 0xfe0 <__vector_14+0xb2>
     fd2:	69 e0       	ldi	r22, 0x09	; 9
     fd4:	70 e0       	ldi	r23, 0x00	; 0
     fd6:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <otable+0x12>
     fda:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <otable+0x13>
     fde:	09 95       	icall
     fe0:	0e 94 90 03 	call	0x720	; 0x720 <schedule>
     fe4:	ff 91       	pop	r31
     fe6:	ef 91       	pop	r30
     fe8:	bf 91       	pop	r27
     fea:	af 91       	pop	r26
     fec:	9f 91       	pop	r25
     fee:	8f 91       	pop	r24
     ff0:	7f 91       	pop	r23
     ff2:	6f 91       	pop	r22
     ff4:	5f 91       	pop	r21
     ff6:	4f 91       	pop	r20
     ff8:	3f 91       	pop	r19
     ffa:	2f 91       	pop	r18
     ffc:	0f 90       	pop	r0
     ffe:	0f be       	out	0x3f, r0	; 63
    1000:	0f 90       	pop	r0
    1002:	1f 90       	pop	r1
    1004:	18 95       	reti

00001006 <__vector_15>:
    1006:	1f 92       	push	r1
    1008:	0f 92       	push	r0
    100a:	0f b6       	in	r0, 0x3f	; 63
    100c:	0f 92       	push	r0
    100e:	11 24       	eor	r1, r1
    1010:	2f 93       	push	r18
    1012:	3f 93       	push	r19
    1014:	4f 93       	push	r20
    1016:	5f 93       	push	r21
    1018:	6f 93       	push	r22
    101a:	7f 93       	push	r23
    101c:	8f 93       	push	r24
    101e:	9f 93       	push	r25
    1020:	af 93       	push	r26
    1022:	bf 93       	push	r27
    1024:	ef 93       	push	r30
    1026:	ff 93       	push	r31
    1028:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    102c:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    1030:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1034:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1038:	c9 01       	movw	r24, r18
    103a:	03 2e       	mov	r0, r19
    103c:	00 0c       	add	r0, r0
    103e:	aa 0b       	sbc	r26, r26
    1040:	bb 0b       	sbc	r27, r27
    1042:	dc 01       	movw	r26, r24
    1044:	99 27       	eor	r25, r25
    1046:	88 27       	eor	r24, r24
    1048:	60 e0       	ldi	r22, 0x00	; 0
    104a:	70 e0       	ldi	r23, 0x00	; 0
    104c:	84 2b       	or	r24, r20
    104e:	95 2b       	or	r25, r21
    1050:	a6 2b       	or	r26, r22
    1052:	b7 2b       	or	r27, r23
    1054:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    1058:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    105c:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    1060:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    1064:	b0 9b       	sbis	0x16, 0	; 22
    1066:	1b c0       	rjmp	.+54     	; 0x109e <__vector_15+0x98>
    1068:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    106c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1070:	c9 01       	movw	r24, r18
    1072:	01 96       	adiw	r24, 0x01	; 1
    1074:	09 2e       	mov	r0, r25
    1076:	00 0c       	add	r0, r0
    1078:	aa 0b       	sbc	r26, r26
    107a:	bb 0b       	sbc	r27, r27
    107c:	dc 01       	movw	r26, r24
    107e:	99 27       	eor	r25, r25
    1080:	88 27       	eor	r24, r24
    1082:	60 e0       	ldi	r22, 0x00	; 0
    1084:	70 e0       	ldi	r23, 0x00	; 0
    1086:	84 2b       	or	r24, r20
    1088:	95 2b       	or	r25, r21
    108a:	a6 2b       	or	r26, r22
    108c:	b7 2b       	or	r27, r23
    108e:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    1092:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    1096:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    109a:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    109e:	e0 91 42 02 	lds	r30, 0x0242	; 0x800242 <mtable+0x14>
    10a2:	f0 91 43 02 	lds	r31, 0x0243	; 0x800243 <mtable+0x15>
    10a6:	30 97       	sbiw	r30, 0x00	; 0
    10a8:	39 f0       	breq	.+14     	; 0x10b8 <__vector_15+0xb2>
    10aa:	6a e0       	ldi	r22, 0x0A	; 10
    10ac:	70 e0       	ldi	r23, 0x00	; 0
    10ae:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <otable+0x14>
    10b2:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <otable+0x15>
    10b6:	09 95       	icall
    10b8:	0e 94 90 03 	call	0x720	; 0x720 <schedule>
    10bc:	ff 91       	pop	r31
    10be:	ef 91       	pop	r30
    10c0:	bf 91       	pop	r27
    10c2:	af 91       	pop	r26
    10c4:	9f 91       	pop	r25
    10c6:	8f 91       	pop	r24
    10c8:	7f 91       	pop	r23
    10ca:	6f 91       	pop	r22
    10cc:	5f 91       	pop	r21
    10ce:	4f 91       	pop	r20
    10d0:	3f 91       	pop	r19
    10d2:	2f 91       	pop	r18
    10d4:	0f 90       	pop	r0
    10d6:	0f be       	out	0x3f, r0	; 63
    10d8:	0f 90       	pop	r0
    10da:	1f 90       	pop	r1
    10dc:	18 95       	reti

000010de <__vector_16>:
    10de:	1f 92       	push	r1
    10e0:	0f 92       	push	r0
    10e2:	0f b6       	in	r0, 0x3f	; 63
    10e4:	0f 92       	push	r0
    10e6:	11 24       	eor	r1, r1
    10e8:	2f 93       	push	r18
    10ea:	3f 93       	push	r19
    10ec:	4f 93       	push	r20
    10ee:	5f 93       	push	r21
    10f0:	6f 93       	push	r22
    10f2:	7f 93       	push	r23
    10f4:	8f 93       	push	r24
    10f6:	9f 93       	push	r25
    10f8:	af 93       	push	r26
    10fa:	bf 93       	push	r27
    10fc:	ef 93       	push	r30
    10fe:	ff 93       	push	r31
    1100:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    1104:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    1108:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    110c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1110:	c9 01       	movw	r24, r18
    1112:	03 2e       	mov	r0, r19
    1114:	00 0c       	add	r0, r0
    1116:	aa 0b       	sbc	r26, r26
    1118:	bb 0b       	sbc	r27, r27
    111a:	dc 01       	movw	r26, r24
    111c:	99 27       	eor	r25, r25
    111e:	88 27       	eor	r24, r24
    1120:	60 e0       	ldi	r22, 0x00	; 0
    1122:	70 e0       	ldi	r23, 0x00	; 0
    1124:	84 2b       	or	r24, r20
    1126:	95 2b       	or	r25, r21
    1128:	a6 2b       	or	r26, r22
    112a:	b7 2b       	or	r27, r23
    112c:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    1130:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    1134:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    1138:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    113c:	b0 9b       	sbis	0x16, 0	; 22
    113e:	1b c0       	rjmp	.+54     	; 0x1176 <__vector_16+0x98>
    1140:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1144:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1148:	c9 01       	movw	r24, r18
    114a:	01 96       	adiw	r24, 0x01	; 1
    114c:	09 2e       	mov	r0, r25
    114e:	00 0c       	add	r0, r0
    1150:	aa 0b       	sbc	r26, r26
    1152:	bb 0b       	sbc	r27, r27
    1154:	dc 01       	movw	r26, r24
    1156:	99 27       	eor	r25, r25
    1158:	88 27       	eor	r24, r24
    115a:	60 e0       	ldi	r22, 0x00	; 0
    115c:	70 e0       	ldi	r23, 0x00	; 0
    115e:	84 2b       	or	r24, r20
    1160:	95 2b       	or	r25, r21
    1162:	a6 2b       	or	r26, r22
    1164:	b7 2b       	or	r27, r23
    1166:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    116a:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    116e:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    1172:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    1176:	e0 91 44 02 	lds	r30, 0x0244	; 0x800244 <mtable+0x16>
    117a:	f0 91 45 02 	lds	r31, 0x0245	; 0x800245 <mtable+0x17>
    117e:	30 97       	sbiw	r30, 0x00	; 0
    1180:	39 f0       	breq	.+14     	; 0x1190 <__vector_16+0xb2>
    1182:	6b e0       	ldi	r22, 0x0B	; 11
    1184:	70 e0       	ldi	r23, 0x00	; 0
    1186:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <otable+0x16>
    118a:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <otable+0x17>
    118e:	09 95       	icall
    1190:	0e 94 90 03 	call	0x720	; 0x720 <schedule>
    1194:	ff 91       	pop	r31
    1196:	ef 91       	pop	r30
    1198:	bf 91       	pop	r27
    119a:	af 91       	pop	r26
    119c:	9f 91       	pop	r25
    119e:	8f 91       	pop	r24
    11a0:	7f 91       	pop	r23
    11a2:	6f 91       	pop	r22
    11a4:	5f 91       	pop	r21
    11a6:	4f 91       	pop	r20
    11a8:	3f 91       	pop	r19
    11aa:	2f 91       	pop	r18
    11ac:	0f 90       	pop	r0
    11ae:	0f be       	out	0x3f, r0	; 63
    11b0:	0f 90       	pop	r0
    11b2:	1f 90       	pop	r1
    11b4:	18 95       	reti

000011b6 <__vector_17>:
    11b6:	1f 92       	push	r1
    11b8:	0f 92       	push	r0
    11ba:	0f b6       	in	r0, 0x3f	; 63
    11bc:	0f 92       	push	r0
    11be:	11 24       	eor	r1, r1
    11c0:	2f 93       	push	r18
    11c2:	3f 93       	push	r19
    11c4:	4f 93       	push	r20
    11c6:	5f 93       	push	r21
    11c8:	6f 93       	push	r22
    11ca:	7f 93       	push	r23
    11cc:	8f 93       	push	r24
    11ce:	9f 93       	push	r25
    11d0:	af 93       	push	r26
    11d2:	bf 93       	push	r27
    11d4:	ef 93       	push	r30
    11d6:	ff 93       	push	r31
    11d8:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    11dc:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    11e0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    11e4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    11e8:	c9 01       	movw	r24, r18
    11ea:	03 2e       	mov	r0, r19
    11ec:	00 0c       	add	r0, r0
    11ee:	aa 0b       	sbc	r26, r26
    11f0:	bb 0b       	sbc	r27, r27
    11f2:	dc 01       	movw	r26, r24
    11f4:	99 27       	eor	r25, r25
    11f6:	88 27       	eor	r24, r24
    11f8:	60 e0       	ldi	r22, 0x00	; 0
    11fa:	70 e0       	ldi	r23, 0x00	; 0
    11fc:	84 2b       	or	r24, r20
    11fe:	95 2b       	or	r25, r21
    1200:	a6 2b       	or	r26, r22
    1202:	b7 2b       	or	r27, r23
    1204:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    1208:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    120c:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    1210:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    1214:	b0 9b       	sbis	0x16, 0	; 22
    1216:	1b c0       	rjmp	.+54     	; 0x124e <__vector_17+0x98>
    1218:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    121c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1220:	c9 01       	movw	r24, r18
    1222:	01 96       	adiw	r24, 0x01	; 1
    1224:	09 2e       	mov	r0, r25
    1226:	00 0c       	add	r0, r0
    1228:	aa 0b       	sbc	r26, r26
    122a:	bb 0b       	sbc	r27, r27
    122c:	dc 01       	movw	r26, r24
    122e:	99 27       	eor	r25, r25
    1230:	88 27       	eor	r24, r24
    1232:	60 e0       	ldi	r22, 0x00	; 0
    1234:	70 e0       	ldi	r23, 0x00	; 0
    1236:	84 2b       	or	r24, r20
    1238:	95 2b       	or	r25, r21
    123a:	a6 2b       	or	r26, r22
    123c:	b7 2b       	or	r27, r23
    123e:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    1242:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    1246:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    124a:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    124e:	e0 91 46 02 	lds	r30, 0x0246	; 0x800246 <mtable+0x18>
    1252:	f0 91 47 02 	lds	r31, 0x0247	; 0x800247 <mtable+0x19>
    1256:	30 97       	sbiw	r30, 0x00	; 0
    1258:	39 f0       	breq	.+14     	; 0x1268 <__vector_17+0xb2>
    125a:	6c e0       	ldi	r22, 0x0C	; 12
    125c:	70 e0       	ldi	r23, 0x00	; 0
    125e:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <otable+0x18>
    1262:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <otable+0x19>
    1266:	09 95       	icall
    1268:	0e 94 90 03 	call	0x720	; 0x720 <schedule>
    126c:	ff 91       	pop	r31
    126e:	ef 91       	pop	r30
    1270:	bf 91       	pop	r27
    1272:	af 91       	pop	r26
    1274:	9f 91       	pop	r25
    1276:	8f 91       	pop	r24
    1278:	7f 91       	pop	r23
    127a:	6f 91       	pop	r22
    127c:	5f 91       	pop	r21
    127e:	4f 91       	pop	r20
    1280:	3f 91       	pop	r19
    1282:	2f 91       	pop	r18
    1284:	0f 90       	pop	r0
    1286:	0f be       	out	0x3f, r0	; 63
    1288:	0f 90       	pop	r0
    128a:	1f 90       	pop	r1
    128c:	18 95       	reti

0000128e <__vector_18>:
    128e:	1f 92       	push	r1
    1290:	0f 92       	push	r0
    1292:	0f b6       	in	r0, 0x3f	; 63
    1294:	0f 92       	push	r0
    1296:	11 24       	eor	r1, r1
    1298:	2f 93       	push	r18
    129a:	3f 93       	push	r19
    129c:	4f 93       	push	r20
    129e:	5f 93       	push	r21
    12a0:	6f 93       	push	r22
    12a2:	7f 93       	push	r23
    12a4:	8f 93       	push	r24
    12a6:	9f 93       	push	r25
    12a8:	af 93       	push	r26
    12aa:	bf 93       	push	r27
    12ac:	ef 93       	push	r30
    12ae:	ff 93       	push	r31
    12b0:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    12b4:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    12b8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    12bc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    12c0:	c9 01       	movw	r24, r18
    12c2:	03 2e       	mov	r0, r19
    12c4:	00 0c       	add	r0, r0
    12c6:	aa 0b       	sbc	r26, r26
    12c8:	bb 0b       	sbc	r27, r27
    12ca:	dc 01       	movw	r26, r24
    12cc:	99 27       	eor	r25, r25
    12ce:	88 27       	eor	r24, r24
    12d0:	60 e0       	ldi	r22, 0x00	; 0
    12d2:	70 e0       	ldi	r23, 0x00	; 0
    12d4:	84 2b       	or	r24, r20
    12d6:	95 2b       	or	r25, r21
    12d8:	a6 2b       	or	r26, r22
    12da:	b7 2b       	or	r27, r23
    12dc:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    12e0:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    12e4:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    12e8:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    12ec:	b0 9b       	sbis	0x16, 0	; 22
    12ee:	1b c0       	rjmp	.+54     	; 0x1326 <__vector_18+0x98>
    12f0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    12f4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    12f8:	c9 01       	movw	r24, r18
    12fa:	01 96       	adiw	r24, 0x01	; 1
    12fc:	09 2e       	mov	r0, r25
    12fe:	00 0c       	add	r0, r0
    1300:	aa 0b       	sbc	r26, r26
    1302:	bb 0b       	sbc	r27, r27
    1304:	dc 01       	movw	r26, r24
    1306:	99 27       	eor	r25, r25
    1308:	88 27       	eor	r24, r24
    130a:	60 e0       	ldi	r22, 0x00	; 0
    130c:	70 e0       	ldi	r23, 0x00	; 0
    130e:	84 2b       	or	r24, r20
    1310:	95 2b       	or	r25, r21
    1312:	a6 2b       	or	r26, r22
    1314:	b7 2b       	or	r27, r23
    1316:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    131a:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    131e:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    1322:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    1326:	e0 91 48 02 	lds	r30, 0x0248	; 0x800248 <mtable+0x1a>
    132a:	f0 91 49 02 	lds	r31, 0x0249	; 0x800249 <mtable+0x1b>
    132e:	30 97       	sbiw	r30, 0x00	; 0
    1330:	39 f0       	breq	.+14     	; 0x1340 <__vector_18+0xb2>
    1332:	6d e0       	ldi	r22, 0x0D	; 13
    1334:	70 e0       	ldi	r23, 0x00	; 0
    1336:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <otable+0x1a>
    133a:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <otable+0x1b>
    133e:	09 95       	icall
    1340:	0e 94 90 03 	call	0x720	; 0x720 <schedule>
    1344:	ff 91       	pop	r31
    1346:	ef 91       	pop	r30
    1348:	bf 91       	pop	r27
    134a:	af 91       	pop	r26
    134c:	9f 91       	pop	r25
    134e:	8f 91       	pop	r24
    1350:	7f 91       	pop	r23
    1352:	6f 91       	pop	r22
    1354:	5f 91       	pop	r21
    1356:	4f 91       	pop	r20
    1358:	3f 91       	pop	r19
    135a:	2f 91       	pop	r18
    135c:	0f 90       	pop	r0
    135e:	0f be       	out	0x3f, r0	; 63
    1360:	0f 90       	pop	r0
    1362:	1f 90       	pop	r1
    1364:	18 95       	reti

00001366 <__vector_19>:
    1366:	1f 92       	push	r1
    1368:	0f 92       	push	r0
    136a:	0f b6       	in	r0, 0x3f	; 63
    136c:	0f 92       	push	r0
    136e:	11 24       	eor	r1, r1
    1370:	2f 93       	push	r18
    1372:	3f 93       	push	r19
    1374:	4f 93       	push	r20
    1376:	5f 93       	push	r21
    1378:	6f 93       	push	r22
    137a:	7f 93       	push	r23
    137c:	8f 93       	push	r24
    137e:	9f 93       	push	r25
    1380:	af 93       	push	r26
    1382:	bf 93       	push	r27
    1384:	ef 93       	push	r30
    1386:	ff 93       	push	r31
    1388:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    138c:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    1390:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1394:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1398:	c9 01       	movw	r24, r18
    139a:	03 2e       	mov	r0, r19
    139c:	00 0c       	add	r0, r0
    139e:	aa 0b       	sbc	r26, r26
    13a0:	bb 0b       	sbc	r27, r27
    13a2:	dc 01       	movw	r26, r24
    13a4:	99 27       	eor	r25, r25
    13a6:	88 27       	eor	r24, r24
    13a8:	60 e0       	ldi	r22, 0x00	; 0
    13aa:	70 e0       	ldi	r23, 0x00	; 0
    13ac:	84 2b       	or	r24, r20
    13ae:	95 2b       	or	r25, r21
    13b0:	a6 2b       	or	r26, r22
    13b2:	b7 2b       	or	r27, r23
    13b4:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    13b8:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    13bc:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    13c0:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    13c4:	b0 9b       	sbis	0x16, 0	; 22
    13c6:	1b c0       	rjmp	.+54     	; 0x13fe <__vector_19+0x98>
    13c8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    13cc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    13d0:	c9 01       	movw	r24, r18
    13d2:	01 96       	adiw	r24, 0x01	; 1
    13d4:	09 2e       	mov	r0, r25
    13d6:	00 0c       	add	r0, r0
    13d8:	aa 0b       	sbc	r26, r26
    13da:	bb 0b       	sbc	r27, r27
    13dc:	dc 01       	movw	r26, r24
    13de:	99 27       	eor	r25, r25
    13e0:	88 27       	eor	r24, r24
    13e2:	60 e0       	ldi	r22, 0x00	; 0
    13e4:	70 e0       	ldi	r23, 0x00	; 0
    13e6:	84 2b       	or	r24, r20
    13e8:	95 2b       	or	r25, r21
    13ea:	a6 2b       	or	r26, r22
    13ec:	b7 2b       	or	r27, r23
    13ee:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    13f2:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    13f6:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    13fa:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    13fe:	e0 91 4a 02 	lds	r30, 0x024A	; 0x80024a <mtable+0x1c>
    1402:	f0 91 4b 02 	lds	r31, 0x024B	; 0x80024b <mtable+0x1d>
    1406:	30 97       	sbiw	r30, 0x00	; 0
    1408:	39 f0       	breq	.+14     	; 0x1418 <__vector_19+0xb2>
    140a:	6e e0       	ldi	r22, 0x0E	; 14
    140c:	70 e0       	ldi	r23, 0x00	; 0
    140e:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <otable+0x1c>
    1412:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <otable+0x1d>
    1416:	09 95       	icall
    1418:	0e 94 90 03 	call	0x720	; 0x720 <schedule>
    141c:	ff 91       	pop	r31
    141e:	ef 91       	pop	r30
    1420:	bf 91       	pop	r27
    1422:	af 91       	pop	r26
    1424:	9f 91       	pop	r25
    1426:	8f 91       	pop	r24
    1428:	7f 91       	pop	r23
    142a:	6f 91       	pop	r22
    142c:	5f 91       	pop	r21
    142e:	4f 91       	pop	r20
    1430:	3f 91       	pop	r19
    1432:	2f 91       	pop	r18
    1434:	0f 90       	pop	r0
    1436:	0f be       	out	0x3f, r0	; 63
    1438:	0f 90       	pop	r0
    143a:	1f 90       	pop	r1
    143c:	18 95       	reti

0000143e <__vector_20>:
    143e:	1f 92       	push	r1
    1440:	0f 92       	push	r0
    1442:	0f b6       	in	r0, 0x3f	; 63
    1444:	0f 92       	push	r0
    1446:	11 24       	eor	r1, r1
    1448:	2f 93       	push	r18
    144a:	3f 93       	push	r19
    144c:	4f 93       	push	r20
    144e:	5f 93       	push	r21
    1450:	6f 93       	push	r22
    1452:	7f 93       	push	r23
    1454:	8f 93       	push	r24
    1456:	9f 93       	push	r25
    1458:	af 93       	push	r26
    145a:	bf 93       	push	r27
    145c:	ef 93       	push	r30
    145e:	ff 93       	push	r31
    1460:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    1464:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    1468:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    146c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1470:	c9 01       	movw	r24, r18
    1472:	03 2e       	mov	r0, r19
    1474:	00 0c       	add	r0, r0
    1476:	aa 0b       	sbc	r26, r26
    1478:	bb 0b       	sbc	r27, r27
    147a:	dc 01       	movw	r26, r24
    147c:	99 27       	eor	r25, r25
    147e:	88 27       	eor	r24, r24
    1480:	60 e0       	ldi	r22, 0x00	; 0
    1482:	70 e0       	ldi	r23, 0x00	; 0
    1484:	84 2b       	or	r24, r20
    1486:	95 2b       	or	r25, r21
    1488:	a6 2b       	or	r26, r22
    148a:	b7 2b       	or	r27, r23
    148c:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    1490:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    1494:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    1498:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    149c:	b0 9b       	sbis	0x16, 0	; 22
    149e:	1b c0       	rjmp	.+54     	; 0x14d6 <__vector_20+0x98>
    14a0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    14a4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    14a8:	c9 01       	movw	r24, r18
    14aa:	01 96       	adiw	r24, 0x01	; 1
    14ac:	09 2e       	mov	r0, r25
    14ae:	00 0c       	add	r0, r0
    14b0:	aa 0b       	sbc	r26, r26
    14b2:	bb 0b       	sbc	r27, r27
    14b4:	dc 01       	movw	r26, r24
    14b6:	99 27       	eor	r25, r25
    14b8:	88 27       	eor	r24, r24
    14ba:	60 e0       	ldi	r22, 0x00	; 0
    14bc:	70 e0       	ldi	r23, 0x00	; 0
    14be:	84 2b       	or	r24, r20
    14c0:	95 2b       	or	r25, r21
    14c2:	a6 2b       	or	r26, r22
    14c4:	b7 2b       	or	r27, r23
    14c6:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    14ca:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    14ce:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    14d2:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    14d6:	e0 91 4c 02 	lds	r30, 0x024C	; 0x80024c <mtable+0x1e>
    14da:	f0 91 4d 02 	lds	r31, 0x024D	; 0x80024d <mtable+0x1f>
    14de:	30 97       	sbiw	r30, 0x00	; 0
    14e0:	39 f0       	breq	.+14     	; 0x14f0 <__vector_20+0xb2>
    14e2:	6f e0       	ldi	r22, 0x0F	; 15
    14e4:	70 e0       	ldi	r23, 0x00	; 0
    14e6:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <otable+0x1e>
    14ea:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <otable+0x1f>
    14ee:	09 95       	icall
    14f0:	0e 94 90 03 	call	0x720	; 0x720 <schedule>
    14f4:	ff 91       	pop	r31
    14f6:	ef 91       	pop	r30
    14f8:	bf 91       	pop	r27
    14fa:	af 91       	pop	r26
    14fc:	9f 91       	pop	r25
    14fe:	8f 91       	pop	r24
    1500:	7f 91       	pop	r23
    1502:	6f 91       	pop	r22
    1504:	5f 91       	pop	r21
    1506:	4f 91       	pop	r20
    1508:	3f 91       	pop	r19
    150a:	2f 91       	pop	r18
    150c:	0f 90       	pop	r0
    150e:	0f be       	out	0x3f, r0	; 63
    1510:	0f 90       	pop	r0
    1512:	1f 90       	pop	r1
    1514:	18 95       	reti

00001516 <__vector_21>:
    1516:	1f 92       	push	r1
    1518:	0f 92       	push	r0
    151a:	0f b6       	in	r0, 0x3f	; 63
    151c:	0f 92       	push	r0
    151e:	11 24       	eor	r1, r1
    1520:	2f 93       	push	r18
    1522:	3f 93       	push	r19
    1524:	4f 93       	push	r20
    1526:	5f 93       	push	r21
    1528:	6f 93       	push	r22
    152a:	7f 93       	push	r23
    152c:	8f 93       	push	r24
    152e:	9f 93       	push	r25
    1530:	af 93       	push	r26
    1532:	bf 93       	push	r27
    1534:	ef 93       	push	r30
    1536:	ff 93       	push	r31
    1538:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    153c:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    1540:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1544:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1548:	c9 01       	movw	r24, r18
    154a:	03 2e       	mov	r0, r19
    154c:	00 0c       	add	r0, r0
    154e:	aa 0b       	sbc	r26, r26
    1550:	bb 0b       	sbc	r27, r27
    1552:	dc 01       	movw	r26, r24
    1554:	99 27       	eor	r25, r25
    1556:	88 27       	eor	r24, r24
    1558:	60 e0       	ldi	r22, 0x00	; 0
    155a:	70 e0       	ldi	r23, 0x00	; 0
    155c:	84 2b       	or	r24, r20
    155e:	95 2b       	or	r25, r21
    1560:	a6 2b       	or	r26, r22
    1562:	b7 2b       	or	r27, r23
    1564:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    1568:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    156c:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    1570:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    1574:	b0 9b       	sbis	0x16, 0	; 22
    1576:	1b c0       	rjmp	.+54     	; 0x15ae <__vector_21+0x98>
    1578:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    157c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1580:	c9 01       	movw	r24, r18
    1582:	01 96       	adiw	r24, 0x01	; 1
    1584:	09 2e       	mov	r0, r25
    1586:	00 0c       	add	r0, r0
    1588:	aa 0b       	sbc	r26, r26
    158a:	bb 0b       	sbc	r27, r27
    158c:	dc 01       	movw	r26, r24
    158e:	99 27       	eor	r25, r25
    1590:	88 27       	eor	r24, r24
    1592:	60 e0       	ldi	r22, 0x00	; 0
    1594:	70 e0       	ldi	r23, 0x00	; 0
    1596:	84 2b       	or	r24, r20
    1598:	95 2b       	or	r25, r21
    159a:	a6 2b       	or	r26, r22
    159c:	b7 2b       	or	r27, r23
    159e:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    15a2:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    15a6:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    15aa:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    15ae:	e0 91 4e 02 	lds	r30, 0x024E	; 0x80024e <mtable+0x20>
    15b2:	f0 91 4f 02 	lds	r31, 0x024F	; 0x80024f <mtable+0x21>
    15b6:	30 97       	sbiw	r30, 0x00	; 0
    15b8:	39 f0       	breq	.+14     	; 0x15c8 <__vector_21+0xb2>
    15ba:	60 e1       	ldi	r22, 0x10	; 16
    15bc:	70 e0       	ldi	r23, 0x00	; 0
    15be:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <otable+0x20>
    15c2:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <otable+0x21>
    15c6:	09 95       	icall
    15c8:	0e 94 90 03 	call	0x720	; 0x720 <schedule>
    15cc:	ff 91       	pop	r31
    15ce:	ef 91       	pop	r30
    15d0:	bf 91       	pop	r27
    15d2:	af 91       	pop	r26
    15d4:	9f 91       	pop	r25
    15d6:	8f 91       	pop	r24
    15d8:	7f 91       	pop	r23
    15da:	6f 91       	pop	r22
    15dc:	5f 91       	pop	r21
    15de:	4f 91       	pop	r20
    15e0:	3f 91       	pop	r19
    15e2:	2f 91       	pop	r18
    15e4:	0f 90       	pop	r0
    15e6:	0f be       	out	0x3f, r0	; 63
    15e8:	0f 90       	pop	r0
    15ea:	1f 90       	pop	r1
    15ec:	18 95       	reti

000015ee <__vector_22>:
    15ee:	1f 92       	push	r1
    15f0:	0f 92       	push	r0
    15f2:	0f b6       	in	r0, 0x3f	; 63
    15f4:	0f 92       	push	r0
    15f6:	11 24       	eor	r1, r1
    15f8:	2f 93       	push	r18
    15fa:	3f 93       	push	r19
    15fc:	4f 93       	push	r20
    15fe:	5f 93       	push	r21
    1600:	6f 93       	push	r22
    1602:	7f 93       	push	r23
    1604:	8f 93       	push	r24
    1606:	9f 93       	push	r25
    1608:	af 93       	push	r26
    160a:	bf 93       	push	r27
    160c:	ef 93       	push	r30
    160e:	ff 93       	push	r31
    1610:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    1614:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    1618:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    161c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1620:	c9 01       	movw	r24, r18
    1622:	03 2e       	mov	r0, r19
    1624:	00 0c       	add	r0, r0
    1626:	aa 0b       	sbc	r26, r26
    1628:	bb 0b       	sbc	r27, r27
    162a:	dc 01       	movw	r26, r24
    162c:	99 27       	eor	r25, r25
    162e:	88 27       	eor	r24, r24
    1630:	60 e0       	ldi	r22, 0x00	; 0
    1632:	70 e0       	ldi	r23, 0x00	; 0
    1634:	84 2b       	or	r24, r20
    1636:	95 2b       	or	r25, r21
    1638:	a6 2b       	or	r26, r22
    163a:	b7 2b       	or	r27, r23
    163c:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    1640:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    1644:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    1648:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    164c:	b0 9b       	sbis	0x16, 0	; 22
    164e:	1b c0       	rjmp	.+54     	; 0x1686 <__vector_22+0x98>
    1650:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1654:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1658:	c9 01       	movw	r24, r18
    165a:	01 96       	adiw	r24, 0x01	; 1
    165c:	09 2e       	mov	r0, r25
    165e:	00 0c       	add	r0, r0
    1660:	aa 0b       	sbc	r26, r26
    1662:	bb 0b       	sbc	r27, r27
    1664:	dc 01       	movw	r26, r24
    1666:	99 27       	eor	r25, r25
    1668:	88 27       	eor	r24, r24
    166a:	60 e0       	ldi	r22, 0x00	; 0
    166c:	70 e0       	ldi	r23, 0x00	; 0
    166e:	84 2b       	or	r24, r20
    1670:	95 2b       	or	r25, r21
    1672:	a6 2b       	or	r26, r22
    1674:	b7 2b       	or	r27, r23
    1676:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    167a:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    167e:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    1682:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    1686:	e0 91 50 02 	lds	r30, 0x0250	; 0x800250 <mtable+0x22>
    168a:	f0 91 51 02 	lds	r31, 0x0251	; 0x800251 <mtable+0x23>
    168e:	30 97       	sbiw	r30, 0x00	; 0
    1690:	39 f0       	breq	.+14     	; 0x16a0 <__vector_22+0xb2>
    1692:	61 e1       	ldi	r22, 0x11	; 17
    1694:	70 e0       	ldi	r23, 0x00	; 0
    1696:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <otable+0x22>
    169a:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <otable+0x23>
    169e:	09 95       	icall
    16a0:	0e 94 90 03 	call	0x720	; 0x720 <schedule>
    16a4:	ff 91       	pop	r31
    16a6:	ef 91       	pop	r30
    16a8:	bf 91       	pop	r27
    16aa:	af 91       	pop	r26
    16ac:	9f 91       	pop	r25
    16ae:	8f 91       	pop	r24
    16b0:	7f 91       	pop	r23
    16b2:	6f 91       	pop	r22
    16b4:	5f 91       	pop	r21
    16b6:	4f 91       	pop	r20
    16b8:	3f 91       	pop	r19
    16ba:	2f 91       	pop	r18
    16bc:	0f 90       	pop	r0
    16be:	0f be       	out	0x3f, r0	; 63
    16c0:	0f 90       	pop	r0
    16c2:	1f 90       	pop	r1
    16c4:	18 95       	reti

000016c6 <enqueueByDeadline>:
    16c6:	ef 92       	push	r14
    16c8:	ff 92       	push	r15
    16ca:	0f 93       	push	r16
    16cc:	1f 93       	push	r17
    16ce:	cf 93       	push	r28
    16d0:	df 93       	push	r29
    16d2:	7b 01       	movw	r14, r22
    16d4:	eb 01       	movw	r28, r22
    16d6:	a8 81       	ld	r26, Y
    16d8:	b9 81       	ldd	r27, Y+1	; 0x01
    16da:	10 97       	sbiw	r26, 0x00	; 0
    16dc:	61 f1       	breq	.+88     	; 0x1736 <enqueueByDeadline+0x70>
    16de:	fc 01       	movw	r30, r24
    16e0:	06 81       	ldd	r16, Z+6	; 0x06
    16e2:	17 81       	ldd	r17, Z+7	; 0x07
    16e4:	20 85       	ldd	r18, Z+8	; 0x08
    16e6:	31 85       	ldd	r19, Z+9	; 0x09
    16e8:	16 96       	adiw	r26, 0x06	; 6
    16ea:	4d 91       	ld	r20, X+
    16ec:	5d 91       	ld	r21, X+
    16ee:	6d 91       	ld	r22, X+
    16f0:	7c 91       	ld	r23, X
    16f2:	19 97       	sbiw	r26, 0x09	; 9
    16f4:	04 17       	cp	r16, r20
    16f6:	15 07       	cpc	r17, r21
    16f8:	26 07       	cpc	r18, r22
    16fa:	37 07       	cpc	r19, r23
    16fc:	14 f4       	brge	.+4      	; 0x1702 <enqueueByDeadline+0x3c>
    16fe:	1b c0       	rjmp	.+54     	; 0x1736 <enqueueByDeadline+0x70>
    1700:	df 01       	movw	r26, r30
    1702:	ed 91       	ld	r30, X+
    1704:	fc 91       	ld	r31, X
    1706:	11 97       	sbiw	r26, 0x01	; 1
    1708:	30 97       	sbiw	r30, 0x00	; 0
    170a:	49 f0       	breq	.+18     	; 0x171e <enqueueByDeadline+0x58>
    170c:	46 81       	ldd	r20, Z+6	; 0x06
    170e:	57 81       	ldd	r21, Z+7	; 0x07
    1710:	60 85       	ldd	r22, Z+8	; 0x08
    1712:	71 85       	ldd	r23, Z+9	; 0x09
    1714:	04 17       	cp	r16, r20
    1716:	15 07       	cpc	r17, r21
    1718:	26 07       	cpc	r18, r22
    171a:	37 07       	cpc	r19, r23
    171c:	8c f7       	brge	.-30     	; 0x1700 <enqueueByDeadline+0x3a>
    171e:	ec 01       	movw	r28, r24
    1720:	f9 83       	std	Y+1, r31	; 0x01
    1722:	e8 83       	st	Y, r30
    1724:	10 97       	sbiw	r26, 0x00	; 0
    1726:	21 f4       	brne	.+8      	; 0x1730 <enqueueByDeadline+0x6a>
    1728:	f7 01       	movw	r30, r14
    172a:	91 83       	std	Z+1, r25	; 0x01
    172c:	80 83       	st	Z, r24
    172e:	07 c0       	rjmp	.+14     	; 0x173e <enqueueByDeadline+0x78>
    1730:	8d 93       	st	X+, r24
    1732:	9c 93       	st	X, r25
    1734:	04 c0       	rjmp	.+8      	; 0x173e <enqueueByDeadline+0x78>
    1736:	ec 01       	movw	r28, r24
    1738:	b9 83       	std	Y+1, r27	; 0x01
    173a:	a8 83       	st	Y, r26
    173c:	f5 cf       	rjmp	.-22     	; 0x1728 <enqueueByDeadline+0x62>
    173e:	df 91       	pop	r29
    1740:	cf 91       	pop	r28
    1742:	1f 91       	pop	r17
    1744:	0f 91       	pop	r16
    1746:	ff 90       	pop	r15
    1748:	ef 90       	pop	r14
    174a:	08 95       	ret

0000174c <enqueueByBaseline>:
    174c:	ef 92       	push	r14
    174e:	ff 92       	push	r15
    1750:	0f 93       	push	r16
    1752:	1f 93       	push	r17
    1754:	cf 93       	push	r28
    1756:	df 93       	push	r29
    1758:	7b 01       	movw	r14, r22
    175a:	eb 01       	movw	r28, r22
    175c:	a8 81       	ld	r26, Y
    175e:	b9 81       	ldd	r27, Y+1	; 0x01
    1760:	10 97       	sbiw	r26, 0x00	; 0
    1762:	61 f1       	breq	.+88     	; 0x17bc <enqueueByBaseline+0x70>
    1764:	fc 01       	movw	r30, r24
    1766:	02 81       	ldd	r16, Z+2	; 0x02
    1768:	13 81       	ldd	r17, Z+3	; 0x03
    176a:	24 81       	ldd	r18, Z+4	; 0x04
    176c:	35 81       	ldd	r19, Z+5	; 0x05
    176e:	12 96       	adiw	r26, 0x02	; 2
    1770:	4d 91       	ld	r20, X+
    1772:	5d 91       	ld	r21, X+
    1774:	6d 91       	ld	r22, X+
    1776:	7c 91       	ld	r23, X
    1778:	15 97       	sbiw	r26, 0x05	; 5
    177a:	04 17       	cp	r16, r20
    177c:	15 07       	cpc	r17, r21
    177e:	26 07       	cpc	r18, r22
    1780:	37 07       	cpc	r19, r23
    1782:	14 f4       	brge	.+4      	; 0x1788 <enqueueByBaseline+0x3c>
    1784:	1b c0       	rjmp	.+54     	; 0x17bc <enqueueByBaseline+0x70>
    1786:	df 01       	movw	r26, r30
    1788:	ed 91       	ld	r30, X+
    178a:	fc 91       	ld	r31, X
    178c:	11 97       	sbiw	r26, 0x01	; 1
    178e:	30 97       	sbiw	r30, 0x00	; 0
    1790:	49 f0       	breq	.+18     	; 0x17a4 <enqueueByBaseline+0x58>
    1792:	42 81       	ldd	r20, Z+2	; 0x02
    1794:	53 81       	ldd	r21, Z+3	; 0x03
    1796:	64 81       	ldd	r22, Z+4	; 0x04
    1798:	75 81       	ldd	r23, Z+5	; 0x05
    179a:	04 17       	cp	r16, r20
    179c:	15 07       	cpc	r17, r21
    179e:	26 07       	cpc	r18, r22
    17a0:	37 07       	cpc	r19, r23
    17a2:	8c f7       	brge	.-30     	; 0x1786 <enqueueByBaseline+0x3a>
    17a4:	ec 01       	movw	r28, r24
    17a6:	f9 83       	std	Y+1, r31	; 0x01
    17a8:	e8 83       	st	Y, r30
    17aa:	10 97       	sbiw	r26, 0x00	; 0
    17ac:	21 f4       	brne	.+8      	; 0x17b6 <enqueueByBaseline+0x6a>
    17ae:	f7 01       	movw	r30, r14
    17b0:	91 83       	std	Z+1, r25	; 0x01
    17b2:	80 83       	st	Z, r24
    17b4:	07 c0       	rjmp	.+14     	; 0x17c4 <enqueueByBaseline+0x78>
    17b6:	8d 93       	st	X+, r24
    17b8:	9c 93       	st	X, r25
    17ba:	04 c0       	rjmp	.+8      	; 0x17c4 <enqueueByBaseline+0x78>
    17bc:	ec 01       	movw	r28, r24
    17be:	b9 83       	std	Y+1, r27	; 0x01
    17c0:	a8 83       	st	Y, r26
    17c2:	f5 cf       	rjmp	.-22     	; 0x17ae <enqueueByBaseline+0x62>
    17c4:	df 91       	pop	r29
    17c6:	cf 91       	pop	r28
    17c8:	1f 91       	pop	r17
    17ca:	0f 91       	pop	r16
    17cc:	ff 90       	pop	r15
    17ce:	ef 90       	pop	r14
    17d0:	08 95       	ret

000017d2 <dequeue>:
    17d2:	dc 01       	movw	r26, r24
    17d4:	ed 91       	ld	r30, X+
    17d6:	fc 91       	ld	r31, X
    17d8:	11 97       	sbiw	r26, 0x01	; 1
    17da:	30 97       	sbiw	r30, 0x00	; 0
    17dc:	59 f4       	brne	.+22     	; 0x17f4 <dequeue+0x22>
    17de:	8f ef       	ldi	r24, 0xFF	; 255
    17e0:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
    17e4:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
    17e8:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	83 bf       	out	0x33, r24	; 51
    17f0:	88 95       	sleep
    17f2:	fd cf       	rjmp	.-6      	; 0x17ee <dequeue+0x1c>
    17f4:	20 81       	ld	r18, Z
    17f6:	31 81       	ldd	r19, Z+1	; 0x01
    17f8:	2d 93       	st	X+, r18
    17fa:	3c 93       	st	X, r19
    17fc:	cf 01       	movw	r24, r30
    17fe:	08 95       	ret

00001800 <__vector_9>:
    1800:	1f 92       	push	r1
    1802:	0f 92       	push	r0
    1804:	0f b6       	in	r0, 0x3f	; 63
    1806:	0f 92       	push	r0
    1808:	11 24       	eor	r1, r1
    180a:	2f 93       	push	r18
    180c:	3f 93       	push	r19
    180e:	4f 93       	push	r20
    1810:	5f 93       	push	r21
    1812:	6f 93       	push	r22
    1814:	7f 93       	push	r23
    1816:	8f 93       	push	r24
    1818:	9f 93       	push	r25
    181a:	ef 93       	push	r30
    181c:	ff 93       	push	r31
    181e:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <overflows>
    1822:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <overflows+0x1>
    1826:	01 96       	adiw	r24, 0x01	; 1
    1828:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <overflows+0x1>
    182c:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <overflows>
    1830:	e0 91 92 01 	lds	r30, 0x0192	; 0x800192 <timerQ>
    1834:	f0 91 93 01 	lds	r31, 0x0193	; 0x800193 <timerQ+0x1>
    1838:	30 97       	sbiw	r30, 0x00	; 0
    183a:	01 f1       	breq	.+64     	; 0x187c <__vector_9+0x7c>
    183c:	42 81       	ldd	r20, Z+2	; 0x02
    183e:	53 81       	ldd	r21, Z+3	; 0x03
    1840:	64 81       	ldd	r22, Z+4	; 0x04
    1842:	75 81       	ldd	r23, Z+5	; 0x05
    1844:	86 17       	cp	r24, r22
    1846:	97 07       	cpc	r25, r23
    1848:	c9 f4       	brne	.+50     	; 0x187c <__vector_9+0x7c>
    184a:	ca 01       	movw	r24, r20
    184c:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1850:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1854:	42 1b       	sub	r20, r18
    1856:	53 0b       	sbc	r21, r19
    1858:	41 30       	cpi	r20, 0x01	; 1
    185a:	51 05       	cpc	r21, r1
    185c:	29 f4       	brne	.+10     	; 0x1868 <__vector_9+0x68>
    185e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1862:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1866:	01 96       	adiw	r24, 0x01	; 1
    1868:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    186c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1870:	ef e6       	ldi	r30, 0x6F	; 111
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	80 81       	ld	r24, Z
    1876:	82 60       	ori	r24, 0x02	; 2
    1878:	80 83       	st	Z, r24
    187a:	05 c0       	rjmp	.+10     	; 0x1886 <__vector_9+0x86>
    187c:	ef e6       	ldi	r30, 0x6F	; 111
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	80 81       	ld	r24, Z
    1882:	8d 7f       	andi	r24, 0xFD	; 253
    1884:	80 83       	st	Z, r24
    1886:	ff 91       	pop	r31
    1888:	ef 91       	pop	r30
    188a:	9f 91       	pop	r25
    188c:	8f 91       	pop	r24
    188e:	7f 91       	pop	r23
    1890:	6f 91       	pop	r22
    1892:	5f 91       	pop	r21
    1894:	4f 91       	pop	r20
    1896:	3f 91       	pop	r19
    1898:	2f 91       	pop	r18
    189a:	0f 90       	pop	r0
    189c:	0f be       	out	0x3f, r0	; 63
    189e:	0f 90       	pop	r0
    18a0:	1f 90       	pop	r1
    18a2:	18 95       	reti

000018a4 <__vector_7>:
    18a4:	1f 92       	push	r1
    18a6:	0f 92       	push	r0
    18a8:	0f b6       	in	r0, 0x3f	; 63
    18aa:	0f 92       	push	r0
    18ac:	11 24       	eor	r1, r1
    18ae:	cf 92       	push	r12
    18b0:	df 92       	push	r13
    18b2:	ef 92       	push	r14
    18b4:	ff 92       	push	r15
    18b6:	2f 93       	push	r18
    18b8:	3f 93       	push	r19
    18ba:	4f 93       	push	r20
    18bc:	5f 93       	push	r21
    18be:	6f 93       	push	r22
    18c0:	7f 93       	push	r23
    18c2:	8f 93       	push	r24
    18c4:	9f 93       	push	r25
    18c6:	af 93       	push	r26
    18c8:	bf 93       	push	r27
    18ca:	ef 93       	push	r30
    18cc:	ff 93       	push	r31
    18ce:	c0 90 8c 01 	lds	r12, 0x018C	; 0x80018c <overflows>
    18d2:	d0 90 8d 01 	lds	r13, 0x018D	; 0x80018d <overflows+0x1>
    18d6:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    18da:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    18de:	b0 99       	sbic	0x16, 0	; 22
    18e0:	0f c0       	rjmp	.+30     	; 0x1900 <__vector_7+0x5c>
    18e2:	0d 2c       	mov	r0, r13
    18e4:	00 0c       	add	r0, r0
    18e6:	ee 08       	sbc	r14, r14
    18e8:	ff 08       	sbc	r15, r15
    18ea:	d6 01       	movw	r26, r12
    18ec:	99 27       	eor	r25, r25
    18ee:	88 27       	eor	r24, r24
    18f0:	69 01       	movw	r12, r18
    18f2:	e1 2c       	mov	r14, r1
    18f4:	f1 2c       	mov	r15, r1
    18f6:	c8 2a       	or	r12, r24
    18f8:	d9 2a       	or	r13, r25
    18fa:	ea 2a       	or	r14, r26
    18fc:	fb 2a       	or	r15, r27
    18fe:	15 c0       	rjmp	.+42     	; 0x192a <__vector_7+0x86>
    1900:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1904:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1908:	8f ef       	ldi	r24, 0xFF	; 255
    190a:	c8 1a       	sub	r12, r24
    190c:	d8 0a       	sbc	r13, r24
    190e:	0d 2c       	mov	r0, r13
    1910:	00 0c       	add	r0, r0
    1912:	ee 08       	sbc	r14, r14
    1914:	ff 08       	sbc	r15, r15
    1916:	d6 01       	movw	r26, r12
    1918:	99 27       	eor	r25, r25
    191a:	88 27       	eor	r24, r24
    191c:	69 01       	movw	r12, r18
    191e:	e1 2c       	mov	r14, r1
    1920:	f1 2c       	mov	r15, r1
    1922:	c8 2a       	or	r12, r24
    1924:	d9 2a       	or	r13, r25
    1926:	ea 2a       	or	r14, r26
    1928:	fb 2a       	or	r15, r27
    192a:	e0 91 92 01 	lds	r30, 0x0192	; 0x800192 <timerQ>
    192e:	f0 91 93 01 	lds	r31, 0x0193	; 0x800193 <timerQ+0x1>
    1932:	30 97       	sbiw	r30, 0x00	; 0
    1934:	09 f4       	brne	.+2      	; 0x1938 <__vector_7+0x94>
    1936:	42 c0       	rjmp	.+132    	; 0x19bc <__vector_7+0x118>
    1938:	82 81       	ldd	r24, Z+2	; 0x02
    193a:	93 81       	ldd	r25, Z+3	; 0x03
    193c:	a4 81       	ldd	r26, Z+4	; 0x04
    193e:	b5 81       	ldd	r27, Z+5	; 0x05
    1940:	8c 19       	sub	r24, r12
    1942:	9d 09       	sbc	r25, r13
    1944:	ae 09       	sbc	r26, r14
    1946:	bf 09       	sbc	r27, r15
    1948:	18 16       	cp	r1, r24
    194a:	19 06       	cpc	r1, r25
    194c:	1a 06       	cpc	r1, r26
    194e:	1b 06       	cpc	r1, r27
    1950:	ec f1       	brlt	.+122    	; 0x19cc <__vector_7+0x128>
    1952:	82 e9       	ldi	r24, 0x92	; 146
    1954:	91 e0       	ldi	r25, 0x01	; 1
    1956:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <dequeue>
    195a:	64 e9       	ldi	r22, 0x94	; 148
    195c:	71 e0       	ldi	r23, 0x01	; 1
    195e:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <enqueueByDeadline>
    1962:	e0 91 92 01 	lds	r30, 0x0192	; 0x800192 <timerQ>
    1966:	f0 91 93 01 	lds	r31, 0x0193	; 0x800193 <timerQ+0x1>
    196a:	30 97       	sbiw	r30, 0x00	; 0
    196c:	39 f1       	breq	.+78     	; 0x19bc <__vector_7+0x118>
    196e:	82 81       	ldd	r24, Z+2	; 0x02
    1970:	93 81       	ldd	r25, Z+3	; 0x03
    1972:	a4 81       	ldd	r26, Z+4	; 0x04
    1974:	b5 81       	ldd	r27, Z+5	; 0x05
    1976:	8c 19       	sub	r24, r12
    1978:	9d 09       	sbc	r25, r13
    197a:	ae 09       	sbc	r26, r14
    197c:	bf 09       	sbc	r27, r15
    197e:	18 16       	cp	r1, r24
    1980:	19 06       	cpc	r1, r25
    1982:	1a 06       	cpc	r1, r26
    1984:	1b 06       	cpc	r1, r27
    1986:	2c f7       	brge	.-54     	; 0x1952 <__vector_7+0xae>
    1988:	21 c0       	rjmp	.+66     	; 0x19cc <__vector_7+0x128>
    198a:	9c 01       	movw	r18, r24
    198c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1990:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1994:	84 1b       	sub	r24, r20
    1996:	95 0b       	sbc	r25, r21
    1998:	01 97       	sbiw	r24, 0x01	; 1
    199a:	31 f4       	brne	.+12     	; 0x19a8 <__vector_7+0x104>
    199c:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    19a0:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    19a4:	2f 5f       	subi	r18, 0xFF	; 255
    19a6:	3f 4f       	sbci	r19, 0xFF	; 255
    19a8:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    19ac:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    19b0:	ef e6       	ldi	r30, 0x6F	; 111
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	80 81       	ld	r24, Z
    19b6:	82 60       	ori	r24, 0x02	; 2
    19b8:	80 83       	st	Z, r24
    19ba:	05 c0       	rjmp	.+10     	; 0x19c6 <__vector_7+0x122>
    19bc:	ef e6       	ldi	r30, 0x6F	; 111
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	80 81       	ld	r24, Z
    19c2:	8d 7f       	andi	r24, 0xFD	; 253
    19c4:	80 83       	st	Z, r24
    19c6:	0e 94 90 03 	call	0x720	; 0x720 <schedule>
    19ca:	0c c0       	rjmp	.+24     	; 0x19e4 <__vector_7+0x140>
    19cc:	82 81       	ldd	r24, Z+2	; 0x02
    19ce:	93 81       	ldd	r25, Z+3	; 0x03
    19d0:	a4 81       	ldd	r26, Z+4	; 0x04
    19d2:	b5 81       	ldd	r27, Z+5	; 0x05
    19d4:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    19d8:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    19dc:	2a 17       	cp	r18, r26
    19de:	3b 07       	cpc	r19, r27
    19e0:	69 f7       	brne	.-38     	; 0x19bc <__vector_7+0x118>
    19e2:	d3 cf       	rjmp	.-90     	; 0x198a <__vector_7+0xe6>
    19e4:	ff 91       	pop	r31
    19e6:	ef 91       	pop	r30
    19e8:	bf 91       	pop	r27
    19ea:	af 91       	pop	r26
    19ec:	9f 91       	pop	r25
    19ee:	8f 91       	pop	r24
    19f0:	7f 91       	pop	r23
    19f2:	6f 91       	pop	r22
    19f4:	5f 91       	pop	r21
    19f6:	4f 91       	pop	r20
    19f8:	3f 91       	pop	r19
    19fa:	2f 91       	pop	r18
    19fc:	ff 90       	pop	r15
    19fe:	ef 90       	pop	r14
    1a00:	df 90       	pop	r13
    1a02:	cf 90       	pop	r12
    1a04:	0f 90       	pop	r0
    1a06:	0f be       	out	0x3f, r0	; 63
    1a08:	0f 90       	pop	r0
    1a0a:	1f 90       	pop	r1
    1a0c:	18 95       	reti

00001a0e <async>:
    1a0e:	3f 92       	push	r3
    1a10:	4f 92       	push	r4
    1a12:	5f 92       	push	r5
    1a14:	6f 92       	push	r6
    1a16:	7f 92       	push	r7
    1a18:	8f 92       	push	r8
    1a1a:	9f 92       	push	r9
    1a1c:	af 92       	push	r10
    1a1e:	bf 92       	push	r11
    1a20:	cf 92       	push	r12
    1a22:	df 92       	push	r13
    1a24:	ef 92       	push	r14
    1a26:	ff 92       	push	r15
    1a28:	0f 93       	push	r16
    1a2a:	1f 93       	push	r17
    1a2c:	cf 93       	push	r28
    1a2e:	df 93       	push	r29
    1a30:	2b 01       	movw	r4, r22
    1a32:	3c 01       	movw	r6, r24
    1a34:	49 01       	movw	r8, r18
    1a36:	5a 01       	movw	r10, r20
    1a38:	8f b7       	in	r24, 0x3f	; 63
    1a3a:	80 78       	andi	r24, 0x80	; 128
    1a3c:	38 2e       	mov	r3, r24
    1a3e:	f8 94       	cli
    1a40:	82 e8       	ldi	r24, 0x82	; 130
    1a42:	91 e0       	ldi	r25, 0x01	; 1
    1a44:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <dequeue>
    1a48:	ec 01       	movw	r28, r24
    1a4a:	1b 87       	std	Y+11, r17	; 0x0b
    1a4c:	0a 87       	std	Y+10, r16	; 0x0a
    1a4e:	fd 86       	std	Y+13, r15	; 0x0d
    1a50:	ec 86       	std	Y+12, r14	; 0x0c
    1a52:	df 86       	std	Y+15, r13	; 0x0f
    1a54:	ce 86       	std	Y+14, r12	; 0x0e
    1a56:	33 20       	and	r3, r3
    1a58:	61 f0       	breq	.+24     	; 0x1a72 <async+0x64>
    1a5a:	e0 91 7c 01 	lds	r30, 0x017C	; 0x80017c <current>
    1a5e:	f0 91 7d 01 	lds	r31, 0x017D	; 0x80017d <current+0x1>
    1a62:	02 80       	ldd	r0, Z+2	; 0x02
    1a64:	f3 81       	ldd	r31, Z+3	; 0x03
    1a66:	e0 2d       	mov	r30, r0
    1a68:	82 81       	ldd	r24, Z+2	; 0x02
    1a6a:	93 81       	ldd	r25, Z+3	; 0x03
    1a6c:	a4 81       	ldd	r26, Z+4	; 0x04
    1a6e:	b5 81       	ldd	r27, Z+5	; 0x05
    1a70:	08 c0       	rjmp	.+16     	; 0x1a82 <async+0x74>
    1a72:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <timestamp>
    1a76:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <timestamp+0x1>
    1a7a:	a0 91 90 01 	lds	r26, 0x0190	; 0x800190 <timestamp+0x2>
    1a7e:	b0 91 91 01 	lds	r27, 0x0191	; 0x800191 <timestamp+0x3>
    1a82:	48 0e       	add	r4, r24
    1a84:	59 1e       	adc	r5, r25
    1a86:	6a 1e       	adc	r6, r26
    1a88:	7b 1e       	adc	r7, r27
    1a8a:	4a 82       	std	Y+2, r4	; 0x02
    1a8c:	5b 82       	std	Y+3, r5	; 0x03
    1a8e:	6c 82       	std	Y+4, r6	; 0x04
    1a90:	7d 82       	std	Y+5, r7	; 0x05
    1a92:	18 14       	cp	r1, r8
    1a94:	19 04       	cpc	r1, r9
    1a96:	1a 04       	cpc	r1, r10
    1a98:	1b 04       	cpc	r1, r11
    1a9a:	44 f0       	brlt	.+16     	; 0x1aac <async+0x9e>
    1a9c:	0f 2e       	mov	r0, r31
    1a9e:	88 24       	eor	r8, r8
    1aa0:	8a 94       	dec	r8
    1aa2:	98 2c       	mov	r9, r8
    1aa4:	a8 2c       	mov	r10, r8
    1aa6:	ff e7       	ldi	r31, 0x7F	; 127
    1aa8:	bf 2e       	mov	r11, r31
    1aaa:	f0 2d       	mov	r31, r0
    1aac:	84 0c       	add	r8, r4
    1aae:	95 1c       	adc	r9, r5
    1ab0:	a6 1c       	adc	r10, r6
    1ab2:	b7 1c       	adc	r11, r7
    1ab4:	8e 82       	std	Y+6, r8	; 0x06
    1ab6:	9f 82       	std	Y+7, r9	; 0x07
    1ab8:	a8 86       	std	Y+8, r10	; 0x08
    1aba:	b9 86       	std	Y+9, r11	; 0x09
    1abc:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <overflows>
    1ac0:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <overflows+0x1>
    1ac4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1ac8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1acc:	b0 99       	sbic	0x16, 0	; 22
    1ace:	0e c0       	rjmp	.+28     	; 0x1aec <async+0xde>
    1ad0:	09 2e       	mov	r0, r25
    1ad2:	00 0c       	add	r0, r0
    1ad4:	aa 0b       	sbc	r26, r26
    1ad6:	bb 0b       	sbc	r27, r27
    1ad8:	dc 01       	movw	r26, r24
    1ada:	99 27       	eor	r25, r25
    1adc:	88 27       	eor	r24, r24
    1ade:	60 e0       	ldi	r22, 0x00	; 0
    1ae0:	70 e0       	ldi	r23, 0x00	; 0
    1ae2:	84 2b       	or	r24, r20
    1ae4:	95 2b       	or	r25, r21
    1ae6:	a6 2b       	or	r26, r22
    1ae8:	b7 2b       	or	r27, r23
    1aea:	13 c0       	rjmp	.+38     	; 0x1b12 <async+0x104>
    1aec:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1af0:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1af4:	01 96       	adiw	r24, 0x01	; 1
    1af6:	09 2e       	mov	r0, r25
    1af8:	00 0c       	add	r0, r0
    1afa:	aa 0b       	sbc	r26, r26
    1afc:	bb 0b       	sbc	r27, r27
    1afe:	dc 01       	movw	r26, r24
    1b00:	99 27       	eor	r25, r25
    1b02:	88 27       	eor	r24, r24
    1b04:	a9 01       	movw	r20, r18
    1b06:	60 e0       	ldi	r22, 0x00	; 0
    1b08:	70 e0       	ldi	r23, 0x00	; 0
    1b0a:	84 2b       	or	r24, r20
    1b0c:	95 2b       	or	r25, r21
    1b0e:	a6 2b       	or	r26, r22
    1b10:	b7 2b       	or	r27, r23
    1b12:	48 1a       	sub	r4, r24
    1b14:	59 0a       	sbc	r5, r25
    1b16:	6a 0a       	sbc	r6, r26
    1b18:	7b 0a       	sbc	r7, r27
    1b1a:	14 14       	cp	r1, r4
    1b1c:	15 04       	cpc	r1, r5
    1b1e:	16 04       	cpc	r1, r6
    1b20:	17 04       	cpc	r1, r7
    1b22:	ac f5       	brge	.+106    	; 0x1b8e <async+0x180>
    1b24:	62 e9       	ldi	r22, 0x92	; 146
    1b26:	71 e0       	ldi	r23, 0x01	; 1
    1b28:	ce 01       	movw	r24, r28
    1b2a:	0e 94 a6 0b 	call	0x174c	; 0x174c <enqueueByBaseline>
    1b2e:	e0 91 92 01 	lds	r30, 0x0192	; 0x800192 <timerQ>
    1b32:	f0 91 93 01 	lds	r31, 0x0193	; 0x800193 <timerQ+0x1>
    1b36:	30 97       	sbiw	r30, 0x00	; 0
    1b38:	21 f1       	breq	.+72     	; 0x1b82 <async+0x174>
    1b3a:	82 81       	ldd	r24, Z+2	; 0x02
    1b3c:	93 81       	ldd	r25, Z+3	; 0x03
    1b3e:	a4 81       	ldd	r26, Z+4	; 0x04
    1b40:	b5 81       	ldd	r27, Z+5	; 0x05
    1b42:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    1b46:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    1b4a:	2a 17       	cp	r18, r26
    1b4c:	3b 07       	cpc	r19, r27
    1b4e:	c9 f4       	brne	.+50     	; 0x1b82 <async+0x174>
    1b50:	9c 01       	movw	r18, r24
    1b52:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1b56:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1b5a:	84 1b       	sub	r24, r20
    1b5c:	95 0b       	sbc	r25, r21
    1b5e:	01 97       	sbiw	r24, 0x01	; 1
    1b60:	31 f4       	brne	.+12     	; 0x1b6e <async+0x160>
    1b62:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1b66:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1b6a:	2f 5f       	subi	r18, 0xFF	; 255
    1b6c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b6e:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1b72:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1b76:	ef e6       	ldi	r30, 0x6F	; 111
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	80 81       	ld	r24, Z
    1b7c:	82 60       	ori	r24, 0x02	; 2
    1b7e:	80 83       	st	Z, r24
    1b80:	41 c0       	rjmp	.+130    	; 0x1c04 <async+0x1f6>
    1b82:	ef e6       	ldi	r30, 0x6F	; 111
    1b84:	f0 e0       	ldi	r31, 0x00	; 0
    1b86:	80 81       	ld	r24, Z
    1b88:	8d 7f       	andi	r24, 0xFD	; 253
    1b8a:	80 83       	st	Z, r24
    1b8c:	3b c0       	rjmp	.+118    	; 0x1c04 <async+0x1f6>
    1b8e:	64 e9       	ldi	r22, 0x94	; 148
    1b90:	71 e0       	ldi	r23, 0x01	; 1
    1b92:	ce 01       	movw	r24, r28
    1b94:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <enqueueByDeadline>
    1b98:	33 20       	and	r3, r3
    1b9a:	b9 f1       	breq	.+110    	; 0x1c0a <async+0x1fc>
    1b9c:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <threadPool>
    1ba0:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <threadPool+0x1>
    1ba4:	00 97       	sbiw	r24, 0x00	; 0
    1ba6:	81 f1       	breq	.+96     	; 0x1c08 <async+0x1fa>
    1ba8:	e0 91 7e 01 	lds	r30, 0x017E	; 0x80017e <activeStack>
    1bac:	f0 91 7f 01 	lds	r31, 0x017F	; 0x80017f <activeStack+0x1>
    1bb0:	20 91 94 01 	lds	r18, 0x0194	; 0x800194 <msgQ>
    1bb4:	30 91 95 01 	lds	r19, 0x0195	; 0x800195 <msgQ+0x1>
    1bb8:	02 81       	ldd	r16, Z+2	; 0x02
    1bba:	13 81       	ldd	r17, Z+3	; 0x03
    1bbc:	d9 01       	movw	r26, r18
    1bbe:	16 96       	adiw	r26, 0x06	; 6
    1bc0:	4d 91       	ld	r20, X+
    1bc2:	5d 91       	ld	r21, X+
    1bc4:	6d 91       	ld	r22, X+
    1bc6:	7c 91       	ld	r23, X
    1bc8:	19 97       	sbiw	r26, 0x09	; 9
    1bca:	d8 01       	movw	r26, r16
    1bcc:	16 96       	adiw	r26, 0x06	; 6
    1bce:	0d 91       	ld	r16, X+
    1bd0:	1d 91       	ld	r17, X+
    1bd2:	2d 91       	ld	r18, X+
    1bd4:	3c 91       	ld	r19, X
    1bd6:	19 97       	sbiw	r26, 0x09	; 9
    1bd8:	40 1b       	sub	r20, r16
    1bda:	51 0b       	sbc	r21, r17
    1bdc:	62 0b       	sbc	r22, r18
    1bde:	73 0b       	sbc	r23, r19
    1be0:	9a f4       	brpl	.+38     	; 0x1c08 <async+0x1fa>
    1be2:	dc 01       	movw	r26, r24
    1be4:	2d 91       	ld	r18, X+
    1be6:	3c 91       	ld	r19, X
    1be8:	11 97       	sbiw	r26, 0x01	; 1
    1bea:	30 93 81 01 	sts	0x0181, r19	; 0x800181 <threadPool+0x1>
    1bee:	20 93 80 01 	sts	0x0180, r18	; 0x800180 <threadPool>
    1bf2:	ed 93       	st	X+, r30
    1bf4:	fc 93       	st	X, r31
    1bf6:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <activeStack+0x1>
    1bfa:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <activeStack>
    1bfe:	0e 94 70 03 	call	0x6e0	; 0x6e0 <dispatch>
    1c02:	02 c0       	rjmp	.+4      	; 0x1c08 <async+0x1fa>
    1c04:	33 20       	and	r3, r3
    1c06:	09 f0       	breq	.+2      	; 0x1c0a <async+0x1fc>
    1c08:	78 94       	sei
    1c0a:	ce 01       	movw	r24, r28
    1c0c:	df 91       	pop	r29
    1c0e:	cf 91       	pop	r28
    1c10:	1f 91       	pop	r17
    1c12:	0f 91       	pop	r16
    1c14:	ff 90       	pop	r15
    1c16:	ef 90       	pop	r14
    1c18:	df 90       	pop	r13
    1c1a:	cf 90       	pop	r12
    1c1c:	bf 90       	pop	r11
    1c1e:	af 90       	pop	r10
    1c20:	9f 90       	pop	r9
    1c22:	8f 90       	pop	r8
    1c24:	7f 90       	pop	r7
    1c26:	6f 90       	pop	r6
    1c28:	5f 90       	pop	r5
    1c2a:	4f 90       	pop	r4
    1c2c:	3f 90       	pop	r3
    1c2e:	08 95       	ret

00001c30 <sync>:
    1c30:	cf 92       	push	r12
    1c32:	df 92       	push	r13
    1c34:	ef 92       	push	r14
    1c36:	ff 92       	push	r15
    1c38:	0f 93       	push	r16
    1c3a:	1f 93       	push	r17
    1c3c:	cf 93       	push	r28
    1c3e:	df 93       	push	r29
    1c40:	ec 01       	movw	r28, r24
    1c42:	7b 01       	movw	r14, r22
    1c44:	6a 01       	movw	r12, r20
    1c46:	1f b7       	in	r17, 0x3f	; 63
    1c48:	10 78       	andi	r17, 0x80	; 128
    1c4a:	f8 94       	cli
    1c4c:	a8 81       	ld	r26, Y
    1c4e:	b9 81       	ldd	r27, Y+1	; 0x01
    1c50:	10 97       	sbiw	r26, 0x00	; 0
    1c52:	61 f1       	breq	.+88     	; 0x1cac <sync+0x7c>
    1c54:	14 96       	adiw	r26, 0x04	; 4
    1c56:	ed 91       	ld	r30, X+
    1c58:	fc 91       	ld	r31, X
    1c5a:	15 97       	sbiw	r26, 0x05	; 5
    1c5c:	30 97       	sbiw	r30, 0x00	; 0
    1c5e:	41 f0       	breq	.+16     	; 0x1c70 <sync+0x40>
    1c60:	a0 81       	ld	r26, Z
    1c62:	b1 81       	ldd	r27, Z+1	; 0x01
    1c64:	14 96       	adiw	r26, 0x04	; 4
    1c66:	ed 91       	ld	r30, X+
    1c68:	fc 91       	ld	r31, X
    1c6a:	15 97       	sbiw	r26, 0x05	; 5
    1c6c:	30 97       	sbiw	r30, 0x00	; 0
    1c6e:	c1 f7       	brne	.-16     	; 0x1c60 <sync+0x30>
    1c70:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <current>
    1c74:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <current+0x1>
    1c78:	2a 17       	cp	r18, r26
    1c7a:	3b 07       	cpc	r19, r27
    1c7c:	21 f0       	breq	.+8      	; 0x1c86 <sync+0x56>
    1c7e:	11 23       	and	r17, r17
    1c80:	09 f4       	brne	.+2      	; 0x1c84 <sync+0x54>
    1c82:	3d c0       	rjmp	.+122    	; 0x1cfe <sync+0xce>
    1c84:	07 c0       	rjmp	.+14     	; 0x1c94 <sync+0x64>
    1c86:	11 23       	and	r17, r17
    1c88:	09 f4       	brne	.+2      	; 0x1c8c <sync+0x5c>
    1c8a:	3c c0       	rjmp	.+120    	; 0x1d04 <sync+0xd4>
    1c8c:	78 94       	sei
    1c8e:	8f ef       	ldi	r24, 0xFF	; 255
    1c90:	9f ef       	ldi	r25, 0xFF	; 255
    1c92:	52 c0       	rjmp	.+164    	; 0x1d38 <sync+0x108>
    1c94:	8a 81       	ldd	r24, Y+2	; 0x02
    1c96:	9b 81       	ldd	r25, Y+3	; 0x03
    1c98:	00 97       	sbiw	r24, 0x00	; 0
    1c9a:	d1 f1       	breq	.+116    	; 0x1d10 <sync+0xe0>
    1c9c:	fc 01       	movw	r30, r24
    1c9e:	15 82       	std	Z+5, r1	; 0x05
    1ca0:	14 82       	std	Z+4, r1	; 0x04
    1ca2:	36 c0       	rjmp	.+108    	; 0x1d10 <sync+0xe0>
    1ca4:	78 94       	sei
    1ca6:	80 e0       	ldi	r24, 0x00	; 0
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	46 c0       	rjmp	.+140    	; 0x1d38 <sync+0x108>
    1cac:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <current>
    1cb0:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <current+0x1>
    1cb4:	99 83       	std	Y+1, r25	; 0x01
    1cb6:	88 83       	st	Y, r24
    1cb8:	11 23       	and	r17, r17
    1cba:	29 f0       	breq	.+10     	; 0x1cc6 <sync+0x96>
    1cbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbe:	9b 81       	ldd	r25, Y+3	; 0x03
    1cc0:	01 97       	sbiw	r24, 0x01	; 1
    1cc2:	09 f0       	breq	.+2      	; 0x1cc6 <sync+0x96>
    1cc4:	78 94       	sei
    1cc6:	b6 01       	movw	r22, r12
    1cc8:	ce 01       	movw	r24, r28
    1cca:	f7 01       	movw	r30, r14
    1ccc:	09 95       	icall
    1cce:	f8 2e       	mov	r15, r24
    1cd0:	09 2f       	mov	r16, r25
    1cd2:	8f b7       	in	r24, 0x3f	; 63
    1cd4:	f8 94       	cli
    1cd6:	19 82       	std	Y+1, r1	; 0x01
    1cd8:	18 82       	st	Y, r1
    1cda:	8a 81       	ldd	r24, Y+2	; 0x02
    1cdc:	9b 81       	ldd	r25, Y+3	; 0x03
    1cde:	82 30       	cpi	r24, 0x02	; 2
    1ce0:	91 05       	cpc	r25, r1
    1ce2:	38 f0       	brcs	.+14     	; 0x1cf2 <sync+0xc2>
    1ce4:	1b 82       	std	Y+3, r1	; 0x03
    1ce6:	1a 82       	std	Y+2, r1	; 0x02
    1ce8:	fc 01       	movw	r30, r24
    1cea:	15 82       	std	Z+5, r1	; 0x05
    1cec:	14 82       	std	Z+4, r1	; 0x04
    1cee:	0e 94 70 03 	call	0x6e0	; 0x6e0 <dispatch>
    1cf2:	11 23       	and	r17, r17
    1cf4:	51 f0       	breq	.+20     	; 0x1d0a <sync+0xda>
    1cf6:	78 94       	sei
    1cf8:	8f 2d       	mov	r24, r15
    1cfa:	90 2f       	mov	r25, r16
    1cfc:	1d c0       	rjmp	.+58     	; 0x1d38 <sync+0x108>
    1cfe:	8f ef       	ldi	r24, 0xFF	; 255
    1d00:	9f ef       	ldi	r25, 0xFF	; 255
    1d02:	1a c0       	rjmp	.+52     	; 0x1d38 <sync+0x108>
    1d04:	8f ef       	ldi	r24, 0xFF	; 255
    1d06:	9f ef       	ldi	r25, 0xFF	; 255
    1d08:	17 c0       	rjmp	.+46     	; 0x1d38 <sync+0x108>
    1d0a:	8f 2d       	mov	r24, r15
    1d0c:	90 2f       	mov	r25, r16
    1d0e:	14 c0       	rjmp	.+40     	; 0x1d38 <sync+0x108>
    1d10:	3b 83       	std	Y+3, r19	; 0x03
    1d12:	2a 83       	std	Y+2, r18	; 0x02
    1d14:	f9 01       	movw	r30, r18
    1d16:	d5 83       	std	Z+5, r29	; 0x05
    1d18:	c4 83       	std	Z+4, r28	; 0x04
    1d1a:	cd 01       	movw	r24, r26
    1d1c:	0e 94 70 03 	call	0x6e0	; 0x6e0 <dispatch>
    1d20:	e0 91 7c 01 	lds	r30, 0x017C	; 0x80017c <current>
    1d24:	f0 91 7d 01 	lds	r31, 0x017D	; 0x80017d <current+0x1>
    1d28:	82 81       	ldd	r24, Z+2	; 0x02
    1d2a:	93 81       	ldd	r25, Z+3	; 0x03
    1d2c:	89 2b       	or	r24, r25
    1d2e:	09 f4       	brne	.+2      	; 0x1d32 <sync+0x102>
    1d30:	b9 cf       	rjmp	.-142    	; 0x1ca4 <sync+0x74>
    1d32:	f9 83       	std	Y+1, r31	; 0x01
    1d34:	e8 83       	st	Y, r30
    1d36:	c2 cf       	rjmp	.-124    	; 0x1cbc <sync+0x8c>
    1d38:	df 91       	pop	r29
    1d3a:	cf 91       	pop	r28
    1d3c:	1f 91       	pop	r17
    1d3e:	0f 91       	pop	r16
    1d40:	ff 90       	pop	r15
    1d42:	ef 90       	pop	r14
    1d44:	df 90       	pop	r13
    1d46:	cf 90       	pop	r12
    1d48:	08 95       	ret

00001d4a <run>:
    1d4a:	00 91 7c 01 	lds	r16, 0x017C	; 0x80017c <current>
    1d4e:	10 91 7d 01 	lds	r17, 0x017D	; 0x80017d <current+0x1>
    1d52:	84 e9       	ldi	r24, 0x94	; 148
    1d54:	91 e0       	ldi	r25, 0x01	; 1
    1d56:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <dequeue>
    1d5a:	ec 01       	movw	r28, r24
    1d5c:	d8 01       	movw	r26, r16
    1d5e:	13 96       	adiw	r26, 0x03	; 3
    1d60:	9c 93       	st	X, r25
    1d62:	8e 93       	st	-X, r24
    1d64:	12 97       	sbiw	r26, 0x02	; 2
    1d66:	78 94       	sei
    1d68:	4e 85       	ldd	r20, Y+14	; 0x0e
    1d6a:	5f 85       	ldd	r21, Y+15	; 0x0f
    1d6c:	6c 85       	ldd	r22, Y+12	; 0x0c
    1d6e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1d70:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d72:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d74:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <sync>
    1d78:	8f b7       	in	r24, 0x3f	; 63
    1d7a:	f8 94       	cli
    1d7c:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <msgPool>
    1d80:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <msgPool+0x1>
    1d84:	99 83       	std	Y+1, r25	; 0x01
    1d86:	88 83       	st	Y, r24
    1d88:	d0 93 83 01 	sts	0x0183, r29	; 0x800183 <msgPool+0x1>
    1d8c:	c0 93 82 01 	sts	0x0182, r28	; 0x800182 <msgPool>
    1d90:	e0 91 7e 01 	lds	r30, 0x017E	; 0x80017e <activeStack>
    1d94:	f0 91 7f 01 	lds	r31, 0x017F	; 0x80017f <activeStack+0x1>
    1d98:	00 81       	ld	r16, Z
    1d9a:	11 81       	ldd	r17, Z+1	; 0x01
    1d9c:	e8 01       	movw	r28, r16
    1d9e:	2a 81       	ldd	r18, Y+2	; 0x02
    1da0:	3b 81       	ldd	r19, Y+3	; 0x03
    1da2:	a0 91 94 01 	lds	r26, 0x0194	; 0x800194 <msgQ>
    1da6:	b0 91 95 01 	lds	r27, 0x0195	; 0x800195 <msgQ+0x1>
    1daa:	10 97       	sbiw	r26, 0x00	; 0
    1dac:	c1 f0       	breq	.+48     	; 0x1dde <run+0x94>
    1dae:	21 15       	cp	r18, r1
    1db0:	31 05       	cpc	r19, r1
    1db2:	59 f2       	breq	.-106    	; 0x1d4a <run>
    1db4:	16 96       	adiw	r26, 0x06	; 6
    1db6:	8d 91       	ld	r24, X+
    1db8:	9d 91       	ld	r25, X+
    1dba:	0d 90       	ld	r0, X+
    1dbc:	bc 91       	ld	r27, X
    1dbe:	a0 2d       	mov	r26, r0
    1dc0:	e9 01       	movw	r28, r18
    1dc2:	4e 81       	ldd	r20, Y+6	; 0x06
    1dc4:	5f 81       	ldd	r21, Y+7	; 0x07
    1dc6:	68 85       	ldd	r22, Y+8	; 0x08
    1dc8:	79 85       	ldd	r23, Y+9	; 0x09
    1dca:	84 1b       	sub	r24, r20
    1dcc:	95 0b       	sbc	r25, r21
    1dce:	a6 0b       	sbc	r26, r22
    1dd0:	b7 0b       	sbc	r27, r23
    1dd2:	18 16       	cp	r1, r24
    1dd4:	19 06       	cpc	r1, r25
    1dd6:	1a 06       	cpc	r1, r26
    1dd8:	1b 06       	cpc	r1, r27
    1dda:	0c f0       	brlt	.+2      	; 0x1dde <run+0x94>
    1ddc:	b6 cf       	rjmp	.-148    	; 0x1d4a <run>
    1dde:	10 93 7f 01 	sts	0x017F, r17	; 0x80017f <activeStack+0x1>
    1de2:	00 93 7e 01 	sts	0x017E, r16	; 0x80017e <activeStack>
    1de6:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <threadPool>
    1dea:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <threadPool+0x1>
    1dee:	91 83       	std	Z+1, r25	; 0x01
    1df0:	80 83       	st	Z, r24
    1df2:	f0 93 81 01 	sts	0x0181, r31	; 0x800181 <threadPool+0x1>
    1df6:	e0 93 80 01 	sts	0x0180, r30	; 0x800180 <threadPool>
    1dfa:	a0 91 7e 01 	lds	r26, 0x017E	; 0x80017e <activeStack>
    1dfe:	b0 91 7f 01 	lds	r27, 0x017F	; 0x80017f <activeStack+0x1>
    1e02:	14 96       	adiw	r26, 0x04	; 4
    1e04:	ed 91       	ld	r30, X+
    1e06:	fc 91       	ld	r31, X
    1e08:	15 97       	sbiw	r26, 0x05	; 5
    1e0a:	30 97       	sbiw	r30, 0x00	; 0
    1e0c:	41 f0       	breq	.+16     	; 0x1e1e <run+0xd4>
    1e0e:	a0 81       	ld	r26, Z
    1e10:	b1 81       	ldd	r27, Z+1	; 0x01
    1e12:	14 96       	adiw	r26, 0x04	; 4
    1e14:	ed 91       	ld	r30, X+
    1e16:	fc 91       	ld	r31, X
    1e18:	15 97       	sbiw	r26, 0x05	; 5
    1e1a:	30 97       	sbiw	r30, 0x00	; 0
    1e1c:	c1 f7       	brne	.-16     	; 0x1e0e <run+0xc4>
    1e1e:	cd 01       	movw	r24, r26
    1e20:	0e 94 70 03 	call	0x6e0	; 0x6e0 <dispatch>
    1e24:	92 cf       	rjmp	.-220    	; 0x1d4a <run>

00001e26 <install>:
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    if (i >= 0 && i < N_VECTORS) {
    1e26:	42 31       	cpi	r20, 0x12	; 18
    1e28:	b8 f4       	brcc	.+46     	; 0x1e58 <install+0x32>
        char status;
        DISABLE(status);
    1e2a:	2f b7       	in	r18, 0x3f	; 63
    1e2c:	f8 94       	cli
        otable[i] = obj;
    1e2e:	50 e0       	ldi	r21, 0x00	; 0
    1e30:	44 0f       	add	r20, r20
    1e32:	55 1f       	adc	r21, r21
    1e34:	fa 01       	movw	r30, r20
    1e36:	ea 56       	subi	r30, 0x6A	; 106
    1e38:	fe 4f       	sbci	r31, 0xFE	; 254
    1e3a:	91 83       	std	Z+1, r25	; 0x01
    1e3c:	80 83       	st	Z, r24
        mtable[i] = m;
    1e3e:	fa 01       	movw	r30, r20
    1e40:	e2 5d       	subi	r30, 0xD2	; 210
    1e42:	fd 4f       	sbci	r31, 0xFD	; 253
    1e44:	71 83       	std	Z+1, r23	; 0x01
    1e46:	60 83       	st	Z, r22
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    1e48:	41 e0       	ldi	r20, 0x01	; 1
    1e4a:	50 e0       	ldi	r21, 0x00	; 0
    1e4c:	fc 01       	movw	r30, r24
    1e4e:	53 83       	std	Z+3, r21	; 0x03
    1e50:	42 83       	std	Z+2, r20	; 0x02
        ENABLE(status);
    1e52:	22 23       	and	r18, r18
    1e54:	0c f4       	brge	.+2      	; 0x1e58 <install+0x32>
    1e56:	78 94       	sei
    1e58:	08 95       	ret

00001e5a <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    1e5a:	8c 01       	movw	r16, r24
    1e5c:	7b 01       	movw	r14, r22
    1e5e:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    1e60:	8f b7       	in	r24, 0x3f	; 63
    1e62:	f8 94       	cli
    initialize();
    1e64:	0e 94 05 03 	call	0x60a	; 0x60a <initialize>
    ENABLE(1);
    1e68:	78 94       	sei
    if (m != NULL)
    1e6a:	e1 14       	cp	r14, r1
    1e6c:	f1 04       	cpc	r15, r1
    1e6e:	41 f0       	breq	.+16     	; 0x1e80 <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    1e70:	20 e0       	ldi	r18, 0x00	; 0
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	a9 01       	movw	r20, r18
    1e76:	60 e0       	ldi	r22, 0x00	; 0
    1e78:	70 e0       	ldi	r23, 0x00	; 0
    1e7a:	cb 01       	movw	r24, r22
    1e7c:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <async>
    DISABLE(status);
    1e80:	8f b7       	in	r24, 0x3f	; 63
    1e82:	f8 94       	cli
        }
    }
}

static void idle(void) {
    schedule();
    1e84:	0e 94 90 03 	call	0x720	; 0x720 <schedule>
    ENABLE(1);
    1e88:	78 94       	sei
    while (1) {
        SLEEP();
    1e8a:	81 e0       	ldi	r24, 0x01	; 1
    1e8c:	83 bf       	out	0x33, r24	; 51
    1e8e:	88 95       	sleep
    1e90:	fd cf       	rjmp	.-6      	; 0x1e8c <tinytimber+0x32>

00001e92 <__divmodsi4>:
    1e92:	05 2e       	mov	r0, r21
    1e94:	97 fb       	bst	r25, 7
    1e96:	1e f4       	brtc	.+6      	; 0x1e9e <__divmodsi4+0xc>
    1e98:	00 94       	com	r0
    1e9a:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <__negsi2>
    1e9e:	57 fd       	sbrc	r21, 7
    1ea0:	07 d0       	rcall	.+14     	; 0x1eb0 <__divmodsi4_neg2>
    1ea2:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <__udivmodsi4>
    1ea6:	07 fc       	sbrc	r0, 7
    1ea8:	03 d0       	rcall	.+6      	; 0x1eb0 <__divmodsi4_neg2>
    1eaa:	4e f4       	brtc	.+18     	; 0x1ebe <__divmodsi4_exit>
    1eac:	0c 94 60 0f 	jmp	0x1ec0	; 0x1ec0 <__negsi2>

00001eb0 <__divmodsi4_neg2>:
    1eb0:	50 95       	com	r21
    1eb2:	40 95       	com	r20
    1eb4:	30 95       	com	r19
    1eb6:	21 95       	neg	r18
    1eb8:	3f 4f       	sbci	r19, 0xFF	; 255
    1eba:	4f 4f       	sbci	r20, 0xFF	; 255
    1ebc:	5f 4f       	sbci	r21, 0xFF	; 255

00001ebe <__divmodsi4_exit>:
    1ebe:	08 95       	ret

00001ec0 <__negsi2>:
    1ec0:	90 95       	com	r25
    1ec2:	80 95       	com	r24
    1ec4:	70 95       	com	r23
    1ec6:	61 95       	neg	r22
    1ec8:	7f 4f       	sbci	r23, 0xFF	; 255
    1eca:	8f 4f       	sbci	r24, 0xFF	; 255
    1ecc:	9f 4f       	sbci	r25, 0xFF	; 255
    1ece:	08 95       	ret

00001ed0 <__tablejump2__>:
    1ed0:	ee 0f       	add	r30, r30
    1ed2:	ff 1f       	adc	r31, r31
    1ed4:	05 90       	lpm	r0, Z+
    1ed6:	f4 91       	lpm	r31, Z
    1ed8:	e0 2d       	mov	r30, r0
    1eda:	09 94       	ijmp

00001edc <__udivmodsi4>:
    1edc:	a1 e2       	ldi	r26, 0x21	; 33
    1ede:	1a 2e       	mov	r1, r26
    1ee0:	aa 1b       	sub	r26, r26
    1ee2:	bb 1b       	sub	r27, r27
    1ee4:	fd 01       	movw	r30, r26
    1ee6:	0d c0       	rjmp	.+26     	; 0x1f02 <__udivmodsi4_ep>

00001ee8 <__udivmodsi4_loop>:
    1ee8:	aa 1f       	adc	r26, r26
    1eea:	bb 1f       	adc	r27, r27
    1eec:	ee 1f       	adc	r30, r30
    1eee:	ff 1f       	adc	r31, r31
    1ef0:	a2 17       	cp	r26, r18
    1ef2:	b3 07       	cpc	r27, r19
    1ef4:	e4 07       	cpc	r30, r20
    1ef6:	f5 07       	cpc	r31, r21
    1ef8:	20 f0       	brcs	.+8      	; 0x1f02 <__udivmodsi4_ep>
    1efa:	a2 1b       	sub	r26, r18
    1efc:	b3 0b       	sbc	r27, r19
    1efe:	e4 0b       	sbc	r30, r20
    1f00:	f5 0b       	sbc	r31, r21

00001f02 <__udivmodsi4_ep>:
    1f02:	66 1f       	adc	r22, r22
    1f04:	77 1f       	adc	r23, r23
    1f06:	88 1f       	adc	r24, r24
    1f08:	99 1f       	adc	r25, r25
    1f0a:	1a 94       	dec	r1
    1f0c:	69 f7       	brne	.-38     	; 0x1ee8 <__udivmodsi4_loop>
    1f0e:	60 95       	com	r22
    1f10:	70 95       	com	r23
    1f12:	80 95       	com	r24
    1f14:	90 95       	com	r25
    1f16:	9b 01       	movw	r18, r22
    1f18:	ac 01       	movw	r20, r24
    1f1a:	bd 01       	movw	r22, r26
    1f1c:	cf 01       	movw	r24, r30
    1f1e:	08 95       	ret

00001f20 <setjmp>:
    1f20:	dc 01       	movw	r26, r24
    1f22:	2d 92       	st	X+, r2
    1f24:	3d 92       	st	X+, r3
    1f26:	4d 92       	st	X+, r4
    1f28:	5d 92       	st	X+, r5
    1f2a:	6d 92       	st	X+, r6
    1f2c:	7d 92       	st	X+, r7
    1f2e:	8d 92       	st	X+, r8
    1f30:	9d 92       	st	X+, r9
    1f32:	ad 92       	st	X+, r10
    1f34:	bd 92       	st	X+, r11
    1f36:	cd 92       	st	X+, r12
    1f38:	dd 92       	st	X+, r13
    1f3a:	ed 92       	st	X+, r14
    1f3c:	fd 92       	st	X+, r15
    1f3e:	0d 93       	st	X+, r16
    1f40:	1d 93       	st	X+, r17
    1f42:	cd 93       	st	X+, r28
    1f44:	dd 93       	st	X+, r29
    1f46:	ff 91       	pop	r31
    1f48:	ef 91       	pop	r30
    1f4a:	8d b7       	in	r24, 0x3d	; 61
    1f4c:	8d 93       	st	X+, r24
    1f4e:	8e b7       	in	r24, 0x3e	; 62
    1f50:	8d 93       	st	X+, r24
    1f52:	8f b7       	in	r24, 0x3f	; 63
    1f54:	8d 93       	st	X+, r24
    1f56:	ed 93       	st	X+, r30
    1f58:	fd 93       	st	X+, r31
    1f5a:	88 27       	eor	r24, r24
    1f5c:	99 27       	eor	r25, r25
    1f5e:	09 94       	ijmp

00001f60 <longjmp>:
    1f60:	dc 01       	movw	r26, r24
    1f62:	cb 01       	movw	r24, r22
    1f64:	81 30       	cpi	r24, 0x01	; 1
    1f66:	91 05       	cpc	r25, r1
    1f68:	81 1d       	adc	r24, r1
    1f6a:	2d 90       	ld	r2, X+
    1f6c:	3d 90       	ld	r3, X+
    1f6e:	4d 90       	ld	r4, X+
    1f70:	5d 90       	ld	r5, X+
    1f72:	6d 90       	ld	r6, X+
    1f74:	7d 90       	ld	r7, X+
    1f76:	8d 90       	ld	r8, X+
    1f78:	9d 90       	ld	r9, X+
    1f7a:	ad 90       	ld	r10, X+
    1f7c:	bd 90       	ld	r11, X+
    1f7e:	cd 90       	ld	r12, X+
    1f80:	dd 90       	ld	r13, X+
    1f82:	ed 90       	ld	r14, X+
    1f84:	fd 90       	ld	r15, X+
    1f86:	0d 91       	ld	r16, X+
    1f88:	1d 91       	ld	r17, X+
    1f8a:	cd 91       	ld	r28, X+
    1f8c:	dd 91       	ld	r29, X+
    1f8e:	ed 91       	ld	r30, X+
    1f90:	fd 91       	ld	r31, X+
    1f92:	0d 90       	ld	r0, X+
    1f94:	f8 94       	cli
    1f96:	fe bf       	out	0x3e, r31	; 62
    1f98:	0f be       	out	0x3f, r0	; 63
    1f9a:	ed bf       	out	0x3d, r30	; 61
    1f9c:	ed 91       	ld	r30, X+
    1f9e:	fd 91       	ld	r31, X+
    1fa0:	09 94       	ijmp

00001fa2 <_exit>:
    1fa2:	f8 94       	cli

00001fa4 <__stop_program>:
    1fa4:	ff cf       	rjmp	.-2      	; 0x1fa4 <__stop_program>
