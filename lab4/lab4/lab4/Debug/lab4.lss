
lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008e  00800100  000022ce  00002362  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000022ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000035f  0080018e  0080018e  000023f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000023f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002420  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b0  00000000  00000000  00002460  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000031fd  00000000  00000000  00002710  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001262  00000000  00000000  0000590d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017ff  00000000  00000000  00006b6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ce0  00000000  00000000  00008370  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a73  00000000  00000000  00009050  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002a3d  00000000  00000000  00009ac3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  0000c500  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 21 05 	jmp	0xa42	; 0xa42 <__vector_1>
       8:	0c 94 8d 05 	jmp	0xb1a	; 0xb1a <__vector_2>
       c:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__vector_3>
      10:	0c 94 65 06 	jmp	0xcca	; 0xcca <__vector_4>
      14:	0c 94 d1 06 	jmp	0xda2	; 0xda2 <__vector_5>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 a8 0d 	jmp	0x1b50	; 0x1b50 <__vector_7>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 56 0d 	jmp	0x1aac	; 0x1aac <__vector_9>
      28:	0c 94 3d 07 	jmp	0xe7a	; 0xe7a <__vector_10>
      2c:	0c 94 a9 07 	jmp	0xf52	; 0xf52 <__vector_11>
      30:	0c 94 15 08 	jmp	0x102a	; 0x102a <__vector_12>
      34:	0c 94 81 08 	jmp	0x1102	; 0x1102 <__vector_13>
      38:	0c 94 ed 08 	jmp	0x11da	; 0x11da <__vector_14>
      3c:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__vector_15>
      40:	0c 94 c5 09 	jmp	0x138a	; 0x138a <__vector_16>
      44:	0c 94 31 0a 	jmp	0x1462	; 0x1462 <__vector_17>
      48:	0c 94 9d 0a 	jmp	0x153a	; 0x153a <__vector_18>
      4c:	0c 94 09 0b 	jmp	0x1612	; 0x1612 <__vector_19>
      50:	0c 94 75 0b 	jmp	0x16ea	; 0x16ea <__vector_20>
      54:	0c 94 e1 0b 	jmp	0x17c2	; 0x17c2 <__vector_21>
      58:	0c 94 4d 0c 	jmp	0x189a	; 0x189a <__vector_22>
      5c:	a9 01       	movw	r20, r18
      5e:	8b 01       	movw	r16, r22
      60:	8e 01       	movw	r16, r28
      62:	91 01       	movw	r18, r2
      64:	94 01       	movw	r18, r8
      66:	97 01       	movw	r18, r14
      68:	9a 01       	movw	r18, r20
      6a:	9d 01       	movw	r18, r26
      6c:	a0 01       	movw	r20, r0
      6e:	a3 01       	movw	r20, r6

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	11 e0       	ldi	r17, 0x01	; 1
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	ee ec       	ldi	r30, 0xCE	; 206
      84:	f2 e2       	ldi	r31, 0x22	; 34
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	ae 38       	cpi	r26, 0x8E	; 142
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	24 e0       	ldi	r18, 0x04	; 4
      94:	ae e8       	ldi	r26, 0x8E	; 142
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	ad 3e       	cpi	r26, 0xED	; 237
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 ba 03 	call	0x774	; 0x774 <main>
      a6:	0c 94 65 11 	jmp	0x22ca	; 0x22ca <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <swithToLeftGen>:
#include "Backend.h"


void swithToLeftGen(Backend *self) {
      ae:	cf 92       	push	r12
      b0:	df 92       	push	r13
      b2:	ef 92       	push	r14
      b4:	ff 92       	push	r15
      b6:	0f 93       	push	r16
      b8:	1f 93       	push	r17
      ba:	cf 93       	push	r28
      bc:	df 93       	push	r29
      be:	ec 01       	movw	r28, r24
	self->activeGen = self->gen2;
      c0:	88 85       	ldd	r24, Y+8	; 0x08
      c2:	99 85       	ldd	r25, Y+9	; 0x09
      c4:	9b 87       	std	Y+11, r25	; 0x0b
      c6:	8a 87       	std	Y+10, r24	; 0x0a
	SYNC(self->gui, setActive, true);
      c8:	41 e0       	ldi	r20, 0x01	; 1
      ca:	50 e0       	ldi	r21, 0x00	; 0
      cc:	68 ee       	ldi	r22, 0xE8	; 232
      ce:	72 e0       	ldi	r23, 0x02	; 2
      d0:	8c 81       	ldd	r24, Y+4	; 0x04
      d2:	9d 81       	ldd	r25, Y+5	; 0x05
      d4:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <sync>
	SYNC(self->gen1, setStatus, 0);
      d8:	40 e0       	ldi	r20, 0x00	; 0
      da:	50 e0       	ldi	r21, 0x00	; 0
      dc:	68 e5       	ldi	r22, 0x58	; 88
      de:	74 e0       	ldi	r23, 0x04	; 4
      e0:	8e 81       	ldd	r24, Y+6	; 0x06
      e2:	9f 81       	ldd	r25, Y+7	; 0x07
      e4:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <sync>
	SYNC(self->gen2, setStatus, 1);
      e8:	41 e0       	ldi	r20, 0x01	; 1
      ea:	50 e0       	ldi	r21, 0x00	; 0
      ec:	68 e5       	ldi	r22, 0x58	; 88
      ee:	74 e0       	ldi	r23, 0x04	; 4
      f0:	88 85       	ldd	r24, Y+8	; 0x08
      f2:	99 85       	ldd	r25, Y+9	; 0x09
      f4:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <sync>
	ASYNC(self->gui, updateDisplay, 10);
      f8:	0c 81       	ldd	r16, Y+4	; 0x04
      fa:	1d 81       	ldd	r17, Y+5	; 0x05
      fc:	0f 2e       	mov	r0, r31
      fe:	fa e0       	ldi	r31, 0x0A	; 10
     100:	cf 2e       	mov	r12, r31
     102:	d1 2c       	mov	r13, r1
     104:	f0 2d       	mov	r31, r0
     106:	0f 2e       	mov	r0, r31
     108:	fb ee       	ldi	r31, 0xEB	; 235
     10a:	ef 2e       	mov	r14, r31
     10c:	f2 e0       	ldi	r31, 0x02	; 2
     10e:	ff 2e       	mov	r15, r31
     110:	f0 2d       	mov	r31, r0
     112:	20 e0       	ldi	r18, 0x00	; 0
     114:	30 e0       	ldi	r19, 0x00	; 0
     116:	a9 01       	movw	r20, r18
     118:	60 e0       	ldi	r22, 0x00	; 0
     11a:	70 e0       	ldi	r23, 0x00	; 0
     11c:	cb 01       	movw	r24, r22
     11e:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <async>
}
     122:	df 91       	pop	r29
     124:	cf 91       	pop	r28
     126:	1f 91       	pop	r17
     128:	0f 91       	pop	r16
     12a:	ff 90       	pop	r15
     12c:	ef 90       	pop	r14
     12e:	df 90       	pop	r13
     130:	cf 90       	pop	r12
     132:	08 95       	ret

00000134 <swithToRightGen>:

void swithToRightGen(Backend *self) {
     134:	cf 92       	push	r12
     136:	df 92       	push	r13
     138:	ef 92       	push	r14
     13a:	ff 92       	push	r15
     13c:	0f 93       	push	r16
     13e:	1f 93       	push	r17
     140:	cf 93       	push	r28
     142:	df 93       	push	r29
     144:	ec 01       	movw	r28, r24
	self->activeGen = self->gen1;
     146:	8e 81       	ldd	r24, Y+6	; 0x06
     148:	9f 81       	ldd	r25, Y+7	; 0x07
     14a:	9b 87       	std	Y+11, r25	; 0x0b
     14c:	8a 87       	std	Y+10, r24	; 0x0a
	SYNC(self->gui, setActive, false);
     14e:	40 e0       	ldi	r20, 0x00	; 0
     150:	50 e0       	ldi	r21, 0x00	; 0
     152:	68 ee       	ldi	r22, 0xE8	; 232
     154:	72 e0       	ldi	r23, 0x02	; 2
     156:	8c 81       	ldd	r24, Y+4	; 0x04
     158:	9d 81       	ldd	r25, Y+5	; 0x05
     15a:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <sync>
	SYNC(self->gen1, setStatus, 1);
     15e:	41 e0       	ldi	r20, 0x01	; 1
     160:	50 e0       	ldi	r21, 0x00	; 0
     162:	68 e5       	ldi	r22, 0x58	; 88
     164:	74 e0       	ldi	r23, 0x04	; 4
     166:	8e 81       	ldd	r24, Y+6	; 0x06
     168:	9f 81       	ldd	r25, Y+7	; 0x07
     16a:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <sync>
	SYNC(self->gen2, setStatus, 0);
     16e:	40 e0       	ldi	r20, 0x00	; 0
     170:	50 e0       	ldi	r21, 0x00	; 0
     172:	68 e5       	ldi	r22, 0x58	; 88
     174:	74 e0       	ldi	r23, 0x04	; 4
     176:	88 85       	ldd	r24, Y+8	; 0x08
     178:	99 85       	ldd	r25, Y+9	; 0x09
     17a:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <sync>
	ASYNC(self->gui, updateDisplay, 20);
     17e:	0c 81       	ldd	r16, Y+4	; 0x04
     180:	1d 81       	ldd	r17, Y+5	; 0x05
     182:	0f 2e       	mov	r0, r31
     184:	f4 e1       	ldi	r31, 0x14	; 20
     186:	cf 2e       	mov	r12, r31
     188:	d1 2c       	mov	r13, r1
     18a:	f0 2d       	mov	r31, r0
     18c:	0f 2e       	mov	r0, r31
     18e:	fb ee       	ldi	r31, 0xEB	; 235
     190:	ef 2e       	mov	r14, r31
     192:	f2 e0       	ldi	r31, 0x02	; 2
     194:	ff 2e       	mov	r15, r31
     196:	f0 2d       	mov	r31, r0
     198:	20 e0       	ldi	r18, 0x00	; 0
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	a9 01       	movw	r20, r18
     19e:	60 e0       	ldi	r22, 0x00	; 0
     1a0:	70 e0       	ldi	r23, 0x00	; 0
     1a2:	cb 01       	movw	r24, r22
     1a4:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <async>
}
     1a8:	df 91       	pop	r29
     1aa:	cf 91       	pop	r28
     1ac:	1f 91       	pop	r17
     1ae:	0f 91       	pop	r16
     1b0:	ff 90       	pop	r15
     1b2:	ef 90       	pop	r14
     1b4:	df 90       	pop	r13
     1b6:	cf 90       	pop	r12
     1b8:	08 95       	ret

000001ba <adjustFrequency>:

void adjustFrequency(Backend *self, int delta) {
     1ba:	cf 92       	push	r12
     1bc:	df 92       	push	r13
     1be:	ef 92       	push	r14
     1c0:	ff 92       	push	r15
     1c2:	0f 93       	push	r16
     1c4:	1f 93       	push	r17
     1c6:	cf 93       	push	r28
     1c8:	df 93       	push	r29
     1ca:	ec 01       	movw	r28, r24
     1cc:	8b 01       	movw	r16, r22
	// Get right target gen
	int newFreq = SYNC(self->activeGen, getFrequency, 0) + delta;
     1ce:	40 e0       	ldi	r20, 0x00	; 0
     1d0:	50 e0       	ldi	r21, 0x00	; 0
     1d2:	64 e5       	ldi	r22, 0x54	; 84
     1d4:	74 e0       	ldi	r23, 0x04	; 4
     1d6:	8a 85       	ldd	r24, Y+10	; 0x0a
     1d8:	9b 85       	ldd	r25, Y+11	; 0x0b
     1da:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <sync>
     1de:	ac 01       	movw	r20, r24
     1e0:	40 0f       	add	r20, r16
     1e2:	51 1f       	adc	r21, r17
	if (newFreq < 0) newFreq = 0;
	// Update everything
	SYNC(self->activeGen, setFrequency, newFreq);
     1e4:	55 23       	and	r21, r21
     1e6:	14 f4       	brge	.+4      	; 0x1ec <adjustFrequency+0x32>
     1e8:	40 e0       	ldi	r20, 0x00	; 0
     1ea:	50 e0       	ldi	r21, 0x00	; 0
     1ec:	64 e4       	ldi	r22, 0x44	; 68
     1ee:	74 e0       	ldi	r23, 0x04	; 4
     1f0:	8a 85       	ldd	r24, Y+10	; 0x0a
     1f2:	9b 85       	ldd	r25, Y+11	; 0x0b
     1f4:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <sync>
	ASYNC(self->gui, updateDisplay, 0);
     1f8:	0c 81       	ldd	r16, Y+4	; 0x04
     1fa:	1d 81       	ldd	r17, Y+5	; 0x05
     1fc:	c1 2c       	mov	r12, r1
     1fe:	d1 2c       	mov	r13, r1
     200:	0f 2e       	mov	r0, r31
     202:	fb ee       	ldi	r31, 0xEB	; 235
     204:	ef 2e       	mov	r14, r31
     206:	f2 e0       	ldi	r31, 0x02	; 2
     208:	ff 2e       	mov	r15, r31
     20a:	f0 2d       	mov	r31, r0
     20c:	20 e0       	ldi	r18, 0x00	; 0
     20e:	30 e0       	ldi	r19, 0x00	; 0
     210:	a9 01       	movw	r20, r18
     212:	60 e0       	ldi	r22, 0x00	; 0
     214:	70 e0       	ldi	r23, 0x00	; 0
     216:	cb 01       	movw	r24, r22
     218:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <async>
}
     21c:	df 91       	pop	r29
     21e:	cf 91       	pop	r28
     220:	1f 91       	pop	r17
     222:	0f 91       	pop	r16
     224:	ff 90       	pop	r15
     226:	ef 90       	pop	r14
     228:	df 90       	pop	r13
     22a:	cf 90       	pop	r12
     22c:	08 95       	ret

0000022e <saveRestore>:

void saveRestore(Backend *self) {
     22e:	cf 92       	push	r12
     230:	df 92       	push	r13
     232:	ef 92       	push	r14
     234:	ff 92       	push	r15
     236:	0f 93       	push	r16
     238:	1f 93       	push	r17
     23a:	cf 93       	push	r28
     23c:	df 93       	push	r29
     23e:	ec 01       	movw	r28, r24
	if (SYNC(self->activeGen, getFrequency, 0) == 0) {
     240:	40 e0       	ldi	r20, 0x00	; 0
     242:	50 e0       	ldi	r21, 0x00	; 0
     244:	64 e5       	ldi	r22, 0x54	; 84
     246:	74 e0       	ldi	r23, 0x04	; 4
     248:	8a 85       	ldd	r24, Y+10	; 0x0a
     24a:	9b 85       	ldd	r25, Y+11	; 0x0b
     24c:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <sync>
     250:	89 2b       	or	r24, r25
     252:	49 f4       	brne	.+18     	; 0x266 <saveRestore+0x38>
		SYNC(self->activeGen, restore, 0);
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	6e e4       	ldi	r22, 0x4E	; 78
     25a:	74 e0       	ldi	r23, 0x04	; 4
     25c:	8a 85       	ldd	r24, Y+10	; 0x0a
     25e:	9b 85       	ldd	r25, Y+11	; 0x0b
     260:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <sync>
     264:	10 c0       	rjmp	.+32     	; 0x286 <saveRestore+0x58>
		} else {
		SYNC(self->activeGen, save, 0);
     266:	40 e0       	ldi	r20, 0x00	; 0
     268:	50 e0       	ldi	r21, 0x00	; 0
     26a:	68 e4       	ldi	r22, 0x48	; 72
     26c:	74 e0       	ldi	r23, 0x04	; 4
     26e:	8a 85       	ldd	r24, Y+10	; 0x0a
     270:	9b 85       	ldd	r25, Y+11	; 0x0b
     272:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <sync>
		SYNC(self->activeGen, setFrequency, 0);
     276:	40 e0       	ldi	r20, 0x00	; 0
     278:	50 e0       	ldi	r21, 0x00	; 0
     27a:	64 e4       	ldi	r22, 0x44	; 68
     27c:	74 e0       	ldi	r23, 0x04	; 4
     27e:	8a 85       	ldd	r24, Y+10	; 0x0a
     280:	9b 85       	ldd	r25, Y+11	; 0x0b
     282:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <sync>
	}
	ASYNC(self->gui, updateDisplay, 0);
     286:	0c 81       	ldd	r16, Y+4	; 0x04
     288:	1d 81       	ldd	r17, Y+5	; 0x05
     28a:	c1 2c       	mov	r12, r1
     28c:	d1 2c       	mov	r13, r1
     28e:	0f 2e       	mov	r0, r31
     290:	fb ee       	ldi	r31, 0xEB	; 235
     292:	ef 2e       	mov	r14, r31
     294:	f2 e0       	ldi	r31, 0x02	; 2
     296:	ff 2e       	mov	r15, r31
     298:	f0 2d       	mov	r31, r0
     29a:	20 e0       	ldi	r18, 0x00	; 0
     29c:	30 e0       	ldi	r19, 0x00	; 0
     29e:	a9 01       	movw	r20, r18
     2a0:	60 e0       	ldi	r22, 0x00	; 0
     2a2:	70 e0       	ldi	r23, 0x00	; 0
     2a4:	cb 01       	movw	r24, r22
     2a6:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <async>
}
     2aa:	df 91       	pop	r29
     2ac:	cf 91       	pop	r28
     2ae:	1f 91       	pop	r17
     2b0:	0f 91       	pop	r16
     2b2:	ff 90       	pop	r15
     2b4:	ef 90       	pop	r14
     2b6:	df 90       	pop	r13
     2b8:	cf 90       	pop	r12
     2ba:	08 95       	ret

000002bc <startProgram>:

void startProgram(Backend *self) {
     2bc:	cf 93       	push	r28
     2be:	df 93       	push	r29
     2c0:	ec 01       	movw	r28, r24
	SYNC(self->gen1, genFreq, 0);
     2c2:	40 e0       	ldi	r20, 0x00	; 0
     2c4:	50 e0       	ldi	r21, 0x00	; 0
     2c6:	60 ef       	ldi	r22, 0xF0	; 240
     2c8:	73 e0       	ldi	r23, 0x03	; 3
     2ca:	8e 81       	ldd	r24, Y+6	; 0x06
     2cc:	9f 81       	ldd	r25, Y+7	; 0x07
     2ce:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <sync>
	SYNC(self->gen2, genFreq, 0);
     2d2:	40 e0       	ldi	r20, 0x00	; 0
     2d4:	50 e0       	ldi	r21, 0x00	; 0
     2d6:	60 ef       	ldi	r22, 0xF0	; 240
     2d8:	73 e0       	ldi	r23, 0x03	; 3
     2da:	88 85       	ldd	r24, Y+8	; 0x08
     2dc:	99 85       	ldd	r25, Y+9	; 0x09
     2de:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <sync>
}
     2e2:	df 91       	pop	r29
     2e4:	cf 91       	pop	r28
     2e6:	08 95       	ret

000002e8 <LCD_init>:
#include "PulseGen.h"
#include "TinyTimber.h"

void LCD_init() {
	// LCD(Contrast Control Register), LCD(Display Configuration)(000): 300 s, LCD(Contrast Control)(1111): 3.35 V
	LCDCCR = (0 << LCDDC0) | (0 << LCDDC1) | (0 << LCDDC2) | (1 << LCDCC0) | (1 << LCDCC1) | (1 << LCDCC2) | (1 << LCDCC3);
     2e8:	8f e0       	ldi	r24, 0x0F	; 15
     2ea:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__DATA_REGION_ORIGIN__+0x87>
	// LCDCS: asynchronous clock, LCDMUX(11): D=1/4, B=1/3, LCD(Port Mask): 25 segments
	LCDCRB = (1 << LCDCS) | (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM2) | (1 << LCDPM1) | (1 << LCDPM0);
     2ee:	87 eb       	ldi	r24, 0xB7	; 183
     2f0:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
	// LCD(Clock Divide)(111): (D=8) 32Hz
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);
     2f4:	87 e0       	ldi	r24, 0x07	; 7
     2f6:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__DATA_REGION_ORIGIN__+0x86>
	// LCD(Control and Status Register A), LCD(Enable): True, LCD(Low Power Waveform): True, (no frame interrupt, no blanking)
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
     2fa:	80 ec       	ldi	r24, 0xC0	; 192
     2fc:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
     300:	08 95       	ret

00000302 <getSegmentForChar>:
int none[] = {0b0000, 0b0000, 0b0000, 0b0000};

// Returns wall of data based on char input ('0' = 48 (char))
int* getSegmentForChar(char ch) {

	switch (ch) {
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	fc 01       	movw	r30, r24
     306:	f0 97       	sbiw	r30, 0x30	; 48
     308:	ea 30       	cpi	r30, 0x0A	; 10
     30a:	f1 05       	cpc	r31, r1
     30c:	f8 f4       	brcc	.+62     	; 0x34c <getSegmentForChar+0x4a>
     30e:	e2 5d       	subi	r30, 0xD2	; 210
     310:	ff 4f       	sbci	r31, 0xFF	; 255
     312:	0c 94 d2 10 	jmp	0x21a4	; 0x21a4 <__tablejump2__>
		case '0': return zero;
		case '1': return one;
     316:	80 e4       	ldi	r24, 0x40	; 64
     318:	91 e0       	ldi	r25, 0x01	; 1
     31a:	08 95       	ret
		case '2': return two;
     31c:	88 e3       	ldi	r24, 0x38	; 56
     31e:	91 e0       	ldi	r25, 0x01	; 1
     320:	08 95       	ret
		case '3': return three;
     322:	80 e3       	ldi	r24, 0x30	; 48
     324:	91 e0       	ldi	r25, 0x01	; 1
     326:	08 95       	ret
		case '4': return four;
     328:	88 e2       	ldi	r24, 0x28	; 40
     32a:	91 e0       	ldi	r25, 0x01	; 1
     32c:	08 95       	ret
		case '5': return five;
     32e:	80 e2       	ldi	r24, 0x20	; 32
     330:	91 e0       	ldi	r25, 0x01	; 1
     332:	08 95       	ret
		case '6': return six;
     334:	88 e1       	ldi	r24, 0x18	; 24
     336:	91 e0       	ldi	r25, 0x01	; 1
     338:	08 95       	ret
		case '7': return seven;
     33a:	80 e1       	ldi	r24, 0x10	; 16
     33c:	91 e0       	ldi	r25, 0x01	; 1
     33e:	08 95       	ret
		case '8': return eight;
     340:	88 e0       	ldi	r24, 0x08	; 8
     342:	91 e0       	ldi	r25, 0x01	; 1
     344:	08 95       	ret
		case '9': return nine;
     346:	80 e0       	ldi	r24, 0x00	; 0
     348:	91 e0       	ldi	r25, 0x01	; 1
     34a:	08 95       	ret
		default:  return none;
     34c:	8e e8       	ldi	r24, 0x8E	; 142
     34e:	91 e0       	ldi	r25, 0x01	; 1
     350:	08 95       	ret

// Returns wall of data based on char input ('0' = 48 (char))
int* getSegmentForChar(char ch) {

	switch (ch) {
		case '0': return zero;
     352:	88 e4       	ldi	r24, 0x48	; 72
     354:	91 e0       	ldi	r25, 0x01	; 1
		case '7': return seven;
		case '8': return eight;
		case '9': return nine;
		default:  return none;
	}
}
     356:	08 95       	ret

00000358 <writeChar>:

// Write a char ch at position pos
void writeChar(char ch, uint8_t pos) {
     358:	cf 93       	push	r28
	// Check if outside range
	if (pos > 5 || pos < 0) return;	
     35a:	66 30       	cpi	r22, 0x06	; 6
     35c:	08 f0       	brcs	.+2      	; 0x360 <writeChar+0x8>
     35e:	e4 c0       	rjmp	.+456    	; 0x528 <__stack+0x29>
     360:	c6 2f       	mov	r28, r22

	// Get correct char data
	int* segment = getSegmentForChar(ch);
     362:	0e 94 81 01 	call	0x302	; 0x302 <getSegmentForChar>
     366:	fc 01       	movw	r30, r24
	
	// Chose position
	switch (pos) {
     368:	c2 30       	cpi	r28, 0x02	; 2
     36a:	09 f4       	brne	.+2      	; 0x36e <writeChar+0x16>
     36c:	67 c0       	rjmp	.+206    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     36e:	28 f4       	brcc	.+10     	; 0x37a <writeChar+0x22>
     370:	cc 23       	and	r28, r28
     372:	51 f0       	breq	.+20     	; 0x388 <writeChar+0x30>
     374:	c1 30       	cpi	r28, 0x01	; 1
     376:	29 f1       	breq	.+74     	; 0x3c2 <writeChar+0x6a>
     378:	d7 c0       	rjmp	.+430    	; 0x528 <__stack+0x29>
     37a:	c3 30       	cpi	r28, 0x03	; 3
     37c:	09 f4       	brne	.+2      	; 0x380 <writeChar+0x28>
     37e:	7b c0       	rjmp	.+246    	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
     380:	c4 30       	cpi	r28, 0x04	; 4
     382:	09 f4       	brne	.+2      	; 0x386 <writeChar+0x2e>
     384:	b5 c0       	rjmp	.+362    	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
     386:	d0 c0       	rjmp	.+416    	; 0x528 <__stack+0x29>
		case 0:
			// Segment start at 0, 5, 10, 15, higher 4 bits.
			// (LCDDR0 & 0xF0) clears the segment before writing 
			LCDDR0 = (LCDDR0 & 0xF0) | segment[0];
     388:	ac ee       	ldi	r26, 0xEC	; 236
     38a:	b0 e0       	ldi	r27, 0x00	; 0
     38c:	8c 91       	ld	r24, X
     38e:	80 7f       	andi	r24, 0xF0	; 240
     390:	90 81       	ld	r25, Z
     392:	89 2b       	or	r24, r25
     394:	8c 93       	st	X, r24
			LCDDR5 = (LCDDR5 & 0xF0) | segment[1];
     396:	a1 ef       	ldi	r26, 0xF1	; 241
     398:	b0 e0       	ldi	r27, 0x00	; 0
     39a:	8c 91       	ld	r24, X
     39c:	80 7f       	andi	r24, 0xF0	; 240
     39e:	92 81       	ldd	r25, Z+2	; 0x02
     3a0:	89 2b       	or	r24, r25
     3a2:	8c 93       	st	X, r24
			LCDDR10 = (LCDDR10 & 0xF0) | segment[2];
     3a4:	a6 ef       	ldi	r26, 0xF6	; 246
     3a6:	b0 e0       	ldi	r27, 0x00	; 0
     3a8:	8c 91       	ld	r24, X
     3aa:	80 7f       	andi	r24, 0xF0	; 240
     3ac:	94 81       	ldd	r25, Z+4	; 0x04
     3ae:	89 2b       	or	r24, r25
     3b0:	8c 93       	st	X, r24
			LCDDR15 = (LCDDR15 & 0xF0) | segment[3];
     3b2:	ab ef       	ldi	r26, 0xFB	; 251
     3b4:	b0 e0       	ldi	r27, 0x00	; 0
     3b6:	8c 91       	ld	r24, X
     3b8:	80 7f       	andi	r24, 0xF0	; 240
     3ba:	96 81       	ldd	r25, Z+6	; 0x06
     3bc:	89 2b       	or	r24, r25
     3be:	8c 93       	st	X, r24
			break;
     3c0:	b3 c0       	rjmp	.+358    	; 0x528 <__stack+0x29>
		case 1:
			// Same segment just lower 4 bits
			LCDDR0 = (LCDDR0 & 0x0F) | (segment[0] << 4);
     3c2:	ac ee       	ldi	r26, 0xEC	; 236
     3c4:	b0 e0       	ldi	r27, 0x00	; 0
     3c6:	2c 91       	ld	r18, X
     3c8:	80 81       	ld	r24, Z
     3ca:	91 81       	ldd	r25, Z+1	; 0x01
     3cc:	82 95       	swap	r24
     3ce:	92 95       	swap	r25
     3d0:	90 7f       	andi	r25, 0xF0	; 240
     3d2:	98 27       	eor	r25, r24
     3d4:	80 7f       	andi	r24, 0xF0	; 240
     3d6:	98 27       	eor	r25, r24
     3d8:	92 2f       	mov	r25, r18
     3da:	9f 70       	andi	r25, 0x0F	; 15
     3dc:	89 2b       	or	r24, r25
     3de:	8c 93       	st	X, r24
			LCDDR5 = (LCDDR5 & 0x0F) | (segment[1] << 4);
     3e0:	a1 ef       	ldi	r26, 0xF1	; 241
     3e2:	b0 e0       	ldi	r27, 0x00	; 0
     3e4:	2c 91       	ld	r18, X
     3e6:	82 81       	ldd	r24, Z+2	; 0x02
     3e8:	93 81       	ldd	r25, Z+3	; 0x03
     3ea:	82 95       	swap	r24
     3ec:	92 95       	swap	r25
     3ee:	90 7f       	andi	r25, 0xF0	; 240
     3f0:	98 27       	eor	r25, r24
     3f2:	80 7f       	andi	r24, 0xF0	; 240
     3f4:	98 27       	eor	r25, r24
     3f6:	92 2f       	mov	r25, r18
     3f8:	9f 70       	andi	r25, 0x0F	; 15
     3fa:	89 2b       	or	r24, r25
     3fc:	8c 93       	st	X, r24
			LCDDR10 = (LCDDR10 & 0x0F) | (segment[2] << 4);
     3fe:	a6 ef       	ldi	r26, 0xF6	; 246
     400:	b0 e0       	ldi	r27, 0x00	; 0
     402:	2c 91       	ld	r18, X
     404:	84 81       	ldd	r24, Z+4	; 0x04
     406:	95 81       	ldd	r25, Z+5	; 0x05
     408:	82 95       	swap	r24
     40a:	92 95       	swap	r25
     40c:	90 7f       	andi	r25, 0xF0	; 240
     40e:	98 27       	eor	r25, r24
     410:	80 7f       	andi	r24, 0xF0	; 240
     412:	98 27       	eor	r25, r24
     414:	92 2f       	mov	r25, r18
     416:	9f 70       	andi	r25, 0x0F	; 15
     418:	89 2b       	or	r24, r25
     41a:	8c 93       	st	X, r24
			LCDDR15 = (LCDDR15 & 0x0F) | (segment[3] << 4);
     41c:	ab ef       	ldi	r26, 0xFB	; 251
     41e:	b0 e0       	ldi	r27, 0x00	; 0
     420:	2c 91       	ld	r18, X
     422:	86 81       	ldd	r24, Z+6	; 0x06
     424:	97 81       	ldd	r25, Z+7	; 0x07
     426:	82 95       	swap	r24
     428:	92 95       	swap	r25
     42a:	90 7f       	andi	r25, 0xF0	; 240
     42c:	98 27       	eor	r25, r24
     42e:	80 7f       	andi	r24, 0xF0	; 240
     430:	98 27       	eor	r25, r24
     432:	92 2f       	mov	r25, r18
     434:	9f 70       	andi	r25, 0x0F	; 15
     436:	89 2b       	or	r24, r25
     438:	8c 93       	st	X, r24
			break;
     43a:	76 c0       	rjmp	.+236    	; 0x528 <__stack+0x29>
		case 2:
			LCDDR1 = (LCDDR1 & 0xF0) | segment[0];
     43c:	ad ee       	ldi	r26, 0xED	; 237
     43e:	b0 e0       	ldi	r27, 0x00	; 0
     440:	8c 91       	ld	r24, X
     442:	80 7f       	andi	r24, 0xF0	; 240
     444:	90 81       	ld	r25, Z
     446:	89 2b       	or	r24, r25
     448:	8c 93       	st	X, r24
			LCDDR6 = (LCDDR6 & 0xF0) | segment[1];
     44a:	a2 ef       	ldi	r26, 0xF2	; 242
     44c:	b0 e0       	ldi	r27, 0x00	; 0
     44e:	8c 91       	ld	r24, X
     450:	80 7f       	andi	r24, 0xF0	; 240
     452:	92 81       	ldd	r25, Z+2	; 0x02
     454:	89 2b       	or	r24, r25
     456:	8c 93       	st	X, r24
			LCDDR11 = (LCDDR11 & 0xF0) | segment[2];
     458:	a7 ef       	ldi	r26, 0xF7	; 247
     45a:	b0 e0       	ldi	r27, 0x00	; 0
     45c:	8c 91       	ld	r24, X
     45e:	80 7f       	andi	r24, 0xF0	; 240
     460:	94 81       	ldd	r25, Z+4	; 0x04
     462:	89 2b       	or	r24, r25
     464:	8c 93       	st	X, r24
			LCDDR16 = (LCDDR16 & 0xF0) | segment[3];
     466:	ac ef       	ldi	r26, 0xFC	; 252
     468:	b0 e0       	ldi	r27, 0x00	; 0
     46a:	8c 91       	ld	r24, X
     46c:	80 7f       	andi	r24, 0xF0	; 240
     46e:	96 81       	ldd	r25, Z+6	; 0x06
     470:	89 2b       	or	r24, r25
     472:	8c 93       	st	X, r24
			break;
     474:	59 c0       	rjmp	.+178    	; 0x528 <__stack+0x29>
		case 3:
			LCDDR1 = (LCDDR1 & 0x0F) | (segment[0] << 4);
     476:	ad ee       	ldi	r26, 0xED	; 237
     478:	b0 e0       	ldi	r27, 0x00	; 0
     47a:	2c 91       	ld	r18, X
     47c:	80 81       	ld	r24, Z
     47e:	91 81       	ldd	r25, Z+1	; 0x01
     480:	82 95       	swap	r24
     482:	92 95       	swap	r25
     484:	90 7f       	andi	r25, 0xF0	; 240
     486:	98 27       	eor	r25, r24
     488:	80 7f       	andi	r24, 0xF0	; 240
     48a:	98 27       	eor	r25, r24
     48c:	92 2f       	mov	r25, r18
     48e:	9f 70       	andi	r25, 0x0F	; 15
     490:	89 2b       	or	r24, r25
     492:	8c 93       	st	X, r24
			LCDDR6 = (LCDDR6 & 0x0F) | (segment[1] << 4);
     494:	a2 ef       	ldi	r26, 0xF2	; 242
     496:	b0 e0       	ldi	r27, 0x00	; 0
     498:	2c 91       	ld	r18, X
     49a:	82 81       	ldd	r24, Z+2	; 0x02
     49c:	93 81       	ldd	r25, Z+3	; 0x03
     49e:	82 95       	swap	r24
     4a0:	92 95       	swap	r25
     4a2:	90 7f       	andi	r25, 0xF0	; 240
     4a4:	98 27       	eor	r25, r24
     4a6:	80 7f       	andi	r24, 0xF0	; 240
     4a8:	98 27       	eor	r25, r24
     4aa:	92 2f       	mov	r25, r18
     4ac:	9f 70       	andi	r25, 0x0F	; 15
     4ae:	89 2b       	or	r24, r25
     4b0:	8c 93       	st	X, r24
			LCDDR11 = (LCDDR11 & 0x0F) | (segment[2] << 4);
     4b2:	a7 ef       	ldi	r26, 0xF7	; 247
     4b4:	b0 e0       	ldi	r27, 0x00	; 0
     4b6:	2c 91       	ld	r18, X
     4b8:	84 81       	ldd	r24, Z+4	; 0x04
     4ba:	95 81       	ldd	r25, Z+5	; 0x05
     4bc:	82 95       	swap	r24
     4be:	92 95       	swap	r25
     4c0:	90 7f       	andi	r25, 0xF0	; 240
     4c2:	98 27       	eor	r25, r24
     4c4:	80 7f       	andi	r24, 0xF0	; 240
     4c6:	98 27       	eor	r25, r24
     4c8:	92 2f       	mov	r25, r18
     4ca:	9f 70       	andi	r25, 0x0F	; 15
     4cc:	89 2b       	or	r24, r25
     4ce:	8c 93       	st	X, r24
			LCDDR16 = (LCDDR16 & 0x0F) | (segment[3] << 4);
     4d0:	ac ef       	ldi	r26, 0xFC	; 252
     4d2:	b0 e0       	ldi	r27, 0x00	; 0
     4d4:	2c 91       	ld	r18, X
     4d6:	86 81       	ldd	r24, Z+6	; 0x06
     4d8:	97 81       	ldd	r25, Z+7	; 0x07
     4da:	82 95       	swap	r24
     4dc:	92 95       	swap	r25
     4de:	90 7f       	andi	r25, 0xF0	; 240
     4e0:	98 27       	eor	r25, r24
     4e2:	80 7f       	andi	r24, 0xF0	; 240
     4e4:	98 27       	eor	r25, r24
     4e6:	92 2f       	mov	r25, r18
     4e8:	9f 70       	andi	r25, 0x0F	; 15
     4ea:	89 2b       	or	r24, r25
     4ec:	8c 93       	st	X, r24
			break;
     4ee:	1c c0       	rjmp	.+56     	; 0x528 <__stack+0x29>
		case 4:
			LCDDR2 = (LCDDR2 & 0xF0) | segment[0];
     4f0:	ae ee       	ldi	r26, 0xEE	; 238
     4f2:	b0 e0       	ldi	r27, 0x00	; 0
     4f4:	8c 91       	ld	r24, X
     4f6:	80 7f       	andi	r24, 0xF0	; 240
     4f8:	90 81       	ld	r25, Z
     4fa:	89 2b       	or	r24, r25
     4fc:	8c 93       	st	X, r24
			LCDDR7 = (LCDDR7 & 0xF0) | segment[1];
     4fe:	a3 ef       	ldi	r26, 0xF3	; 243
     500:	b0 e0       	ldi	r27, 0x00	; 0
     502:	8c 91       	ld	r24, X
     504:	80 7f       	andi	r24, 0xF0	; 240
     506:	92 81       	ldd	r25, Z+2	; 0x02
     508:	89 2b       	or	r24, r25
     50a:	8c 93       	st	X, r24
			LCDDR12 = (LCDDR12 & 0xF0) | segment[2];
     50c:	a8 ef       	ldi	r26, 0xF8	; 248
     50e:	b0 e0       	ldi	r27, 0x00	; 0
     510:	8c 91       	ld	r24, X
     512:	80 7f       	andi	r24, 0xF0	; 240
     514:	94 81       	ldd	r25, Z+4	; 0x04
     516:	89 2b       	or	r24, r25
     518:	8c 93       	st	X, r24
			LCDDR17 = (LCDDR17 & 0xF0) | segment[3];
     51a:	ad ef       	ldi	r26, 0xFD	; 253
     51c:	b0 e0       	ldi	r27, 0x00	; 0
     51e:	8c 91       	ld	r24, X
     520:	80 7f       	andi	r24, 0xF0	; 240
     522:	96 81       	ldd	r25, Z+6	; 0x06
     524:	89 2b       	or	r24, r25
     526:	8c 93       	st	X, r24
			break;
	}
}
     528:	cf 91       	pop	r28
     52a:	08 95       	ret

0000052c <printAt>:

void printAt(long num, int pos) {
     52c:	8f 92       	push	r8
     52e:	9f 92       	push	r9
     530:	af 92       	push	r10
     532:	bf 92       	push	r11
     534:	cf 92       	push	r12
     536:	df 92       	push	r13
     538:	ef 92       	push	r14
     53a:	ff 92       	push	r15
     53c:	cf 93       	push	r28
     53e:	df 93       	push	r29
     540:	4b 01       	movw	r8, r22
     542:	5c 01       	movw	r10, r24
     544:	ea 01       	movw	r28, r20
	writeChar((num % 100) / 10 + '0', pos);
     546:	24 e6       	ldi	r18, 0x64	; 100
     548:	30 e0       	ldi	r19, 0x00	; 0
     54a:	40 e0       	ldi	r20, 0x00	; 0
     54c:	50 e0       	ldi	r21, 0x00	; 0
     54e:	0e 94 b3 10 	call	0x2166	; 0x2166 <__divmodsi4>
     552:	0f 2e       	mov	r0, r31
     554:	fa e0       	ldi	r31, 0x0A	; 10
     556:	cf 2e       	mov	r12, r31
     558:	d1 2c       	mov	r13, r1
     55a:	e1 2c       	mov	r14, r1
     55c:	f1 2c       	mov	r15, r1
     55e:	f0 2d       	mov	r31, r0
     560:	a7 01       	movw	r20, r14
     562:	96 01       	movw	r18, r12
     564:	0e 94 b3 10 	call	0x2166	; 0x2166 <__divmodsi4>
     568:	6c 2f       	mov	r22, r28
     56a:	80 e3       	ldi	r24, 0x30	; 48
     56c:	82 0f       	add	r24, r18
     56e:	0e 94 ac 01 	call	0x358	; 0x358 <writeChar>
	pos++;
	writeChar(num % 10 + '0', pos);
     572:	21 96       	adiw	r28, 0x01	; 1
     574:	c5 01       	movw	r24, r10
     576:	b4 01       	movw	r22, r8
     578:	a7 01       	movw	r20, r14
     57a:	96 01       	movw	r18, r12
     57c:	0e 94 b3 10 	call	0x2166	; 0x2166 <__divmodsi4>
     580:	86 2f       	mov	r24, r22
     582:	6c 2f       	mov	r22, r28
     584:	80 5d       	subi	r24, 0xD0	; 208
     586:	0e 94 ac 01 	call	0x358	; 0x358 <writeChar>
}
     58a:	df 91       	pop	r29
     58c:	cf 91       	pop	r28
     58e:	ff 90       	pop	r15
     590:	ef 90       	pop	r14
     592:	df 90       	pop	r13
     594:	cf 90       	pop	r12
     596:	bf 90       	pop	r11
     598:	af 90       	pop	r10
     59a:	9f 90       	pop	r9
     59c:	8f 90       	pop	r8
     59e:	08 95       	ret

000005a0 <activeGenIndicator>:

void activeGenIndicator(GUI *self, int activeGen) {
     5a0:	dc 01       	movw	r26, r24
	LCDDR0 &= ~(0b01000100);
     5a2:	ec ee       	ldi	r30, 0xEC	; 236
     5a4:	f0 e0       	ldi	r31, 0x00	; 0
     5a6:	90 81       	ld	r25, Z
     5a8:	9b 7b       	andi	r25, 0xBB	; 187
     5aa:	90 83       	st	Z, r25
	if (!(self->leftActive)) {
     5ac:	14 96       	adiw	r26, 0x04	; 4
     5ae:	8c 91       	ld	r24, X
     5b0:	14 97       	sbiw	r26, 0x04	; 4
     5b2:	81 11       	cpse	r24, r1
     5b4:	07 c0       	rjmp	.+14     	; 0x5c4 <activeGenIndicator+0x24>
		LCDDR0 |= 0b00000100;
     5b6:	80 81       	ld	r24, Z
     5b8:	84 60       	ori	r24, 0x04	; 4
     5ba:	80 83       	st	Z, r24
	} 
	if (self->leftActive) {
     5bc:	14 96       	adiw	r26, 0x04	; 4
     5be:	8c 91       	ld	r24, X
     5c0:	88 23       	and	r24, r24
     5c2:	29 f0       	breq	.+10     	; 0x5ce <activeGenIndicator+0x2e>
		LCDDR0 |= 0b01000000;
     5c4:	ec ee       	ldi	r30, 0xEC	; 236
     5c6:	f0 e0       	ldi	r31, 0x00	; 0
     5c8:	80 81       	ld	r24, Z
     5ca:	80 64       	ori	r24, 0x40	; 64
     5cc:	80 83       	st	Z, r24
     5ce:	08 95       	ret

000005d0 <setActive>:
	}
}

void setActive(GUI *self, bool status) {
	self->leftActive = status;
     5d0:	fc 01       	movw	r30, r24
     5d2:	64 83       	std	Z+4, r22	; 0x04
     5d4:	08 95       	ret

000005d6 <updateDisplay>:
}

void updateDisplay(GUI *self, int activeGen) {
     5d6:	cf 92       	push	r12
     5d8:	df 92       	push	r13
     5da:	ef 92       	push	r14
     5dc:	ff 92       	push	r15
     5de:	0f 93       	push	r16
     5e0:	1f 93       	push	r17
     5e2:	cf 93       	push	r28
     5e4:	df 93       	push	r29
     5e6:	ec 01       	movw	r28, r24
     5e8:	7b 01       	movw	r14, r22
	int gen1Freq = SYNC(self->gen1, getFrequency, 0);
     5ea:	40 e0       	ldi	r20, 0x00	; 0
     5ec:	50 e0       	ldi	r21, 0x00	; 0
     5ee:	64 e5       	ldi	r22, 0x54	; 84
     5f0:	74 e0       	ldi	r23, 0x04	; 4
     5f2:	8d 81       	ldd	r24, Y+5	; 0x05
     5f4:	9e 81       	ldd	r25, Y+6	; 0x06
     5f6:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <sync>
     5fa:	6c 01       	movw	r12, r24
	int gen2Freq = SYNC(self->gen2, getFrequency, 0);
     5fc:	40 e0       	ldi	r20, 0x00	; 0
     5fe:	50 e0       	ldi	r21, 0x00	; 0
     600:	64 e5       	ldi	r22, 0x54	; 84
     602:	74 e0       	ldi	r23, 0x04	; 4
     604:	8f 81       	ldd	r24, Y+7	; 0x07
     606:	98 85       	ldd	r25, Y+8	; 0x08
     608:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <sync>
     60c:	8c 01       	movw	r16, r24
	printAt(gen1Freq, 0); //gen1 hz at pos 0-1
     60e:	b6 01       	movw	r22, r12
     610:	dd 0c       	add	r13, r13
     612:	88 0b       	sbc	r24, r24
     614:	99 0b       	sbc	r25, r25
     616:	40 e0       	ldi	r20, 0x00	; 0
     618:	50 e0       	ldi	r21, 0x00	; 0
     61a:	0e 94 96 02 	call	0x52c	; 0x52c <printAt>
	printAt(gen2Freq, 3); //gen2 hz at pos 3-4
     61e:	b8 01       	movw	r22, r16
     620:	11 0f       	add	r17, r17
     622:	88 0b       	sbc	r24, r24
     624:	99 0b       	sbc	r25, r25
     626:	43 e0       	ldi	r20, 0x03	; 3
     628:	50 e0       	ldi	r21, 0x00	; 0
     62a:	0e 94 96 02 	call	0x52c	; 0x52c <printAt>
	activeGenIndicator(self, activeGen);
     62e:	b7 01       	movw	r22, r14
     630:	ce 01       	movw	r24, r28
     632:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <activeGenIndicator>
}
     636:	df 91       	pop	r29
     638:	cf 91       	pop	r28
     63a:	1f 91       	pop	r17
     63c:	0f 91       	pop	r16
     63e:	ff 90       	pop	r15
     640:	ef 90       	pop	r14
     642:	df 90       	pop	r13
     644:	cf 90       	pop	r12
     646:	08 95       	ret

00000648 <joystickInit>:
#include "joystickHandler.h"


void joystickInit() {
    // Input for: Down, Up, Click
    PORTB |= (1 << PB7) | (1 << PB6) | (1 << PB4);
     648:	85 b1       	in	r24, 0x05	; 5
     64a:	80 6d       	ori	r24, 0xD0	; 208
     64c:	85 b9       	out	0x05, r24	; 5
    // Input for; Left, Right
    PORTE |= (1 << PE3) | (1 << PE2);
     64e:	8e b1       	in	r24, 0x0e	; 14
     650:	8c 60       	ori	r24, 0x0C	; 12
     652:	8e b9       	out	0x0e, r24	; 14
    // Turn on interrupts
    EIMSK |= (1 << PCINT15) | (1 << PCINT14);
     654:	8d b3       	in	r24, 0x1d	; 29
     656:	80 6c       	ori	r24, 0xC0	; 192
     658:	8d bb       	out	0x1d, r24	; 29

    // Define interrupts from PB7,6,4
    PCMSK1 |= (1 << PCINT15) | (1 << PCINT14) | (1 << PCINT12);
     65a:	ec e6       	ldi	r30, 0x6C	; 108
     65c:	f0 e0       	ldi	r31, 0x00	; 0
     65e:	80 81       	ld	r24, Z
     660:	80 6d       	ori	r24, 0xD0	; 208
     662:	80 83       	st	Z, r24
    // Define interrupts from PE3,2
    PCMSK0 |= (1 << PCINT3) | (1 << PCINT2);
     664:	eb e6       	ldi	r30, 0x6B	; 107
     666:	f0 e0       	ldi	r31, 0x00	; 0
     668:	80 81       	ld	r24, Z
     66a:	8c 60       	ori	r24, 0x0C	; 12
     66c:	80 83       	st	Z, r24
     66e:	08 95       	ret

00000670 <joystickInteruptHandler>:
}


// Joystick input handler
void joystickInteruptHandler(JoystickHandler *self) { 
     670:	cf 92       	push	r12
     672:	df 92       	push	r13
     674:	ef 92       	push	r14
     676:	ff 92       	push	r15
     678:	0f 93       	push	r16
     67a:	1f 93       	push	r17
     67c:	cf 93       	push	r28
     67e:	df 93       	push	r29
     680:	ec 01       	movw	r28, r24
    // Down
    if (!(PINB & (1 << PB7))) {
     682:	1f 99       	sbic	0x03, 7	; 3
     684:	13 c0       	rjmp	.+38     	; 0x6ac <joystickInteruptHandler+0x3c>
		ASYNC(self->BE, adjustFrequency, -1);
     686:	0c 81       	ldd	r16, Y+4	; 0x04
     688:	1d 81       	ldd	r17, Y+5	; 0x05
     68a:	cc 24       	eor	r12, r12
     68c:	ca 94       	dec	r12
     68e:	dc 2c       	mov	r13, r12
     690:	0f 2e       	mov	r0, r31
     692:	fd ed       	ldi	r31, 0xDD	; 221
     694:	ef 2e       	mov	r14, r31
     696:	f0 e0       	ldi	r31, 0x00	; 0
     698:	ff 2e       	mov	r15, r31
     69a:	f0 2d       	mov	r31, r0
     69c:	20 e0       	ldi	r18, 0x00	; 0
     69e:	30 e0       	ldi	r19, 0x00	; 0
     6a0:	a9 01       	movw	r20, r18
     6a2:	60 e0       	ldi	r22, 0x00	; 0
     6a4:	70 e0       	ldi	r23, 0x00	; 0
     6a6:	cb 01       	movw	r24, r22
     6a8:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <async>
	    //holdDown(self);
    }
    // Up
    if (!(PINB & (1 << PB6))) {
     6ac:	1e 99       	sbic	0x03, 6	; 3
     6ae:	13 c0       	rjmp	.+38     	; 0x6d6 <joystickInteruptHandler+0x66>
        ASYNC(self->BE, adjustFrequency, 1);
     6b0:	0c 81       	ldd	r16, Y+4	; 0x04
     6b2:	1d 81       	ldd	r17, Y+5	; 0x05
     6b4:	cc 24       	eor	r12, r12
     6b6:	c3 94       	inc	r12
     6b8:	d1 2c       	mov	r13, r1
     6ba:	0f 2e       	mov	r0, r31
     6bc:	fd ed       	ldi	r31, 0xDD	; 221
     6be:	ef 2e       	mov	r14, r31
     6c0:	f0 e0       	ldi	r31, 0x00	; 0
     6c2:	ff 2e       	mov	r15, r31
     6c4:	f0 2d       	mov	r31, r0
     6c6:	20 e0       	ldi	r18, 0x00	; 0
     6c8:	30 e0       	ldi	r19, 0x00	; 0
     6ca:	a9 01       	movw	r20, r18
     6cc:	60 e0       	ldi	r22, 0x00	; 0
     6ce:	70 e0       	ldi	r23, 0x00	; 0
     6d0:	cb 01       	movw	r24, r22
     6d2:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <async>
		//holdUp(self);
    }
    // In
    if (!(PINB & (1 << PB4))) {
     6d6:	1c 99       	sbic	0x03, 4	; 3
     6d8:	12 c0       	rjmp	.+36     	; 0x6fe <joystickInteruptHandler+0x8e>
        ASYNC(self->BE, saveRestore, 0);
     6da:	0c 81       	ldd	r16, Y+4	; 0x04
     6dc:	1d 81       	ldd	r17, Y+5	; 0x05
     6de:	c1 2c       	mov	r12, r1
     6e0:	d1 2c       	mov	r13, r1
     6e2:	0f 2e       	mov	r0, r31
     6e4:	f7 e1       	ldi	r31, 0x17	; 23
     6e6:	ef 2e       	mov	r14, r31
     6e8:	f1 e0       	ldi	r31, 0x01	; 1
     6ea:	ff 2e       	mov	r15, r31
     6ec:	f0 2d       	mov	r31, r0
     6ee:	20 e0       	ldi	r18, 0x00	; 0
     6f0:	30 e0       	ldi	r19, 0x00	; 0
     6f2:	a9 01       	movw	r20, r18
     6f4:	60 e0       	ldi	r22, 0x00	; 0
     6f6:	70 e0       	ldi	r23, 0x00	; 0
     6f8:	cb 01       	movw	r24, r22
     6fa:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <async>
		//saveRestore(self->gui);
    }
    // Right
    if (!(PINE & (1 << PB2))) {
     6fe:	62 99       	sbic	0x0c, 2	; 12
     700:	12 c0       	rjmp	.+36     	; 0x726 <joystickInteruptHandler+0xb6>
        ASYNC(self->BE, swithToRightGen, 0);
     702:	0c 81       	ldd	r16, Y+4	; 0x04
     704:	1d 81       	ldd	r17, Y+5	; 0x05
     706:	c1 2c       	mov	r12, r1
     708:	d1 2c       	mov	r13, r1
     70a:	0f 2e       	mov	r0, r31
     70c:	fa e9       	ldi	r31, 0x9A	; 154
     70e:	ef 2e       	mov	r14, r31
     710:	f0 e0       	ldi	r31, 0x00	; 0
     712:	ff 2e       	mov	r15, r31
     714:	f0 2d       	mov	r31, r0
     716:	20 e0       	ldi	r18, 0x00	; 0
     718:	30 e0       	ldi	r19, 0x00	; 0
     71a:	a9 01       	movw	r20, r18
     71c:	60 e0       	ldi	r22, 0x00	; 0
     71e:	70 e0       	ldi	r23, 0x00	; 0
     720:	cb 01       	movw	r24, r22
     722:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <async>
		//swithToLeftGen(self->gui);
    }
    // Left
    if (!(PINE & (1 << PB3))) {
     726:	63 99       	sbic	0x0c, 3	; 12
     728:	12 c0       	rjmp	.+36     	; 0x74e <joystickInteruptHandler+0xde>
        ASYNC(self->BE, swithToLeftGen, 0);
     72a:	0c 81       	ldd	r16, Y+4	; 0x04
     72c:	1d 81       	ldd	r17, Y+5	; 0x05
     72e:	c1 2c       	mov	r12, r1
     730:	d1 2c       	mov	r13, r1
     732:	0f 2e       	mov	r0, r31
     734:	f7 e5       	ldi	r31, 0x57	; 87
     736:	ef 2e       	mov	r14, r31
     738:	f0 e0       	ldi	r31, 0x00	; 0
     73a:	ff 2e       	mov	r15, r31
     73c:	f0 2d       	mov	r31, r0
     73e:	20 e0       	ldi	r18, 0x00	; 0
     740:	30 e0       	ldi	r19, 0x00	; 0
     742:	a9 01       	movw	r20, r18
     744:	60 e0       	ldi	r22, 0x00	; 0
     746:	70 e0       	ldi	r23, 0x00	; 0
     748:	cb 01       	movw	r24, r22
     74a:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <async>
		//swithToRightGen(self->gui);
    }
     74e:	df 91       	pop	r29
     750:	cf 91       	pop	r28
     752:	1f 91       	pop	r17
     754:	0f 91       	pop	r16
     756:	ff 90       	pop	r15
     758:	ef 90       	pop	r14
     75a:	df 90       	pop	r13
     75c:	cf 90       	pop	r12
     75e:	08 95       	ret

00000760 <sysInit>:
Backend BE = initBackend(&gen1, &gen2, &gui);
JoystickHandler joystick = initJoystickHandler(&BE);

void sysInit(){
    // Clock Prescale Register "maximum speed"
	CLKPR = 0b10000000; // Clock Prescaler Change Enable
     760:	e1 e6       	ldi	r30, 0x61	; 97
     762:	f0 e0       	ldi	r31, 0x00	; 0
     764:	80 e8       	ldi	r24, 0x80	; 128
     766:	80 83       	st	Z, r24
	CLKPR = 0b00000000; // Set 0 for sysclock
     768:	10 82       	st	Z, r1
     76a:	08 95       	ret

0000076c <pinOutputInit>:
}

void pinOutputInit(){
    // Initialize Port E as output for PE4 and PE6
	DDRE |= (1 << PE4) | (1 << PE6);
     76c:	8d b1       	in	r24, 0x0d	; 13
     76e:	80 65       	ori	r24, 0x50	; 80
     770:	8d b9       	out	0x0d, r24	; 13
     772:	08 95       	ret

00000774 <main>:
}

int main() {
    sysInit();
     774:	0e 94 b0 03 	call	0x760	; 0x760 <sysInit>
    pinOutputInit(); // Is this needed
     778:	0e 94 b6 03 	call	0x76c	; 0x76c <pinOutputInit>
    joystickInit();
     77c:	0e 94 24 03 	call	0x648	; 0x648 <joystickInit>
    LCD_init();
     780:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LCD_init>
	//freqInit(&gen2);
    
	
    // Instal interupt handler
    //when the joystick's vertical state changes
    INSTALL(&joystick, joystickInteruptHandler, IRQ_PCINT0);
     784:	41 e0       	ldi	r20, 0x01	; 1
     786:	68 e3       	ldi	r22, 0x38	; 56
     788:	73 e0       	ldi	r23, 0x03	; 3
     78a:	80 e5       	ldi	r24, 0x50	; 80
     78c:	91 e0       	ldi	r25, 0x01	; 1
     78e:	0e 94 69 10 	call	0x20d2	; 0x20d2 <install>
	INSTALL(&joystick, joystickInteruptHandler, IRQ_PCINT1);
     792:	42 e0       	ldi	r20, 0x02	; 2
     794:	68 e3       	ldi	r22, 0x38	; 56
     796:	73 e0       	ldi	r23, 0x03	; 3
     798:	80 e5       	ldi	r24, 0x50	; 80
     79a:	91 e0       	ldi	r25, 0x01	; 1
     79c:	0e 94 69 10 	call	0x20d2	; 0x20d2 <install>
    //when the joystick's horizontal (minus middle) state changes
    
    // Start kernel
    return TINYTIMBER(&BE, startProgram, NULL);
     7a0:	40 e0       	ldi	r20, 0x00	; 0
     7a2:	50 e0       	ldi	r21, 0x00	; 0
     7a4:	6e e5       	ldi	r22, 0x5E	; 94
     7a6:	71 e0       	ldi	r23, 0x01	; 1
     7a8:	86 e5       	ldi	r24, 0x56	; 86
     7aa:	91 e0       	ldi	r25, 0x01	; 1
     7ac:	0e 94 83 10 	call	0x2106	; 0x2106 <tinytimber>
}
     7b0:	08 95       	ret

000007b2 <turnOffPin>:
#include "PortWrite.h"
#include "TinyTimber.h"

// Set a specific bit on Port E high or low
void turnOffPin(PortWrite *self, uint8_t bit) {
    PORTE &= ~(1 << bit);
     7b2:	2e b1       	in	r18, 0x0e	; 14
     7b4:	81 e0       	ldi	r24, 0x01	; 1
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	02 c0       	rjmp	.+4      	; 0x7be <turnOffPin+0xc>
     7ba:	88 0f       	add	r24, r24
     7bc:	99 1f       	adc	r25, r25
     7be:	6a 95       	dec	r22
     7c0:	e2 f7       	brpl	.-8      	; 0x7ba <turnOffPin+0x8>
     7c2:	80 95       	com	r24
     7c4:	82 23       	and	r24, r18
     7c6:	8e b9       	out	0x0e, r24	; 14
     7c8:	08 95       	ret

000007ca <togglePin>:
}

// Toggle a specific bit on Port E
void togglePin(PortWrite *self, uint8_t bit) {
    PORTE ^= (1 << bit);   // Toggle the bit
     7ca:	2e b1       	in	r18, 0x0e	; 14
     7cc:	81 e0       	ldi	r24, 0x01	; 1
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	02 c0       	rjmp	.+4      	; 0x7d6 <togglePin+0xc>
     7d2:	88 0f       	add	r24, r24
     7d4:	99 1f       	adc	r25, r25
     7d6:	6a 95       	dec	r22
     7d8:	e2 f7       	brpl	.-8      	; 0x7d2 <togglePin+0x8>
     7da:	82 27       	eor	r24, r18
     7dc:	8e b9       	out	0x0e, r24	; 14
     7de:	08 95       	ret

000007e0 <genFreq>:
#include "PortWrite.h"
#include "TinyTimber.h"

void freqInit(PulseGen *self) {
	ASYNC(self, genFreq, 0);
}
     7e0:	cf 92       	push	r12
     7e2:	df 92       	push	r13
     7e4:	ef 92       	push	r14
     7e6:	ff 92       	push	r15
     7e8:	0f 93       	push	r16
     7ea:	1f 93       	push	r17
     7ec:	cf 93       	push	r28
     7ee:	df 93       	push	r29
     7f0:	ec 01       	movw	r28, r24
     7f2:	0e 81       	ldd	r16, Y+6	; 0x06
     7f4:	1f 81       	ldd	r17, Y+7	; 0x07
     7f6:	10 16       	cp	r1, r16
     7f8:	11 06       	cpc	r1, r17
     7fa:	9c f5       	brge	.+102    	; 0x862 <genFreq+0x82>
     7fc:	4c 81       	ldd	r20, Y+4	; 0x04
     7fe:	50 e0       	ldi	r21, 0x00	; 0
     800:	65 ee       	ldi	r22, 0xE5	; 229
     802:	73 e0       	ldi	r23, 0x03	; 3
     804:	8a 85       	ldd	r24, Y+10	; 0x0a
     806:	9b 85       	ldd	r25, Y+11	; 0x0b
     808:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <sync>
     80c:	84 ef       	ldi	r24, 0xF4	; 244
     80e:	91 e0       	ldi	r25, 0x01	; 1
     810:	b8 01       	movw	r22, r16
     812:	0e 94 9f 10 	call	0x213e	; 0x213e <__divmodhi4>
     816:	2d e7       	ldi	r18, 0x7D	; 125
     818:	30 e0       	ldi	r19, 0x00	; 0
     81a:	db 01       	movw	r26, r22
     81c:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <__usmulhisi3>
     820:	8b 01       	movw	r16, r22
     822:	9c 01       	movw	r18, r24
     824:	99 23       	and	r25, r25
     826:	24 f4       	brge	.+8      	; 0x830 <genFreq+0x50>
     828:	0d 5f       	subi	r16, 0xFD	; 253
     82a:	1f 4f       	sbci	r17, 0xFF	; 255
     82c:	2f 4f       	sbci	r18, 0xFF	; 255
     82e:	3f 4f       	sbci	r19, 0xFF	; 255
     830:	c9 01       	movw	r24, r18
     832:	b8 01       	movw	r22, r16
     834:	95 95       	asr	r25
     836:	87 95       	ror	r24
     838:	77 95       	ror	r23
     83a:	67 95       	ror	r22
     83c:	95 95       	asr	r25
     83e:	87 95       	ror	r24
     840:	77 95       	ror	r23
     842:	67 95       	ror	r22
     844:	c1 2c       	mov	r12, r1
     846:	d1 2c       	mov	r13, r1
     848:	0f 2e       	mov	r0, r31
     84a:	f0 ef       	ldi	r31, 0xF0	; 240
     84c:	ef 2e       	mov	r14, r31
     84e:	f3 e0       	ldi	r31, 0x03	; 3
     850:	ff 2e       	mov	r15, r31
     852:	f0 2d       	mov	r31, r0
     854:	8e 01       	movw	r16, r28
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	a9 01       	movw	r20, r18
     85c:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <async>
     860:	08 c0       	rjmp	.+16     	; 0x872 <genFreq+0x92>
     862:	4c 81       	ldd	r20, Y+4	; 0x04
     864:	50 e0       	ldi	r21, 0x00	; 0
     866:	69 ed       	ldi	r22, 0xD9	; 217
     868:	73 e0       	ldi	r23, 0x03	; 3
     86a:	8a 85       	ldd	r24, Y+10	; 0x0a
     86c:	9b 85       	ldd	r25, Y+11	; 0x0b
     86e:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <sync>
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	df 91       	pop	r29
     878:	cf 91       	pop	r28
     87a:	1f 91       	pop	r17
     87c:	0f 91       	pop	r16
     87e:	ff 90       	pop	r15
     880:	ef 90       	pop	r14
     882:	df 90       	pop	r13
     884:	cf 90       	pop	r12
     886:	08 95       	ret

00000888 <setFrequency>:


void setFrequency(PulseGen *self, int freq) {
	self->frequency = freq;
     888:	fc 01       	movw	r30, r24
     88a:	77 83       	std	Z+7, r23	; 0x07
     88c:	66 83       	std	Z+6, r22	; 0x06
     88e:	08 95       	ret

00000890 <save>:
}

// Saves the freq
void save(PulseGen *self) {
	self->saved_freq = self->frequency;
     890:	fc 01       	movw	r30, r24
     892:	26 81       	ldd	r18, Z+6	; 0x06
     894:	37 81       	ldd	r19, Z+7	; 0x07
     896:	31 87       	std	Z+9, r19	; 0x09
     898:	20 87       	std	Z+8, r18	; 0x08
     89a:	08 95       	ret

0000089c <restore>:
}

// Restores freq to last saved
void restore(PulseGen *self) {
	self->frequency = self->saved_freq;
     89c:	fc 01       	movw	r30, r24
     89e:	20 85       	ldd	r18, Z+8	; 0x08
     8a0:	31 85       	ldd	r19, Z+9	; 0x09
     8a2:	37 83       	std	Z+7, r19	; 0x07
     8a4:	26 83       	std	Z+6, r18	; 0x06
     8a6:	08 95       	ret

000008a8 <getFrequency>:
}

int getFrequency(PulseGen *self) {
	return self->frequency;
}
     8a8:	fc 01       	movw	r30, r24
     8aa:	86 81       	ldd	r24, Z+6	; 0x06
     8ac:	97 81       	ldd	r25, Z+7	; 0x07
     8ae:	08 95       	ret

000008b0 <setStatus>:

void setStatus(PulseGen *self, bool status) {
	self->genStatus = status;
     8b0:	fc 01       	movw	r30, r24
     8b2:	64 87       	std	Z+12, r22	; 0x0c
     8b4:	08 95       	ret

000008b6 <initialize>:
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
}
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	00 d0       	rcall	.+0      	; 0x8bc <initialize+0x6>
     8bc:	00 d0       	rcall	.+0      	; 0x8be <initialize+0x8>
     8be:	cd b7       	in	r28, 0x3d	; 61
     8c0:	de b7       	in	r29, 0x3e	; 62
     8c2:	8d e8       	ldi	r24, 0x8D	; 141
     8c4:	92 e0       	ldi	r25, 0x02	; 2
     8c6:	2d e6       	ldi	r18, 0x6D	; 109
     8c8:	33 e0       	ldi	r19, 0x03	; 3
     8ca:	fc 01       	movw	r30, r24
     8cc:	70 97       	sbiw	r30, 0x10	; 16
     8ce:	91 83       	std	Z+1, r25	; 0x01
     8d0:	80 83       	st	Z, r24
     8d2:	40 96       	adiw	r24, 0x10	; 16
     8d4:	82 17       	cp	r24, r18
     8d6:	93 07       	cpc	r25, r19
     8d8:	c1 f7       	brne	.-16     	; 0x8ca <initialize+0x14>
     8da:	10 92 5e 03 	sts	0x035E, r1	; 0x80035e <messages+0xe1>
     8de:	10 92 5d 03 	sts	0x035D, r1	; 0x80035d <messages+0xe0>
     8e2:	e8 ec       	ldi	r30, 0xC8	; 200
     8e4:	f1 e0       	ldi	r31, 0x01	; 1
     8e6:	85 ee       	ldi	r24, 0xE5	; 229
     8e8:	91 e0       	ldi	r25, 0x01	; 1
     8ea:	91 83       	std	Z+1, r25	; 0x01
     8ec:	80 83       	st	Z, r24
     8ee:	82 e0       	ldi	r24, 0x02	; 2
     8f0:	92 e0       	ldi	r25, 0x02	; 2
     8f2:	96 8f       	std	Z+30, r25	; 0x1e
     8f4:	85 8f       	std	Z+29, r24	; 0x1d
     8f6:	af e1       	ldi	r26, 0x1F	; 31
     8f8:	b2 e0       	ldi	r27, 0x02	; 2
     8fa:	b3 af       	std	Z+59, r27	; 0x3b
     8fc:	a2 af       	std	Z+58, r26	; 0x3a
     8fe:	1d 92       	st	X+, r1
     900:	1c 92       	st	X, r1
     902:	fa 83       	std	Y+2, r31	; 0x02
     904:	e9 83       	std	Y+1, r30	; 0x01
     906:	e9 ec       	ldi	r30, 0xC9	; 201
     908:	f3 e0       	ldi	r31, 0x03	; 3
     90a:	fc 83       	std	Y+4, r31	; 0x04
     90c:	eb 83       	std	Y+3, r30	; 0x03
     90e:	89 81       	ldd	r24, Y+1	; 0x01
     910:	9a 81       	ldd	r25, Y+2	; 0x02
     912:	06 96       	adiw	r24, 0x06	; 6
     914:	0e 94 24 11 	call	0x2248	; 0x2248 <setjmp>
     918:	8b 81       	ldd	r24, Y+3	; 0x03
     91a:	9c 81       	ldd	r25, Y+4	; 0x04
     91c:	e9 81       	ldd	r30, Y+1	; 0x01
     91e:	fa 81       	ldd	r31, Y+2	; 0x02
     920:	97 8b       	std	Z+23, r25	; 0x17
     922:	86 8b       	std	Z+22, r24	; 0x16
     924:	91 8f       	std	Z+25, r25	; 0x19
     926:	80 8f       	std	Z+24, r24	; 0x18
     928:	8b ef       	ldi	r24, 0xFB	; 251
     92a:	9f e0       	ldi	r25, 0x0F	; 15
     92c:	94 8f       	std	Z+28, r25	; 0x1c
     92e:	83 8f       	std	Z+27, r24	; 0x1b
     930:	15 82       	std	Z+5, r1	; 0x05
     932:	14 82       	std	Z+4, r1	; 0x04
     934:	7d 96       	adiw	r30, 0x1d	; 29
     936:	fa 83       	std	Y+2, r31	; 0x02
     938:	e9 83       	std	Y+1, r30	; 0x01
     93a:	eb 81       	ldd	r30, Y+3	; 0x03
     93c:	fc 81       	ldd	r31, Y+4	; 0x04
     93e:	e0 5a       	subi	r30, 0xA0	; 160
     940:	ff 4f       	sbci	r31, 0xFF	; 255
     942:	fc 83       	std	Y+4, r31	; 0x04
     944:	eb 83       	std	Y+3, r30	; 0x03
     946:	89 81       	ldd	r24, Y+1	; 0x01
     948:	9a 81       	ldd	r25, Y+2	; 0x02
     94a:	8c 53       	subi	r24, 0x3C	; 60
     94c:	92 40       	sbci	r25, 0x02	; 2
     94e:	f9 f6       	brne	.-66     	; 0x90e <initialize+0x58>
     950:	e0 e6       	ldi	r30, 0x60	; 96
     952:	f2 e0       	ldi	r31, 0x02	; 2
     954:	11 82       	std	Z+1, r1	; 0x01
     956:	10 82       	st	Z, r1
     958:	15 82       	std	Z+5, r1	; 0x05
     95a:	14 82       	std	Z+4, r1	; 0x04
     95c:	13 82       	std	Z+3, r1	; 0x03
     95e:	12 82       	std	Z+2, r1	; 0x02
     960:	e1 e6       	ldi	r30, 0x61	; 97
     962:	f0 e0       	ldi	r31, 0x00	; 0
     964:	80 e8       	ldi	r24, 0x80	; 128
     966:	80 83       	st	Z, r24
     968:	10 82       	st	Z, r1
     96a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     96e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     972:	84 e0       	ldi	r24, 0x04	; 4
     974:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     978:	81 e0       	ldi	r24, 0x01	; 1
     97a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
     97e:	0f 90       	pop	r0
     980:	0f 90       	pop	r0
     982:	0f 90       	pop	r0
     984:	0f 90       	pop	r0
     986:	df 91       	pop	r29
     988:	cf 91       	pop	r28
     98a:	08 95       	ret

0000098c <dispatch>:
     98c:	cf 93       	push	r28
     98e:	df 93       	push	r29
     990:	00 d0       	rcall	.+0      	; 0x992 <dispatch+0x6>
     992:	cd b7       	in	r28, 0x3d	; 61
     994:	de b7       	in	r29, 0x3e	; 62
     996:	9a 83       	std	Y+2, r25	; 0x02
     998:	89 83       	std	Y+1, r24	; 0x01
     99a:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <current>
     99e:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <current+0x1>
     9a2:	06 96       	adiw	r24, 0x06	; 6
     9a4:	0e 94 24 11 	call	0x2248	; 0x2248 <setjmp>
     9a8:	89 2b       	or	r24, r25
     9aa:	59 f4       	brne	.+22     	; 0x9c2 <dispatch+0x36>
     9ac:	89 81       	ldd	r24, Y+1	; 0x01
     9ae:	9a 81       	ldd	r25, Y+2	; 0x02
     9b0:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <current+0x1>
     9b4:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <current>
     9b8:	61 e0       	ldi	r22, 0x01	; 1
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	06 96       	adiw	r24, 0x06	; 6
     9be:	0e 94 44 11 	call	0x2288	; 0x2288 <longjmp>
     9c2:	0f 90       	pop	r0
     9c4:	0f 90       	pop	r0
     9c6:	df 91       	pop	r29
     9c8:	cf 91       	pop	r28
     9ca:	08 95       	ret

000009cc <schedule>:
     9cc:	0f 93       	push	r16
     9ce:	1f 93       	push	r17
     9d0:	cf 93       	push	r28
     9d2:	df 93       	push	r29
     9d4:	e0 91 a2 01 	lds	r30, 0x01A2	; 0x8001a2 <msgQ>
     9d8:	f0 91 a3 01 	lds	r31, 0x01A3	; 0x8001a3 <msgQ+0x1>
     9dc:	30 97       	sbiw	r30, 0x00	; 0
     9de:	61 f1       	breq	.+88     	; 0xa38 <schedule+0x6c>
     9e0:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <threadPool>
     9e4:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <threadPool+0x1>
     9e8:	00 97       	sbiw	r24, 0x00	; 0
     9ea:	31 f1       	breq	.+76     	; 0xa38 <schedule+0x6c>
     9ec:	c0 91 87 01 	lds	r28, 0x0187	; 0x800187 <activeStack>
     9f0:	d0 91 88 01 	lds	r29, 0x0188	; 0x800188 <activeStack+0x1>
     9f4:	aa 81       	ldd	r26, Y+2	; 0x02
     9f6:	bb 81       	ldd	r27, Y+3	; 0x03
     9f8:	10 97       	sbiw	r26, 0x00	; 0
     9fa:	79 f0       	breq	.+30     	; 0xa1a <schedule+0x4e>
     9fc:	46 81       	ldd	r20, Z+6	; 0x06
     9fe:	57 81       	ldd	r21, Z+7	; 0x07
     a00:	60 85       	ldd	r22, Z+8	; 0x08
     a02:	71 85       	ldd	r23, Z+9	; 0x09
     a04:	16 96       	adiw	r26, 0x06	; 6
     a06:	0d 91       	ld	r16, X+
     a08:	1d 91       	ld	r17, X+
     a0a:	2d 91       	ld	r18, X+
     a0c:	3c 91       	ld	r19, X
     a0e:	19 97       	sbiw	r26, 0x09	; 9
     a10:	40 1b       	sub	r20, r16
     a12:	51 0b       	sbc	r21, r17
     a14:	62 0b       	sbc	r22, r18
     a16:	73 0b       	sbc	r23, r19
     a18:	7a f4       	brpl	.+30     	; 0xa38 <schedule+0x6c>
     a1a:	fc 01       	movw	r30, r24
     a1c:	20 81       	ld	r18, Z
     a1e:	31 81       	ldd	r19, Z+1	; 0x01
     a20:	30 93 8a 01 	sts	0x018A, r19	; 0x80018a <threadPool+0x1>
     a24:	20 93 89 01 	sts	0x0189, r18	; 0x800189 <threadPool>
     a28:	d1 83       	std	Z+1, r29	; 0x01
     a2a:	c0 83       	st	Z, r28
     a2c:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <activeStack+0x1>
     a30:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <activeStack>
     a34:	0e 94 c6 04 	call	0x98c	; 0x98c <dispatch>
     a38:	df 91       	pop	r29
     a3a:	cf 91       	pop	r28
     a3c:	1f 91       	pop	r17
     a3e:	0f 91       	pop	r16
     a40:	08 95       	ret

00000a42 <__vector_1>:
     a42:	1f 92       	push	r1
     a44:	0f 92       	push	r0
     a46:	0f b6       	in	r0, 0x3f	; 63
     a48:	0f 92       	push	r0
     a4a:	11 24       	eor	r1, r1
     a4c:	2f 93       	push	r18
     a4e:	3f 93       	push	r19
     a50:	4f 93       	push	r20
     a52:	5f 93       	push	r21
     a54:	6f 93       	push	r22
     a56:	7f 93       	push	r23
     a58:	8f 93       	push	r24
     a5a:	9f 93       	push	r25
     a5c:	af 93       	push	r26
     a5e:	bf 93       	push	r27
     a60:	ef 93       	push	r30
     a62:	ff 93       	push	r31
     a64:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <overflows>
     a68:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <overflows+0x1>
     a6c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     a70:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     a74:	c9 01       	movw	r24, r18
     a76:	03 2e       	mov	r0, r19
     a78:	00 0c       	add	r0, r0
     a7a:	aa 0b       	sbc	r26, r26
     a7c:	bb 0b       	sbc	r27, r27
     a7e:	dc 01       	movw	r26, r24
     a80:	99 27       	eor	r25, r25
     a82:	88 27       	eor	r24, r24
     a84:	60 e0       	ldi	r22, 0x00	; 0
     a86:	70 e0       	ldi	r23, 0x00	; 0
     a88:	84 2b       	or	r24, r20
     a8a:	95 2b       	or	r25, r21
     a8c:	a6 2b       	or	r26, r22
     a8e:	b7 2b       	or	r27, r23
     a90:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <timestamp>
     a94:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <timestamp+0x1>
     a98:	a0 93 9e 01 	sts	0x019E, r26	; 0x80019e <timestamp+0x2>
     a9c:	b0 93 9f 01 	sts	0x019F, r27	; 0x80019f <timestamp+0x3>
     aa0:	b0 9b       	sbis	0x16, 0	; 22
     aa2:	1b c0       	rjmp	.+54     	; 0xada <__vector_1+0x98>
     aa4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     aa8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     aac:	c9 01       	movw	r24, r18
     aae:	01 96       	adiw	r24, 0x01	; 1
     ab0:	09 2e       	mov	r0, r25
     ab2:	00 0c       	add	r0, r0
     ab4:	aa 0b       	sbc	r26, r26
     ab6:	bb 0b       	sbc	r27, r27
     ab8:	dc 01       	movw	r26, r24
     aba:	99 27       	eor	r25, r25
     abc:	88 27       	eor	r24, r24
     abe:	60 e0       	ldi	r22, 0x00	; 0
     ac0:	70 e0       	ldi	r23, 0x00	; 0
     ac2:	84 2b       	or	r24, r20
     ac4:	95 2b       	or	r25, r21
     ac6:	a6 2b       	or	r26, r22
     ac8:	b7 2b       	or	r27, r23
     aca:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <timestamp>
     ace:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <timestamp+0x1>
     ad2:	a0 93 9e 01 	sts	0x019E, r26	; 0x80019e <timestamp+0x2>
     ad6:	b0 93 9f 01 	sts	0x019F, r27	; 0x80019f <timestamp+0x3>
     ada:	e0 91 3c 02 	lds	r30, 0x023C	; 0x80023c <mtable>
     ade:	f0 91 3d 02 	lds	r31, 0x023D	; 0x80023d <mtable+0x1>
     ae2:	30 97       	sbiw	r30, 0x00	; 0
     ae4:	39 f0       	breq	.+14     	; 0xaf4 <__vector_1+0xb2>
     ae6:	60 e0       	ldi	r22, 0x00	; 0
     ae8:	70 e0       	ldi	r23, 0x00	; 0
     aea:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <otable>
     aee:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <otable+0x1>
     af2:	09 95       	icall
     af4:	0e 94 e6 04 	call	0x9cc	; 0x9cc <schedule>
     af8:	ff 91       	pop	r31
     afa:	ef 91       	pop	r30
     afc:	bf 91       	pop	r27
     afe:	af 91       	pop	r26
     b00:	9f 91       	pop	r25
     b02:	8f 91       	pop	r24
     b04:	7f 91       	pop	r23
     b06:	6f 91       	pop	r22
     b08:	5f 91       	pop	r21
     b0a:	4f 91       	pop	r20
     b0c:	3f 91       	pop	r19
     b0e:	2f 91       	pop	r18
     b10:	0f 90       	pop	r0
     b12:	0f be       	out	0x3f, r0	; 63
     b14:	0f 90       	pop	r0
     b16:	1f 90       	pop	r1
     b18:	18 95       	reti

00000b1a <__vector_2>:
     b1a:	1f 92       	push	r1
     b1c:	0f 92       	push	r0
     b1e:	0f b6       	in	r0, 0x3f	; 63
     b20:	0f 92       	push	r0
     b22:	11 24       	eor	r1, r1
     b24:	2f 93       	push	r18
     b26:	3f 93       	push	r19
     b28:	4f 93       	push	r20
     b2a:	5f 93       	push	r21
     b2c:	6f 93       	push	r22
     b2e:	7f 93       	push	r23
     b30:	8f 93       	push	r24
     b32:	9f 93       	push	r25
     b34:	af 93       	push	r26
     b36:	bf 93       	push	r27
     b38:	ef 93       	push	r30
     b3a:	ff 93       	push	r31
     b3c:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <overflows>
     b40:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <overflows+0x1>
     b44:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     b48:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     b4c:	c9 01       	movw	r24, r18
     b4e:	03 2e       	mov	r0, r19
     b50:	00 0c       	add	r0, r0
     b52:	aa 0b       	sbc	r26, r26
     b54:	bb 0b       	sbc	r27, r27
     b56:	dc 01       	movw	r26, r24
     b58:	99 27       	eor	r25, r25
     b5a:	88 27       	eor	r24, r24
     b5c:	60 e0       	ldi	r22, 0x00	; 0
     b5e:	70 e0       	ldi	r23, 0x00	; 0
     b60:	84 2b       	or	r24, r20
     b62:	95 2b       	or	r25, r21
     b64:	a6 2b       	or	r26, r22
     b66:	b7 2b       	or	r27, r23
     b68:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <timestamp>
     b6c:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <timestamp+0x1>
     b70:	a0 93 9e 01 	sts	0x019E, r26	; 0x80019e <timestamp+0x2>
     b74:	b0 93 9f 01 	sts	0x019F, r27	; 0x80019f <timestamp+0x3>
     b78:	b0 9b       	sbis	0x16, 0	; 22
     b7a:	1b c0       	rjmp	.+54     	; 0xbb2 <__vector_2+0x98>
     b7c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     b80:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     b84:	c9 01       	movw	r24, r18
     b86:	01 96       	adiw	r24, 0x01	; 1
     b88:	09 2e       	mov	r0, r25
     b8a:	00 0c       	add	r0, r0
     b8c:	aa 0b       	sbc	r26, r26
     b8e:	bb 0b       	sbc	r27, r27
     b90:	dc 01       	movw	r26, r24
     b92:	99 27       	eor	r25, r25
     b94:	88 27       	eor	r24, r24
     b96:	60 e0       	ldi	r22, 0x00	; 0
     b98:	70 e0       	ldi	r23, 0x00	; 0
     b9a:	84 2b       	or	r24, r20
     b9c:	95 2b       	or	r25, r21
     b9e:	a6 2b       	or	r26, r22
     ba0:	b7 2b       	or	r27, r23
     ba2:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <timestamp>
     ba6:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <timestamp+0x1>
     baa:	a0 93 9e 01 	sts	0x019E, r26	; 0x80019e <timestamp+0x2>
     bae:	b0 93 9f 01 	sts	0x019F, r27	; 0x80019f <timestamp+0x3>
     bb2:	e0 91 3e 02 	lds	r30, 0x023E	; 0x80023e <mtable+0x2>
     bb6:	f0 91 3f 02 	lds	r31, 0x023F	; 0x80023f <mtable+0x3>
     bba:	30 97       	sbiw	r30, 0x00	; 0
     bbc:	39 f0       	breq	.+14     	; 0xbcc <__vector_2+0xb2>
     bbe:	61 e0       	ldi	r22, 0x01	; 1
     bc0:	70 e0       	ldi	r23, 0x00	; 0
     bc2:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <otable+0x2>
     bc6:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <otable+0x3>
     bca:	09 95       	icall
     bcc:	0e 94 e6 04 	call	0x9cc	; 0x9cc <schedule>
     bd0:	ff 91       	pop	r31
     bd2:	ef 91       	pop	r30
     bd4:	bf 91       	pop	r27
     bd6:	af 91       	pop	r26
     bd8:	9f 91       	pop	r25
     bda:	8f 91       	pop	r24
     bdc:	7f 91       	pop	r23
     bde:	6f 91       	pop	r22
     be0:	5f 91       	pop	r21
     be2:	4f 91       	pop	r20
     be4:	3f 91       	pop	r19
     be6:	2f 91       	pop	r18
     be8:	0f 90       	pop	r0
     bea:	0f be       	out	0x3f, r0	; 63
     bec:	0f 90       	pop	r0
     bee:	1f 90       	pop	r1
     bf0:	18 95       	reti

00000bf2 <__vector_3>:
     bf2:	1f 92       	push	r1
     bf4:	0f 92       	push	r0
     bf6:	0f b6       	in	r0, 0x3f	; 63
     bf8:	0f 92       	push	r0
     bfa:	11 24       	eor	r1, r1
     bfc:	2f 93       	push	r18
     bfe:	3f 93       	push	r19
     c00:	4f 93       	push	r20
     c02:	5f 93       	push	r21
     c04:	6f 93       	push	r22
     c06:	7f 93       	push	r23
     c08:	8f 93       	push	r24
     c0a:	9f 93       	push	r25
     c0c:	af 93       	push	r26
     c0e:	bf 93       	push	r27
     c10:	ef 93       	push	r30
     c12:	ff 93       	push	r31
     c14:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <overflows>
     c18:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <overflows+0x1>
     c1c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     c20:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     c24:	c9 01       	movw	r24, r18
     c26:	03 2e       	mov	r0, r19
     c28:	00 0c       	add	r0, r0
     c2a:	aa 0b       	sbc	r26, r26
     c2c:	bb 0b       	sbc	r27, r27
     c2e:	dc 01       	movw	r26, r24
     c30:	99 27       	eor	r25, r25
     c32:	88 27       	eor	r24, r24
     c34:	60 e0       	ldi	r22, 0x00	; 0
     c36:	70 e0       	ldi	r23, 0x00	; 0
     c38:	84 2b       	or	r24, r20
     c3a:	95 2b       	or	r25, r21
     c3c:	a6 2b       	or	r26, r22
     c3e:	b7 2b       	or	r27, r23
     c40:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <timestamp>
     c44:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <timestamp+0x1>
     c48:	a0 93 9e 01 	sts	0x019E, r26	; 0x80019e <timestamp+0x2>
     c4c:	b0 93 9f 01 	sts	0x019F, r27	; 0x80019f <timestamp+0x3>
     c50:	b0 9b       	sbis	0x16, 0	; 22
     c52:	1b c0       	rjmp	.+54     	; 0xc8a <__vector_3+0x98>
     c54:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     c58:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     c5c:	c9 01       	movw	r24, r18
     c5e:	01 96       	adiw	r24, 0x01	; 1
     c60:	09 2e       	mov	r0, r25
     c62:	00 0c       	add	r0, r0
     c64:	aa 0b       	sbc	r26, r26
     c66:	bb 0b       	sbc	r27, r27
     c68:	dc 01       	movw	r26, r24
     c6a:	99 27       	eor	r25, r25
     c6c:	88 27       	eor	r24, r24
     c6e:	60 e0       	ldi	r22, 0x00	; 0
     c70:	70 e0       	ldi	r23, 0x00	; 0
     c72:	84 2b       	or	r24, r20
     c74:	95 2b       	or	r25, r21
     c76:	a6 2b       	or	r26, r22
     c78:	b7 2b       	or	r27, r23
     c7a:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <timestamp>
     c7e:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <timestamp+0x1>
     c82:	a0 93 9e 01 	sts	0x019E, r26	; 0x80019e <timestamp+0x2>
     c86:	b0 93 9f 01 	sts	0x019F, r27	; 0x80019f <timestamp+0x3>
     c8a:	e0 91 40 02 	lds	r30, 0x0240	; 0x800240 <mtable+0x4>
     c8e:	f0 91 41 02 	lds	r31, 0x0241	; 0x800241 <mtable+0x5>
     c92:	30 97       	sbiw	r30, 0x00	; 0
     c94:	39 f0       	breq	.+14     	; 0xca4 <__vector_3+0xb2>
     c96:	62 e0       	ldi	r22, 0x02	; 2
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <otable+0x4>
     c9e:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <otable+0x5>
     ca2:	09 95       	icall
     ca4:	0e 94 e6 04 	call	0x9cc	; 0x9cc <schedule>
     ca8:	ff 91       	pop	r31
     caa:	ef 91       	pop	r30
     cac:	bf 91       	pop	r27
     cae:	af 91       	pop	r26
     cb0:	9f 91       	pop	r25
     cb2:	8f 91       	pop	r24
     cb4:	7f 91       	pop	r23
     cb6:	6f 91       	pop	r22
     cb8:	5f 91       	pop	r21
     cba:	4f 91       	pop	r20
     cbc:	3f 91       	pop	r19
     cbe:	2f 91       	pop	r18
     cc0:	0f 90       	pop	r0
     cc2:	0f be       	out	0x3f, r0	; 63
     cc4:	0f 90       	pop	r0
     cc6:	1f 90       	pop	r1
     cc8:	18 95       	reti

00000cca <__vector_4>:
     cca:	1f 92       	push	r1
     ccc:	0f 92       	push	r0
     cce:	0f b6       	in	r0, 0x3f	; 63
     cd0:	0f 92       	push	r0
     cd2:	11 24       	eor	r1, r1
     cd4:	2f 93       	push	r18
     cd6:	3f 93       	push	r19
     cd8:	4f 93       	push	r20
     cda:	5f 93       	push	r21
     cdc:	6f 93       	push	r22
     cde:	7f 93       	push	r23
     ce0:	8f 93       	push	r24
     ce2:	9f 93       	push	r25
     ce4:	af 93       	push	r26
     ce6:	bf 93       	push	r27
     ce8:	ef 93       	push	r30
     cea:	ff 93       	push	r31
     cec:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <overflows>
     cf0:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <overflows+0x1>
     cf4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     cf8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     cfc:	c9 01       	movw	r24, r18
     cfe:	03 2e       	mov	r0, r19
     d00:	00 0c       	add	r0, r0
     d02:	aa 0b       	sbc	r26, r26
     d04:	bb 0b       	sbc	r27, r27
     d06:	dc 01       	movw	r26, r24
     d08:	99 27       	eor	r25, r25
     d0a:	88 27       	eor	r24, r24
     d0c:	60 e0       	ldi	r22, 0x00	; 0
     d0e:	70 e0       	ldi	r23, 0x00	; 0
     d10:	84 2b       	or	r24, r20
     d12:	95 2b       	or	r25, r21
     d14:	a6 2b       	or	r26, r22
     d16:	b7 2b       	or	r27, r23
     d18:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <timestamp>
     d1c:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <timestamp+0x1>
     d20:	a0 93 9e 01 	sts	0x019E, r26	; 0x80019e <timestamp+0x2>
     d24:	b0 93 9f 01 	sts	0x019F, r27	; 0x80019f <timestamp+0x3>
     d28:	b0 9b       	sbis	0x16, 0	; 22
     d2a:	1b c0       	rjmp	.+54     	; 0xd62 <__vector_4+0x98>
     d2c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     d30:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     d34:	c9 01       	movw	r24, r18
     d36:	01 96       	adiw	r24, 0x01	; 1
     d38:	09 2e       	mov	r0, r25
     d3a:	00 0c       	add	r0, r0
     d3c:	aa 0b       	sbc	r26, r26
     d3e:	bb 0b       	sbc	r27, r27
     d40:	dc 01       	movw	r26, r24
     d42:	99 27       	eor	r25, r25
     d44:	88 27       	eor	r24, r24
     d46:	60 e0       	ldi	r22, 0x00	; 0
     d48:	70 e0       	ldi	r23, 0x00	; 0
     d4a:	84 2b       	or	r24, r20
     d4c:	95 2b       	or	r25, r21
     d4e:	a6 2b       	or	r26, r22
     d50:	b7 2b       	or	r27, r23
     d52:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <timestamp>
     d56:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <timestamp+0x1>
     d5a:	a0 93 9e 01 	sts	0x019E, r26	; 0x80019e <timestamp+0x2>
     d5e:	b0 93 9f 01 	sts	0x019F, r27	; 0x80019f <timestamp+0x3>
     d62:	e0 91 42 02 	lds	r30, 0x0242	; 0x800242 <mtable+0x6>
     d66:	f0 91 43 02 	lds	r31, 0x0243	; 0x800243 <mtable+0x7>
     d6a:	30 97       	sbiw	r30, 0x00	; 0
     d6c:	39 f0       	breq	.+14     	; 0xd7c <__vector_4+0xb2>
     d6e:	63 e0       	ldi	r22, 0x03	; 3
     d70:	70 e0       	ldi	r23, 0x00	; 0
     d72:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <otable+0x6>
     d76:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <otable+0x7>
     d7a:	09 95       	icall
     d7c:	0e 94 e6 04 	call	0x9cc	; 0x9cc <schedule>
     d80:	ff 91       	pop	r31
     d82:	ef 91       	pop	r30
     d84:	bf 91       	pop	r27
     d86:	af 91       	pop	r26
     d88:	9f 91       	pop	r25
     d8a:	8f 91       	pop	r24
     d8c:	7f 91       	pop	r23
     d8e:	6f 91       	pop	r22
     d90:	5f 91       	pop	r21
     d92:	4f 91       	pop	r20
     d94:	3f 91       	pop	r19
     d96:	2f 91       	pop	r18
     d98:	0f 90       	pop	r0
     d9a:	0f be       	out	0x3f, r0	; 63
     d9c:	0f 90       	pop	r0
     d9e:	1f 90       	pop	r1
     da0:	18 95       	reti

00000da2 <__vector_5>:
     da2:	1f 92       	push	r1
     da4:	0f 92       	push	r0
     da6:	0f b6       	in	r0, 0x3f	; 63
     da8:	0f 92       	push	r0
     daa:	11 24       	eor	r1, r1
     dac:	2f 93       	push	r18
     dae:	3f 93       	push	r19
     db0:	4f 93       	push	r20
     db2:	5f 93       	push	r21
     db4:	6f 93       	push	r22
     db6:	7f 93       	push	r23
     db8:	8f 93       	push	r24
     dba:	9f 93       	push	r25
     dbc:	af 93       	push	r26
     dbe:	bf 93       	push	r27
     dc0:	ef 93       	push	r30
     dc2:	ff 93       	push	r31
     dc4:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <overflows>
     dc8:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <overflows+0x1>
     dcc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     dd0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     dd4:	c9 01       	movw	r24, r18
     dd6:	03 2e       	mov	r0, r19
     dd8:	00 0c       	add	r0, r0
     dda:	aa 0b       	sbc	r26, r26
     ddc:	bb 0b       	sbc	r27, r27
     dde:	dc 01       	movw	r26, r24
     de0:	99 27       	eor	r25, r25
     de2:	88 27       	eor	r24, r24
     de4:	60 e0       	ldi	r22, 0x00	; 0
     de6:	70 e0       	ldi	r23, 0x00	; 0
     de8:	84 2b       	or	r24, r20
     dea:	95 2b       	or	r25, r21
     dec:	a6 2b       	or	r26, r22
     dee:	b7 2b       	or	r27, r23
     df0:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <timestamp>
     df4:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <timestamp+0x1>
     df8:	a0 93 9e 01 	sts	0x019E, r26	; 0x80019e <timestamp+0x2>
     dfc:	b0 93 9f 01 	sts	0x019F, r27	; 0x80019f <timestamp+0x3>
     e00:	b0 9b       	sbis	0x16, 0	; 22
     e02:	1b c0       	rjmp	.+54     	; 0xe3a <__vector_5+0x98>
     e04:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     e08:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     e0c:	c9 01       	movw	r24, r18
     e0e:	01 96       	adiw	r24, 0x01	; 1
     e10:	09 2e       	mov	r0, r25
     e12:	00 0c       	add	r0, r0
     e14:	aa 0b       	sbc	r26, r26
     e16:	bb 0b       	sbc	r27, r27
     e18:	dc 01       	movw	r26, r24
     e1a:	99 27       	eor	r25, r25
     e1c:	88 27       	eor	r24, r24
     e1e:	60 e0       	ldi	r22, 0x00	; 0
     e20:	70 e0       	ldi	r23, 0x00	; 0
     e22:	84 2b       	or	r24, r20
     e24:	95 2b       	or	r25, r21
     e26:	a6 2b       	or	r26, r22
     e28:	b7 2b       	or	r27, r23
     e2a:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <timestamp>
     e2e:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <timestamp+0x1>
     e32:	a0 93 9e 01 	sts	0x019E, r26	; 0x80019e <timestamp+0x2>
     e36:	b0 93 9f 01 	sts	0x019F, r27	; 0x80019f <timestamp+0x3>
     e3a:	e0 91 44 02 	lds	r30, 0x0244	; 0x800244 <mtable+0x8>
     e3e:	f0 91 45 02 	lds	r31, 0x0245	; 0x800245 <mtable+0x9>
     e42:	30 97       	sbiw	r30, 0x00	; 0
     e44:	39 f0       	breq	.+14     	; 0xe54 <__vector_5+0xb2>
     e46:	64 e0       	ldi	r22, 0x04	; 4
     e48:	70 e0       	ldi	r23, 0x00	; 0
     e4a:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <otable+0x8>
     e4e:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <otable+0x9>
     e52:	09 95       	icall
     e54:	0e 94 e6 04 	call	0x9cc	; 0x9cc <schedule>
     e58:	ff 91       	pop	r31
     e5a:	ef 91       	pop	r30
     e5c:	bf 91       	pop	r27
     e5e:	af 91       	pop	r26
     e60:	9f 91       	pop	r25
     e62:	8f 91       	pop	r24
     e64:	7f 91       	pop	r23
     e66:	6f 91       	pop	r22
     e68:	5f 91       	pop	r21
     e6a:	4f 91       	pop	r20
     e6c:	3f 91       	pop	r19
     e6e:	2f 91       	pop	r18
     e70:	0f 90       	pop	r0
     e72:	0f be       	out	0x3f, r0	; 63
     e74:	0f 90       	pop	r0
     e76:	1f 90       	pop	r1
     e78:	18 95       	reti

00000e7a <__vector_10>:
     e7a:	1f 92       	push	r1
     e7c:	0f 92       	push	r0
     e7e:	0f b6       	in	r0, 0x3f	; 63
     e80:	0f 92       	push	r0
     e82:	11 24       	eor	r1, r1
     e84:	2f 93       	push	r18
     e86:	3f 93       	push	r19
     e88:	4f 93       	push	r20
     e8a:	5f 93       	push	r21
     e8c:	6f 93       	push	r22
     e8e:	7f 93       	push	r23
     e90:	8f 93       	push	r24
     e92:	9f 93       	push	r25
     e94:	af 93       	push	r26
     e96:	bf 93       	push	r27
     e98:	ef 93       	push	r30
     e9a:	ff 93       	push	r31
     e9c:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <overflows>
     ea0:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <overflows+0x1>
     ea4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     ea8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     eac:	c9 01       	movw	r24, r18
     eae:	03 2e       	mov	r0, r19
     eb0:	00 0c       	add	r0, r0
     eb2:	aa 0b       	sbc	r26, r26
     eb4:	bb 0b       	sbc	r27, r27
     eb6:	dc 01       	movw	r26, r24
     eb8:	99 27       	eor	r25, r25
     eba:	88 27       	eor	r24, r24
     ebc:	60 e0       	ldi	r22, 0x00	; 0
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	84 2b       	or	r24, r20
     ec2:	95 2b       	or	r25, r21
     ec4:	a6 2b       	or	r26, r22
     ec6:	b7 2b       	or	r27, r23
     ec8:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <timestamp>
     ecc:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <timestamp+0x1>
     ed0:	a0 93 9e 01 	sts	0x019E, r26	; 0x80019e <timestamp+0x2>
     ed4:	b0 93 9f 01 	sts	0x019F, r27	; 0x80019f <timestamp+0x3>
     ed8:	b0 9b       	sbis	0x16, 0	; 22
     eda:	1b c0       	rjmp	.+54     	; 0xf12 <__vector_10+0x98>
     edc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     ee0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     ee4:	c9 01       	movw	r24, r18
     ee6:	01 96       	adiw	r24, 0x01	; 1
     ee8:	09 2e       	mov	r0, r25
     eea:	00 0c       	add	r0, r0
     eec:	aa 0b       	sbc	r26, r26
     eee:	bb 0b       	sbc	r27, r27
     ef0:	dc 01       	movw	r26, r24
     ef2:	99 27       	eor	r25, r25
     ef4:	88 27       	eor	r24, r24
     ef6:	60 e0       	ldi	r22, 0x00	; 0
     ef8:	70 e0       	ldi	r23, 0x00	; 0
     efa:	84 2b       	or	r24, r20
     efc:	95 2b       	or	r25, r21
     efe:	a6 2b       	or	r26, r22
     f00:	b7 2b       	or	r27, r23
     f02:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <timestamp>
     f06:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <timestamp+0x1>
     f0a:	a0 93 9e 01 	sts	0x019E, r26	; 0x80019e <timestamp+0x2>
     f0e:	b0 93 9f 01 	sts	0x019F, r27	; 0x80019f <timestamp+0x3>
     f12:	e0 91 46 02 	lds	r30, 0x0246	; 0x800246 <mtable+0xa>
     f16:	f0 91 47 02 	lds	r31, 0x0247	; 0x800247 <mtable+0xb>
     f1a:	30 97       	sbiw	r30, 0x00	; 0
     f1c:	39 f0       	breq	.+14     	; 0xf2c <__vector_10+0xb2>
     f1e:	65 e0       	ldi	r22, 0x05	; 5
     f20:	70 e0       	ldi	r23, 0x00	; 0
     f22:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <otable+0xa>
     f26:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <otable+0xb>
     f2a:	09 95       	icall
     f2c:	0e 94 e6 04 	call	0x9cc	; 0x9cc <schedule>
     f30:	ff 91       	pop	r31
     f32:	ef 91       	pop	r30
     f34:	bf 91       	pop	r27
     f36:	af 91       	pop	r26
     f38:	9f 91       	pop	r25
     f3a:	8f 91       	pop	r24
     f3c:	7f 91       	pop	r23
     f3e:	6f 91       	pop	r22
     f40:	5f 91       	pop	r21
     f42:	4f 91       	pop	r20
     f44:	3f 91       	pop	r19
     f46:	2f 91       	pop	r18
     f48:	0f 90       	pop	r0
     f4a:	0f be       	out	0x3f, r0	; 63
     f4c:	0f 90       	pop	r0
     f4e:	1f 90       	pop	r1
     f50:	18 95       	reti

00000f52 <__vector_11>:
     f52:	1f 92       	push	r1
     f54:	0f 92       	push	r0
     f56:	0f b6       	in	r0, 0x3f	; 63
     f58:	0f 92       	push	r0
     f5a:	11 24       	eor	r1, r1
     f5c:	2f 93       	push	r18
     f5e:	3f 93       	push	r19
     f60:	4f 93       	push	r20
     f62:	5f 93       	push	r21
     f64:	6f 93       	push	r22
     f66:	7f 93       	push	r23
     f68:	8f 93       	push	r24
     f6a:	9f 93       	push	r25
     f6c:	af 93       	push	r26
     f6e:	bf 93       	push	r27
     f70:	ef 93       	push	r30
     f72:	ff 93       	push	r31
     f74:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <overflows>
     f78:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <overflows+0x1>
     f7c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     f80:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     f84:	c9 01       	movw	r24, r18
     f86:	03 2e       	mov	r0, r19
     f88:	00 0c       	add	r0, r0
     f8a:	aa 0b       	sbc	r26, r26
     f8c:	bb 0b       	sbc	r27, r27
     f8e:	dc 01       	movw	r26, r24
     f90:	99 27       	eor	r25, r25
     f92:	88 27       	eor	r24, r24
     f94:	60 e0       	ldi	r22, 0x00	; 0
     f96:	70 e0       	ldi	r23, 0x00	; 0
     f98:	84 2b       	or	r24, r20
     f9a:	95 2b       	or	r25, r21
     f9c:	a6 2b       	or	r26, r22
     f9e:	b7 2b       	or	r27, r23
     fa0:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <timestamp>
     fa4:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <timestamp+0x1>
     fa8:	a0 93 9e 01 	sts	0x019E, r26	; 0x80019e <timestamp+0x2>
     fac:	b0 93 9f 01 	sts	0x019F, r27	; 0x80019f <timestamp+0x3>
     fb0:	b0 9b       	sbis	0x16, 0	; 22
     fb2:	1b c0       	rjmp	.+54     	; 0xfea <__vector_11+0x98>
     fb4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     fb8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     fbc:	c9 01       	movw	r24, r18
     fbe:	01 96       	adiw	r24, 0x01	; 1
     fc0:	09 2e       	mov	r0, r25
     fc2:	00 0c       	add	r0, r0
     fc4:	aa 0b       	sbc	r26, r26
     fc6:	bb 0b       	sbc	r27, r27
     fc8:	dc 01       	movw	r26, r24
     fca:	99 27       	eor	r25, r25
     fcc:	88 27       	eor	r24, r24
     fce:	60 e0       	ldi	r22, 0x00	; 0
     fd0:	70 e0       	ldi	r23, 0x00	; 0
     fd2:	84 2b       	or	r24, r20
     fd4:	95 2b       	or	r25, r21
     fd6:	a6 2b       	or	r26, r22
     fd8:	b7 2b       	or	r27, r23
     fda:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <timestamp>
     fde:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <timestamp+0x1>
     fe2:	a0 93 9e 01 	sts	0x019E, r26	; 0x80019e <timestamp+0x2>
     fe6:	b0 93 9f 01 	sts	0x019F, r27	; 0x80019f <timestamp+0x3>
     fea:	e0 91 48 02 	lds	r30, 0x0248	; 0x800248 <mtable+0xc>
     fee:	f0 91 49 02 	lds	r31, 0x0249	; 0x800249 <mtable+0xd>
     ff2:	30 97       	sbiw	r30, 0x00	; 0
     ff4:	39 f0       	breq	.+14     	; 0x1004 <__vector_11+0xb2>
     ff6:	66 e0       	ldi	r22, 0x06	; 6
     ff8:	70 e0       	ldi	r23, 0x00	; 0
     ffa:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <otable+0xc>
     ffe:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <otable+0xd>
    1002:	09 95       	icall
    1004:	0e 94 e6 04 	call	0x9cc	; 0x9cc <schedule>
    1008:	ff 91       	pop	r31
    100a:	ef 91       	pop	r30
    100c:	bf 91       	pop	r27
    100e:	af 91       	pop	r26
    1010:	9f 91       	pop	r25
    1012:	8f 91       	pop	r24
    1014:	7f 91       	pop	r23
    1016:	6f 91       	pop	r22
    1018:	5f 91       	pop	r21
    101a:	4f 91       	pop	r20
    101c:	3f 91       	pop	r19
    101e:	2f 91       	pop	r18
    1020:	0f 90       	pop	r0
    1022:	0f be       	out	0x3f, r0	; 63
    1024:	0f 90       	pop	r0
    1026:	1f 90       	pop	r1
    1028:	18 95       	reti

0000102a <__vector_12>:
    102a:	1f 92       	push	r1
    102c:	0f 92       	push	r0
    102e:	0f b6       	in	r0, 0x3f	; 63
    1030:	0f 92       	push	r0
    1032:	11 24       	eor	r1, r1
    1034:	2f 93       	push	r18
    1036:	3f 93       	push	r19
    1038:	4f 93       	push	r20
    103a:	5f 93       	push	r21
    103c:	6f 93       	push	r22
    103e:	7f 93       	push	r23
    1040:	8f 93       	push	r24
    1042:	9f 93       	push	r25
    1044:	af 93       	push	r26
    1046:	bf 93       	push	r27
    1048:	ef 93       	push	r30
    104a:	ff 93       	push	r31
    104c:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <overflows>
    1050:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <overflows+0x1>
    1054:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1058:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    105c:	c9 01       	movw	r24, r18
    105e:	03 2e       	mov	r0, r19
    1060:	00 0c       	add	r0, r0
    1062:	aa 0b       	sbc	r26, r26
    1064:	bb 0b       	sbc	r27, r27
    1066:	dc 01       	movw	r26, r24
    1068:	99 27       	eor	r25, r25
    106a:	88 27       	eor	r24, r24
    106c:	60 e0       	ldi	r22, 0x00	; 0
    106e:	70 e0       	ldi	r23, 0x00	; 0
    1070:	84 2b       	or	r24, r20
    1072:	95 2b       	or	r25, r21
    1074:	a6 2b       	or	r26, r22
    1076:	b7 2b       	or	r27, r23
    1078:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <timestamp>
    107c:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <timestamp+0x1>
    1080:	a0 93 9e 01 	sts	0x019E, r26	; 0x80019e <timestamp+0x2>
    1084:	b0 93 9f 01 	sts	0x019F, r27	; 0x80019f <timestamp+0x3>
    1088:	b0 9b       	sbis	0x16, 0	; 22
    108a:	1b c0       	rjmp	.+54     	; 0x10c2 <__vector_12+0x98>
    108c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1090:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1094:	c9 01       	movw	r24, r18
    1096:	01 96       	adiw	r24, 0x01	; 1
    1098:	09 2e       	mov	r0, r25
    109a:	00 0c       	add	r0, r0
    109c:	aa 0b       	sbc	r26, r26
    109e:	bb 0b       	sbc	r27, r27
    10a0:	dc 01       	movw	r26, r24
    10a2:	99 27       	eor	r25, r25
    10a4:	88 27       	eor	r24, r24
    10a6:	60 e0       	ldi	r22, 0x00	; 0
    10a8:	70 e0       	ldi	r23, 0x00	; 0
    10aa:	84 2b       	or	r24, r20
    10ac:	95 2b       	or	r25, r21
    10ae:	a6 2b       	or	r26, r22
    10b0:	b7 2b       	or	r27, r23
    10b2:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <timestamp>
    10b6:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <timestamp+0x1>
    10ba:	a0 93 9e 01 	sts	0x019E, r26	; 0x80019e <timestamp+0x2>
    10be:	b0 93 9f 01 	sts	0x019F, r27	; 0x80019f <timestamp+0x3>
    10c2:	e0 91 4a 02 	lds	r30, 0x024A	; 0x80024a <mtable+0xe>
    10c6:	f0 91 4b 02 	lds	r31, 0x024B	; 0x80024b <mtable+0xf>
    10ca:	30 97       	sbiw	r30, 0x00	; 0
    10cc:	39 f0       	breq	.+14     	; 0x10dc <__vector_12+0xb2>
    10ce:	67 e0       	ldi	r22, 0x07	; 7
    10d0:	70 e0       	ldi	r23, 0x00	; 0
    10d2:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <otable+0xe>
    10d6:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <otable+0xf>
    10da:	09 95       	icall
    10dc:	0e 94 e6 04 	call	0x9cc	; 0x9cc <schedule>
    10e0:	ff 91       	pop	r31
    10e2:	ef 91       	pop	r30
    10e4:	bf 91       	pop	r27
    10e6:	af 91       	pop	r26
    10e8:	9f 91       	pop	r25
    10ea:	8f 91       	pop	r24
    10ec:	7f 91       	pop	r23
    10ee:	6f 91       	pop	r22
    10f0:	5f 91       	pop	r21
    10f2:	4f 91       	pop	r20
    10f4:	3f 91       	pop	r19
    10f6:	2f 91       	pop	r18
    10f8:	0f 90       	pop	r0
    10fa:	0f be       	out	0x3f, r0	; 63
    10fc:	0f 90       	pop	r0
    10fe:	1f 90       	pop	r1
    1100:	18 95       	reti

00001102 <__vector_13>:
    1102:	1f 92       	push	r1
    1104:	0f 92       	push	r0
    1106:	0f b6       	in	r0, 0x3f	; 63
    1108:	0f 92       	push	r0
    110a:	11 24       	eor	r1, r1
    110c:	2f 93       	push	r18
    110e:	3f 93       	push	r19
    1110:	4f 93       	push	r20
    1112:	5f 93       	push	r21
    1114:	6f 93       	push	r22
    1116:	7f 93       	push	r23
    1118:	8f 93       	push	r24
    111a:	9f 93       	push	r25
    111c:	af 93       	push	r26
    111e:	bf 93       	push	r27
    1120:	ef 93       	push	r30
    1122:	ff 93       	push	r31
    1124:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <overflows>
    1128:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <overflows+0x1>
    112c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1130:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1134:	c9 01       	movw	r24, r18
    1136:	03 2e       	mov	r0, r19
    1138:	00 0c       	add	r0, r0
    113a:	aa 0b       	sbc	r26, r26
    113c:	bb 0b       	sbc	r27, r27
    113e:	dc 01       	movw	r26, r24
    1140:	99 27       	eor	r25, r25
    1142:	88 27       	eor	r24, r24
    1144:	60 e0       	ldi	r22, 0x00	; 0
    1146:	70 e0       	ldi	r23, 0x00	; 0
    1148:	84 2b       	or	r24, r20
    114a:	95 2b       	or	r25, r21
    114c:	a6 2b       	or	r26, r22
    114e:	b7 2b       	or	r27, r23
    1150:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <timestamp>
    1154:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <timestamp+0x1>
    1158:	a0 93 9e 01 	sts	0x019E, r26	; 0x80019e <timestamp+0x2>
    115c:	b0 93 9f 01 	sts	0x019F, r27	; 0x80019f <timestamp+0x3>
    1160:	b0 9b       	sbis	0x16, 0	; 22
    1162:	1b c0       	rjmp	.+54     	; 0x119a <__vector_13+0x98>
    1164:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1168:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    116c:	c9 01       	movw	r24, r18
    116e:	01 96       	adiw	r24, 0x01	; 1
    1170:	09 2e       	mov	r0, r25
    1172:	00 0c       	add	r0, r0
    1174:	aa 0b       	sbc	r26, r26
    1176:	bb 0b       	sbc	r27, r27
    1178:	dc 01       	movw	r26, r24
    117a:	99 27       	eor	r25, r25
    117c:	88 27       	eor	r24, r24
    117e:	60 e0       	ldi	r22, 0x00	; 0
    1180:	70 e0       	ldi	r23, 0x00	; 0
    1182:	84 2b       	or	r24, r20
    1184:	95 2b       	or	r25, r21
    1186:	a6 2b       	or	r26, r22
    1188:	b7 2b       	or	r27, r23
    118a:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <timestamp>
    118e:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <timestamp+0x1>
    1192:	a0 93 9e 01 	sts	0x019E, r26	; 0x80019e <timestamp+0x2>
    1196:	b0 93 9f 01 	sts	0x019F, r27	; 0x80019f <timestamp+0x3>
    119a:	e0 91 4c 02 	lds	r30, 0x024C	; 0x80024c <mtable+0x10>
    119e:	f0 91 4d 02 	lds	r31, 0x024D	; 0x80024d <mtable+0x11>
    11a2:	30 97       	sbiw	r30, 0x00	; 0
    11a4:	39 f0       	breq	.+14     	; 0x11b4 <__vector_13+0xb2>
    11a6:	68 e0       	ldi	r22, 0x08	; 8
    11a8:	70 e0       	ldi	r23, 0x00	; 0
    11aa:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <otable+0x10>
    11ae:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <otable+0x11>
    11b2:	09 95       	icall
    11b4:	0e 94 e6 04 	call	0x9cc	; 0x9cc <schedule>
    11b8:	ff 91       	pop	r31
    11ba:	ef 91       	pop	r30
    11bc:	bf 91       	pop	r27
    11be:	af 91       	pop	r26
    11c0:	9f 91       	pop	r25
    11c2:	8f 91       	pop	r24
    11c4:	7f 91       	pop	r23
    11c6:	6f 91       	pop	r22
    11c8:	5f 91       	pop	r21
    11ca:	4f 91       	pop	r20
    11cc:	3f 91       	pop	r19
    11ce:	2f 91       	pop	r18
    11d0:	0f 90       	pop	r0
    11d2:	0f be       	out	0x3f, r0	; 63
    11d4:	0f 90       	pop	r0
    11d6:	1f 90       	pop	r1
    11d8:	18 95       	reti

000011da <__vector_14>:
    11da:	1f 92       	push	r1
    11dc:	0f 92       	push	r0
    11de:	0f b6       	in	r0, 0x3f	; 63
    11e0:	0f 92       	push	r0
    11e2:	11 24       	eor	r1, r1
    11e4:	2f 93       	push	r18
    11e6:	3f 93       	push	r19
    11e8:	4f 93       	push	r20
    11ea:	5f 93       	push	r21
    11ec:	6f 93       	push	r22
    11ee:	7f 93       	push	r23
    11f0:	8f 93       	push	r24
    11f2:	9f 93       	push	r25
    11f4:	af 93       	push	r26
    11f6:	bf 93       	push	r27
    11f8:	ef 93       	push	r30
    11fa:	ff 93       	push	r31
    11fc:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <overflows>
    1200:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <overflows+0x1>
    1204:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1208:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    120c:	c9 01       	movw	r24, r18
    120e:	03 2e       	mov	r0, r19
    1210:	00 0c       	add	r0, r0
    1212:	aa 0b       	sbc	r26, r26
    1214:	bb 0b       	sbc	r27, r27
    1216:	dc 01       	movw	r26, r24
    1218:	99 27       	eor	r25, r25
    121a:	88 27       	eor	r24, r24
    121c:	60 e0       	ldi	r22, 0x00	; 0
    121e:	70 e0       	ldi	r23, 0x00	; 0
    1220:	84 2b       	or	r24, r20
    1222:	95 2b       	or	r25, r21
    1224:	a6 2b       	or	r26, r22
    1226:	b7 2b       	or	r27, r23
    1228:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <timestamp>
    122c:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <timestamp+0x1>
    1230:	a0 93 9e 01 	sts	0x019E, r26	; 0x80019e <timestamp+0x2>
    1234:	b0 93 9f 01 	sts	0x019F, r27	; 0x80019f <timestamp+0x3>
    1238:	b0 9b       	sbis	0x16, 0	; 22
    123a:	1b c0       	rjmp	.+54     	; 0x1272 <__vector_14+0x98>
    123c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1240:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1244:	c9 01       	movw	r24, r18
    1246:	01 96       	adiw	r24, 0x01	; 1
    1248:	09 2e       	mov	r0, r25
    124a:	00 0c       	add	r0, r0
    124c:	aa 0b       	sbc	r26, r26
    124e:	bb 0b       	sbc	r27, r27
    1250:	dc 01       	movw	r26, r24
    1252:	99 27       	eor	r25, r25
    1254:	88 27       	eor	r24, r24
    1256:	60 e0       	ldi	r22, 0x00	; 0
    1258:	70 e0       	ldi	r23, 0x00	; 0
    125a:	84 2b       	or	r24, r20
    125c:	95 2b       	or	r25, r21
    125e:	a6 2b       	or	r26, r22
    1260:	b7 2b       	or	r27, r23
    1262:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <timestamp>
    1266:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <timestamp+0x1>
    126a:	a0 93 9e 01 	sts	0x019E, r26	; 0x80019e <timestamp+0x2>
    126e:	b0 93 9f 01 	sts	0x019F, r27	; 0x80019f <timestamp+0x3>
    1272:	e0 91 4e 02 	lds	r30, 0x024E	; 0x80024e <mtable+0x12>
    1276:	f0 91 4f 02 	lds	r31, 0x024F	; 0x80024f <mtable+0x13>
    127a:	30 97       	sbiw	r30, 0x00	; 0
    127c:	39 f0       	breq	.+14     	; 0x128c <__vector_14+0xb2>
    127e:	69 e0       	ldi	r22, 0x09	; 9
    1280:	70 e0       	ldi	r23, 0x00	; 0
    1282:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <otable+0x12>
    1286:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <otable+0x13>
    128a:	09 95       	icall
    128c:	0e 94 e6 04 	call	0x9cc	; 0x9cc <schedule>
    1290:	ff 91       	pop	r31
    1292:	ef 91       	pop	r30
    1294:	bf 91       	pop	r27
    1296:	af 91       	pop	r26
    1298:	9f 91       	pop	r25
    129a:	8f 91       	pop	r24
    129c:	7f 91       	pop	r23
    129e:	6f 91       	pop	r22
    12a0:	5f 91       	pop	r21
    12a2:	4f 91       	pop	r20
    12a4:	3f 91       	pop	r19
    12a6:	2f 91       	pop	r18
    12a8:	0f 90       	pop	r0
    12aa:	0f be       	out	0x3f, r0	; 63
    12ac:	0f 90       	pop	r0
    12ae:	1f 90       	pop	r1
    12b0:	18 95       	reti

000012b2 <__vector_15>:
    12b2:	1f 92       	push	r1
    12b4:	0f 92       	push	r0
    12b6:	0f b6       	in	r0, 0x3f	; 63
    12b8:	0f 92       	push	r0
    12ba:	11 24       	eor	r1, r1
    12bc:	2f 93       	push	r18
    12be:	3f 93       	push	r19
    12c0:	4f 93       	push	r20
    12c2:	5f 93       	push	r21
    12c4:	6f 93       	push	r22
    12c6:	7f 93       	push	r23
    12c8:	8f 93       	push	r24
    12ca:	9f 93       	push	r25
    12cc:	af 93       	push	r26
    12ce:	bf 93       	push	r27
    12d0:	ef 93       	push	r30
    12d2:	ff 93       	push	r31
    12d4:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <overflows>
    12d8:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <overflows+0x1>
    12dc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    12e0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    12e4:	c9 01       	movw	r24, r18
    12e6:	03 2e       	mov	r0, r19
    12e8:	00 0c       	add	r0, r0
    12ea:	aa 0b       	sbc	r26, r26
    12ec:	bb 0b       	sbc	r27, r27
    12ee:	dc 01       	movw	r26, r24
    12f0:	99 27       	eor	r25, r25
    12f2:	88 27       	eor	r24, r24
    12f4:	60 e0       	ldi	r22, 0x00	; 0
    12f6:	70 e0       	ldi	r23, 0x00	; 0
    12f8:	84 2b       	or	r24, r20
    12fa:	95 2b       	or	r25, r21
    12fc:	a6 2b       	or	r26, r22
    12fe:	b7 2b       	or	r27, r23
    1300:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <timestamp>
    1304:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <timestamp+0x1>
    1308:	a0 93 9e 01 	sts	0x019E, r26	; 0x80019e <timestamp+0x2>
    130c:	b0 93 9f 01 	sts	0x019F, r27	; 0x80019f <timestamp+0x3>
    1310:	b0 9b       	sbis	0x16, 0	; 22
    1312:	1b c0       	rjmp	.+54     	; 0x134a <__vector_15+0x98>
    1314:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1318:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    131c:	c9 01       	movw	r24, r18
    131e:	01 96       	adiw	r24, 0x01	; 1
    1320:	09 2e       	mov	r0, r25
    1322:	00 0c       	add	r0, r0
    1324:	aa 0b       	sbc	r26, r26
    1326:	bb 0b       	sbc	r27, r27
    1328:	dc 01       	movw	r26, r24
    132a:	99 27       	eor	r25, r25
    132c:	88 27       	eor	r24, r24
    132e:	60 e0       	ldi	r22, 0x00	; 0
    1330:	70 e0       	ldi	r23, 0x00	; 0
    1332:	84 2b       	or	r24, r20
    1334:	95 2b       	or	r25, r21
    1336:	a6 2b       	or	r26, r22
    1338:	b7 2b       	or	r27, r23
    133a:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <timestamp>
    133e:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <timestamp+0x1>
    1342:	a0 93 9e 01 	sts	0x019E, r26	; 0x80019e <timestamp+0x2>
    1346:	b0 93 9f 01 	sts	0x019F, r27	; 0x80019f <timestamp+0x3>
    134a:	e0 91 50 02 	lds	r30, 0x0250	; 0x800250 <mtable+0x14>
    134e:	f0 91 51 02 	lds	r31, 0x0251	; 0x800251 <mtable+0x15>
    1352:	30 97       	sbiw	r30, 0x00	; 0
    1354:	39 f0       	breq	.+14     	; 0x1364 <__vector_15+0xb2>
    1356:	6a e0       	ldi	r22, 0x0A	; 10
    1358:	70 e0       	ldi	r23, 0x00	; 0
    135a:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <otable+0x14>
    135e:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <otable+0x15>
    1362:	09 95       	icall
    1364:	0e 94 e6 04 	call	0x9cc	; 0x9cc <schedule>
    1368:	ff 91       	pop	r31
    136a:	ef 91       	pop	r30
    136c:	bf 91       	pop	r27
    136e:	af 91       	pop	r26
    1370:	9f 91       	pop	r25
    1372:	8f 91       	pop	r24
    1374:	7f 91       	pop	r23
    1376:	6f 91       	pop	r22
    1378:	5f 91       	pop	r21
    137a:	4f 91       	pop	r20
    137c:	3f 91       	pop	r19
    137e:	2f 91       	pop	r18
    1380:	0f 90       	pop	r0
    1382:	0f be       	out	0x3f, r0	; 63
    1384:	0f 90       	pop	r0
    1386:	1f 90       	pop	r1
    1388:	18 95       	reti

0000138a <__vector_16>:
    138a:	1f 92       	push	r1
    138c:	0f 92       	push	r0
    138e:	0f b6       	in	r0, 0x3f	; 63
    1390:	0f 92       	push	r0
    1392:	11 24       	eor	r1, r1
    1394:	2f 93       	push	r18
    1396:	3f 93       	push	r19
    1398:	4f 93       	push	r20
    139a:	5f 93       	push	r21
    139c:	6f 93       	push	r22
    139e:	7f 93       	push	r23
    13a0:	8f 93       	push	r24
    13a2:	9f 93       	push	r25
    13a4:	af 93       	push	r26
    13a6:	bf 93       	push	r27
    13a8:	ef 93       	push	r30
    13aa:	ff 93       	push	r31
    13ac:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <overflows>
    13b0:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <overflows+0x1>
    13b4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    13b8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    13bc:	c9 01       	movw	r24, r18
    13be:	03 2e       	mov	r0, r19
    13c0:	00 0c       	add	r0, r0
    13c2:	aa 0b       	sbc	r26, r26
    13c4:	bb 0b       	sbc	r27, r27
    13c6:	dc 01       	movw	r26, r24
    13c8:	99 27       	eor	r25, r25
    13ca:	88 27       	eor	r24, r24
    13cc:	60 e0       	ldi	r22, 0x00	; 0
    13ce:	70 e0       	ldi	r23, 0x00	; 0
    13d0:	84 2b       	or	r24, r20
    13d2:	95 2b       	or	r25, r21
    13d4:	a6 2b       	or	r26, r22
    13d6:	b7 2b       	or	r27, r23
    13d8:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <timestamp>
    13dc:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <timestamp+0x1>
    13e0:	a0 93 9e 01 	sts	0x019E, r26	; 0x80019e <timestamp+0x2>
    13e4:	b0 93 9f 01 	sts	0x019F, r27	; 0x80019f <timestamp+0x3>
    13e8:	b0 9b       	sbis	0x16, 0	; 22
    13ea:	1b c0       	rjmp	.+54     	; 0x1422 <__vector_16+0x98>
    13ec:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    13f0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    13f4:	c9 01       	movw	r24, r18
    13f6:	01 96       	adiw	r24, 0x01	; 1
    13f8:	09 2e       	mov	r0, r25
    13fa:	00 0c       	add	r0, r0
    13fc:	aa 0b       	sbc	r26, r26
    13fe:	bb 0b       	sbc	r27, r27
    1400:	dc 01       	movw	r26, r24
    1402:	99 27       	eor	r25, r25
    1404:	88 27       	eor	r24, r24
    1406:	60 e0       	ldi	r22, 0x00	; 0
    1408:	70 e0       	ldi	r23, 0x00	; 0
    140a:	84 2b       	or	r24, r20
    140c:	95 2b       	or	r25, r21
    140e:	a6 2b       	or	r26, r22
    1410:	b7 2b       	or	r27, r23
    1412:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <timestamp>
    1416:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <timestamp+0x1>
    141a:	a0 93 9e 01 	sts	0x019E, r26	; 0x80019e <timestamp+0x2>
    141e:	b0 93 9f 01 	sts	0x019F, r27	; 0x80019f <timestamp+0x3>
    1422:	e0 91 52 02 	lds	r30, 0x0252	; 0x800252 <mtable+0x16>
    1426:	f0 91 53 02 	lds	r31, 0x0253	; 0x800253 <mtable+0x17>
    142a:	30 97       	sbiw	r30, 0x00	; 0
    142c:	39 f0       	breq	.+14     	; 0x143c <__vector_16+0xb2>
    142e:	6b e0       	ldi	r22, 0x0B	; 11
    1430:	70 e0       	ldi	r23, 0x00	; 0
    1432:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <otable+0x16>
    1436:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <otable+0x17>
    143a:	09 95       	icall
    143c:	0e 94 e6 04 	call	0x9cc	; 0x9cc <schedule>
    1440:	ff 91       	pop	r31
    1442:	ef 91       	pop	r30
    1444:	bf 91       	pop	r27
    1446:	af 91       	pop	r26
    1448:	9f 91       	pop	r25
    144a:	8f 91       	pop	r24
    144c:	7f 91       	pop	r23
    144e:	6f 91       	pop	r22
    1450:	5f 91       	pop	r21
    1452:	4f 91       	pop	r20
    1454:	3f 91       	pop	r19
    1456:	2f 91       	pop	r18
    1458:	0f 90       	pop	r0
    145a:	0f be       	out	0x3f, r0	; 63
    145c:	0f 90       	pop	r0
    145e:	1f 90       	pop	r1
    1460:	18 95       	reti

00001462 <__vector_17>:
    1462:	1f 92       	push	r1
    1464:	0f 92       	push	r0
    1466:	0f b6       	in	r0, 0x3f	; 63
    1468:	0f 92       	push	r0
    146a:	11 24       	eor	r1, r1
    146c:	2f 93       	push	r18
    146e:	3f 93       	push	r19
    1470:	4f 93       	push	r20
    1472:	5f 93       	push	r21
    1474:	6f 93       	push	r22
    1476:	7f 93       	push	r23
    1478:	8f 93       	push	r24
    147a:	9f 93       	push	r25
    147c:	af 93       	push	r26
    147e:	bf 93       	push	r27
    1480:	ef 93       	push	r30
    1482:	ff 93       	push	r31
    1484:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <overflows>
    1488:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <overflows+0x1>
    148c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1490:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1494:	c9 01       	movw	r24, r18
    1496:	03 2e       	mov	r0, r19
    1498:	00 0c       	add	r0, r0
    149a:	aa 0b       	sbc	r26, r26
    149c:	bb 0b       	sbc	r27, r27
    149e:	dc 01       	movw	r26, r24
    14a0:	99 27       	eor	r25, r25
    14a2:	88 27       	eor	r24, r24
    14a4:	60 e0       	ldi	r22, 0x00	; 0
    14a6:	70 e0       	ldi	r23, 0x00	; 0
    14a8:	84 2b       	or	r24, r20
    14aa:	95 2b       	or	r25, r21
    14ac:	a6 2b       	or	r26, r22
    14ae:	b7 2b       	or	r27, r23
    14b0:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <timestamp>
    14b4:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <timestamp+0x1>
    14b8:	a0 93 9e 01 	sts	0x019E, r26	; 0x80019e <timestamp+0x2>
    14bc:	b0 93 9f 01 	sts	0x019F, r27	; 0x80019f <timestamp+0x3>
    14c0:	b0 9b       	sbis	0x16, 0	; 22
    14c2:	1b c0       	rjmp	.+54     	; 0x14fa <__vector_17+0x98>
    14c4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    14c8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    14cc:	c9 01       	movw	r24, r18
    14ce:	01 96       	adiw	r24, 0x01	; 1
    14d0:	09 2e       	mov	r0, r25
    14d2:	00 0c       	add	r0, r0
    14d4:	aa 0b       	sbc	r26, r26
    14d6:	bb 0b       	sbc	r27, r27
    14d8:	dc 01       	movw	r26, r24
    14da:	99 27       	eor	r25, r25
    14dc:	88 27       	eor	r24, r24
    14de:	60 e0       	ldi	r22, 0x00	; 0
    14e0:	70 e0       	ldi	r23, 0x00	; 0
    14e2:	84 2b       	or	r24, r20
    14e4:	95 2b       	or	r25, r21
    14e6:	a6 2b       	or	r26, r22
    14e8:	b7 2b       	or	r27, r23
    14ea:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <timestamp>
    14ee:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <timestamp+0x1>
    14f2:	a0 93 9e 01 	sts	0x019E, r26	; 0x80019e <timestamp+0x2>
    14f6:	b0 93 9f 01 	sts	0x019F, r27	; 0x80019f <timestamp+0x3>
    14fa:	e0 91 54 02 	lds	r30, 0x0254	; 0x800254 <mtable+0x18>
    14fe:	f0 91 55 02 	lds	r31, 0x0255	; 0x800255 <mtable+0x19>
    1502:	30 97       	sbiw	r30, 0x00	; 0
    1504:	39 f0       	breq	.+14     	; 0x1514 <__vector_17+0xb2>
    1506:	6c e0       	ldi	r22, 0x0C	; 12
    1508:	70 e0       	ldi	r23, 0x00	; 0
    150a:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <otable+0x18>
    150e:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <otable+0x19>
    1512:	09 95       	icall
    1514:	0e 94 e6 04 	call	0x9cc	; 0x9cc <schedule>
    1518:	ff 91       	pop	r31
    151a:	ef 91       	pop	r30
    151c:	bf 91       	pop	r27
    151e:	af 91       	pop	r26
    1520:	9f 91       	pop	r25
    1522:	8f 91       	pop	r24
    1524:	7f 91       	pop	r23
    1526:	6f 91       	pop	r22
    1528:	5f 91       	pop	r21
    152a:	4f 91       	pop	r20
    152c:	3f 91       	pop	r19
    152e:	2f 91       	pop	r18
    1530:	0f 90       	pop	r0
    1532:	0f be       	out	0x3f, r0	; 63
    1534:	0f 90       	pop	r0
    1536:	1f 90       	pop	r1
    1538:	18 95       	reti

0000153a <__vector_18>:
    153a:	1f 92       	push	r1
    153c:	0f 92       	push	r0
    153e:	0f b6       	in	r0, 0x3f	; 63
    1540:	0f 92       	push	r0
    1542:	11 24       	eor	r1, r1
    1544:	2f 93       	push	r18
    1546:	3f 93       	push	r19
    1548:	4f 93       	push	r20
    154a:	5f 93       	push	r21
    154c:	6f 93       	push	r22
    154e:	7f 93       	push	r23
    1550:	8f 93       	push	r24
    1552:	9f 93       	push	r25
    1554:	af 93       	push	r26
    1556:	bf 93       	push	r27
    1558:	ef 93       	push	r30
    155a:	ff 93       	push	r31
    155c:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <overflows>
    1560:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <overflows+0x1>
    1564:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1568:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    156c:	c9 01       	movw	r24, r18
    156e:	03 2e       	mov	r0, r19
    1570:	00 0c       	add	r0, r0
    1572:	aa 0b       	sbc	r26, r26
    1574:	bb 0b       	sbc	r27, r27
    1576:	dc 01       	movw	r26, r24
    1578:	99 27       	eor	r25, r25
    157a:	88 27       	eor	r24, r24
    157c:	60 e0       	ldi	r22, 0x00	; 0
    157e:	70 e0       	ldi	r23, 0x00	; 0
    1580:	84 2b       	or	r24, r20
    1582:	95 2b       	or	r25, r21
    1584:	a6 2b       	or	r26, r22
    1586:	b7 2b       	or	r27, r23
    1588:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <timestamp>
    158c:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <timestamp+0x1>
    1590:	a0 93 9e 01 	sts	0x019E, r26	; 0x80019e <timestamp+0x2>
    1594:	b0 93 9f 01 	sts	0x019F, r27	; 0x80019f <timestamp+0x3>
    1598:	b0 9b       	sbis	0x16, 0	; 22
    159a:	1b c0       	rjmp	.+54     	; 0x15d2 <__vector_18+0x98>
    159c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    15a0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    15a4:	c9 01       	movw	r24, r18
    15a6:	01 96       	adiw	r24, 0x01	; 1
    15a8:	09 2e       	mov	r0, r25
    15aa:	00 0c       	add	r0, r0
    15ac:	aa 0b       	sbc	r26, r26
    15ae:	bb 0b       	sbc	r27, r27
    15b0:	dc 01       	movw	r26, r24
    15b2:	99 27       	eor	r25, r25
    15b4:	88 27       	eor	r24, r24
    15b6:	60 e0       	ldi	r22, 0x00	; 0
    15b8:	70 e0       	ldi	r23, 0x00	; 0
    15ba:	84 2b       	or	r24, r20
    15bc:	95 2b       	or	r25, r21
    15be:	a6 2b       	or	r26, r22
    15c0:	b7 2b       	or	r27, r23
    15c2:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <timestamp>
    15c6:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <timestamp+0x1>
    15ca:	a0 93 9e 01 	sts	0x019E, r26	; 0x80019e <timestamp+0x2>
    15ce:	b0 93 9f 01 	sts	0x019F, r27	; 0x80019f <timestamp+0x3>
    15d2:	e0 91 56 02 	lds	r30, 0x0256	; 0x800256 <mtable+0x1a>
    15d6:	f0 91 57 02 	lds	r31, 0x0257	; 0x800257 <mtable+0x1b>
    15da:	30 97       	sbiw	r30, 0x00	; 0
    15dc:	39 f0       	breq	.+14     	; 0x15ec <__vector_18+0xb2>
    15de:	6d e0       	ldi	r22, 0x0D	; 13
    15e0:	70 e0       	ldi	r23, 0x00	; 0
    15e2:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <otable+0x1a>
    15e6:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <otable+0x1b>
    15ea:	09 95       	icall
    15ec:	0e 94 e6 04 	call	0x9cc	; 0x9cc <schedule>
    15f0:	ff 91       	pop	r31
    15f2:	ef 91       	pop	r30
    15f4:	bf 91       	pop	r27
    15f6:	af 91       	pop	r26
    15f8:	9f 91       	pop	r25
    15fa:	8f 91       	pop	r24
    15fc:	7f 91       	pop	r23
    15fe:	6f 91       	pop	r22
    1600:	5f 91       	pop	r21
    1602:	4f 91       	pop	r20
    1604:	3f 91       	pop	r19
    1606:	2f 91       	pop	r18
    1608:	0f 90       	pop	r0
    160a:	0f be       	out	0x3f, r0	; 63
    160c:	0f 90       	pop	r0
    160e:	1f 90       	pop	r1
    1610:	18 95       	reti

00001612 <__vector_19>:
    1612:	1f 92       	push	r1
    1614:	0f 92       	push	r0
    1616:	0f b6       	in	r0, 0x3f	; 63
    1618:	0f 92       	push	r0
    161a:	11 24       	eor	r1, r1
    161c:	2f 93       	push	r18
    161e:	3f 93       	push	r19
    1620:	4f 93       	push	r20
    1622:	5f 93       	push	r21
    1624:	6f 93       	push	r22
    1626:	7f 93       	push	r23
    1628:	8f 93       	push	r24
    162a:	9f 93       	push	r25
    162c:	af 93       	push	r26
    162e:	bf 93       	push	r27
    1630:	ef 93       	push	r30
    1632:	ff 93       	push	r31
    1634:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <overflows>
    1638:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <overflows+0x1>
    163c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1640:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1644:	c9 01       	movw	r24, r18
    1646:	03 2e       	mov	r0, r19
    1648:	00 0c       	add	r0, r0
    164a:	aa 0b       	sbc	r26, r26
    164c:	bb 0b       	sbc	r27, r27
    164e:	dc 01       	movw	r26, r24
    1650:	99 27       	eor	r25, r25
    1652:	88 27       	eor	r24, r24
    1654:	60 e0       	ldi	r22, 0x00	; 0
    1656:	70 e0       	ldi	r23, 0x00	; 0
    1658:	84 2b       	or	r24, r20
    165a:	95 2b       	or	r25, r21
    165c:	a6 2b       	or	r26, r22
    165e:	b7 2b       	or	r27, r23
    1660:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <timestamp>
    1664:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <timestamp+0x1>
    1668:	a0 93 9e 01 	sts	0x019E, r26	; 0x80019e <timestamp+0x2>
    166c:	b0 93 9f 01 	sts	0x019F, r27	; 0x80019f <timestamp+0x3>
    1670:	b0 9b       	sbis	0x16, 0	; 22
    1672:	1b c0       	rjmp	.+54     	; 0x16aa <__vector_19+0x98>
    1674:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1678:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    167c:	c9 01       	movw	r24, r18
    167e:	01 96       	adiw	r24, 0x01	; 1
    1680:	09 2e       	mov	r0, r25
    1682:	00 0c       	add	r0, r0
    1684:	aa 0b       	sbc	r26, r26
    1686:	bb 0b       	sbc	r27, r27
    1688:	dc 01       	movw	r26, r24
    168a:	99 27       	eor	r25, r25
    168c:	88 27       	eor	r24, r24
    168e:	60 e0       	ldi	r22, 0x00	; 0
    1690:	70 e0       	ldi	r23, 0x00	; 0
    1692:	84 2b       	or	r24, r20
    1694:	95 2b       	or	r25, r21
    1696:	a6 2b       	or	r26, r22
    1698:	b7 2b       	or	r27, r23
    169a:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <timestamp>
    169e:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <timestamp+0x1>
    16a2:	a0 93 9e 01 	sts	0x019E, r26	; 0x80019e <timestamp+0x2>
    16a6:	b0 93 9f 01 	sts	0x019F, r27	; 0x80019f <timestamp+0x3>
    16aa:	e0 91 58 02 	lds	r30, 0x0258	; 0x800258 <mtable+0x1c>
    16ae:	f0 91 59 02 	lds	r31, 0x0259	; 0x800259 <mtable+0x1d>
    16b2:	30 97       	sbiw	r30, 0x00	; 0
    16b4:	39 f0       	breq	.+14     	; 0x16c4 <__vector_19+0xb2>
    16b6:	6e e0       	ldi	r22, 0x0E	; 14
    16b8:	70 e0       	ldi	r23, 0x00	; 0
    16ba:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <otable+0x1c>
    16be:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <otable+0x1d>
    16c2:	09 95       	icall
    16c4:	0e 94 e6 04 	call	0x9cc	; 0x9cc <schedule>
    16c8:	ff 91       	pop	r31
    16ca:	ef 91       	pop	r30
    16cc:	bf 91       	pop	r27
    16ce:	af 91       	pop	r26
    16d0:	9f 91       	pop	r25
    16d2:	8f 91       	pop	r24
    16d4:	7f 91       	pop	r23
    16d6:	6f 91       	pop	r22
    16d8:	5f 91       	pop	r21
    16da:	4f 91       	pop	r20
    16dc:	3f 91       	pop	r19
    16de:	2f 91       	pop	r18
    16e0:	0f 90       	pop	r0
    16e2:	0f be       	out	0x3f, r0	; 63
    16e4:	0f 90       	pop	r0
    16e6:	1f 90       	pop	r1
    16e8:	18 95       	reti

000016ea <__vector_20>:
    16ea:	1f 92       	push	r1
    16ec:	0f 92       	push	r0
    16ee:	0f b6       	in	r0, 0x3f	; 63
    16f0:	0f 92       	push	r0
    16f2:	11 24       	eor	r1, r1
    16f4:	2f 93       	push	r18
    16f6:	3f 93       	push	r19
    16f8:	4f 93       	push	r20
    16fa:	5f 93       	push	r21
    16fc:	6f 93       	push	r22
    16fe:	7f 93       	push	r23
    1700:	8f 93       	push	r24
    1702:	9f 93       	push	r25
    1704:	af 93       	push	r26
    1706:	bf 93       	push	r27
    1708:	ef 93       	push	r30
    170a:	ff 93       	push	r31
    170c:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <overflows>
    1710:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <overflows+0x1>
    1714:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1718:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    171c:	c9 01       	movw	r24, r18
    171e:	03 2e       	mov	r0, r19
    1720:	00 0c       	add	r0, r0
    1722:	aa 0b       	sbc	r26, r26
    1724:	bb 0b       	sbc	r27, r27
    1726:	dc 01       	movw	r26, r24
    1728:	99 27       	eor	r25, r25
    172a:	88 27       	eor	r24, r24
    172c:	60 e0       	ldi	r22, 0x00	; 0
    172e:	70 e0       	ldi	r23, 0x00	; 0
    1730:	84 2b       	or	r24, r20
    1732:	95 2b       	or	r25, r21
    1734:	a6 2b       	or	r26, r22
    1736:	b7 2b       	or	r27, r23
    1738:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <timestamp>
    173c:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <timestamp+0x1>
    1740:	a0 93 9e 01 	sts	0x019E, r26	; 0x80019e <timestamp+0x2>
    1744:	b0 93 9f 01 	sts	0x019F, r27	; 0x80019f <timestamp+0x3>
    1748:	b0 9b       	sbis	0x16, 0	; 22
    174a:	1b c0       	rjmp	.+54     	; 0x1782 <__vector_20+0x98>
    174c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1750:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1754:	c9 01       	movw	r24, r18
    1756:	01 96       	adiw	r24, 0x01	; 1
    1758:	09 2e       	mov	r0, r25
    175a:	00 0c       	add	r0, r0
    175c:	aa 0b       	sbc	r26, r26
    175e:	bb 0b       	sbc	r27, r27
    1760:	dc 01       	movw	r26, r24
    1762:	99 27       	eor	r25, r25
    1764:	88 27       	eor	r24, r24
    1766:	60 e0       	ldi	r22, 0x00	; 0
    1768:	70 e0       	ldi	r23, 0x00	; 0
    176a:	84 2b       	or	r24, r20
    176c:	95 2b       	or	r25, r21
    176e:	a6 2b       	or	r26, r22
    1770:	b7 2b       	or	r27, r23
    1772:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <timestamp>
    1776:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <timestamp+0x1>
    177a:	a0 93 9e 01 	sts	0x019E, r26	; 0x80019e <timestamp+0x2>
    177e:	b0 93 9f 01 	sts	0x019F, r27	; 0x80019f <timestamp+0x3>
    1782:	e0 91 5a 02 	lds	r30, 0x025A	; 0x80025a <mtable+0x1e>
    1786:	f0 91 5b 02 	lds	r31, 0x025B	; 0x80025b <mtable+0x1f>
    178a:	30 97       	sbiw	r30, 0x00	; 0
    178c:	39 f0       	breq	.+14     	; 0x179c <__vector_20+0xb2>
    178e:	6f e0       	ldi	r22, 0x0F	; 15
    1790:	70 e0       	ldi	r23, 0x00	; 0
    1792:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <otable+0x1e>
    1796:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <otable+0x1f>
    179a:	09 95       	icall
    179c:	0e 94 e6 04 	call	0x9cc	; 0x9cc <schedule>
    17a0:	ff 91       	pop	r31
    17a2:	ef 91       	pop	r30
    17a4:	bf 91       	pop	r27
    17a6:	af 91       	pop	r26
    17a8:	9f 91       	pop	r25
    17aa:	8f 91       	pop	r24
    17ac:	7f 91       	pop	r23
    17ae:	6f 91       	pop	r22
    17b0:	5f 91       	pop	r21
    17b2:	4f 91       	pop	r20
    17b4:	3f 91       	pop	r19
    17b6:	2f 91       	pop	r18
    17b8:	0f 90       	pop	r0
    17ba:	0f be       	out	0x3f, r0	; 63
    17bc:	0f 90       	pop	r0
    17be:	1f 90       	pop	r1
    17c0:	18 95       	reti

000017c2 <__vector_21>:
    17c2:	1f 92       	push	r1
    17c4:	0f 92       	push	r0
    17c6:	0f b6       	in	r0, 0x3f	; 63
    17c8:	0f 92       	push	r0
    17ca:	11 24       	eor	r1, r1
    17cc:	2f 93       	push	r18
    17ce:	3f 93       	push	r19
    17d0:	4f 93       	push	r20
    17d2:	5f 93       	push	r21
    17d4:	6f 93       	push	r22
    17d6:	7f 93       	push	r23
    17d8:	8f 93       	push	r24
    17da:	9f 93       	push	r25
    17dc:	af 93       	push	r26
    17de:	bf 93       	push	r27
    17e0:	ef 93       	push	r30
    17e2:	ff 93       	push	r31
    17e4:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <overflows>
    17e8:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <overflows+0x1>
    17ec:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    17f0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    17f4:	c9 01       	movw	r24, r18
    17f6:	03 2e       	mov	r0, r19
    17f8:	00 0c       	add	r0, r0
    17fa:	aa 0b       	sbc	r26, r26
    17fc:	bb 0b       	sbc	r27, r27
    17fe:	dc 01       	movw	r26, r24
    1800:	99 27       	eor	r25, r25
    1802:	88 27       	eor	r24, r24
    1804:	60 e0       	ldi	r22, 0x00	; 0
    1806:	70 e0       	ldi	r23, 0x00	; 0
    1808:	84 2b       	or	r24, r20
    180a:	95 2b       	or	r25, r21
    180c:	a6 2b       	or	r26, r22
    180e:	b7 2b       	or	r27, r23
    1810:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <timestamp>
    1814:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <timestamp+0x1>
    1818:	a0 93 9e 01 	sts	0x019E, r26	; 0x80019e <timestamp+0x2>
    181c:	b0 93 9f 01 	sts	0x019F, r27	; 0x80019f <timestamp+0x3>
    1820:	b0 9b       	sbis	0x16, 0	; 22
    1822:	1b c0       	rjmp	.+54     	; 0x185a <__vector_21+0x98>
    1824:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1828:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    182c:	c9 01       	movw	r24, r18
    182e:	01 96       	adiw	r24, 0x01	; 1
    1830:	09 2e       	mov	r0, r25
    1832:	00 0c       	add	r0, r0
    1834:	aa 0b       	sbc	r26, r26
    1836:	bb 0b       	sbc	r27, r27
    1838:	dc 01       	movw	r26, r24
    183a:	99 27       	eor	r25, r25
    183c:	88 27       	eor	r24, r24
    183e:	60 e0       	ldi	r22, 0x00	; 0
    1840:	70 e0       	ldi	r23, 0x00	; 0
    1842:	84 2b       	or	r24, r20
    1844:	95 2b       	or	r25, r21
    1846:	a6 2b       	or	r26, r22
    1848:	b7 2b       	or	r27, r23
    184a:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <timestamp>
    184e:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <timestamp+0x1>
    1852:	a0 93 9e 01 	sts	0x019E, r26	; 0x80019e <timestamp+0x2>
    1856:	b0 93 9f 01 	sts	0x019F, r27	; 0x80019f <timestamp+0x3>
    185a:	e0 91 5c 02 	lds	r30, 0x025C	; 0x80025c <mtable+0x20>
    185e:	f0 91 5d 02 	lds	r31, 0x025D	; 0x80025d <mtable+0x21>
    1862:	30 97       	sbiw	r30, 0x00	; 0
    1864:	39 f0       	breq	.+14     	; 0x1874 <__vector_21+0xb2>
    1866:	60 e1       	ldi	r22, 0x10	; 16
    1868:	70 e0       	ldi	r23, 0x00	; 0
    186a:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <otable+0x20>
    186e:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <otable+0x21>
    1872:	09 95       	icall
    1874:	0e 94 e6 04 	call	0x9cc	; 0x9cc <schedule>
    1878:	ff 91       	pop	r31
    187a:	ef 91       	pop	r30
    187c:	bf 91       	pop	r27
    187e:	af 91       	pop	r26
    1880:	9f 91       	pop	r25
    1882:	8f 91       	pop	r24
    1884:	7f 91       	pop	r23
    1886:	6f 91       	pop	r22
    1888:	5f 91       	pop	r21
    188a:	4f 91       	pop	r20
    188c:	3f 91       	pop	r19
    188e:	2f 91       	pop	r18
    1890:	0f 90       	pop	r0
    1892:	0f be       	out	0x3f, r0	; 63
    1894:	0f 90       	pop	r0
    1896:	1f 90       	pop	r1
    1898:	18 95       	reti

0000189a <__vector_22>:
    189a:	1f 92       	push	r1
    189c:	0f 92       	push	r0
    189e:	0f b6       	in	r0, 0x3f	; 63
    18a0:	0f 92       	push	r0
    18a2:	11 24       	eor	r1, r1
    18a4:	2f 93       	push	r18
    18a6:	3f 93       	push	r19
    18a8:	4f 93       	push	r20
    18aa:	5f 93       	push	r21
    18ac:	6f 93       	push	r22
    18ae:	7f 93       	push	r23
    18b0:	8f 93       	push	r24
    18b2:	9f 93       	push	r25
    18b4:	af 93       	push	r26
    18b6:	bf 93       	push	r27
    18b8:	ef 93       	push	r30
    18ba:	ff 93       	push	r31
    18bc:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <overflows>
    18c0:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <overflows+0x1>
    18c4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    18c8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    18cc:	c9 01       	movw	r24, r18
    18ce:	03 2e       	mov	r0, r19
    18d0:	00 0c       	add	r0, r0
    18d2:	aa 0b       	sbc	r26, r26
    18d4:	bb 0b       	sbc	r27, r27
    18d6:	dc 01       	movw	r26, r24
    18d8:	99 27       	eor	r25, r25
    18da:	88 27       	eor	r24, r24
    18dc:	60 e0       	ldi	r22, 0x00	; 0
    18de:	70 e0       	ldi	r23, 0x00	; 0
    18e0:	84 2b       	or	r24, r20
    18e2:	95 2b       	or	r25, r21
    18e4:	a6 2b       	or	r26, r22
    18e6:	b7 2b       	or	r27, r23
    18e8:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <timestamp>
    18ec:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <timestamp+0x1>
    18f0:	a0 93 9e 01 	sts	0x019E, r26	; 0x80019e <timestamp+0x2>
    18f4:	b0 93 9f 01 	sts	0x019F, r27	; 0x80019f <timestamp+0x3>
    18f8:	b0 9b       	sbis	0x16, 0	; 22
    18fa:	1b c0       	rjmp	.+54     	; 0x1932 <__vector_22+0x98>
    18fc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1900:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1904:	c9 01       	movw	r24, r18
    1906:	01 96       	adiw	r24, 0x01	; 1
    1908:	09 2e       	mov	r0, r25
    190a:	00 0c       	add	r0, r0
    190c:	aa 0b       	sbc	r26, r26
    190e:	bb 0b       	sbc	r27, r27
    1910:	dc 01       	movw	r26, r24
    1912:	99 27       	eor	r25, r25
    1914:	88 27       	eor	r24, r24
    1916:	60 e0       	ldi	r22, 0x00	; 0
    1918:	70 e0       	ldi	r23, 0x00	; 0
    191a:	84 2b       	or	r24, r20
    191c:	95 2b       	or	r25, r21
    191e:	a6 2b       	or	r26, r22
    1920:	b7 2b       	or	r27, r23
    1922:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <timestamp>
    1926:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <timestamp+0x1>
    192a:	a0 93 9e 01 	sts	0x019E, r26	; 0x80019e <timestamp+0x2>
    192e:	b0 93 9f 01 	sts	0x019F, r27	; 0x80019f <timestamp+0x3>
    1932:	e0 91 5e 02 	lds	r30, 0x025E	; 0x80025e <mtable+0x22>
    1936:	f0 91 5f 02 	lds	r31, 0x025F	; 0x80025f <mtable+0x23>
    193a:	30 97       	sbiw	r30, 0x00	; 0
    193c:	39 f0       	breq	.+14     	; 0x194c <__vector_22+0xb2>
    193e:	61 e1       	ldi	r22, 0x11	; 17
    1940:	70 e0       	ldi	r23, 0x00	; 0
    1942:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <otable+0x22>
    1946:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <otable+0x23>
    194a:	09 95       	icall
    194c:	0e 94 e6 04 	call	0x9cc	; 0x9cc <schedule>
    1950:	ff 91       	pop	r31
    1952:	ef 91       	pop	r30
    1954:	bf 91       	pop	r27
    1956:	af 91       	pop	r26
    1958:	9f 91       	pop	r25
    195a:	8f 91       	pop	r24
    195c:	7f 91       	pop	r23
    195e:	6f 91       	pop	r22
    1960:	5f 91       	pop	r21
    1962:	4f 91       	pop	r20
    1964:	3f 91       	pop	r19
    1966:	2f 91       	pop	r18
    1968:	0f 90       	pop	r0
    196a:	0f be       	out	0x3f, r0	; 63
    196c:	0f 90       	pop	r0
    196e:	1f 90       	pop	r1
    1970:	18 95       	reti

00001972 <enqueueByDeadline>:
    1972:	ef 92       	push	r14
    1974:	ff 92       	push	r15
    1976:	0f 93       	push	r16
    1978:	1f 93       	push	r17
    197a:	cf 93       	push	r28
    197c:	df 93       	push	r29
    197e:	7b 01       	movw	r14, r22
    1980:	eb 01       	movw	r28, r22
    1982:	a8 81       	ld	r26, Y
    1984:	b9 81       	ldd	r27, Y+1	; 0x01
    1986:	10 97       	sbiw	r26, 0x00	; 0
    1988:	61 f1       	breq	.+88     	; 0x19e2 <enqueueByDeadline+0x70>
    198a:	fc 01       	movw	r30, r24
    198c:	06 81       	ldd	r16, Z+6	; 0x06
    198e:	17 81       	ldd	r17, Z+7	; 0x07
    1990:	20 85       	ldd	r18, Z+8	; 0x08
    1992:	31 85       	ldd	r19, Z+9	; 0x09
    1994:	16 96       	adiw	r26, 0x06	; 6
    1996:	4d 91       	ld	r20, X+
    1998:	5d 91       	ld	r21, X+
    199a:	6d 91       	ld	r22, X+
    199c:	7c 91       	ld	r23, X
    199e:	19 97       	sbiw	r26, 0x09	; 9
    19a0:	04 17       	cp	r16, r20
    19a2:	15 07       	cpc	r17, r21
    19a4:	26 07       	cpc	r18, r22
    19a6:	37 07       	cpc	r19, r23
    19a8:	14 f4       	brge	.+4      	; 0x19ae <enqueueByDeadline+0x3c>
    19aa:	1b c0       	rjmp	.+54     	; 0x19e2 <enqueueByDeadline+0x70>
    19ac:	df 01       	movw	r26, r30
    19ae:	ed 91       	ld	r30, X+
    19b0:	fc 91       	ld	r31, X
    19b2:	11 97       	sbiw	r26, 0x01	; 1
    19b4:	30 97       	sbiw	r30, 0x00	; 0
    19b6:	49 f0       	breq	.+18     	; 0x19ca <enqueueByDeadline+0x58>
    19b8:	46 81       	ldd	r20, Z+6	; 0x06
    19ba:	57 81       	ldd	r21, Z+7	; 0x07
    19bc:	60 85       	ldd	r22, Z+8	; 0x08
    19be:	71 85       	ldd	r23, Z+9	; 0x09
    19c0:	04 17       	cp	r16, r20
    19c2:	15 07       	cpc	r17, r21
    19c4:	26 07       	cpc	r18, r22
    19c6:	37 07       	cpc	r19, r23
    19c8:	8c f7       	brge	.-30     	; 0x19ac <enqueueByDeadline+0x3a>
    19ca:	ec 01       	movw	r28, r24
    19cc:	f9 83       	std	Y+1, r31	; 0x01
    19ce:	e8 83       	st	Y, r30
    19d0:	10 97       	sbiw	r26, 0x00	; 0
    19d2:	21 f4       	brne	.+8      	; 0x19dc <enqueueByDeadline+0x6a>
    19d4:	f7 01       	movw	r30, r14
    19d6:	91 83       	std	Z+1, r25	; 0x01
    19d8:	80 83       	st	Z, r24
    19da:	07 c0       	rjmp	.+14     	; 0x19ea <enqueueByDeadline+0x78>
    19dc:	8d 93       	st	X+, r24
    19de:	9c 93       	st	X, r25
    19e0:	04 c0       	rjmp	.+8      	; 0x19ea <enqueueByDeadline+0x78>
    19e2:	ec 01       	movw	r28, r24
    19e4:	b9 83       	std	Y+1, r27	; 0x01
    19e6:	a8 83       	st	Y, r26
    19e8:	f5 cf       	rjmp	.-22     	; 0x19d4 <enqueueByDeadline+0x62>
    19ea:	df 91       	pop	r29
    19ec:	cf 91       	pop	r28
    19ee:	1f 91       	pop	r17
    19f0:	0f 91       	pop	r16
    19f2:	ff 90       	pop	r15
    19f4:	ef 90       	pop	r14
    19f6:	08 95       	ret

000019f8 <enqueueByBaseline>:
    19f8:	ef 92       	push	r14
    19fa:	ff 92       	push	r15
    19fc:	0f 93       	push	r16
    19fe:	1f 93       	push	r17
    1a00:	cf 93       	push	r28
    1a02:	df 93       	push	r29
    1a04:	7b 01       	movw	r14, r22
    1a06:	eb 01       	movw	r28, r22
    1a08:	a8 81       	ld	r26, Y
    1a0a:	b9 81       	ldd	r27, Y+1	; 0x01
    1a0c:	10 97       	sbiw	r26, 0x00	; 0
    1a0e:	61 f1       	breq	.+88     	; 0x1a68 <enqueueByBaseline+0x70>
    1a10:	fc 01       	movw	r30, r24
    1a12:	02 81       	ldd	r16, Z+2	; 0x02
    1a14:	13 81       	ldd	r17, Z+3	; 0x03
    1a16:	24 81       	ldd	r18, Z+4	; 0x04
    1a18:	35 81       	ldd	r19, Z+5	; 0x05
    1a1a:	12 96       	adiw	r26, 0x02	; 2
    1a1c:	4d 91       	ld	r20, X+
    1a1e:	5d 91       	ld	r21, X+
    1a20:	6d 91       	ld	r22, X+
    1a22:	7c 91       	ld	r23, X
    1a24:	15 97       	sbiw	r26, 0x05	; 5
    1a26:	04 17       	cp	r16, r20
    1a28:	15 07       	cpc	r17, r21
    1a2a:	26 07       	cpc	r18, r22
    1a2c:	37 07       	cpc	r19, r23
    1a2e:	14 f4       	brge	.+4      	; 0x1a34 <enqueueByBaseline+0x3c>
    1a30:	1b c0       	rjmp	.+54     	; 0x1a68 <enqueueByBaseline+0x70>
    1a32:	df 01       	movw	r26, r30
    1a34:	ed 91       	ld	r30, X+
    1a36:	fc 91       	ld	r31, X
    1a38:	11 97       	sbiw	r26, 0x01	; 1
    1a3a:	30 97       	sbiw	r30, 0x00	; 0
    1a3c:	49 f0       	breq	.+18     	; 0x1a50 <enqueueByBaseline+0x58>
    1a3e:	42 81       	ldd	r20, Z+2	; 0x02
    1a40:	53 81       	ldd	r21, Z+3	; 0x03
    1a42:	64 81       	ldd	r22, Z+4	; 0x04
    1a44:	75 81       	ldd	r23, Z+5	; 0x05
    1a46:	04 17       	cp	r16, r20
    1a48:	15 07       	cpc	r17, r21
    1a4a:	26 07       	cpc	r18, r22
    1a4c:	37 07       	cpc	r19, r23
    1a4e:	8c f7       	brge	.-30     	; 0x1a32 <enqueueByBaseline+0x3a>
    1a50:	ec 01       	movw	r28, r24
    1a52:	f9 83       	std	Y+1, r31	; 0x01
    1a54:	e8 83       	st	Y, r30
    1a56:	10 97       	sbiw	r26, 0x00	; 0
    1a58:	21 f4       	brne	.+8      	; 0x1a62 <enqueueByBaseline+0x6a>
    1a5a:	f7 01       	movw	r30, r14
    1a5c:	91 83       	std	Z+1, r25	; 0x01
    1a5e:	80 83       	st	Z, r24
    1a60:	07 c0       	rjmp	.+14     	; 0x1a70 <enqueueByBaseline+0x78>
    1a62:	8d 93       	st	X+, r24
    1a64:	9c 93       	st	X, r25
    1a66:	04 c0       	rjmp	.+8      	; 0x1a70 <enqueueByBaseline+0x78>
    1a68:	ec 01       	movw	r28, r24
    1a6a:	b9 83       	std	Y+1, r27	; 0x01
    1a6c:	a8 83       	st	Y, r26
    1a6e:	f5 cf       	rjmp	.-22     	; 0x1a5a <enqueueByBaseline+0x62>
    1a70:	df 91       	pop	r29
    1a72:	cf 91       	pop	r28
    1a74:	1f 91       	pop	r17
    1a76:	0f 91       	pop	r16
    1a78:	ff 90       	pop	r15
    1a7a:	ef 90       	pop	r14
    1a7c:	08 95       	ret

00001a7e <dequeue>:
    1a7e:	dc 01       	movw	r26, r24
    1a80:	ed 91       	ld	r30, X+
    1a82:	fc 91       	ld	r31, X
    1a84:	11 97       	sbiw	r26, 0x01	; 1
    1a86:	30 97       	sbiw	r30, 0x00	; 0
    1a88:	59 f4       	brne	.+22     	; 0x1aa0 <dequeue+0x22>
    1a8a:	8f ef       	ldi	r24, 0xFF	; 255
    1a8c:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
    1a90:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
    1a94:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	83 bf       	out	0x33, r24	; 51
    1a9c:	88 95       	sleep
    1a9e:	fd cf       	rjmp	.-6      	; 0x1a9a <dequeue+0x1c>
    1aa0:	20 81       	ld	r18, Z
    1aa2:	31 81       	ldd	r19, Z+1	; 0x01
    1aa4:	2d 93       	st	X+, r18
    1aa6:	3c 93       	st	X, r19
    1aa8:	cf 01       	movw	r24, r30
    1aaa:	08 95       	ret

00001aac <__vector_9>:
    1aac:	1f 92       	push	r1
    1aae:	0f 92       	push	r0
    1ab0:	0f b6       	in	r0, 0x3f	; 63
    1ab2:	0f 92       	push	r0
    1ab4:	11 24       	eor	r1, r1
    1ab6:	2f 93       	push	r18
    1ab8:	3f 93       	push	r19
    1aba:	4f 93       	push	r20
    1abc:	5f 93       	push	r21
    1abe:	6f 93       	push	r22
    1ac0:	7f 93       	push	r23
    1ac2:	8f 93       	push	r24
    1ac4:	9f 93       	push	r25
    1ac6:	ef 93       	push	r30
    1ac8:	ff 93       	push	r31
    1aca:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <overflows>
    1ace:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <overflows+0x1>
    1ad2:	01 96       	adiw	r24, 0x01	; 1
    1ad4:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <overflows+0x1>
    1ad8:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <overflows>
    1adc:	e0 91 a0 01 	lds	r30, 0x01A0	; 0x8001a0 <timerQ>
    1ae0:	f0 91 a1 01 	lds	r31, 0x01A1	; 0x8001a1 <timerQ+0x1>
    1ae4:	30 97       	sbiw	r30, 0x00	; 0
    1ae6:	01 f1       	breq	.+64     	; 0x1b28 <__vector_9+0x7c>
    1ae8:	42 81       	ldd	r20, Z+2	; 0x02
    1aea:	53 81       	ldd	r21, Z+3	; 0x03
    1aec:	64 81       	ldd	r22, Z+4	; 0x04
    1aee:	75 81       	ldd	r23, Z+5	; 0x05
    1af0:	86 17       	cp	r24, r22
    1af2:	97 07       	cpc	r25, r23
    1af4:	c9 f4       	brne	.+50     	; 0x1b28 <__vector_9+0x7c>
    1af6:	ca 01       	movw	r24, r20
    1af8:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1afc:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1b00:	42 1b       	sub	r20, r18
    1b02:	53 0b       	sbc	r21, r19
    1b04:	41 30       	cpi	r20, 0x01	; 1
    1b06:	51 05       	cpc	r21, r1
    1b08:	29 f4       	brne	.+10     	; 0x1b14 <__vector_9+0x68>
    1b0a:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1b0e:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1b12:	01 96       	adiw	r24, 0x01	; 1
    1b14:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1b18:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1b1c:	ef e6       	ldi	r30, 0x6F	; 111
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	80 81       	ld	r24, Z
    1b22:	82 60       	ori	r24, 0x02	; 2
    1b24:	80 83       	st	Z, r24
    1b26:	05 c0       	rjmp	.+10     	; 0x1b32 <__vector_9+0x86>
    1b28:	ef e6       	ldi	r30, 0x6F	; 111
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	80 81       	ld	r24, Z
    1b2e:	8d 7f       	andi	r24, 0xFD	; 253
    1b30:	80 83       	st	Z, r24
    1b32:	ff 91       	pop	r31
    1b34:	ef 91       	pop	r30
    1b36:	9f 91       	pop	r25
    1b38:	8f 91       	pop	r24
    1b3a:	7f 91       	pop	r23
    1b3c:	6f 91       	pop	r22
    1b3e:	5f 91       	pop	r21
    1b40:	4f 91       	pop	r20
    1b42:	3f 91       	pop	r19
    1b44:	2f 91       	pop	r18
    1b46:	0f 90       	pop	r0
    1b48:	0f be       	out	0x3f, r0	; 63
    1b4a:	0f 90       	pop	r0
    1b4c:	1f 90       	pop	r1
    1b4e:	18 95       	reti

00001b50 <__vector_7>:
    1b50:	1f 92       	push	r1
    1b52:	0f 92       	push	r0
    1b54:	0f b6       	in	r0, 0x3f	; 63
    1b56:	0f 92       	push	r0
    1b58:	11 24       	eor	r1, r1
    1b5a:	cf 92       	push	r12
    1b5c:	df 92       	push	r13
    1b5e:	ef 92       	push	r14
    1b60:	ff 92       	push	r15
    1b62:	2f 93       	push	r18
    1b64:	3f 93       	push	r19
    1b66:	4f 93       	push	r20
    1b68:	5f 93       	push	r21
    1b6a:	6f 93       	push	r22
    1b6c:	7f 93       	push	r23
    1b6e:	8f 93       	push	r24
    1b70:	9f 93       	push	r25
    1b72:	af 93       	push	r26
    1b74:	bf 93       	push	r27
    1b76:	ef 93       	push	r30
    1b78:	ff 93       	push	r31
    1b7a:	c0 90 9a 01 	lds	r12, 0x019A	; 0x80019a <overflows>
    1b7e:	d0 90 9b 01 	lds	r13, 0x019B	; 0x80019b <overflows+0x1>
    1b82:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1b86:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1b8a:	b0 99       	sbic	0x16, 0	; 22
    1b8c:	0f c0       	rjmp	.+30     	; 0x1bac <__vector_7+0x5c>
    1b8e:	0d 2c       	mov	r0, r13
    1b90:	00 0c       	add	r0, r0
    1b92:	ee 08       	sbc	r14, r14
    1b94:	ff 08       	sbc	r15, r15
    1b96:	d6 01       	movw	r26, r12
    1b98:	99 27       	eor	r25, r25
    1b9a:	88 27       	eor	r24, r24
    1b9c:	69 01       	movw	r12, r18
    1b9e:	e1 2c       	mov	r14, r1
    1ba0:	f1 2c       	mov	r15, r1
    1ba2:	c8 2a       	or	r12, r24
    1ba4:	d9 2a       	or	r13, r25
    1ba6:	ea 2a       	or	r14, r26
    1ba8:	fb 2a       	or	r15, r27
    1baa:	15 c0       	rjmp	.+42     	; 0x1bd6 <__vector_7+0x86>
    1bac:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1bb0:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1bb4:	8f ef       	ldi	r24, 0xFF	; 255
    1bb6:	c8 1a       	sub	r12, r24
    1bb8:	d8 0a       	sbc	r13, r24
    1bba:	0d 2c       	mov	r0, r13
    1bbc:	00 0c       	add	r0, r0
    1bbe:	ee 08       	sbc	r14, r14
    1bc0:	ff 08       	sbc	r15, r15
    1bc2:	d6 01       	movw	r26, r12
    1bc4:	99 27       	eor	r25, r25
    1bc6:	88 27       	eor	r24, r24
    1bc8:	69 01       	movw	r12, r18
    1bca:	e1 2c       	mov	r14, r1
    1bcc:	f1 2c       	mov	r15, r1
    1bce:	c8 2a       	or	r12, r24
    1bd0:	d9 2a       	or	r13, r25
    1bd2:	ea 2a       	or	r14, r26
    1bd4:	fb 2a       	or	r15, r27
    1bd6:	e0 91 a0 01 	lds	r30, 0x01A0	; 0x8001a0 <timerQ>
    1bda:	f0 91 a1 01 	lds	r31, 0x01A1	; 0x8001a1 <timerQ+0x1>
    1bde:	30 97       	sbiw	r30, 0x00	; 0
    1be0:	09 f4       	brne	.+2      	; 0x1be4 <__vector_7+0x94>
    1be2:	42 c0       	rjmp	.+132    	; 0x1c68 <__vector_7+0x118>
    1be4:	82 81       	ldd	r24, Z+2	; 0x02
    1be6:	93 81       	ldd	r25, Z+3	; 0x03
    1be8:	a4 81       	ldd	r26, Z+4	; 0x04
    1bea:	b5 81       	ldd	r27, Z+5	; 0x05
    1bec:	8c 19       	sub	r24, r12
    1bee:	9d 09       	sbc	r25, r13
    1bf0:	ae 09       	sbc	r26, r14
    1bf2:	bf 09       	sbc	r27, r15
    1bf4:	18 16       	cp	r1, r24
    1bf6:	19 06       	cpc	r1, r25
    1bf8:	1a 06       	cpc	r1, r26
    1bfa:	1b 06       	cpc	r1, r27
    1bfc:	ec f1       	brlt	.+122    	; 0x1c78 <__vector_7+0x128>
    1bfe:	80 ea       	ldi	r24, 0xA0	; 160
    1c00:	91 e0       	ldi	r25, 0x01	; 1
    1c02:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <dequeue>
    1c06:	62 ea       	ldi	r22, 0xA2	; 162
    1c08:	71 e0       	ldi	r23, 0x01	; 1
    1c0a:	0e 94 b9 0c 	call	0x1972	; 0x1972 <enqueueByDeadline>
    1c0e:	e0 91 a0 01 	lds	r30, 0x01A0	; 0x8001a0 <timerQ>
    1c12:	f0 91 a1 01 	lds	r31, 0x01A1	; 0x8001a1 <timerQ+0x1>
    1c16:	30 97       	sbiw	r30, 0x00	; 0
    1c18:	39 f1       	breq	.+78     	; 0x1c68 <__vector_7+0x118>
    1c1a:	82 81       	ldd	r24, Z+2	; 0x02
    1c1c:	93 81       	ldd	r25, Z+3	; 0x03
    1c1e:	a4 81       	ldd	r26, Z+4	; 0x04
    1c20:	b5 81       	ldd	r27, Z+5	; 0x05
    1c22:	8c 19       	sub	r24, r12
    1c24:	9d 09       	sbc	r25, r13
    1c26:	ae 09       	sbc	r26, r14
    1c28:	bf 09       	sbc	r27, r15
    1c2a:	18 16       	cp	r1, r24
    1c2c:	19 06       	cpc	r1, r25
    1c2e:	1a 06       	cpc	r1, r26
    1c30:	1b 06       	cpc	r1, r27
    1c32:	2c f7       	brge	.-54     	; 0x1bfe <__vector_7+0xae>
    1c34:	21 c0       	rjmp	.+66     	; 0x1c78 <__vector_7+0x128>
    1c36:	9c 01       	movw	r18, r24
    1c38:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1c3c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1c40:	84 1b       	sub	r24, r20
    1c42:	95 0b       	sbc	r25, r21
    1c44:	01 97       	sbiw	r24, 0x01	; 1
    1c46:	31 f4       	brne	.+12     	; 0x1c54 <__vector_7+0x104>
    1c48:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1c4c:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1c50:	2f 5f       	subi	r18, 0xFF	; 255
    1c52:	3f 4f       	sbci	r19, 0xFF	; 255
    1c54:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1c58:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1c5c:	ef e6       	ldi	r30, 0x6F	; 111
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	80 81       	ld	r24, Z
    1c62:	82 60       	ori	r24, 0x02	; 2
    1c64:	80 83       	st	Z, r24
    1c66:	05 c0       	rjmp	.+10     	; 0x1c72 <__vector_7+0x122>
    1c68:	ef e6       	ldi	r30, 0x6F	; 111
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	80 81       	ld	r24, Z
    1c6e:	8d 7f       	andi	r24, 0xFD	; 253
    1c70:	80 83       	st	Z, r24
    1c72:	0e 94 e6 04 	call	0x9cc	; 0x9cc <schedule>
    1c76:	0c c0       	rjmp	.+24     	; 0x1c90 <__vector_7+0x140>
    1c78:	82 81       	ldd	r24, Z+2	; 0x02
    1c7a:	93 81       	ldd	r25, Z+3	; 0x03
    1c7c:	a4 81       	ldd	r26, Z+4	; 0x04
    1c7e:	b5 81       	ldd	r27, Z+5	; 0x05
    1c80:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <overflows>
    1c84:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <overflows+0x1>
    1c88:	2a 17       	cp	r18, r26
    1c8a:	3b 07       	cpc	r19, r27
    1c8c:	69 f7       	brne	.-38     	; 0x1c68 <__vector_7+0x118>
    1c8e:	d3 cf       	rjmp	.-90     	; 0x1c36 <__vector_7+0xe6>
    1c90:	ff 91       	pop	r31
    1c92:	ef 91       	pop	r30
    1c94:	bf 91       	pop	r27
    1c96:	af 91       	pop	r26
    1c98:	9f 91       	pop	r25
    1c9a:	8f 91       	pop	r24
    1c9c:	7f 91       	pop	r23
    1c9e:	6f 91       	pop	r22
    1ca0:	5f 91       	pop	r21
    1ca2:	4f 91       	pop	r20
    1ca4:	3f 91       	pop	r19
    1ca6:	2f 91       	pop	r18
    1ca8:	ff 90       	pop	r15
    1caa:	ef 90       	pop	r14
    1cac:	df 90       	pop	r13
    1cae:	cf 90       	pop	r12
    1cb0:	0f 90       	pop	r0
    1cb2:	0f be       	out	0x3f, r0	; 63
    1cb4:	0f 90       	pop	r0
    1cb6:	1f 90       	pop	r1
    1cb8:	18 95       	reti

00001cba <async>:
    1cba:	3f 92       	push	r3
    1cbc:	4f 92       	push	r4
    1cbe:	5f 92       	push	r5
    1cc0:	6f 92       	push	r6
    1cc2:	7f 92       	push	r7
    1cc4:	8f 92       	push	r8
    1cc6:	9f 92       	push	r9
    1cc8:	af 92       	push	r10
    1cca:	bf 92       	push	r11
    1ccc:	cf 92       	push	r12
    1cce:	df 92       	push	r13
    1cd0:	ef 92       	push	r14
    1cd2:	ff 92       	push	r15
    1cd4:	0f 93       	push	r16
    1cd6:	1f 93       	push	r17
    1cd8:	cf 93       	push	r28
    1cda:	df 93       	push	r29
    1cdc:	2b 01       	movw	r4, r22
    1cde:	3c 01       	movw	r6, r24
    1ce0:	49 01       	movw	r8, r18
    1ce2:	5a 01       	movw	r10, r20
    1ce4:	8f b7       	in	r24, 0x3f	; 63
    1ce6:	80 78       	andi	r24, 0x80	; 128
    1ce8:	38 2e       	mov	r3, r24
    1cea:	f8 94       	cli
    1cec:	8b e8       	ldi	r24, 0x8B	; 139
    1cee:	91 e0       	ldi	r25, 0x01	; 1
    1cf0:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <dequeue>
    1cf4:	ec 01       	movw	r28, r24
    1cf6:	1b 87       	std	Y+11, r17	; 0x0b
    1cf8:	0a 87       	std	Y+10, r16	; 0x0a
    1cfa:	fd 86       	std	Y+13, r15	; 0x0d
    1cfc:	ec 86       	std	Y+12, r14	; 0x0c
    1cfe:	df 86       	std	Y+15, r13	; 0x0f
    1d00:	ce 86       	std	Y+14, r12	; 0x0e
    1d02:	33 20       	and	r3, r3
    1d04:	61 f0       	breq	.+24     	; 0x1d1e <async+0x64>
    1d06:	e0 91 85 01 	lds	r30, 0x0185	; 0x800185 <current>
    1d0a:	f0 91 86 01 	lds	r31, 0x0186	; 0x800186 <current+0x1>
    1d0e:	02 80       	ldd	r0, Z+2	; 0x02
    1d10:	f3 81       	ldd	r31, Z+3	; 0x03
    1d12:	e0 2d       	mov	r30, r0
    1d14:	82 81       	ldd	r24, Z+2	; 0x02
    1d16:	93 81       	ldd	r25, Z+3	; 0x03
    1d18:	a4 81       	ldd	r26, Z+4	; 0x04
    1d1a:	b5 81       	ldd	r27, Z+5	; 0x05
    1d1c:	08 c0       	rjmp	.+16     	; 0x1d2e <async+0x74>
    1d1e:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <timestamp>
    1d22:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <timestamp+0x1>
    1d26:	a0 91 9e 01 	lds	r26, 0x019E	; 0x80019e <timestamp+0x2>
    1d2a:	b0 91 9f 01 	lds	r27, 0x019F	; 0x80019f <timestamp+0x3>
    1d2e:	48 0e       	add	r4, r24
    1d30:	59 1e       	adc	r5, r25
    1d32:	6a 1e       	adc	r6, r26
    1d34:	7b 1e       	adc	r7, r27
    1d36:	4a 82       	std	Y+2, r4	; 0x02
    1d38:	5b 82       	std	Y+3, r5	; 0x03
    1d3a:	6c 82       	std	Y+4, r6	; 0x04
    1d3c:	7d 82       	std	Y+5, r7	; 0x05
    1d3e:	18 14       	cp	r1, r8
    1d40:	19 04       	cpc	r1, r9
    1d42:	1a 04       	cpc	r1, r10
    1d44:	1b 04       	cpc	r1, r11
    1d46:	44 f0       	brlt	.+16     	; 0x1d58 <async+0x9e>
    1d48:	0f 2e       	mov	r0, r31
    1d4a:	88 24       	eor	r8, r8
    1d4c:	8a 94       	dec	r8
    1d4e:	98 2c       	mov	r9, r8
    1d50:	a8 2c       	mov	r10, r8
    1d52:	ff e7       	ldi	r31, 0x7F	; 127
    1d54:	bf 2e       	mov	r11, r31
    1d56:	f0 2d       	mov	r31, r0
    1d58:	84 0c       	add	r8, r4
    1d5a:	95 1c       	adc	r9, r5
    1d5c:	a6 1c       	adc	r10, r6
    1d5e:	b7 1c       	adc	r11, r7
    1d60:	8e 82       	std	Y+6, r8	; 0x06
    1d62:	9f 82       	std	Y+7, r9	; 0x07
    1d64:	a8 86       	std	Y+8, r10	; 0x08
    1d66:	b9 86       	std	Y+9, r11	; 0x09
    1d68:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <overflows>
    1d6c:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <overflows+0x1>
    1d70:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1d74:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1d78:	b0 99       	sbic	0x16, 0	; 22
    1d7a:	0e c0       	rjmp	.+28     	; 0x1d98 <async+0xde>
    1d7c:	09 2e       	mov	r0, r25
    1d7e:	00 0c       	add	r0, r0
    1d80:	aa 0b       	sbc	r26, r26
    1d82:	bb 0b       	sbc	r27, r27
    1d84:	dc 01       	movw	r26, r24
    1d86:	99 27       	eor	r25, r25
    1d88:	88 27       	eor	r24, r24
    1d8a:	60 e0       	ldi	r22, 0x00	; 0
    1d8c:	70 e0       	ldi	r23, 0x00	; 0
    1d8e:	84 2b       	or	r24, r20
    1d90:	95 2b       	or	r25, r21
    1d92:	a6 2b       	or	r26, r22
    1d94:	b7 2b       	or	r27, r23
    1d96:	13 c0       	rjmp	.+38     	; 0x1dbe <async+0x104>
    1d98:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1d9c:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1da0:	01 96       	adiw	r24, 0x01	; 1
    1da2:	09 2e       	mov	r0, r25
    1da4:	00 0c       	add	r0, r0
    1da6:	aa 0b       	sbc	r26, r26
    1da8:	bb 0b       	sbc	r27, r27
    1daa:	dc 01       	movw	r26, r24
    1dac:	99 27       	eor	r25, r25
    1dae:	88 27       	eor	r24, r24
    1db0:	a9 01       	movw	r20, r18
    1db2:	60 e0       	ldi	r22, 0x00	; 0
    1db4:	70 e0       	ldi	r23, 0x00	; 0
    1db6:	84 2b       	or	r24, r20
    1db8:	95 2b       	or	r25, r21
    1dba:	a6 2b       	or	r26, r22
    1dbc:	b7 2b       	or	r27, r23
    1dbe:	48 1a       	sub	r4, r24
    1dc0:	59 0a       	sbc	r5, r25
    1dc2:	6a 0a       	sbc	r6, r26
    1dc4:	7b 0a       	sbc	r7, r27
    1dc6:	14 14       	cp	r1, r4
    1dc8:	15 04       	cpc	r1, r5
    1dca:	16 04       	cpc	r1, r6
    1dcc:	17 04       	cpc	r1, r7
    1dce:	ac f5       	brge	.+106    	; 0x1e3a <async+0x180>
    1dd0:	60 ea       	ldi	r22, 0xA0	; 160
    1dd2:	71 e0       	ldi	r23, 0x01	; 1
    1dd4:	ce 01       	movw	r24, r28
    1dd6:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <enqueueByBaseline>
    1dda:	e0 91 a0 01 	lds	r30, 0x01A0	; 0x8001a0 <timerQ>
    1dde:	f0 91 a1 01 	lds	r31, 0x01A1	; 0x8001a1 <timerQ+0x1>
    1de2:	30 97       	sbiw	r30, 0x00	; 0
    1de4:	21 f1       	breq	.+72     	; 0x1e2e <async+0x174>
    1de6:	82 81       	ldd	r24, Z+2	; 0x02
    1de8:	93 81       	ldd	r25, Z+3	; 0x03
    1dea:	a4 81       	ldd	r26, Z+4	; 0x04
    1dec:	b5 81       	ldd	r27, Z+5	; 0x05
    1dee:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <overflows>
    1df2:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <overflows+0x1>
    1df6:	2a 17       	cp	r18, r26
    1df8:	3b 07       	cpc	r19, r27
    1dfa:	c9 f4       	brne	.+50     	; 0x1e2e <async+0x174>
    1dfc:	9c 01       	movw	r18, r24
    1dfe:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1e02:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1e06:	84 1b       	sub	r24, r20
    1e08:	95 0b       	sbc	r25, r21
    1e0a:	01 97       	sbiw	r24, 0x01	; 1
    1e0c:	31 f4       	brne	.+12     	; 0x1e1a <async+0x160>
    1e0e:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1e12:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1e16:	2f 5f       	subi	r18, 0xFF	; 255
    1e18:	3f 4f       	sbci	r19, 0xFF	; 255
    1e1a:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1e1e:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1e22:	ef e6       	ldi	r30, 0x6F	; 111
    1e24:	f0 e0       	ldi	r31, 0x00	; 0
    1e26:	80 81       	ld	r24, Z
    1e28:	82 60       	ori	r24, 0x02	; 2
    1e2a:	80 83       	st	Z, r24
    1e2c:	41 c0       	rjmp	.+130    	; 0x1eb0 <async+0x1f6>
    1e2e:	ef e6       	ldi	r30, 0x6F	; 111
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	80 81       	ld	r24, Z
    1e34:	8d 7f       	andi	r24, 0xFD	; 253
    1e36:	80 83       	st	Z, r24
    1e38:	3b c0       	rjmp	.+118    	; 0x1eb0 <async+0x1f6>
    1e3a:	62 ea       	ldi	r22, 0xA2	; 162
    1e3c:	71 e0       	ldi	r23, 0x01	; 1
    1e3e:	ce 01       	movw	r24, r28
    1e40:	0e 94 b9 0c 	call	0x1972	; 0x1972 <enqueueByDeadline>
    1e44:	33 20       	and	r3, r3
    1e46:	b9 f1       	breq	.+110    	; 0x1eb6 <async+0x1fc>
    1e48:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <threadPool>
    1e4c:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <threadPool+0x1>
    1e50:	00 97       	sbiw	r24, 0x00	; 0
    1e52:	81 f1       	breq	.+96     	; 0x1eb4 <async+0x1fa>
    1e54:	e0 91 87 01 	lds	r30, 0x0187	; 0x800187 <activeStack>
    1e58:	f0 91 88 01 	lds	r31, 0x0188	; 0x800188 <activeStack+0x1>
    1e5c:	20 91 a2 01 	lds	r18, 0x01A2	; 0x8001a2 <msgQ>
    1e60:	30 91 a3 01 	lds	r19, 0x01A3	; 0x8001a3 <msgQ+0x1>
    1e64:	02 81       	ldd	r16, Z+2	; 0x02
    1e66:	13 81       	ldd	r17, Z+3	; 0x03
    1e68:	d9 01       	movw	r26, r18
    1e6a:	16 96       	adiw	r26, 0x06	; 6
    1e6c:	4d 91       	ld	r20, X+
    1e6e:	5d 91       	ld	r21, X+
    1e70:	6d 91       	ld	r22, X+
    1e72:	7c 91       	ld	r23, X
    1e74:	19 97       	sbiw	r26, 0x09	; 9
    1e76:	d8 01       	movw	r26, r16
    1e78:	16 96       	adiw	r26, 0x06	; 6
    1e7a:	0d 91       	ld	r16, X+
    1e7c:	1d 91       	ld	r17, X+
    1e7e:	2d 91       	ld	r18, X+
    1e80:	3c 91       	ld	r19, X
    1e82:	19 97       	sbiw	r26, 0x09	; 9
    1e84:	40 1b       	sub	r20, r16
    1e86:	51 0b       	sbc	r21, r17
    1e88:	62 0b       	sbc	r22, r18
    1e8a:	73 0b       	sbc	r23, r19
    1e8c:	9a f4       	brpl	.+38     	; 0x1eb4 <async+0x1fa>
    1e8e:	dc 01       	movw	r26, r24
    1e90:	2d 91       	ld	r18, X+
    1e92:	3c 91       	ld	r19, X
    1e94:	11 97       	sbiw	r26, 0x01	; 1
    1e96:	30 93 8a 01 	sts	0x018A, r19	; 0x80018a <threadPool+0x1>
    1e9a:	20 93 89 01 	sts	0x0189, r18	; 0x800189 <threadPool>
    1e9e:	ed 93       	st	X+, r30
    1ea0:	fc 93       	st	X, r31
    1ea2:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <activeStack+0x1>
    1ea6:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <activeStack>
    1eaa:	0e 94 c6 04 	call	0x98c	; 0x98c <dispatch>
    1eae:	02 c0       	rjmp	.+4      	; 0x1eb4 <async+0x1fa>
    1eb0:	33 20       	and	r3, r3
    1eb2:	09 f0       	breq	.+2      	; 0x1eb6 <async+0x1fc>
    1eb4:	78 94       	sei
    1eb6:	ce 01       	movw	r24, r28
    1eb8:	df 91       	pop	r29
    1eba:	cf 91       	pop	r28
    1ebc:	1f 91       	pop	r17
    1ebe:	0f 91       	pop	r16
    1ec0:	ff 90       	pop	r15
    1ec2:	ef 90       	pop	r14
    1ec4:	df 90       	pop	r13
    1ec6:	cf 90       	pop	r12
    1ec8:	bf 90       	pop	r11
    1eca:	af 90       	pop	r10
    1ecc:	9f 90       	pop	r9
    1ece:	8f 90       	pop	r8
    1ed0:	7f 90       	pop	r7
    1ed2:	6f 90       	pop	r6
    1ed4:	5f 90       	pop	r5
    1ed6:	4f 90       	pop	r4
    1ed8:	3f 90       	pop	r3
    1eda:	08 95       	ret

00001edc <sync>:
    1edc:	cf 92       	push	r12
    1ede:	df 92       	push	r13
    1ee0:	ef 92       	push	r14
    1ee2:	ff 92       	push	r15
    1ee4:	0f 93       	push	r16
    1ee6:	1f 93       	push	r17
    1ee8:	cf 93       	push	r28
    1eea:	df 93       	push	r29
    1eec:	ec 01       	movw	r28, r24
    1eee:	7b 01       	movw	r14, r22
    1ef0:	6a 01       	movw	r12, r20
    1ef2:	1f b7       	in	r17, 0x3f	; 63
    1ef4:	10 78       	andi	r17, 0x80	; 128
    1ef6:	f8 94       	cli
    1ef8:	a8 81       	ld	r26, Y
    1efa:	b9 81       	ldd	r27, Y+1	; 0x01
    1efc:	10 97       	sbiw	r26, 0x00	; 0
    1efe:	61 f1       	breq	.+88     	; 0x1f58 <sync+0x7c>
    1f00:	14 96       	adiw	r26, 0x04	; 4
    1f02:	ed 91       	ld	r30, X+
    1f04:	fc 91       	ld	r31, X
    1f06:	15 97       	sbiw	r26, 0x05	; 5
    1f08:	30 97       	sbiw	r30, 0x00	; 0
    1f0a:	41 f0       	breq	.+16     	; 0x1f1c <sync+0x40>
    1f0c:	a0 81       	ld	r26, Z
    1f0e:	b1 81       	ldd	r27, Z+1	; 0x01
    1f10:	14 96       	adiw	r26, 0x04	; 4
    1f12:	ed 91       	ld	r30, X+
    1f14:	fc 91       	ld	r31, X
    1f16:	15 97       	sbiw	r26, 0x05	; 5
    1f18:	30 97       	sbiw	r30, 0x00	; 0
    1f1a:	c1 f7       	brne	.-16     	; 0x1f0c <sync+0x30>
    1f1c:	20 91 85 01 	lds	r18, 0x0185	; 0x800185 <current>
    1f20:	30 91 86 01 	lds	r19, 0x0186	; 0x800186 <current+0x1>
    1f24:	2a 17       	cp	r18, r26
    1f26:	3b 07       	cpc	r19, r27
    1f28:	21 f0       	breq	.+8      	; 0x1f32 <sync+0x56>
    1f2a:	11 23       	and	r17, r17
    1f2c:	09 f4       	brne	.+2      	; 0x1f30 <sync+0x54>
    1f2e:	3d c0       	rjmp	.+122    	; 0x1faa <sync+0xce>
    1f30:	07 c0       	rjmp	.+14     	; 0x1f40 <sync+0x64>
    1f32:	11 23       	and	r17, r17
    1f34:	09 f4       	brne	.+2      	; 0x1f38 <sync+0x5c>
    1f36:	3c c0       	rjmp	.+120    	; 0x1fb0 <sync+0xd4>
    1f38:	78 94       	sei
    1f3a:	8f ef       	ldi	r24, 0xFF	; 255
    1f3c:	9f ef       	ldi	r25, 0xFF	; 255
    1f3e:	52 c0       	rjmp	.+164    	; 0x1fe4 <sync+0x108>
    1f40:	8a 81       	ldd	r24, Y+2	; 0x02
    1f42:	9b 81       	ldd	r25, Y+3	; 0x03
    1f44:	00 97       	sbiw	r24, 0x00	; 0
    1f46:	d1 f1       	breq	.+116    	; 0x1fbc <sync+0xe0>
    1f48:	fc 01       	movw	r30, r24
    1f4a:	15 82       	std	Z+5, r1	; 0x05
    1f4c:	14 82       	std	Z+4, r1	; 0x04
    1f4e:	36 c0       	rjmp	.+108    	; 0x1fbc <sync+0xe0>
    1f50:	78 94       	sei
    1f52:	80 e0       	ldi	r24, 0x00	; 0
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	46 c0       	rjmp	.+140    	; 0x1fe4 <sync+0x108>
    1f58:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <current>
    1f5c:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <current+0x1>
    1f60:	99 83       	std	Y+1, r25	; 0x01
    1f62:	88 83       	st	Y, r24
    1f64:	11 23       	and	r17, r17
    1f66:	29 f0       	breq	.+10     	; 0x1f72 <sync+0x96>
    1f68:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f6c:	01 97       	sbiw	r24, 0x01	; 1
    1f6e:	09 f0       	breq	.+2      	; 0x1f72 <sync+0x96>
    1f70:	78 94       	sei
    1f72:	b6 01       	movw	r22, r12
    1f74:	ce 01       	movw	r24, r28
    1f76:	f7 01       	movw	r30, r14
    1f78:	09 95       	icall
    1f7a:	f8 2e       	mov	r15, r24
    1f7c:	09 2f       	mov	r16, r25
    1f7e:	8f b7       	in	r24, 0x3f	; 63
    1f80:	f8 94       	cli
    1f82:	19 82       	std	Y+1, r1	; 0x01
    1f84:	18 82       	st	Y, r1
    1f86:	8a 81       	ldd	r24, Y+2	; 0x02
    1f88:	9b 81       	ldd	r25, Y+3	; 0x03
    1f8a:	82 30       	cpi	r24, 0x02	; 2
    1f8c:	91 05       	cpc	r25, r1
    1f8e:	38 f0       	brcs	.+14     	; 0x1f9e <sync+0xc2>
    1f90:	1b 82       	std	Y+3, r1	; 0x03
    1f92:	1a 82       	std	Y+2, r1	; 0x02
    1f94:	fc 01       	movw	r30, r24
    1f96:	15 82       	std	Z+5, r1	; 0x05
    1f98:	14 82       	std	Z+4, r1	; 0x04
    1f9a:	0e 94 c6 04 	call	0x98c	; 0x98c <dispatch>
    1f9e:	11 23       	and	r17, r17
    1fa0:	51 f0       	breq	.+20     	; 0x1fb6 <sync+0xda>
    1fa2:	78 94       	sei
    1fa4:	8f 2d       	mov	r24, r15
    1fa6:	90 2f       	mov	r25, r16
    1fa8:	1d c0       	rjmp	.+58     	; 0x1fe4 <sync+0x108>
    1faa:	8f ef       	ldi	r24, 0xFF	; 255
    1fac:	9f ef       	ldi	r25, 0xFF	; 255
    1fae:	1a c0       	rjmp	.+52     	; 0x1fe4 <sync+0x108>
    1fb0:	8f ef       	ldi	r24, 0xFF	; 255
    1fb2:	9f ef       	ldi	r25, 0xFF	; 255
    1fb4:	17 c0       	rjmp	.+46     	; 0x1fe4 <sync+0x108>
    1fb6:	8f 2d       	mov	r24, r15
    1fb8:	90 2f       	mov	r25, r16
    1fba:	14 c0       	rjmp	.+40     	; 0x1fe4 <sync+0x108>
    1fbc:	3b 83       	std	Y+3, r19	; 0x03
    1fbe:	2a 83       	std	Y+2, r18	; 0x02
    1fc0:	f9 01       	movw	r30, r18
    1fc2:	d5 83       	std	Z+5, r29	; 0x05
    1fc4:	c4 83       	std	Z+4, r28	; 0x04
    1fc6:	cd 01       	movw	r24, r26
    1fc8:	0e 94 c6 04 	call	0x98c	; 0x98c <dispatch>
    1fcc:	e0 91 85 01 	lds	r30, 0x0185	; 0x800185 <current>
    1fd0:	f0 91 86 01 	lds	r31, 0x0186	; 0x800186 <current+0x1>
    1fd4:	82 81       	ldd	r24, Z+2	; 0x02
    1fd6:	93 81       	ldd	r25, Z+3	; 0x03
    1fd8:	89 2b       	or	r24, r25
    1fda:	09 f4       	brne	.+2      	; 0x1fde <sync+0x102>
    1fdc:	b9 cf       	rjmp	.-142    	; 0x1f50 <sync+0x74>
    1fde:	f9 83       	std	Y+1, r31	; 0x01
    1fe0:	e8 83       	st	Y, r30
    1fe2:	c2 cf       	rjmp	.-124    	; 0x1f68 <sync+0x8c>
    1fe4:	df 91       	pop	r29
    1fe6:	cf 91       	pop	r28
    1fe8:	1f 91       	pop	r17
    1fea:	0f 91       	pop	r16
    1fec:	ff 90       	pop	r15
    1fee:	ef 90       	pop	r14
    1ff0:	df 90       	pop	r13
    1ff2:	cf 90       	pop	r12
    1ff4:	08 95       	ret

00001ff6 <run>:
    1ff6:	00 91 85 01 	lds	r16, 0x0185	; 0x800185 <current>
    1ffa:	10 91 86 01 	lds	r17, 0x0186	; 0x800186 <current+0x1>
    1ffe:	82 ea       	ldi	r24, 0xA2	; 162
    2000:	91 e0       	ldi	r25, 0x01	; 1
    2002:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <dequeue>
    2006:	ec 01       	movw	r28, r24
    2008:	d8 01       	movw	r26, r16
    200a:	13 96       	adiw	r26, 0x03	; 3
    200c:	9c 93       	st	X, r25
    200e:	8e 93       	st	-X, r24
    2010:	12 97       	sbiw	r26, 0x02	; 2
    2012:	78 94       	sei
    2014:	4e 85       	ldd	r20, Y+14	; 0x0e
    2016:	5f 85       	ldd	r21, Y+15	; 0x0f
    2018:	6c 85       	ldd	r22, Y+12	; 0x0c
    201a:	7d 85       	ldd	r23, Y+13	; 0x0d
    201c:	8a 85       	ldd	r24, Y+10	; 0x0a
    201e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2020:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <sync>
    2024:	8f b7       	in	r24, 0x3f	; 63
    2026:	f8 94       	cli
    2028:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <msgPool>
    202c:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <msgPool+0x1>
    2030:	99 83       	std	Y+1, r25	; 0x01
    2032:	88 83       	st	Y, r24
    2034:	d0 93 8c 01 	sts	0x018C, r29	; 0x80018c <msgPool+0x1>
    2038:	c0 93 8b 01 	sts	0x018B, r28	; 0x80018b <msgPool>
    203c:	e0 91 87 01 	lds	r30, 0x0187	; 0x800187 <activeStack>
    2040:	f0 91 88 01 	lds	r31, 0x0188	; 0x800188 <activeStack+0x1>
    2044:	00 81       	ld	r16, Z
    2046:	11 81       	ldd	r17, Z+1	; 0x01
    2048:	e8 01       	movw	r28, r16
    204a:	2a 81       	ldd	r18, Y+2	; 0x02
    204c:	3b 81       	ldd	r19, Y+3	; 0x03
    204e:	a0 91 a2 01 	lds	r26, 0x01A2	; 0x8001a2 <msgQ>
    2052:	b0 91 a3 01 	lds	r27, 0x01A3	; 0x8001a3 <msgQ+0x1>
    2056:	10 97       	sbiw	r26, 0x00	; 0
    2058:	c1 f0       	breq	.+48     	; 0x208a <run+0x94>
    205a:	21 15       	cp	r18, r1
    205c:	31 05       	cpc	r19, r1
    205e:	59 f2       	breq	.-106    	; 0x1ff6 <run>
    2060:	16 96       	adiw	r26, 0x06	; 6
    2062:	8d 91       	ld	r24, X+
    2064:	9d 91       	ld	r25, X+
    2066:	0d 90       	ld	r0, X+
    2068:	bc 91       	ld	r27, X
    206a:	a0 2d       	mov	r26, r0
    206c:	e9 01       	movw	r28, r18
    206e:	4e 81       	ldd	r20, Y+6	; 0x06
    2070:	5f 81       	ldd	r21, Y+7	; 0x07
    2072:	68 85       	ldd	r22, Y+8	; 0x08
    2074:	79 85       	ldd	r23, Y+9	; 0x09
    2076:	84 1b       	sub	r24, r20
    2078:	95 0b       	sbc	r25, r21
    207a:	a6 0b       	sbc	r26, r22
    207c:	b7 0b       	sbc	r27, r23
    207e:	18 16       	cp	r1, r24
    2080:	19 06       	cpc	r1, r25
    2082:	1a 06       	cpc	r1, r26
    2084:	1b 06       	cpc	r1, r27
    2086:	0c f0       	brlt	.+2      	; 0x208a <run+0x94>
    2088:	b6 cf       	rjmp	.-148    	; 0x1ff6 <run>
    208a:	10 93 88 01 	sts	0x0188, r17	; 0x800188 <activeStack+0x1>
    208e:	00 93 87 01 	sts	0x0187, r16	; 0x800187 <activeStack>
    2092:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <threadPool>
    2096:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <threadPool+0x1>
    209a:	91 83       	std	Z+1, r25	; 0x01
    209c:	80 83       	st	Z, r24
    209e:	f0 93 8a 01 	sts	0x018A, r31	; 0x80018a <threadPool+0x1>
    20a2:	e0 93 89 01 	sts	0x0189, r30	; 0x800189 <threadPool>
    20a6:	a0 91 87 01 	lds	r26, 0x0187	; 0x800187 <activeStack>
    20aa:	b0 91 88 01 	lds	r27, 0x0188	; 0x800188 <activeStack+0x1>
    20ae:	14 96       	adiw	r26, 0x04	; 4
    20b0:	ed 91       	ld	r30, X+
    20b2:	fc 91       	ld	r31, X
    20b4:	15 97       	sbiw	r26, 0x05	; 5
    20b6:	30 97       	sbiw	r30, 0x00	; 0
    20b8:	41 f0       	breq	.+16     	; 0x20ca <run+0xd4>
    20ba:	a0 81       	ld	r26, Z
    20bc:	b1 81       	ldd	r27, Z+1	; 0x01
    20be:	14 96       	adiw	r26, 0x04	; 4
    20c0:	ed 91       	ld	r30, X+
    20c2:	fc 91       	ld	r31, X
    20c4:	15 97       	sbiw	r26, 0x05	; 5
    20c6:	30 97       	sbiw	r30, 0x00	; 0
    20c8:	c1 f7       	brne	.-16     	; 0x20ba <run+0xc4>
    20ca:	cd 01       	movw	r24, r26
    20cc:	0e 94 c6 04 	call	0x98c	; 0x98c <dispatch>
    20d0:	92 cf       	rjmp	.-220    	; 0x1ff6 <run>

000020d2 <install>:
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    if (i >= 0 && i < N_VECTORS) {
    20d2:	42 31       	cpi	r20, 0x12	; 18
    20d4:	b8 f4       	brcc	.+46     	; 0x2104 <install+0x32>
        char status;
        DISABLE(status);
    20d6:	2f b7       	in	r18, 0x3f	; 63
    20d8:	f8 94       	cli
        otable[i] = obj;
    20da:	50 e0       	ldi	r21, 0x00	; 0
    20dc:	44 0f       	add	r20, r20
    20de:	55 1f       	adc	r21, r21
    20e0:	fa 01       	movw	r30, r20
    20e2:	ec 55       	subi	r30, 0x5C	; 92
    20e4:	fe 4f       	sbci	r31, 0xFE	; 254
    20e6:	91 83       	std	Z+1, r25	; 0x01
    20e8:	80 83       	st	Z, r24
        mtable[i] = m;
    20ea:	fa 01       	movw	r30, r20
    20ec:	e4 5c       	subi	r30, 0xC4	; 196
    20ee:	fd 4f       	sbci	r31, 0xFD	; 253
    20f0:	71 83       	std	Z+1, r23	; 0x01
    20f2:	60 83       	st	Z, r22
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    20f4:	41 e0       	ldi	r20, 0x01	; 1
    20f6:	50 e0       	ldi	r21, 0x00	; 0
    20f8:	fc 01       	movw	r30, r24
    20fa:	53 83       	std	Z+3, r21	; 0x03
    20fc:	42 83       	std	Z+2, r20	; 0x02
        ENABLE(status);
    20fe:	22 23       	and	r18, r18
    2100:	0c f4       	brge	.+2      	; 0x2104 <install+0x32>
    2102:	78 94       	sei
    2104:	08 95       	ret

00002106 <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    2106:	8c 01       	movw	r16, r24
    2108:	7b 01       	movw	r14, r22
    210a:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    210c:	8f b7       	in	r24, 0x3f	; 63
    210e:	f8 94       	cli
    initialize();
    2110:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <initialize>
    ENABLE(1);
    2114:	78 94       	sei
    if (m != NULL)
    2116:	e1 14       	cp	r14, r1
    2118:	f1 04       	cpc	r15, r1
    211a:	41 f0       	breq	.+16     	; 0x212c <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    211c:	20 e0       	ldi	r18, 0x00	; 0
    211e:	30 e0       	ldi	r19, 0x00	; 0
    2120:	a9 01       	movw	r20, r18
    2122:	60 e0       	ldi	r22, 0x00	; 0
    2124:	70 e0       	ldi	r23, 0x00	; 0
    2126:	cb 01       	movw	r24, r22
    2128:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <async>
    DISABLE(status);
    212c:	8f b7       	in	r24, 0x3f	; 63
    212e:	f8 94       	cli
        }
    }
}

static void idle(void) {
    schedule();
    2130:	0e 94 e6 04 	call	0x9cc	; 0x9cc <schedule>
    ENABLE(1);
    2134:	78 94       	sei
    while (1) {
        SLEEP();
    2136:	81 e0       	ldi	r24, 0x01	; 1
    2138:	83 bf       	out	0x33, r24	; 51
    213a:	88 95       	sleep
    213c:	fd cf       	rjmp	.-6      	; 0x2138 <tinytimber+0x32>

0000213e <__divmodhi4>:
    213e:	97 fb       	bst	r25, 7
    2140:	07 2e       	mov	r0, r23
    2142:	16 f4       	brtc	.+4      	; 0x2148 <__divmodhi4+0xa>
    2144:	00 94       	com	r0
    2146:	07 d0       	rcall	.+14     	; 0x2156 <__divmodhi4_neg1>
    2148:	77 fd       	sbrc	r23, 7
    214a:	09 d0       	rcall	.+18     	; 0x215e <__divmodhi4_neg2>
    214c:	0e 94 df 10 	call	0x21be	; 0x21be <__udivmodhi4>
    2150:	07 fc       	sbrc	r0, 7
    2152:	05 d0       	rcall	.+10     	; 0x215e <__divmodhi4_neg2>
    2154:	3e f4       	brtc	.+14     	; 0x2164 <__divmodhi4_exit>

00002156 <__divmodhi4_neg1>:
    2156:	90 95       	com	r25
    2158:	81 95       	neg	r24
    215a:	9f 4f       	sbci	r25, 0xFF	; 255
    215c:	08 95       	ret

0000215e <__divmodhi4_neg2>:
    215e:	70 95       	com	r23
    2160:	61 95       	neg	r22
    2162:	7f 4f       	sbci	r23, 0xFF	; 255

00002164 <__divmodhi4_exit>:
    2164:	08 95       	ret

00002166 <__divmodsi4>:
    2166:	05 2e       	mov	r0, r21
    2168:	97 fb       	bst	r25, 7
    216a:	1e f4       	brtc	.+6      	; 0x2172 <__divmodsi4+0xc>
    216c:	00 94       	com	r0
    216e:	0e 94 ca 10 	call	0x2194	; 0x2194 <__negsi2>
    2172:	57 fd       	sbrc	r21, 7
    2174:	07 d0       	rcall	.+14     	; 0x2184 <__divmodsi4_neg2>
    2176:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <__udivmodsi4>
    217a:	07 fc       	sbrc	r0, 7
    217c:	03 d0       	rcall	.+6      	; 0x2184 <__divmodsi4_neg2>
    217e:	4e f4       	brtc	.+18     	; 0x2192 <__divmodsi4_exit>
    2180:	0c 94 ca 10 	jmp	0x2194	; 0x2194 <__negsi2>

00002184 <__divmodsi4_neg2>:
    2184:	50 95       	com	r21
    2186:	40 95       	com	r20
    2188:	30 95       	com	r19
    218a:	21 95       	neg	r18
    218c:	3f 4f       	sbci	r19, 0xFF	; 255
    218e:	4f 4f       	sbci	r20, 0xFF	; 255
    2190:	5f 4f       	sbci	r21, 0xFF	; 255

00002192 <__divmodsi4_exit>:
    2192:	08 95       	ret

00002194 <__negsi2>:
    2194:	90 95       	com	r25
    2196:	80 95       	com	r24
    2198:	70 95       	com	r23
    219a:	61 95       	neg	r22
    219c:	7f 4f       	sbci	r23, 0xFF	; 255
    219e:	8f 4f       	sbci	r24, 0xFF	; 255
    21a0:	9f 4f       	sbci	r25, 0xFF	; 255
    21a2:	08 95       	ret

000021a4 <__tablejump2__>:
    21a4:	ee 0f       	add	r30, r30
    21a6:	ff 1f       	adc	r31, r31
    21a8:	05 90       	lpm	r0, Z+
    21aa:	f4 91       	lpm	r31, Z
    21ac:	e0 2d       	mov	r30, r0
    21ae:	09 94       	ijmp

000021b0 <__usmulhisi3>:
    21b0:	0e 94 15 11 	call	0x222a	; 0x222a <__umulhisi3>

000021b4 <__usmulhisi3_tail>:
    21b4:	b7 ff       	sbrs	r27, 7
    21b6:	08 95       	ret
    21b8:	82 1b       	sub	r24, r18
    21ba:	93 0b       	sbc	r25, r19
    21bc:	08 95       	ret

000021be <__udivmodhi4>:
    21be:	aa 1b       	sub	r26, r26
    21c0:	bb 1b       	sub	r27, r27
    21c2:	51 e1       	ldi	r21, 0x11	; 17
    21c4:	07 c0       	rjmp	.+14     	; 0x21d4 <__udivmodhi4_ep>

000021c6 <__udivmodhi4_loop>:
    21c6:	aa 1f       	adc	r26, r26
    21c8:	bb 1f       	adc	r27, r27
    21ca:	a6 17       	cp	r26, r22
    21cc:	b7 07       	cpc	r27, r23
    21ce:	10 f0       	brcs	.+4      	; 0x21d4 <__udivmodhi4_ep>
    21d0:	a6 1b       	sub	r26, r22
    21d2:	b7 0b       	sbc	r27, r23

000021d4 <__udivmodhi4_ep>:
    21d4:	88 1f       	adc	r24, r24
    21d6:	99 1f       	adc	r25, r25
    21d8:	5a 95       	dec	r21
    21da:	a9 f7       	brne	.-22     	; 0x21c6 <__udivmodhi4_loop>
    21dc:	80 95       	com	r24
    21de:	90 95       	com	r25
    21e0:	bc 01       	movw	r22, r24
    21e2:	cd 01       	movw	r24, r26
    21e4:	08 95       	ret

000021e6 <__udivmodsi4>:
    21e6:	a1 e2       	ldi	r26, 0x21	; 33
    21e8:	1a 2e       	mov	r1, r26
    21ea:	aa 1b       	sub	r26, r26
    21ec:	bb 1b       	sub	r27, r27
    21ee:	fd 01       	movw	r30, r26
    21f0:	0d c0       	rjmp	.+26     	; 0x220c <__udivmodsi4_ep>

000021f2 <__udivmodsi4_loop>:
    21f2:	aa 1f       	adc	r26, r26
    21f4:	bb 1f       	adc	r27, r27
    21f6:	ee 1f       	adc	r30, r30
    21f8:	ff 1f       	adc	r31, r31
    21fa:	a2 17       	cp	r26, r18
    21fc:	b3 07       	cpc	r27, r19
    21fe:	e4 07       	cpc	r30, r20
    2200:	f5 07       	cpc	r31, r21
    2202:	20 f0       	brcs	.+8      	; 0x220c <__udivmodsi4_ep>
    2204:	a2 1b       	sub	r26, r18
    2206:	b3 0b       	sbc	r27, r19
    2208:	e4 0b       	sbc	r30, r20
    220a:	f5 0b       	sbc	r31, r21

0000220c <__udivmodsi4_ep>:
    220c:	66 1f       	adc	r22, r22
    220e:	77 1f       	adc	r23, r23
    2210:	88 1f       	adc	r24, r24
    2212:	99 1f       	adc	r25, r25
    2214:	1a 94       	dec	r1
    2216:	69 f7       	brne	.-38     	; 0x21f2 <__udivmodsi4_loop>
    2218:	60 95       	com	r22
    221a:	70 95       	com	r23
    221c:	80 95       	com	r24
    221e:	90 95       	com	r25
    2220:	9b 01       	movw	r18, r22
    2222:	ac 01       	movw	r20, r24
    2224:	bd 01       	movw	r22, r26
    2226:	cf 01       	movw	r24, r30
    2228:	08 95       	ret

0000222a <__umulhisi3>:
    222a:	a2 9f       	mul	r26, r18
    222c:	b0 01       	movw	r22, r0
    222e:	b3 9f       	mul	r27, r19
    2230:	c0 01       	movw	r24, r0
    2232:	a3 9f       	mul	r26, r19
    2234:	70 0d       	add	r23, r0
    2236:	81 1d       	adc	r24, r1
    2238:	11 24       	eor	r1, r1
    223a:	91 1d       	adc	r25, r1
    223c:	b2 9f       	mul	r27, r18
    223e:	70 0d       	add	r23, r0
    2240:	81 1d       	adc	r24, r1
    2242:	11 24       	eor	r1, r1
    2244:	91 1d       	adc	r25, r1
    2246:	08 95       	ret

00002248 <setjmp>:
    2248:	dc 01       	movw	r26, r24
    224a:	2d 92       	st	X+, r2
    224c:	3d 92       	st	X+, r3
    224e:	4d 92       	st	X+, r4
    2250:	5d 92       	st	X+, r5
    2252:	6d 92       	st	X+, r6
    2254:	7d 92       	st	X+, r7
    2256:	8d 92       	st	X+, r8
    2258:	9d 92       	st	X+, r9
    225a:	ad 92       	st	X+, r10
    225c:	bd 92       	st	X+, r11
    225e:	cd 92       	st	X+, r12
    2260:	dd 92       	st	X+, r13
    2262:	ed 92       	st	X+, r14
    2264:	fd 92       	st	X+, r15
    2266:	0d 93       	st	X+, r16
    2268:	1d 93       	st	X+, r17
    226a:	cd 93       	st	X+, r28
    226c:	dd 93       	st	X+, r29
    226e:	ff 91       	pop	r31
    2270:	ef 91       	pop	r30
    2272:	8d b7       	in	r24, 0x3d	; 61
    2274:	8d 93       	st	X+, r24
    2276:	8e b7       	in	r24, 0x3e	; 62
    2278:	8d 93       	st	X+, r24
    227a:	8f b7       	in	r24, 0x3f	; 63
    227c:	8d 93       	st	X+, r24
    227e:	ed 93       	st	X+, r30
    2280:	fd 93       	st	X+, r31
    2282:	88 27       	eor	r24, r24
    2284:	99 27       	eor	r25, r25
    2286:	09 94       	ijmp

00002288 <longjmp>:
    2288:	dc 01       	movw	r26, r24
    228a:	cb 01       	movw	r24, r22
    228c:	81 30       	cpi	r24, 0x01	; 1
    228e:	91 05       	cpc	r25, r1
    2290:	81 1d       	adc	r24, r1
    2292:	2d 90       	ld	r2, X+
    2294:	3d 90       	ld	r3, X+
    2296:	4d 90       	ld	r4, X+
    2298:	5d 90       	ld	r5, X+
    229a:	6d 90       	ld	r6, X+
    229c:	7d 90       	ld	r7, X+
    229e:	8d 90       	ld	r8, X+
    22a0:	9d 90       	ld	r9, X+
    22a2:	ad 90       	ld	r10, X+
    22a4:	bd 90       	ld	r11, X+
    22a6:	cd 90       	ld	r12, X+
    22a8:	dd 90       	ld	r13, X+
    22aa:	ed 90       	ld	r14, X+
    22ac:	fd 90       	ld	r15, X+
    22ae:	0d 91       	ld	r16, X+
    22b0:	1d 91       	ld	r17, X+
    22b2:	cd 91       	ld	r28, X+
    22b4:	dd 91       	ld	r29, X+
    22b6:	ed 91       	ld	r30, X+
    22b8:	fd 91       	ld	r31, X+
    22ba:	0d 90       	ld	r0, X+
    22bc:	f8 94       	cli
    22be:	fe bf       	out	0x3e, r31	; 62
    22c0:	0f be       	out	0x3f, r0	; 63
    22c2:	ed bf       	out	0x3d, r30	; 61
    22c4:	ed 91       	ld	r30, X+
    22c6:	fd 91       	ld	r31, X+
    22c8:	09 94       	ijmp

000022ca <_exit>:
    22ca:	f8 94       	cli

000022cc <__stop_program>:
    22cc:	ff cf       	rjmp	.-2      	; 0x22cc <__stop_program>
