
lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000084  00800100  00002060  000020f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002060  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000035b  00800184  00800184  00002178  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002178  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000021a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000258  00000000  00000000  000021e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002bb6  00000000  00000000  00002440  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001099  00000000  00000000  00004ff6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015ce  00000000  00000000  0000608f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c30  00000000  00000000  00007660  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a04  00000000  00000000  00008290  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000028f3  00000000  00000000  00008c94  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000208  00000000  00000000  0000b587  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 28 04 	jmp	0x850	; 0x850 <__vector_1>
       8:	0c 94 94 04 	jmp	0x928	; 0x928 <__vector_2>
       c:	0c 94 00 05 	jmp	0xa00	; 0xa00 <__vector_3>
      10:	0c 94 6c 05 	jmp	0xad8	; 0xad8 <__vector_4>
      14:	0c 94 d8 05 	jmp	0xbb0	; 0xbb0 <__vector_5>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 af 0c 	jmp	0x195e	; 0x195e <__vector_7>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 5d 0c 	jmp	0x18ba	; 0x18ba <__vector_9>
      28:	0c 94 44 06 	jmp	0xc88	; 0xc88 <__vector_10>
      2c:	0c 94 b0 06 	jmp	0xd60	; 0xd60 <__vector_11>
      30:	0c 94 1c 07 	jmp	0xe38	; 0xe38 <__vector_12>
      34:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__vector_13>
      38:	0c 94 f4 07 	jmp	0xfe8	; 0xfe8 <__vector_14>
      3c:	0c 94 60 08 	jmp	0x10c0	; 0x10c0 <__vector_15>
      40:	0c 94 cc 08 	jmp	0x1198	; 0x1198 <__vector_16>
      44:	0c 94 38 09 	jmp	0x1270	; 0x1270 <__vector_17>
      48:	0c 94 a4 09 	jmp	0x1348	; 0x1348 <__vector_18>
      4c:	0c 94 10 0a 	jmp	0x1420	; 0x1420 <__vector_19>
      50:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__vector_20>
      54:	0c 94 e8 0a 	jmp	0x15d0	; 0x15d0 <__vector_21>
      58:	0c 94 54 0b 	jmp	0x16a8	; 0x16a8 <__vector_22>
      5c:	8c 00       	.word	0x008c	; ????
      5e:	6e 00       	.word	0x006e	; ????
      60:	71 00       	.word	0x0071	; ????
      62:	74 00       	.word	0x0074	; ????
      64:	77 00       	.word	0x0077	; ????
      66:	7a 00       	.word	0x007a	; ????
      68:	7d 00       	.word	0x007d	; ????
      6a:	80 00       	.word	0x0080	; ????
      6c:	83 00       	.word	0x0083	; ????
      6e:	86 00       	.word	0x0086	; ????

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	11 e0       	ldi	r17, 0x01	; 1
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	e0 e6       	ldi	r30, 0x60	; 96
      84:	f0 e2       	ldi	r31, 0x20	; 32
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	a4 38       	cpi	r26, 0x84	; 132
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	24 e0       	ldi	r18, 0x04	; 4
      94:	a4 e8       	ldi	r26, 0x84	; 132
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	af 3d       	cpi	r26, 0xDF	; 223
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 2f 03 	call	0x65e	; 0x65e <main>
      a6:	0c 94 2e 10 	jmp	0x205c	; 0x205c <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <LCD_init>:
#include "PulseGen.h"
#include "TinyTimber.h"

void LCD_init() {
	// LCD(Contrast Control Register), LCD(Display Configuration)(000): 300 s, LCD(Contrast Control)(1111): 3.35 V
	LCDCCR = (0 << LCDDC0) | (0 << LCDDC1) | (0 << LCDDC2) | (1 << LCDCC0) | (1 << LCDCC1) | (1 << LCDCC2) | (1 << LCDCC3);
      ae:	8f e0       	ldi	r24, 0x0F	; 15
      b0:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__DATA_REGION_ORIGIN__+0x87>
	// LCDCS: asynchronous clock, LCDMUX(11): D=1/4, B=1/3, LCD(Port Mask): 25 segments
	LCDCRB = (1 << LCDCS) | (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM2) | (1 << LCDPM1) | (1 << LCDPM0);
      b4:	87 eb       	ldi	r24, 0xB7	; 183
      b6:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
	// LCD(Clock Divide)(111): (D=8) 32Hz
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);
      ba:	87 e0       	ldi	r24, 0x07	; 7
      bc:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__DATA_REGION_ORIGIN__+0x86>
	// LCD(Control and Status Register A), LCD(Enable): True, LCD(Low Power Waveform): True, (no frame interrupt, no blanking)
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
      c0:	80 ec       	ldi	r24, 0xC0	; 192
      c2:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
      c6:	08 95       	ret

000000c8 <getSegmentForChar>:
int none[] = {0b0000, 0b0000, 0b0000, 0b0000};

// Returns wall of data based on char input ('0' = 48 (char))
int* getSegmentForChar(char ch) {

	switch (ch) {
      c8:	90 e0       	ldi	r25, 0x00	; 0
      ca:	fc 01       	movw	r30, r24
      cc:	f0 97       	sbiw	r30, 0x30	; 48
      ce:	ea 30       	cpi	r30, 0x0A	; 10
      d0:	f1 05       	cpc	r31, r1
      d2:	f8 f4       	brcc	.+62     	; 0x112 <getSegmentForChar+0x4a>
      d4:	e2 5d       	subi	r30, 0xD2	; 210
      d6:	ff 4f       	sbci	r31, 0xFF	; 255
      d8:	0c 94 c5 0f 	jmp	0x1f8a	; 0x1f8a <__tablejump2__>
		case '0': return zero;
		case '1': return one;
      dc:	80 e4       	ldi	r24, 0x40	; 64
      de:	91 e0       	ldi	r25, 0x01	; 1
      e0:	08 95       	ret
		case '2': return two;
      e2:	88 e3       	ldi	r24, 0x38	; 56
      e4:	91 e0       	ldi	r25, 0x01	; 1
      e6:	08 95       	ret
		case '3': return three;
      e8:	80 e3       	ldi	r24, 0x30	; 48
      ea:	91 e0       	ldi	r25, 0x01	; 1
      ec:	08 95       	ret
		case '4': return four;
      ee:	88 e2       	ldi	r24, 0x28	; 40
      f0:	91 e0       	ldi	r25, 0x01	; 1
      f2:	08 95       	ret
		case '5': return five;
      f4:	80 e2       	ldi	r24, 0x20	; 32
      f6:	91 e0       	ldi	r25, 0x01	; 1
      f8:	08 95       	ret
		case '6': return six;
      fa:	88 e1       	ldi	r24, 0x18	; 24
      fc:	91 e0       	ldi	r25, 0x01	; 1
      fe:	08 95       	ret
		case '7': return seven;
     100:	80 e1       	ldi	r24, 0x10	; 16
     102:	91 e0       	ldi	r25, 0x01	; 1
     104:	08 95       	ret
		case '8': return eight;
     106:	88 e0       	ldi	r24, 0x08	; 8
     108:	91 e0       	ldi	r25, 0x01	; 1
     10a:	08 95       	ret
		case '9': return nine;
     10c:	80 e0       	ldi	r24, 0x00	; 0
     10e:	91 e0       	ldi	r25, 0x01	; 1
     110:	08 95       	ret
		default:  return none;
     112:	84 e8       	ldi	r24, 0x84	; 132
     114:	91 e0       	ldi	r25, 0x01	; 1
     116:	08 95       	ret

// Returns wall of data based on char input ('0' = 48 (char))
int* getSegmentForChar(char ch) {

	switch (ch) {
		case '0': return zero;
     118:	88 e4       	ldi	r24, 0x48	; 72
     11a:	91 e0       	ldi	r25, 0x01	; 1
		case '7': return seven;
		case '8': return eight;
		case '9': return nine;
		default:  return none;
	}
}
     11c:	08 95       	ret

0000011e <writeChar>:

// Write a char ch at position pos
void writeChar(char ch, uint8_t pos) {
     11e:	cf 93       	push	r28
	// Check if outside range
	if (pos > 5 || pos < 0) return;	
     120:	66 30       	cpi	r22, 0x06	; 6
     122:	08 f0       	brcs	.+2      	; 0x126 <writeChar+0x8>
     124:	e4 c0       	rjmp	.+456    	; 0x2ee <writeChar+0x1d0>
     126:	c6 2f       	mov	r28, r22

	// Get correct char data
	int* segment = getSegmentForChar(ch);
     128:	0e 94 64 00 	call	0xc8	; 0xc8 <getSegmentForChar>
     12c:	fc 01       	movw	r30, r24
	
	// Chose position
	switch (pos) {
     12e:	c2 30       	cpi	r28, 0x02	; 2
     130:	09 f4       	brne	.+2      	; 0x134 <writeChar+0x16>
     132:	67 c0       	rjmp	.+206    	; 0x202 <writeChar+0xe4>
     134:	28 f4       	brcc	.+10     	; 0x140 <writeChar+0x22>
     136:	cc 23       	and	r28, r28
     138:	51 f0       	breq	.+20     	; 0x14e <writeChar+0x30>
     13a:	c1 30       	cpi	r28, 0x01	; 1
     13c:	29 f1       	breq	.+74     	; 0x188 <writeChar+0x6a>
     13e:	d7 c0       	rjmp	.+430    	; 0x2ee <writeChar+0x1d0>
     140:	c3 30       	cpi	r28, 0x03	; 3
     142:	09 f4       	brne	.+2      	; 0x146 <writeChar+0x28>
     144:	7b c0       	rjmp	.+246    	; 0x23c <writeChar+0x11e>
     146:	c4 30       	cpi	r28, 0x04	; 4
     148:	09 f4       	brne	.+2      	; 0x14c <writeChar+0x2e>
     14a:	b5 c0       	rjmp	.+362    	; 0x2b6 <writeChar+0x198>
     14c:	d0 c0       	rjmp	.+416    	; 0x2ee <writeChar+0x1d0>
		case 0:
			// Segment start at 0, 5, 10, 15, higher 4 bits.
			// (LCDDR0 & 0xF0) clears the segment before writing 
			LCDDR0 = (LCDDR0 & 0xF0) | segment[0];
     14e:	ac ee       	ldi	r26, 0xEC	; 236
     150:	b0 e0       	ldi	r27, 0x00	; 0
     152:	8c 91       	ld	r24, X
     154:	80 7f       	andi	r24, 0xF0	; 240
     156:	90 81       	ld	r25, Z
     158:	89 2b       	or	r24, r25
     15a:	8c 93       	st	X, r24
			LCDDR5 = (LCDDR5 & 0xF0) | segment[1];
     15c:	a1 ef       	ldi	r26, 0xF1	; 241
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	8c 91       	ld	r24, X
     162:	80 7f       	andi	r24, 0xF0	; 240
     164:	92 81       	ldd	r25, Z+2	; 0x02
     166:	89 2b       	or	r24, r25
     168:	8c 93       	st	X, r24
			LCDDR10 = (LCDDR10 & 0xF0) | segment[2];
     16a:	a6 ef       	ldi	r26, 0xF6	; 246
     16c:	b0 e0       	ldi	r27, 0x00	; 0
     16e:	8c 91       	ld	r24, X
     170:	80 7f       	andi	r24, 0xF0	; 240
     172:	94 81       	ldd	r25, Z+4	; 0x04
     174:	89 2b       	or	r24, r25
     176:	8c 93       	st	X, r24
			LCDDR15 = (LCDDR15 & 0xF0) | segment[3];
     178:	ab ef       	ldi	r26, 0xFB	; 251
     17a:	b0 e0       	ldi	r27, 0x00	; 0
     17c:	8c 91       	ld	r24, X
     17e:	80 7f       	andi	r24, 0xF0	; 240
     180:	96 81       	ldd	r25, Z+6	; 0x06
     182:	89 2b       	or	r24, r25
     184:	8c 93       	st	X, r24
			break;
     186:	b3 c0       	rjmp	.+358    	; 0x2ee <writeChar+0x1d0>
		case 1:
			// Same segment just lower 4 bits
			LCDDR0 = (LCDDR0 & 0x0F) | (segment[0] << 4);
     188:	ac ee       	ldi	r26, 0xEC	; 236
     18a:	b0 e0       	ldi	r27, 0x00	; 0
     18c:	2c 91       	ld	r18, X
     18e:	80 81       	ld	r24, Z
     190:	91 81       	ldd	r25, Z+1	; 0x01
     192:	82 95       	swap	r24
     194:	92 95       	swap	r25
     196:	90 7f       	andi	r25, 0xF0	; 240
     198:	98 27       	eor	r25, r24
     19a:	80 7f       	andi	r24, 0xF0	; 240
     19c:	98 27       	eor	r25, r24
     19e:	92 2f       	mov	r25, r18
     1a0:	9f 70       	andi	r25, 0x0F	; 15
     1a2:	89 2b       	or	r24, r25
     1a4:	8c 93       	st	X, r24
			LCDDR5 = (LCDDR5 & 0x0F) | (segment[1] << 4);
     1a6:	a1 ef       	ldi	r26, 0xF1	; 241
     1a8:	b0 e0       	ldi	r27, 0x00	; 0
     1aa:	2c 91       	ld	r18, X
     1ac:	82 81       	ldd	r24, Z+2	; 0x02
     1ae:	93 81       	ldd	r25, Z+3	; 0x03
     1b0:	82 95       	swap	r24
     1b2:	92 95       	swap	r25
     1b4:	90 7f       	andi	r25, 0xF0	; 240
     1b6:	98 27       	eor	r25, r24
     1b8:	80 7f       	andi	r24, 0xF0	; 240
     1ba:	98 27       	eor	r25, r24
     1bc:	92 2f       	mov	r25, r18
     1be:	9f 70       	andi	r25, 0x0F	; 15
     1c0:	89 2b       	or	r24, r25
     1c2:	8c 93       	st	X, r24
			LCDDR10 = (LCDDR10 & 0x0F) | (segment[2] << 4);
     1c4:	a6 ef       	ldi	r26, 0xF6	; 246
     1c6:	b0 e0       	ldi	r27, 0x00	; 0
     1c8:	2c 91       	ld	r18, X
     1ca:	84 81       	ldd	r24, Z+4	; 0x04
     1cc:	95 81       	ldd	r25, Z+5	; 0x05
     1ce:	82 95       	swap	r24
     1d0:	92 95       	swap	r25
     1d2:	90 7f       	andi	r25, 0xF0	; 240
     1d4:	98 27       	eor	r25, r24
     1d6:	80 7f       	andi	r24, 0xF0	; 240
     1d8:	98 27       	eor	r25, r24
     1da:	92 2f       	mov	r25, r18
     1dc:	9f 70       	andi	r25, 0x0F	; 15
     1de:	89 2b       	or	r24, r25
     1e0:	8c 93       	st	X, r24
			LCDDR15 = (LCDDR15 & 0x0F) | (segment[3] << 4);
     1e2:	ab ef       	ldi	r26, 0xFB	; 251
     1e4:	b0 e0       	ldi	r27, 0x00	; 0
     1e6:	2c 91       	ld	r18, X
     1e8:	86 81       	ldd	r24, Z+6	; 0x06
     1ea:	97 81       	ldd	r25, Z+7	; 0x07
     1ec:	82 95       	swap	r24
     1ee:	92 95       	swap	r25
     1f0:	90 7f       	andi	r25, 0xF0	; 240
     1f2:	98 27       	eor	r25, r24
     1f4:	80 7f       	andi	r24, 0xF0	; 240
     1f6:	98 27       	eor	r25, r24
     1f8:	92 2f       	mov	r25, r18
     1fa:	9f 70       	andi	r25, 0x0F	; 15
     1fc:	89 2b       	or	r24, r25
     1fe:	8c 93       	st	X, r24
			break;
     200:	76 c0       	rjmp	.+236    	; 0x2ee <writeChar+0x1d0>
		case 2:
			LCDDR1 = (LCDDR1 & 0xF0) | segment[0];
     202:	ad ee       	ldi	r26, 0xED	; 237
     204:	b0 e0       	ldi	r27, 0x00	; 0
     206:	8c 91       	ld	r24, X
     208:	80 7f       	andi	r24, 0xF0	; 240
     20a:	90 81       	ld	r25, Z
     20c:	89 2b       	or	r24, r25
     20e:	8c 93       	st	X, r24
			LCDDR6 = (LCDDR6 & 0xF0) | segment[1];
     210:	a2 ef       	ldi	r26, 0xF2	; 242
     212:	b0 e0       	ldi	r27, 0x00	; 0
     214:	8c 91       	ld	r24, X
     216:	80 7f       	andi	r24, 0xF0	; 240
     218:	92 81       	ldd	r25, Z+2	; 0x02
     21a:	89 2b       	or	r24, r25
     21c:	8c 93       	st	X, r24
			LCDDR11 = (LCDDR11 & 0xF0) | segment[2];
     21e:	a7 ef       	ldi	r26, 0xF7	; 247
     220:	b0 e0       	ldi	r27, 0x00	; 0
     222:	8c 91       	ld	r24, X
     224:	80 7f       	andi	r24, 0xF0	; 240
     226:	94 81       	ldd	r25, Z+4	; 0x04
     228:	89 2b       	or	r24, r25
     22a:	8c 93       	st	X, r24
			LCDDR16 = (LCDDR16 & 0xF0) | segment[3];
     22c:	ac ef       	ldi	r26, 0xFC	; 252
     22e:	b0 e0       	ldi	r27, 0x00	; 0
     230:	8c 91       	ld	r24, X
     232:	80 7f       	andi	r24, 0xF0	; 240
     234:	96 81       	ldd	r25, Z+6	; 0x06
     236:	89 2b       	or	r24, r25
     238:	8c 93       	st	X, r24
			break;
     23a:	59 c0       	rjmp	.+178    	; 0x2ee <writeChar+0x1d0>
		case 3:
			LCDDR1 = (LCDDR1 & 0x0F) | (segment[0] << 4);
     23c:	ad ee       	ldi	r26, 0xED	; 237
     23e:	b0 e0       	ldi	r27, 0x00	; 0
     240:	2c 91       	ld	r18, X
     242:	80 81       	ld	r24, Z
     244:	91 81       	ldd	r25, Z+1	; 0x01
     246:	82 95       	swap	r24
     248:	92 95       	swap	r25
     24a:	90 7f       	andi	r25, 0xF0	; 240
     24c:	98 27       	eor	r25, r24
     24e:	80 7f       	andi	r24, 0xF0	; 240
     250:	98 27       	eor	r25, r24
     252:	92 2f       	mov	r25, r18
     254:	9f 70       	andi	r25, 0x0F	; 15
     256:	89 2b       	or	r24, r25
     258:	8c 93       	st	X, r24
			LCDDR6 = (LCDDR6 & 0x0F) | (segment[1] << 4);
     25a:	a2 ef       	ldi	r26, 0xF2	; 242
     25c:	b0 e0       	ldi	r27, 0x00	; 0
     25e:	2c 91       	ld	r18, X
     260:	82 81       	ldd	r24, Z+2	; 0x02
     262:	93 81       	ldd	r25, Z+3	; 0x03
     264:	82 95       	swap	r24
     266:	92 95       	swap	r25
     268:	90 7f       	andi	r25, 0xF0	; 240
     26a:	98 27       	eor	r25, r24
     26c:	80 7f       	andi	r24, 0xF0	; 240
     26e:	98 27       	eor	r25, r24
     270:	92 2f       	mov	r25, r18
     272:	9f 70       	andi	r25, 0x0F	; 15
     274:	89 2b       	or	r24, r25
     276:	8c 93       	st	X, r24
			LCDDR11 = (LCDDR11 & 0x0F) | (segment[2] << 4);
     278:	a7 ef       	ldi	r26, 0xF7	; 247
     27a:	b0 e0       	ldi	r27, 0x00	; 0
     27c:	2c 91       	ld	r18, X
     27e:	84 81       	ldd	r24, Z+4	; 0x04
     280:	95 81       	ldd	r25, Z+5	; 0x05
     282:	82 95       	swap	r24
     284:	92 95       	swap	r25
     286:	90 7f       	andi	r25, 0xF0	; 240
     288:	98 27       	eor	r25, r24
     28a:	80 7f       	andi	r24, 0xF0	; 240
     28c:	98 27       	eor	r25, r24
     28e:	92 2f       	mov	r25, r18
     290:	9f 70       	andi	r25, 0x0F	; 15
     292:	89 2b       	or	r24, r25
     294:	8c 93       	st	X, r24
			LCDDR16 = (LCDDR16 & 0x0F) | (segment[3] << 4);
     296:	ac ef       	ldi	r26, 0xFC	; 252
     298:	b0 e0       	ldi	r27, 0x00	; 0
     29a:	2c 91       	ld	r18, X
     29c:	86 81       	ldd	r24, Z+6	; 0x06
     29e:	97 81       	ldd	r25, Z+7	; 0x07
     2a0:	82 95       	swap	r24
     2a2:	92 95       	swap	r25
     2a4:	90 7f       	andi	r25, 0xF0	; 240
     2a6:	98 27       	eor	r25, r24
     2a8:	80 7f       	andi	r24, 0xF0	; 240
     2aa:	98 27       	eor	r25, r24
     2ac:	92 2f       	mov	r25, r18
     2ae:	9f 70       	andi	r25, 0x0F	; 15
     2b0:	89 2b       	or	r24, r25
     2b2:	8c 93       	st	X, r24
			break;
     2b4:	1c c0       	rjmp	.+56     	; 0x2ee <writeChar+0x1d0>
		case 4:
			LCDDR2 = (LCDDR2 & 0xF0) | segment[0];
     2b6:	ae ee       	ldi	r26, 0xEE	; 238
     2b8:	b0 e0       	ldi	r27, 0x00	; 0
     2ba:	8c 91       	ld	r24, X
     2bc:	80 7f       	andi	r24, 0xF0	; 240
     2be:	90 81       	ld	r25, Z
     2c0:	89 2b       	or	r24, r25
     2c2:	8c 93       	st	X, r24
			LCDDR7 = (LCDDR7 & 0xF0) | segment[1];
     2c4:	a3 ef       	ldi	r26, 0xF3	; 243
     2c6:	b0 e0       	ldi	r27, 0x00	; 0
     2c8:	8c 91       	ld	r24, X
     2ca:	80 7f       	andi	r24, 0xF0	; 240
     2cc:	92 81       	ldd	r25, Z+2	; 0x02
     2ce:	89 2b       	or	r24, r25
     2d0:	8c 93       	st	X, r24
			LCDDR12 = (LCDDR12 & 0xF0) | segment[2];
     2d2:	a8 ef       	ldi	r26, 0xF8	; 248
     2d4:	b0 e0       	ldi	r27, 0x00	; 0
     2d6:	8c 91       	ld	r24, X
     2d8:	80 7f       	andi	r24, 0xF0	; 240
     2da:	94 81       	ldd	r25, Z+4	; 0x04
     2dc:	89 2b       	or	r24, r25
     2de:	8c 93       	st	X, r24
			LCDDR17 = (LCDDR17 & 0xF0) | segment[3];
     2e0:	ad ef       	ldi	r26, 0xFD	; 253
     2e2:	b0 e0       	ldi	r27, 0x00	; 0
     2e4:	8c 91       	ld	r24, X
     2e6:	80 7f       	andi	r24, 0xF0	; 240
     2e8:	96 81       	ldd	r25, Z+6	; 0x06
     2ea:	89 2b       	or	r24, r25
     2ec:	8c 93       	st	X, r24
			break;
	}
}
     2ee:	cf 91       	pop	r28
     2f0:	08 95       	ret

000002f2 <printAt>:

void printAt(long num, int pos) {
     2f2:	8f 92       	push	r8
     2f4:	9f 92       	push	r9
     2f6:	af 92       	push	r10
     2f8:	bf 92       	push	r11
     2fa:	cf 92       	push	r12
     2fc:	df 92       	push	r13
     2fe:	ef 92       	push	r14
     300:	ff 92       	push	r15
     302:	cf 93       	push	r28
     304:	df 93       	push	r29
     306:	4b 01       	movw	r8, r22
     308:	5c 01       	movw	r10, r24
     30a:	ea 01       	movw	r28, r20
	writeChar((num % 100) / 10 + '0', pos);
     30c:	24 e6       	ldi	r18, 0x64	; 100
     30e:	30 e0       	ldi	r19, 0x00	; 0
     310:	40 e0       	ldi	r20, 0x00	; 0
     312:	50 e0       	ldi	r21, 0x00	; 0
     314:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__divmodsi4>
     318:	0f 2e       	mov	r0, r31
     31a:	fa e0       	ldi	r31, 0x0A	; 10
     31c:	cf 2e       	mov	r12, r31
     31e:	d1 2c       	mov	r13, r1
     320:	e1 2c       	mov	r14, r1
     322:	f1 2c       	mov	r15, r1
     324:	f0 2d       	mov	r31, r0
     326:	a7 01       	movw	r20, r14
     328:	96 01       	movw	r18, r12
     32a:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__divmodsi4>
     32e:	6c 2f       	mov	r22, r28
     330:	80 e3       	ldi	r24, 0x30	; 48
     332:	82 0f       	add	r24, r18
     334:	0e 94 8f 00 	call	0x11e	; 0x11e <writeChar>
	pos++;
	writeChar(num % 10 + '0', pos);
     338:	21 96       	adiw	r28, 0x01	; 1
     33a:	c5 01       	movw	r24, r10
     33c:	b4 01       	movw	r22, r8
     33e:	a7 01       	movw	r20, r14
     340:	96 01       	movw	r18, r12
     342:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__divmodsi4>
     346:	86 2f       	mov	r24, r22
     348:	6c 2f       	mov	r22, r28
     34a:	80 5d       	subi	r24, 0xD0	; 208
     34c:	0e 94 8f 00 	call	0x11e	; 0x11e <writeChar>
}
     350:	df 91       	pop	r29
     352:	cf 91       	pop	r28
     354:	ff 90       	pop	r15
     356:	ef 90       	pop	r14
     358:	df 90       	pop	r13
     35a:	cf 90       	pop	r12
     35c:	bf 90       	pop	r11
     35e:	af 90       	pop	r10
     360:	9f 90       	pop	r9
     362:	8f 90       	pop	r8
     364:	08 95       	ret

00000366 <activeGenIndicator>:

void activeGenIndicator(GUI *self) {
	//turn on 1 or 2
	if (self->activeGen == self->gen1) {
     366:	fc 01       	movw	r30, r24
     368:	20 85       	ldd	r18, Z+8	; 0x08
     36a:	31 85       	ldd	r19, Z+9	; 0x09
     36c:	84 81       	ldd	r24, Z+4	; 0x04
     36e:	95 81       	ldd	r25, Z+5	; 0x05
     370:	28 17       	cp	r18, r24
     372:	39 07       	cpc	r19, r25
     374:	31 f4       	brne	.+12     	; 0x382 <activeGenIndicator+0x1c>
		LCDDR0 |= 0b00000100;
     376:	ec ee       	ldi	r30, 0xEC	; 236
     378:	f0 e0       	ldi	r31, 0x00	; 0
     37a:	80 81       	ld	r24, Z
     37c:	84 60       	ori	r24, 0x04	; 4
     37e:	80 83       	st	Z, r24
     380:	08 95       	ret
	} else {
		LCDDR0 |= 0b01000000;
     382:	ec ee       	ldi	r30, 0xEC	; 236
     384:	f0 e0       	ldi	r31, 0x00	; 0
     386:	80 81       	ld	r24, Z
     388:	80 64       	ori	r24, 0x40	; 64
     38a:	80 83       	st	Z, r24
     38c:	08 95       	ret

0000038e <updateDisplay>:
		SYNC(self->activeGen, setFrequency, 0);
	}
	ASYNC(self, updateDisplay, 0);
}

void updateDisplay(GUI *self) {
     38e:	ef 92       	push	r14
     390:	ff 92       	push	r15
     392:	0f 93       	push	r16
     394:	1f 93       	push	r17
     396:	cf 93       	push	r28
     398:	df 93       	push	r29
     39a:	ec 01       	movw	r28, r24
	int gen1Freq = SYNC(self->gen1, getFrequency, 0);
     39c:	40 e0       	ldi	r20, 0x00	; 0
     39e:	50 e0       	ldi	r21, 0x00	; 0
     3a0:	6e e5       	ldi	r22, 0x5E	; 94
     3a2:	73 e0       	ldi	r23, 0x03	; 3
     3a4:	8c 81       	ldd	r24, Y+4	; 0x04
     3a6:	9d 81       	ldd	r25, Y+5	; 0x05
     3a8:	0e 94 75 0e 	call	0x1cea	; 0x1cea <sync>
     3ac:	7c 01       	movw	r14, r24
	int gen2Freq = SYNC(self->gen2, getFrequency, 0);
     3ae:	40 e0       	ldi	r20, 0x00	; 0
     3b0:	50 e0       	ldi	r21, 0x00	; 0
     3b2:	6e e5       	ldi	r22, 0x5E	; 94
     3b4:	73 e0       	ldi	r23, 0x03	; 3
     3b6:	8e 81       	ldd	r24, Y+6	; 0x06
     3b8:	9f 81       	ldd	r25, Y+7	; 0x07
     3ba:	0e 94 75 0e 	call	0x1cea	; 0x1cea <sync>
     3be:	8c 01       	movw	r16, r24
    printAt(gen1Freq, 0); //gen1 hz at pos 0-1
     3c0:	b7 01       	movw	r22, r14
     3c2:	ff 0c       	add	r15, r15
     3c4:	88 0b       	sbc	r24, r24
     3c6:	99 0b       	sbc	r25, r25
     3c8:	40 e0       	ldi	r20, 0x00	; 0
     3ca:	50 e0       	ldi	r21, 0x00	; 0
     3cc:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printAt>
    printAt(gen2Freq, 3); //gen2 hz at pos 3-4
     3d0:	b8 01       	movw	r22, r16
     3d2:	11 0f       	add	r17, r17
     3d4:	88 0b       	sbc	r24, r24
     3d6:	99 0b       	sbc	r25, r25
     3d8:	43 e0       	ldi	r20, 0x03	; 3
     3da:	50 e0       	ldi	r21, 0x00	; 0
     3dc:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printAt>
	activeGenIndicator(self);
     3e0:	ce 01       	movw	r24, r28
     3e2:	0e 94 b3 01 	call	0x366	; 0x366 <activeGenIndicator>
     3e6:	df 91       	pop	r29
     3e8:	cf 91       	pop	r28
     3ea:	1f 91       	pop	r17
     3ec:	0f 91       	pop	r16
     3ee:	ff 90       	pop	r15
     3f0:	ef 90       	pop	r14
     3f2:	08 95       	ret

000003f4 <swithToLeftGen>:
	} else {
		LCDDR0 |= 0b01000000;
	}
}

void swithToLeftGen(GUI *self) {
     3f4:	cf 92       	push	r12
     3f6:	df 92       	push	r13
     3f8:	ef 92       	push	r14
     3fa:	ff 92       	push	r15
     3fc:	0f 93       	push	r16
     3fe:	1f 93       	push	r17
	self->activeGen = self->gen1;
     400:	fc 01       	movw	r30, r24
     402:	24 81       	ldd	r18, Z+4	; 0x04
     404:	35 81       	ldd	r19, Z+5	; 0x05
     406:	31 87       	std	Z+9, r19	; 0x09
     408:	20 87       	std	Z+8, r18	; 0x08
	ASYNC(self, updateDisplay, 0);
     40a:	c1 2c       	mov	r12, r1
     40c:	d1 2c       	mov	r13, r1
     40e:	0f 2e       	mov	r0, r31
     410:	f7 ec       	ldi	r31, 0xC7	; 199
     412:	ef 2e       	mov	r14, r31
     414:	f1 e0       	ldi	r31, 0x01	; 1
     416:	ff 2e       	mov	r15, r31
     418:	f0 2d       	mov	r31, r0
     41a:	8c 01       	movw	r16, r24
     41c:	20 e0       	ldi	r18, 0x00	; 0
     41e:	30 e0       	ldi	r19, 0x00	; 0
     420:	a9 01       	movw	r20, r18
     422:	60 e0       	ldi	r22, 0x00	; 0
     424:	70 e0       	ldi	r23, 0x00	; 0
     426:	cb 01       	movw	r24, r22
     428:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <async>
}
     42c:	1f 91       	pop	r17
     42e:	0f 91       	pop	r16
     430:	ff 90       	pop	r15
     432:	ef 90       	pop	r14
     434:	df 90       	pop	r13
     436:	cf 90       	pop	r12
     438:	08 95       	ret

0000043a <swithToRightGen>:

void swithToRightGen(GUI *self) {
     43a:	cf 92       	push	r12
     43c:	df 92       	push	r13
     43e:	ef 92       	push	r14
     440:	ff 92       	push	r15
     442:	0f 93       	push	r16
     444:	1f 93       	push	r17
	self->activeGen = self->gen2;
     446:	fc 01       	movw	r30, r24
     448:	26 81       	ldd	r18, Z+6	; 0x06
     44a:	37 81       	ldd	r19, Z+7	; 0x07
     44c:	31 87       	std	Z+9, r19	; 0x09
     44e:	20 87       	std	Z+8, r18	; 0x08
	ASYNC(self, updateDisplay, 0);
     450:	c1 2c       	mov	r12, r1
     452:	d1 2c       	mov	r13, r1
     454:	0f 2e       	mov	r0, r31
     456:	f7 ec       	ldi	r31, 0xC7	; 199
     458:	ef 2e       	mov	r14, r31
     45a:	f1 e0       	ldi	r31, 0x01	; 1
     45c:	ff 2e       	mov	r15, r31
     45e:	f0 2d       	mov	r31, r0
     460:	8c 01       	movw	r16, r24
     462:	20 e0       	ldi	r18, 0x00	; 0
     464:	30 e0       	ldi	r19, 0x00	; 0
     466:	a9 01       	movw	r20, r18
     468:	60 e0       	ldi	r22, 0x00	; 0
     46a:	70 e0       	ldi	r23, 0x00	; 0
     46c:	cb 01       	movw	r24, r22
     46e:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <async>
}
     472:	1f 91       	pop	r17
     474:	0f 91       	pop	r16
     476:	ff 90       	pop	r15
     478:	ef 90       	pop	r14
     47a:	df 90       	pop	r13
     47c:	cf 90       	pop	r12
     47e:	08 95       	ret

00000480 <adjustFrequency>:

void adjustFrequency(GUI *self, int delta) {
     480:	cf 92       	push	r12
     482:	df 92       	push	r13
     484:	ef 92       	push	r14
     486:	ff 92       	push	r15
     488:	0f 93       	push	r16
     48a:	1f 93       	push	r17
     48c:	cf 93       	push	r28
     48e:	df 93       	push	r29
     490:	8c 01       	movw	r16, r24
     492:	eb 01       	movw	r28, r22
	// Get right target gen
	int newFreq = SYNC(self->activeGen, getFrequency, 0) + delta;
     494:	40 e0       	ldi	r20, 0x00	; 0
     496:	50 e0       	ldi	r21, 0x00	; 0
     498:	6e e5       	ldi	r22, 0x5E	; 94
     49a:	73 e0       	ldi	r23, 0x03	; 3
     49c:	fc 01       	movw	r30, r24
     49e:	80 85       	ldd	r24, Z+8	; 0x08
     4a0:	91 85       	ldd	r25, Z+9	; 0x09
     4a2:	0e 94 75 0e 	call	0x1cea	; 0x1cea <sync>
     4a6:	ac 01       	movw	r20, r24
     4a8:	4c 0f       	add	r20, r28
     4aa:	5d 1f       	adc	r21, r29
	if (newFreq < 0) newFreq = 0;
	// Update everything
	SYNC(self->activeGen, setFrequency, newFreq);
     4ac:	55 23       	and	r21, r21
     4ae:	14 f4       	brge	.+4      	; 0x4b4 <adjustFrequency+0x34>
     4b0:	40 e0       	ldi	r20, 0x00	; 0
     4b2:	50 e0       	ldi	r21, 0x00	; 0
     4b4:	6e e4       	ldi	r22, 0x4E	; 78
     4b6:	73 e0       	ldi	r23, 0x03	; 3
     4b8:	f8 01       	movw	r30, r16
     4ba:	80 85       	ldd	r24, Z+8	; 0x08
     4bc:	91 85       	ldd	r25, Z+9	; 0x09
     4be:	0e 94 75 0e 	call	0x1cea	; 0x1cea <sync>
	ASYNC(self, updateDisplay, 0);
     4c2:	c1 2c       	mov	r12, r1
     4c4:	d1 2c       	mov	r13, r1
     4c6:	0f 2e       	mov	r0, r31
     4c8:	f7 ec       	ldi	r31, 0xC7	; 199
     4ca:	ef 2e       	mov	r14, r31
     4cc:	f1 e0       	ldi	r31, 0x01	; 1
     4ce:	ff 2e       	mov	r15, r31
     4d0:	f0 2d       	mov	r31, r0
     4d2:	20 e0       	ldi	r18, 0x00	; 0
     4d4:	30 e0       	ldi	r19, 0x00	; 0
     4d6:	a9 01       	movw	r20, r18
     4d8:	60 e0       	ldi	r22, 0x00	; 0
     4da:	70 e0       	ldi	r23, 0x00	; 0
     4dc:	cb 01       	movw	r24, r22
     4de:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <async>
}
     4e2:	df 91       	pop	r29
     4e4:	cf 91       	pop	r28
     4e6:	1f 91       	pop	r17
     4e8:	0f 91       	pop	r16
     4ea:	ff 90       	pop	r15
     4ec:	ef 90       	pop	r14
     4ee:	df 90       	pop	r13
     4f0:	cf 90       	pop	r12
     4f2:	08 95       	ret

000004f4 <saveRestore>:

void saveRestore(GUI *self) {
     4f4:	cf 92       	push	r12
     4f6:	df 92       	push	r13
     4f8:	ef 92       	push	r14
     4fa:	ff 92       	push	r15
     4fc:	0f 93       	push	r16
     4fe:	1f 93       	push	r17
     500:	cf 93       	push	r28
     502:	df 93       	push	r29
     504:	ec 01       	movw	r28, r24
	if (SYNC(self->activeGen, getFrequency, 0) == 0) {
     506:	40 e0       	ldi	r20, 0x00	; 0
     508:	50 e0       	ldi	r21, 0x00	; 0
     50a:	6e e5       	ldi	r22, 0x5E	; 94
     50c:	73 e0       	ldi	r23, 0x03	; 3
     50e:	88 85       	ldd	r24, Y+8	; 0x08
     510:	99 85       	ldd	r25, Y+9	; 0x09
     512:	0e 94 75 0e 	call	0x1cea	; 0x1cea <sync>
     516:	89 2b       	or	r24, r25
     518:	49 f4       	brne	.+18     	; 0x52c <__stack+0x2d>
		SYNC(self->activeGen, restore, 0);
     51a:	40 e0       	ldi	r20, 0x00	; 0
     51c:	50 e0       	ldi	r21, 0x00	; 0
     51e:	68 e5       	ldi	r22, 0x58	; 88
     520:	73 e0       	ldi	r23, 0x03	; 3
     522:	88 85       	ldd	r24, Y+8	; 0x08
     524:	99 85       	ldd	r25, Y+9	; 0x09
     526:	0e 94 75 0e 	call	0x1cea	; 0x1cea <sync>
     52a:	10 c0       	rjmp	.+32     	; 0x54c <__stack+0x4d>
		} else {
		SYNC(self->activeGen, save, 0);
     52c:	40 e0       	ldi	r20, 0x00	; 0
     52e:	50 e0       	ldi	r21, 0x00	; 0
     530:	62 e5       	ldi	r22, 0x52	; 82
     532:	73 e0       	ldi	r23, 0x03	; 3
     534:	88 85       	ldd	r24, Y+8	; 0x08
     536:	99 85       	ldd	r25, Y+9	; 0x09
     538:	0e 94 75 0e 	call	0x1cea	; 0x1cea <sync>
		SYNC(self->activeGen, setFrequency, 0);
     53c:	40 e0       	ldi	r20, 0x00	; 0
     53e:	50 e0       	ldi	r21, 0x00	; 0
     540:	6e e4       	ldi	r22, 0x4E	; 78
     542:	73 e0       	ldi	r23, 0x03	; 3
     544:	88 85       	ldd	r24, Y+8	; 0x08
     546:	99 85       	ldd	r25, Y+9	; 0x09
     548:	0e 94 75 0e 	call	0x1cea	; 0x1cea <sync>
	}
	ASYNC(self, updateDisplay, 0);
     54c:	c1 2c       	mov	r12, r1
     54e:	d1 2c       	mov	r13, r1
     550:	0f 2e       	mov	r0, r31
     552:	f7 ec       	ldi	r31, 0xC7	; 199
     554:	ef 2e       	mov	r14, r31
     556:	f1 e0       	ldi	r31, 0x01	; 1
     558:	ff 2e       	mov	r15, r31
     55a:	f0 2d       	mov	r31, r0
     55c:	8e 01       	movw	r16, r28
     55e:	20 e0       	ldi	r18, 0x00	; 0
     560:	30 e0       	ldi	r19, 0x00	; 0
     562:	a9 01       	movw	r20, r18
     564:	60 e0       	ldi	r22, 0x00	; 0
     566:	70 e0       	ldi	r23, 0x00	; 0
     568:	cb 01       	movw	r24, r22
     56a:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <async>
}
     56e:	df 91       	pop	r29
     570:	cf 91       	pop	r28
     572:	1f 91       	pop	r17
     574:	0f 91       	pop	r16
     576:	ff 90       	pop	r15
     578:	ef 90       	pop	r14
     57a:	df 90       	pop	r13
     57c:	cf 90       	pop	r12
     57e:	08 95       	ret

00000580 <holdDown>:
    if (!(PINE & (1 << PB3))) {
        swithToRightGen(self->gui);
    }
}

void holdDown(JoystickHandler *self) {
     580:	cf 92       	push	r12
     582:	df 92       	push	r13
     584:	ef 92       	push	r14
     586:	ff 92       	push	r15
     588:	0f 93       	push	r16
     58a:	1f 93       	push	r17
     58c:	cf 93       	push	r28
     58e:	df 93       	push	r29
    if (!(PINB & (1 << PB7))) {
     590:	1f 99       	sbic	0x03, 7	; 3
     592:	1b c0       	rjmp	.+54     	; 0x5ca <holdDown+0x4a>
     594:	ec 01       	movw	r28, r24
        AFTER(MSEC(100), self, holdDown, 0);
     596:	c1 2c       	mov	r12, r1
     598:	d1 2c       	mov	r13, r1
     59a:	0f 2e       	mov	r0, r31
     59c:	f0 ec       	ldi	r31, 0xC0	; 192
     59e:	ef 2e       	mov	r14, r31
     5a0:	f2 e0       	ldi	r31, 0x02	; 2
     5a2:	ff 2e       	mov	r15, r31
     5a4:	f0 2d       	mov	r31, r0
     5a6:	8c 01       	movw	r16, r24
     5a8:	20 e0       	ldi	r18, 0x00	; 0
     5aa:	30 e0       	ldi	r19, 0x00	; 0
     5ac:	a9 01       	movw	r20, r18
     5ae:	65 e3       	ldi	r22, 0x35	; 53
     5b0:	7c e0       	ldi	r23, 0x0C	; 12
     5b2:	80 e0       	ldi	r24, 0x00	; 0
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <async>
        SYNC(self->gui, adjustFrequency, -1);
     5ba:	4f ef       	ldi	r20, 0xFF	; 255
     5bc:	5f ef       	ldi	r21, 0xFF	; 255
     5be:	60 e4       	ldi	r22, 0x40	; 64
     5c0:	72 e0       	ldi	r23, 0x02	; 2
     5c2:	8c 81       	ldd	r24, Y+4	; 0x04
     5c4:	9d 81       	ldd	r25, Y+5	; 0x05
     5c6:	0e 94 75 0e 	call	0x1cea	; 0x1cea <sync>
    }
     5ca:	df 91       	pop	r29
     5cc:	cf 91       	pop	r28
     5ce:	1f 91       	pop	r17
     5d0:	0f 91       	pop	r16
     5d2:	ff 90       	pop	r15
     5d4:	ef 90       	pop	r14
     5d6:	df 90       	pop	r13
     5d8:	cf 90       	pop	r12
     5da:	08 95       	ret

000005dc <joystickInit>:
#include "PulseGen.h"


void joystickInit() {
    // Input for: Down, Up, Click
    PORTB |= (1 << PB7) | (1 << PB6) | (1 << PB4);
     5dc:	85 b1       	in	r24, 0x05	; 5
     5de:	80 6d       	ori	r24, 0xD0	; 208
     5e0:	85 b9       	out	0x05, r24	; 5
    //Input for; Left, Right
    PORTE |= (1 << PE3) | (1 << PE2);
     5e2:	8e b1       	in	r24, 0x0e	; 14
     5e4:	8c 60       	ori	r24, 0x0C	; 12
     5e6:	8e b9       	out	0x0e, r24	; 14
    // Turn on interrupts
    EIMSK |= (1 << PCINT15) | (1 << PCINT14);
     5e8:	8d b3       	in	r24, 0x1d	; 29
     5ea:	80 6c       	ori	r24, 0xC0	; 192
     5ec:	8d bb       	out	0x1d, r24	; 29

    // Define interrupts from PB7,6,4
    PCMSK1 |= (1 << PCINT15) | (1 << PCINT14) | (1 << PCINT12);
     5ee:	ec e6       	ldi	r30, 0x6C	; 108
     5f0:	f0 e0       	ldi	r31, 0x00	; 0
     5f2:	80 81       	ld	r24, Z
     5f4:	80 6d       	ori	r24, 0xD0	; 208
     5f6:	80 83       	st	Z, r24
    // Define interrupts from PE3,2
    PCMSK0 |= (1 << PCINT3) | (1 << PCINT2);
     5f8:	eb e6       	ldi	r30, 0x6B	; 107
     5fa:	f0 e0       	ldi	r31, 0x00	; 0
     5fc:	80 81       	ld	r24, Z
     5fe:	8c 60       	ori	r24, 0x0C	; 12
     600:	80 83       	st	Z, r24
     602:	08 95       	ret

00000604 <joysticckInteruptHandler>:
}


// Joystick input handler
void joysticckInteruptHandler(JoystickHandler *self) { 
     604:	cf 93       	push	r28
     606:	df 93       	push	r29
     608:	ec 01       	movw	r28, r24
    // Down
    if (!(PINB & (1 << PB7))) {
     60a:	1f 9b       	sbis	0x03, 7	; 3
        holdDown(self);
     60c:	0e 94 c0 02 	call	0x580	; 0x580 <holdDown>
    }
    // Up
    if (!(PINB & (1 << PB6))) {
     610:	1e 99       	sbic	0x03, 6	; 3
     612:	06 c0       	rjmp	.+12     	; 0x620 <joysticckInteruptHandler+0x1c>
        adjustFrequency(self->gui, 1);
     614:	61 e0       	ldi	r22, 0x01	; 1
     616:	70 e0       	ldi	r23, 0x00	; 0
     618:	8c 81       	ldd	r24, Y+4	; 0x04
     61a:	9d 81       	ldd	r25, Y+5	; 0x05
     61c:	0e 94 40 02 	call	0x480	; 0x480 <adjustFrequency>
    }
    // In
    if (!(PINB & (1 << PB4))) {
     620:	1c 99       	sbic	0x03, 4	; 3
     622:	04 c0       	rjmp	.+8      	; 0x62c <joysticckInteruptHandler+0x28>
        saveRestore(self->gui);
     624:	8c 81       	ldd	r24, Y+4	; 0x04
     626:	9d 81       	ldd	r25, Y+5	; 0x05
     628:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <saveRestore>
    }
    // Left
    if (!(PINE & (1 << PB2))) {
     62c:	62 99       	sbic	0x0c, 2	; 12
     62e:	04 c0       	rjmp	.+8      	; 0x638 <joysticckInteruptHandler+0x34>
        swithToLeftGen(self->gui);
     630:	8c 81       	ldd	r24, Y+4	; 0x04
     632:	9d 81       	ldd	r25, Y+5	; 0x05
     634:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <swithToLeftGen>
    }
    // Right
    if (!(PINE & (1 << PB3))) {
     638:	63 99       	sbic	0x0c, 3	; 12
     63a:	04 c0       	rjmp	.+8      	; 0x644 <joysticckInteruptHandler+0x40>
        swithToRightGen(self->gui);
     63c:	8c 81       	ldd	r24, Y+4	; 0x04
     63e:	9d 81       	ldd	r25, Y+5	; 0x05
     640:	0e 94 1d 02 	call	0x43a	; 0x43a <swithToRightGen>
    }
}
     644:	df 91       	pop	r29
     646:	cf 91       	pop	r28
     648:	08 95       	ret

0000064a <sysInit>:
GUI gui = initGUI(&gen1, &gen2);
JoystickHandler joystick = initJoystickHandler(&gui);

void sysInit(){
    // Clock Prescale Register "maximum speed"
	CLKPR = 0b10000000; // Clock Prescaler Change Enable
     64a:	e1 e6       	ldi	r30, 0x61	; 97
     64c:	f0 e0       	ldi	r31, 0x00	; 0
     64e:	80 e8       	ldi	r24, 0x80	; 128
     650:	80 83       	st	Z, r24
	CLKPR = 0b00000000; // Set 0 for sysclock
     652:	10 82       	st	Z, r1
     654:	08 95       	ret

00000656 <pinOutputInit>:
}

void pinOutputInit(){
    // Initialize Port E as output for PE4 and PE6
	DDRE |= (1 << PE4) | (1 << PE6);
     656:	8d b1       	in	r24, 0x0d	; 13
     658:	80 65       	ori	r24, 0x50	; 80
     65a:	8d b9       	out	0x0d, r24	; 13
     65c:	08 95       	ret

0000065e <main>:
}


int main() {
    sysInit();
     65e:	0e 94 25 03 	call	0x64a	; 0x64a <sysInit>
    pinOutputInit();
     662:	0e 94 2b 03 	call	0x656	; 0x656 <pinOutputInit>
    joystickInit();
     666:	0e 94 ee 02 	call	0x5dc	; 0x5dc <joystickInit>
    LCD_init();
     66a:	0e 94 57 00 	call	0xae	; 0xae <LCD_init>
	//LCDDR0 = 0b01000100;
	//LCDDR0 = 0b01000100;
	
    // Instal interupt handler
    //when the joystick's vertical state changes
    INSTALL(&joystick, joysticckInteruptHandler, IRQ_PCINT0);
     66e:	41 e0       	ldi	r20, 0x01	; 1
     670:	62 e0       	ldi	r22, 0x02	; 2
     672:	73 e0       	ldi	r23, 0x03	; 3
     674:	80 e5       	ldi	r24, 0x50	; 80
     676:	91 e0       	ldi	r25, 0x01	; 1
     678:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <install>
	INSTALL(&joystick, joysticckInteruptHandler, IRQ_PCINT1);
     67c:	42 e0       	ldi	r20, 0x02	; 2
     67e:	62 e0       	ldi	r22, 0x02	; 2
     680:	73 e0       	ldi	r23, 0x03	; 3
     682:	80 e5       	ldi	r24, 0x50	; 80
     684:	91 e0       	ldi	r25, 0x01	; 1
     686:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <install>
    //when the joystick's horizontal (minus middle) state changes
    
    // Start kernel
    return TINYTIMBER(&gui, NULL, NULL);
     68a:	40 e0       	ldi	r20, 0x00	; 0
     68c:	50 e0       	ldi	r21, 0x00	; 0
     68e:	60 e0       	ldi	r22, 0x00	; 0
     690:	70 e0       	ldi	r23, 0x00	; 0
     692:	86 e5       	ldi	r24, 0x56	; 86
     694:	91 e0       	ldi	r25, 0x01	; 1
     696:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <tinytimber>
}
     69a:	08 95       	ret

0000069c <setFrequency>:
#include "PortWrite.h"
#include "TinyTimber.h"


void setFrequency(PulseGen *self, int freq) {
	self->frequency = freq;
     69c:	fc 01       	movw	r30, r24
     69e:	71 87       	std	Z+9, r23	; 0x09
     6a0:	60 87       	std	Z+8, r22	; 0x08
     6a2:	08 95       	ret

000006a4 <save>:
    }
}

// Saves the freq
void save(PulseGen *self) {
	self->saved_freq = self->frequency;
     6a4:	fc 01       	movw	r30, r24
     6a6:	20 85       	ldd	r18, Z+8	; 0x08
     6a8:	31 85       	ldd	r19, Z+9	; 0x09
     6aa:	33 87       	std	Z+11, r19	; 0x0b
     6ac:	22 87       	std	Z+10, r18	; 0x0a
     6ae:	08 95       	ret

000006b0 <restore>:
}

// Restores freq to last saved
void restore(PulseGen *self) {
	self->frequency = self->saved_freq;
     6b0:	fc 01       	movw	r30, r24
     6b2:	22 85       	ldd	r18, Z+10	; 0x0a
     6b4:	33 85       	ldd	r19, Z+11	; 0x0b
     6b6:	31 87       	std	Z+9, r19	; 0x09
     6b8:	20 87       	std	Z+8, r18	; 0x08
     6ba:	08 95       	ret

000006bc <getFrequency>:
}

int getFrequency(PulseGen *self) {
	return self->frequency;
}
     6bc:	fc 01       	movw	r30, r24
     6be:	80 85       	ldd	r24, Z+8	; 0x08
     6c0:	91 85       	ldd	r25, Z+9	; 0x09
     6c2:	08 95       	ret

000006c4 <initialize>:
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
}
     6c4:	cf 93       	push	r28
     6c6:	df 93       	push	r29
     6c8:	00 d0       	rcall	.+0      	; 0x6ca <initialize+0x6>
     6ca:	00 d0       	rcall	.+0      	; 0x6cc <initialize+0x8>
     6cc:	cd b7       	in	r28, 0x3d	; 61
     6ce:	de b7       	in	r29, 0x3e	; 62
     6d0:	8f e7       	ldi	r24, 0x7F	; 127
     6d2:	92 e0       	ldi	r25, 0x02	; 2
     6d4:	2f e5       	ldi	r18, 0x5F	; 95
     6d6:	33 e0       	ldi	r19, 0x03	; 3
     6d8:	fc 01       	movw	r30, r24
     6da:	70 97       	sbiw	r30, 0x10	; 16
     6dc:	91 83       	std	Z+1, r25	; 0x01
     6de:	80 83       	st	Z, r24
     6e0:	40 96       	adiw	r24, 0x10	; 16
     6e2:	82 17       	cp	r24, r18
     6e4:	93 07       	cpc	r25, r19
     6e6:	c1 f7       	brne	.-16     	; 0x6d8 <initialize+0x14>
     6e8:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <messages+0xe1>
     6ec:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <messages+0xe0>
     6f0:	ea eb       	ldi	r30, 0xBA	; 186
     6f2:	f1 e0       	ldi	r31, 0x01	; 1
     6f4:	87 ed       	ldi	r24, 0xD7	; 215
     6f6:	91 e0       	ldi	r25, 0x01	; 1
     6f8:	91 83       	std	Z+1, r25	; 0x01
     6fa:	80 83       	st	Z, r24
     6fc:	84 ef       	ldi	r24, 0xF4	; 244
     6fe:	91 e0       	ldi	r25, 0x01	; 1
     700:	96 8f       	std	Z+30, r25	; 0x1e
     702:	85 8f       	std	Z+29, r24	; 0x1d
     704:	a1 e1       	ldi	r26, 0x11	; 17
     706:	b2 e0       	ldi	r27, 0x02	; 2
     708:	b3 af       	std	Z+59, r27	; 0x3b
     70a:	a2 af       	std	Z+58, r26	; 0x3a
     70c:	1d 92       	st	X+, r1
     70e:	1c 92       	st	X, r1
     710:	fa 83       	std	Y+2, r31	; 0x02
     712:	e9 83       	std	Y+1, r30	; 0x01
     714:	eb eb       	ldi	r30, 0xBB	; 187
     716:	f3 e0       	ldi	r31, 0x03	; 3
     718:	fc 83       	std	Y+4, r31	; 0x04
     71a:	eb 83       	std	Y+3, r30	; 0x03
     71c:	89 81       	ldd	r24, Y+1	; 0x01
     71e:	9a 81       	ldd	r25, Y+2	; 0x02
     720:	06 96       	adiw	r24, 0x06	; 6
     722:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <setjmp>
     726:	8b 81       	ldd	r24, Y+3	; 0x03
     728:	9c 81       	ldd	r25, Y+4	; 0x04
     72a:	e9 81       	ldd	r30, Y+1	; 0x01
     72c:	fa 81       	ldd	r31, Y+2	; 0x02
     72e:	97 8b       	std	Z+23, r25	; 0x17
     730:	86 8b       	std	Z+22, r24	; 0x16
     732:	91 8f       	std	Z+25, r25	; 0x19
     734:	80 8f       	std	Z+24, r24	; 0x18
     736:	82 e0       	ldi	r24, 0x02	; 2
     738:	9f e0       	ldi	r25, 0x0F	; 15
     73a:	94 8f       	std	Z+28, r25	; 0x1c
     73c:	83 8f       	std	Z+27, r24	; 0x1b
     73e:	15 82       	std	Z+5, r1	; 0x05
     740:	14 82       	std	Z+4, r1	; 0x04
     742:	7d 96       	adiw	r30, 0x1d	; 29
     744:	fa 83       	std	Y+2, r31	; 0x02
     746:	e9 83       	std	Y+1, r30	; 0x01
     748:	eb 81       	ldd	r30, Y+3	; 0x03
     74a:	fc 81       	ldd	r31, Y+4	; 0x04
     74c:	e0 5a       	subi	r30, 0xA0	; 160
     74e:	ff 4f       	sbci	r31, 0xFF	; 255
     750:	fc 83       	std	Y+4, r31	; 0x04
     752:	eb 83       	std	Y+3, r30	; 0x03
     754:	89 81       	ldd	r24, Y+1	; 0x01
     756:	9a 81       	ldd	r25, Y+2	; 0x02
     758:	8e 52       	subi	r24, 0x2E	; 46
     75a:	92 40       	sbci	r25, 0x02	; 2
     75c:	f9 f6       	brne	.-66     	; 0x71c <initialize+0x58>
     75e:	e2 e5       	ldi	r30, 0x52	; 82
     760:	f2 e0       	ldi	r31, 0x02	; 2
     762:	11 82       	std	Z+1, r1	; 0x01
     764:	10 82       	st	Z, r1
     766:	15 82       	std	Z+5, r1	; 0x05
     768:	14 82       	std	Z+4, r1	; 0x04
     76a:	13 82       	std	Z+3, r1	; 0x03
     76c:	12 82       	std	Z+2, r1	; 0x02
     76e:	e1 e6       	ldi	r30, 0x61	; 97
     770:	f0 e0       	ldi	r31, 0x00	; 0
     772:	80 e8       	ldi	r24, 0x80	; 128
     774:	80 83       	st	Z, r24
     776:	10 82       	st	Z, r1
     778:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     77c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     780:	84 e0       	ldi	r24, 0x04	; 4
     782:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     786:	81 e0       	ldi	r24, 0x01	; 1
     788:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
     78c:	0f 90       	pop	r0
     78e:	0f 90       	pop	r0
     790:	0f 90       	pop	r0
     792:	0f 90       	pop	r0
     794:	df 91       	pop	r29
     796:	cf 91       	pop	r28
     798:	08 95       	ret

0000079a <dispatch>:
     79a:	cf 93       	push	r28
     79c:	df 93       	push	r29
     79e:	00 d0       	rcall	.+0      	; 0x7a0 <dispatch+0x6>
     7a0:	cd b7       	in	r28, 0x3d	; 61
     7a2:	de b7       	in	r29, 0x3e	; 62
     7a4:	9a 83       	std	Y+2, r25	; 0x02
     7a6:	89 83       	std	Y+1, r24	; 0x01
     7a8:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <current>
     7ac:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <current+0x1>
     7b0:	06 96       	adiw	r24, 0x06	; 6
     7b2:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <setjmp>
     7b6:	89 2b       	or	r24, r25
     7b8:	59 f4       	brne	.+22     	; 0x7d0 <dispatch+0x36>
     7ba:	89 81       	ldd	r24, Y+1	; 0x01
     7bc:	9a 81       	ldd	r25, Y+2	; 0x02
     7be:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <current+0x1>
     7c2:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <current>
     7c6:	61 e0       	ldi	r22, 0x01	; 1
     7c8:	70 e0       	ldi	r23, 0x00	; 0
     7ca:	06 96       	adiw	r24, 0x06	; 6
     7cc:	0e 94 0d 10 	call	0x201a	; 0x201a <longjmp>
     7d0:	0f 90       	pop	r0
     7d2:	0f 90       	pop	r0
     7d4:	df 91       	pop	r29
     7d6:	cf 91       	pop	r28
     7d8:	08 95       	ret

000007da <schedule>:
     7da:	0f 93       	push	r16
     7dc:	1f 93       	push	r17
     7de:	cf 93       	push	r28
     7e0:	df 93       	push	r29
     7e2:	e0 91 94 01 	lds	r30, 0x0194	; 0x800194 <msgQ>
     7e6:	f0 91 95 01 	lds	r31, 0x0195	; 0x800195 <msgQ+0x1>
     7ea:	30 97       	sbiw	r30, 0x00	; 0
     7ec:	61 f1       	breq	.+88     	; 0x846 <schedule+0x6c>
     7ee:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <threadPool>
     7f2:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <threadPool+0x1>
     7f6:	00 97       	sbiw	r24, 0x00	; 0
     7f8:	31 f1       	breq	.+76     	; 0x846 <schedule+0x6c>
     7fa:	c0 91 7e 01 	lds	r28, 0x017E	; 0x80017e <activeStack>
     7fe:	d0 91 7f 01 	lds	r29, 0x017F	; 0x80017f <activeStack+0x1>
     802:	aa 81       	ldd	r26, Y+2	; 0x02
     804:	bb 81       	ldd	r27, Y+3	; 0x03
     806:	10 97       	sbiw	r26, 0x00	; 0
     808:	79 f0       	breq	.+30     	; 0x828 <schedule+0x4e>
     80a:	46 81       	ldd	r20, Z+6	; 0x06
     80c:	57 81       	ldd	r21, Z+7	; 0x07
     80e:	60 85       	ldd	r22, Z+8	; 0x08
     810:	71 85       	ldd	r23, Z+9	; 0x09
     812:	16 96       	adiw	r26, 0x06	; 6
     814:	0d 91       	ld	r16, X+
     816:	1d 91       	ld	r17, X+
     818:	2d 91       	ld	r18, X+
     81a:	3c 91       	ld	r19, X
     81c:	19 97       	sbiw	r26, 0x09	; 9
     81e:	40 1b       	sub	r20, r16
     820:	51 0b       	sbc	r21, r17
     822:	62 0b       	sbc	r22, r18
     824:	73 0b       	sbc	r23, r19
     826:	7a f4       	brpl	.+30     	; 0x846 <schedule+0x6c>
     828:	fc 01       	movw	r30, r24
     82a:	20 81       	ld	r18, Z
     82c:	31 81       	ldd	r19, Z+1	; 0x01
     82e:	30 93 81 01 	sts	0x0181, r19	; 0x800181 <threadPool+0x1>
     832:	20 93 80 01 	sts	0x0180, r18	; 0x800180 <threadPool>
     836:	d1 83       	std	Z+1, r29	; 0x01
     838:	c0 83       	st	Z, r28
     83a:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <activeStack+0x1>
     83e:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <activeStack>
     842:	0e 94 cd 03 	call	0x79a	; 0x79a <dispatch>
     846:	df 91       	pop	r29
     848:	cf 91       	pop	r28
     84a:	1f 91       	pop	r17
     84c:	0f 91       	pop	r16
     84e:	08 95       	ret

00000850 <__vector_1>:
     850:	1f 92       	push	r1
     852:	0f 92       	push	r0
     854:	0f b6       	in	r0, 0x3f	; 63
     856:	0f 92       	push	r0
     858:	11 24       	eor	r1, r1
     85a:	2f 93       	push	r18
     85c:	3f 93       	push	r19
     85e:	4f 93       	push	r20
     860:	5f 93       	push	r21
     862:	6f 93       	push	r22
     864:	7f 93       	push	r23
     866:	8f 93       	push	r24
     868:	9f 93       	push	r25
     86a:	af 93       	push	r26
     86c:	bf 93       	push	r27
     86e:	ef 93       	push	r30
     870:	ff 93       	push	r31
     872:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     876:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     87a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     87e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     882:	c9 01       	movw	r24, r18
     884:	03 2e       	mov	r0, r19
     886:	00 0c       	add	r0, r0
     888:	aa 0b       	sbc	r26, r26
     88a:	bb 0b       	sbc	r27, r27
     88c:	dc 01       	movw	r26, r24
     88e:	99 27       	eor	r25, r25
     890:	88 27       	eor	r24, r24
     892:	60 e0       	ldi	r22, 0x00	; 0
     894:	70 e0       	ldi	r23, 0x00	; 0
     896:	84 2b       	or	r24, r20
     898:	95 2b       	or	r25, r21
     89a:	a6 2b       	or	r26, r22
     89c:	b7 2b       	or	r27, r23
     89e:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     8a2:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     8a6:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     8aa:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     8ae:	b0 9b       	sbis	0x16, 0	; 22
     8b0:	1b c0       	rjmp	.+54     	; 0x8e8 <__vector_1+0x98>
     8b2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     8b6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     8ba:	c9 01       	movw	r24, r18
     8bc:	01 96       	adiw	r24, 0x01	; 1
     8be:	09 2e       	mov	r0, r25
     8c0:	00 0c       	add	r0, r0
     8c2:	aa 0b       	sbc	r26, r26
     8c4:	bb 0b       	sbc	r27, r27
     8c6:	dc 01       	movw	r26, r24
     8c8:	99 27       	eor	r25, r25
     8ca:	88 27       	eor	r24, r24
     8cc:	60 e0       	ldi	r22, 0x00	; 0
     8ce:	70 e0       	ldi	r23, 0x00	; 0
     8d0:	84 2b       	or	r24, r20
     8d2:	95 2b       	or	r25, r21
     8d4:	a6 2b       	or	r26, r22
     8d6:	b7 2b       	or	r27, r23
     8d8:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     8dc:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     8e0:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     8e4:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     8e8:	e0 91 2e 02 	lds	r30, 0x022E	; 0x80022e <mtable>
     8ec:	f0 91 2f 02 	lds	r31, 0x022F	; 0x80022f <mtable+0x1>
     8f0:	30 97       	sbiw	r30, 0x00	; 0
     8f2:	39 f0       	breq	.+14     	; 0x902 <__vector_1+0xb2>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <otable>
     8fc:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <otable+0x1>
     900:	09 95       	icall
     902:	0e 94 ed 03 	call	0x7da	; 0x7da <schedule>
     906:	ff 91       	pop	r31
     908:	ef 91       	pop	r30
     90a:	bf 91       	pop	r27
     90c:	af 91       	pop	r26
     90e:	9f 91       	pop	r25
     910:	8f 91       	pop	r24
     912:	7f 91       	pop	r23
     914:	6f 91       	pop	r22
     916:	5f 91       	pop	r21
     918:	4f 91       	pop	r20
     91a:	3f 91       	pop	r19
     91c:	2f 91       	pop	r18
     91e:	0f 90       	pop	r0
     920:	0f be       	out	0x3f, r0	; 63
     922:	0f 90       	pop	r0
     924:	1f 90       	pop	r1
     926:	18 95       	reti

00000928 <__vector_2>:
     928:	1f 92       	push	r1
     92a:	0f 92       	push	r0
     92c:	0f b6       	in	r0, 0x3f	; 63
     92e:	0f 92       	push	r0
     930:	11 24       	eor	r1, r1
     932:	2f 93       	push	r18
     934:	3f 93       	push	r19
     936:	4f 93       	push	r20
     938:	5f 93       	push	r21
     93a:	6f 93       	push	r22
     93c:	7f 93       	push	r23
     93e:	8f 93       	push	r24
     940:	9f 93       	push	r25
     942:	af 93       	push	r26
     944:	bf 93       	push	r27
     946:	ef 93       	push	r30
     948:	ff 93       	push	r31
     94a:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     94e:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     952:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     956:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     95a:	c9 01       	movw	r24, r18
     95c:	03 2e       	mov	r0, r19
     95e:	00 0c       	add	r0, r0
     960:	aa 0b       	sbc	r26, r26
     962:	bb 0b       	sbc	r27, r27
     964:	dc 01       	movw	r26, r24
     966:	99 27       	eor	r25, r25
     968:	88 27       	eor	r24, r24
     96a:	60 e0       	ldi	r22, 0x00	; 0
     96c:	70 e0       	ldi	r23, 0x00	; 0
     96e:	84 2b       	or	r24, r20
     970:	95 2b       	or	r25, r21
     972:	a6 2b       	or	r26, r22
     974:	b7 2b       	or	r27, r23
     976:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     97a:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     97e:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     982:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     986:	b0 9b       	sbis	0x16, 0	; 22
     988:	1b c0       	rjmp	.+54     	; 0x9c0 <__vector_2+0x98>
     98a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     98e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     992:	c9 01       	movw	r24, r18
     994:	01 96       	adiw	r24, 0x01	; 1
     996:	09 2e       	mov	r0, r25
     998:	00 0c       	add	r0, r0
     99a:	aa 0b       	sbc	r26, r26
     99c:	bb 0b       	sbc	r27, r27
     99e:	dc 01       	movw	r26, r24
     9a0:	99 27       	eor	r25, r25
     9a2:	88 27       	eor	r24, r24
     9a4:	60 e0       	ldi	r22, 0x00	; 0
     9a6:	70 e0       	ldi	r23, 0x00	; 0
     9a8:	84 2b       	or	r24, r20
     9aa:	95 2b       	or	r25, r21
     9ac:	a6 2b       	or	r26, r22
     9ae:	b7 2b       	or	r27, r23
     9b0:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     9b4:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     9b8:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     9bc:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     9c0:	e0 91 30 02 	lds	r30, 0x0230	; 0x800230 <mtable+0x2>
     9c4:	f0 91 31 02 	lds	r31, 0x0231	; 0x800231 <mtable+0x3>
     9c8:	30 97       	sbiw	r30, 0x00	; 0
     9ca:	39 f0       	breq	.+14     	; 0x9da <__vector_2+0xb2>
     9cc:	61 e0       	ldi	r22, 0x01	; 1
     9ce:	70 e0       	ldi	r23, 0x00	; 0
     9d0:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <otable+0x2>
     9d4:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <otable+0x3>
     9d8:	09 95       	icall
     9da:	0e 94 ed 03 	call	0x7da	; 0x7da <schedule>
     9de:	ff 91       	pop	r31
     9e0:	ef 91       	pop	r30
     9e2:	bf 91       	pop	r27
     9e4:	af 91       	pop	r26
     9e6:	9f 91       	pop	r25
     9e8:	8f 91       	pop	r24
     9ea:	7f 91       	pop	r23
     9ec:	6f 91       	pop	r22
     9ee:	5f 91       	pop	r21
     9f0:	4f 91       	pop	r20
     9f2:	3f 91       	pop	r19
     9f4:	2f 91       	pop	r18
     9f6:	0f 90       	pop	r0
     9f8:	0f be       	out	0x3f, r0	; 63
     9fa:	0f 90       	pop	r0
     9fc:	1f 90       	pop	r1
     9fe:	18 95       	reti

00000a00 <__vector_3>:
     a00:	1f 92       	push	r1
     a02:	0f 92       	push	r0
     a04:	0f b6       	in	r0, 0x3f	; 63
     a06:	0f 92       	push	r0
     a08:	11 24       	eor	r1, r1
     a0a:	2f 93       	push	r18
     a0c:	3f 93       	push	r19
     a0e:	4f 93       	push	r20
     a10:	5f 93       	push	r21
     a12:	6f 93       	push	r22
     a14:	7f 93       	push	r23
     a16:	8f 93       	push	r24
     a18:	9f 93       	push	r25
     a1a:	af 93       	push	r26
     a1c:	bf 93       	push	r27
     a1e:	ef 93       	push	r30
     a20:	ff 93       	push	r31
     a22:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     a26:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     a2a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     a2e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     a32:	c9 01       	movw	r24, r18
     a34:	03 2e       	mov	r0, r19
     a36:	00 0c       	add	r0, r0
     a38:	aa 0b       	sbc	r26, r26
     a3a:	bb 0b       	sbc	r27, r27
     a3c:	dc 01       	movw	r26, r24
     a3e:	99 27       	eor	r25, r25
     a40:	88 27       	eor	r24, r24
     a42:	60 e0       	ldi	r22, 0x00	; 0
     a44:	70 e0       	ldi	r23, 0x00	; 0
     a46:	84 2b       	or	r24, r20
     a48:	95 2b       	or	r25, r21
     a4a:	a6 2b       	or	r26, r22
     a4c:	b7 2b       	or	r27, r23
     a4e:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     a52:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     a56:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     a5a:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     a5e:	b0 9b       	sbis	0x16, 0	; 22
     a60:	1b c0       	rjmp	.+54     	; 0xa98 <__vector_3+0x98>
     a62:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     a66:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     a6a:	c9 01       	movw	r24, r18
     a6c:	01 96       	adiw	r24, 0x01	; 1
     a6e:	09 2e       	mov	r0, r25
     a70:	00 0c       	add	r0, r0
     a72:	aa 0b       	sbc	r26, r26
     a74:	bb 0b       	sbc	r27, r27
     a76:	dc 01       	movw	r26, r24
     a78:	99 27       	eor	r25, r25
     a7a:	88 27       	eor	r24, r24
     a7c:	60 e0       	ldi	r22, 0x00	; 0
     a7e:	70 e0       	ldi	r23, 0x00	; 0
     a80:	84 2b       	or	r24, r20
     a82:	95 2b       	or	r25, r21
     a84:	a6 2b       	or	r26, r22
     a86:	b7 2b       	or	r27, r23
     a88:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     a8c:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     a90:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     a94:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     a98:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <mtable+0x4>
     a9c:	f0 91 33 02 	lds	r31, 0x0233	; 0x800233 <mtable+0x5>
     aa0:	30 97       	sbiw	r30, 0x00	; 0
     aa2:	39 f0       	breq	.+14     	; 0xab2 <__vector_3+0xb2>
     aa4:	62 e0       	ldi	r22, 0x02	; 2
     aa6:	70 e0       	ldi	r23, 0x00	; 0
     aa8:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <otable+0x4>
     aac:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <otable+0x5>
     ab0:	09 95       	icall
     ab2:	0e 94 ed 03 	call	0x7da	; 0x7da <schedule>
     ab6:	ff 91       	pop	r31
     ab8:	ef 91       	pop	r30
     aba:	bf 91       	pop	r27
     abc:	af 91       	pop	r26
     abe:	9f 91       	pop	r25
     ac0:	8f 91       	pop	r24
     ac2:	7f 91       	pop	r23
     ac4:	6f 91       	pop	r22
     ac6:	5f 91       	pop	r21
     ac8:	4f 91       	pop	r20
     aca:	3f 91       	pop	r19
     acc:	2f 91       	pop	r18
     ace:	0f 90       	pop	r0
     ad0:	0f be       	out	0x3f, r0	; 63
     ad2:	0f 90       	pop	r0
     ad4:	1f 90       	pop	r1
     ad6:	18 95       	reti

00000ad8 <__vector_4>:
     ad8:	1f 92       	push	r1
     ada:	0f 92       	push	r0
     adc:	0f b6       	in	r0, 0x3f	; 63
     ade:	0f 92       	push	r0
     ae0:	11 24       	eor	r1, r1
     ae2:	2f 93       	push	r18
     ae4:	3f 93       	push	r19
     ae6:	4f 93       	push	r20
     ae8:	5f 93       	push	r21
     aea:	6f 93       	push	r22
     aec:	7f 93       	push	r23
     aee:	8f 93       	push	r24
     af0:	9f 93       	push	r25
     af2:	af 93       	push	r26
     af4:	bf 93       	push	r27
     af6:	ef 93       	push	r30
     af8:	ff 93       	push	r31
     afa:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     afe:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     b02:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     b06:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     b0a:	c9 01       	movw	r24, r18
     b0c:	03 2e       	mov	r0, r19
     b0e:	00 0c       	add	r0, r0
     b10:	aa 0b       	sbc	r26, r26
     b12:	bb 0b       	sbc	r27, r27
     b14:	dc 01       	movw	r26, r24
     b16:	99 27       	eor	r25, r25
     b18:	88 27       	eor	r24, r24
     b1a:	60 e0       	ldi	r22, 0x00	; 0
     b1c:	70 e0       	ldi	r23, 0x00	; 0
     b1e:	84 2b       	or	r24, r20
     b20:	95 2b       	or	r25, r21
     b22:	a6 2b       	or	r26, r22
     b24:	b7 2b       	or	r27, r23
     b26:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     b2a:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     b2e:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     b32:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     b36:	b0 9b       	sbis	0x16, 0	; 22
     b38:	1b c0       	rjmp	.+54     	; 0xb70 <__vector_4+0x98>
     b3a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     b3e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     b42:	c9 01       	movw	r24, r18
     b44:	01 96       	adiw	r24, 0x01	; 1
     b46:	09 2e       	mov	r0, r25
     b48:	00 0c       	add	r0, r0
     b4a:	aa 0b       	sbc	r26, r26
     b4c:	bb 0b       	sbc	r27, r27
     b4e:	dc 01       	movw	r26, r24
     b50:	99 27       	eor	r25, r25
     b52:	88 27       	eor	r24, r24
     b54:	60 e0       	ldi	r22, 0x00	; 0
     b56:	70 e0       	ldi	r23, 0x00	; 0
     b58:	84 2b       	or	r24, r20
     b5a:	95 2b       	or	r25, r21
     b5c:	a6 2b       	or	r26, r22
     b5e:	b7 2b       	or	r27, r23
     b60:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     b64:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     b68:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     b6c:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     b70:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <mtable+0x6>
     b74:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <mtable+0x7>
     b78:	30 97       	sbiw	r30, 0x00	; 0
     b7a:	39 f0       	breq	.+14     	; 0xb8a <__vector_4+0xb2>
     b7c:	63 e0       	ldi	r22, 0x03	; 3
     b7e:	70 e0       	ldi	r23, 0x00	; 0
     b80:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <otable+0x6>
     b84:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <otable+0x7>
     b88:	09 95       	icall
     b8a:	0e 94 ed 03 	call	0x7da	; 0x7da <schedule>
     b8e:	ff 91       	pop	r31
     b90:	ef 91       	pop	r30
     b92:	bf 91       	pop	r27
     b94:	af 91       	pop	r26
     b96:	9f 91       	pop	r25
     b98:	8f 91       	pop	r24
     b9a:	7f 91       	pop	r23
     b9c:	6f 91       	pop	r22
     b9e:	5f 91       	pop	r21
     ba0:	4f 91       	pop	r20
     ba2:	3f 91       	pop	r19
     ba4:	2f 91       	pop	r18
     ba6:	0f 90       	pop	r0
     ba8:	0f be       	out	0x3f, r0	; 63
     baa:	0f 90       	pop	r0
     bac:	1f 90       	pop	r1
     bae:	18 95       	reti

00000bb0 <__vector_5>:
     bb0:	1f 92       	push	r1
     bb2:	0f 92       	push	r0
     bb4:	0f b6       	in	r0, 0x3f	; 63
     bb6:	0f 92       	push	r0
     bb8:	11 24       	eor	r1, r1
     bba:	2f 93       	push	r18
     bbc:	3f 93       	push	r19
     bbe:	4f 93       	push	r20
     bc0:	5f 93       	push	r21
     bc2:	6f 93       	push	r22
     bc4:	7f 93       	push	r23
     bc6:	8f 93       	push	r24
     bc8:	9f 93       	push	r25
     bca:	af 93       	push	r26
     bcc:	bf 93       	push	r27
     bce:	ef 93       	push	r30
     bd0:	ff 93       	push	r31
     bd2:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     bd6:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     bda:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     bde:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     be2:	c9 01       	movw	r24, r18
     be4:	03 2e       	mov	r0, r19
     be6:	00 0c       	add	r0, r0
     be8:	aa 0b       	sbc	r26, r26
     bea:	bb 0b       	sbc	r27, r27
     bec:	dc 01       	movw	r26, r24
     bee:	99 27       	eor	r25, r25
     bf0:	88 27       	eor	r24, r24
     bf2:	60 e0       	ldi	r22, 0x00	; 0
     bf4:	70 e0       	ldi	r23, 0x00	; 0
     bf6:	84 2b       	or	r24, r20
     bf8:	95 2b       	or	r25, r21
     bfa:	a6 2b       	or	r26, r22
     bfc:	b7 2b       	or	r27, r23
     bfe:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     c02:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     c06:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     c0a:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     c0e:	b0 9b       	sbis	0x16, 0	; 22
     c10:	1b c0       	rjmp	.+54     	; 0xc48 <__vector_5+0x98>
     c12:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     c16:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     c1a:	c9 01       	movw	r24, r18
     c1c:	01 96       	adiw	r24, 0x01	; 1
     c1e:	09 2e       	mov	r0, r25
     c20:	00 0c       	add	r0, r0
     c22:	aa 0b       	sbc	r26, r26
     c24:	bb 0b       	sbc	r27, r27
     c26:	dc 01       	movw	r26, r24
     c28:	99 27       	eor	r25, r25
     c2a:	88 27       	eor	r24, r24
     c2c:	60 e0       	ldi	r22, 0x00	; 0
     c2e:	70 e0       	ldi	r23, 0x00	; 0
     c30:	84 2b       	or	r24, r20
     c32:	95 2b       	or	r25, r21
     c34:	a6 2b       	or	r26, r22
     c36:	b7 2b       	or	r27, r23
     c38:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     c3c:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     c40:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     c44:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     c48:	e0 91 36 02 	lds	r30, 0x0236	; 0x800236 <mtable+0x8>
     c4c:	f0 91 37 02 	lds	r31, 0x0237	; 0x800237 <mtable+0x9>
     c50:	30 97       	sbiw	r30, 0x00	; 0
     c52:	39 f0       	breq	.+14     	; 0xc62 <__vector_5+0xb2>
     c54:	64 e0       	ldi	r22, 0x04	; 4
     c56:	70 e0       	ldi	r23, 0x00	; 0
     c58:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <otable+0x8>
     c5c:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <otable+0x9>
     c60:	09 95       	icall
     c62:	0e 94 ed 03 	call	0x7da	; 0x7da <schedule>
     c66:	ff 91       	pop	r31
     c68:	ef 91       	pop	r30
     c6a:	bf 91       	pop	r27
     c6c:	af 91       	pop	r26
     c6e:	9f 91       	pop	r25
     c70:	8f 91       	pop	r24
     c72:	7f 91       	pop	r23
     c74:	6f 91       	pop	r22
     c76:	5f 91       	pop	r21
     c78:	4f 91       	pop	r20
     c7a:	3f 91       	pop	r19
     c7c:	2f 91       	pop	r18
     c7e:	0f 90       	pop	r0
     c80:	0f be       	out	0x3f, r0	; 63
     c82:	0f 90       	pop	r0
     c84:	1f 90       	pop	r1
     c86:	18 95       	reti

00000c88 <__vector_10>:
     c88:	1f 92       	push	r1
     c8a:	0f 92       	push	r0
     c8c:	0f b6       	in	r0, 0x3f	; 63
     c8e:	0f 92       	push	r0
     c90:	11 24       	eor	r1, r1
     c92:	2f 93       	push	r18
     c94:	3f 93       	push	r19
     c96:	4f 93       	push	r20
     c98:	5f 93       	push	r21
     c9a:	6f 93       	push	r22
     c9c:	7f 93       	push	r23
     c9e:	8f 93       	push	r24
     ca0:	9f 93       	push	r25
     ca2:	af 93       	push	r26
     ca4:	bf 93       	push	r27
     ca6:	ef 93       	push	r30
     ca8:	ff 93       	push	r31
     caa:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     cae:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     cb2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     cb6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     cba:	c9 01       	movw	r24, r18
     cbc:	03 2e       	mov	r0, r19
     cbe:	00 0c       	add	r0, r0
     cc0:	aa 0b       	sbc	r26, r26
     cc2:	bb 0b       	sbc	r27, r27
     cc4:	dc 01       	movw	r26, r24
     cc6:	99 27       	eor	r25, r25
     cc8:	88 27       	eor	r24, r24
     cca:	60 e0       	ldi	r22, 0x00	; 0
     ccc:	70 e0       	ldi	r23, 0x00	; 0
     cce:	84 2b       	or	r24, r20
     cd0:	95 2b       	or	r25, r21
     cd2:	a6 2b       	or	r26, r22
     cd4:	b7 2b       	or	r27, r23
     cd6:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     cda:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     cde:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     ce2:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     ce6:	b0 9b       	sbis	0x16, 0	; 22
     ce8:	1b c0       	rjmp	.+54     	; 0xd20 <__vector_10+0x98>
     cea:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     cee:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     cf2:	c9 01       	movw	r24, r18
     cf4:	01 96       	adiw	r24, 0x01	; 1
     cf6:	09 2e       	mov	r0, r25
     cf8:	00 0c       	add	r0, r0
     cfa:	aa 0b       	sbc	r26, r26
     cfc:	bb 0b       	sbc	r27, r27
     cfe:	dc 01       	movw	r26, r24
     d00:	99 27       	eor	r25, r25
     d02:	88 27       	eor	r24, r24
     d04:	60 e0       	ldi	r22, 0x00	; 0
     d06:	70 e0       	ldi	r23, 0x00	; 0
     d08:	84 2b       	or	r24, r20
     d0a:	95 2b       	or	r25, r21
     d0c:	a6 2b       	or	r26, r22
     d0e:	b7 2b       	or	r27, r23
     d10:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     d14:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     d18:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     d1c:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     d20:	e0 91 38 02 	lds	r30, 0x0238	; 0x800238 <mtable+0xa>
     d24:	f0 91 39 02 	lds	r31, 0x0239	; 0x800239 <mtable+0xb>
     d28:	30 97       	sbiw	r30, 0x00	; 0
     d2a:	39 f0       	breq	.+14     	; 0xd3a <__vector_10+0xb2>
     d2c:	65 e0       	ldi	r22, 0x05	; 5
     d2e:	70 e0       	ldi	r23, 0x00	; 0
     d30:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <otable+0xa>
     d34:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <otable+0xb>
     d38:	09 95       	icall
     d3a:	0e 94 ed 03 	call	0x7da	; 0x7da <schedule>
     d3e:	ff 91       	pop	r31
     d40:	ef 91       	pop	r30
     d42:	bf 91       	pop	r27
     d44:	af 91       	pop	r26
     d46:	9f 91       	pop	r25
     d48:	8f 91       	pop	r24
     d4a:	7f 91       	pop	r23
     d4c:	6f 91       	pop	r22
     d4e:	5f 91       	pop	r21
     d50:	4f 91       	pop	r20
     d52:	3f 91       	pop	r19
     d54:	2f 91       	pop	r18
     d56:	0f 90       	pop	r0
     d58:	0f be       	out	0x3f, r0	; 63
     d5a:	0f 90       	pop	r0
     d5c:	1f 90       	pop	r1
     d5e:	18 95       	reti

00000d60 <__vector_11>:
     d60:	1f 92       	push	r1
     d62:	0f 92       	push	r0
     d64:	0f b6       	in	r0, 0x3f	; 63
     d66:	0f 92       	push	r0
     d68:	11 24       	eor	r1, r1
     d6a:	2f 93       	push	r18
     d6c:	3f 93       	push	r19
     d6e:	4f 93       	push	r20
     d70:	5f 93       	push	r21
     d72:	6f 93       	push	r22
     d74:	7f 93       	push	r23
     d76:	8f 93       	push	r24
     d78:	9f 93       	push	r25
     d7a:	af 93       	push	r26
     d7c:	bf 93       	push	r27
     d7e:	ef 93       	push	r30
     d80:	ff 93       	push	r31
     d82:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     d86:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     d8a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     d8e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     d92:	c9 01       	movw	r24, r18
     d94:	03 2e       	mov	r0, r19
     d96:	00 0c       	add	r0, r0
     d98:	aa 0b       	sbc	r26, r26
     d9a:	bb 0b       	sbc	r27, r27
     d9c:	dc 01       	movw	r26, r24
     d9e:	99 27       	eor	r25, r25
     da0:	88 27       	eor	r24, r24
     da2:	60 e0       	ldi	r22, 0x00	; 0
     da4:	70 e0       	ldi	r23, 0x00	; 0
     da6:	84 2b       	or	r24, r20
     da8:	95 2b       	or	r25, r21
     daa:	a6 2b       	or	r26, r22
     dac:	b7 2b       	or	r27, r23
     dae:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     db2:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     db6:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     dba:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     dbe:	b0 9b       	sbis	0x16, 0	; 22
     dc0:	1b c0       	rjmp	.+54     	; 0xdf8 <__vector_11+0x98>
     dc2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     dc6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     dca:	c9 01       	movw	r24, r18
     dcc:	01 96       	adiw	r24, 0x01	; 1
     dce:	09 2e       	mov	r0, r25
     dd0:	00 0c       	add	r0, r0
     dd2:	aa 0b       	sbc	r26, r26
     dd4:	bb 0b       	sbc	r27, r27
     dd6:	dc 01       	movw	r26, r24
     dd8:	99 27       	eor	r25, r25
     dda:	88 27       	eor	r24, r24
     ddc:	60 e0       	ldi	r22, 0x00	; 0
     dde:	70 e0       	ldi	r23, 0x00	; 0
     de0:	84 2b       	or	r24, r20
     de2:	95 2b       	or	r25, r21
     de4:	a6 2b       	or	r26, r22
     de6:	b7 2b       	or	r27, r23
     de8:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     dec:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     df0:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     df4:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     df8:	e0 91 3a 02 	lds	r30, 0x023A	; 0x80023a <mtable+0xc>
     dfc:	f0 91 3b 02 	lds	r31, 0x023B	; 0x80023b <mtable+0xd>
     e00:	30 97       	sbiw	r30, 0x00	; 0
     e02:	39 f0       	breq	.+14     	; 0xe12 <__vector_11+0xb2>
     e04:	66 e0       	ldi	r22, 0x06	; 6
     e06:	70 e0       	ldi	r23, 0x00	; 0
     e08:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <otable+0xc>
     e0c:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <otable+0xd>
     e10:	09 95       	icall
     e12:	0e 94 ed 03 	call	0x7da	; 0x7da <schedule>
     e16:	ff 91       	pop	r31
     e18:	ef 91       	pop	r30
     e1a:	bf 91       	pop	r27
     e1c:	af 91       	pop	r26
     e1e:	9f 91       	pop	r25
     e20:	8f 91       	pop	r24
     e22:	7f 91       	pop	r23
     e24:	6f 91       	pop	r22
     e26:	5f 91       	pop	r21
     e28:	4f 91       	pop	r20
     e2a:	3f 91       	pop	r19
     e2c:	2f 91       	pop	r18
     e2e:	0f 90       	pop	r0
     e30:	0f be       	out	0x3f, r0	; 63
     e32:	0f 90       	pop	r0
     e34:	1f 90       	pop	r1
     e36:	18 95       	reti

00000e38 <__vector_12>:
     e38:	1f 92       	push	r1
     e3a:	0f 92       	push	r0
     e3c:	0f b6       	in	r0, 0x3f	; 63
     e3e:	0f 92       	push	r0
     e40:	11 24       	eor	r1, r1
     e42:	2f 93       	push	r18
     e44:	3f 93       	push	r19
     e46:	4f 93       	push	r20
     e48:	5f 93       	push	r21
     e4a:	6f 93       	push	r22
     e4c:	7f 93       	push	r23
     e4e:	8f 93       	push	r24
     e50:	9f 93       	push	r25
     e52:	af 93       	push	r26
     e54:	bf 93       	push	r27
     e56:	ef 93       	push	r30
     e58:	ff 93       	push	r31
     e5a:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     e5e:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     e62:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     e66:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     e6a:	c9 01       	movw	r24, r18
     e6c:	03 2e       	mov	r0, r19
     e6e:	00 0c       	add	r0, r0
     e70:	aa 0b       	sbc	r26, r26
     e72:	bb 0b       	sbc	r27, r27
     e74:	dc 01       	movw	r26, r24
     e76:	99 27       	eor	r25, r25
     e78:	88 27       	eor	r24, r24
     e7a:	60 e0       	ldi	r22, 0x00	; 0
     e7c:	70 e0       	ldi	r23, 0x00	; 0
     e7e:	84 2b       	or	r24, r20
     e80:	95 2b       	or	r25, r21
     e82:	a6 2b       	or	r26, r22
     e84:	b7 2b       	or	r27, r23
     e86:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     e8a:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     e8e:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     e92:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     e96:	b0 9b       	sbis	0x16, 0	; 22
     e98:	1b c0       	rjmp	.+54     	; 0xed0 <__vector_12+0x98>
     e9a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     e9e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     ea2:	c9 01       	movw	r24, r18
     ea4:	01 96       	adiw	r24, 0x01	; 1
     ea6:	09 2e       	mov	r0, r25
     ea8:	00 0c       	add	r0, r0
     eaa:	aa 0b       	sbc	r26, r26
     eac:	bb 0b       	sbc	r27, r27
     eae:	dc 01       	movw	r26, r24
     eb0:	99 27       	eor	r25, r25
     eb2:	88 27       	eor	r24, r24
     eb4:	60 e0       	ldi	r22, 0x00	; 0
     eb6:	70 e0       	ldi	r23, 0x00	; 0
     eb8:	84 2b       	or	r24, r20
     eba:	95 2b       	or	r25, r21
     ebc:	a6 2b       	or	r26, r22
     ebe:	b7 2b       	or	r27, r23
     ec0:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     ec4:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     ec8:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     ecc:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     ed0:	e0 91 3c 02 	lds	r30, 0x023C	; 0x80023c <mtable+0xe>
     ed4:	f0 91 3d 02 	lds	r31, 0x023D	; 0x80023d <mtable+0xf>
     ed8:	30 97       	sbiw	r30, 0x00	; 0
     eda:	39 f0       	breq	.+14     	; 0xeea <__vector_12+0xb2>
     edc:	67 e0       	ldi	r22, 0x07	; 7
     ede:	70 e0       	ldi	r23, 0x00	; 0
     ee0:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <otable+0xe>
     ee4:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <otable+0xf>
     ee8:	09 95       	icall
     eea:	0e 94 ed 03 	call	0x7da	; 0x7da <schedule>
     eee:	ff 91       	pop	r31
     ef0:	ef 91       	pop	r30
     ef2:	bf 91       	pop	r27
     ef4:	af 91       	pop	r26
     ef6:	9f 91       	pop	r25
     ef8:	8f 91       	pop	r24
     efa:	7f 91       	pop	r23
     efc:	6f 91       	pop	r22
     efe:	5f 91       	pop	r21
     f00:	4f 91       	pop	r20
     f02:	3f 91       	pop	r19
     f04:	2f 91       	pop	r18
     f06:	0f 90       	pop	r0
     f08:	0f be       	out	0x3f, r0	; 63
     f0a:	0f 90       	pop	r0
     f0c:	1f 90       	pop	r1
     f0e:	18 95       	reti

00000f10 <__vector_13>:
     f10:	1f 92       	push	r1
     f12:	0f 92       	push	r0
     f14:	0f b6       	in	r0, 0x3f	; 63
     f16:	0f 92       	push	r0
     f18:	11 24       	eor	r1, r1
     f1a:	2f 93       	push	r18
     f1c:	3f 93       	push	r19
     f1e:	4f 93       	push	r20
     f20:	5f 93       	push	r21
     f22:	6f 93       	push	r22
     f24:	7f 93       	push	r23
     f26:	8f 93       	push	r24
     f28:	9f 93       	push	r25
     f2a:	af 93       	push	r26
     f2c:	bf 93       	push	r27
     f2e:	ef 93       	push	r30
     f30:	ff 93       	push	r31
     f32:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     f36:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     f3a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     f3e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     f42:	c9 01       	movw	r24, r18
     f44:	03 2e       	mov	r0, r19
     f46:	00 0c       	add	r0, r0
     f48:	aa 0b       	sbc	r26, r26
     f4a:	bb 0b       	sbc	r27, r27
     f4c:	dc 01       	movw	r26, r24
     f4e:	99 27       	eor	r25, r25
     f50:	88 27       	eor	r24, r24
     f52:	60 e0       	ldi	r22, 0x00	; 0
     f54:	70 e0       	ldi	r23, 0x00	; 0
     f56:	84 2b       	or	r24, r20
     f58:	95 2b       	or	r25, r21
     f5a:	a6 2b       	or	r26, r22
     f5c:	b7 2b       	or	r27, r23
     f5e:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     f62:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     f66:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     f6a:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     f6e:	b0 9b       	sbis	0x16, 0	; 22
     f70:	1b c0       	rjmp	.+54     	; 0xfa8 <__vector_13+0x98>
     f72:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     f76:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     f7a:	c9 01       	movw	r24, r18
     f7c:	01 96       	adiw	r24, 0x01	; 1
     f7e:	09 2e       	mov	r0, r25
     f80:	00 0c       	add	r0, r0
     f82:	aa 0b       	sbc	r26, r26
     f84:	bb 0b       	sbc	r27, r27
     f86:	dc 01       	movw	r26, r24
     f88:	99 27       	eor	r25, r25
     f8a:	88 27       	eor	r24, r24
     f8c:	60 e0       	ldi	r22, 0x00	; 0
     f8e:	70 e0       	ldi	r23, 0x00	; 0
     f90:	84 2b       	or	r24, r20
     f92:	95 2b       	or	r25, r21
     f94:	a6 2b       	or	r26, r22
     f96:	b7 2b       	or	r27, r23
     f98:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     f9c:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     fa0:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     fa4:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     fa8:	e0 91 3e 02 	lds	r30, 0x023E	; 0x80023e <mtable+0x10>
     fac:	f0 91 3f 02 	lds	r31, 0x023F	; 0x80023f <mtable+0x11>
     fb0:	30 97       	sbiw	r30, 0x00	; 0
     fb2:	39 f0       	breq	.+14     	; 0xfc2 <__vector_13+0xb2>
     fb4:	68 e0       	ldi	r22, 0x08	; 8
     fb6:	70 e0       	ldi	r23, 0x00	; 0
     fb8:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <otable+0x10>
     fbc:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <otable+0x11>
     fc0:	09 95       	icall
     fc2:	0e 94 ed 03 	call	0x7da	; 0x7da <schedule>
     fc6:	ff 91       	pop	r31
     fc8:	ef 91       	pop	r30
     fca:	bf 91       	pop	r27
     fcc:	af 91       	pop	r26
     fce:	9f 91       	pop	r25
     fd0:	8f 91       	pop	r24
     fd2:	7f 91       	pop	r23
     fd4:	6f 91       	pop	r22
     fd6:	5f 91       	pop	r21
     fd8:	4f 91       	pop	r20
     fda:	3f 91       	pop	r19
     fdc:	2f 91       	pop	r18
     fde:	0f 90       	pop	r0
     fe0:	0f be       	out	0x3f, r0	; 63
     fe2:	0f 90       	pop	r0
     fe4:	1f 90       	pop	r1
     fe6:	18 95       	reti

00000fe8 <__vector_14>:
     fe8:	1f 92       	push	r1
     fea:	0f 92       	push	r0
     fec:	0f b6       	in	r0, 0x3f	; 63
     fee:	0f 92       	push	r0
     ff0:	11 24       	eor	r1, r1
     ff2:	2f 93       	push	r18
     ff4:	3f 93       	push	r19
     ff6:	4f 93       	push	r20
     ff8:	5f 93       	push	r21
     ffa:	6f 93       	push	r22
     ffc:	7f 93       	push	r23
     ffe:	8f 93       	push	r24
    1000:	9f 93       	push	r25
    1002:	af 93       	push	r26
    1004:	bf 93       	push	r27
    1006:	ef 93       	push	r30
    1008:	ff 93       	push	r31
    100a:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    100e:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    1012:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1016:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    101a:	c9 01       	movw	r24, r18
    101c:	03 2e       	mov	r0, r19
    101e:	00 0c       	add	r0, r0
    1020:	aa 0b       	sbc	r26, r26
    1022:	bb 0b       	sbc	r27, r27
    1024:	dc 01       	movw	r26, r24
    1026:	99 27       	eor	r25, r25
    1028:	88 27       	eor	r24, r24
    102a:	60 e0       	ldi	r22, 0x00	; 0
    102c:	70 e0       	ldi	r23, 0x00	; 0
    102e:	84 2b       	or	r24, r20
    1030:	95 2b       	or	r25, r21
    1032:	a6 2b       	or	r26, r22
    1034:	b7 2b       	or	r27, r23
    1036:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    103a:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    103e:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    1042:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    1046:	b0 9b       	sbis	0x16, 0	; 22
    1048:	1b c0       	rjmp	.+54     	; 0x1080 <__vector_14+0x98>
    104a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    104e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1052:	c9 01       	movw	r24, r18
    1054:	01 96       	adiw	r24, 0x01	; 1
    1056:	09 2e       	mov	r0, r25
    1058:	00 0c       	add	r0, r0
    105a:	aa 0b       	sbc	r26, r26
    105c:	bb 0b       	sbc	r27, r27
    105e:	dc 01       	movw	r26, r24
    1060:	99 27       	eor	r25, r25
    1062:	88 27       	eor	r24, r24
    1064:	60 e0       	ldi	r22, 0x00	; 0
    1066:	70 e0       	ldi	r23, 0x00	; 0
    1068:	84 2b       	or	r24, r20
    106a:	95 2b       	or	r25, r21
    106c:	a6 2b       	or	r26, r22
    106e:	b7 2b       	or	r27, r23
    1070:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    1074:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    1078:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    107c:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    1080:	e0 91 40 02 	lds	r30, 0x0240	; 0x800240 <mtable+0x12>
    1084:	f0 91 41 02 	lds	r31, 0x0241	; 0x800241 <mtable+0x13>
    1088:	30 97       	sbiw	r30, 0x00	; 0
    108a:	39 f0       	breq	.+14     	; 0x109a <__vector_14+0xb2>
    108c:	69 e0       	ldi	r22, 0x09	; 9
    108e:	70 e0       	ldi	r23, 0x00	; 0
    1090:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <otable+0x12>
    1094:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <otable+0x13>
    1098:	09 95       	icall
    109a:	0e 94 ed 03 	call	0x7da	; 0x7da <schedule>
    109e:	ff 91       	pop	r31
    10a0:	ef 91       	pop	r30
    10a2:	bf 91       	pop	r27
    10a4:	af 91       	pop	r26
    10a6:	9f 91       	pop	r25
    10a8:	8f 91       	pop	r24
    10aa:	7f 91       	pop	r23
    10ac:	6f 91       	pop	r22
    10ae:	5f 91       	pop	r21
    10b0:	4f 91       	pop	r20
    10b2:	3f 91       	pop	r19
    10b4:	2f 91       	pop	r18
    10b6:	0f 90       	pop	r0
    10b8:	0f be       	out	0x3f, r0	; 63
    10ba:	0f 90       	pop	r0
    10bc:	1f 90       	pop	r1
    10be:	18 95       	reti

000010c0 <__vector_15>:
    10c0:	1f 92       	push	r1
    10c2:	0f 92       	push	r0
    10c4:	0f b6       	in	r0, 0x3f	; 63
    10c6:	0f 92       	push	r0
    10c8:	11 24       	eor	r1, r1
    10ca:	2f 93       	push	r18
    10cc:	3f 93       	push	r19
    10ce:	4f 93       	push	r20
    10d0:	5f 93       	push	r21
    10d2:	6f 93       	push	r22
    10d4:	7f 93       	push	r23
    10d6:	8f 93       	push	r24
    10d8:	9f 93       	push	r25
    10da:	af 93       	push	r26
    10dc:	bf 93       	push	r27
    10de:	ef 93       	push	r30
    10e0:	ff 93       	push	r31
    10e2:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    10e6:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    10ea:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    10ee:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    10f2:	c9 01       	movw	r24, r18
    10f4:	03 2e       	mov	r0, r19
    10f6:	00 0c       	add	r0, r0
    10f8:	aa 0b       	sbc	r26, r26
    10fa:	bb 0b       	sbc	r27, r27
    10fc:	dc 01       	movw	r26, r24
    10fe:	99 27       	eor	r25, r25
    1100:	88 27       	eor	r24, r24
    1102:	60 e0       	ldi	r22, 0x00	; 0
    1104:	70 e0       	ldi	r23, 0x00	; 0
    1106:	84 2b       	or	r24, r20
    1108:	95 2b       	or	r25, r21
    110a:	a6 2b       	or	r26, r22
    110c:	b7 2b       	or	r27, r23
    110e:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    1112:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    1116:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    111a:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    111e:	b0 9b       	sbis	0x16, 0	; 22
    1120:	1b c0       	rjmp	.+54     	; 0x1158 <__vector_15+0x98>
    1122:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1126:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    112a:	c9 01       	movw	r24, r18
    112c:	01 96       	adiw	r24, 0x01	; 1
    112e:	09 2e       	mov	r0, r25
    1130:	00 0c       	add	r0, r0
    1132:	aa 0b       	sbc	r26, r26
    1134:	bb 0b       	sbc	r27, r27
    1136:	dc 01       	movw	r26, r24
    1138:	99 27       	eor	r25, r25
    113a:	88 27       	eor	r24, r24
    113c:	60 e0       	ldi	r22, 0x00	; 0
    113e:	70 e0       	ldi	r23, 0x00	; 0
    1140:	84 2b       	or	r24, r20
    1142:	95 2b       	or	r25, r21
    1144:	a6 2b       	or	r26, r22
    1146:	b7 2b       	or	r27, r23
    1148:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    114c:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    1150:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    1154:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    1158:	e0 91 42 02 	lds	r30, 0x0242	; 0x800242 <mtable+0x14>
    115c:	f0 91 43 02 	lds	r31, 0x0243	; 0x800243 <mtable+0x15>
    1160:	30 97       	sbiw	r30, 0x00	; 0
    1162:	39 f0       	breq	.+14     	; 0x1172 <__vector_15+0xb2>
    1164:	6a e0       	ldi	r22, 0x0A	; 10
    1166:	70 e0       	ldi	r23, 0x00	; 0
    1168:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <otable+0x14>
    116c:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <otable+0x15>
    1170:	09 95       	icall
    1172:	0e 94 ed 03 	call	0x7da	; 0x7da <schedule>
    1176:	ff 91       	pop	r31
    1178:	ef 91       	pop	r30
    117a:	bf 91       	pop	r27
    117c:	af 91       	pop	r26
    117e:	9f 91       	pop	r25
    1180:	8f 91       	pop	r24
    1182:	7f 91       	pop	r23
    1184:	6f 91       	pop	r22
    1186:	5f 91       	pop	r21
    1188:	4f 91       	pop	r20
    118a:	3f 91       	pop	r19
    118c:	2f 91       	pop	r18
    118e:	0f 90       	pop	r0
    1190:	0f be       	out	0x3f, r0	; 63
    1192:	0f 90       	pop	r0
    1194:	1f 90       	pop	r1
    1196:	18 95       	reti

00001198 <__vector_16>:
    1198:	1f 92       	push	r1
    119a:	0f 92       	push	r0
    119c:	0f b6       	in	r0, 0x3f	; 63
    119e:	0f 92       	push	r0
    11a0:	11 24       	eor	r1, r1
    11a2:	2f 93       	push	r18
    11a4:	3f 93       	push	r19
    11a6:	4f 93       	push	r20
    11a8:	5f 93       	push	r21
    11aa:	6f 93       	push	r22
    11ac:	7f 93       	push	r23
    11ae:	8f 93       	push	r24
    11b0:	9f 93       	push	r25
    11b2:	af 93       	push	r26
    11b4:	bf 93       	push	r27
    11b6:	ef 93       	push	r30
    11b8:	ff 93       	push	r31
    11ba:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    11be:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    11c2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    11c6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    11ca:	c9 01       	movw	r24, r18
    11cc:	03 2e       	mov	r0, r19
    11ce:	00 0c       	add	r0, r0
    11d0:	aa 0b       	sbc	r26, r26
    11d2:	bb 0b       	sbc	r27, r27
    11d4:	dc 01       	movw	r26, r24
    11d6:	99 27       	eor	r25, r25
    11d8:	88 27       	eor	r24, r24
    11da:	60 e0       	ldi	r22, 0x00	; 0
    11dc:	70 e0       	ldi	r23, 0x00	; 0
    11de:	84 2b       	or	r24, r20
    11e0:	95 2b       	or	r25, r21
    11e2:	a6 2b       	or	r26, r22
    11e4:	b7 2b       	or	r27, r23
    11e6:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    11ea:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    11ee:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    11f2:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    11f6:	b0 9b       	sbis	0x16, 0	; 22
    11f8:	1b c0       	rjmp	.+54     	; 0x1230 <__vector_16+0x98>
    11fa:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    11fe:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1202:	c9 01       	movw	r24, r18
    1204:	01 96       	adiw	r24, 0x01	; 1
    1206:	09 2e       	mov	r0, r25
    1208:	00 0c       	add	r0, r0
    120a:	aa 0b       	sbc	r26, r26
    120c:	bb 0b       	sbc	r27, r27
    120e:	dc 01       	movw	r26, r24
    1210:	99 27       	eor	r25, r25
    1212:	88 27       	eor	r24, r24
    1214:	60 e0       	ldi	r22, 0x00	; 0
    1216:	70 e0       	ldi	r23, 0x00	; 0
    1218:	84 2b       	or	r24, r20
    121a:	95 2b       	or	r25, r21
    121c:	a6 2b       	or	r26, r22
    121e:	b7 2b       	or	r27, r23
    1220:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    1224:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    1228:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    122c:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    1230:	e0 91 44 02 	lds	r30, 0x0244	; 0x800244 <mtable+0x16>
    1234:	f0 91 45 02 	lds	r31, 0x0245	; 0x800245 <mtable+0x17>
    1238:	30 97       	sbiw	r30, 0x00	; 0
    123a:	39 f0       	breq	.+14     	; 0x124a <__vector_16+0xb2>
    123c:	6b e0       	ldi	r22, 0x0B	; 11
    123e:	70 e0       	ldi	r23, 0x00	; 0
    1240:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <otable+0x16>
    1244:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <otable+0x17>
    1248:	09 95       	icall
    124a:	0e 94 ed 03 	call	0x7da	; 0x7da <schedule>
    124e:	ff 91       	pop	r31
    1250:	ef 91       	pop	r30
    1252:	bf 91       	pop	r27
    1254:	af 91       	pop	r26
    1256:	9f 91       	pop	r25
    1258:	8f 91       	pop	r24
    125a:	7f 91       	pop	r23
    125c:	6f 91       	pop	r22
    125e:	5f 91       	pop	r21
    1260:	4f 91       	pop	r20
    1262:	3f 91       	pop	r19
    1264:	2f 91       	pop	r18
    1266:	0f 90       	pop	r0
    1268:	0f be       	out	0x3f, r0	; 63
    126a:	0f 90       	pop	r0
    126c:	1f 90       	pop	r1
    126e:	18 95       	reti

00001270 <__vector_17>:
    1270:	1f 92       	push	r1
    1272:	0f 92       	push	r0
    1274:	0f b6       	in	r0, 0x3f	; 63
    1276:	0f 92       	push	r0
    1278:	11 24       	eor	r1, r1
    127a:	2f 93       	push	r18
    127c:	3f 93       	push	r19
    127e:	4f 93       	push	r20
    1280:	5f 93       	push	r21
    1282:	6f 93       	push	r22
    1284:	7f 93       	push	r23
    1286:	8f 93       	push	r24
    1288:	9f 93       	push	r25
    128a:	af 93       	push	r26
    128c:	bf 93       	push	r27
    128e:	ef 93       	push	r30
    1290:	ff 93       	push	r31
    1292:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    1296:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    129a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    129e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    12a2:	c9 01       	movw	r24, r18
    12a4:	03 2e       	mov	r0, r19
    12a6:	00 0c       	add	r0, r0
    12a8:	aa 0b       	sbc	r26, r26
    12aa:	bb 0b       	sbc	r27, r27
    12ac:	dc 01       	movw	r26, r24
    12ae:	99 27       	eor	r25, r25
    12b0:	88 27       	eor	r24, r24
    12b2:	60 e0       	ldi	r22, 0x00	; 0
    12b4:	70 e0       	ldi	r23, 0x00	; 0
    12b6:	84 2b       	or	r24, r20
    12b8:	95 2b       	or	r25, r21
    12ba:	a6 2b       	or	r26, r22
    12bc:	b7 2b       	or	r27, r23
    12be:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    12c2:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    12c6:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    12ca:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    12ce:	b0 9b       	sbis	0x16, 0	; 22
    12d0:	1b c0       	rjmp	.+54     	; 0x1308 <__vector_17+0x98>
    12d2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    12d6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    12da:	c9 01       	movw	r24, r18
    12dc:	01 96       	adiw	r24, 0x01	; 1
    12de:	09 2e       	mov	r0, r25
    12e0:	00 0c       	add	r0, r0
    12e2:	aa 0b       	sbc	r26, r26
    12e4:	bb 0b       	sbc	r27, r27
    12e6:	dc 01       	movw	r26, r24
    12e8:	99 27       	eor	r25, r25
    12ea:	88 27       	eor	r24, r24
    12ec:	60 e0       	ldi	r22, 0x00	; 0
    12ee:	70 e0       	ldi	r23, 0x00	; 0
    12f0:	84 2b       	or	r24, r20
    12f2:	95 2b       	or	r25, r21
    12f4:	a6 2b       	or	r26, r22
    12f6:	b7 2b       	or	r27, r23
    12f8:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    12fc:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    1300:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    1304:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    1308:	e0 91 46 02 	lds	r30, 0x0246	; 0x800246 <mtable+0x18>
    130c:	f0 91 47 02 	lds	r31, 0x0247	; 0x800247 <mtable+0x19>
    1310:	30 97       	sbiw	r30, 0x00	; 0
    1312:	39 f0       	breq	.+14     	; 0x1322 <__vector_17+0xb2>
    1314:	6c e0       	ldi	r22, 0x0C	; 12
    1316:	70 e0       	ldi	r23, 0x00	; 0
    1318:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <otable+0x18>
    131c:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <otable+0x19>
    1320:	09 95       	icall
    1322:	0e 94 ed 03 	call	0x7da	; 0x7da <schedule>
    1326:	ff 91       	pop	r31
    1328:	ef 91       	pop	r30
    132a:	bf 91       	pop	r27
    132c:	af 91       	pop	r26
    132e:	9f 91       	pop	r25
    1330:	8f 91       	pop	r24
    1332:	7f 91       	pop	r23
    1334:	6f 91       	pop	r22
    1336:	5f 91       	pop	r21
    1338:	4f 91       	pop	r20
    133a:	3f 91       	pop	r19
    133c:	2f 91       	pop	r18
    133e:	0f 90       	pop	r0
    1340:	0f be       	out	0x3f, r0	; 63
    1342:	0f 90       	pop	r0
    1344:	1f 90       	pop	r1
    1346:	18 95       	reti

00001348 <__vector_18>:
    1348:	1f 92       	push	r1
    134a:	0f 92       	push	r0
    134c:	0f b6       	in	r0, 0x3f	; 63
    134e:	0f 92       	push	r0
    1350:	11 24       	eor	r1, r1
    1352:	2f 93       	push	r18
    1354:	3f 93       	push	r19
    1356:	4f 93       	push	r20
    1358:	5f 93       	push	r21
    135a:	6f 93       	push	r22
    135c:	7f 93       	push	r23
    135e:	8f 93       	push	r24
    1360:	9f 93       	push	r25
    1362:	af 93       	push	r26
    1364:	bf 93       	push	r27
    1366:	ef 93       	push	r30
    1368:	ff 93       	push	r31
    136a:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    136e:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    1372:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1376:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    137a:	c9 01       	movw	r24, r18
    137c:	03 2e       	mov	r0, r19
    137e:	00 0c       	add	r0, r0
    1380:	aa 0b       	sbc	r26, r26
    1382:	bb 0b       	sbc	r27, r27
    1384:	dc 01       	movw	r26, r24
    1386:	99 27       	eor	r25, r25
    1388:	88 27       	eor	r24, r24
    138a:	60 e0       	ldi	r22, 0x00	; 0
    138c:	70 e0       	ldi	r23, 0x00	; 0
    138e:	84 2b       	or	r24, r20
    1390:	95 2b       	or	r25, r21
    1392:	a6 2b       	or	r26, r22
    1394:	b7 2b       	or	r27, r23
    1396:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    139a:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    139e:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    13a2:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    13a6:	b0 9b       	sbis	0x16, 0	; 22
    13a8:	1b c0       	rjmp	.+54     	; 0x13e0 <__vector_18+0x98>
    13aa:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    13ae:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    13b2:	c9 01       	movw	r24, r18
    13b4:	01 96       	adiw	r24, 0x01	; 1
    13b6:	09 2e       	mov	r0, r25
    13b8:	00 0c       	add	r0, r0
    13ba:	aa 0b       	sbc	r26, r26
    13bc:	bb 0b       	sbc	r27, r27
    13be:	dc 01       	movw	r26, r24
    13c0:	99 27       	eor	r25, r25
    13c2:	88 27       	eor	r24, r24
    13c4:	60 e0       	ldi	r22, 0x00	; 0
    13c6:	70 e0       	ldi	r23, 0x00	; 0
    13c8:	84 2b       	or	r24, r20
    13ca:	95 2b       	or	r25, r21
    13cc:	a6 2b       	or	r26, r22
    13ce:	b7 2b       	or	r27, r23
    13d0:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    13d4:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    13d8:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    13dc:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    13e0:	e0 91 48 02 	lds	r30, 0x0248	; 0x800248 <mtable+0x1a>
    13e4:	f0 91 49 02 	lds	r31, 0x0249	; 0x800249 <mtable+0x1b>
    13e8:	30 97       	sbiw	r30, 0x00	; 0
    13ea:	39 f0       	breq	.+14     	; 0x13fa <__vector_18+0xb2>
    13ec:	6d e0       	ldi	r22, 0x0D	; 13
    13ee:	70 e0       	ldi	r23, 0x00	; 0
    13f0:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <otable+0x1a>
    13f4:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <otable+0x1b>
    13f8:	09 95       	icall
    13fa:	0e 94 ed 03 	call	0x7da	; 0x7da <schedule>
    13fe:	ff 91       	pop	r31
    1400:	ef 91       	pop	r30
    1402:	bf 91       	pop	r27
    1404:	af 91       	pop	r26
    1406:	9f 91       	pop	r25
    1408:	8f 91       	pop	r24
    140a:	7f 91       	pop	r23
    140c:	6f 91       	pop	r22
    140e:	5f 91       	pop	r21
    1410:	4f 91       	pop	r20
    1412:	3f 91       	pop	r19
    1414:	2f 91       	pop	r18
    1416:	0f 90       	pop	r0
    1418:	0f be       	out	0x3f, r0	; 63
    141a:	0f 90       	pop	r0
    141c:	1f 90       	pop	r1
    141e:	18 95       	reti

00001420 <__vector_19>:
    1420:	1f 92       	push	r1
    1422:	0f 92       	push	r0
    1424:	0f b6       	in	r0, 0x3f	; 63
    1426:	0f 92       	push	r0
    1428:	11 24       	eor	r1, r1
    142a:	2f 93       	push	r18
    142c:	3f 93       	push	r19
    142e:	4f 93       	push	r20
    1430:	5f 93       	push	r21
    1432:	6f 93       	push	r22
    1434:	7f 93       	push	r23
    1436:	8f 93       	push	r24
    1438:	9f 93       	push	r25
    143a:	af 93       	push	r26
    143c:	bf 93       	push	r27
    143e:	ef 93       	push	r30
    1440:	ff 93       	push	r31
    1442:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    1446:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    144a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    144e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1452:	c9 01       	movw	r24, r18
    1454:	03 2e       	mov	r0, r19
    1456:	00 0c       	add	r0, r0
    1458:	aa 0b       	sbc	r26, r26
    145a:	bb 0b       	sbc	r27, r27
    145c:	dc 01       	movw	r26, r24
    145e:	99 27       	eor	r25, r25
    1460:	88 27       	eor	r24, r24
    1462:	60 e0       	ldi	r22, 0x00	; 0
    1464:	70 e0       	ldi	r23, 0x00	; 0
    1466:	84 2b       	or	r24, r20
    1468:	95 2b       	or	r25, r21
    146a:	a6 2b       	or	r26, r22
    146c:	b7 2b       	or	r27, r23
    146e:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    1472:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    1476:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    147a:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    147e:	b0 9b       	sbis	0x16, 0	; 22
    1480:	1b c0       	rjmp	.+54     	; 0x14b8 <__vector_19+0x98>
    1482:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1486:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    148a:	c9 01       	movw	r24, r18
    148c:	01 96       	adiw	r24, 0x01	; 1
    148e:	09 2e       	mov	r0, r25
    1490:	00 0c       	add	r0, r0
    1492:	aa 0b       	sbc	r26, r26
    1494:	bb 0b       	sbc	r27, r27
    1496:	dc 01       	movw	r26, r24
    1498:	99 27       	eor	r25, r25
    149a:	88 27       	eor	r24, r24
    149c:	60 e0       	ldi	r22, 0x00	; 0
    149e:	70 e0       	ldi	r23, 0x00	; 0
    14a0:	84 2b       	or	r24, r20
    14a2:	95 2b       	or	r25, r21
    14a4:	a6 2b       	or	r26, r22
    14a6:	b7 2b       	or	r27, r23
    14a8:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    14ac:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    14b0:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    14b4:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    14b8:	e0 91 4a 02 	lds	r30, 0x024A	; 0x80024a <mtable+0x1c>
    14bc:	f0 91 4b 02 	lds	r31, 0x024B	; 0x80024b <mtable+0x1d>
    14c0:	30 97       	sbiw	r30, 0x00	; 0
    14c2:	39 f0       	breq	.+14     	; 0x14d2 <__vector_19+0xb2>
    14c4:	6e e0       	ldi	r22, 0x0E	; 14
    14c6:	70 e0       	ldi	r23, 0x00	; 0
    14c8:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <otable+0x1c>
    14cc:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <otable+0x1d>
    14d0:	09 95       	icall
    14d2:	0e 94 ed 03 	call	0x7da	; 0x7da <schedule>
    14d6:	ff 91       	pop	r31
    14d8:	ef 91       	pop	r30
    14da:	bf 91       	pop	r27
    14dc:	af 91       	pop	r26
    14de:	9f 91       	pop	r25
    14e0:	8f 91       	pop	r24
    14e2:	7f 91       	pop	r23
    14e4:	6f 91       	pop	r22
    14e6:	5f 91       	pop	r21
    14e8:	4f 91       	pop	r20
    14ea:	3f 91       	pop	r19
    14ec:	2f 91       	pop	r18
    14ee:	0f 90       	pop	r0
    14f0:	0f be       	out	0x3f, r0	; 63
    14f2:	0f 90       	pop	r0
    14f4:	1f 90       	pop	r1
    14f6:	18 95       	reti

000014f8 <__vector_20>:
    14f8:	1f 92       	push	r1
    14fa:	0f 92       	push	r0
    14fc:	0f b6       	in	r0, 0x3f	; 63
    14fe:	0f 92       	push	r0
    1500:	11 24       	eor	r1, r1
    1502:	2f 93       	push	r18
    1504:	3f 93       	push	r19
    1506:	4f 93       	push	r20
    1508:	5f 93       	push	r21
    150a:	6f 93       	push	r22
    150c:	7f 93       	push	r23
    150e:	8f 93       	push	r24
    1510:	9f 93       	push	r25
    1512:	af 93       	push	r26
    1514:	bf 93       	push	r27
    1516:	ef 93       	push	r30
    1518:	ff 93       	push	r31
    151a:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    151e:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    1522:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1526:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    152a:	c9 01       	movw	r24, r18
    152c:	03 2e       	mov	r0, r19
    152e:	00 0c       	add	r0, r0
    1530:	aa 0b       	sbc	r26, r26
    1532:	bb 0b       	sbc	r27, r27
    1534:	dc 01       	movw	r26, r24
    1536:	99 27       	eor	r25, r25
    1538:	88 27       	eor	r24, r24
    153a:	60 e0       	ldi	r22, 0x00	; 0
    153c:	70 e0       	ldi	r23, 0x00	; 0
    153e:	84 2b       	or	r24, r20
    1540:	95 2b       	or	r25, r21
    1542:	a6 2b       	or	r26, r22
    1544:	b7 2b       	or	r27, r23
    1546:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    154a:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    154e:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    1552:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    1556:	b0 9b       	sbis	0x16, 0	; 22
    1558:	1b c0       	rjmp	.+54     	; 0x1590 <__vector_20+0x98>
    155a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    155e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1562:	c9 01       	movw	r24, r18
    1564:	01 96       	adiw	r24, 0x01	; 1
    1566:	09 2e       	mov	r0, r25
    1568:	00 0c       	add	r0, r0
    156a:	aa 0b       	sbc	r26, r26
    156c:	bb 0b       	sbc	r27, r27
    156e:	dc 01       	movw	r26, r24
    1570:	99 27       	eor	r25, r25
    1572:	88 27       	eor	r24, r24
    1574:	60 e0       	ldi	r22, 0x00	; 0
    1576:	70 e0       	ldi	r23, 0x00	; 0
    1578:	84 2b       	or	r24, r20
    157a:	95 2b       	or	r25, r21
    157c:	a6 2b       	or	r26, r22
    157e:	b7 2b       	or	r27, r23
    1580:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    1584:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    1588:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    158c:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    1590:	e0 91 4c 02 	lds	r30, 0x024C	; 0x80024c <mtable+0x1e>
    1594:	f0 91 4d 02 	lds	r31, 0x024D	; 0x80024d <mtable+0x1f>
    1598:	30 97       	sbiw	r30, 0x00	; 0
    159a:	39 f0       	breq	.+14     	; 0x15aa <__vector_20+0xb2>
    159c:	6f e0       	ldi	r22, 0x0F	; 15
    159e:	70 e0       	ldi	r23, 0x00	; 0
    15a0:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <otable+0x1e>
    15a4:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <otable+0x1f>
    15a8:	09 95       	icall
    15aa:	0e 94 ed 03 	call	0x7da	; 0x7da <schedule>
    15ae:	ff 91       	pop	r31
    15b0:	ef 91       	pop	r30
    15b2:	bf 91       	pop	r27
    15b4:	af 91       	pop	r26
    15b6:	9f 91       	pop	r25
    15b8:	8f 91       	pop	r24
    15ba:	7f 91       	pop	r23
    15bc:	6f 91       	pop	r22
    15be:	5f 91       	pop	r21
    15c0:	4f 91       	pop	r20
    15c2:	3f 91       	pop	r19
    15c4:	2f 91       	pop	r18
    15c6:	0f 90       	pop	r0
    15c8:	0f be       	out	0x3f, r0	; 63
    15ca:	0f 90       	pop	r0
    15cc:	1f 90       	pop	r1
    15ce:	18 95       	reti

000015d0 <__vector_21>:
    15d0:	1f 92       	push	r1
    15d2:	0f 92       	push	r0
    15d4:	0f b6       	in	r0, 0x3f	; 63
    15d6:	0f 92       	push	r0
    15d8:	11 24       	eor	r1, r1
    15da:	2f 93       	push	r18
    15dc:	3f 93       	push	r19
    15de:	4f 93       	push	r20
    15e0:	5f 93       	push	r21
    15e2:	6f 93       	push	r22
    15e4:	7f 93       	push	r23
    15e6:	8f 93       	push	r24
    15e8:	9f 93       	push	r25
    15ea:	af 93       	push	r26
    15ec:	bf 93       	push	r27
    15ee:	ef 93       	push	r30
    15f0:	ff 93       	push	r31
    15f2:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    15f6:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    15fa:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    15fe:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1602:	c9 01       	movw	r24, r18
    1604:	03 2e       	mov	r0, r19
    1606:	00 0c       	add	r0, r0
    1608:	aa 0b       	sbc	r26, r26
    160a:	bb 0b       	sbc	r27, r27
    160c:	dc 01       	movw	r26, r24
    160e:	99 27       	eor	r25, r25
    1610:	88 27       	eor	r24, r24
    1612:	60 e0       	ldi	r22, 0x00	; 0
    1614:	70 e0       	ldi	r23, 0x00	; 0
    1616:	84 2b       	or	r24, r20
    1618:	95 2b       	or	r25, r21
    161a:	a6 2b       	or	r26, r22
    161c:	b7 2b       	or	r27, r23
    161e:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    1622:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    1626:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    162a:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    162e:	b0 9b       	sbis	0x16, 0	; 22
    1630:	1b c0       	rjmp	.+54     	; 0x1668 <__vector_21+0x98>
    1632:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1636:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    163a:	c9 01       	movw	r24, r18
    163c:	01 96       	adiw	r24, 0x01	; 1
    163e:	09 2e       	mov	r0, r25
    1640:	00 0c       	add	r0, r0
    1642:	aa 0b       	sbc	r26, r26
    1644:	bb 0b       	sbc	r27, r27
    1646:	dc 01       	movw	r26, r24
    1648:	99 27       	eor	r25, r25
    164a:	88 27       	eor	r24, r24
    164c:	60 e0       	ldi	r22, 0x00	; 0
    164e:	70 e0       	ldi	r23, 0x00	; 0
    1650:	84 2b       	or	r24, r20
    1652:	95 2b       	or	r25, r21
    1654:	a6 2b       	or	r26, r22
    1656:	b7 2b       	or	r27, r23
    1658:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    165c:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    1660:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    1664:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    1668:	e0 91 4e 02 	lds	r30, 0x024E	; 0x80024e <mtable+0x20>
    166c:	f0 91 4f 02 	lds	r31, 0x024F	; 0x80024f <mtable+0x21>
    1670:	30 97       	sbiw	r30, 0x00	; 0
    1672:	39 f0       	breq	.+14     	; 0x1682 <__vector_21+0xb2>
    1674:	60 e1       	ldi	r22, 0x10	; 16
    1676:	70 e0       	ldi	r23, 0x00	; 0
    1678:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <otable+0x20>
    167c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <otable+0x21>
    1680:	09 95       	icall
    1682:	0e 94 ed 03 	call	0x7da	; 0x7da <schedule>
    1686:	ff 91       	pop	r31
    1688:	ef 91       	pop	r30
    168a:	bf 91       	pop	r27
    168c:	af 91       	pop	r26
    168e:	9f 91       	pop	r25
    1690:	8f 91       	pop	r24
    1692:	7f 91       	pop	r23
    1694:	6f 91       	pop	r22
    1696:	5f 91       	pop	r21
    1698:	4f 91       	pop	r20
    169a:	3f 91       	pop	r19
    169c:	2f 91       	pop	r18
    169e:	0f 90       	pop	r0
    16a0:	0f be       	out	0x3f, r0	; 63
    16a2:	0f 90       	pop	r0
    16a4:	1f 90       	pop	r1
    16a6:	18 95       	reti

000016a8 <__vector_22>:
    16a8:	1f 92       	push	r1
    16aa:	0f 92       	push	r0
    16ac:	0f b6       	in	r0, 0x3f	; 63
    16ae:	0f 92       	push	r0
    16b0:	11 24       	eor	r1, r1
    16b2:	2f 93       	push	r18
    16b4:	3f 93       	push	r19
    16b6:	4f 93       	push	r20
    16b8:	5f 93       	push	r21
    16ba:	6f 93       	push	r22
    16bc:	7f 93       	push	r23
    16be:	8f 93       	push	r24
    16c0:	9f 93       	push	r25
    16c2:	af 93       	push	r26
    16c4:	bf 93       	push	r27
    16c6:	ef 93       	push	r30
    16c8:	ff 93       	push	r31
    16ca:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    16ce:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    16d2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    16d6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    16da:	c9 01       	movw	r24, r18
    16dc:	03 2e       	mov	r0, r19
    16de:	00 0c       	add	r0, r0
    16e0:	aa 0b       	sbc	r26, r26
    16e2:	bb 0b       	sbc	r27, r27
    16e4:	dc 01       	movw	r26, r24
    16e6:	99 27       	eor	r25, r25
    16e8:	88 27       	eor	r24, r24
    16ea:	60 e0       	ldi	r22, 0x00	; 0
    16ec:	70 e0       	ldi	r23, 0x00	; 0
    16ee:	84 2b       	or	r24, r20
    16f0:	95 2b       	or	r25, r21
    16f2:	a6 2b       	or	r26, r22
    16f4:	b7 2b       	or	r27, r23
    16f6:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    16fa:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    16fe:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    1702:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    1706:	b0 9b       	sbis	0x16, 0	; 22
    1708:	1b c0       	rjmp	.+54     	; 0x1740 <__vector_22+0x98>
    170a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    170e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1712:	c9 01       	movw	r24, r18
    1714:	01 96       	adiw	r24, 0x01	; 1
    1716:	09 2e       	mov	r0, r25
    1718:	00 0c       	add	r0, r0
    171a:	aa 0b       	sbc	r26, r26
    171c:	bb 0b       	sbc	r27, r27
    171e:	dc 01       	movw	r26, r24
    1720:	99 27       	eor	r25, r25
    1722:	88 27       	eor	r24, r24
    1724:	60 e0       	ldi	r22, 0x00	; 0
    1726:	70 e0       	ldi	r23, 0x00	; 0
    1728:	84 2b       	or	r24, r20
    172a:	95 2b       	or	r25, r21
    172c:	a6 2b       	or	r26, r22
    172e:	b7 2b       	or	r27, r23
    1730:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    1734:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    1738:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    173c:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    1740:	e0 91 50 02 	lds	r30, 0x0250	; 0x800250 <mtable+0x22>
    1744:	f0 91 51 02 	lds	r31, 0x0251	; 0x800251 <mtable+0x23>
    1748:	30 97       	sbiw	r30, 0x00	; 0
    174a:	39 f0       	breq	.+14     	; 0x175a <__vector_22+0xb2>
    174c:	61 e1       	ldi	r22, 0x11	; 17
    174e:	70 e0       	ldi	r23, 0x00	; 0
    1750:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <otable+0x22>
    1754:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <otable+0x23>
    1758:	09 95       	icall
    175a:	0e 94 ed 03 	call	0x7da	; 0x7da <schedule>
    175e:	ff 91       	pop	r31
    1760:	ef 91       	pop	r30
    1762:	bf 91       	pop	r27
    1764:	af 91       	pop	r26
    1766:	9f 91       	pop	r25
    1768:	8f 91       	pop	r24
    176a:	7f 91       	pop	r23
    176c:	6f 91       	pop	r22
    176e:	5f 91       	pop	r21
    1770:	4f 91       	pop	r20
    1772:	3f 91       	pop	r19
    1774:	2f 91       	pop	r18
    1776:	0f 90       	pop	r0
    1778:	0f be       	out	0x3f, r0	; 63
    177a:	0f 90       	pop	r0
    177c:	1f 90       	pop	r1
    177e:	18 95       	reti

00001780 <enqueueByDeadline>:
    1780:	ef 92       	push	r14
    1782:	ff 92       	push	r15
    1784:	0f 93       	push	r16
    1786:	1f 93       	push	r17
    1788:	cf 93       	push	r28
    178a:	df 93       	push	r29
    178c:	7b 01       	movw	r14, r22
    178e:	eb 01       	movw	r28, r22
    1790:	a8 81       	ld	r26, Y
    1792:	b9 81       	ldd	r27, Y+1	; 0x01
    1794:	10 97       	sbiw	r26, 0x00	; 0
    1796:	61 f1       	breq	.+88     	; 0x17f0 <enqueueByDeadline+0x70>
    1798:	fc 01       	movw	r30, r24
    179a:	06 81       	ldd	r16, Z+6	; 0x06
    179c:	17 81       	ldd	r17, Z+7	; 0x07
    179e:	20 85       	ldd	r18, Z+8	; 0x08
    17a0:	31 85       	ldd	r19, Z+9	; 0x09
    17a2:	16 96       	adiw	r26, 0x06	; 6
    17a4:	4d 91       	ld	r20, X+
    17a6:	5d 91       	ld	r21, X+
    17a8:	6d 91       	ld	r22, X+
    17aa:	7c 91       	ld	r23, X
    17ac:	19 97       	sbiw	r26, 0x09	; 9
    17ae:	04 17       	cp	r16, r20
    17b0:	15 07       	cpc	r17, r21
    17b2:	26 07       	cpc	r18, r22
    17b4:	37 07       	cpc	r19, r23
    17b6:	14 f4       	brge	.+4      	; 0x17bc <enqueueByDeadline+0x3c>
    17b8:	1b c0       	rjmp	.+54     	; 0x17f0 <enqueueByDeadline+0x70>
    17ba:	df 01       	movw	r26, r30
    17bc:	ed 91       	ld	r30, X+
    17be:	fc 91       	ld	r31, X
    17c0:	11 97       	sbiw	r26, 0x01	; 1
    17c2:	30 97       	sbiw	r30, 0x00	; 0
    17c4:	49 f0       	breq	.+18     	; 0x17d8 <enqueueByDeadline+0x58>
    17c6:	46 81       	ldd	r20, Z+6	; 0x06
    17c8:	57 81       	ldd	r21, Z+7	; 0x07
    17ca:	60 85       	ldd	r22, Z+8	; 0x08
    17cc:	71 85       	ldd	r23, Z+9	; 0x09
    17ce:	04 17       	cp	r16, r20
    17d0:	15 07       	cpc	r17, r21
    17d2:	26 07       	cpc	r18, r22
    17d4:	37 07       	cpc	r19, r23
    17d6:	8c f7       	brge	.-30     	; 0x17ba <enqueueByDeadline+0x3a>
    17d8:	ec 01       	movw	r28, r24
    17da:	f9 83       	std	Y+1, r31	; 0x01
    17dc:	e8 83       	st	Y, r30
    17de:	10 97       	sbiw	r26, 0x00	; 0
    17e0:	21 f4       	brne	.+8      	; 0x17ea <enqueueByDeadline+0x6a>
    17e2:	f7 01       	movw	r30, r14
    17e4:	91 83       	std	Z+1, r25	; 0x01
    17e6:	80 83       	st	Z, r24
    17e8:	07 c0       	rjmp	.+14     	; 0x17f8 <enqueueByDeadline+0x78>
    17ea:	8d 93       	st	X+, r24
    17ec:	9c 93       	st	X, r25
    17ee:	04 c0       	rjmp	.+8      	; 0x17f8 <enqueueByDeadline+0x78>
    17f0:	ec 01       	movw	r28, r24
    17f2:	b9 83       	std	Y+1, r27	; 0x01
    17f4:	a8 83       	st	Y, r26
    17f6:	f5 cf       	rjmp	.-22     	; 0x17e2 <enqueueByDeadline+0x62>
    17f8:	df 91       	pop	r29
    17fa:	cf 91       	pop	r28
    17fc:	1f 91       	pop	r17
    17fe:	0f 91       	pop	r16
    1800:	ff 90       	pop	r15
    1802:	ef 90       	pop	r14
    1804:	08 95       	ret

00001806 <enqueueByBaseline>:
    1806:	ef 92       	push	r14
    1808:	ff 92       	push	r15
    180a:	0f 93       	push	r16
    180c:	1f 93       	push	r17
    180e:	cf 93       	push	r28
    1810:	df 93       	push	r29
    1812:	7b 01       	movw	r14, r22
    1814:	eb 01       	movw	r28, r22
    1816:	a8 81       	ld	r26, Y
    1818:	b9 81       	ldd	r27, Y+1	; 0x01
    181a:	10 97       	sbiw	r26, 0x00	; 0
    181c:	61 f1       	breq	.+88     	; 0x1876 <enqueueByBaseline+0x70>
    181e:	fc 01       	movw	r30, r24
    1820:	02 81       	ldd	r16, Z+2	; 0x02
    1822:	13 81       	ldd	r17, Z+3	; 0x03
    1824:	24 81       	ldd	r18, Z+4	; 0x04
    1826:	35 81       	ldd	r19, Z+5	; 0x05
    1828:	12 96       	adiw	r26, 0x02	; 2
    182a:	4d 91       	ld	r20, X+
    182c:	5d 91       	ld	r21, X+
    182e:	6d 91       	ld	r22, X+
    1830:	7c 91       	ld	r23, X
    1832:	15 97       	sbiw	r26, 0x05	; 5
    1834:	04 17       	cp	r16, r20
    1836:	15 07       	cpc	r17, r21
    1838:	26 07       	cpc	r18, r22
    183a:	37 07       	cpc	r19, r23
    183c:	14 f4       	brge	.+4      	; 0x1842 <enqueueByBaseline+0x3c>
    183e:	1b c0       	rjmp	.+54     	; 0x1876 <enqueueByBaseline+0x70>
    1840:	df 01       	movw	r26, r30
    1842:	ed 91       	ld	r30, X+
    1844:	fc 91       	ld	r31, X
    1846:	11 97       	sbiw	r26, 0x01	; 1
    1848:	30 97       	sbiw	r30, 0x00	; 0
    184a:	49 f0       	breq	.+18     	; 0x185e <enqueueByBaseline+0x58>
    184c:	42 81       	ldd	r20, Z+2	; 0x02
    184e:	53 81       	ldd	r21, Z+3	; 0x03
    1850:	64 81       	ldd	r22, Z+4	; 0x04
    1852:	75 81       	ldd	r23, Z+5	; 0x05
    1854:	04 17       	cp	r16, r20
    1856:	15 07       	cpc	r17, r21
    1858:	26 07       	cpc	r18, r22
    185a:	37 07       	cpc	r19, r23
    185c:	8c f7       	brge	.-30     	; 0x1840 <enqueueByBaseline+0x3a>
    185e:	ec 01       	movw	r28, r24
    1860:	f9 83       	std	Y+1, r31	; 0x01
    1862:	e8 83       	st	Y, r30
    1864:	10 97       	sbiw	r26, 0x00	; 0
    1866:	21 f4       	brne	.+8      	; 0x1870 <enqueueByBaseline+0x6a>
    1868:	f7 01       	movw	r30, r14
    186a:	91 83       	std	Z+1, r25	; 0x01
    186c:	80 83       	st	Z, r24
    186e:	07 c0       	rjmp	.+14     	; 0x187e <enqueueByBaseline+0x78>
    1870:	8d 93       	st	X+, r24
    1872:	9c 93       	st	X, r25
    1874:	04 c0       	rjmp	.+8      	; 0x187e <enqueueByBaseline+0x78>
    1876:	ec 01       	movw	r28, r24
    1878:	b9 83       	std	Y+1, r27	; 0x01
    187a:	a8 83       	st	Y, r26
    187c:	f5 cf       	rjmp	.-22     	; 0x1868 <enqueueByBaseline+0x62>
    187e:	df 91       	pop	r29
    1880:	cf 91       	pop	r28
    1882:	1f 91       	pop	r17
    1884:	0f 91       	pop	r16
    1886:	ff 90       	pop	r15
    1888:	ef 90       	pop	r14
    188a:	08 95       	ret

0000188c <dequeue>:
    188c:	dc 01       	movw	r26, r24
    188e:	ed 91       	ld	r30, X+
    1890:	fc 91       	ld	r31, X
    1892:	11 97       	sbiw	r26, 0x01	; 1
    1894:	30 97       	sbiw	r30, 0x00	; 0
    1896:	59 f4       	brne	.+22     	; 0x18ae <dequeue+0x22>
    1898:	8f ef       	ldi	r24, 0xFF	; 255
    189a:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
    189e:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
    18a2:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
    18a6:	81 e0       	ldi	r24, 0x01	; 1
    18a8:	83 bf       	out	0x33, r24	; 51
    18aa:	88 95       	sleep
    18ac:	fd cf       	rjmp	.-6      	; 0x18a8 <dequeue+0x1c>
    18ae:	20 81       	ld	r18, Z
    18b0:	31 81       	ldd	r19, Z+1	; 0x01
    18b2:	2d 93       	st	X+, r18
    18b4:	3c 93       	st	X, r19
    18b6:	cf 01       	movw	r24, r30
    18b8:	08 95       	ret

000018ba <__vector_9>:
    18ba:	1f 92       	push	r1
    18bc:	0f 92       	push	r0
    18be:	0f b6       	in	r0, 0x3f	; 63
    18c0:	0f 92       	push	r0
    18c2:	11 24       	eor	r1, r1
    18c4:	2f 93       	push	r18
    18c6:	3f 93       	push	r19
    18c8:	4f 93       	push	r20
    18ca:	5f 93       	push	r21
    18cc:	6f 93       	push	r22
    18ce:	7f 93       	push	r23
    18d0:	8f 93       	push	r24
    18d2:	9f 93       	push	r25
    18d4:	ef 93       	push	r30
    18d6:	ff 93       	push	r31
    18d8:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <overflows>
    18dc:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <overflows+0x1>
    18e0:	01 96       	adiw	r24, 0x01	; 1
    18e2:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <overflows+0x1>
    18e6:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <overflows>
    18ea:	e0 91 92 01 	lds	r30, 0x0192	; 0x800192 <timerQ>
    18ee:	f0 91 93 01 	lds	r31, 0x0193	; 0x800193 <timerQ+0x1>
    18f2:	30 97       	sbiw	r30, 0x00	; 0
    18f4:	01 f1       	breq	.+64     	; 0x1936 <__vector_9+0x7c>
    18f6:	42 81       	ldd	r20, Z+2	; 0x02
    18f8:	53 81       	ldd	r21, Z+3	; 0x03
    18fa:	64 81       	ldd	r22, Z+4	; 0x04
    18fc:	75 81       	ldd	r23, Z+5	; 0x05
    18fe:	86 17       	cp	r24, r22
    1900:	97 07       	cpc	r25, r23
    1902:	c9 f4       	brne	.+50     	; 0x1936 <__vector_9+0x7c>
    1904:	ca 01       	movw	r24, r20
    1906:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    190a:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    190e:	42 1b       	sub	r20, r18
    1910:	53 0b       	sbc	r21, r19
    1912:	41 30       	cpi	r20, 0x01	; 1
    1914:	51 05       	cpc	r21, r1
    1916:	29 f4       	brne	.+10     	; 0x1922 <__vector_9+0x68>
    1918:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    191c:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1920:	01 96       	adiw	r24, 0x01	; 1
    1922:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1926:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    192a:	ef e6       	ldi	r30, 0x6F	; 111
    192c:	f0 e0       	ldi	r31, 0x00	; 0
    192e:	80 81       	ld	r24, Z
    1930:	82 60       	ori	r24, 0x02	; 2
    1932:	80 83       	st	Z, r24
    1934:	05 c0       	rjmp	.+10     	; 0x1940 <__vector_9+0x86>
    1936:	ef e6       	ldi	r30, 0x6F	; 111
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	80 81       	ld	r24, Z
    193c:	8d 7f       	andi	r24, 0xFD	; 253
    193e:	80 83       	st	Z, r24
    1940:	ff 91       	pop	r31
    1942:	ef 91       	pop	r30
    1944:	9f 91       	pop	r25
    1946:	8f 91       	pop	r24
    1948:	7f 91       	pop	r23
    194a:	6f 91       	pop	r22
    194c:	5f 91       	pop	r21
    194e:	4f 91       	pop	r20
    1950:	3f 91       	pop	r19
    1952:	2f 91       	pop	r18
    1954:	0f 90       	pop	r0
    1956:	0f be       	out	0x3f, r0	; 63
    1958:	0f 90       	pop	r0
    195a:	1f 90       	pop	r1
    195c:	18 95       	reti

0000195e <__vector_7>:
    195e:	1f 92       	push	r1
    1960:	0f 92       	push	r0
    1962:	0f b6       	in	r0, 0x3f	; 63
    1964:	0f 92       	push	r0
    1966:	11 24       	eor	r1, r1
    1968:	cf 92       	push	r12
    196a:	df 92       	push	r13
    196c:	ef 92       	push	r14
    196e:	ff 92       	push	r15
    1970:	2f 93       	push	r18
    1972:	3f 93       	push	r19
    1974:	4f 93       	push	r20
    1976:	5f 93       	push	r21
    1978:	6f 93       	push	r22
    197a:	7f 93       	push	r23
    197c:	8f 93       	push	r24
    197e:	9f 93       	push	r25
    1980:	af 93       	push	r26
    1982:	bf 93       	push	r27
    1984:	ef 93       	push	r30
    1986:	ff 93       	push	r31
    1988:	c0 90 8c 01 	lds	r12, 0x018C	; 0x80018c <overflows>
    198c:	d0 90 8d 01 	lds	r13, 0x018D	; 0x80018d <overflows+0x1>
    1990:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1994:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1998:	b0 99       	sbic	0x16, 0	; 22
    199a:	0f c0       	rjmp	.+30     	; 0x19ba <__vector_7+0x5c>
    199c:	0d 2c       	mov	r0, r13
    199e:	00 0c       	add	r0, r0
    19a0:	ee 08       	sbc	r14, r14
    19a2:	ff 08       	sbc	r15, r15
    19a4:	d6 01       	movw	r26, r12
    19a6:	99 27       	eor	r25, r25
    19a8:	88 27       	eor	r24, r24
    19aa:	69 01       	movw	r12, r18
    19ac:	e1 2c       	mov	r14, r1
    19ae:	f1 2c       	mov	r15, r1
    19b0:	c8 2a       	or	r12, r24
    19b2:	d9 2a       	or	r13, r25
    19b4:	ea 2a       	or	r14, r26
    19b6:	fb 2a       	or	r15, r27
    19b8:	15 c0       	rjmp	.+42     	; 0x19e4 <__vector_7+0x86>
    19ba:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    19be:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    19c2:	8f ef       	ldi	r24, 0xFF	; 255
    19c4:	c8 1a       	sub	r12, r24
    19c6:	d8 0a       	sbc	r13, r24
    19c8:	0d 2c       	mov	r0, r13
    19ca:	00 0c       	add	r0, r0
    19cc:	ee 08       	sbc	r14, r14
    19ce:	ff 08       	sbc	r15, r15
    19d0:	d6 01       	movw	r26, r12
    19d2:	99 27       	eor	r25, r25
    19d4:	88 27       	eor	r24, r24
    19d6:	69 01       	movw	r12, r18
    19d8:	e1 2c       	mov	r14, r1
    19da:	f1 2c       	mov	r15, r1
    19dc:	c8 2a       	or	r12, r24
    19de:	d9 2a       	or	r13, r25
    19e0:	ea 2a       	or	r14, r26
    19e2:	fb 2a       	or	r15, r27
    19e4:	e0 91 92 01 	lds	r30, 0x0192	; 0x800192 <timerQ>
    19e8:	f0 91 93 01 	lds	r31, 0x0193	; 0x800193 <timerQ+0x1>
    19ec:	30 97       	sbiw	r30, 0x00	; 0
    19ee:	09 f4       	brne	.+2      	; 0x19f2 <__vector_7+0x94>
    19f0:	42 c0       	rjmp	.+132    	; 0x1a76 <__vector_7+0x118>
    19f2:	82 81       	ldd	r24, Z+2	; 0x02
    19f4:	93 81       	ldd	r25, Z+3	; 0x03
    19f6:	a4 81       	ldd	r26, Z+4	; 0x04
    19f8:	b5 81       	ldd	r27, Z+5	; 0x05
    19fa:	8c 19       	sub	r24, r12
    19fc:	9d 09       	sbc	r25, r13
    19fe:	ae 09       	sbc	r26, r14
    1a00:	bf 09       	sbc	r27, r15
    1a02:	18 16       	cp	r1, r24
    1a04:	19 06       	cpc	r1, r25
    1a06:	1a 06       	cpc	r1, r26
    1a08:	1b 06       	cpc	r1, r27
    1a0a:	ec f1       	brlt	.+122    	; 0x1a86 <__vector_7+0x128>
    1a0c:	82 e9       	ldi	r24, 0x92	; 146
    1a0e:	91 e0       	ldi	r25, 0x01	; 1
    1a10:	0e 94 46 0c 	call	0x188c	; 0x188c <dequeue>
    1a14:	64 e9       	ldi	r22, 0x94	; 148
    1a16:	71 e0       	ldi	r23, 0x01	; 1
    1a18:	0e 94 c0 0b 	call	0x1780	; 0x1780 <enqueueByDeadline>
    1a1c:	e0 91 92 01 	lds	r30, 0x0192	; 0x800192 <timerQ>
    1a20:	f0 91 93 01 	lds	r31, 0x0193	; 0x800193 <timerQ+0x1>
    1a24:	30 97       	sbiw	r30, 0x00	; 0
    1a26:	39 f1       	breq	.+78     	; 0x1a76 <__vector_7+0x118>
    1a28:	82 81       	ldd	r24, Z+2	; 0x02
    1a2a:	93 81       	ldd	r25, Z+3	; 0x03
    1a2c:	a4 81       	ldd	r26, Z+4	; 0x04
    1a2e:	b5 81       	ldd	r27, Z+5	; 0x05
    1a30:	8c 19       	sub	r24, r12
    1a32:	9d 09       	sbc	r25, r13
    1a34:	ae 09       	sbc	r26, r14
    1a36:	bf 09       	sbc	r27, r15
    1a38:	18 16       	cp	r1, r24
    1a3a:	19 06       	cpc	r1, r25
    1a3c:	1a 06       	cpc	r1, r26
    1a3e:	1b 06       	cpc	r1, r27
    1a40:	2c f7       	brge	.-54     	; 0x1a0c <__vector_7+0xae>
    1a42:	21 c0       	rjmp	.+66     	; 0x1a86 <__vector_7+0x128>
    1a44:	9c 01       	movw	r18, r24
    1a46:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1a4a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1a4e:	84 1b       	sub	r24, r20
    1a50:	95 0b       	sbc	r25, r21
    1a52:	01 97       	sbiw	r24, 0x01	; 1
    1a54:	31 f4       	brne	.+12     	; 0x1a62 <__vector_7+0x104>
    1a56:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1a5a:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1a5e:	2f 5f       	subi	r18, 0xFF	; 255
    1a60:	3f 4f       	sbci	r19, 0xFF	; 255
    1a62:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1a66:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1a6a:	ef e6       	ldi	r30, 0x6F	; 111
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	80 81       	ld	r24, Z
    1a70:	82 60       	ori	r24, 0x02	; 2
    1a72:	80 83       	st	Z, r24
    1a74:	05 c0       	rjmp	.+10     	; 0x1a80 <__vector_7+0x122>
    1a76:	ef e6       	ldi	r30, 0x6F	; 111
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	80 81       	ld	r24, Z
    1a7c:	8d 7f       	andi	r24, 0xFD	; 253
    1a7e:	80 83       	st	Z, r24
    1a80:	0e 94 ed 03 	call	0x7da	; 0x7da <schedule>
    1a84:	0c c0       	rjmp	.+24     	; 0x1a9e <__vector_7+0x140>
    1a86:	82 81       	ldd	r24, Z+2	; 0x02
    1a88:	93 81       	ldd	r25, Z+3	; 0x03
    1a8a:	a4 81       	ldd	r26, Z+4	; 0x04
    1a8c:	b5 81       	ldd	r27, Z+5	; 0x05
    1a8e:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    1a92:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    1a96:	2a 17       	cp	r18, r26
    1a98:	3b 07       	cpc	r19, r27
    1a9a:	69 f7       	brne	.-38     	; 0x1a76 <__vector_7+0x118>
    1a9c:	d3 cf       	rjmp	.-90     	; 0x1a44 <__vector_7+0xe6>
    1a9e:	ff 91       	pop	r31
    1aa0:	ef 91       	pop	r30
    1aa2:	bf 91       	pop	r27
    1aa4:	af 91       	pop	r26
    1aa6:	9f 91       	pop	r25
    1aa8:	8f 91       	pop	r24
    1aaa:	7f 91       	pop	r23
    1aac:	6f 91       	pop	r22
    1aae:	5f 91       	pop	r21
    1ab0:	4f 91       	pop	r20
    1ab2:	3f 91       	pop	r19
    1ab4:	2f 91       	pop	r18
    1ab6:	ff 90       	pop	r15
    1ab8:	ef 90       	pop	r14
    1aba:	df 90       	pop	r13
    1abc:	cf 90       	pop	r12
    1abe:	0f 90       	pop	r0
    1ac0:	0f be       	out	0x3f, r0	; 63
    1ac2:	0f 90       	pop	r0
    1ac4:	1f 90       	pop	r1
    1ac6:	18 95       	reti

00001ac8 <async>:
    1ac8:	3f 92       	push	r3
    1aca:	4f 92       	push	r4
    1acc:	5f 92       	push	r5
    1ace:	6f 92       	push	r6
    1ad0:	7f 92       	push	r7
    1ad2:	8f 92       	push	r8
    1ad4:	9f 92       	push	r9
    1ad6:	af 92       	push	r10
    1ad8:	bf 92       	push	r11
    1ada:	cf 92       	push	r12
    1adc:	df 92       	push	r13
    1ade:	ef 92       	push	r14
    1ae0:	ff 92       	push	r15
    1ae2:	0f 93       	push	r16
    1ae4:	1f 93       	push	r17
    1ae6:	cf 93       	push	r28
    1ae8:	df 93       	push	r29
    1aea:	2b 01       	movw	r4, r22
    1aec:	3c 01       	movw	r6, r24
    1aee:	49 01       	movw	r8, r18
    1af0:	5a 01       	movw	r10, r20
    1af2:	8f b7       	in	r24, 0x3f	; 63
    1af4:	80 78       	andi	r24, 0x80	; 128
    1af6:	38 2e       	mov	r3, r24
    1af8:	f8 94       	cli
    1afa:	82 e8       	ldi	r24, 0x82	; 130
    1afc:	91 e0       	ldi	r25, 0x01	; 1
    1afe:	0e 94 46 0c 	call	0x188c	; 0x188c <dequeue>
    1b02:	ec 01       	movw	r28, r24
    1b04:	1b 87       	std	Y+11, r17	; 0x0b
    1b06:	0a 87       	std	Y+10, r16	; 0x0a
    1b08:	fd 86       	std	Y+13, r15	; 0x0d
    1b0a:	ec 86       	std	Y+12, r14	; 0x0c
    1b0c:	df 86       	std	Y+15, r13	; 0x0f
    1b0e:	ce 86       	std	Y+14, r12	; 0x0e
    1b10:	33 20       	and	r3, r3
    1b12:	61 f0       	breq	.+24     	; 0x1b2c <async+0x64>
    1b14:	e0 91 7c 01 	lds	r30, 0x017C	; 0x80017c <current>
    1b18:	f0 91 7d 01 	lds	r31, 0x017D	; 0x80017d <current+0x1>
    1b1c:	02 80       	ldd	r0, Z+2	; 0x02
    1b1e:	f3 81       	ldd	r31, Z+3	; 0x03
    1b20:	e0 2d       	mov	r30, r0
    1b22:	82 81       	ldd	r24, Z+2	; 0x02
    1b24:	93 81       	ldd	r25, Z+3	; 0x03
    1b26:	a4 81       	ldd	r26, Z+4	; 0x04
    1b28:	b5 81       	ldd	r27, Z+5	; 0x05
    1b2a:	08 c0       	rjmp	.+16     	; 0x1b3c <async+0x74>
    1b2c:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <timestamp>
    1b30:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <timestamp+0x1>
    1b34:	a0 91 90 01 	lds	r26, 0x0190	; 0x800190 <timestamp+0x2>
    1b38:	b0 91 91 01 	lds	r27, 0x0191	; 0x800191 <timestamp+0x3>
    1b3c:	48 0e       	add	r4, r24
    1b3e:	59 1e       	adc	r5, r25
    1b40:	6a 1e       	adc	r6, r26
    1b42:	7b 1e       	adc	r7, r27
    1b44:	4a 82       	std	Y+2, r4	; 0x02
    1b46:	5b 82       	std	Y+3, r5	; 0x03
    1b48:	6c 82       	std	Y+4, r6	; 0x04
    1b4a:	7d 82       	std	Y+5, r7	; 0x05
    1b4c:	18 14       	cp	r1, r8
    1b4e:	19 04       	cpc	r1, r9
    1b50:	1a 04       	cpc	r1, r10
    1b52:	1b 04       	cpc	r1, r11
    1b54:	44 f0       	brlt	.+16     	; 0x1b66 <async+0x9e>
    1b56:	0f 2e       	mov	r0, r31
    1b58:	88 24       	eor	r8, r8
    1b5a:	8a 94       	dec	r8
    1b5c:	98 2c       	mov	r9, r8
    1b5e:	a8 2c       	mov	r10, r8
    1b60:	ff e7       	ldi	r31, 0x7F	; 127
    1b62:	bf 2e       	mov	r11, r31
    1b64:	f0 2d       	mov	r31, r0
    1b66:	84 0c       	add	r8, r4
    1b68:	95 1c       	adc	r9, r5
    1b6a:	a6 1c       	adc	r10, r6
    1b6c:	b7 1c       	adc	r11, r7
    1b6e:	8e 82       	std	Y+6, r8	; 0x06
    1b70:	9f 82       	std	Y+7, r9	; 0x07
    1b72:	a8 86       	std	Y+8, r10	; 0x08
    1b74:	b9 86       	std	Y+9, r11	; 0x09
    1b76:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <overflows>
    1b7a:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <overflows+0x1>
    1b7e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1b82:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1b86:	b0 99       	sbic	0x16, 0	; 22
    1b88:	0e c0       	rjmp	.+28     	; 0x1ba6 <async+0xde>
    1b8a:	09 2e       	mov	r0, r25
    1b8c:	00 0c       	add	r0, r0
    1b8e:	aa 0b       	sbc	r26, r26
    1b90:	bb 0b       	sbc	r27, r27
    1b92:	dc 01       	movw	r26, r24
    1b94:	99 27       	eor	r25, r25
    1b96:	88 27       	eor	r24, r24
    1b98:	60 e0       	ldi	r22, 0x00	; 0
    1b9a:	70 e0       	ldi	r23, 0x00	; 0
    1b9c:	84 2b       	or	r24, r20
    1b9e:	95 2b       	or	r25, r21
    1ba0:	a6 2b       	or	r26, r22
    1ba2:	b7 2b       	or	r27, r23
    1ba4:	13 c0       	rjmp	.+38     	; 0x1bcc <async+0x104>
    1ba6:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1baa:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1bae:	01 96       	adiw	r24, 0x01	; 1
    1bb0:	09 2e       	mov	r0, r25
    1bb2:	00 0c       	add	r0, r0
    1bb4:	aa 0b       	sbc	r26, r26
    1bb6:	bb 0b       	sbc	r27, r27
    1bb8:	dc 01       	movw	r26, r24
    1bba:	99 27       	eor	r25, r25
    1bbc:	88 27       	eor	r24, r24
    1bbe:	a9 01       	movw	r20, r18
    1bc0:	60 e0       	ldi	r22, 0x00	; 0
    1bc2:	70 e0       	ldi	r23, 0x00	; 0
    1bc4:	84 2b       	or	r24, r20
    1bc6:	95 2b       	or	r25, r21
    1bc8:	a6 2b       	or	r26, r22
    1bca:	b7 2b       	or	r27, r23
    1bcc:	48 1a       	sub	r4, r24
    1bce:	59 0a       	sbc	r5, r25
    1bd0:	6a 0a       	sbc	r6, r26
    1bd2:	7b 0a       	sbc	r7, r27
    1bd4:	14 14       	cp	r1, r4
    1bd6:	15 04       	cpc	r1, r5
    1bd8:	16 04       	cpc	r1, r6
    1bda:	17 04       	cpc	r1, r7
    1bdc:	ac f5       	brge	.+106    	; 0x1c48 <async+0x180>
    1bde:	62 e9       	ldi	r22, 0x92	; 146
    1be0:	71 e0       	ldi	r23, 0x01	; 1
    1be2:	ce 01       	movw	r24, r28
    1be4:	0e 94 03 0c 	call	0x1806	; 0x1806 <enqueueByBaseline>
    1be8:	e0 91 92 01 	lds	r30, 0x0192	; 0x800192 <timerQ>
    1bec:	f0 91 93 01 	lds	r31, 0x0193	; 0x800193 <timerQ+0x1>
    1bf0:	30 97       	sbiw	r30, 0x00	; 0
    1bf2:	21 f1       	breq	.+72     	; 0x1c3c <async+0x174>
    1bf4:	82 81       	ldd	r24, Z+2	; 0x02
    1bf6:	93 81       	ldd	r25, Z+3	; 0x03
    1bf8:	a4 81       	ldd	r26, Z+4	; 0x04
    1bfa:	b5 81       	ldd	r27, Z+5	; 0x05
    1bfc:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    1c00:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    1c04:	2a 17       	cp	r18, r26
    1c06:	3b 07       	cpc	r19, r27
    1c08:	c9 f4       	brne	.+50     	; 0x1c3c <async+0x174>
    1c0a:	9c 01       	movw	r18, r24
    1c0c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1c10:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1c14:	84 1b       	sub	r24, r20
    1c16:	95 0b       	sbc	r25, r21
    1c18:	01 97       	sbiw	r24, 0x01	; 1
    1c1a:	31 f4       	brne	.+12     	; 0x1c28 <async+0x160>
    1c1c:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1c20:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1c24:	2f 5f       	subi	r18, 0xFF	; 255
    1c26:	3f 4f       	sbci	r19, 0xFF	; 255
    1c28:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1c2c:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1c30:	ef e6       	ldi	r30, 0x6F	; 111
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	80 81       	ld	r24, Z
    1c36:	82 60       	ori	r24, 0x02	; 2
    1c38:	80 83       	st	Z, r24
    1c3a:	41 c0       	rjmp	.+130    	; 0x1cbe <async+0x1f6>
    1c3c:	ef e6       	ldi	r30, 0x6F	; 111
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	80 81       	ld	r24, Z
    1c42:	8d 7f       	andi	r24, 0xFD	; 253
    1c44:	80 83       	st	Z, r24
    1c46:	3b c0       	rjmp	.+118    	; 0x1cbe <async+0x1f6>
    1c48:	64 e9       	ldi	r22, 0x94	; 148
    1c4a:	71 e0       	ldi	r23, 0x01	; 1
    1c4c:	ce 01       	movw	r24, r28
    1c4e:	0e 94 c0 0b 	call	0x1780	; 0x1780 <enqueueByDeadline>
    1c52:	33 20       	and	r3, r3
    1c54:	b9 f1       	breq	.+110    	; 0x1cc4 <async+0x1fc>
    1c56:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <threadPool>
    1c5a:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <threadPool+0x1>
    1c5e:	00 97       	sbiw	r24, 0x00	; 0
    1c60:	81 f1       	breq	.+96     	; 0x1cc2 <async+0x1fa>
    1c62:	e0 91 7e 01 	lds	r30, 0x017E	; 0x80017e <activeStack>
    1c66:	f0 91 7f 01 	lds	r31, 0x017F	; 0x80017f <activeStack+0x1>
    1c6a:	20 91 94 01 	lds	r18, 0x0194	; 0x800194 <msgQ>
    1c6e:	30 91 95 01 	lds	r19, 0x0195	; 0x800195 <msgQ+0x1>
    1c72:	02 81       	ldd	r16, Z+2	; 0x02
    1c74:	13 81       	ldd	r17, Z+3	; 0x03
    1c76:	d9 01       	movw	r26, r18
    1c78:	16 96       	adiw	r26, 0x06	; 6
    1c7a:	4d 91       	ld	r20, X+
    1c7c:	5d 91       	ld	r21, X+
    1c7e:	6d 91       	ld	r22, X+
    1c80:	7c 91       	ld	r23, X
    1c82:	19 97       	sbiw	r26, 0x09	; 9
    1c84:	d8 01       	movw	r26, r16
    1c86:	16 96       	adiw	r26, 0x06	; 6
    1c88:	0d 91       	ld	r16, X+
    1c8a:	1d 91       	ld	r17, X+
    1c8c:	2d 91       	ld	r18, X+
    1c8e:	3c 91       	ld	r19, X
    1c90:	19 97       	sbiw	r26, 0x09	; 9
    1c92:	40 1b       	sub	r20, r16
    1c94:	51 0b       	sbc	r21, r17
    1c96:	62 0b       	sbc	r22, r18
    1c98:	73 0b       	sbc	r23, r19
    1c9a:	9a f4       	brpl	.+38     	; 0x1cc2 <async+0x1fa>
    1c9c:	dc 01       	movw	r26, r24
    1c9e:	2d 91       	ld	r18, X+
    1ca0:	3c 91       	ld	r19, X
    1ca2:	11 97       	sbiw	r26, 0x01	; 1
    1ca4:	30 93 81 01 	sts	0x0181, r19	; 0x800181 <threadPool+0x1>
    1ca8:	20 93 80 01 	sts	0x0180, r18	; 0x800180 <threadPool>
    1cac:	ed 93       	st	X+, r30
    1cae:	fc 93       	st	X, r31
    1cb0:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <activeStack+0x1>
    1cb4:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <activeStack>
    1cb8:	0e 94 cd 03 	call	0x79a	; 0x79a <dispatch>
    1cbc:	02 c0       	rjmp	.+4      	; 0x1cc2 <async+0x1fa>
    1cbe:	33 20       	and	r3, r3
    1cc0:	09 f0       	breq	.+2      	; 0x1cc4 <async+0x1fc>
    1cc2:	78 94       	sei
    1cc4:	ce 01       	movw	r24, r28
    1cc6:	df 91       	pop	r29
    1cc8:	cf 91       	pop	r28
    1cca:	1f 91       	pop	r17
    1ccc:	0f 91       	pop	r16
    1cce:	ff 90       	pop	r15
    1cd0:	ef 90       	pop	r14
    1cd2:	df 90       	pop	r13
    1cd4:	cf 90       	pop	r12
    1cd6:	bf 90       	pop	r11
    1cd8:	af 90       	pop	r10
    1cda:	9f 90       	pop	r9
    1cdc:	8f 90       	pop	r8
    1cde:	7f 90       	pop	r7
    1ce0:	6f 90       	pop	r6
    1ce2:	5f 90       	pop	r5
    1ce4:	4f 90       	pop	r4
    1ce6:	3f 90       	pop	r3
    1ce8:	08 95       	ret

00001cea <sync>:
    1cea:	cf 92       	push	r12
    1cec:	df 92       	push	r13
    1cee:	ef 92       	push	r14
    1cf0:	ff 92       	push	r15
    1cf2:	0f 93       	push	r16
    1cf4:	1f 93       	push	r17
    1cf6:	cf 93       	push	r28
    1cf8:	df 93       	push	r29
    1cfa:	ec 01       	movw	r28, r24
    1cfc:	7b 01       	movw	r14, r22
    1cfe:	6a 01       	movw	r12, r20
    1d00:	1f b7       	in	r17, 0x3f	; 63
    1d02:	10 78       	andi	r17, 0x80	; 128
    1d04:	f8 94       	cli
    1d06:	a8 81       	ld	r26, Y
    1d08:	b9 81       	ldd	r27, Y+1	; 0x01
    1d0a:	10 97       	sbiw	r26, 0x00	; 0
    1d0c:	61 f1       	breq	.+88     	; 0x1d66 <sync+0x7c>
    1d0e:	14 96       	adiw	r26, 0x04	; 4
    1d10:	ed 91       	ld	r30, X+
    1d12:	fc 91       	ld	r31, X
    1d14:	15 97       	sbiw	r26, 0x05	; 5
    1d16:	30 97       	sbiw	r30, 0x00	; 0
    1d18:	41 f0       	breq	.+16     	; 0x1d2a <sync+0x40>
    1d1a:	a0 81       	ld	r26, Z
    1d1c:	b1 81       	ldd	r27, Z+1	; 0x01
    1d1e:	14 96       	adiw	r26, 0x04	; 4
    1d20:	ed 91       	ld	r30, X+
    1d22:	fc 91       	ld	r31, X
    1d24:	15 97       	sbiw	r26, 0x05	; 5
    1d26:	30 97       	sbiw	r30, 0x00	; 0
    1d28:	c1 f7       	brne	.-16     	; 0x1d1a <sync+0x30>
    1d2a:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <current>
    1d2e:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <current+0x1>
    1d32:	2a 17       	cp	r18, r26
    1d34:	3b 07       	cpc	r19, r27
    1d36:	21 f0       	breq	.+8      	; 0x1d40 <sync+0x56>
    1d38:	11 23       	and	r17, r17
    1d3a:	09 f4       	brne	.+2      	; 0x1d3e <sync+0x54>
    1d3c:	3d c0       	rjmp	.+122    	; 0x1db8 <sync+0xce>
    1d3e:	07 c0       	rjmp	.+14     	; 0x1d4e <sync+0x64>
    1d40:	11 23       	and	r17, r17
    1d42:	09 f4       	brne	.+2      	; 0x1d46 <sync+0x5c>
    1d44:	3c c0       	rjmp	.+120    	; 0x1dbe <sync+0xd4>
    1d46:	78 94       	sei
    1d48:	8f ef       	ldi	r24, 0xFF	; 255
    1d4a:	9f ef       	ldi	r25, 0xFF	; 255
    1d4c:	52 c0       	rjmp	.+164    	; 0x1df2 <sync+0x108>
    1d4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d50:	9b 81       	ldd	r25, Y+3	; 0x03
    1d52:	00 97       	sbiw	r24, 0x00	; 0
    1d54:	d1 f1       	breq	.+116    	; 0x1dca <sync+0xe0>
    1d56:	fc 01       	movw	r30, r24
    1d58:	15 82       	std	Z+5, r1	; 0x05
    1d5a:	14 82       	std	Z+4, r1	; 0x04
    1d5c:	36 c0       	rjmp	.+108    	; 0x1dca <sync+0xe0>
    1d5e:	78 94       	sei
    1d60:	80 e0       	ldi	r24, 0x00	; 0
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	46 c0       	rjmp	.+140    	; 0x1df2 <sync+0x108>
    1d66:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <current>
    1d6a:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <current+0x1>
    1d6e:	99 83       	std	Y+1, r25	; 0x01
    1d70:	88 83       	st	Y, r24
    1d72:	11 23       	and	r17, r17
    1d74:	29 f0       	breq	.+10     	; 0x1d80 <sync+0x96>
    1d76:	8a 81       	ldd	r24, Y+2	; 0x02
    1d78:	9b 81       	ldd	r25, Y+3	; 0x03
    1d7a:	01 97       	sbiw	r24, 0x01	; 1
    1d7c:	09 f0       	breq	.+2      	; 0x1d80 <sync+0x96>
    1d7e:	78 94       	sei
    1d80:	b6 01       	movw	r22, r12
    1d82:	ce 01       	movw	r24, r28
    1d84:	f7 01       	movw	r30, r14
    1d86:	09 95       	icall
    1d88:	f8 2e       	mov	r15, r24
    1d8a:	09 2f       	mov	r16, r25
    1d8c:	8f b7       	in	r24, 0x3f	; 63
    1d8e:	f8 94       	cli
    1d90:	19 82       	std	Y+1, r1	; 0x01
    1d92:	18 82       	st	Y, r1
    1d94:	8a 81       	ldd	r24, Y+2	; 0x02
    1d96:	9b 81       	ldd	r25, Y+3	; 0x03
    1d98:	82 30       	cpi	r24, 0x02	; 2
    1d9a:	91 05       	cpc	r25, r1
    1d9c:	38 f0       	brcs	.+14     	; 0x1dac <sync+0xc2>
    1d9e:	1b 82       	std	Y+3, r1	; 0x03
    1da0:	1a 82       	std	Y+2, r1	; 0x02
    1da2:	fc 01       	movw	r30, r24
    1da4:	15 82       	std	Z+5, r1	; 0x05
    1da6:	14 82       	std	Z+4, r1	; 0x04
    1da8:	0e 94 cd 03 	call	0x79a	; 0x79a <dispatch>
    1dac:	11 23       	and	r17, r17
    1dae:	51 f0       	breq	.+20     	; 0x1dc4 <sync+0xda>
    1db0:	78 94       	sei
    1db2:	8f 2d       	mov	r24, r15
    1db4:	90 2f       	mov	r25, r16
    1db6:	1d c0       	rjmp	.+58     	; 0x1df2 <sync+0x108>
    1db8:	8f ef       	ldi	r24, 0xFF	; 255
    1dba:	9f ef       	ldi	r25, 0xFF	; 255
    1dbc:	1a c0       	rjmp	.+52     	; 0x1df2 <sync+0x108>
    1dbe:	8f ef       	ldi	r24, 0xFF	; 255
    1dc0:	9f ef       	ldi	r25, 0xFF	; 255
    1dc2:	17 c0       	rjmp	.+46     	; 0x1df2 <sync+0x108>
    1dc4:	8f 2d       	mov	r24, r15
    1dc6:	90 2f       	mov	r25, r16
    1dc8:	14 c0       	rjmp	.+40     	; 0x1df2 <sync+0x108>
    1dca:	3b 83       	std	Y+3, r19	; 0x03
    1dcc:	2a 83       	std	Y+2, r18	; 0x02
    1dce:	f9 01       	movw	r30, r18
    1dd0:	d5 83       	std	Z+5, r29	; 0x05
    1dd2:	c4 83       	std	Z+4, r28	; 0x04
    1dd4:	cd 01       	movw	r24, r26
    1dd6:	0e 94 cd 03 	call	0x79a	; 0x79a <dispatch>
    1dda:	e0 91 7c 01 	lds	r30, 0x017C	; 0x80017c <current>
    1dde:	f0 91 7d 01 	lds	r31, 0x017D	; 0x80017d <current+0x1>
    1de2:	82 81       	ldd	r24, Z+2	; 0x02
    1de4:	93 81       	ldd	r25, Z+3	; 0x03
    1de6:	89 2b       	or	r24, r25
    1de8:	09 f4       	brne	.+2      	; 0x1dec <sync+0x102>
    1dea:	b9 cf       	rjmp	.-142    	; 0x1d5e <sync+0x74>
    1dec:	f9 83       	std	Y+1, r31	; 0x01
    1dee:	e8 83       	st	Y, r30
    1df0:	c2 cf       	rjmp	.-124    	; 0x1d76 <sync+0x8c>
    1df2:	df 91       	pop	r29
    1df4:	cf 91       	pop	r28
    1df6:	1f 91       	pop	r17
    1df8:	0f 91       	pop	r16
    1dfa:	ff 90       	pop	r15
    1dfc:	ef 90       	pop	r14
    1dfe:	df 90       	pop	r13
    1e00:	cf 90       	pop	r12
    1e02:	08 95       	ret

00001e04 <run>:
    1e04:	00 91 7c 01 	lds	r16, 0x017C	; 0x80017c <current>
    1e08:	10 91 7d 01 	lds	r17, 0x017D	; 0x80017d <current+0x1>
    1e0c:	84 e9       	ldi	r24, 0x94	; 148
    1e0e:	91 e0       	ldi	r25, 0x01	; 1
    1e10:	0e 94 46 0c 	call	0x188c	; 0x188c <dequeue>
    1e14:	ec 01       	movw	r28, r24
    1e16:	d8 01       	movw	r26, r16
    1e18:	13 96       	adiw	r26, 0x03	; 3
    1e1a:	9c 93       	st	X, r25
    1e1c:	8e 93       	st	-X, r24
    1e1e:	12 97       	sbiw	r26, 0x02	; 2
    1e20:	78 94       	sei
    1e22:	4e 85       	ldd	r20, Y+14	; 0x0e
    1e24:	5f 85       	ldd	r21, Y+15	; 0x0f
    1e26:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e28:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e2a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e2c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e2e:	0e 94 75 0e 	call	0x1cea	; 0x1cea <sync>
    1e32:	8f b7       	in	r24, 0x3f	; 63
    1e34:	f8 94       	cli
    1e36:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <msgPool>
    1e3a:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <msgPool+0x1>
    1e3e:	99 83       	std	Y+1, r25	; 0x01
    1e40:	88 83       	st	Y, r24
    1e42:	d0 93 83 01 	sts	0x0183, r29	; 0x800183 <msgPool+0x1>
    1e46:	c0 93 82 01 	sts	0x0182, r28	; 0x800182 <msgPool>
    1e4a:	e0 91 7e 01 	lds	r30, 0x017E	; 0x80017e <activeStack>
    1e4e:	f0 91 7f 01 	lds	r31, 0x017F	; 0x80017f <activeStack+0x1>
    1e52:	00 81       	ld	r16, Z
    1e54:	11 81       	ldd	r17, Z+1	; 0x01
    1e56:	e8 01       	movw	r28, r16
    1e58:	2a 81       	ldd	r18, Y+2	; 0x02
    1e5a:	3b 81       	ldd	r19, Y+3	; 0x03
    1e5c:	a0 91 94 01 	lds	r26, 0x0194	; 0x800194 <msgQ>
    1e60:	b0 91 95 01 	lds	r27, 0x0195	; 0x800195 <msgQ+0x1>
    1e64:	10 97       	sbiw	r26, 0x00	; 0
    1e66:	c1 f0       	breq	.+48     	; 0x1e98 <run+0x94>
    1e68:	21 15       	cp	r18, r1
    1e6a:	31 05       	cpc	r19, r1
    1e6c:	59 f2       	breq	.-106    	; 0x1e04 <run>
    1e6e:	16 96       	adiw	r26, 0x06	; 6
    1e70:	8d 91       	ld	r24, X+
    1e72:	9d 91       	ld	r25, X+
    1e74:	0d 90       	ld	r0, X+
    1e76:	bc 91       	ld	r27, X
    1e78:	a0 2d       	mov	r26, r0
    1e7a:	e9 01       	movw	r28, r18
    1e7c:	4e 81       	ldd	r20, Y+6	; 0x06
    1e7e:	5f 81       	ldd	r21, Y+7	; 0x07
    1e80:	68 85       	ldd	r22, Y+8	; 0x08
    1e82:	79 85       	ldd	r23, Y+9	; 0x09
    1e84:	84 1b       	sub	r24, r20
    1e86:	95 0b       	sbc	r25, r21
    1e88:	a6 0b       	sbc	r26, r22
    1e8a:	b7 0b       	sbc	r27, r23
    1e8c:	18 16       	cp	r1, r24
    1e8e:	19 06       	cpc	r1, r25
    1e90:	1a 06       	cpc	r1, r26
    1e92:	1b 06       	cpc	r1, r27
    1e94:	0c f0       	brlt	.+2      	; 0x1e98 <run+0x94>
    1e96:	b6 cf       	rjmp	.-148    	; 0x1e04 <run>
    1e98:	10 93 7f 01 	sts	0x017F, r17	; 0x80017f <activeStack+0x1>
    1e9c:	00 93 7e 01 	sts	0x017E, r16	; 0x80017e <activeStack>
    1ea0:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <threadPool>
    1ea4:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <threadPool+0x1>
    1ea8:	91 83       	std	Z+1, r25	; 0x01
    1eaa:	80 83       	st	Z, r24
    1eac:	f0 93 81 01 	sts	0x0181, r31	; 0x800181 <threadPool+0x1>
    1eb0:	e0 93 80 01 	sts	0x0180, r30	; 0x800180 <threadPool>
    1eb4:	a0 91 7e 01 	lds	r26, 0x017E	; 0x80017e <activeStack>
    1eb8:	b0 91 7f 01 	lds	r27, 0x017F	; 0x80017f <activeStack+0x1>
    1ebc:	14 96       	adiw	r26, 0x04	; 4
    1ebe:	ed 91       	ld	r30, X+
    1ec0:	fc 91       	ld	r31, X
    1ec2:	15 97       	sbiw	r26, 0x05	; 5
    1ec4:	30 97       	sbiw	r30, 0x00	; 0
    1ec6:	41 f0       	breq	.+16     	; 0x1ed8 <run+0xd4>
    1ec8:	a0 81       	ld	r26, Z
    1eca:	b1 81       	ldd	r27, Z+1	; 0x01
    1ecc:	14 96       	adiw	r26, 0x04	; 4
    1ece:	ed 91       	ld	r30, X+
    1ed0:	fc 91       	ld	r31, X
    1ed2:	15 97       	sbiw	r26, 0x05	; 5
    1ed4:	30 97       	sbiw	r30, 0x00	; 0
    1ed6:	c1 f7       	brne	.-16     	; 0x1ec8 <run+0xc4>
    1ed8:	cd 01       	movw	r24, r26
    1eda:	0e 94 cd 03 	call	0x79a	; 0x79a <dispatch>
    1ede:	92 cf       	rjmp	.-220    	; 0x1e04 <run>

00001ee0 <install>:
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    if (i >= 0 && i < N_VECTORS) {
    1ee0:	42 31       	cpi	r20, 0x12	; 18
    1ee2:	b8 f4       	brcc	.+46     	; 0x1f12 <install+0x32>
        char status;
        DISABLE(status);
    1ee4:	2f b7       	in	r18, 0x3f	; 63
    1ee6:	f8 94       	cli
        otable[i] = obj;
    1ee8:	50 e0       	ldi	r21, 0x00	; 0
    1eea:	44 0f       	add	r20, r20
    1eec:	55 1f       	adc	r21, r21
    1eee:	fa 01       	movw	r30, r20
    1ef0:	ea 56       	subi	r30, 0x6A	; 106
    1ef2:	fe 4f       	sbci	r31, 0xFE	; 254
    1ef4:	91 83       	std	Z+1, r25	; 0x01
    1ef6:	80 83       	st	Z, r24
        mtable[i] = m;
    1ef8:	fa 01       	movw	r30, r20
    1efa:	e2 5d       	subi	r30, 0xD2	; 210
    1efc:	fd 4f       	sbci	r31, 0xFD	; 253
    1efe:	71 83       	std	Z+1, r23	; 0x01
    1f00:	60 83       	st	Z, r22
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    1f02:	41 e0       	ldi	r20, 0x01	; 1
    1f04:	50 e0       	ldi	r21, 0x00	; 0
    1f06:	fc 01       	movw	r30, r24
    1f08:	53 83       	std	Z+3, r21	; 0x03
    1f0a:	42 83       	std	Z+2, r20	; 0x02
        ENABLE(status);
    1f0c:	22 23       	and	r18, r18
    1f0e:	0c f4       	brge	.+2      	; 0x1f12 <install+0x32>
    1f10:	78 94       	sei
    1f12:	08 95       	ret

00001f14 <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    1f14:	8c 01       	movw	r16, r24
    1f16:	7b 01       	movw	r14, r22
    1f18:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    1f1a:	8f b7       	in	r24, 0x3f	; 63
    1f1c:	f8 94       	cli
    initialize();
    1f1e:	0e 94 62 03 	call	0x6c4	; 0x6c4 <initialize>
    ENABLE(1);
    1f22:	78 94       	sei
    if (m != NULL)
    1f24:	e1 14       	cp	r14, r1
    1f26:	f1 04       	cpc	r15, r1
    1f28:	41 f0       	breq	.+16     	; 0x1f3a <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    1f2a:	20 e0       	ldi	r18, 0x00	; 0
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	a9 01       	movw	r20, r18
    1f30:	60 e0       	ldi	r22, 0x00	; 0
    1f32:	70 e0       	ldi	r23, 0x00	; 0
    1f34:	cb 01       	movw	r24, r22
    1f36:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <async>
    DISABLE(status);
    1f3a:	8f b7       	in	r24, 0x3f	; 63
    1f3c:	f8 94       	cli
        }
    }
}

static void idle(void) {
    schedule();
    1f3e:	0e 94 ed 03 	call	0x7da	; 0x7da <schedule>
    ENABLE(1);
    1f42:	78 94       	sei
    while (1) {
        SLEEP();
    1f44:	81 e0       	ldi	r24, 0x01	; 1
    1f46:	83 bf       	out	0x33, r24	; 51
    1f48:	88 95       	sleep
    1f4a:	fd cf       	rjmp	.-6      	; 0x1f46 <tinytimber+0x32>

00001f4c <__divmodsi4>:
    1f4c:	05 2e       	mov	r0, r21
    1f4e:	97 fb       	bst	r25, 7
    1f50:	1e f4       	brtc	.+6      	; 0x1f58 <__divmodsi4+0xc>
    1f52:	00 94       	com	r0
    1f54:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <__negsi2>
    1f58:	57 fd       	sbrc	r21, 7
    1f5a:	07 d0       	rcall	.+14     	; 0x1f6a <__divmodsi4_neg2>
    1f5c:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <__udivmodsi4>
    1f60:	07 fc       	sbrc	r0, 7
    1f62:	03 d0       	rcall	.+6      	; 0x1f6a <__divmodsi4_neg2>
    1f64:	4e f4       	brtc	.+18     	; 0x1f78 <__divmodsi4_exit>
    1f66:	0c 94 bd 0f 	jmp	0x1f7a	; 0x1f7a <__negsi2>

00001f6a <__divmodsi4_neg2>:
    1f6a:	50 95       	com	r21
    1f6c:	40 95       	com	r20
    1f6e:	30 95       	com	r19
    1f70:	21 95       	neg	r18
    1f72:	3f 4f       	sbci	r19, 0xFF	; 255
    1f74:	4f 4f       	sbci	r20, 0xFF	; 255
    1f76:	5f 4f       	sbci	r21, 0xFF	; 255

00001f78 <__divmodsi4_exit>:
    1f78:	08 95       	ret

00001f7a <__negsi2>:
    1f7a:	90 95       	com	r25
    1f7c:	80 95       	com	r24
    1f7e:	70 95       	com	r23
    1f80:	61 95       	neg	r22
    1f82:	7f 4f       	sbci	r23, 0xFF	; 255
    1f84:	8f 4f       	sbci	r24, 0xFF	; 255
    1f86:	9f 4f       	sbci	r25, 0xFF	; 255
    1f88:	08 95       	ret

00001f8a <__tablejump2__>:
    1f8a:	ee 0f       	add	r30, r30
    1f8c:	ff 1f       	adc	r31, r31
    1f8e:	05 90       	lpm	r0, Z+
    1f90:	f4 91       	lpm	r31, Z
    1f92:	e0 2d       	mov	r30, r0
    1f94:	09 94       	ijmp

00001f96 <__udivmodsi4>:
    1f96:	a1 e2       	ldi	r26, 0x21	; 33
    1f98:	1a 2e       	mov	r1, r26
    1f9a:	aa 1b       	sub	r26, r26
    1f9c:	bb 1b       	sub	r27, r27
    1f9e:	fd 01       	movw	r30, r26
    1fa0:	0d c0       	rjmp	.+26     	; 0x1fbc <__udivmodsi4_ep>

00001fa2 <__udivmodsi4_loop>:
    1fa2:	aa 1f       	adc	r26, r26
    1fa4:	bb 1f       	adc	r27, r27
    1fa6:	ee 1f       	adc	r30, r30
    1fa8:	ff 1f       	adc	r31, r31
    1faa:	a2 17       	cp	r26, r18
    1fac:	b3 07       	cpc	r27, r19
    1fae:	e4 07       	cpc	r30, r20
    1fb0:	f5 07       	cpc	r31, r21
    1fb2:	20 f0       	brcs	.+8      	; 0x1fbc <__udivmodsi4_ep>
    1fb4:	a2 1b       	sub	r26, r18
    1fb6:	b3 0b       	sbc	r27, r19
    1fb8:	e4 0b       	sbc	r30, r20
    1fba:	f5 0b       	sbc	r31, r21

00001fbc <__udivmodsi4_ep>:
    1fbc:	66 1f       	adc	r22, r22
    1fbe:	77 1f       	adc	r23, r23
    1fc0:	88 1f       	adc	r24, r24
    1fc2:	99 1f       	adc	r25, r25
    1fc4:	1a 94       	dec	r1
    1fc6:	69 f7       	brne	.-38     	; 0x1fa2 <__udivmodsi4_loop>
    1fc8:	60 95       	com	r22
    1fca:	70 95       	com	r23
    1fcc:	80 95       	com	r24
    1fce:	90 95       	com	r25
    1fd0:	9b 01       	movw	r18, r22
    1fd2:	ac 01       	movw	r20, r24
    1fd4:	bd 01       	movw	r22, r26
    1fd6:	cf 01       	movw	r24, r30
    1fd8:	08 95       	ret

00001fda <setjmp>:
    1fda:	dc 01       	movw	r26, r24
    1fdc:	2d 92       	st	X+, r2
    1fde:	3d 92       	st	X+, r3
    1fe0:	4d 92       	st	X+, r4
    1fe2:	5d 92       	st	X+, r5
    1fe4:	6d 92       	st	X+, r6
    1fe6:	7d 92       	st	X+, r7
    1fe8:	8d 92       	st	X+, r8
    1fea:	9d 92       	st	X+, r9
    1fec:	ad 92       	st	X+, r10
    1fee:	bd 92       	st	X+, r11
    1ff0:	cd 92       	st	X+, r12
    1ff2:	dd 92       	st	X+, r13
    1ff4:	ed 92       	st	X+, r14
    1ff6:	fd 92       	st	X+, r15
    1ff8:	0d 93       	st	X+, r16
    1ffa:	1d 93       	st	X+, r17
    1ffc:	cd 93       	st	X+, r28
    1ffe:	dd 93       	st	X+, r29
    2000:	ff 91       	pop	r31
    2002:	ef 91       	pop	r30
    2004:	8d b7       	in	r24, 0x3d	; 61
    2006:	8d 93       	st	X+, r24
    2008:	8e b7       	in	r24, 0x3e	; 62
    200a:	8d 93       	st	X+, r24
    200c:	8f b7       	in	r24, 0x3f	; 63
    200e:	8d 93       	st	X+, r24
    2010:	ed 93       	st	X+, r30
    2012:	fd 93       	st	X+, r31
    2014:	88 27       	eor	r24, r24
    2016:	99 27       	eor	r25, r25
    2018:	09 94       	ijmp

0000201a <longjmp>:
    201a:	dc 01       	movw	r26, r24
    201c:	cb 01       	movw	r24, r22
    201e:	81 30       	cpi	r24, 0x01	; 1
    2020:	91 05       	cpc	r25, r1
    2022:	81 1d       	adc	r24, r1
    2024:	2d 90       	ld	r2, X+
    2026:	3d 90       	ld	r3, X+
    2028:	4d 90       	ld	r4, X+
    202a:	5d 90       	ld	r5, X+
    202c:	6d 90       	ld	r6, X+
    202e:	7d 90       	ld	r7, X+
    2030:	8d 90       	ld	r8, X+
    2032:	9d 90       	ld	r9, X+
    2034:	ad 90       	ld	r10, X+
    2036:	bd 90       	ld	r11, X+
    2038:	cd 90       	ld	r12, X+
    203a:	dd 90       	ld	r13, X+
    203c:	ed 90       	ld	r14, X+
    203e:	fd 90       	ld	r15, X+
    2040:	0d 91       	ld	r16, X+
    2042:	1d 91       	ld	r17, X+
    2044:	cd 91       	ld	r28, X+
    2046:	dd 91       	ld	r29, X+
    2048:	ed 91       	ld	r30, X+
    204a:	fd 91       	ld	r31, X+
    204c:	0d 90       	ld	r0, X+
    204e:	f8 94       	cli
    2050:	fe bf       	out	0x3e, r31	; 62
    2052:	0f be       	out	0x3f, r0	; 63
    2054:	ed bf       	out	0x3d, r30	; 61
    2056:	ed 91       	ld	r30, X+
    2058:	fd 91       	ld	r31, X+
    205a:	09 94       	ijmp

0000205c <_exit>:
    205c:	f8 94       	cli

0000205e <__stop_program>:
    205e:	ff cf       	rjmp	.-2      	; 0x205e <__stop_program>
