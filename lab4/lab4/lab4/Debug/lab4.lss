
lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008c  00800100  00002330  000023c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002330  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000035f  0080018c  0080018c  00002450  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002450  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002480  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a0  00000000  00000000  000024c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000032c0  00000000  00000000  00002760  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012ca  00000000  00000000  00005a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001889  00000000  00000000  00006cea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ca0  00000000  00000000  00008574  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000afa  00000000  00000000  00009214  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002a5c  00000000  00000000  00009d0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000230  00000000  00000000  0000c76a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 3e 05 	jmp	0xa7c	; 0xa7c <__vector_1>
       8:	0c 94 aa 05 	jmp	0xb54	; 0xb54 <__vector_2>
       c:	0c 94 16 06 	jmp	0xc2c	; 0xc2c <__vector_3>
      10:	0c 94 82 06 	jmp	0xd04	; 0xd04 <__vector_4>
      14:	0c 94 ee 06 	jmp	0xddc	; 0xddc <__vector_5>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 ba 0d 	jmp	0x1b74	; 0x1b74 <__vector_7>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 68 0d 	jmp	0x1ad0	; 0x1ad0 <__vector_9>
      28:	0c 94 5a 07 	jmp	0xeb4	; 0xeb4 <__vector_10>
      2c:	0c 94 c6 07 	jmp	0xf8c	; 0xf8c <__vector_11>
      30:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__vector_12>
      34:	0c 94 9e 08 	jmp	0x113c	; 0x113c <__vector_13>
      38:	0c 94 0a 09 	jmp	0x1214	; 0x1214 <__vector_14>
      3c:	0c 94 76 09 	jmp	0x12ec	; 0x12ec <__vector_15>
      40:	0c 94 e2 09 	jmp	0x13c4	; 0x13c4 <__vector_16>
      44:	0c 94 4e 0a 	jmp	0x149c	; 0x149c <__vector_17>
      48:	0c 94 ba 0a 	jmp	0x1574	; 0x1574 <__vector_18>
      4c:	0c 94 26 0b 	jmp	0x164c	; 0x164c <__vector_19>
      50:	0c 94 92 0b 	jmp	0x1724	; 0x1724 <__vector_20>
      54:	0c 94 fe 0b 	jmp	0x17fc	; 0x17fc <__vector_21>
      58:	0c 94 6a 0c 	jmp	0x18d4	; 0x18d4 <__vector_22>
      5c:	89 01       	movw	r16, r18
      5e:	6b 01       	movw	r12, r22
      60:	6e 01       	movw	r12, r28
      62:	71 01       	movw	r14, r2
      64:	74 01       	movw	r14, r8
      66:	77 01       	movw	r14, r14
      68:	7a 01       	movw	r14, r20
      6a:	7d 01       	movw	r14, r26
      6c:	80 01       	movw	r16, r0
      6e:	83 01       	movw	r16, r6

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	11 e0       	ldi	r17, 0x01	; 1
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	e0 e3       	ldi	r30, 0x30	; 48
      84:	f3 e2       	ldi	r31, 0x23	; 35
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	ac 38       	cpi	r26, 0x8C	; 140
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	24 e0       	ldi	r18, 0x04	; 4
      94:	ac e8       	ldi	r26, 0x8C	; 140
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	ab 3e       	cpi	r26, 0xEB	; 235
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 cb 03 	call	0x796	; 0x796 <main>
      a6:	0c 94 96 11 	jmp	0x232c	; 0x232c <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <swithToLeftGen>:
#include "Backend.h"


void swithToLeftGen(Backend *self) {
      ae:	cf 92       	push	r12
      b0:	df 92       	push	r13
      b2:	ef 92       	push	r14
      b4:	ff 92       	push	r15
      b6:	0f 93       	push	r16
      b8:	1f 93       	push	r17
      ba:	cf 93       	push	r28
      bc:	df 93       	push	r29
      be:	ec 01       	movw	r28, r24
	self->activeGen = self->gen1;
      c0:	8e 81       	ldd	r24, Y+6	; 0x06
      c2:	9f 81       	ldd	r25, Y+7	; 0x07
      c4:	9b 87       	std	Y+11, r25	; 0x0b
      c6:	8a 87       	std	Y+10, r24	; 0x0a
	SYNC(self->gui, setActive, true);
      c8:	41 e0       	ldi	r20, 0x01	; 1
      ca:	50 e0       	ldi	r21, 0x00	; 0
      cc:	68 ec       	ldi	r22, 0xC8	; 200
      ce:	72 e0       	ldi	r23, 0x02	; 2
      d0:	8c 81       	ldd	r24, Y+4	; 0x04
      d2:	9d 81       	ldd	r25, Y+5	; 0x05
      d4:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <sync>
	ASYNC(self->gui, updateDisplay, 10);
      d8:	0c 81       	ldd	r16, Y+4	; 0x04
      da:	1d 81       	ldd	r17, Y+5	; 0x05
      dc:	0f 2e       	mov	r0, r31
      de:	fa e0       	ldi	r31, 0x0A	; 10
      e0:	cf 2e       	mov	r12, r31
      e2:	d1 2c       	mov	r13, r1
      e4:	f0 2d       	mov	r31, r0
      e6:	0f 2e       	mov	r0, r31
      e8:	fb ec       	ldi	r31, 0xCB	; 203
      ea:	ef 2e       	mov	r14, r31
      ec:	f2 e0       	ldi	r31, 0x02	; 2
      ee:	ff 2e       	mov	r15, r31
      f0:	f0 2d       	mov	r31, r0
      f2:	20 e0       	ldi	r18, 0x00	; 0
      f4:	30 e0       	ldi	r19, 0x00	; 0
      f6:	a9 01       	movw	r20, r18
      f8:	60 e0       	ldi	r22, 0x00	; 0
      fa:	70 e0       	ldi	r23, 0x00	; 0
      fc:	cb 01       	movw	r24, r22
      fe:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <async>
}
     102:	df 91       	pop	r29
     104:	cf 91       	pop	r28
     106:	1f 91       	pop	r17
     108:	0f 91       	pop	r16
     10a:	ff 90       	pop	r15
     10c:	ef 90       	pop	r14
     10e:	df 90       	pop	r13
     110:	cf 90       	pop	r12
     112:	08 95       	ret

00000114 <swithToRightGen>:

void swithToRightGen(Backend *self) {
     114:	cf 92       	push	r12
     116:	df 92       	push	r13
     118:	ef 92       	push	r14
     11a:	ff 92       	push	r15
     11c:	0f 93       	push	r16
     11e:	1f 93       	push	r17
     120:	cf 93       	push	r28
     122:	df 93       	push	r29
     124:	ec 01       	movw	r28, r24
	self->activeGen = self->gen2;
     126:	88 85       	ldd	r24, Y+8	; 0x08
     128:	99 85       	ldd	r25, Y+9	; 0x09
     12a:	9b 87       	std	Y+11, r25	; 0x0b
     12c:	8a 87       	std	Y+10, r24	; 0x0a
	SYNC(self->gui, setActive, false);
     12e:	40 e0       	ldi	r20, 0x00	; 0
     130:	50 e0       	ldi	r21, 0x00	; 0
     132:	68 ec       	ldi	r22, 0xC8	; 200
     134:	72 e0       	ldi	r23, 0x02	; 2
     136:	8c 81       	ldd	r24, Y+4	; 0x04
     138:	9d 81       	ldd	r25, Y+5	; 0x05
     13a:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <sync>
	ASYNC(self->gui, updateDisplay, 20);
     13e:	0c 81       	ldd	r16, Y+4	; 0x04
     140:	1d 81       	ldd	r17, Y+5	; 0x05
     142:	0f 2e       	mov	r0, r31
     144:	f4 e1       	ldi	r31, 0x14	; 20
     146:	cf 2e       	mov	r12, r31
     148:	d1 2c       	mov	r13, r1
     14a:	f0 2d       	mov	r31, r0
     14c:	0f 2e       	mov	r0, r31
     14e:	fb ec       	ldi	r31, 0xCB	; 203
     150:	ef 2e       	mov	r14, r31
     152:	f2 e0       	ldi	r31, 0x02	; 2
     154:	ff 2e       	mov	r15, r31
     156:	f0 2d       	mov	r31, r0
     158:	20 e0       	ldi	r18, 0x00	; 0
     15a:	30 e0       	ldi	r19, 0x00	; 0
     15c:	a9 01       	movw	r20, r18
     15e:	60 e0       	ldi	r22, 0x00	; 0
     160:	70 e0       	ldi	r23, 0x00	; 0
     162:	cb 01       	movw	r24, r22
     164:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <async>
}
     168:	df 91       	pop	r29
     16a:	cf 91       	pop	r28
     16c:	1f 91       	pop	r17
     16e:	0f 91       	pop	r16
     170:	ff 90       	pop	r15
     172:	ef 90       	pop	r14
     174:	df 90       	pop	r13
     176:	cf 90       	pop	r12
     178:	08 95       	ret

0000017a <adjustFrequency>:

void adjustFrequency(Backend *self, int delta) {
     17a:	cf 92       	push	r12
     17c:	df 92       	push	r13
     17e:	ef 92       	push	r14
     180:	ff 92       	push	r15
     182:	0f 93       	push	r16
     184:	1f 93       	push	r17
     186:	cf 93       	push	r28
     188:	df 93       	push	r29
     18a:	ec 01       	movw	r28, r24
     18c:	8b 01       	movw	r16, r22
	// Get right target gen
	int newFreq = SYNC(self->activeGen, getFrequency, 0) + delta;
     18e:	40 e0       	ldi	r20, 0x00	; 0
     190:	50 e0       	ldi	r21, 0x00	; 0
     192:	64 e7       	ldi	r22, 0x74	; 116
     194:	74 e0       	ldi	r23, 0x04	; 4
     196:	8a 85       	ldd	r24, Y+10	; 0x0a
     198:	9b 85       	ldd	r25, Y+11	; 0x0b
     19a:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <sync>
     19e:	ac 01       	movw	r20, r24
     1a0:	40 0f       	add	r20, r16
     1a2:	51 1f       	adc	r21, r17
	if (newFreq < 0) newFreq = 0;
	// Update everything
	SYNC(self->activeGen, setFrequency, newFreq);
     1a4:	55 23       	and	r21, r21
     1a6:	14 f4       	brge	.+4      	; 0x1ac <adjustFrequency+0x32>
     1a8:	40 e0       	ldi	r20, 0x00	; 0
     1aa:	50 e0       	ldi	r21, 0x00	; 0
     1ac:	64 e6       	ldi	r22, 0x64	; 100
     1ae:	74 e0       	ldi	r23, 0x04	; 4
     1b0:	8a 85       	ldd	r24, Y+10	; 0x0a
     1b2:	9b 85       	ldd	r25, Y+11	; 0x0b
     1b4:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <sync>
	ASYNC(self->gui, updateDisplay, 0);
     1b8:	0c 81       	ldd	r16, Y+4	; 0x04
     1ba:	1d 81       	ldd	r17, Y+5	; 0x05
     1bc:	c1 2c       	mov	r12, r1
     1be:	d1 2c       	mov	r13, r1
     1c0:	0f 2e       	mov	r0, r31
     1c2:	fb ec       	ldi	r31, 0xCB	; 203
     1c4:	ef 2e       	mov	r14, r31
     1c6:	f2 e0       	ldi	r31, 0x02	; 2
     1c8:	ff 2e       	mov	r15, r31
     1ca:	f0 2d       	mov	r31, r0
     1cc:	20 e0       	ldi	r18, 0x00	; 0
     1ce:	30 e0       	ldi	r19, 0x00	; 0
     1d0:	a9 01       	movw	r20, r18
     1d2:	60 e0       	ldi	r22, 0x00	; 0
     1d4:	70 e0       	ldi	r23, 0x00	; 0
     1d6:	cb 01       	movw	r24, r22
     1d8:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <async>
}
     1dc:	df 91       	pop	r29
     1de:	cf 91       	pop	r28
     1e0:	1f 91       	pop	r17
     1e2:	0f 91       	pop	r16
     1e4:	ff 90       	pop	r15
     1e6:	ef 90       	pop	r14
     1e8:	df 90       	pop	r13
     1ea:	cf 90       	pop	r12
     1ec:	08 95       	ret

000001ee <saveRestore>:

void saveRestore(Backend *self) {
     1ee:	cf 92       	push	r12
     1f0:	df 92       	push	r13
     1f2:	ef 92       	push	r14
     1f4:	ff 92       	push	r15
     1f6:	0f 93       	push	r16
     1f8:	1f 93       	push	r17
     1fa:	cf 93       	push	r28
     1fc:	df 93       	push	r29
     1fe:	ec 01       	movw	r28, r24
	if (SYNC(self->activeGen, getFrequency, 0) == 0) {
     200:	40 e0       	ldi	r20, 0x00	; 0
     202:	50 e0       	ldi	r21, 0x00	; 0
     204:	64 e7       	ldi	r22, 0x74	; 116
     206:	74 e0       	ldi	r23, 0x04	; 4
     208:	8a 85       	ldd	r24, Y+10	; 0x0a
     20a:	9b 85       	ldd	r25, Y+11	; 0x0b
     20c:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <sync>
     210:	89 2b       	or	r24, r25
     212:	49 f4       	brne	.+18     	; 0x226 <saveRestore+0x38>
		SYNC(self->activeGen, restore, 0);
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	6e e6       	ldi	r22, 0x6E	; 110
     21a:	74 e0       	ldi	r23, 0x04	; 4
     21c:	8a 85       	ldd	r24, Y+10	; 0x0a
     21e:	9b 85       	ldd	r25, Y+11	; 0x0b
     220:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <sync>
     224:	10 c0       	rjmp	.+32     	; 0x246 <saveRestore+0x58>
		} else {
		SYNC(self->activeGen, save, 0);
     226:	40 e0       	ldi	r20, 0x00	; 0
     228:	50 e0       	ldi	r21, 0x00	; 0
     22a:	68 e6       	ldi	r22, 0x68	; 104
     22c:	74 e0       	ldi	r23, 0x04	; 4
     22e:	8a 85       	ldd	r24, Y+10	; 0x0a
     230:	9b 85       	ldd	r25, Y+11	; 0x0b
     232:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <sync>
		SYNC(self->activeGen, setFrequency, 0);
     236:	40 e0       	ldi	r20, 0x00	; 0
     238:	50 e0       	ldi	r21, 0x00	; 0
     23a:	64 e6       	ldi	r22, 0x64	; 100
     23c:	74 e0       	ldi	r23, 0x04	; 4
     23e:	8a 85       	ldd	r24, Y+10	; 0x0a
     240:	9b 85       	ldd	r25, Y+11	; 0x0b
     242:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <sync>
	}
	ASYNC(self->gui, updateDisplay, 0);
     246:	0c 81       	ldd	r16, Y+4	; 0x04
     248:	1d 81       	ldd	r17, Y+5	; 0x05
     24a:	c1 2c       	mov	r12, r1
     24c:	d1 2c       	mov	r13, r1
     24e:	0f 2e       	mov	r0, r31
     250:	fb ec       	ldi	r31, 0xCB	; 203
     252:	ef 2e       	mov	r14, r31
     254:	f2 e0       	ldi	r31, 0x02	; 2
     256:	ff 2e       	mov	r15, r31
     258:	f0 2d       	mov	r31, r0
     25a:	20 e0       	ldi	r18, 0x00	; 0
     25c:	30 e0       	ldi	r19, 0x00	; 0
     25e:	a9 01       	movw	r20, r18
     260:	60 e0       	ldi	r22, 0x00	; 0
     262:	70 e0       	ldi	r23, 0x00	; 0
     264:	cb 01       	movw	r24, r22
     266:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <async>
}
     26a:	df 91       	pop	r29
     26c:	cf 91       	pop	r28
     26e:	1f 91       	pop	r17
     270:	0f 91       	pop	r16
     272:	ff 90       	pop	r15
     274:	ef 90       	pop	r14
     276:	df 90       	pop	r13
     278:	cf 90       	pop	r12
     27a:	08 95       	ret

0000027c <startProgram>:

void startProgram(Backend *self) {
     27c:	cf 93       	push	r28
     27e:	df 93       	push	r29
     280:	ec 01       	movw	r28, r24
	SYNC(self->gen1, genFreq, 0);
     282:	40 e0       	ldi	r20, 0x00	; 0
     284:	50 e0       	ldi	r21, 0x00	; 0
     286:	61 e0       	ldi	r22, 0x01	; 1
     288:	74 e0       	ldi	r23, 0x04	; 4
     28a:	8e 81       	ldd	r24, Y+6	; 0x06
     28c:	9f 81       	ldd	r25, Y+7	; 0x07
     28e:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <sync>
	SYNC(self->gen2, genFreq, 0);
     292:	40 e0       	ldi	r20, 0x00	; 0
     294:	50 e0       	ldi	r21, 0x00	; 0
     296:	61 e0       	ldi	r22, 0x01	; 1
     298:	74 e0       	ldi	r23, 0x04	; 4
     29a:	88 85       	ldd	r24, Y+8	; 0x08
     29c:	99 85       	ldd	r25, Y+9	; 0x09
     29e:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <sync>
}
     2a2:	df 91       	pop	r29
     2a4:	cf 91       	pop	r28
     2a6:	08 95       	ret

000002a8 <LCD_init>:
#include "PulseGen.h"
#include "TinyTimber.h"

void LCD_init() {
	// LCD(Contrast Control Register), LCD(Display Configuration)(000): 300 s, LCD(Contrast Control)(1111): 3.35 V
	LCDCCR = (0 << LCDDC0) | (0 << LCDDC1) | (0 << LCDDC2) | (1 << LCDCC0) | (1 << LCDCC1) | (1 << LCDCC2) | (1 << LCDCC3);
     2a8:	8f e0       	ldi	r24, 0x0F	; 15
     2aa:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__DATA_REGION_ORIGIN__+0x87>
	// LCDCS: asynchronous clock, LCDMUX(11): D=1/4, B=1/3, LCD(Port Mask): 25 segments
	LCDCRB = (1 << LCDCS) | (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM2) | (1 << LCDPM1) | (1 << LCDPM0);
     2ae:	87 eb       	ldi	r24, 0xB7	; 183
     2b0:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
	// LCD(Clock Divide)(111): (D=8) 32Hz
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);
     2b4:	87 e0       	ldi	r24, 0x07	; 7
     2b6:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__DATA_REGION_ORIGIN__+0x86>
	// LCD(Control and Status Register A), LCD(Enable): True, LCD(Low Power Waveform): True, (no frame interrupt, no blanking)
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
     2ba:	80 ec       	ldi	r24, 0xC0	; 192
     2bc:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
     2c0:	08 95       	ret

000002c2 <getSegmentForChar>:
int none[] = {0b0000, 0b0000, 0b0000, 0b0000};

// Returns wall of data based on char input ('0' = 48 (char))
int* getSegmentForChar(char ch) {

	switch (ch) {
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	fc 01       	movw	r30, r24
     2c6:	f0 97       	sbiw	r30, 0x30	; 48
     2c8:	ea 30       	cpi	r30, 0x0A	; 10
     2ca:	f1 05       	cpc	r31, r1
     2cc:	f8 f4       	brcc	.+62     	; 0x30c <getSegmentForChar+0x4a>
     2ce:	e2 5d       	subi	r30, 0xD2	; 210
     2d0:	ff 4f       	sbci	r31, 0xFF	; 255
     2d2:	0c 94 03 11 	jmp	0x2206	; 0x2206 <__tablejump2__>
		case '0': return zero;
		case '1': return one;
     2d6:	80 e4       	ldi	r24, 0x40	; 64
     2d8:	91 e0       	ldi	r25, 0x01	; 1
     2da:	08 95       	ret
		case '2': return two;
     2dc:	88 e3       	ldi	r24, 0x38	; 56
     2de:	91 e0       	ldi	r25, 0x01	; 1
     2e0:	08 95       	ret
		case '3': return three;
     2e2:	80 e3       	ldi	r24, 0x30	; 48
     2e4:	91 e0       	ldi	r25, 0x01	; 1
     2e6:	08 95       	ret
		case '4': return four;
     2e8:	88 e2       	ldi	r24, 0x28	; 40
     2ea:	91 e0       	ldi	r25, 0x01	; 1
     2ec:	08 95       	ret
		case '5': return five;
     2ee:	80 e2       	ldi	r24, 0x20	; 32
     2f0:	91 e0       	ldi	r25, 0x01	; 1
     2f2:	08 95       	ret
		case '6': return six;
     2f4:	88 e1       	ldi	r24, 0x18	; 24
     2f6:	91 e0       	ldi	r25, 0x01	; 1
     2f8:	08 95       	ret
		case '7': return seven;
     2fa:	80 e1       	ldi	r24, 0x10	; 16
     2fc:	91 e0       	ldi	r25, 0x01	; 1
     2fe:	08 95       	ret
		case '8': return eight;
     300:	88 e0       	ldi	r24, 0x08	; 8
     302:	91 e0       	ldi	r25, 0x01	; 1
     304:	08 95       	ret
		case '9': return nine;
     306:	80 e0       	ldi	r24, 0x00	; 0
     308:	91 e0       	ldi	r25, 0x01	; 1
     30a:	08 95       	ret
		default:  return none;
     30c:	8c e8       	ldi	r24, 0x8C	; 140
     30e:	91 e0       	ldi	r25, 0x01	; 1
     310:	08 95       	ret

// Returns wall of data based on char input ('0' = 48 (char))
int* getSegmentForChar(char ch) {

	switch (ch) {
		case '0': return zero;
     312:	88 e4       	ldi	r24, 0x48	; 72
     314:	91 e0       	ldi	r25, 0x01	; 1
		case '7': return seven;
		case '8': return eight;
		case '9': return nine;
		default:  return none;
	}
}
     316:	08 95       	ret

00000318 <writeChar>:

// Write a char ch at position pos
void writeChar(char ch, uint8_t pos) {
     318:	cf 93       	push	r28
	// Check if outside range
	if (pos > 5 || pos < 0) return;	
     31a:	66 30       	cpi	r22, 0x06	; 6
     31c:	08 f0       	brcs	.+2      	; 0x320 <writeChar+0x8>
     31e:	e4 c0       	rjmp	.+456    	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
     320:	c6 2f       	mov	r28, r22

	// Get correct char data
	int* segment = getSegmentForChar(ch);
     322:	0e 94 61 01 	call	0x2c2	; 0x2c2 <getSegmentForChar>
     326:	fc 01       	movw	r30, r24
	
	// Chose position
	switch (pos) {
     328:	c2 30       	cpi	r28, 0x02	; 2
     32a:	09 f4       	brne	.+2      	; 0x32e <writeChar+0x16>
     32c:	67 c0       	rjmp	.+206    	; 0x3fc <writeChar+0xe4>
     32e:	28 f4       	brcc	.+10     	; 0x33a <writeChar+0x22>
     330:	cc 23       	and	r28, r28
     332:	51 f0       	breq	.+20     	; 0x348 <writeChar+0x30>
     334:	c1 30       	cpi	r28, 0x01	; 1
     336:	29 f1       	breq	.+74     	; 0x382 <writeChar+0x6a>
     338:	d7 c0       	rjmp	.+430    	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
     33a:	c3 30       	cpi	r28, 0x03	; 3
     33c:	09 f4       	brne	.+2      	; 0x340 <writeChar+0x28>
     33e:	7b c0       	rjmp	.+246    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     340:	c4 30       	cpi	r28, 0x04	; 4
     342:	09 f4       	brne	.+2      	; 0x346 <writeChar+0x2e>
     344:	b5 c0       	rjmp	.+362    	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
     346:	d0 c0       	rjmp	.+416    	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
		case 0:
			// Segment start at 0, 5, 10, 15, higher 4 bits.
			// (LCDDR0 & 0xF0) clears the segment before writing 
			LCDDR0 = (LCDDR0 & 0xF0) | segment[0];
     348:	ac ee       	ldi	r26, 0xEC	; 236
     34a:	b0 e0       	ldi	r27, 0x00	; 0
     34c:	8c 91       	ld	r24, X
     34e:	80 7f       	andi	r24, 0xF0	; 240
     350:	90 81       	ld	r25, Z
     352:	89 2b       	or	r24, r25
     354:	8c 93       	st	X, r24
			LCDDR5 = (LCDDR5 & 0xF0) | segment[1];
     356:	a1 ef       	ldi	r26, 0xF1	; 241
     358:	b0 e0       	ldi	r27, 0x00	; 0
     35a:	8c 91       	ld	r24, X
     35c:	80 7f       	andi	r24, 0xF0	; 240
     35e:	92 81       	ldd	r25, Z+2	; 0x02
     360:	89 2b       	or	r24, r25
     362:	8c 93       	st	X, r24
			LCDDR10 = (LCDDR10 & 0xF0) | segment[2];
     364:	a6 ef       	ldi	r26, 0xF6	; 246
     366:	b0 e0       	ldi	r27, 0x00	; 0
     368:	8c 91       	ld	r24, X
     36a:	80 7f       	andi	r24, 0xF0	; 240
     36c:	94 81       	ldd	r25, Z+4	; 0x04
     36e:	89 2b       	or	r24, r25
     370:	8c 93       	st	X, r24
			LCDDR15 = (LCDDR15 & 0xF0) | segment[3];
     372:	ab ef       	ldi	r26, 0xFB	; 251
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	8c 91       	ld	r24, X
     378:	80 7f       	andi	r24, 0xF0	; 240
     37a:	96 81       	ldd	r25, Z+6	; 0x06
     37c:	89 2b       	or	r24, r25
     37e:	8c 93       	st	X, r24
			break;
     380:	b3 c0       	rjmp	.+358    	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
		case 1:
			// Same segment just lower 4 bits
			LCDDR0 = (LCDDR0 & 0x0F) | (segment[0] << 4);
     382:	ac ee       	ldi	r26, 0xEC	; 236
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	2c 91       	ld	r18, X
     388:	80 81       	ld	r24, Z
     38a:	91 81       	ldd	r25, Z+1	; 0x01
     38c:	82 95       	swap	r24
     38e:	92 95       	swap	r25
     390:	90 7f       	andi	r25, 0xF0	; 240
     392:	98 27       	eor	r25, r24
     394:	80 7f       	andi	r24, 0xF0	; 240
     396:	98 27       	eor	r25, r24
     398:	92 2f       	mov	r25, r18
     39a:	9f 70       	andi	r25, 0x0F	; 15
     39c:	89 2b       	or	r24, r25
     39e:	8c 93       	st	X, r24
			LCDDR5 = (LCDDR5 & 0x0F) | (segment[1] << 4);
     3a0:	a1 ef       	ldi	r26, 0xF1	; 241
     3a2:	b0 e0       	ldi	r27, 0x00	; 0
     3a4:	2c 91       	ld	r18, X
     3a6:	82 81       	ldd	r24, Z+2	; 0x02
     3a8:	93 81       	ldd	r25, Z+3	; 0x03
     3aa:	82 95       	swap	r24
     3ac:	92 95       	swap	r25
     3ae:	90 7f       	andi	r25, 0xF0	; 240
     3b0:	98 27       	eor	r25, r24
     3b2:	80 7f       	andi	r24, 0xF0	; 240
     3b4:	98 27       	eor	r25, r24
     3b6:	92 2f       	mov	r25, r18
     3b8:	9f 70       	andi	r25, 0x0F	; 15
     3ba:	89 2b       	or	r24, r25
     3bc:	8c 93       	st	X, r24
			LCDDR10 = (LCDDR10 & 0x0F) | (segment[2] << 4);
     3be:	a6 ef       	ldi	r26, 0xF6	; 246
     3c0:	b0 e0       	ldi	r27, 0x00	; 0
     3c2:	2c 91       	ld	r18, X
     3c4:	84 81       	ldd	r24, Z+4	; 0x04
     3c6:	95 81       	ldd	r25, Z+5	; 0x05
     3c8:	82 95       	swap	r24
     3ca:	92 95       	swap	r25
     3cc:	90 7f       	andi	r25, 0xF0	; 240
     3ce:	98 27       	eor	r25, r24
     3d0:	80 7f       	andi	r24, 0xF0	; 240
     3d2:	98 27       	eor	r25, r24
     3d4:	92 2f       	mov	r25, r18
     3d6:	9f 70       	andi	r25, 0x0F	; 15
     3d8:	89 2b       	or	r24, r25
     3da:	8c 93       	st	X, r24
			LCDDR15 = (LCDDR15 & 0x0F) | (segment[3] << 4);
     3dc:	ab ef       	ldi	r26, 0xFB	; 251
     3de:	b0 e0       	ldi	r27, 0x00	; 0
     3e0:	2c 91       	ld	r18, X
     3e2:	86 81       	ldd	r24, Z+6	; 0x06
     3e4:	97 81       	ldd	r25, Z+7	; 0x07
     3e6:	82 95       	swap	r24
     3e8:	92 95       	swap	r25
     3ea:	90 7f       	andi	r25, 0xF0	; 240
     3ec:	98 27       	eor	r25, r24
     3ee:	80 7f       	andi	r24, 0xF0	; 240
     3f0:	98 27       	eor	r25, r24
     3f2:	92 2f       	mov	r25, r18
     3f4:	9f 70       	andi	r25, 0x0F	; 15
     3f6:	89 2b       	or	r24, r25
     3f8:	8c 93       	st	X, r24
			break;
     3fa:	76 c0       	rjmp	.+236    	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
		case 2:
			LCDDR1 = (LCDDR1 & 0xF0) | segment[0];
     3fc:	ad ee       	ldi	r26, 0xED	; 237
     3fe:	b0 e0       	ldi	r27, 0x00	; 0
     400:	8c 91       	ld	r24, X
     402:	80 7f       	andi	r24, 0xF0	; 240
     404:	90 81       	ld	r25, Z
     406:	89 2b       	or	r24, r25
     408:	8c 93       	st	X, r24
			LCDDR6 = (LCDDR6 & 0xF0) | segment[1];
     40a:	a2 ef       	ldi	r26, 0xF2	; 242
     40c:	b0 e0       	ldi	r27, 0x00	; 0
     40e:	8c 91       	ld	r24, X
     410:	80 7f       	andi	r24, 0xF0	; 240
     412:	92 81       	ldd	r25, Z+2	; 0x02
     414:	89 2b       	or	r24, r25
     416:	8c 93       	st	X, r24
			LCDDR11 = (LCDDR11 & 0xF0) | segment[2];
     418:	a7 ef       	ldi	r26, 0xF7	; 247
     41a:	b0 e0       	ldi	r27, 0x00	; 0
     41c:	8c 91       	ld	r24, X
     41e:	80 7f       	andi	r24, 0xF0	; 240
     420:	94 81       	ldd	r25, Z+4	; 0x04
     422:	89 2b       	or	r24, r25
     424:	8c 93       	st	X, r24
			LCDDR16 = (LCDDR16 & 0xF0) | segment[3];
     426:	ac ef       	ldi	r26, 0xFC	; 252
     428:	b0 e0       	ldi	r27, 0x00	; 0
     42a:	8c 91       	ld	r24, X
     42c:	80 7f       	andi	r24, 0xF0	; 240
     42e:	96 81       	ldd	r25, Z+6	; 0x06
     430:	89 2b       	or	r24, r25
     432:	8c 93       	st	X, r24
			break;
     434:	59 c0       	rjmp	.+178    	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
		case 3:
			LCDDR1 = (LCDDR1 & 0x0F) | (segment[0] << 4);
     436:	ad ee       	ldi	r26, 0xED	; 237
     438:	b0 e0       	ldi	r27, 0x00	; 0
     43a:	2c 91       	ld	r18, X
     43c:	80 81       	ld	r24, Z
     43e:	91 81       	ldd	r25, Z+1	; 0x01
     440:	82 95       	swap	r24
     442:	92 95       	swap	r25
     444:	90 7f       	andi	r25, 0xF0	; 240
     446:	98 27       	eor	r25, r24
     448:	80 7f       	andi	r24, 0xF0	; 240
     44a:	98 27       	eor	r25, r24
     44c:	92 2f       	mov	r25, r18
     44e:	9f 70       	andi	r25, 0x0F	; 15
     450:	89 2b       	or	r24, r25
     452:	8c 93       	st	X, r24
			LCDDR6 = (LCDDR6 & 0x0F) | (segment[1] << 4);
     454:	a2 ef       	ldi	r26, 0xF2	; 242
     456:	b0 e0       	ldi	r27, 0x00	; 0
     458:	2c 91       	ld	r18, X
     45a:	82 81       	ldd	r24, Z+2	; 0x02
     45c:	93 81       	ldd	r25, Z+3	; 0x03
     45e:	82 95       	swap	r24
     460:	92 95       	swap	r25
     462:	90 7f       	andi	r25, 0xF0	; 240
     464:	98 27       	eor	r25, r24
     466:	80 7f       	andi	r24, 0xF0	; 240
     468:	98 27       	eor	r25, r24
     46a:	92 2f       	mov	r25, r18
     46c:	9f 70       	andi	r25, 0x0F	; 15
     46e:	89 2b       	or	r24, r25
     470:	8c 93       	st	X, r24
			LCDDR11 = (LCDDR11 & 0x0F) | (segment[2] << 4);
     472:	a7 ef       	ldi	r26, 0xF7	; 247
     474:	b0 e0       	ldi	r27, 0x00	; 0
     476:	2c 91       	ld	r18, X
     478:	84 81       	ldd	r24, Z+4	; 0x04
     47a:	95 81       	ldd	r25, Z+5	; 0x05
     47c:	82 95       	swap	r24
     47e:	92 95       	swap	r25
     480:	90 7f       	andi	r25, 0xF0	; 240
     482:	98 27       	eor	r25, r24
     484:	80 7f       	andi	r24, 0xF0	; 240
     486:	98 27       	eor	r25, r24
     488:	92 2f       	mov	r25, r18
     48a:	9f 70       	andi	r25, 0x0F	; 15
     48c:	89 2b       	or	r24, r25
     48e:	8c 93       	st	X, r24
			LCDDR16 = (LCDDR16 & 0x0F) | (segment[3] << 4);
     490:	ac ef       	ldi	r26, 0xFC	; 252
     492:	b0 e0       	ldi	r27, 0x00	; 0
     494:	2c 91       	ld	r18, X
     496:	86 81       	ldd	r24, Z+6	; 0x06
     498:	97 81       	ldd	r25, Z+7	; 0x07
     49a:	82 95       	swap	r24
     49c:	92 95       	swap	r25
     49e:	90 7f       	andi	r25, 0xF0	; 240
     4a0:	98 27       	eor	r25, r24
     4a2:	80 7f       	andi	r24, 0xF0	; 240
     4a4:	98 27       	eor	r25, r24
     4a6:	92 2f       	mov	r25, r18
     4a8:	9f 70       	andi	r25, 0x0F	; 15
     4aa:	89 2b       	or	r24, r25
     4ac:	8c 93       	st	X, r24
			break;
     4ae:	1c c0       	rjmp	.+56     	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
		case 4:
			LCDDR2 = (LCDDR2 & 0xF0) | segment[0];
     4b0:	ae ee       	ldi	r26, 0xEE	; 238
     4b2:	b0 e0       	ldi	r27, 0x00	; 0
     4b4:	8c 91       	ld	r24, X
     4b6:	80 7f       	andi	r24, 0xF0	; 240
     4b8:	90 81       	ld	r25, Z
     4ba:	89 2b       	or	r24, r25
     4bc:	8c 93       	st	X, r24
			LCDDR7 = (LCDDR7 & 0xF0) | segment[1];
     4be:	a3 ef       	ldi	r26, 0xF3	; 243
     4c0:	b0 e0       	ldi	r27, 0x00	; 0
     4c2:	8c 91       	ld	r24, X
     4c4:	80 7f       	andi	r24, 0xF0	; 240
     4c6:	92 81       	ldd	r25, Z+2	; 0x02
     4c8:	89 2b       	or	r24, r25
     4ca:	8c 93       	st	X, r24
			LCDDR12 = (LCDDR12 & 0xF0) | segment[2];
     4cc:	a8 ef       	ldi	r26, 0xF8	; 248
     4ce:	b0 e0       	ldi	r27, 0x00	; 0
     4d0:	8c 91       	ld	r24, X
     4d2:	80 7f       	andi	r24, 0xF0	; 240
     4d4:	94 81       	ldd	r25, Z+4	; 0x04
     4d6:	89 2b       	or	r24, r25
     4d8:	8c 93       	st	X, r24
			LCDDR17 = (LCDDR17 & 0xF0) | segment[3];
     4da:	ad ef       	ldi	r26, 0xFD	; 253
     4dc:	b0 e0       	ldi	r27, 0x00	; 0
     4de:	8c 91       	ld	r24, X
     4e0:	80 7f       	andi	r24, 0xF0	; 240
     4e2:	96 81       	ldd	r25, Z+6	; 0x06
     4e4:	89 2b       	or	r24, r25
     4e6:	8c 93       	st	X, r24
			break;
	}
}
     4e8:	cf 91       	pop	r28
     4ea:	08 95       	ret

000004ec <printAt>:

void printAt(long num, int pos) {
     4ec:	8f 92       	push	r8
     4ee:	9f 92       	push	r9
     4f0:	af 92       	push	r10
     4f2:	bf 92       	push	r11
     4f4:	cf 92       	push	r12
     4f6:	df 92       	push	r13
     4f8:	ef 92       	push	r14
     4fa:	ff 92       	push	r15
     4fc:	cf 93       	push	r28
     4fe:	df 93       	push	r29
     500:	4b 01       	movw	r8, r22
     502:	5c 01       	movw	r10, r24
     504:	ea 01       	movw	r28, r20
	writeChar((num % 100) / 10 + '0', pos);
     506:	24 e6       	ldi	r18, 0x64	; 100
     508:	30 e0       	ldi	r19, 0x00	; 0
     50a:	40 e0       	ldi	r20, 0x00	; 0
     50c:	50 e0       	ldi	r21, 0x00	; 0
     50e:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <__divmodsi4>
     512:	0f 2e       	mov	r0, r31
     514:	fa e0       	ldi	r31, 0x0A	; 10
     516:	cf 2e       	mov	r12, r31
     518:	d1 2c       	mov	r13, r1
     51a:	e1 2c       	mov	r14, r1
     51c:	f1 2c       	mov	r15, r1
     51e:	f0 2d       	mov	r31, r0
     520:	a7 01       	movw	r20, r14
     522:	96 01       	movw	r18, r12
     524:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <__divmodsi4>
     528:	6c 2f       	mov	r22, r28
     52a:	80 e3       	ldi	r24, 0x30	; 48
     52c:	82 0f       	add	r24, r18
     52e:	0e 94 8c 01 	call	0x318	; 0x318 <writeChar>
	pos++;
	writeChar(num % 10 + '0', pos);
     532:	21 96       	adiw	r28, 0x01	; 1
     534:	c5 01       	movw	r24, r10
     536:	b4 01       	movw	r22, r8
     538:	a7 01       	movw	r20, r14
     53a:	96 01       	movw	r18, r12
     53c:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <__divmodsi4>
     540:	86 2f       	mov	r24, r22
     542:	6c 2f       	mov	r22, r28
     544:	80 5d       	subi	r24, 0xD0	; 208
     546:	0e 94 8c 01 	call	0x318	; 0x318 <writeChar>
}
     54a:	df 91       	pop	r29
     54c:	cf 91       	pop	r28
     54e:	ff 90       	pop	r15
     550:	ef 90       	pop	r14
     552:	df 90       	pop	r13
     554:	cf 90       	pop	r12
     556:	bf 90       	pop	r11
     558:	af 90       	pop	r10
     55a:	9f 90       	pop	r9
     55c:	8f 90       	pop	r8
     55e:	08 95       	ret

00000560 <activeGenIndicator>:

void activeGenIndicator(GUI *self, int activeGen) {
     560:	dc 01       	movw	r26, r24
	LCDDR0 &= ~(0b01000100);
     562:	ec ee       	ldi	r30, 0xEC	; 236
     564:	f0 e0       	ldi	r31, 0x00	; 0
     566:	90 81       	ld	r25, Z
     568:	9b 7b       	andi	r25, 0xBB	; 187
     56a:	90 83       	st	Z, r25
	if (self->leftActive) {
     56c:	14 96       	adiw	r26, 0x04	; 4
     56e:	8c 91       	ld	r24, X
     570:	14 97       	sbiw	r26, 0x04	; 4
     572:	88 23       	and	r24, r24
     574:	39 f0       	breq	.+14     	; 0x584 <activeGenIndicator+0x24>
		LCDDR0 |= 0b00000100;
     576:	80 81       	ld	r24, Z
     578:	84 60       	ori	r24, 0x04	; 4
     57a:	80 83       	st	Z, r24
	} 
	if (!self->leftActive) {
     57c:	14 96       	adiw	r26, 0x04	; 4
     57e:	8c 91       	ld	r24, X
     580:	81 11       	cpse	r24, r1
     582:	05 c0       	rjmp	.+10     	; 0x58e <activeGenIndicator+0x2e>
		LCDDR0 |= 0b01000000;
     584:	ec ee       	ldi	r30, 0xEC	; 236
     586:	f0 e0       	ldi	r31, 0x00	; 0
     588:	80 81       	ld	r24, Z
     58a:	80 64       	ori	r24, 0x40	; 64
     58c:	80 83       	st	Z, r24
     58e:	08 95       	ret

00000590 <setActive>:
	}
}

void setActive(GUI *self, bool status) {
	self->leftActive = status;
     590:	fc 01       	movw	r30, r24
     592:	64 83       	std	Z+4, r22	; 0x04
     594:	08 95       	ret

00000596 <updateDisplay>:
}

void updateDisplay(GUI *self, int activeGen) {
     596:	cf 92       	push	r12
     598:	df 92       	push	r13
     59a:	ef 92       	push	r14
     59c:	ff 92       	push	r15
     59e:	0f 93       	push	r16
     5a0:	1f 93       	push	r17
     5a2:	cf 93       	push	r28
     5a4:	df 93       	push	r29
     5a6:	ec 01       	movw	r28, r24
     5a8:	7b 01       	movw	r14, r22
	int gen1Freq = SYNC(self->gen1, getFrequency, 0);
     5aa:	40 e0       	ldi	r20, 0x00	; 0
     5ac:	50 e0       	ldi	r21, 0x00	; 0
     5ae:	64 e7       	ldi	r22, 0x74	; 116
     5b0:	74 e0       	ldi	r23, 0x04	; 4
     5b2:	8d 81       	ldd	r24, Y+5	; 0x05
     5b4:	9e 81       	ldd	r25, Y+6	; 0x06
     5b6:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <sync>
     5ba:	6c 01       	movw	r12, r24
	int gen2Freq = SYNC(self->gen2, getFrequency, 0);
     5bc:	40 e0       	ldi	r20, 0x00	; 0
     5be:	50 e0       	ldi	r21, 0x00	; 0
     5c0:	64 e7       	ldi	r22, 0x74	; 116
     5c2:	74 e0       	ldi	r23, 0x04	; 4
     5c4:	8f 81       	ldd	r24, Y+7	; 0x07
     5c6:	98 85       	ldd	r25, Y+8	; 0x08
     5c8:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <sync>
     5cc:	8c 01       	movw	r16, r24
	printAt(gen1Freq, 0); //gen1 hz at pos 0-1
     5ce:	b6 01       	movw	r22, r12
     5d0:	dd 0c       	add	r13, r13
     5d2:	88 0b       	sbc	r24, r24
     5d4:	99 0b       	sbc	r25, r25
     5d6:	40 e0       	ldi	r20, 0x00	; 0
     5d8:	50 e0       	ldi	r21, 0x00	; 0
     5da:	0e 94 76 02 	call	0x4ec	; 0x4ec <printAt>
	printAt(gen2Freq, 3); //gen2 hz at pos 3-4
     5de:	b8 01       	movw	r22, r16
     5e0:	11 0f       	add	r17, r17
     5e2:	88 0b       	sbc	r24, r24
     5e4:	99 0b       	sbc	r25, r25
     5e6:	43 e0       	ldi	r20, 0x03	; 3
     5e8:	50 e0       	ldi	r21, 0x00	; 0
     5ea:	0e 94 76 02 	call	0x4ec	; 0x4ec <printAt>
	activeGenIndicator(self, activeGen);
     5ee:	b7 01       	movw	r22, r14
     5f0:	ce 01       	movw	r24, r28
     5f2:	0e 94 b0 02 	call	0x560	; 0x560 <activeGenIndicator>
}
     5f6:	df 91       	pop	r29
     5f8:	cf 91       	pop	r28
     5fa:	1f 91       	pop	r17
     5fc:	0f 91       	pop	r16
     5fe:	ff 90       	pop	r15
     600:	ef 90       	pop	r14
     602:	df 90       	pop	r13
     604:	cf 90       	pop	r12
     606:	08 95       	ret

00000608 <joystickInteruptHandler>:
    PCMSK0 |= (1 << PCINT3) | (1 << PCINT2);
}


// Joystick input handler
void joystickInteruptHandler(JoystickHandler *self) { 
     608:	cf 92       	push	r12
     60a:	df 92       	push	r13
     60c:	ef 92       	push	r14
     60e:	ff 92       	push	r15
     610:	0f 93       	push	r16
     612:	1f 93       	push	r17
     614:	cf 93       	push	r28
     616:	df 93       	push	r29
     618:	ec 01       	movw	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     61a:	87 ea       	ldi	r24, 0xA7	; 167
     61c:	91 e6       	ldi	r25, 0x61	; 97
     61e:	01 97       	sbiw	r24, 0x01	; 1
     620:	f1 f7       	brne	.-4      	; 0x61e <joystickInteruptHandler+0x16>
     622:	00 c0       	rjmp	.+0      	; 0x624 <joystickInteruptHandler+0x1c>
     624:	00 00       	nop
	
	_delay_ms(100);
	
	// In
	if (!(PINB & (1 << PB4))) {
     626:	1c 99       	sbic	0x03, 4	; 3
     628:	12 c0       	rjmp	.+36     	; 0x64e <joystickInteruptHandler+0x46>
		ASYNC(self->BE, saveRestore, 0);
     62a:	0c 81       	ldd	r16, Y+4	; 0x04
     62c:	1d 81       	ldd	r17, Y+5	; 0x05
     62e:	c1 2c       	mov	r12, r1
     630:	d1 2c       	mov	r13, r1
     632:	0f 2e       	mov	r0, r31
     634:	f7 ef       	ldi	r31, 0xF7	; 247
     636:	ef 2e       	mov	r14, r31
     638:	f0 e0       	ldi	r31, 0x00	; 0
     63a:	ff 2e       	mov	r15, r31
     63c:	f0 2d       	mov	r31, r0
     63e:	20 e0       	ldi	r18, 0x00	; 0
     640:	30 e0       	ldi	r19, 0x00	; 0
     642:	a9 01       	movw	r20, r18
     644:	60 e0       	ldi	r22, 0x00	; 0
     646:	70 e0       	ldi	r23, 0x00	; 0
     648:	cb 01       	movw	r24, r22
     64a:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <async>
	}
	
	// Right
	if (!(PINE & (1 << PB3))) {
     64e:	63 99       	sbic	0x0c, 3	; 12
     650:	12 c0       	rjmp	.+36     	; 0x676 <joystickInteruptHandler+0x6e>
		ASYNC(self->BE, swithToRightGen, 0);
     652:	0c 81       	ldd	r16, Y+4	; 0x04
     654:	1d 81       	ldd	r17, Y+5	; 0x05
     656:	c1 2c       	mov	r12, r1
     658:	d1 2c       	mov	r13, r1
     65a:	0f 2e       	mov	r0, r31
     65c:	fa e8       	ldi	r31, 0x8A	; 138
     65e:	ef 2e       	mov	r14, r31
     660:	f0 e0       	ldi	r31, 0x00	; 0
     662:	ff 2e       	mov	r15, r31
     664:	f0 2d       	mov	r31, r0
     666:	20 e0       	ldi	r18, 0x00	; 0
     668:	30 e0       	ldi	r19, 0x00	; 0
     66a:	a9 01       	movw	r20, r18
     66c:	60 e0       	ldi	r22, 0x00	; 0
     66e:	70 e0       	ldi	r23, 0x00	; 0
     670:	cb 01       	movw	r24, r22
     672:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <async>
	}
	
	// Left
	if (!(PINE & (1 << PB2))) {
     676:	62 99       	sbic	0x0c, 2	; 12
     678:	12 c0       	rjmp	.+36     	; 0x69e <joystickInteruptHandler+0x96>
		ASYNC(self->BE, swithToLeftGen, 0);
     67a:	0c 81       	ldd	r16, Y+4	; 0x04
     67c:	1d 81       	ldd	r17, Y+5	; 0x05
     67e:	c1 2c       	mov	r12, r1
     680:	d1 2c       	mov	r13, r1
     682:	0f 2e       	mov	r0, r31
     684:	f7 e5       	ldi	r31, 0x57	; 87
     686:	ef 2e       	mov	r14, r31
     688:	f0 e0       	ldi	r31, 0x00	; 0
     68a:	ff 2e       	mov	r15, r31
     68c:	f0 2d       	mov	r31, r0
     68e:	20 e0       	ldi	r18, 0x00	; 0
     690:	30 e0       	ldi	r19, 0x00	; 0
     692:	a9 01       	movw	r20, r18
     694:	60 e0       	ldi	r22, 0x00	; 0
     696:	70 e0       	ldi	r23, 0x00	; 0
     698:	cb 01       	movw	r24, r22
     69a:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <async>
     69e:	9f e1       	ldi	r25, 0x1F	; 31
     6a0:	2f eb       	ldi	r18, 0xBF	; 191
     6a2:	82 e0       	ldi	r24, 0x02	; 2
     6a4:	91 50       	subi	r25, 0x01	; 1
     6a6:	20 40       	sbci	r18, 0x00	; 0
     6a8:	80 40       	sbci	r24, 0x00	; 0
     6aa:	e1 f7       	brne	.-8      	; 0x6a4 <joystickInteruptHandler+0x9c>
     6ac:	00 c0       	rjmp	.+0      	; 0x6ae <joystickInteruptHandler+0xa6>
     6ae:	00 00       	nop
	}
	
	_delay_ms(900);
	
	// Down
	if (!(PINB & (1 << PB7))) {
     6b0:	1f 99       	sbic	0x03, 7	; 3
     6b2:	24 c0       	rjmp	.+72     	; 0x6fc <joystickInteruptHandler+0xf4>
		ASYNC(self->BE, adjustFrequency, -1);	
     6b4:	0c 81       	ldd	r16, Y+4	; 0x04
     6b6:	1d 81       	ldd	r17, Y+5	; 0x05
     6b8:	cc 24       	eor	r12, r12
     6ba:	ca 94       	dec	r12
     6bc:	dc 2c       	mov	r13, r12
     6be:	0f 2e       	mov	r0, r31
     6c0:	fd eb       	ldi	r31, 0xBD	; 189
     6c2:	ef 2e       	mov	r14, r31
     6c4:	f0 e0       	ldi	r31, 0x00	; 0
     6c6:	ff 2e       	mov	r15, r31
     6c8:	f0 2d       	mov	r31, r0
     6ca:	20 e0       	ldi	r18, 0x00	; 0
     6cc:	30 e0       	ldi	r19, 0x00	; 0
     6ce:	a9 01       	movw	r20, r18
     6d0:	60 e0       	ldi	r22, 0x00	; 0
     6d2:	70 e0       	ldi	r23, 0x00	; 0
     6d4:	cb 01       	movw	r24, r22
     6d6:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <async>
		ASYNC(self, joystickInteruptHandler, 0);
     6da:	c1 2c       	mov	r12, r1
     6dc:	d1 2c       	mov	r13, r1
     6de:	0f 2e       	mov	r0, r31
     6e0:	f4 e0       	ldi	r31, 0x04	; 4
     6e2:	ef 2e       	mov	r14, r31
     6e4:	f3 e0       	ldi	r31, 0x03	; 3
     6e6:	ff 2e       	mov	r15, r31
     6e8:	f0 2d       	mov	r31, r0
     6ea:	8e 01       	movw	r16, r28
     6ec:	20 e0       	ldi	r18, 0x00	; 0
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	a9 01       	movw	r20, r18
     6f2:	60 e0       	ldi	r22, 0x00	; 0
     6f4:	70 e0       	ldi	r23, 0x00	; 0
     6f6:	cb 01       	movw	r24, r22
     6f8:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <async>
	}
	
	// Up
	if (!(PINB & (1 << PB6))) {
     6fc:	1e 99       	sbic	0x03, 6	; 3
     6fe:	24 c0       	rjmp	.+72     	; 0x748 <joystickInteruptHandler+0x140>
		ASYNC(self->BE, adjustFrequency, 1);
     700:	0c 81       	ldd	r16, Y+4	; 0x04
     702:	1d 81       	ldd	r17, Y+5	; 0x05
     704:	cc 24       	eor	r12, r12
     706:	c3 94       	inc	r12
     708:	d1 2c       	mov	r13, r1
     70a:	0f 2e       	mov	r0, r31
     70c:	fd eb       	ldi	r31, 0xBD	; 189
     70e:	ef 2e       	mov	r14, r31
     710:	f0 e0       	ldi	r31, 0x00	; 0
     712:	ff 2e       	mov	r15, r31
     714:	f0 2d       	mov	r31, r0
     716:	20 e0       	ldi	r18, 0x00	; 0
     718:	30 e0       	ldi	r19, 0x00	; 0
     71a:	a9 01       	movw	r20, r18
     71c:	60 e0       	ldi	r22, 0x00	; 0
     71e:	70 e0       	ldi	r23, 0x00	; 0
     720:	cb 01       	movw	r24, r22
     722:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <async>
		ASYNC(self, joystickInteruptHandler, 0);
     726:	c1 2c       	mov	r12, r1
     728:	d1 2c       	mov	r13, r1
     72a:	0f 2e       	mov	r0, r31
     72c:	f4 e0       	ldi	r31, 0x04	; 4
     72e:	ef 2e       	mov	r14, r31
     730:	f3 e0       	ldi	r31, 0x03	; 3
     732:	ff 2e       	mov	r15, r31
     734:	f0 2d       	mov	r31, r0
     736:	8e 01       	movw	r16, r28
     738:	20 e0       	ldi	r18, 0x00	; 0
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	a9 01       	movw	r20, r18
     73e:	60 e0       	ldi	r22, 0x00	; 0
     740:	70 e0       	ldi	r23, 0x00	; 0
     742:	cb 01       	movw	r24, r22
     744:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <async>
	}	
     748:	df 91       	pop	r29
     74a:	cf 91       	pop	r28
     74c:	1f 91       	pop	r17
     74e:	0f 91       	pop	r16
     750:	ff 90       	pop	r15
     752:	ef 90       	pop	r14
     754:	df 90       	pop	r13
     756:	cf 90       	pop	r12
     758:	08 95       	ret

0000075a <joystickInit>:
#include <util/delay.h>


void joystickInit() {
    // Input for: Down, Up, Click
    PORTB |= (1 << PB7) | (1 << PB6) | (1 << PB4);
     75a:	85 b1       	in	r24, 0x05	; 5
     75c:	80 6d       	ori	r24, 0xD0	; 208
     75e:	85 b9       	out	0x05, r24	; 5
    // Input for; Left, Right
    PORTE |= (1 << PE3) | (1 << PE2);
     760:	8e b1       	in	r24, 0x0e	; 14
     762:	8c 60       	ori	r24, 0x0C	; 12
     764:	8e b9       	out	0x0e, r24	; 14
    // Turn on interrupts
    EIMSK |= (1 << PCINT15) | (1 << PCINT14);
     766:	8d b3       	in	r24, 0x1d	; 29
     768:	80 6c       	ori	r24, 0xC0	; 192
     76a:	8d bb       	out	0x1d, r24	; 29

    // Define interrupts from PB7,6,4
    PCMSK1 |= (1 << PCINT15) | (1 << PCINT14) | (1 << PCINT12);
     76c:	ec e6       	ldi	r30, 0x6C	; 108
     76e:	f0 e0       	ldi	r31, 0x00	; 0
     770:	80 81       	ld	r24, Z
     772:	80 6d       	ori	r24, 0xD0	; 208
     774:	80 83       	st	Z, r24
    // Define interrupts from PE3,2
    PCMSK0 |= (1 << PCINT3) | (1 << PCINT2);
     776:	eb e6       	ldi	r30, 0x6B	; 107
     778:	f0 e0       	ldi	r31, 0x00	; 0
     77a:	80 81       	ld	r24, Z
     77c:	8c 60       	ori	r24, 0x0C	; 12
     77e:	80 83       	st	Z, r24
     780:	08 95       	ret

00000782 <sysInit>:
Backend BE = initBackend(&gen1, &gen2, &gui);
JoystickHandler joystick = initJoystickHandler(&BE);

void sysInit(){
    // Clock Prescale Register "maximum speed"
	CLKPR = 0b10000000; // Clock Prescaler Change Enable
     782:	e1 e6       	ldi	r30, 0x61	; 97
     784:	f0 e0       	ldi	r31, 0x00	; 0
     786:	80 e8       	ldi	r24, 0x80	; 128
     788:	80 83       	st	Z, r24
	CLKPR = 0b00000000; // Set 0 for sysclock
     78a:	10 82       	st	Z, r1
     78c:	08 95       	ret

0000078e <pinOutputInit>:
}

void pinOutputInit(){
    // Initialize Port E as output for PE4 and PE6
	DDRE |= (1 << PE4) | (1 << PE6);
     78e:	8d b1       	in	r24, 0x0d	; 13
     790:	80 65       	ori	r24, 0x50	; 80
     792:	8d b9       	out	0x0d, r24	; 13
     794:	08 95       	ret

00000796 <main>:
}

int main() {
    sysInit();
     796:	0e 94 c1 03 	call	0x782	; 0x782 <sysInit>
    pinOutputInit(); // Is this needed
     79a:	0e 94 c7 03 	call	0x78e	; 0x78e <pinOutputInit>
    joystickInit();
     79e:	0e 94 ad 03 	call	0x75a	; 0x75a <joystickInit>
    LCD_init();
     7a2:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LCD_init>
	
	
	
	
    // Install interrupt handler
    INSTALL(&joystick, joystickInteruptHandler, IRQ_PCINT0);
     7a6:	41 e0       	ldi	r20, 0x01	; 1
     7a8:	64 e0       	ldi	r22, 0x04	; 4
     7aa:	73 e0       	ldi	r23, 0x03	; 3
     7ac:	80 e5       	ldi	r24, 0x50	; 80
     7ae:	91 e0       	ldi	r25, 0x01	; 1
     7b0:	0e 94 9a 10 	call	0x2134	; 0x2134 <install>
	INSTALL(&joystick, joystickInteruptHandler, IRQ_PCINT1);
     7b4:	42 e0       	ldi	r20, 0x02	; 2
     7b6:	64 e0       	ldi	r22, 0x04	; 4
     7b8:	73 e0       	ldi	r23, 0x03	; 3
     7ba:	80 e5       	ldi	r24, 0x50	; 80
     7bc:	91 e0       	ldi	r25, 0x01	; 1
     7be:	0e 94 9a 10 	call	0x2134	; 0x2134 <install>
    
    // Start kernel
    return TINYTIMBER(&BE, startProgram, NULL);
     7c2:	40 e0       	ldi	r20, 0x00	; 0
     7c4:	50 e0       	ldi	r21, 0x00	; 0
     7c6:	6e e3       	ldi	r22, 0x3E	; 62
     7c8:	71 e0       	ldi	r23, 0x01	; 1
     7ca:	86 e5       	ldi	r24, 0x56	; 86
     7cc:	91 e0       	ldi	r25, 0x01	; 1
     7ce:	0e 94 b4 10 	call	0x2168	; 0x2168 <tinytimber>
	
	
}
     7d2:	08 95       	ret

000007d4 <turnOffPin>:
#include "PortWrite.h"
#include "TinyTimber.h"

// Set a specific bit on Port E high or low
void turnOffPin(PortWrite *self, uint8_t bit) {
    PORTE &= ~(1 << bit);
     7d4:	2e b1       	in	r18, 0x0e	; 14
     7d6:	81 e0       	ldi	r24, 0x01	; 1
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	02 c0       	rjmp	.+4      	; 0x7e0 <turnOffPin+0xc>
     7dc:	88 0f       	add	r24, r24
     7de:	99 1f       	adc	r25, r25
     7e0:	6a 95       	dec	r22
     7e2:	e2 f7       	brpl	.-8      	; 0x7dc <turnOffPin+0x8>
     7e4:	80 95       	com	r24
     7e6:	82 23       	and	r24, r18
     7e8:	8e b9       	out	0x0e, r24	; 14
     7ea:	08 95       	ret

000007ec <togglePin>:
}

// Toggle a specific bit on Port E
void togglePin(PortWrite *self, uint8_t bit) {
    PORTE ^= (1 << bit);   // Toggle the bit
     7ec:	2e b1       	in	r18, 0x0e	; 14
     7ee:	81 e0       	ldi	r24, 0x01	; 1
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	02 c0       	rjmp	.+4      	; 0x7f8 <togglePin+0xc>
     7f4:	88 0f       	add	r24, r24
     7f6:	99 1f       	adc	r25, r25
     7f8:	6a 95       	dec	r22
     7fa:	e2 f7       	brpl	.-8      	; 0x7f4 <togglePin+0x8>
     7fc:	82 27       	eor	r24, r18
     7fe:	8e b9       	out	0x0e, r24	; 14
     800:	08 95       	ret

00000802 <genFreq>:

int getFrequency(PulseGen *self) {
	return self->frequency;
}

void genFreq(PulseGen *self) {
     802:	cf 92       	push	r12
     804:	df 92       	push	r13
     806:	ef 92       	push	r14
     808:	ff 92       	push	r15
     80a:	0f 93       	push	r16
     80c:	1f 93       	push	r17
     80e:	cf 93       	push	r28
     810:	df 93       	push	r29
     812:	ec 01       	movw	r28, r24
	
	
	if (self->frequency == 0) {
     814:	6e 81       	ldd	r22, Y+6	; 0x06
     816:	7f 81       	ldd	r23, Y+7	; 0x07
     818:	61 15       	cp	r22, r1
     81a:	71 05       	cpc	r23, r1
     81c:	d9 f4       	brne	.+54     	; 0x854 <genFreq+0x52>
		SYNC(self->write, turnOffPin, self->bit);
     81e:	4c 81       	ldd	r20, Y+4	; 0x04
     820:	50 e0       	ldi	r21, 0x00	; 0
     822:	6a ee       	ldi	r22, 0xEA	; 234
     824:	73 e0       	ldi	r23, 0x03	; 3
     826:	8a 85       	ldd	r24, Y+10	; 0x0a
     828:	9b 85       	ldd	r25, Y+11	; 0x0b
     82a:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <sync>
		AFTER(SEC(1), self, genFreq, 0);
     82e:	c1 2c       	mov	r12, r1
     830:	d1 2c       	mov	r13, r1
     832:	0f 2e       	mov	r0, r31
     834:	f1 e0       	ldi	r31, 0x01	; 1
     836:	ef 2e       	mov	r14, r31
     838:	f4 e0       	ldi	r31, 0x04	; 4
     83a:	ff 2e       	mov	r15, r31
     83c:	f0 2d       	mov	r31, r0
     83e:	8e 01       	movw	r16, r28
     840:	20 e0       	ldi	r18, 0x00	; 0
     842:	30 e0       	ldi	r19, 0x00	; 0
     844:	a9 01       	movw	r20, r18
     846:	62 e1       	ldi	r22, 0x12	; 18
     848:	7a e7       	ldi	r23, 0x7A	; 122
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <async>
     852:	31 c0       	rjmp	.+98     	; 0x8b6 <genFreq+0xb4>
	} else {		
		int halfFreq = (int)(500 / self->frequency);
		AFTER(MSEC(halfFreq), self, genFreq, 0);
     854:	84 ef       	ldi	r24, 0xF4	; 244
     856:	91 e0       	ldi	r25, 0x01	; 1
     858:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__divmodhi4>
     85c:	2d e7       	ldi	r18, 0x7D	; 125
     85e:	30 e0       	ldi	r19, 0x00	; 0
     860:	db 01       	movw	r26, r22
     862:	0e 94 09 11 	call	0x2212	; 0x2212 <__usmulhisi3>
     866:	8b 01       	movw	r16, r22
     868:	9c 01       	movw	r18, r24
     86a:	99 23       	and	r25, r25
     86c:	24 f4       	brge	.+8      	; 0x876 <genFreq+0x74>
     86e:	0d 5f       	subi	r16, 0xFD	; 253
     870:	1f 4f       	sbci	r17, 0xFF	; 255
     872:	2f 4f       	sbci	r18, 0xFF	; 255
     874:	3f 4f       	sbci	r19, 0xFF	; 255
     876:	c9 01       	movw	r24, r18
     878:	b8 01       	movw	r22, r16
     87a:	95 95       	asr	r25
     87c:	87 95       	ror	r24
     87e:	77 95       	ror	r23
     880:	67 95       	ror	r22
     882:	95 95       	asr	r25
     884:	87 95       	ror	r24
     886:	77 95       	ror	r23
     888:	67 95       	ror	r22
     88a:	c1 2c       	mov	r12, r1
     88c:	d1 2c       	mov	r13, r1
     88e:	0f 2e       	mov	r0, r31
     890:	f1 e0       	ldi	r31, 0x01	; 1
     892:	ef 2e       	mov	r14, r31
     894:	f4 e0       	ldi	r31, 0x04	; 4
     896:	ff 2e       	mov	r15, r31
     898:	f0 2d       	mov	r31, r0
     89a:	8e 01       	movw	r16, r28
     89c:	20 e0       	ldi	r18, 0x00	; 0
     89e:	30 e0       	ldi	r19, 0x00	; 0
     8a0:	a9 01       	movw	r20, r18
     8a2:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <async>
		SYNC(self->write, togglePin, self->bit);
     8a6:	4c 81       	ldd	r20, Y+4	; 0x04
     8a8:	50 e0       	ldi	r21, 0x00	; 0
     8aa:	66 ef       	ldi	r22, 0xF6	; 246
     8ac:	73 e0       	ldi	r23, 0x03	; 3
     8ae:	8a 85       	ldd	r24, Y+10	; 0x0a
     8b0:	9b 85       	ldd	r25, Y+11	; 0x0b
     8b2:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <sync>
			_delay_ms(freq);
			
		}
	}
	*/
     8b6:	df 91       	pop	r29
     8b8:	cf 91       	pop	r28
     8ba:	1f 91       	pop	r17
     8bc:	0f 91       	pop	r16
     8be:	ff 90       	pop	r15
     8c0:	ef 90       	pop	r14
     8c2:	df 90       	pop	r13
     8c4:	cf 90       	pop	r12
     8c6:	08 95       	ret

000008c8 <setFrequency>:
#include <avr/io.h>
#include "PulseGen.h"
#include <util/delay.h>

void setFrequency(PulseGen *self, int freq) {
	self->frequency = freq;
     8c8:	fc 01       	movw	r30, r24
     8ca:	77 83       	std	Z+7, r23	; 0x07
     8cc:	66 83       	std	Z+6, r22	; 0x06
     8ce:	08 95       	ret

000008d0 <save>:
}

// Saves the freq
void save(PulseGen *self) {
	self->saved_freq = self->frequency;
     8d0:	fc 01       	movw	r30, r24
     8d2:	26 81       	ldd	r18, Z+6	; 0x06
     8d4:	37 81       	ldd	r19, Z+7	; 0x07
     8d6:	31 87       	std	Z+9, r19	; 0x09
     8d8:	20 87       	std	Z+8, r18	; 0x08
     8da:	08 95       	ret

000008dc <restore>:
}

// Restores freq to last saved
void restore(PulseGen *self) {
	self->frequency = self->saved_freq;
     8dc:	fc 01       	movw	r30, r24
     8de:	20 85       	ldd	r18, Z+8	; 0x08
     8e0:	31 85       	ldd	r19, Z+9	; 0x09
     8e2:	37 83       	std	Z+7, r19	; 0x07
     8e4:	26 83       	std	Z+6, r18	; 0x06
     8e6:	08 95       	ret

000008e8 <getFrequency>:
}

int getFrequency(PulseGen *self) {
	return self->frequency;
}
     8e8:	fc 01       	movw	r30, r24
     8ea:	86 81       	ldd	r24, Z+6	; 0x06
     8ec:	97 81       	ldd	r25, Z+7	; 0x07
     8ee:	08 95       	ret

000008f0 <initialize>:
     8f0:	cf 93       	push	r28
     8f2:	df 93       	push	r29
     8f4:	00 d0       	rcall	.+0      	; 0x8f6 <initialize+0x6>
     8f6:	00 d0       	rcall	.+0      	; 0x8f8 <initialize+0x8>
     8f8:	cd b7       	in	r28, 0x3d	; 61
     8fa:	de b7       	in	r29, 0x3e	; 62
     8fc:	8b e8       	ldi	r24, 0x8B	; 139
     8fe:	92 e0       	ldi	r25, 0x02	; 2
     900:	2b e6       	ldi	r18, 0x6B	; 107
     902:	33 e0       	ldi	r19, 0x03	; 3
     904:	fc 01       	movw	r30, r24
     906:	70 97       	sbiw	r30, 0x10	; 16
     908:	91 83       	std	Z+1, r25	; 0x01
     90a:	80 83       	st	Z, r24
     90c:	40 96       	adiw	r24, 0x10	; 16
     90e:	82 17       	cp	r24, r18
     910:	93 07       	cpc	r25, r19
     912:	c1 f7       	brne	.-16     	; 0x904 <initialize+0x14>
     914:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <messages+0xe1>
     918:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <messages+0xe0>
     91c:	e6 ec       	ldi	r30, 0xC6	; 198
     91e:	f1 e0       	ldi	r31, 0x01	; 1
     920:	83 ee       	ldi	r24, 0xE3	; 227
     922:	91 e0       	ldi	r25, 0x01	; 1
     924:	91 83       	std	Z+1, r25	; 0x01
     926:	80 83       	st	Z, r24
     928:	80 e0       	ldi	r24, 0x00	; 0
     92a:	92 e0       	ldi	r25, 0x02	; 2
     92c:	96 8f       	std	Z+30, r25	; 0x1e
     92e:	85 8f       	std	Z+29, r24	; 0x1d
     930:	ad e1       	ldi	r26, 0x1D	; 29
     932:	b2 e0       	ldi	r27, 0x02	; 2
     934:	b3 af       	std	Z+59, r27	; 0x3b
     936:	a2 af       	std	Z+58, r26	; 0x3a
     938:	1d 92       	st	X+, r1
     93a:	1c 92       	st	X, r1
     93c:	fa 83       	std	Y+2, r31	; 0x02
     93e:	e9 83       	std	Y+1, r30	; 0x01
     940:	e7 ec       	ldi	r30, 0xC7	; 199
     942:	f3 e0       	ldi	r31, 0x03	; 3
     944:	fc 83       	std	Y+4, r31	; 0x04
     946:	eb 83       	std	Y+3, r30	; 0x03
     948:	89 81       	ldd	r24, Y+1	; 0x01
     94a:	9a 81       	ldd	r25, Y+2	; 0x02
     94c:	06 96       	adiw	r24, 0x06	; 6
     94e:	0e 94 55 11 	call	0x22aa	; 0x22aa <setjmp>
     952:	8b 81       	ldd	r24, Y+3	; 0x03
     954:	9c 81       	ldd	r25, Y+4	; 0x04
     956:	e9 81       	ldd	r30, Y+1	; 0x01
     958:	fa 81       	ldd	r31, Y+2	; 0x02
     95a:	97 8b       	std	Z+23, r25	; 0x17
     95c:	86 8b       	std	Z+22, r24	; 0x16
     95e:	91 8f       	std	Z+25, r25	; 0x19
     960:	80 8f       	std	Z+24, r24	; 0x18
     962:	8d e0       	ldi	r24, 0x0D	; 13
     964:	90 e1       	ldi	r25, 0x10	; 16
     966:	94 8f       	std	Z+28, r25	; 0x1c
     968:	83 8f       	std	Z+27, r24	; 0x1b
     96a:	15 82       	std	Z+5, r1	; 0x05
     96c:	14 82       	std	Z+4, r1	; 0x04
     96e:	7d 96       	adiw	r30, 0x1d	; 29
     970:	fa 83       	std	Y+2, r31	; 0x02
     972:	e9 83       	std	Y+1, r30	; 0x01
     974:	eb 81       	ldd	r30, Y+3	; 0x03
     976:	fc 81       	ldd	r31, Y+4	; 0x04
     978:	e0 5a       	subi	r30, 0xA0	; 160
     97a:	ff 4f       	sbci	r31, 0xFF	; 255
     97c:	fc 83       	std	Y+4, r31	; 0x04
     97e:	eb 83       	std	Y+3, r30	; 0x03
     980:	89 81       	ldd	r24, Y+1	; 0x01
     982:	9a 81       	ldd	r25, Y+2	; 0x02
     984:	8a 53       	subi	r24, 0x3A	; 58
     986:	92 40       	sbci	r25, 0x02	; 2
     988:	f9 f6       	brne	.-66     	; 0x948 <initialize+0x58>
     98a:	ee e5       	ldi	r30, 0x5E	; 94
     98c:	f2 e0       	ldi	r31, 0x02	; 2
     98e:	11 82       	std	Z+1, r1	; 0x01
     990:	10 82       	st	Z, r1
     992:	15 82       	std	Z+5, r1	; 0x05
     994:	14 82       	std	Z+4, r1	; 0x04
     996:	13 82       	std	Z+3, r1	; 0x03
     998:	12 82       	std	Z+2, r1	; 0x02
     99a:	e1 e6       	ldi	r30, 0x61	; 97
     99c:	f0 e0       	ldi	r31, 0x00	; 0
     99e:	80 e8       	ldi	r24, 0x80	; 128
     9a0:	80 83       	st	Z, r24
     9a2:	10 82       	st	Z, r1
     9a4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     9a8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     9ac:	84 e0       	ldi	r24, 0x04	; 4
     9ae:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     9b2:	81 e0       	ldi	r24, 0x01	; 1
     9b4:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
     9b8:	0f 90       	pop	r0
     9ba:	0f 90       	pop	r0
     9bc:	0f 90       	pop	r0
     9be:	0f 90       	pop	r0
     9c0:	df 91       	pop	r29
     9c2:	cf 91       	pop	r28
     9c4:	08 95       	ret

000009c6 <dispatch>:
     9c6:	cf 93       	push	r28
     9c8:	df 93       	push	r29
     9ca:	00 d0       	rcall	.+0      	; 0x9cc <dispatch+0x6>
     9cc:	cd b7       	in	r28, 0x3d	; 61
     9ce:	de b7       	in	r29, 0x3e	; 62
     9d0:	9a 83       	std	Y+2, r25	; 0x02
     9d2:	89 83       	std	Y+1, r24	; 0x01
     9d4:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <current>
     9d8:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <current+0x1>
     9dc:	06 96       	adiw	r24, 0x06	; 6
     9de:	0e 94 55 11 	call	0x22aa	; 0x22aa <setjmp>
     9e2:	89 2b       	or	r24, r25
     9e4:	59 f4       	brne	.+22     	; 0x9fc <dispatch+0x36>
     9e6:	89 81       	ldd	r24, Y+1	; 0x01
     9e8:	9a 81       	ldd	r25, Y+2	; 0x02
     9ea:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <current+0x1>
     9ee:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <current>
     9f2:	61 e0       	ldi	r22, 0x01	; 1
     9f4:	70 e0       	ldi	r23, 0x00	; 0
     9f6:	06 96       	adiw	r24, 0x06	; 6
     9f8:	0e 94 75 11 	call	0x22ea	; 0x22ea <longjmp>
     9fc:	0f 90       	pop	r0
     9fe:	0f 90       	pop	r0
     a00:	df 91       	pop	r29
     a02:	cf 91       	pop	r28
     a04:	08 95       	ret

00000a06 <schedule>:
     a06:	0f 93       	push	r16
     a08:	1f 93       	push	r17
     a0a:	cf 93       	push	r28
     a0c:	df 93       	push	r29
     a0e:	e0 91 a0 01 	lds	r30, 0x01A0	; 0x8001a0 <msgQ>
     a12:	f0 91 a1 01 	lds	r31, 0x01A1	; 0x8001a1 <msgQ+0x1>
     a16:	30 97       	sbiw	r30, 0x00	; 0
     a18:	61 f1       	breq	.+88     	; 0xa72 <schedule+0x6c>
     a1a:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <threadPool>
     a1e:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <threadPool+0x1>
     a22:	00 97       	sbiw	r24, 0x00	; 0
     a24:	31 f1       	breq	.+76     	; 0xa72 <schedule+0x6c>
     a26:	c0 91 85 01 	lds	r28, 0x0185	; 0x800185 <activeStack>
     a2a:	d0 91 86 01 	lds	r29, 0x0186	; 0x800186 <activeStack+0x1>
     a2e:	aa 81       	ldd	r26, Y+2	; 0x02
     a30:	bb 81       	ldd	r27, Y+3	; 0x03
     a32:	10 97       	sbiw	r26, 0x00	; 0
     a34:	79 f0       	breq	.+30     	; 0xa54 <schedule+0x4e>
     a36:	46 81       	ldd	r20, Z+6	; 0x06
     a38:	57 81       	ldd	r21, Z+7	; 0x07
     a3a:	60 85       	ldd	r22, Z+8	; 0x08
     a3c:	71 85       	ldd	r23, Z+9	; 0x09
     a3e:	16 96       	adiw	r26, 0x06	; 6
     a40:	0d 91       	ld	r16, X+
     a42:	1d 91       	ld	r17, X+
     a44:	2d 91       	ld	r18, X+
     a46:	3c 91       	ld	r19, X
     a48:	19 97       	sbiw	r26, 0x09	; 9
     a4a:	40 1b       	sub	r20, r16
     a4c:	51 0b       	sbc	r21, r17
     a4e:	62 0b       	sbc	r22, r18
     a50:	73 0b       	sbc	r23, r19
     a52:	7a f4       	brpl	.+30     	; 0xa72 <schedule+0x6c>
     a54:	fc 01       	movw	r30, r24
     a56:	20 81       	ld	r18, Z
     a58:	31 81       	ldd	r19, Z+1	; 0x01
     a5a:	30 93 88 01 	sts	0x0188, r19	; 0x800188 <threadPool+0x1>
     a5e:	20 93 87 01 	sts	0x0187, r18	; 0x800187 <threadPool>
     a62:	d1 83       	std	Z+1, r29	; 0x01
     a64:	c0 83       	st	Z, r28
     a66:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <activeStack+0x1>
     a6a:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <activeStack>
     a6e:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <dispatch>
     a72:	df 91       	pop	r29
     a74:	cf 91       	pop	r28
     a76:	1f 91       	pop	r17
     a78:	0f 91       	pop	r16
     a7a:	08 95       	ret

00000a7c <__vector_1>:
     a7c:	1f 92       	push	r1
     a7e:	0f 92       	push	r0
     a80:	0f b6       	in	r0, 0x3f	; 63
     a82:	0f 92       	push	r0
     a84:	11 24       	eor	r1, r1
     a86:	2f 93       	push	r18
     a88:	3f 93       	push	r19
     a8a:	4f 93       	push	r20
     a8c:	5f 93       	push	r21
     a8e:	6f 93       	push	r22
     a90:	7f 93       	push	r23
     a92:	8f 93       	push	r24
     a94:	9f 93       	push	r25
     a96:	af 93       	push	r26
     a98:	bf 93       	push	r27
     a9a:	ef 93       	push	r30
     a9c:	ff 93       	push	r31
     a9e:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <overflows>
     aa2:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <overflows+0x1>
     aa6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     aaa:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     aae:	c9 01       	movw	r24, r18
     ab0:	03 2e       	mov	r0, r19
     ab2:	00 0c       	add	r0, r0
     ab4:	aa 0b       	sbc	r26, r26
     ab6:	bb 0b       	sbc	r27, r27
     ab8:	dc 01       	movw	r26, r24
     aba:	99 27       	eor	r25, r25
     abc:	88 27       	eor	r24, r24
     abe:	60 e0       	ldi	r22, 0x00	; 0
     ac0:	70 e0       	ldi	r23, 0x00	; 0
     ac2:	84 2b       	or	r24, r20
     ac4:	95 2b       	or	r25, r21
     ac6:	a6 2b       	or	r26, r22
     ac8:	b7 2b       	or	r27, r23
     aca:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
     ace:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
     ad2:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
     ad6:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
     ada:	b0 9b       	sbis	0x16, 0	; 22
     adc:	1b c0       	rjmp	.+54     	; 0xb14 <__vector_1+0x98>
     ade:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     ae2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     ae6:	c9 01       	movw	r24, r18
     ae8:	01 96       	adiw	r24, 0x01	; 1
     aea:	09 2e       	mov	r0, r25
     aec:	00 0c       	add	r0, r0
     aee:	aa 0b       	sbc	r26, r26
     af0:	bb 0b       	sbc	r27, r27
     af2:	dc 01       	movw	r26, r24
     af4:	99 27       	eor	r25, r25
     af6:	88 27       	eor	r24, r24
     af8:	60 e0       	ldi	r22, 0x00	; 0
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	84 2b       	or	r24, r20
     afe:	95 2b       	or	r25, r21
     b00:	a6 2b       	or	r26, r22
     b02:	b7 2b       	or	r27, r23
     b04:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
     b08:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
     b0c:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
     b10:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
     b14:	e0 91 3a 02 	lds	r30, 0x023A	; 0x80023a <mtable>
     b18:	f0 91 3b 02 	lds	r31, 0x023B	; 0x80023b <mtable+0x1>
     b1c:	30 97       	sbiw	r30, 0x00	; 0
     b1e:	39 f0       	breq	.+14     	; 0xb2e <__vector_1+0xb2>
     b20:	60 e0       	ldi	r22, 0x00	; 0
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <otable>
     b28:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <otable+0x1>
     b2c:	09 95       	icall
     b2e:	0e 94 03 05 	call	0xa06	; 0xa06 <schedule>
     b32:	ff 91       	pop	r31
     b34:	ef 91       	pop	r30
     b36:	bf 91       	pop	r27
     b38:	af 91       	pop	r26
     b3a:	9f 91       	pop	r25
     b3c:	8f 91       	pop	r24
     b3e:	7f 91       	pop	r23
     b40:	6f 91       	pop	r22
     b42:	5f 91       	pop	r21
     b44:	4f 91       	pop	r20
     b46:	3f 91       	pop	r19
     b48:	2f 91       	pop	r18
     b4a:	0f 90       	pop	r0
     b4c:	0f be       	out	0x3f, r0	; 63
     b4e:	0f 90       	pop	r0
     b50:	1f 90       	pop	r1
     b52:	18 95       	reti

00000b54 <__vector_2>:
     b54:	1f 92       	push	r1
     b56:	0f 92       	push	r0
     b58:	0f b6       	in	r0, 0x3f	; 63
     b5a:	0f 92       	push	r0
     b5c:	11 24       	eor	r1, r1
     b5e:	2f 93       	push	r18
     b60:	3f 93       	push	r19
     b62:	4f 93       	push	r20
     b64:	5f 93       	push	r21
     b66:	6f 93       	push	r22
     b68:	7f 93       	push	r23
     b6a:	8f 93       	push	r24
     b6c:	9f 93       	push	r25
     b6e:	af 93       	push	r26
     b70:	bf 93       	push	r27
     b72:	ef 93       	push	r30
     b74:	ff 93       	push	r31
     b76:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <overflows>
     b7a:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <overflows+0x1>
     b7e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     b82:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     b86:	c9 01       	movw	r24, r18
     b88:	03 2e       	mov	r0, r19
     b8a:	00 0c       	add	r0, r0
     b8c:	aa 0b       	sbc	r26, r26
     b8e:	bb 0b       	sbc	r27, r27
     b90:	dc 01       	movw	r26, r24
     b92:	99 27       	eor	r25, r25
     b94:	88 27       	eor	r24, r24
     b96:	60 e0       	ldi	r22, 0x00	; 0
     b98:	70 e0       	ldi	r23, 0x00	; 0
     b9a:	84 2b       	or	r24, r20
     b9c:	95 2b       	or	r25, r21
     b9e:	a6 2b       	or	r26, r22
     ba0:	b7 2b       	or	r27, r23
     ba2:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
     ba6:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
     baa:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
     bae:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
     bb2:	b0 9b       	sbis	0x16, 0	; 22
     bb4:	1b c0       	rjmp	.+54     	; 0xbec <__vector_2+0x98>
     bb6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     bba:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     bbe:	c9 01       	movw	r24, r18
     bc0:	01 96       	adiw	r24, 0x01	; 1
     bc2:	09 2e       	mov	r0, r25
     bc4:	00 0c       	add	r0, r0
     bc6:	aa 0b       	sbc	r26, r26
     bc8:	bb 0b       	sbc	r27, r27
     bca:	dc 01       	movw	r26, r24
     bcc:	99 27       	eor	r25, r25
     bce:	88 27       	eor	r24, r24
     bd0:	60 e0       	ldi	r22, 0x00	; 0
     bd2:	70 e0       	ldi	r23, 0x00	; 0
     bd4:	84 2b       	or	r24, r20
     bd6:	95 2b       	or	r25, r21
     bd8:	a6 2b       	or	r26, r22
     bda:	b7 2b       	or	r27, r23
     bdc:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
     be0:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
     be4:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
     be8:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
     bec:	e0 91 3c 02 	lds	r30, 0x023C	; 0x80023c <mtable+0x2>
     bf0:	f0 91 3d 02 	lds	r31, 0x023D	; 0x80023d <mtable+0x3>
     bf4:	30 97       	sbiw	r30, 0x00	; 0
     bf6:	39 f0       	breq	.+14     	; 0xc06 <__vector_2+0xb2>
     bf8:	61 e0       	ldi	r22, 0x01	; 1
     bfa:	70 e0       	ldi	r23, 0x00	; 0
     bfc:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <otable+0x2>
     c00:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <otable+0x3>
     c04:	09 95       	icall
     c06:	0e 94 03 05 	call	0xa06	; 0xa06 <schedule>
     c0a:	ff 91       	pop	r31
     c0c:	ef 91       	pop	r30
     c0e:	bf 91       	pop	r27
     c10:	af 91       	pop	r26
     c12:	9f 91       	pop	r25
     c14:	8f 91       	pop	r24
     c16:	7f 91       	pop	r23
     c18:	6f 91       	pop	r22
     c1a:	5f 91       	pop	r21
     c1c:	4f 91       	pop	r20
     c1e:	3f 91       	pop	r19
     c20:	2f 91       	pop	r18
     c22:	0f 90       	pop	r0
     c24:	0f be       	out	0x3f, r0	; 63
     c26:	0f 90       	pop	r0
     c28:	1f 90       	pop	r1
     c2a:	18 95       	reti

00000c2c <__vector_3>:
     c2c:	1f 92       	push	r1
     c2e:	0f 92       	push	r0
     c30:	0f b6       	in	r0, 0x3f	; 63
     c32:	0f 92       	push	r0
     c34:	11 24       	eor	r1, r1
     c36:	2f 93       	push	r18
     c38:	3f 93       	push	r19
     c3a:	4f 93       	push	r20
     c3c:	5f 93       	push	r21
     c3e:	6f 93       	push	r22
     c40:	7f 93       	push	r23
     c42:	8f 93       	push	r24
     c44:	9f 93       	push	r25
     c46:	af 93       	push	r26
     c48:	bf 93       	push	r27
     c4a:	ef 93       	push	r30
     c4c:	ff 93       	push	r31
     c4e:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <overflows>
     c52:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <overflows+0x1>
     c56:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     c5a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     c5e:	c9 01       	movw	r24, r18
     c60:	03 2e       	mov	r0, r19
     c62:	00 0c       	add	r0, r0
     c64:	aa 0b       	sbc	r26, r26
     c66:	bb 0b       	sbc	r27, r27
     c68:	dc 01       	movw	r26, r24
     c6a:	99 27       	eor	r25, r25
     c6c:	88 27       	eor	r24, r24
     c6e:	60 e0       	ldi	r22, 0x00	; 0
     c70:	70 e0       	ldi	r23, 0x00	; 0
     c72:	84 2b       	or	r24, r20
     c74:	95 2b       	or	r25, r21
     c76:	a6 2b       	or	r26, r22
     c78:	b7 2b       	or	r27, r23
     c7a:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
     c7e:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
     c82:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
     c86:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
     c8a:	b0 9b       	sbis	0x16, 0	; 22
     c8c:	1b c0       	rjmp	.+54     	; 0xcc4 <__vector_3+0x98>
     c8e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     c92:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     c96:	c9 01       	movw	r24, r18
     c98:	01 96       	adiw	r24, 0x01	; 1
     c9a:	09 2e       	mov	r0, r25
     c9c:	00 0c       	add	r0, r0
     c9e:	aa 0b       	sbc	r26, r26
     ca0:	bb 0b       	sbc	r27, r27
     ca2:	dc 01       	movw	r26, r24
     ca4:	99 27       	eor	r25, r25
     ca6:	88 27       	eor	r24, r24
     ca8:	60 e0       	ldi	r22, 0x00	; 0
     caa:	70 e0       	ldi	r23, 0x00	; 0
     cac:	84 2b       	or	r24, r20
     cae:	95 2b       	or	r25, r21
     cb0:	a6 2b       	or	r26, r22
     cb2:	b7 2b       	or	r27, r23
     cb4:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
     cb8:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
     cbc:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
     cc0:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
     cc4:	e0 91 3e 02 	lds	r30, 0x023E	; 0x80023e <mtable+0x4>
     cc8:	f0 91 3f 02 	lds	r31, 0x023F	; 0x80023f <mtable+0x5>
     ccc:	30 97       	sbiw	r30, 0x00	; 0
     cce:	39 f0       	breq	.+14     	; 0xcde <__vector_3+0xb2>
     cd0:	62 e0       	ldi	r22, 0x02	; 2
     cd2:	70 e0       	ldi	r23, 0x00	; 0
     cd4:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <otable+0x4>
     cd8:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <otable+0x5>
     cdc:	09 95       	icall
     cde:	0e 94 03 05 	call	0xa06	; 0xa06 <schedule>
     ce2:	ff 91       	pop	r31
     ce4:	ef 91       	pop	r30
     ce6:	bf 91       	pop	r27
     ce8:	af 91       	pop	r26
     cea:	9f 91       	pop	r25
     cec:	8f 91       	pop	r24
     cee:	7f 91       	pop	r23
     cf0:	6f 91       	pop	r22
     cf2:	5f 91       	pop	r21
     cf4:	4f 91       	pop	r20
     cf6:	3f 91       	pop	r19
     cf8:	2f 91       	pop	r18
     cfa:	0f 90       	pop	r0
     cfc:	0f be       	out	0x3f, r0	; 63
     cfe:	0f 90       	pop	r0
     d00:	1f 90       	pop	r1
     d02:	18 95       	reti

00000d04 <__vector_4>:
     d04:	1f 92       	push	r1
     d06:	0f 92       	push	r0
     d08:	0f b6       	in	r0, 0x3f	; 63
     d0a:	0f 92       	push	r0
     d0c:	11 24       	eor	r1, r1
     d0e:	2f 93       	push	r18
     d10:	3f 93       	push	r19
     d12:	4f 93       	push	r20
     d14:	5f 93       	push	r21
     d16:	6f 93       	push	r22
     d18:	7f 93       	push	r23
     d1a:	8f 93       	push	r24
     d1c:	9f 93       	push	r25
     d1e:	af 93       	push	r26
     d20:	bf 93       	push	r27
     d22:	ef 93       	push	r30
     d24:	ff 93       	push	r31
     d26:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <overflows>
     d2a:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <overflows+0x1>
     d2e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     d32:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     d36:	c9 01       	movw	r24, r18
     d38:	03 2e       	mov	r0, r19
     d3a:	00 0c       	add	r0, r0
     d3c:	aa 0b       	sbc	r26, r26
     d3e:	bb 0b       	sbc	r27, r27
     d40:	dc 01       	movw	r26, r24
     d42:	99 27       	eor	r25, r25
     d44:	88 27       	eor	r24, r24
     d46:	60 e0       	ldi	r22, 0x00	; 0
     d48:	70 e0       	ldi	r23, 0x00	; 0
     d4a:	84 2b       	or	r24, r20
     d4c:	95 2b       	or	r25, r21
     d4e:	a6 2b       	or	r26, r22
     d50:	b7 2b       	or	r27, r23
     d52:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
     d56:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
     d5a:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
     d5e:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
     d62:	b0 9b       	sbis	0x16, 0	; 22
     d64:	1b c0       	rjmp	.+54     	; 0xd9c <__vector_4+0x98>
     d66:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     d6a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     d6e:	c9 01       	movw	r24, r18
     d70:	01 96       	adiw	r24, 0x01	; 1
     d72:	09 2e       	mov	r0, r25
     d74:	00 0c       	add	r0, r0
     d76:	aa 0b       	sbc	r26, r26
     d78:	bb 0b       	sbc	r27, r27
     d7a:	dc 01       	movw	r26, r24
     d7c:	99 27       	eor	r25, r25
     d7e:	88 27       	eor	r24, r24
     d80:	60 e0       	ldi	r22, 0x00	; 0
     d82:	70 e0       	ldi	r23, 0x00	; 0
     d84:	84 2b       	or	r24, r20
     d86:	95 2b       	or	r25, r21
     d88:	a6 2b       	or	r26, r22
     d8a:	b7 2b       	or	r27, r23
     d8c:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
     d90:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
     d94:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
     d98:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
     d9c:	e0 91 40 02 	lds	r30, 0x0240	; 0x800240 <mtable+0x6>
     da0:	f0 91 41 02 	lds	r31, 0x0241	; 0x800241 <mtable+0x7>
     da4:	30 97       	sbiw	r30, 0x00	; 0
     da6:	39 f0       	breq	.+14     	; 0xdb6 <__vector_4+0xb2>
     da8:	63 e0       	ldi	r22, 0x03	; 3
     daa:	70 e0       	ldi	r23, 0x00	; 0
     dac:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <otable+0x6>
     db0:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <otable+0x7>
     db4:	09 95       	icall
     db6:	0e 94 03 05 	call	0xa06	; 0xa06 <schedule>
     dba:	ff 91       	pop	r31
     dbc:	ef 91       	pop	r30
     dbe:	bf 91       	pop	r27
     dc0:	af 91       	pop	r26
     dc2:	9f 91       	pop	r25
     dc4:	8f 91       	pop	r24
     dc6:	7f 91       	pop	r23
     dc8:	6f 91       	pop	r22
     dca:	5f 91       	pop	r21
     dcc:	4f 91       	pop	r20
     dce:	3f 91       	pop	r19
     dd0:	2f 91       	pop	r18
     dd2:	0f 90       	pop	r0
     dd4:	0f be       	out	0x3f, r0	; 63
     dd6:	0f 90       	pop	r0
     dd8:	1f 90       	pop	r1
     dda:	18 95       	reti

00000ddc <__vector_5>:
     ddc:	1f 92       	push	r1
     dde:	0f 92       	push	r0
     de0:	0f b6       	in	r0, 0x3f	; 63
     de2:	0f 92       	push	r0
     de4:	11 24       	eor	r1, r1
     de6:	2f 93       	push	r18
     de8:	3f 93       	push	r19
     dea:	4f 93       	push	r20
     dec:	5f 93       	push	r21
     dee:	6f 93       	push	r22
     df0:	7f 93       	push	r23
     df2:	8f 93       	push	r24
     df4:	9f 93       	push	r25
     df6:	af 93       	push	r26
     df8:	bf 93       	push	r27
     dfa:	ef 93       	push	r30
     dfc:	ff 93       	push	r31
     dfe:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <overflows>
     e02:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <overflows+0x1>
     e06:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     e0a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     e0e:	c9 01       	movw	r24, r18
     e10:	03 2e       	mov	r0, r19
     e12:	00 0c       	add	r0, r0
     e14:	aa 0b       	sbc	r26, r26
     e16:	bb 0b       	sbc	r27, r27
     e18:	dc 01       	movw	r26, r24
     e1a:	99 27       	eor	r25, r25
     e1c:	88 27       	eor	r24, r24
     e1e:	60 e0       	ldi	r22, 0x00	; 0
     e20:	70 e0       	ldi	r23, 0x00	; 0
     e22:	84 2b       	or	r24, r20
     e24:	95 2b       	or	r25, r21
     e26:	a6 2b       	or	r26, r22
     e28:	b7 2b       	or	r27, r23
     e2a:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
     e2e:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
     e32:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
     e36:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
     e3a:	b0 9b       	sbis	0x16, 0	; 22
     e3c:	1b c0       	rjmp	.+54     	; 0xe74 <__vector_5+0x98>
     e3e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     e42:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     e46:	c9 01       	movw	r24, r18
     e48:	01 96       	adiw	r24, 0x01	; 1
     e4a:	09 2e       	mov	r0, r25
     e4c:	00 0c       	add	r0, r0
     e4e:	aa 0b       	sbc	r26, r26
     e50:	bb 0b       	sbc	r27, r27
     e52:	dc 01       	movw	r26, r24
     e54:	99 27       	eor	r25, r25
     e56:	88 27       	eor	r24, r24
     e58:	60 e0       	ldi	r22, 0x00	; 0
     e5a:	70 e0       	ldi	r23, 0x00	; 0
     e5c:	84 2b       	or	r24, r20
     e5e:	95 2b       	or	r25, r21
     e60:	a6 2b       	or	r26, r22
     e62:	b7 2b       	or	r27, r23
     e64:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
     e68:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
     e6c:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
     e70:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
     e74:	e0 91 42 02 	lds	r30, 0x0242	; 0x800242 <mtable+0x8>
     e78:	f0 91 43 02 	lds	r31, 0x0243	; 0x800243 <mtable+0x9>
     e7c:	30 97       	sbiw	r30, 0x00	; 0
     e7e:	39 f0       	breq	.+14     	; 0xe8e <__vector_5+0xb2>
     e80:	64 e0       	ldi	r22, 0x04	; 4
     e82:	70 e0       	ldi	r23, 0x00	; 0
     e84:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <otable+0x8>
     e88:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <otable+0x9>
     e8c:	09 95       	icall
     e8e:	0e 94 03 05 	call	0xa06	; 0xa06 <schedule>
     e92:	ff 91       	pop	r31
     e94:	ef 91       	pop	r30
     e96:	bf 91       	pop	r27
     e98:	af 91       	pop	r26
     e9a:	9f 91       	pop	r25
     e9c:	8f 91       	pop	r24
     e9e:	7f 91       	pop	r23
     ea0:	6f 91       	pop	r22
     ea2:	5f 91       	pop	r21
     ea4:	4f 91       	pop	r20
     ea6:	3f 91       	pop	r19
     ea8:	2f 91       	pop	r18
     eaa:	0f 90       	pop	r0
     eac:	0f be       	out	0x3f, r0	; 63
     eae:	0f 90       	pop	r0
     eb0:	1f 90       	pop	r1
     eb2:	18 95       	reti

00000eb4 <__vector_10>:
     eb4:	1f 92       	push	r1
     eb6:	0f 92       	push	r0
     eb8:	0f b6       	in	r0, 0x3f	; 63
     eba:	0f 92       	push	r0
     ebc:	11 24       	eor	r1, r1
     ebe:	2f 93       	push	r18
     ec0:	3f 93       	push	r19
     ec2:	4f 93       	push	r20
     ec4:	5f 93       	push	r21
     ec6:	6f 93       	push	r22
     ec8:	7f 93       	push	r23
     eca:	8f 93       	push	r24
     ecc:	9f 93       	push	r25
     ece:	af 93       	push	r26
     ed0:	bf 93       	push	r27
     ed2:	ef 93       	push	r30
     ed4:	ff 93       	push	r31
     ed6:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <overflows>
     eda:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <overflows+0x1>
     ede:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     ee2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     ee6:	c9 01       	movw	r24, r18
     ee8:	03 2e       	mov	r0, r19
     eea:	00 0c       	add	r0, r0
     eec:	aa 0b       	sbc	r26, r26
     eee:	bb 0b       	sbc	r27, r27
     ef0:	dc 01       	movw	r26, r24
     ef2:	99 27       	eor	r25, r25
     ef4:	88 27       	eor	r24, r24
     ef6:	60 e0       	ldi	r22, 0x00	; 0
     ef8:	70 e0       	ldi	r23, 0x00	; 0
     efa:	84 2b       	or	r24, r20
     efc:	95 2b       	or	r25, r21
     efe:	a6 2b       	or	r26, r22
     f00:	b7 2b       	or	r27, r23
     f02:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
     f06:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
     f0a:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
     f0e:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
     f12:	b0 9b       	sbis	0x16, 0	; 22
     f14:	1b c0       	rjmp	.+54     	; 0xf4c <__vector_10+0x98>
     f16:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     f1a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     f1e:	c9 01       	movw	r24, r18
     f20:	01 96       	adiw	r24, 0x01	; 1
     f22:	09 2e       	mov	r0, r25
     f24:	00 0c       	add	r0, r0
     f26:	aa 0b       	sbc	r26, r26
     f28:	bb 0b       	sbc	r27, r27
     f2a:	dc 01       	movw	r26, r24
     f2c:	99 27       	eor	r25, r25
     f2e:	88 27       	eor	r24, r24
     f30:	60 e0       	ldi	r22, 0x00	; 0
     f32:	70 e0       	ldi	r23, 0x00	; 0
     f34:	84 2b       	or	r24, r20
     f36:	95 2b       	or	r25, r21
     f38:	a6 2b       	or	r26, r22
     f3a:	b7 2b       	or	r27, r23
     f3c:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
     f40:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
     f44:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
     f48:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
     f4c:	e0 91 44 02 	lds	r30, 0x0244	; 0x800244 <mtable+0xa>
     f50:	f0 91 45 02 	lds	r31, 0x0245	; 0x800245 <mtable+0xb>
     f54:	30 97       	sbiw	r30, 0x00	; 0
     f56:	39 f0       	breq	.+14     	; 0xf66 <__vector_10+0xb2>
     f58:	65 e0       	ldi	r22, 0x05	; 5
     f5a:	70 e0       	ldi	r23, 0x00	; 0
     f5c:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <otable+0xa>
     f60:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <otable+0xb>
     f64:	09 95       	icall
     f66:	0e 94 03 05 	call	0xa06	; 0xa06 <schedule>
     f6a:	ff 91       	pop	r31
     f6c:	ef 91       	pop	r30
     f6e:	bf 91       	pop	r27
     f70:	af 91       	pop	r26
     f72:	9f 91       	pop	r25
     f74:	8f 91       	pop	r24
     f76:	7f 91       	pop	r23
     f78:	6f 91       	pop	r22
     f7a:	5f 91       	pop	r21
     f7c:	4f 91       	pop	r20
     f7e:	3f 91       	pop	r19
     f80:	2f 91       	pop	r18
     f82:	0f 90       	pop	r0
     f84:	0f be       	out	0x3f, r0	; 63
     f86:	0f 90       	pop	r0
     f88:	1f 90       	pop	r1
     f8a:	18 95       	reti

00000f8c <__vector_11>:
     f8c:	1f 92       	push	r1
     f8e:	0f 92       	push	r0
     f90:	0f b6       	in	r0, 0x3f	; 63
     f92:	0f 92       	push	r0
     f94:	11 24       	eor	r1, r1
     f96:	2f 93       	push	r18
     f98:	3f 93       	push	r19
     f9a:	4f 93       	push	r20
     f9c:	5f 93       	push	r21
     f9e:	6f 93       	push	r22
     fa0:	7f 93       	push	r23
     fa2:	8f 93       	push	r24
     fa4:	9f 93       	push	r25
     fa6:	af 93       	push	r26
     fa8:	bf 93       	push	r27
     faa:	ef 93       	push	r30
     fac:	ff 93       	push	r31
     fae:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <overflows>
     fb2:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <overflows+0x1>
     fb6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     fba:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     fbe:	c9 01       	movw	r24, r18
     fc0:	03 2e       	mov	r0, r19
     fc2:	00 0c       	add	r0, r0
     fc4:	aa 0b       	sbc	r26, r26
     fc6:	bb 0b       	sbc	r27, r27
     fc8:	dc 01       	movw	r26, r24
     fca:	99 27       	eor	r25, r25
     fcc:	88 27       	eor	r24, r24
     fce:	60 e0       	ldi	r22, 0x00	; 0
     fd0:	70 e0       	ldi	r23, 0x00	; 0
     fd2:	84 2b       	or	r24, r20
     fd4:	95 2b       	or	r25, r21
     fd6:	a6 2b       	or	r26, r22
     fd8:	b7 2b       	or	r27, r23
     fda:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
     fde:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
     fe2:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
     fe6:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
     fea:	b0 9b       	sbis	0x16, 0	; 22
     fec:	1b c0       	rjmp	.+54     	; 0x1024 <__vector_11+0x98>
     fee:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     ff2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     ff6:	c9 01       	movw	r24, r18
     ff8:	01 96       	adiw	r24, 0x01	; 1
     ffa:	09 2e       	mov	r0, r25
     ffc:	00 0c       	add	r0, r0
     ffe:	aa 0b       	sbc	r26, r26
    1000:	bb 0b       	sbc	r27, r27
    1002:	dc 01       	movw	r26, r24
    1004:	99 27       	eor	r25, r25
    1006:	88 27       	eor	r24, r24
    1008:	60 e0       	ldi	r22, 0x00	; 0
    100a:	70 e0       	ldi	r23, 0x00	; 0
    100c:	84 2b       	or	r24, r20
    100e:	95 2b       	or	r25, r21
    1010:	a6 2b       	or	r26, r22
    1012:	b7 2b       	or	r27, r23
    1014:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
    1018:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
    101c:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
    1020:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
    1024:	e0 91 46 02 	lds	r30, 0x0246	; 0x800246 <mtable+0xc>
    1028:	f0 91 47 02 	lds	r31, 0x0247	; 0x800247 <mtable+0xd>
    102c:	30 97       	sbiw	r30, 0x00	; 0
    102e:	39 f0       	breq	.+14     	; 0x103e <__vector_11+0xb2>
    1030:	66 e0       	ldi	r22, 0x06	; 6
    1032:	70 e0       	ldi	r23, 0x00	; 0
    1034:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <otable+0xc>
    1038:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <otable+0xd>
    103c:	09 95       	icall
    103e:	0e 94 03 05 	call	0xa06	; 0xa06 <schedule>
    1042:	ff 91       	pop	r31
    1044:	ef 91       	pop	r30
    1046:	bf 91       	pop	r27
    1048:	af 91       	pop	r26
    104a:	9f 91       	pop	r25
    104c:	8f 91       	pop	r24
    104e:	7f 91       	pop	r23
    1050:	6f 91       	pop	r22
    1052:	5f 91       	pop	r21
    1054:	4f 91       	pop	r20
    1056:	3f 91       	pop	r19
    1058:	2f 91       	pop	r18
    105a:	0f 90       	pop	r0
    105c:	0f be       	out	0x3f, r0	; 63
    105e:	0f 90       	pop	r0
    1060:	1f 90       	pop	r1
    1062:	18 95       	reti

00001064 <__vector_12>:
    1064:	1f 92       	push	r1
    1066:	0f 92       	push	r0
    1068:	0f b6       	in	r0, 0x3f	; 63
    106a:	0f 92       	push	r0
    106c:	11 24       	eor	r1, r1
    106e:	2f 93       	push	r18
    1070:	3f 93       	push	r19
    1072:	4f 93       	push	r20
    1074:	5f 93       	push	r21
    1076:	6f 93       	push	r22
    1078:	7f 93       	push	r23
    107a:	8f 93       	push	r24
    107c:	9f 93       	push	r25
    107e:	af 93       	push	r26
    1080:	bf 93       	push	r27
    1082:	ef 93       	push	r30
    1084:	ff 93       	push	r31
    1086:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <overflows>
    108a:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <overflows+0x1>
    108e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1092:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1096:	c9 01       	movw	r24, r18
    1098:	03 2e       	mov	r0, r19
    109a:	00 0c       	add	r0, r0
    109c:	aa 0b       	sbc	r26, r26
    109e:	bb 0b       	sbc	r27, r27
    10a0:	dc 01       	movw	r26, r24
    10a2:	99 27       	eor	r25, r25
    10a4:	88 27       	eor	r24, r24
    10a6:	60 e0       	ldi	r22, 0x00	; 0
    10a8:	70 e0       	ldi	r23, 0x00	; 0
    10aa:	84 2b       	or	r24, r20
    10ac:	95 2b       	or	r25, r21
    10ae:	a6 2b       	or	r26, r22
    10b0:	b7 2b       	or	r27, r23
    10b2:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
    10b6:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
    10ba:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
    10be:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
    10c2:	b0 9b       	sbis	0x16, 0	; 22
    10c4:	1b c0       	rjmp	.+54     	; 0x10fc <__vector_12+0x98>
    10c6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    10ca:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    10ce:	c9 01       	movw	r24, r18
    10d0:	01 96       	adiw	r24, 0x01	; 1
    10d2:	09 2e       	mov	r0, r25
    10d4:	00 0c       	add	r0, r0
    10d6:	aa 0b       	sbc	r26, r26
    10d8:	bb 0b       	sbc	r27, r27
    10da:	dc 01       	movw	r26, r24
    10dc:	99 27       	eor	r25, r25
    10de:	88 27       	eor	r24, r24
    10e0:	60 e0       	ldi	r22, 0x00	; 0
    10e2:	70 e0       	ldi	r23, 0x00	; 0
    10e4:	84 2b       	or	r24, r20
    10e6:	95 2b       	or	r25, r21
    10e8:	a6 2b       	or	r26, r22
    10ea:	b7 2b       	or	r27, r23
    10ec:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
    10f0:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
    10f4:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
    10f8:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
    10fc:	e0 91 48 02 	lds	r30, 0x0248	; 0x800248 <mtable+0xe>
    1100:	f0 91 49 02 	lds	r31, 0x0249	; 0x800249 <mtable+0xf>
    1104:	30 97       	sbiw	r30, 0x00	; 0
    1106:	39 f0       	breq	.+14     	; 0x1116 <__vector_12+0xb2>
    1108:	67 e0       	ldi	r22, 0x07	; 7
    110a:	70 e0       	ldi	r23, 0x00	; 0
    110c:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <otable+0xe>
    1110:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <otable+0xf>
    1114:	09 95       	icall
    1116:	0e 94 03 05 	call	0xa06	; 0xa06 <schedule>
    111a:	ff 91       	pop	r31
    111c:	ef 91       	pop	r30
    111e:	bf 91       	pop	r27
    1120:	af 91       	pop	r26
    1122:	9f 91       	pop	r25
    1124:	8f 91       	pop	r24
    1126:	7f 91       	pop	r23
    1128:	6f 91       	pop	r22
    112a:	5f 91       	pop	r21
    112c:	4f 91       	pop	r20
    112e:	3f 91       	pop	r19
    1130:	2f 91       	pop	r18
    1132:	0f 90       	pop	r0
    1134:	0f be       	out	0x3f, r0	; 63
    1136:	0f 90       	pop	r0
    1138:	1f 90       	pop	r1
    113a:	18 95       	reti

0000113c <__vector_13>:
    113c:	1f 92       	push	r1
    113e:	0f 92       	push	r0
    1140:	0f b6       	in	r0, 0x3f	; 63
    1142:	0f 92       	push	r0
    1144:	11 24       	eor	r1, r1
    1146:	2f 93       	push	r18
    1148:	3f 93       	push	r19
    114a:	4f 93       	push	r20
    114c:	5f 93       	push	r21
    114e:	6f 93       	push	r22
    1150:	7f 93       	push	r23
    1152:	8f 93       	push	r24
    1154:	9f 93       	push	r25
    1156:	af 93       	push	r26
    1158:	bf 93       	push	r27
    115a:	ef 93       	push	r30
    115c:	ff 93       	push	r31
    115e:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <overflows>
    1162:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <overflows+0x1>
    1166:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    116a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    116e:	c9 01       	movw	r24, r18
    1170:	03 2e       	mov	r0, r19
    1172:	00 0c       	add	r0, r0
    1174:	aa 0b       	sbc	r26, r26
    1176:	bb 0b       	sbc	r27, r27
    1178:	dc 01       	movw	r26, r24
    117a:	99 27       	eor	r25, r25
    117c:	88 27       	eor	r24, r24
    117e:	60 e0       	ldi	r22, 0x00	; 0
    1180:	70 e0       	ldi	r23, 0x00	; 0
    1182:	84 2b       	or	r24, r20
    1184:	95 2b       	or	r25, r21
    1186:	a6 2b       	or	r26, r22
    1188:	b7 2b       	or	r27, r23
    118a:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
    118e:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
    1192:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
    1196:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
    119a:	b0 9b       	sbis	0x16, 0	; 22
    119c:	1b c0       	rjmp	.+54     	; 0x11d4 <__vector_13+0x98>
    119e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    11a2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    11a6:	c9 01       	movw	r24, r18
    11a8:	01 96       	adiw	r24, 0x01	; 1
    11aa:	09 2e       	mov	r0, r25
    11ac:	00 0c       	add	r0, r0
    11ae:	aa 0b       	sbc	r26, r26
    11b0:	bb 0b       	sbc	r27, r27
    11b2:	dc 01       	movw	r26, r24
    11b4:	99 27       	eor	r25, r25
    11b6:	88 27       	eor	r24, r24
    11b8:	60 e0       	ldi	r22, 0x00	; 0
    11ba:	70 e0       	ldi	r23, 0x00	; 0
    11bc:	84 2b       	or	r24, r20
    11be:	95 2b       	or	r25, r21
    11c0:	a6 2b       	or	r26, r22
    11c2:	b7 2b       	or	r27, r23
    11c4:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
    11c8:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
    11cc:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
    11d0:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
    11d4:	e0 91 4a 02 	lds	r30, 0x024A	; 0x80024a <mtable+0x10>
    11d8:	f0 91 4b 02 	lds	r31, 0x024B	; 0x80024b <mtable+0x11>
    11dc:	30 97       	sbiw	r30, 0x00	; 0
    11de:	39 f0       	breq	.+14     	; 0x11ee <__vector_13+0xb2>
    11e0:	68 e0       	ldi	r22, 0x08	; 8
    11e2:	70 e0       	ldi	r23, 0x00	; 0
    11e4:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <otable+0x10>
    11e8:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <otable+0x11>
    11ec:	09 95       	icall
    11ee:	0e 94 03 05 	call	0xa06	; 0xa06 <schedule>
    11f2:	ff 91       	pop	r31
    11f4:	ef 91       	pop	r30
    11f6:	bf 91       	pop	r27
    11f8:	af 91       	pop	r26
    11fa:	9f 91       	pop	r25
    11fc:	8f 91       	pop	r24
    11fe:	7f 91       	pop	r23
    1200:	6f 91       	pop	r22
    1202:	5f 91       	pop	r21
    1204:	4f 91       	pop	r20
    1206:	3f 91       	pop	r19
    1208:	2f 91       	pop	r18
    120a:	0f 90       	pop	r0
    120c:	0f be       	out	0x3f, r0	; 63
    120e:	0f 90       	pop	r0
    1210:	1f 90       	pop	r1
    1212:	18 95       	reti

00001214 <__vector_14>:
    1214:	1f 92       	push	r1
    1216:	0f 92       	push	r0
    1218:	0f b6       	in	r0, 0x3f	; 63
    121a:	0f 92       	push	r0
    121c:	11 24       	eor	r1, r1
    121e:	2f 93       	push	r18
    1220:	3f 93       	push	r19
    1222:	4f 93       	push	r20
    1224:	5f 93       	push	r21
    1226:	6f 93       	push	r22
    1228:	7f 93       	push	r23
    122a:	8f 93       	push	r24
    122c:	9f 93       	push	r25
    122e:	af 93       	push	r26
    1230:	bf 93       	push	r27
    1232:	ef 93       	push	r30
    1234:	ff 93       	push	r31
    1236:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <overflows>
    123a:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <overflows+0x1>
    123e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1242:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1246:	c9 01       	movw	r24, r18
    1248:	03 2e       	mov	r0, r19
    124a:	00 0c       	add	r0, r0
    124c:	aa 0b       	sbc	r26, r26
    124e:	bb 0b       	sbc	r27, r27
    1250:	dc 01       	movw	r26, r24
    1252:	99 27       	eor	r25, r25
    1254:	88 27       	eor	r24, r24
    1256:	60 e0       	ldi	r22, 0x00	; 0
    1258:	70 e0       	ldi	r23, 0x00	; 0
    125a:	84 2b       	or	r24, r20
    125c:	95 2b       	or	r25, r21
    125e:	a6 2b       	or	r26, r22
    1260:	b7 2b       	or	r27, r23
    1262:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
    1266:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
    126a:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
    126e:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
    1272:	b0 9b       	sbis	0x16, 0	; 22
    1274:	1b c0       	rjmp	.+54     	; 0x12ac <__vector_14+0x98>
    1276:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    127a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    127e:	c9 01       	movw	r24, r18
    1280:	01 96       	adiw	r24, 0x01	; 1
    1282:	09 2e       	mov	r0, r25
    1284:	00 0c       	add	r0, r0
    1286:	aa 0b       	sbc	r26, r26
    1288:	bb 0b       	sbc	r27, r27
    128a:	dc 01       	movw	r26, r24
    128c:	99 27       	eor	r25, r25
    128e:	88 27       	eor	r24, r24
    1290:	60 e0       	ldi	r22, 0x00	; 0
    1292:	70 e0       	ldi	r23, 0x00	; 0
    1294:	84 2b       	or	r24, r20
    1296:	95 2b       	or	r25, r21
    1298:	a6 2b       	or	r26, r22
    129a:	b7 2b       	or	r27, r23
    129c:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
    12a0:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
    12a4:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
    12a8:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
    12ac:	e0 91 4c 02 	lds	r30, 0x024C	; 0x80024c <mtable+0x12>
    12b0:	f0 91 4d 02 	lds	r31, 0x024D	; 0x80024d <mtable+0x13>
    12b4:	30 97       	sbiw	r30, 0x00	; 0
    12b6:	39 f0       	breq	.+14     	; 0x12c6 <__vector_14+0xb2>
    12b8:	69 e0       	ldi	r22, 0x09	; 9
    12ba:	70 e0       	ldi	r23, 0x00	; 0
    12bc:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <otable+0x12>
    12c0:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <otable+0x13>
    12c4:	09 95       	icall
    12c6:	0e 94 03 05 	call	0xa06	; 0xa06 <schedule>
    12ca:	ff 91       	pop	r31
    12cc:	ef 91       	pop	r30
    12ce:	bf 91       	pop	r27
    12d0:	af 91       	pop	r26
    12d2:	9f 91       	pop	r25
    12d4:	8f 91       	pop	r24
    12d6:	7f 91       	pop	r23
    12d8:	6f 91       	pop	r22
    12da:	5f 91       	pop	r21
    12dc:	4f 91       	pop	r20
    12de:	3f 91       	pop	r19
    12e0:	2f 91       	pop	r18
    12e2:	0f 90       	pop	r0
    12e4:	0f be       	out	0x3f, r0	; 63
    12e6:	0f 90       	pop	r0
    12e8:	1f 90       	pop	r1
    12ea:	18 95       	reti

000012ec <__vector_15>:
    12ec:	1f 92       	push	r1
    12ee:	0f 92       	push	r0
    12f0:	0f b6       	in	r0, 0x3f	; 63
    12f2:	0f 92       	push	r0
    12f4:	11 24       	eor	r1, r1
    12f6:	2f 93       	push	r18
    12f8:	3f 93       	push	r19
    12fa:	4f 93       	push	r20
    12fc:	5f 93       	push	r21
    12fe:	6f 93       	push	r22
    1300:	7f 93       	push	r23
    1302:	8f 93       	push	r24
    1304:	9f 93       	push	r25
    1306:	af 93       	push	r26
    1308:	bf 93       	push	r27
    130a:	ef 93       	push	r30
    130c:	ff 93       	push	r31
    130e:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <overflows>
    1312:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <overflows+0x1>
    1316:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    131a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    131e:	c9 01       	movw	r24, r18
    1320:	03 2e       	mov	r0, r19
    1322:	00 0c       	add	r0, r0
    1324:	aa 0b       	sbc	r26, r26
    1326:	bb 0b       	sbc	r27, r27
    1328:	dc 01       	movw	r26, r24
    132a:	99 27       	eor	r25, r25
    132c:	88 27       	eor	r24, r24
    132e:	60 e0       	ldi	r22, 0x00	; 0
    1330:	70 e0       	ldi	r23, 0x00	; 0
    1332:	84 2b       	or	r24, r20
    1334:	95 2b       	or	r25, r21
    1336:	a6 2b       	or	r26, r22
    1338:	b7 2b       	or	r27, r23
    133a:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
    133e:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
    1342:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
    1346:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
    134a:	b0 9b       	sbis	0x16, 0	; 22
    134c:	1b c0       	rjmp	.+54     	; 0x1384 <__vector_15+0x98>
    134e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1352:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1356:	c9 01       	movw	r24, r18
    1358:	01 96       	adiw	r24, 0x01	; 1
    135a:	09 2e       	mov	r0, r25
    135c:	00 0c       	add	r0, r0
    135e:	aa 0b       	sbc	r26, r26
    1360:	bb 0b       	sbc	r27, r27
    1362:	dc 01       	movw	r26, r24
    1364:	99 27       	eor	r25, r25
    1366:	88 27       	eor	r24, r24
    1368:	60 e0       	ldi	r22, 0x00	; 0
    136a:	70 e0       	ldi	r23, 0x00	; 0
    136c:	84 2b       	or	r24, r20
    136e:	95 2b       	or	r25, r21
    1370:	a6 2b       	or	r26, r22
    1372:	b7 2b       	or	r27, r23
    1374:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
    1378:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
    137c:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
    1380:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
    1384:	e0 91 4e 02 	lds	r30, 0x024E	; 0x80024e <mtable+0x14>
    1388:	f0 91 4f 02 	lds	r31, 0x024F	; 0x80024f <mtable+0x15>
    138c:	30 97       	sbiw	r30, 0x00	; 0
    138e:	39 f0       	breq	.+14     	; 0x139e <__vector_15+0xb2>
    1390:	6a e0       	ldi	r22, 0x0A	; 10
    1392:	70 e0       	ldi	r23, 0x00	; 0
    1394:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <otable+0x14>
    1398:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <otable+0x15>
    139c:	09 95       	icall
    139e:	0e 94 03 05 	call	0xa06	; 0xa06 <schedule>
    13a2:	ff 91       	pop	r31
    13a4:	ef 91       	pop	r30
    13a6:	bf 91       	pop	r27
    13a8:	af 91       	pop	r26
    13aa:	9f 91       	pop	r25
    13ac:	8f 91       	pop	r24
    13ae:	7f 91       	pop	r23
    13b0:	6f 91       	pop	r22
    13b2:	5f 91       	pop	r21
    13b4:	4f 91       	pop	r20
    13b6:	3f 91       	pop	r19
    13b8:	2f 91       	pop	r18
    13ba:	0f 90       	pop	r0
    13bc:	0f be       	out	0x3f, r0	; 63
    13be:	0f 90       	pop	r0
    13c0:	1f 90       	pop	r1
    13c2:	18 95       	reti

000013c4 <__vector_16>:
    13c4:	1f 92       	push	r1
    13c6:	0f 92       	push	r0
    13c8:	0f b6       	in	r0, 0x3f	; 63
    13ca:	0f 92       	push	r0
    13cc:	11 24       	eor	r1, r1
    13ce:	2f 93       	push	r18
    13d0:	3f 93       	push	r19
    13d2:	4f 93       	push	r20
    13d4:	5f 93       	push	r21
    13d6:	6f 93       	push	r22
    13d8:	7f 93       	push	r23
    13da:	8f 93       	push	r24
    13dc:	9f 93       	push	r25
    13de:	af 93       	push	r26
    13e0:	bf 93       	push	r27
    13e2:	ef 93       	push	r30
    13e4:	ff 93       	push	r31
    13e6:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <overflows>
    13ea:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <overflows+0x1>
    13ee:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    13f2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    13f6:	c9 01       	movw	r24, r18
    13f8:	03 2e       	mov	r0, r19
    13fa:	00 0c       	add	r0, r0
    13fc:	aa 0b       	sbc	r26, r26
    13fe:	bb 0b       	sbc	r27, r27
    1400:	dc 01       	movw	r26, r24
    1402:	99 27       	eor	r25, r25
    1404:	88 27       	eor	r24, r24
    1406:	60 e0       	ldi	r22, 0x00	; 0
    1408:	70 e0       	ldi	r23, 0x00	; 0
    140a:	84 2b       	or	r24, r20
    140c:	95 2b       	or	r25, r21
    140e:	a6 2b       	or	r26, r22
    1410:	b7 2b       	or	r27, r23
    1412:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
    1416:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
    141a:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
    141e:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
    1422:	b0 9b       	sbis	0x16, 0	; 22
    1424:	1b c0       	rjmp	.+54     	; 0x145c <__vector_16+0x98>
    1426:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    142a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    142e:	c9 01       	movw	r24, r18
    1430:	01 96       	adiw	r24, 0x01	; 1
    1432:	09 2e       	mov	r0, r25
    1434:	00 0c       	add	r0, r0
    1436:	aa 0b       	sbc	r26, r26
    1438:	bb 0b       	sbc	r27, r27
    143a:	dc 01       	movw	r26, r24
    143c:	99 27       	eor	r25, r25
    143e:	88 27       	eor	r24, r24
    1440:	60 e0       	ldi	r22, 0x00	; 0
    1442:	70 e0       	ldi	r23, 0x00	; 0
    1444:	84 2b       	or	r24, r20
    1446:	95 2b       	or	r25, r21
    1448:	a6 2b       	or	r26, r22
    144a:	b7 2b       	or	r27, r23
    144c:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
    1450:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
    1454:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
    1458:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
    145c:	e0 91 50 02 	lds	r30, 0x0250	; 0x800250 <mtable+0x16>
    1460:	f0 91 51 02 	lds	r31, 0x0251	; 0x800251 <mtable+0x17>
    1464:	30 97       	sbiw	r30, 0x00	; 0
    1466:	39 f0       	breq	.+14     	; 0x1476 <__vector_16+0xb2>
    1468:	6b e0       	ldi	r22, 0x0B	; 11
    146a:	70 e0       	ldi	r23, 0x00	; 0
    146c:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <otable+0x16>
    1470:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <otable+0x17>
    1474:	09 95       	icall
    1476:	0e 94 03 05 	call	0xa06	; 0xa06 <schedule>
    147a:	ff 91       	pop	r31
    147c:	ef 91       	pop	r30
    147e:	bf 91       	pop	r27
    1480:	af 91       	pop	r26
    1482:	9f 91       	pop	r25
    1484:	8f 91       	pop	r24
    1486:	7f 91       	pop	r23
    1488:	6f 91       	pop	r22
    148a:	5f 91       	pop	r21
    148c:	4f 91       	pop	r20
    148e:	3f 91       	pop	r19
    1490:	2f 91       	pop	r18
    1492:	0f 90       	pop	r0
    1494:	0f be       	out	0x3f, r0	; 63
    1496:	0f 90       	pop	r0
    1498:	1f 90       	pop	r1
    149a:	18 95       	reti

0000149c <__vector_17>:
    149c:	1f 92       	push	r1
    149e:	0f 92       	push	r0
    14a0:	0f b6       	in	r0, 0x3f	; 63
    14a2:	0f 92       	push	r0
    14a4:	11 24       	eor	r1, r1
    14a6:	2f 93       	push	r18
    14a8:	3f 93       	push	r19
    14aa:	4f 93       	push	r20
    14ac:	5f 93       	push	r21
    14ae:	6f 93       	push	r22
    14b0:	7f 93       	push	r23
    14b2:	8f 93       	push	r24
    14b4:	9f 93       	push	r25
    14b6:	af 93       	push	r26
    14b8:	bf 93       	push	r27
    14ba:	ef 93       	push	r30
    14bc:	ff 93       	push	r31
    14be:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <overflows>
    14c2:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <overflows+0x1>
    14c6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    14ca:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    14ce:	c9 01       	movw	r24, r18
    14d0:	03 2e       	mov	r0, r19
    14d2:	00 0c       	add	r0, r0
    14d4:	aa 0b       	sbc	r26, r26
    14d6:	bb 0b       	sbc	r27, r27
    14d8:	dc 01       	movw	r26, r24
    14da:	99 27       	eor	r25, r25
    14dc:	88 27       	eor	r24, r24
    14de:	60 e0       	ldi	r22, 0x00	; 0
    14e0:	70 e0       	ldi	r23, 0x00	; 0
    14e2:	84 2b       	or	r24, r20
    14e4:	95 2b       	or	r25, r21
    14e6:	a6 2b       	or	r26, r22
    14e8:	b7 2b       	or	r27, r23
    14ea:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
    14ee:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
    14f2:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
    14f6:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
    14fa:	b0 9b       	sbis	0x16, 0	; 22
    14fc:	1b c0       	rjmp	.+54     	; 0x1534 <__vector_17+0x98>
    14fe:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1502:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1506:	c9 01       	movw	r24, r18
    1508:	01 96       	adiw	r24, 0x01	; 1
    150a:	09 2e       	mov	r0, r25
    150c:	00 0c       	add	r0, r0
    150e:	aa 0b       	sbc	r26, r26
    1510:	bb 0b       	sbc	r27, r27
    1512:	dc 01       	movw	r26, r24
    1514:	99 27       	eor	r25, r25
    1516:	88 27       	eor	r24, r24
    1518:	60 e0       	ldi	r22, 0x00	; 0
    151a:	70 e0       	ldi	r23, 0x00	; 0
    151c:	84 2b       	or	r24, r20
    151e:	95 2b       	or	r25, r21
    1520:	a6 2b       	or	r26, r22
    1522:	b7 2b       	or	r27, r23
    1524:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
    1528:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
    152c:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
    1530:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
    1534:	e0 91 52 02 	lds	r30, 0x0252	; 0x800252 <mtable+0x18>
    1538:	f0 91 53 02 	lds	r31, 0x0253	; 0x800253 <mtable+0x19>
    153c:	30 97       	sbiw	r30, 0x00	; 0
    153e:	39 f0       	breq	.+14     	; 0x154e <__vector_17+0xb2>
    1540:	6c e0       	ldi	r22, 0x0C	; 12
    1542:	70 e0       	ldi	r23, 0x00	; 0
    1544:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <otable+0x18>
    1548:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <otable+0x19>
    154c:	09 95       	icall
    154e:	0e 94 03 05 	call	0xa06	; 0xa06 <schedule>
    1552:	ff 91       	pop	r31
    1554:	ef 91       	pop	r30
    1556:	bf 91       	pop	r27
    1558:	af 91       	pop	r26
    155a:	9f 91       	pop	r25
    155c:	8f 91       	pop	r24
    155e:	7f 91       	pop	r23
    1560:	6f 91       	pop	r22
    1562:	5f 91       	pop	r21
    1564:	4f 91       	pop	r20
    1566:	3f 91       	pop	r19
    1568:	2f 91       	pop	r18
    156a:	0f 90       	pop	r0
    156c:	0f be       	out	0x3f, r0	; 63
    156e:	0f 90       	pop	r0
    1570:	1f 90       	pop	r1
    1572:	18 95       	reti

00001574 <__vector_18>:
    1574:	1f 92       	push	r1
    1576:	0f 92       	push	r0
    1578:	0f b6       	in	r0, 0x3f	; 63
    157a:	0f 92       	push	r0
    157c:	11 24       	eor	r1, r1
    157e:	2f 93       	push	r18
    1580:	3f 93       	push	r19
    1582:	4f 93       	push	r20
    1584:	5f 93       	push	r21
    1586:	6f 93       	push	r22
    1588:	7f 93       	push	r23
    158a:	8f 93       	push	r24
    158c:	9f 93       	push	r25
    158e:	af 93       	push	r26
    1590:	bf 93       	push	r27
    1592:	ef 93       	push	r30
    1594:	ff 93       	push	r31
    1596:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <overflows>
    159a:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <overflows+0x1>
    159e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    15a2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    15a6:	c9 01       	movw	r24, r18
    15a8:	03 2e       	mov	r0, r19
    15aa:	00 0c       	add	r0, r0
    15ac:	aa 0b       	sbc	r26, r26
    15ae:	bb 0b       	sbc	r27, r27
    15b0:	dc 01       	movw	r26, r24
    15b2:	99 27       	eor	r25, r25
    15b4:	88 27       	eor	r24, r24
    15b6:	60 e0       	ldi	r22, 0x00	; 0
    15b8:	70 e0       	ldi	r23, 0x00	; 0
    15ba:	84 2b       	or	r24, r20
    15bc:	95 2b       	or	r25, r21
    15be:	a6 2b       	or	r26, r22
    15c0:	b7 2b       	or	r27, r23
    15c2:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
    15c6:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
    15ca:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
    15ce:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
    15d2:	b0 9b       	sbis	0x16, 0	; 22
    15d4:	1b c0       	rjmp	.+54     	; 0x160c <__vector_18+0x98>
    15d6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    15da:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    15de:	c9 01       	movw	r24, r18
    15e0:	01 96       	adiw	r24, 0x01	; 1
    15e2:	09 2e       	mov	r0, r25
    15e4:	00 0c       	add	r0, r0
    15e6:	aa 0b       	sbc	r26, r26
    15e8:	bb 0b       	sbc	r27, r27
    15ea:	dc 01       	movw	r26, r24
    15ec:	99 27       	eor	r25, r25
    15ee:	88 27       	eor	r24, r24
    15f0:	60 e0       	ldi	r22, 0x00	; 0
    15f2:	70 e0       	ldi	r23, 0x00	; 0
    15f4:	84 2b       	or	r24, r20
    15f6:	95 2b       	or	r25, r21
    15f8:	a6 2b       	or	r26, r22
    15fa:	b7 2b       	or	r27, r23
    15fc:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
    1600:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
    1604:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
    1608:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
    160c:	e0 91 54 02 	lds	r30, 0x0254	; 0x800254 <mtable+0x1a>
    1610:	f0 91 55 02 	lds	r31, 0x0255	; 0x800255 <mtable+0x1b>
    1614:	30 97       	sbiw	r30, 0x00	; 0
    1616:	39 f0       	breq	.+14     	; 0x1626 <__vector_18+0xb2>
    1618:	6d e0       	ldi	r22, 0x0D	; 13
    161a:	70 e0       	ldi	r23, 0x00	; 0
    161c:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <otable+0x1a>
    1620:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <otable+0x1b>
    1624:	09 95       	icall
    1626:	0e 94 03 05 	call	0xa06	; 0xa06 <schedule>
    162a:	ff 91       	pop	r31
    162c:	ef 91       	pop	r30
    162e:	bf 91       	pop	r27
    1630:	af 91       	pop	r26
    1632:	9f 91       	pop	r25
    1634:	8f 91       	pop	r24
    1636:	7f 91       	pop	r23
    1638:	6f 91       	pop	r22
    163a:	5f 91       	pop	r21
    163c:	4f 91       	pop	r20
    163e:	3f 91       	pop	r19
    1640:	2f 91       	pop	r18
    1642:	0f 90       	pop	r0
    1644:	0f be       	out	0x3f, r0	; 63
    1646:	0f 90       	pop	r0
    1648:	1f 90       	pop	r1
    164a:	18 95       	reti

0000164c <__vector_19>:
    164c:	1f 92       	push	r1
    164e:	0f 92       	push	r0
    1650:	0f b6       	in	r0, 0x3f	; 63
    1652:	0f 92       	push	r0
    1654:	11 24       	eor	r1, r1
    1656:	2f 93       	push	r18
    1658:	3f 93       	push	r19
    165a:	4f 93       	push	r20
    165c:	5f 93       	push	r21
    165e:	6f 93       	push	r22
    1660:	7f 93       	push	r23
    1662:	8f 93       	push	r24
    1664:	9f 93       	push	r25
    1666:	af 93       	push	r26
    1668:	bf 93       	push	r27
    166a:	ef 93       	push	r30
    166c:	ff 93       	push	r31
    166e:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <overflows>
    1672:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <overflows+0x1>
    1676:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    167a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    167e:	c9 01       	movw	r24, r18
    1680:	03 2e       	mov	r0, r19
    1682:	00 0c       	add	r0, r0
    1684:	aa 0b       	sbc	r26, r26
    1686:	bb 0b       	sbc	r27, r27
    1688:	dc 01       	movw	r26, r24
    168a:	99 27       	eor	r25, r25
    168c:	88 27       	eor	r24, r24
    168e:	60 e0       	ldi	r22, 0x00	; 0
    1690:	70 e0       	ldi	r23, 0x00	; 0
    1692:	84 2b       	or	r24, r20
    1694:	95 2b       	or	r25, r21
    1696:	a6 2b       	or	r26, r22
    1698:	b7 2b       	or	r27, r23
    169a:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
    169e:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
    16a2:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
    16a6:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
    16aa:	b0 9b       	sbis	0x16, 0	; 22
    16ac:	1b c0       	rjmp	.+54     	; 0x16e4 <__vector_19+0x98>
    16ae:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    16b2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    16b6:	c9 01       	movw	r24, r18
    16b8:	01 96       	adiw	r24, 0x01	; 1
    16ba:	09 2e       	mov	r0, r25
    16bc:	00 0c       	add	r0, r0
    16be:	aa 0b       	sbc	r26, r26
    16c0:	bb 0b       	sbc	r27, r27
    16c2:	dc 01       	movw	r26, r24
    16c4:	99 27       	eor	r25, r25
    16c6:	88 27       	eor	r24, r24
    16c8:	60 e0       	ldi	r22, 0x00	; 0
    16ca:	70 e0       	ldi	r23, 0x00	; 0
    16cc:	84 2b       	or	r24, r20
    16ce:	95 2b       	or	r25, r21
    16d0:	a6 2b       	or	r26, r22
    16d2:	b7 2b       	or	r27, r23
    16d4:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
    16d8:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
    16dc:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
    16e0:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
    16e4:	e0 91 56 02 	lds	r30, 0x0256	; 0x800256 <mtable+0x1c>
    16e8:	f0 91 57 02 	lds	r31, 0x0257	; 0x800257 <mtable+0x1d>
    16ec:	30 97       	sbiw	r30, 0x00	; 0
    16ee:	39 f0       	breq	.+14     	; 0x16fe <__vector_19+0xb2>
    16f0:	6e e0       	ldi	r22, 0x0E	; 14
    16f2:	70 e0       	ldi	r23, 0x00	; 0
    16f4:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <otable+0x1c>
    16f8:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <otable+0x1d>
    16fc:	09 95       	icall
    16fe:	0e 94 03 05 	call	0xa06	; 0xa06 <schedule>
    1702:	ff 91       	pop	r31
    1704:	ef 91       	pop	r30
    1706:	bf 91       	pop	r27
    1708:	af 91       	pop	r26
    170a:	9f 91       	pop	r25
    170c:	8f 91       	pop	r24
    170e:	7f 91       	pop	r23
    1710:	6f 91       	pop	r22
    1712:	5f 91       	pop	r21
    1714:	4f 91       	pop	r20
    1716:	3f 91       	pop	r19
    1718:	2f 91       	pop	r18
    171a:	0f 90       	pop	r0
    171c:	0f be       	out	0x3f, r0	; 63
    171e:	0f 90       	pop	r0
    1720:	1f 90       	pop	r1
    1722:	18 95       	reti

00001724 <__vector_20>:
    1724:	1f 92       	push	r1
    1726:	0f 92       	push	r0
    1728:	0f b6       	in	r0, 0x3f	; 63
    172a:	0f 92       	push	r0
    172c:	11 24       	eor	r1, r1
    172e:	2f 93       	push	r18
    1730:	3f 93       	push	r19
    1732:	4f 93       	push	r20
    1734:	5f 93       	push	r21
    1736:	6f 93       	push	r22
    1738:	7f 93       	push	r23
    173a:	8f 93       	push	r24
    173c:	9f 93       	push	r25
    173e:	af 93       	push	r26
    1740:	bf 93       	push	r27
    1742:	ef 93       	push	r30
    1744:	ff 93       	push	r31
    1746:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <overflows>
    174a:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <overflows+0x1>
    174e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1752:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1756:	c9 01       	movw	r24, r18
    1758:	03 2e       	mov	r0, r19
    175a:	00 0c       	add	r0, r0
    175c:	aa 0b       	sbc	r26, r26
    175e:	bb 0b       	sbc	r27, r27
    1760:	dc 01       	movw	r26, r24
    1762:	99 27       	eor	r25, r25
    1764:	88 27       	eor	r24, r24
    1766:	60 e0       	ldi	r22, 0x00	; 0
    1768:	70 e0       	ldi	r23, 0x00	; 0
    176a:	84 2b       	or	r24, r20
    176c:	95 2b       	or	r25, r21
    176e:	a6 2b       	or	r26, r22
    1770:	b7 2b       	or	r27, r23
    1772:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
    1776:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
    177a:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
    177e:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
    1782:	b0 9b       	sbis	0x16, 0	; 22
    1784:	1b c0       	rjmp	.+54     	; 0x17bc <__vector_20+0x98>
    1786:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    178a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    178e:	c9 01       	movw	r24, r18
    1790:	01 96       	adiw	r24, 0x01	; 1
    1792:	09 2e       	mov	r0, r25
    1794:	00 0c       	add	r0, r0
    1796:	aa 0b       	sbc	r26, r26
    1798:	bb 0b       	sbc	r27, r27
    179a:	dc 01       	movw	r26, r24
    179c:	99 27       	eor	r25, r25
    179e:	88 27       	eor	r24, r24
    17a0:	60 e0       	ldi	r22, 0x00	; 0
    17a2:	70 e0       	ldi	r23, 0x00	; 0
    17a4:	84 2b       	or	r24, r20
    17a6:	95 2b       	or	r25, r21
    17a8:	a6 2b       	or	r26, r22
    17aa:	b7 2b       	or	r27, r23
    17ac:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
    17b0:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
    17b4:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
    17b8:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
    17bc:	e0 91 58 02 	lds	r30, 0x0258	; 0x800258 <mtable+0x1e>
    17c0:	f0 91 59 02 	lds	r31, 0x0259	; 0x800259 <mtable+0x1f>
    17c4:	30 97       	sbiw	r30, 0x00	; 0
    17c6:	39 f0       	breq	.+14     	; 0x17d6 <__vector_20+0xb2>
    17c8:	6f e0       	ldi	r22, 0x0F	; 15
    17ca:	70 e0       	ldi	r23, 0x00	; 0
    17cc:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <otable+0x1e>
    17d0:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <otable+0x1f>
    17d4:	09 95       	icall
    17d6:	0e 94 03 05 	call	0xa06	; 0xa06 <schedule>
    17da:	ff 91       	pop	r31
    17dc:	ef 91       	pop	r30
    17de:	bf 91       	pop	r27
    17e0:	af 91       	pop	r26
    17e2:	9f 91       	pop	r25
    17e4:	8f 91       	pop	r24
    17e6:	7f 91       	pop	r23
    17e8:	6f 91       	pop	r22
    17ea:	5f 91       	pop	r21
    17ec:	4f 91       	pop	r20
    17ee:	3f 91       	pop	r19
    17f0:	2f 91       	pop	r18
    17f2:	0f 90       	pop	r0
    17f4:	0f be       	out	0x3f, r0	; 63
    17f6:	0f 90       	pop	r0
    17f8:	1f 90       	pop	r1
    17fa:	18 95       	reti

000017fc <__vector_21>:
    17fc:	1f 92       	push	r1
    17fe:	0f 92       	push	r0
    1800:	0f b6       	in	r0, 0x3f	; 63
    1802:	0f 92       	push	r0
    1804:	11 24       	eor	r1, r1
    1806:	2f 93       	push	r18
    1808:	3f 93       	push	r19
    180a:	4f 93       	push	r20
    180c:	5f 93       	push	r21
    180e:	6f 93       	push	r22
    1810:	7f 93       	push	r23
    1812:	8f 93       	push	r24
    1814:	9f 93       	push	r25
    1816:	af 93       	push	r26
    1818:	bf 93       	push	r27
    181a:	ef 93       	push	r30
    181c:	ff 93       	push	r31
    181e:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <overflows>
    1822:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <overflows+0x1>
    1826:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    182a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    182e:	c9 01       	movw	r24, r18
    1830:	03 2e       	mov	r0, r19
    1832:	00 0c       	add	r0, r0
    1834:	aa 0b       	sbc	r26, r26
    1836:	bb 0b       	sbc	r27, r27
    1838:	dc 01       	movw	r26, r24
    183a:	99 27       	eor	r25, r25
    183c:	88 27       	eor	r24, r24
    183e:	60 e0       	ldi	r22, 0x00	; 0
    1840:	70 e0       	ldi	r23, 0x00	; 0
    1842:	84 2b       	or	r24, r20
    1844:	95 2b       	or	r25, r21
    1846:	a6 2b       	or	r26, r22
    1848:	b7 2b       	or	r27, r23
    184a:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
    184e:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
    1852:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
    1856:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
    185a:	b0 9b       	sbis	0x16, 0	; 22
    185c:	1b c0       	rjmp	.+54     	; 0x1894 <__vector_21+0x98>
    185e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1862:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1866:	c9 01       	movw	r24, r18
    1868:	01 96       	adiw	r24, 0x01	; 1
    186a:	09 2e       	mov	r0, r25
    186c:	00 0c       	add	r0, r0
    186e:	aa 0b       	sbc	r26, r26
    1870:	bb 0b       	sbc	r27, r27
    1872:	dc 01       	movw	r26, r24
    1874:	99 27       	eor	r25, r25
    1876:	88 27       	eor	r24, r24
    1878:	60 e0       	ldi	r22, 0x00	; 0
    187a:	70 e0       	ldi	r23, 0x00	; 0
    187c:	84 2b       	or	r24, r20
    187e:	95 2b       	or	r25, r21
    1880:	a6 2b       	or	r26, r22
    1882:	b7 2b       	or	r27, r23
    1884:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
    1888:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
    188c:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
    1890:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
    1894:	e0 91 5a 02 	lds	r30, 0x025A	; 0x80025a <mtable+0x20>
    1898:	f0 91 5b 02 	lds	r31, 0x025B	; 0x80025b <mtable+0x21>
    189c:	30 97       	sbiw	r30, 0x00	; 0
    189e:	39 f0       	breq	.+14     	; 0x18ae <__vector_21+0xb2>
    18a0:	60 e1       	ldi	r22, 0x10	; 16
    18a2:	70 e0       	ldi	r23, 0x00	; 0
    18a4:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <otable+0x20>
    18a8:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <otable+0x21>
    18ac:	09 95       	icall
    18ae:	0e 94 03 05 	call	0xa06	; 0xa06 <schedule>
    18b2:	ff 91       	pop	r31
    18b4:	ef 91       	pop	r30
    18b6:	bf 91       	pop	r27
    18b8:	af 91       	pop	r26
    18ba:	9f 91       	pop	r25
    18bc:	8f 91       	pop	r24
    18be:	7f 91       	pop	r23
    18c0:	6f 91       	pop	r22
    18c2:	5f 91       	pop	r21
    18c4:	4f 91       	pop	r20
    18c6:	3f 91       	pop	r19
    18c8:	2f 91       	pop	r18
    18ca:	0f 90       	pop	r0
    18cc:	0f be       	out	0x3f, r0	; 63
    18ce:	0f 90       	pop	r0
    18d0:	1f 90       	pop	r1
    18d2:	18 95       	reti

000018d4 <__vector_22>:
    18d4:	1f 92       	push	r1
    18d6:	0f 92       	push	r0
    18d8:	0f b6       	in	r0, 0x3f	; 63
    18da:	0f 92       	push	r0
    18dc:	11 24       	eor	r1, r1
    18de:	2f 93       	push	r18
    18e0:	3f 93       	push	r19
    18e2:	4f 93       	push	r20
    18e4:	5f 93       	push	r21
    18e6:	6f 93       	push	r22
    18e8:	7f 93       	push	r23
    18ea:	8f 93       	push	r24
    18ec:	9f 93       	push	r25
    18ee:	af 93       	push	r26
    18f0:	bf 93       	push	r27
    18f2:	ef 93       	push	r30
    18f4:	ff 93       	push	r31
    18f6:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <overflows>
    18fa:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <overflows+0x1>
    18fe:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1902:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1906:	c9 01       	movw	r24, r18
    1908:	03 2e       	mov	r0, r19
    190a:	00 0c       	add	r0, r0
    190c:	aa 0b       	sbc	r26, r26
    190e:	bb 0b       	sbc	r27, r27
    1910:	dc 01       	movw	r26, r24
    1912:	99 27       	eor	r25, r25
    1914:	88 27       	eor	r24, r24
    1916:	60 e0       	ldi	r22, 0x00	; 0
    1918:	70 e0       	ldi	r23, 0x00	; 0
    191a:	84 2b       	or	r24, r20
    191c:	95 2b       	or	r25, r21
    191e:	a6 2b       	or	r26, r22
    1920:	b7 2b       	or	r27, r23
    1922:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
    1926:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
    192a:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
    192e:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
    1932:	b0 9b       	sbis	0x16, 0	; 22
    1934:	1b c0       	rjmp	.+54     	; 0x196c <__vector_22+0x98>
    1936:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    193a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    193e:	c9 01       	movw	r24, r18
    1940:	01 96       	adiw	r24, 0x01	; 1
    1942:	09 2e       	mov	r0, r25
    1944:	00 0c       	add	r0, r0
    1946:	aa 0b       	sbc	r26, r26
    1948:	bb 0b       	sbc	r27, r27
    194a:	dc 01       	movw	r26, r24
    194c:	99 27       	eor	r25, r25
    194e:	88 27       	eor	r24, r24
    1950:	60 e0       	ldi	r22, 0x00	; 0
    1952:	70 e0       	ldi	r23, 0x00	; 0
    1954:	84 2b       	or	r24, r20
    1956:	95 2b       	or	r25, r21
    1958:	a6 2b       	or	r26, r22
    195a:	b7 2b       	or	r27, r23
    195c:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
    1960:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
    1964:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
    1968:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
    196c:	e0 91 5c 02 	lds	r30, 0x025C	; 0x80025c <mtable+0x22>
    1970:	f0 91 5d 02 	lds	r31, 0x025D	; 0x80025d <mtable+0x23>
    1974:	30 97       	sbiw	r30, 0x00	; 0
    1976:	39 f0       	breq	.+14     	; 0x1986 <__vector_22+0xb2>
    1978:	61 e1       	ldi	r22, 0x11	; 17
    197a:	70 e0       	ldi	r23, 0x00	; 0
    197c:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <otable+0x22>
    1980:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <otable+0x23>
    1984:	09 95       	icall
    1986:	0e 94 03 05 	call	0xa06	; 0xa06 <schedule>
    198a:	ff 91       	pop	r31
    198c:	ef 91       	pop	r30
    198e:	bf 91       	pop	r27
    1990:	af 91       	pop	r26
    1992:	9f 91       	pop	r25
    1994:	8f 91       	pop	r24
    1996:	7f 91       	pop	r23
    1998:	6f 91       	pop	r22
    199a:	5f 91       	pop	r21
    199c:	4f 91       	pop	r20
    199e:	3f 91       	pop	r19
    19a0:	2f 91       	pop	r18
    19a2:	0f 90       	pop	r0
    19a4:	0f be       	out	0x3f, r0	; 63
    19a6:	0f 90       	pop	r0
    19a8:	1f 90       	pop	r1
    19aa:	18 95       	reti

000019ac <enqueueByDeadline>:
    19ac:	ef 92       	push	r14
    19ae:	ff 92       	push	r15
    19b0:	0f 93       	push	r16
    19b2:	1f 93       	push	r17
    19b4:	cf 93       	push	r28
    19b6:	df 93       	push	r29
    19b8:	7b 01       	movw	r14, r22
    19ba:	eb 01       	movw	r28, r22
    19bc:	a8 81       	ld	r26, Y
    19be:	b9 81       	ldd	r27, Y+1	; 0x01
    19c0:	10 97       	sbiw	r26, 0x00	; 0
    19c2:	61 f1       	breq	.+88     	; 0x1a1c <enqueueByDeadline+0x70>
    19c4:	fc 01       	movw	r30, r24
    19c6:	06 81       	ldd	r16, Z+6	; 0x06
    19c8:	17 81       	ldd	r17, Z+7	; 0x07
    19ca:	20 85       	ldd	r18, Z+8	; 0x08
    19cc:	31 85       	ldd	r19, Z+9	; 0x09
    19ce:	16 96       	adiw	r26, 0x06	; 6
    19d0:	4d 91       	ld	r20, X+
    19d2:	5d 91       	ld	r21, X+
    19d4:	6d 91       	ld	r22, X+
    19d6:	7c 91       	ld	r23, X
    19d8:	19 97       	sbiw	r26, 0x09	; 9
    19da:	04 17       	cp	r16, r20
    19dc:	15 07       	cpc	r17, r21
    19de:	26 07       	cpc	r18, r22
    19e0:	37 07       	cpc	r19, r23
    19e2:	14 f4       	brge	.+4      	; 0x19e8 <enqueueByDeadline+0x3c>
    19e4:	1b c0       	rjmp	.+54     	; 0x1a1c <enqueueByDeadline+0x70>
    19e6:	df 01       	movw	r26, r30
    19e8:	ed 91       	ld	r30, X+
    19ea:	fc 91       	ld	r31, X
    19ec:	11 97       	sbiw	r26, 0x01	; 1
    19ee:	30 97       	sbiw	r30, 0x00	; 0
    19f0:	49 f0       	breq	.+18     	; 0x1a04 <enqueueByDeadline+0x58>
    19f2:	46 81       	ldd	r20, Z+6	; 0x06
    19f4:	57 81       	ldd	r21, Z+7	; 0x07
    19f6:	60 85       	ldd	r22, Z+8	; 0x08
    19f8:	71 85       	ldd	r23, Z+9	; 0x09
    19fa:	04 17       	cp	r16, r20
    19fc:	15 07       	cpc	r17, r21
    19fe:	26 07       	cpc	r18, r22
    1a00:	37 07       	cpc	r19, r23
    1a02:	8c f7       	brge	.-30     	; 0x19e6 <enqueueByDeadline+0x3a>
    1a04:	ec 01       	movw	r28, r24
    1a06:	f9 83       	std	Y+1, r31	; 0x01
    1a08:	e8 83       	st	Y, r30
    1a0a:	10 97       	sbiw	r26, 0x00	; 0
    1a0c:	21 f4       	brne	.+8      	; 0x1a16 <enqueueByDeadline+0x6a>
    1a0e:	f7 01       	movw	r30, r14
    1a10:	91 83       	std	Z+1, r25	; 0x01
    1a12:	80 83       	st	Z, r24
    1a14:	07 c0       	rjmp	.+14     	; 0x1a24 <enqueueByDeadline+0x78>
    1a16:	8d 93       	st	X+, r24
    1a18:	9c 93       	st	X, r25
    1a1a:	04 c0       	rjmp	.+8      	; 0x1a24 <enqueueByDeadline+0x78>
    1a1c:	ec 01       	movw	r28, r24
    1a1e:	b9 83       	std	Y+1, r27	; 0x01
    1a20:	a8 83       	st	Y, r26
    1a22:	f5 cf       	rjmp	.-22     	; 0x1a0e <enqueueByDeadline+0x62>
    1a24:	df 91       	pop	r29
    1a26:	cf 91       	pop	r28
    1a28:	1f 91       	pop	r17
    1a2a:	0f 91       	pop	r16
    1a2c:	ff 90       	pop	r15
    1a2e:	ef 90       	pop	r14
    1a30:	08 95       	ret

00001a32 <enqueueByBaseline>:
    1a32:	ef 92       	push	r14
    1a34:	ff 92       	push	r15
    1a36:	0f 93       	push	r16
    1a38:	1f 93       	push	r17
    1a3a:	cf 93       	push	r28
    1a3c:	df 93       	push	r29
    1a3e:	7b 01       	movw	r14, r22
    1a40:	eb 01       	movw	r28, r22
    1a42:	a8 81       	ld	r26, Y
    1a44:	b9 81       	ldd	r27, Y+1	; 0x01
    1a46:	10 97       	sbiw	r26, 0x00	; 0
    1a48:	61 f1       	breq	.+88     	; 0x1aa2 <enqueueByBaseline+0x70>
    1a4a:	fc 01       	movw	r30, r24
    1a4c:	02 81       	ldd	r16, Z+2	; 0x02
    1a4e:	13 81       	ldd	r17, Z+3	; 0x03
    1a50:	24 81       	ldd	r18, Z+4	; 0x04
    1a52:	35 81       	ldd	r19, Z+5	; 0x05
    1a54:	12 96       	adiw	r26, 0x02	; 2
    1a56:	4d 91       	ld	r20, X+
    1a58:	5d 91       	ld	r21, X+
    1a5a:	6d 91       	ld	r22, X+
    1a5c:	7c 91       	ld	r23, X
    1a5e:	15 97       	sbiw	r26, 0x05	; 5
    1a60:	04 17       	cp	r16, r20
    1a62:	15 07       	cpc	r17, r21
    1a64:	26 07       	cpc	r18, r22
    1a66:	37 07       	cpc	r19, r23
    1a68:	14 f4       	brge	.+4      	; 0x1a6e <enqueueByBaseline+0x3c>
    1a6a:	1b c0       	rjmp	.+54     	; 0x1aa2 <enqueueByBaseline+0x70>
    1a6c:	df 01       	movw	r26, r30
    1a6e:	ed 91       	ld	r30, X+
    1a70:	fc 91       	ld	r31, X
    1a72:	11 97       	sbiw	r26, 0x01	; 1
    1a74:	30 97       	sbiw	r30, 0x00	; 0
    1a76:	49 f0       	breq	.+18     	; 0x1a8a <enqueueByBaseline+0x58>
    1a78:	42 81       	ldd	r20, Z+2	; 0x02
    1a7a:	53 81       	ldd	r21, Z+3	; 0x03
    1a7c:	64 81       	ldd	r22, Z+4	; 0x04
    1a7e:	75 81       	ldd	r23, Z+5	; 0x05
    1a80:	04 17       	cp	r16, r20
    1a82:	15 07       	cpc	r17, r21
    1a84:	26 07       	cpc	r18, r22
    1a86:	37 07       	cpc	r19, r23
    1a88:	8c f7       	brge	.-30     	; 0x1a6c <enqueueByBaseline+0x3a>
    1a8a:	ec 01       	movw	r28, r24
    1a8c:	f9 83       	std	Y+1, r31	; 0x01
    1a8e:	e8 83       	st	Y, r30
    1a90:	10 97       	sbiw	r26, 0x00	; 0
    1a92:	21 f4       	brne	.+8      	; 0x1a9c <enqueueByBaseline+0x6a>
    1a94:	f7 01       	movw	r30, r14
    1a96:	91 83       	std	Z+1, r25	; 0x01
    1a98:	80 83       	st	Z, r24
    1a9a:	07 c0       	rjmp	.+14     	; 0x1aaa <enqueueByBaseline+0x78>
    1a9c:	8d 93       	st	X+, r24
    1a9e:	9c 93       	st	X, r25
    1aa0:	04 c0       	rjmp	.+8      	; 0x1aaa <enqueueByBaseline+0x78>
    1aa2:	ec 01       	movw	r28, r24
    1aa4:	b9 83       	std	Y+1, r27	; 0x01
    1aa6:	a8 83       	st	Y, r26
    1aa8:	f5 cf       	rjmp	.-22     	; 0x1a94 <enqueueByBaseline+0x62>
    1aaa:	df 91       	pop	r29
    1aac:	cf 91       	pop	r28
    1aae:	1f 91       	pop	r17
    1ab0:	0f 91       	pop	r16
    1ab2:	ff 90       	pop	r15
    1ab4:	ef 90       	pop	r14
    1ab6:	08 95       	ret

00001ab8 <dequeue>:
    1ab8:	dc 01       	movw	r26, r24
    1aba:	ed 91       	ld	r30, X+
    1abc:	fc 91       	ld	r31, X
    1abe:	11 97       	sbiw	r26, 0x01	; 1
    1ac0:	30 97       	sbiw	r30, 0x00	; 0
    1ac2:	21 f0       	breq	.+8      	; 0x1acc <dequeue+0x14>
    1ac4:	20 81       	ld	r18, Z
    1ac6:	31 81       	ldd	r19, Z+1	; 0x01
    1ac8:	2d 93       	st	X+, r18
    1aca:	3c 93       	st	X, r19
    1acc:	cf 01       	movw	r24, r30
    1ace:	08 95       	ret

00001ad0 <__vector_9>:
    1ad0:	1f 92       	push	r1
    1ad2:	0f 92       	push	r0
    1ad4:	0f b6       	in	r0, 0x3f	; 63
    1ad6:	0f 92       	push	r0
    1ad8:	11 24       	eor	r1, r1
    1ada:	2f 93       	push	r18
    1adc:	3f 93       	push	r19
    1ade:	4f 93       	push	r20
    1ae0:	5f 93       	push	r21
    1ae2:	6f 93       	push	r22
    1ae4:	7f 93       	push	r23
    1ae6:	8f 93       	push	r24
    1ae8:	9f 93       	push	r25
    1aea:	ef 93       	push	r30
    1aec:	ff 93       	push	r31
    1aee:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <overflows>
    1af2:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <overflows+0x1>
    1af6:	01 96       	adiw	r24, 0x01	; 1
    1af8:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <overflows+0x1>
    1afc:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <overflows>
    1b00:	e0 91 9e 01 	lds	r30, 0x019E	; 0x80019e <timerQ>
    1b04:	f0 91 9f 01 	lds	r31, 0x019F	; 0x80019f <timerQ+0x1>
    1b08:	30 97       	sbiw	r30, 0x00	; 0
    1b0a:	01 f1       	breq	.+64     	; 0x1b4c <__vector_9+0x7c>
    1b0c:	42 81       	ldd	r20, Z+2	; 0x02
    1b0e:	53 81       	ldd	r21, Z+3	; 0x03
    1b10:	64 81       	ldd	r22, Z+4	; 0x04
    1b12:	75 81       	ldd	r23, Z+5	; 0x05
    1b14:	86 17       	cp	r24, r22
    1b16:	97 07       	cpc	r25, r23
    1b18:	c9 f4       	brne	.+50     	; 0x1b4c <__vector_9+0x7c>
    1b1a:	ca 01       	movw	r24, r20
    1b1c:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1b20:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1b24:	42 1b       	sub	r20, r18
    1b26:	53 0b       	sbc	r21, r19
    1b28:	41 30       	cpi	r20, 0x01	; 1
    1b2a:	51 05       	cpc	r21, r1
    1b2c:	29 f4       	brne	.+10     	; 0x1b38 <__vector_9+0x68>
    1b2e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1b32:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1b36:	01 96       	adiw	r24, 0x01	; 1
    1b38:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1b3c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1b40:	ef e6       	ldi	r30, 0x6F	; 111
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	80 81       	ld	r24, Z
    1b46:	82 60       	ori	r24, 0x02	; 2
    1b48:	80 83       	st	Z, r24
    1b4a:	05 c0       	rjmp	.+10     	; 0x1b56 <__vector_9+0x86>
    1b4c:	ef e6       	ldi	r30, 0x6F	; 111
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	80 81       	ld	r24, Z
    1b52:	8d 7f       	andi	r24, 0xFD	; 253
    1b54:	80 83       	st	Z, r24
    1b56:	ff 91       	pop	r31
    1b58:	ef 91       	pop	r30
    1b5a:	9f 91       	pop	r25
    1b5c:	8f 91       	pop	r24
    1b5e:	7f 91       	pop	r23
    1b60:	6f 91       	pop	r22
    1b62:	5f 91       	pop	r21
    1b64:	4f 91       	pop	r20
    1b66:	3f 91       	pop	r19
    1b68:	2f 91       	pop	r18
    1b6a:	0f 90       	pop	r0
    1b6c:	0f be       	out	0x3f, r0	; 63
    1b6e:	0f 90       	pop	r0
    1b70:	1f 90       	pop	r1
    1b72:	18 95       	reti

00001b74 <__vector_7>:
    1b74:	1f 92       	push	r1
    1b76:	0f 92       	push	r0
    1b78:	0f b6       	in	r0, 0x3f	; 63
    1b7a:	0f 92       	push	r0
    1b7c:	11 24       	eor	r1, r1
    1b7e:	cf 92       	push	r12
    1b80:	df 92       	push	r13
    1b82:	ef 92       	push	r14
    1b84:	ff 92       	push	r15
    1b86:	2f 93       	push	r18
    1b88:	3f 93       	push	r19
    1b8a:	4f 93       	push	r20
    1b8c:	5f 93       	push	r21
    1b8e:	6f 93       	push	r22
    1b90:	7f 93       	push	r23
    1b92:	8f 93       	push	r24
    1b94:	9f 93       	push	r25
    1b96:	af 93       	push	r26
    1b98:	bf 93       	push	r27
    1b9a:	ef 93       	push	r30
    1b9c:	ff 93       	push	r31
    1b9e:	c0 90 98 01 	lds	r12, 0x0198	; 0x800198 <overflows>
    1ba2:	d0 90 99 01 	lds	r13, 0x0199	; 0x800199 <overflows+0x1>
    1ba6:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1baa:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1bae:	b0 99       	sbic	0x16, 0	; 22
    1bb0:	0f c0       	rjmp	.+30     	; 0x1bd0 <__vector_7+0x5c>
    1bb2:	0d 2c       	mov	r0, r13
    1bb4:	00 0c       	add	r0, r0
    1bb6:	ee 08       	sbc	r14, r14
    1bb8:	ff 08       	sbc	r15, r15
    1bba:	d6 01       	movw	r26, r12
    1bbc:	99 27       	eor	r25, r25
    1bbe:	88 27       	eor	r24, r24
    1bc0:	69 01       	movw	r12, r18
    1bc2:	e1 2c       	mov	r14, r1
    1bc4:	f1 2c       	mov	r15, r1
    1bc6:	c8 2a       	or	r12, r24
    1bc8:	d9 2a       	or	r13, r25
    1bca:	ea 2a       	or	r14, r26
    1bcc:	fb 2a       	or	r15, r27
    1bce:	15 c0       	rjmp	.+42     	; 0x1bfa <__vector_7+0x86>
    1bd0:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1bd4:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1bd8:	8f ef       	ldi	r24, 0xFF	; 255
    1bda:	c8 1a       	sub	r12, r24
    1bdc:	d8 0a       	sbc	r13, r24
    1bde:	0d 2c       	mov	r0, r13
    1be0:	00 0c       	add	r0, r0
    1be2:	ee 08       	sbc	r14, r14
    1be4:	ff 08       	sbc	r15, r15
    1be6:	d6 01       	movw	r26, r12
    1be8:	99 27       	eor	r25, r25
    1bea:	88 27       	eor	r24, r24
    1bec:	69 01       	movw	r12, r18
    1bee:	e1 2c       	mov	r14, r1
    1bf0:	f1 2c       	mov	r15, r1
    1bf2:	c8 2a       	or	r12, r24
    1bf4:	d9 2a       	or	r13, r25
    1bf6:	ea 2a       	or	r14, r26
    1bf8:	fb 2a       	or	r15, r27
    1bfa:	e0 91 9e 01 	lds	r30, 0x019E	; 0x80019e <timerQ>
    1bfe:	f0 91 9f 01 	lds	r31, 0x019F	; 0x80019f <timerQ+0x1>
    1c02:	30 97       	sbiw	r30, 0x00	; 0
    1c04:	09 f4       	brne	.+2      	; 0x1c08 <__vector_7+0x94>
    1c06:	42 c0       	rjmp	.+132    	; 0x1c8c <__vector_7+0x118>
    1c08:	82 81       	ldd	r24, Z+2	; 0x02
    1c0a:	93 81       	ldd	r25, Z+3	; 0x03
    1c0c:	a4 81       	ldd	r26, Z+4	; 0x04
    1c0e:	b5 81       	ldd	r27, Z+5	; 0x05
    1c10:	8c 19       	sub	r24, r12
    1c12:	9d 09       	sbc	r25, r13
    1c14:	ae 09       	sbc	r26, r14
    1c16:	bf 09       	sbc	r27, r15
    1c18:	18 16       	cp	r1, r24
    1c1a:	19 06       	cpc	r1, r25
    1c1c:	1a 06       	cpc	r1, r26
    1c1e:	1b 06       	cpc	r1, r27
    1c20:	ec f1       	brlt	.+122    	; 0x1c9c <__vector_7+0x128>
    1c22:	8e e9       	ldi	r24, 0x9E	; 158
    1c24:	91 e0       	ldi	r25, 0x01	; 1
    1c26:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <dequeue>
    1c2a:	60 ea       	ldi	r22, 0xA0	; 160
    1c2c:	71 e0       	ldi	r23, 0x01	; 1
    1c2e:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <enqueueByDeadline>
    1c32:	e0 91 9e 01 	lds	r30, 0x019E	; 0x80019e <timerQ>
    1c36:	f0 91 9f 01 	lds	r31, 0x019F	; 0x80019f <timerQ+0x1>
    1c3a:	30 97       	sbiw	r30, 0x00	; 0
    1c3c:	39 f1       	breq	.+78     	; 0x1c8c <__vector_7+0x118>
    1c3e:	82 81       	ldd	r24, Z+2	; 0x02
    1c40:	93 81       	ldd	r25, Z+3	; 0x03
    1c42:	a4 81       	ldd	r26, Z+4	; 0x04
    1c44:	b5 81       	ldd	r27, Z+5	; 0x05
    1c46:	8c 19       	sub	r24, r12
    1c48:	9d 09       	sbc	r25, r13
    1c4a:	ae 09       	sbc	r26, r14
    1c4c:	bf 09       	sbc	r27, r15
    1c4e:	18 16       	cp	r1, r24
    1c50:	19 06       	cpc	r1, r25
    1c52:	1a 06       	cpc	r1, r26
    1c54:	1b 06       	cpc	r1, r27
    1c56:	2c f7       	brge	.-54     	; 0x1c22 <__vector_7+0xae>
    1c58:	21 c0       	rjmp	.+66     	; 0x1c9c <__vector_7+0x128>
    1c5a:	9c 01       	movw	r18, r24
    1c5c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1c60:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1c64:	84 1b       	sub	r24, r20
    1c66:	95 0b       	sbc	r25, r21
    1c68:	01 97       	sbiw	r24, 0x01	; 1
    1c6a:	31 f4       	brne	.+12     	; 0x1c78 <__vector_7+0x104>
    1c6c:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1c70:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1c74:	2f 5f       	subi	r18, 0xFF	; 255
    1c76:	3f 4f       	sbci	r19, 0xFF	; 255
    1c78:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1c7c:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1c80:	ef e6       	ldi	r30, 0x6F	; 111
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	80 81       	ld	r24, Z
    1c86:	82 60       	ori	r24, 0x02	; 2
    1c88:	80 83       	st	Z, r24
    1c8a:	05 c0       	rjmp	.+10     	; 0x1c96 <__vector_7+0x122>
    1c8c:	ef e6       	ldi	r30, 0x6F	; 111
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	80 81       	ld	r24, Z
    1c92:	8d 7f       	andi	r24, 0xFD	; 253
    1c94:	80 83       	st	Z, r24
    1c96:	0e 94 03 05 	call	0xa06	; 0xa06 <schedule>
    1c9a:	0c c0       	rjmp	.+24     	; 0x1cb4 <__vector_7+0x140>
    1c9c:	82 81       	ldd	r24, Z+2	; 0x02
    1c9e:	93 81       	ldd	r25, Z+3	; 0x03
    1ca0:	a4 81       	ldd	r26, Z+4	; 0x04
    1ca2:	b5 81       	ldd	r27, Z+5	; 0x05
    1ca4:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <overflows>
    1ca8:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <overflows+0x1>
    1cac:	2a 17       	cp	r18, r26
    1cae:	3b 07       	cpc	r19, r27
    1cb0:	69 f7       	brne	.-38     	; 0x1c8c <__vector_7+0x118>
    1cb2:	d3 cf       	rjmp	.-90     	; 0x1c5a <__vector_7+0xe6>
    1cb4:	ff 91       	pop	r31
    1cb6:	ef 91       	pop	r30
    1cb8:	bf 91       	pop	r27
    1cba:	af 91       	pop	r26
    1cbc:	9f 91       	pop	r25
    1cbe:	8f 91       	pop	r24
    1cc0:	7f 91       	pop	r23
    1cc2:	6f 91       	pop	r22
    1cc4:	5f 91       	pop	r21
    1cc6:	4f 91       	pop	r20
    1cc8:	3f 91       	pop	r19
    1cca:	2f 91       	pop	r18
    1ccc:	ff 90       	pop	r15
    1cce:	ef 90       	pop	r14
    1cd0:	df 90       	pop	r13
    1cd2:	cf 90       	pop	r12
    1cd4:	0f 90       	pop	r0
    1cd6:	0f be       	out	0x3f, r0	; 63
    1cd8:	0f 90       	pop	r0
    1cda:	1f 90       	pop	r1
    1cdc:	18 95       	reti

00001cde <async>:
    1cde:	3f 92       	push	r3
    1ce0:	4f 92       	push	r4
    1ce2:	5f 92       	push	r5
    1ce4:	6f 92       	push	r6
    1ce6:	7f 92       	push	r7
    1ce8:	8f 92       	push	r8
    1cea:	9f 92       	push	r9
    1cec:	af 92       	push	r10
    1cee:	bf 92       	push	r11
    1cf0:	cf 92       	push	r12
    1cf2:	df 92       	push	r13
    1cf4:	ef 92       	push	r14
    1cf6:	ff 92       	push	r15
    1cf8:	0f 93       	push	r16
    1cfa:	1f 93       	push	r17
    1cfc:	cf 93       	push	r28
    1cfe:	df 93       	push	r29
    1d00:	2b 01       	movw	r4, r22
    1d02:	3c 01       	movw	r6, r24
    1d04:	49 01       	movw	r8, r18
    1d06:	5a 01       	movw	r10, r20
    1d08:	8f b7       	in	r24, 0x3f	; 63
    1d0a:	80 78       	andi	r24, 0x80	; 128
    1d0c:	38 2e       	mov	r3, r24
    1d0e:	f8 94       	cli
    1d10:	89 e8       	ldi	r24, 0x89	; 137
    1d12:	91 e0       	ldi	r25, 0x01	; 1
    1d14:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <dequeue>
    1d18:	ec 01       	movw	r28, r24
    1d1a:	1b 87       	std	Y+11, r17	; 0x0b
    1d1c:	0a 87       	std	Y+10, r16	; 0x0a
    1d1e:	fd 86       	std	Y+13, r15	; 0x0d
    1d20:	ec 86       	std	Y+12, r14	; 0x0c
    1d22:	df 86       	std	Y+15, r13	; 0x0f
    1d24:	ce 86       	std	Y+14, r12	; 0x0e
    1d26:	33 20       	and	r3, r3
    1d28:	61 f0       	breq	.+24     	; 0x1d42 <async+0x64>
    1d2a:	e0 91 83 01 	lds	r30, 0x0183	; 0x800183 <current>
    1d2e:	f0 91 84 01 	lds	r31, 0x0184	; 0x800184 <current+0x1>
    1d32:	02 80       	ldd	r0, Z+2	; 0x02
    1d34:	f3 81       	ldd	r31, Z+3	; 0x03
    1d36:	e0 2d       	mov	r30, r0
    1d38:	82 81       	ldd	r24, Z+2	; 0x02
    1d3a:	93 81       	ldd	r25, Z+3	; 0x03
    1d3c:	a4 81       	ldd	r26, Z+4	; 0x04
    1d3e:	b5 81       	ldd	r27, Z+5	; 0x05
    1d40:	08 c0       	rjmp	.+16     	; 0x1d52 <async+0x74>
    1d42:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <timestamp>
    1d46:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <timestamp+0x1>
    1d4a:	a0 91 9c 01 	lds	r26, 0x019C	; 0x80019c <timestamp+0x2>
    1d4e:	b0 91 9d 01 	lds	r27, 0x019D	; 0x80019d <timestamp+0x3>
    1d52:	48 0e       	add	r4, r24
    1d54:	59 1e       	adc	r5, r25
    1d56:	6a 1e       	adc	r6, r26
    1d58:	7b 1e       	adc	r7, r27
    1d5a:	4a 82       	std	Y+2, r4	; 0x02
    1d5c:	5b 82       	std	Y+3, r5	; 0x03
    1d5e:	6c 82       	std	Y+4, r6	; 0x04
    1d60:	7d 82       	std	Y+5, r7	; 0x05
    1d62:	18 14       	cp	r1, r8
    1d64:	19 04       	cpc	r1, r9
    1d66:	1a 04       	cpc	r1, r10
    1d68:	1b 04       	cpc	r1, r11
    1d6a:	44 f0       	brlt	.+16     	; 0x1d7c <async+0x9e>
    1d6c:	0f 2e       	mov	r0, r31
    1d6e:	88 24       	eor	r8, r8
    1d70:	8a 94       	dec	r8
    1d72:	98 2c       	mov	r9, r8
    1d74:	a8 2c       	mov	r10, r8
    1d76:	ff e7       	ldi	r31, 0x7F	; 127
    1d78:	bf 2e       	mov	r11, r31
    1d7a:	f0 2d       	mov	r31, r0
    1d7c:	84 0c       	add	r8, r4
    1d7e:	95 1c       	adc	r9, r5
    1d80:	a6 1c       	adc	r10, r6
    1d82:	b7 1c       	adc	r11, r7
    1d84:	8e 82       	std	Y+6, r8	; 0x06
    1d86:	9f 82       	std	Y+7, r9	; 0x07
    1d88:	a8 86       	std	Y+8, r10	; 0x08
    1d8a:	b9 86       	std	Y+9, r11	; 0x09
    1d8c:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <overflows>
    1d90:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <overflows+0x1>
    1d94:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1d98:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1d9c:	b0 99       	sbic	0x16, 0	; 22
    1d9e:	0e c0       	rjmp	.+28     	; 0x1dbc <async+0xde>
    1da0:	09 2e       	mov	r0, r25
    1da2:	00 0c       	add	r0, r0
    1da4:	aa 0b       	sbc	r26, r26
    1da6:	bb 0b       	sbc	r27, r27
    1da8:	dc 01       	movw	r26, r24
    1daa:	99 27       	eor	r25, r25
    1dac:	88 27       	eor	r24, r24
    1dae:	60 e0       	ldi	r22, 0x00	; 0
    1db0:	70 e0       	ldi	r23, 0x00	; 0
    1db2:	84 2b       	or	r24, r20
    1db4:	95 2b       	or	r25, r21
    1db6:	a6 2b       	or	r26, r22
    1db8:	b7 2b       	or	r27, r23
    1dba:	13 c0       	rjmp	.+38     	; 0x1de2 <async+0x104>
    1dbc:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1dc0:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1dc4:	01 96       	adiw	r24, 0x01	; 1
    1dc6:	09 2e       	mov	r0, r25
    1dc8:	00 0c       	add	r0, r0
    1dca:	aa 0b       	sbc	r26, r26
    1dcc:	bb 0b       	sbc	r27, r27
    1dce:	dc 01       	movw	r26, r24
    1dd0:	99 27       	eor	r25, r25
    1dd2:	88 27       	eor	r24, r24
    1dd4:	a9 01       	movw	r20, r18
    1dd6:	60 e0       	ldi	r22, 0x00	; 0
    1dd8:	70 e0       	ldi	r23, 0x00	; 0
    1dda:	84 2b       	or	r24, r20
    1ddc:	95 2b       	or	r25, r21
    1dde:	a6 2b       	or	r26, r22
    1de0:	b7 2b       	or	r27, r23
    1de2:	48 1a       	sub	r4, r24
    1de4:	59 0a       	sbc	r5, r25
    1de6:	6a 0a       	sbc	r6, r26
    1de8:	7b 0a       	sbc	r7, r27
    1dea:	14 14       	cp	r1, r4
    1dec:	15 04       	cpc	r1, r5
    1dee:	16 04       	cpc	r1, r6
    1df0:	17 04       	cpc	r1, r7
    1df2:	ac f5       	brge	.+106    	; 0x1e5e <async+0x180>
    1df4:	6e e9       	ldi	r22, 0x9E	; 158
    1df6:	71 e0       	ldi	r23, 0x01	; 1
    1df8:	ce 01       	movw	r24, r28
    1dfa:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <enqueueByBaseline>
    1dfe:	e0 91 9e 01 	lds	r30, 0x019E	; 0x80019e <timerQ>
    1e02:	f0 91 9f 01 	lds	r31, 0x019F	; 0x80019f <timerQ+0x1>
    1e06:	30 97       	sbiw	r30, 0x00	; 0
    1e08:	21 f1       	breq	.+72     	; 0x1e52 <async+0x174>
    1e0a:	82 81       	ldd	r24, Z+2	; 0x02
    1e0c:	93 81       	ldd	r25, Z+3	; 0x03
    1e0e:	a4 81       	ldd	r26, Z+4	; 0x04
    1e10:	b5 81       	ldd	r27, Z+5	; 0x05
    1e12:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <overflows>
    1e16:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <overflows+0x1>
    1e1a:	2a 17       	cp	r18, r26
    1e1c:	3b 07       	cpc	r19, r27
    1e1e:	c9 f4       	brne	.+50     	; 0x1e52 <async+0x174>
    1e20:	9c 01       	movw	r18, r24
    1e22:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1e26:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1e2a:	84 1b       	sub	r24, r20
    1e2c:	95 0b       	sbc	r25, r21
    1e2e:	01 97       	sbiw	r24, 0x01	; 1
    1e30:	31 f4       	brne	.+12     	; 0x1e3e <async+0x160>
    1e32:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1e36:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1e3a:	2f 5f       	subi	r18, 0xFF	; 255
    1e3c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e3e:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1e42:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1e46:	ef e6       	ldi	r30, 0x6F	; 111
    1e48:	f0 e0       	ldi	r31, 0x00	; 0
    1e4a:	80 81       	ld	r24, Z
    1e4c:	82 60       	ori	r24, 0x02	; 2
    1e4e:	80 83       	st	Z, r24
    1e50:	41 c0       	rjmp	.+130    	; 0x1ed4 <async+0x1f6>
    1e52:	ef e6       	ldi	r30, 0x6F	; 111
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	80 81       	ld	r24, Z
    1e58:	8d 7f       	andi	r24, 0xFD	; 253
    1e5a:	80 83       	st	Z, r24
    1e5c:	3b c0       	rjmp	.+118    	; 0x1ed4 <async+0x1f6>
    1e5e:	60 ea       	ldi	r22, 0xA0	; 160
    1e60:	71 e0       	ldi	r23, 0x01	; 1
    1e62:	ce 01       	movw	r24, r28
    1e64:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <enqueueByDeadline>
    1e68:	33 20       	and	r3, r3
    1e6a:	b9 f1       	breq	.+110    	; 0x1eda <async+0x1fc>
    1e6c:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <threadPool>
    1e70:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <threadPool+0x1>
    1e74:	00 97       	sbiw	r24, 0x00	; 0
    1e76:	81 f1       	breq	.+96     	; 0x1ed8 <async+0x1fa>
    1e78:	e0 91 85 01 	lds	r30, 0x0185	; 0x800185 <activeStack>
    1e7c:	f0 91 86 01 	lds	r31, 0x0186	; 0x800186 <activeStack+0x1>
    1e80:	20 91 a0 01 	lds	r18, 0x01A0	; 0x8001a0 <msgQ>
    1e84:	30 91 a1 01 	lds	r19, 0x01A1	; 0x8001a1 <msgQ+0x1>
    1e88:	02 81       	ldd	r16, Z+2	; 0x02
    1e8a:	13 81       	ldd	r17, Z+3	; 0x03
    1e8c:	d9 01       	movw	r26, r18
    1e8e:	16 96       	adiw	r26, 0x06	; 6
    1e90:	4d 91       	ld	r20, X+
    1e92:	5d 91       	ld	r21, X+
    1e94:	6d 91       	ld	r22, X+
    1e96:	7c 91       	ld	r23, X
    1e98:	19 97       	sbiw	r26, 0x09	; 9
    1e9a:	d8 01       	movw	r26, r16
    1e9c:	16 96       	adiw	r26, 0x06	; 6
    1e9e:	0d 91       	ld	r16, X+
    1ea0:	1d 91       	ld	r17, X+
    1ea2:	2d 91       	ld	r18, X+
    1ea4:	3c 91       	ld	r19, X
    1ea6:	19 97       	sbiw	r26, 0x09	; 9
    1ea8:	40 1b       	sub	r20, r16
    1eaa:	51 0b       	sbc	r21, r17
    1eac:	62 0b       	sbc	r22, r18
    1eae:	73 0b       	sbc	r23, r19
    1eb0:	9a f4       	brpl	.+38     	; 0x1ed8 <async+0x1fa>
    1eb2:	dc 01       	movw	r26, r24
    1eb4:	2d 91       	ld	r18, X+
    1eb6:	3c 91       	ld	r19, X
    1eb8:	11 97       	sbiw	r26, 0x01	; 1
    1eba:	30 93 88 01 	sts	0x0188, r19	; 0x800188 <threadPool+0x1>
    1ebe:	20 93 87 01 	sts	0x0187, r18	; 0x800187 <threadPool>
    1ec2:	ed 93       	st	X+, r30
    1ec4:	fc 93       	st	X, r31
    1ec6:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <activeStack+0x1>
    1eca:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <activeStack>
    1ece:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <dispatch>
    1ed2:	02 c0       	rjmp	.+4      	; 0x1ed8 <async+0x1fa>
    1ed4:	33 20       	and	r3, r3
    1ed6:	09 f0       	breq	.+2      	; 0x1eda <async+0x1fc>
    1ed8:	78 94       	sei
    1eda:	ce 01       	movw	r24, r28
    1edc:	df 91       	pop	r29
    1ede:	cf 91       	pop	r28
    1ee0:	1f 91       	pop	r17
    1ee2:	0f 91       	pop	r16
    1ee4:	ff 90       	pop	r15
    1ee6:	ef 90       	pop	r14
    1ee8:	df 90       	pop	r13
    1eea:	cf 90       	pop	r12
    1eec:	bf 90       	pop	r11
    1eee:	af 90       	pop	r10
    1ef0:	9f 90       	pop	r9
    1ef2:	8f 90       	pop	r8
    1ef4:	7f 90       	pop	r7
    1ef6:	6f 90       	pop	r6
    1ef8:	5f 90       	pop	r5
    1efa:	4f 90       	pop	r4
    1efc:	3f 90       	pop	r3
    1efe:	08 95       	ret

00001f00 <sync>:
    1f00:	cf 92       	push	r12
    1f02:	df 92       	push	r13
    1f04:	ef 92       	push	r14
    1f06:	ff 92       	push	r15
    1f08:	0f 93       	push	r16
    1f0a:	1f 93       	push	r17
    1f0c:	cf 93       	push	r28
    1f0e:	df 93       	push	r29
    1f10:	ec 01       	movw	r28, r24
    1f12:	7b 01       	movw	r14, r22
    1f14:	6a 01       	movw	r12, r20
    1f16:	1f b7       	in	r17, 0x3f	; 63
    1f18:	10 78       	andi	r17, 0x80	; 128
    1f1a:	f8 94       	cli
    1f1c:	a8 81       	ld	r26, Y
    1f1e:	b9 81       	ldd	r27, Y+1	; 0x01
    1f20:	10 97       	sbiw	r26, 0x00	; 0
    1f22:	61 f1       	breq	.+88     	; 0x1f7c <sync+0x7c>
    1f24:	14 96       	adiw	r26, 0x04	; 4
    1f26:	ed 91       	ld	r30, X+
    1f28:	fc 91       	ld	r31, X
    1f2a:	15 97       	sbiw	r26, 0x05	; 5
    1f2c:	30 97       	sbiw	r30, 0x00	; 0
    1f2e:	41 f0       	breq	.+16     	; 0x1f40 <sync+0x40>
    1f30:	a0 81       	ld	r26, Z
    1f32:	b1 81       	ldd	r27, Z+1	; 0x01
    1f34:	14 96       	adiw	r26, 0x04	; 4
    1f36:	ed 91       	ld	r30, X+
    1f38:	fc 91       	ld	r31, X
    1f3a:	15 97       	sbiw	r26, 0x05	; 5
    1f3c:	30 97       	sbiw	r30, 0x00	; 0
    1f3e:	c1 f7       	brne	.-16     	; 0x1f30 <sync+0x30>
    1f40:	20 91 83 01 	lds	r18, 0x0183	; 0x800183 <current>
    1f44:	30 91 84 01 	lds	r19, 0x0184	; 0x800184 <current+0x1>
    1f48:	2a 17       	cp	r18, r26
    1f4a:	3b 07       	cpc	r19, r27
    1f4c:	21 f0       	breq	.+8      	; 0x1f56 <sync+0x56>
    1f4e:	11 23       	and	r17, r17
    1f50:	09 f4       	brne	.+2      	; 0x1f54 <sync+0x54>
    1f52:	3d c0       	rjmp	.+122    	; 0x1fce <sync+0xce>
    1f54:	07 c0       	rjmp	.+14     	; 0x1f64 <sync+0x64>
    1f56:	11 23       	and	r17, r17
    1f58:	09 f4       	brne	.+2      	; 0x1f5c <sync+0x5c>
    1f5a:	3c c0       	rjmp	.+120    	; 0x1fd4 <sync+0xd4>
    1f5c:	78 94       	sei
    1f5e:	8f ef       	ldi	r24, 0xFF	; 255
    1f60:	9f ef       	ldi	r25, 0xFF	; 255
    1f62:	52 c0       	rjmp	.+164    	; 0x2008 <sync+0x108>
    1f64:	8a 81       	ldd	r24, Y+2	; 0x02
    1f66:	9b 81       	ldd	r25, Y+3	; 0x03
    1f68:	00 97       	sbiw	r24, 0x00	; 0
    1f6a:	d1 f1       	breq	.+116    	; 0x1fe0 <sync+0xe0>
    1f6c:	fc 01       	movw	r30, r24
    1f6e:	15 82       	std	Z+5, r1	; 0x05
    1f70:	14 82       	std	Z+4, r1	; 0x04
    1f72:	36 c0       	rjmp	.+108    	; 0x1fe0 <sync+0xe0>
    1f74:	78 94       	sei
    1f76:	80 e0       	ldi	r24, 0x00	; 0
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	46 c0       	rjmp	.+140    	; 0x2008 <sync+0x108>
    1f7c:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <current>
    1f80:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <current+0x1>
    1f84:	99 83       	std	Y+1, r25	; 0x01
    1f86:	88 83       	st	Y, r24
    1f88:	11 23       	and	r17, r17
    1f8a:	29 f0       	breq	.+10     	; 0x1f96 <sync+0x96>
    1f8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f90:	01 97       	sbiw	r24, 0x01	; 1
    1f92:	09 f0       	breq	.+2      	; 0x1f96 <sync+0x96>
    1f94:	78 94       	sei
    1f96:	b6 01       	movw	r22, r12
    1f98:	ce 01       	movw	r24, r28
    1f9a:	f7 01       	movw	r30, r14
    1f9c:	09 95       	icall
    1f9e:	f8 2e       	mov	r15, r24
    1fa0:	09 2f       	mov	r16, r25
    1fa2:	8f b7       	in	r24, 0x3f	; 63
    1fa4:	f8 94       	cli
    1fa6:	19 82       	std	Y+1, r1	; 0x01
    1fa8:	18 82       	st	Y, r1
    1faa:	8a 81       	ldd	r24, Y+2	; 0x02
    1fac:	9b 81       	ldd	r25, Y+3	; 0x03
    1fae:	82 30       	cpi	r24, 0x02	; 2
    1fb0:	91 05       	cpc	r25, r1
    1fb2:	38 f0       	brcs	.+14     	; 0x1fc2 <sync+0xc2>
    1fb4:	1b 82       	std	Y+3, r1	; 0x03
    1fb6:	1a 82       	std	Y+2, r1	; 0x02
    1fb8:	fc 01       	movw	r30, r24
    1fba:	15 82       	std	Z+5, r1	; 0x05
    1fbc:	14 82       	std	Z+4, r1	; 0x04
    1fbe:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <dispatch>
    1fc2:	11 23       	and	r17, r17
    1fc4:	51 f0       	breq	.+20     	; 0x1fda <sync+0xda>
    1fc6:	78 94       	sei
    1fc8:	8f 2d       	mov	r24, r15
    1fca:	90 2f       	mov	r25, r16
    1fcc:	1d c0       	rjmp	.+58     	; 0x2008 <sync+0x108>
    1fce:	8f ef       	ldi	r24, 0xFF	; 255
    1fd0:	9f ef       	ldi	r25, 0xFF	; 255
    1fd2:	1a c0       	rjmp	.+52     	; 0x2008 <sync+0x108>
    1fd4:	8f ef       	ldi	r24, 0xFF	; 255
    1fd6:	9f ef       	ldi	r25, 0xFF	; 255
    1fd8:	17 c0       	rjmp	.+46     	; 0x2008 <sync+0x108>
    1fda:	8f 2d       	mov	r24, r15
    1fdc:	90 2f       	mov	r25, r16
    1fde:	14 c0       	rjmp	.+40     	; 0x2008 <sync+0x108>
    1fe0:	3b 83       	std	Y+3, r19	; 0x03
    1fe2:	2a 83       	std	Y+2, r18	; 0x02
    1fe4:	f9 01       	movw	r30, r18
    1fe6:	d5 83       	std	Z+5, r29	; 0x05
    1fe8:	c4 83       	std	Z+4, r28	; 0x04
    1fea:	cd 01       	movw	r24, r26
    1fec:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <dispatch>
    1ff0:	e0 91 83 01 	lds	r30, 0x0183	; 0x800183 <current>
    1ff4:	f0 91 84 01 	lds	r31, 0x0184	; 0x800184 <current+0x1>
    1ff8:	82 81       	ldd	r24, Z+2	; 0x02
    1ffa:	93 81       	ldd	r25, Z+3	; 0x03
    1ffc:	89 2b       	or	r24, r25
    1ffe:	09 f4       	brne	.+2      	; 0x2002 <sync+0x102>
    2000:	b9 cf       	rjmp	.-142    	; 0x1f74 <sync+0x74>
    2002:	f9 83       	std	Y+1, r31	; 0x01
    2004:	e8 83       	st	Y, r30
    2006:	c2 cf       	rjmp	.-124    	; 0x1f8c <sync+0x8c>
    2008:	df 91       	pop	r29
    200a:	cf 91       	pop	r28
    200c:	1f 91       	pop	r17
    200e:	0f 91       	pop	r16
    2010:	ff 90       	pop	r15
    2012:	ef 90       	pop	r14
    2014:	df 90       	pop	r13
    2016:	cf 90       	pop	r12
    2018:	08 95       	ret

0000201a <run>:
    201a:	00 91 83 01 	lds	r16, 0x0183	; 0x800183 <current>
    201e:	10 91 84 01 	lds	r17, 0x0184	; 0x800184 <current+0x1>
    2022:	80 ea       	ldi	r24, 0xA0	; 160
    2024:	91 e0       	ldi	r25, 0x01	; 1
    2026:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <dequeue>
    202a:	ec 01       	movw	r28, r24
    202c:	d8 01       	movw	r26, r16
    202e:	13 96       	adiw	r26, 0x03	; 3
    2030:	9c 93       	st	X, r25
    2032:	8e 93       	st	-X, r24
    2034:	12 97       	sbiw	r26, 0x02	; 2
    2036:	89 2b       	or	r24, r25
    2038:	e1 f4       	brne	.+56     	; 0x2072 <run+0x58>
    203a:	8f b7       	in	r24, 0x3f	; 63
    203c:	f8 94       	cli
    203e:	e0 91 85 01 	lds	r30, 0x0185	; 0x800185 <activeStack>
    2042:	f0 91 86 01 	lds	r31, 0x0186	; 0x800186 <activeStack+0x1>
    2046:	20 81       	ld	r18, Z
    2048:	31 81       	ldd	r19, Z+1	; 0x01
    204a:	30 93 86 01 	sts	0x0186, r19	; 0x800186 <activeStack+0x1>
    204e:	20 93 85 01 	sts	0x0185, r18	; 0x800185 <activeStack>
    2052:	20 91 87 01 	lds	r18, 0x0187	; 0x800187 <threadPool>
    2056:	30 91 88 01 	lds	r19, 0x0188	; 0x800188 <threadPool+0x1>
    205a:	31 83       	std	Z+1, r19	; 0x01
    205c:	20 83       	st	Z, r18
    205e:	f0 93 88 01 	sts	0x0188, r31	; 0x800188 <threadPool+0x1>
    2062:	e0 93 87 01 	sts	0x0187, r30	; 0x800187 <threadPool>
    2066:	88 23       	and	r24, r24
    2068:	0c f4       	brge	.+2      	; 0x206c <run+0x52>
    206a:	78 94       	sei
    206c:	0e 94 03 05 	call	0xa06	; 0xa06 <schedule>
    2070:	d4 cf       	rjmp	.-88     	; 0x201a <run>
    2072:	78 94       	sei
    2074:	4e 85       	ldd	r20, Y+14	; 0x0e
    2076:	5f 85       	ldd	r21, Y+15	; 0x0f
    2078:	6c 85       	ldd	r22, Y+12	; 0x0c
    207a:	7d 85       	ldd	r23, Y+13	; 0x0d
    207c:	8a 85       	ldd	r24, Y+10	; 0x0a
    207e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2080:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <sync>
    2084:	8f b7       	in	r24, 0x3f	; 63
    2086:	f8 94       	cli
    2088:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <msgPool>
    208c:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <msgPool+0x1>
    2090:	99 83       	std	Y+1, r25	; 0x01
    2092:	88 83       	st	Y, r24
    2094:	d0 93 8a 01 	sts	0x018A, r29	; 0x80018a <msgPool+0x1>
    2098:	c0 93 89 01 	sts	0x0189, r28	; 0x800189 <msgPool>
    209c:	e0 91 85 01 	lds	r30, 0x0185	; 0x800185 <activeStack>
    20a0:	f0 91 86 01 	lds	r31, 0x0186	; 0x800186 <activeStack+0x1>
    20a4:	20 81       	ld	r18, Z
    20a6:	31 81       	ldd	r19, Z+1	; 0x01
    20a8:	d9 01       	movw	r26, r18
    20aa:	12 96       	adiw	r26, 0x02	; 2
    20ac:	cd 91       	ld	r28, X+
    20ae:	dc 91       	ld	r29, X
    20b0:	13 97       	sbiw	r26, 0x03	; 3
    20b2:	a0 91 a0 01 	lds	r26, 0x01A0	; 0x8001a0 <msgQ>
    20b6:	b0 91 a1 01 	lds	r27, 0x01A1	; 0x8001a1 <msgQ+0x1>
    20ba:	10 97       	sbiw	r26, 0x00	; 0
    20bc:	b9 f0       	breq	.+46     	; 0x20ec <run+0xd2>
    20be:	20 97       	sbiw	r28, 0x00	; 0
    20c0:	09 f4       	brne	.+2      	; 0x20c4 <run+0xaa>
    20c2:	ab cf       	rjmp	.-170    	; 0x201a <run>
    20c4:	16 96       	adiw	r26, 0x06	; 6
    20c6:	8d 91       	ld	r24, X+
    20c8:	9d 91       	ld	r25, X+
    20ca:	0d 90       	ld	r0, X+
    20cc:	bc 91       	ld	r27, X
    20ce:	a0 2d       	mov	r26, r0
    20d0:	4e 81       	ldd	r20, Y+6	; 0x06
    20d2:	5f 81       	ldd	r21, Y+7	; 0x07
    20d4:	68 85       	ldd	r22, Y+8	; 0x08
    20d6:	79 85       	ldd	r23, Y+9	; 0x09
    20d8:	84 1b       	sub	r24, r20
    20da:	95 0b       	sbc	r25, r21
    20dc:	a6 0b       	sbc	r26, r22
    20de:	b7 0b       	sbc	r27, r23
    20e0:	18 16       	cp	r1, r24
    20e2:	19 06       	cpc	r1, r25
    20e4:	1a 06       	cpc	r1, r26
    20e6:	1b 06       	cpc	r1, r27
    20e8:	0c f0       	brlt	.+2      	; 0x20ec <run+0xd2>
    20ea:	97 cf       	rjmp	.-210    	; 0x201a <run>
    20ec:	30 93 86 01 	sts	0x0186, r19	; 0x800186 <activeStack+0x1>
    20f0:	20 93 85 01 	sts	0x0185, r18	; 0x800185 <activeStack>
    20f4:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <threadPool>
    20f8:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <threadPool+0x1>
    20fc:	91 83       	std	Z+1, r25	; 0x01
    20fe:	80 83       	st	Z, r24
    2100:	f0 93 88 01 	sts	0x0188, r31	; 0x800188 <threadPool+0x1>
    2104:	e0 93 87 01 	sts	0x0187, r30	; 0x800187 <threadPool>
    2108:	a0 91 85 01 	lds	r26, 0x0185	; 0x800185 <activeStack>
    210c:	b0 91 86 01 	lds	r27, 0x0186	; 0x800186 <activeStack+0x1>
    2110:	14 96       	adiw	r26, 0x04	; 4
    2112:	ed 91       	ld	r30, X+
    2114:	fc 91       	ld	r31, X
    2116:	15 97       	sbiw	r26, 0x05	; 5
    2118:	30 97       	sbiw	r30, 0x00	; 0
    211a:	41 f0       	breq	.+16     	; 0x212c <run+0x112>
    211c:	a0 81       	ld	r26, Z
    211e:	b1 81       	ldd	r27, Z+1	; 0x01
    2120:	14 96       	adiw	r26, 0x04	; 4
    2122:	ed 91       	ld	r30, X+
    2124:	fc 91       	ld	r31, X
    2126:	15 97       	sbiw	r26, 0x05	; 5
    2128:	30 97       	sbiw	r30, 0x00	; 0
    212a:	c1 f7       	brne	.-16     	; 0x211c <run+0x102>
    212c:	cd 01       	movw	r24, r26
    212e:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <dispatch>
    2132:	73 cf       	rjmp	.-282    	; 0x201a <run>

00002134 <install>:
    2134:	42 31       	cpi	r20, 0x12	; 18
    2136:	b8 f4       	brcc	.+46     	; 0x2166 <install+0x32>
    2138:	2f b7       	in	r18, 0x3f	; 63
    213a:	f8 94       	cli
    213c:	50 e0       	ldi	r21, 0x00	; 0
    213e:	44 0f       	add	r20, r20
    2140:	55 1f       	adc	r21, r21
    2142:	fa 01       	movw	r30, r20
    2144:	ee 55       	subi	r30, 0x5E	; 94
    2146:	fe 4f       	sbci	r31, 0xFE	; 254
    2148:	91 83       	std	Z+1, r25	; 0x01
    214a:	80 83       	st	Z, r24
    214c:	fa 01       	movw	r30, r20
    214e:	e6 5c       	subi	r30, 0xC6	; 198
    2150:	fd 4f       	sbci	r31, 0xFD	; 253
    2152:	71 83       	std	Z+1, r23	; 0x01
    2154:	60 83       	st	Z, r22
    2156:	41 e0       	ldi	r20, 0x01	; 1
    2158:	50 e0       	ldi	r21, 0x00	; 0
    215a:	fc 01       	movw	r30, r24
    215c:	53 83       	std	Z+3, r21	; 0x03
    215e:	42 83       	std	Z+2, r20	; 0x02
    2160:	22 23       	and	r18, r18
    2162:	0c f4       	brge	.+2      	; 0x2166 <install+0x32>
    2164:	78 94       	sei
    2166:	08 95       	ret

00002168 <tinytimber>:
    2168:	8c 01       	movw	r16, r24
    216a:	7b 01       	movw	r14, r22
    216c:	6a 01       	movw	r12, r20
    216e:	8f b7       	in	r24, 0x3f	; 63
    2170:	f8 94       	cli
    2172:	0e 94 78 04 	call	0x8f0	; 0x8f0 <initialize>
    2176:	78 94       	sei
    2178:	e1 14       	cp	r14, r1
    217a:	f1 04       	cpc	r15, r1
    217c:	41 f0       	breq	.+16     	; 0x218e <tinytimber+0x26>
    217e:	20 e0       	ldi	r18, 0x00	; 0
    2180:	30 e0       	ldi	r19, 0x00	; 0
    2182:	a9 01       	movw	r20, r18
    2184:	60 e0       	ldi	r22, 0x00	; 0
    2186:	70 e0       	ldi	r23, 0x00	; 0
    2188:	cb 01       	movw	r24, r22
    218a:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <async>
    218e:	8f b7       	in	r24, 0x3f	; 63
    2190:	f8 94       	cli
    2192:	0e 94 03 05 	call	0xa06	; 0xa06 <schedule>
    2196:	78 94       	sei
    2198:	81 e0       	ldi	r24, 0x01	; 1
    219a:	83 bf       	out	0x33, r24	; 51
    219c:	88 95       	sleep
    219e:	fd cf       	rjmp	.-6      	; 0x219a <tinytimber+0x32>

000021a0 <__divmodhi4>:
    21a0:	97 fb       	bst	r25, 7
    21a2:	07 2e       	mov	r0, r23
    21a4:	16 f4       	brtc	.+4      	; 0x21aa <__divmodhi4+0xa>
    21a6:	00 94       	com	r0
    21a8:	07 d0       	rcall	.+14     	; 0x21b8 <__divmodhi4_neg1>
    21aa:	77 fd       	sbrc	r23, 7
    21ac:	09 d0       	rcall	.+18     	; 0x21c0 <__divmodhi4_neg2>
    21ae:	0e 94 10 11 	call	0x2220	; 0x2220 <__udivmodhi4>
    21b2:	07 fc       	sbrc	r0, 7
    21b4:	05 d0       	rcall	.+10     	; 0x21c0 <__divmodhi4_neg2>
    21b6:	3e f4       	brtc	.+14     	; 0x21c6 <__divmodhi4_exit>

000021b8 <__divmodhi4_neg1>:
    21b8:	90 95       	com	r25
    21ba:	81 95       	neg	r24
    21bc:	9f 4f       	sbci	r25, 0xFF	; 255
    21be:	08 95       	ret

000021c0 <__divmodhi4_neg2>:
    21c0:	70 95       	com	r23
    21c2:	61 95       	neg	r22
    21c4:	7f 4f       	sbci	r23, 0xFF	; 255

000021c6 <__divmodhi4_exit>:
    21c6:	08 95       	ret

000021c8 <__divmodsi4>:
    21c8:	05 2e       	mov	r0, r21
    21ca:	97 fb       	bst	r25, 7
    21cc:	1e f4       	brtc	.+6      	; 0x21d4 <__divmodsi4+0xc>
    21ce:	00 94       	com	r0
    21d0:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <__negsi2>
    21d4:	57 fd       	sbrc	r21, 7
    21d6:	07 d0       	rcall	.+14     	; 0x21e6 <__divmodsi4_neg2>
    21d8:	0e 94 24 11 	call	0x2248	; 0x2248 <__udivmodsi4>
    21dc:	07 fc       	sbrc	r0, 7
    21de:	03 d0       	rcall	.+6      	; 0x21e6 <__divmodsi4_neg2>
    21e0:	4e f4       	brtc	.+18     	; 0x21f4 <__divmodsi4_exit>
    21e2:	0c 94 fb 10 	jmp	0x21f6	; 0x21f6 <__negsi2>

000021e6 <__divmodsi4_neg2>:
    21e6:	50 95       	com	r21
    21e8:	40 95       	com	r20
    21ea:	30 95       	com	r19
    21ec:	21 95       	neg	r18
    21ee:	3f 4f       	sbci	r19, 0xFF	; 255
    21f0:	4f 4f       	sbci	r20, 0xFF	; 255
    21f2:	5f 4f       	sbci	r21, 0xFF	; 255

000021f4 <__divmodsi4_exit>:
    21f4:	08 95       	ret

000021f6 <__negsi2>:
    21f6:	90 95       	com	r25
    21f8:	80 95       	com	r24
    21fa:	70 95       	com	r23
    21fc:	61 95       	neg	r22
    21fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2200:	8f 4f       	sbci	r24, 0xFF	; 255
    2202:	9f 4f       	sbci	r25, 0xFF	; 255
    2204:	08 95       	ret

00002206 <__tablejump2__>:
    2206:	ee 0f       	add	r30, r30
    2208:	ff 1f       	adc	r31, r31
    220a:	05 90       	lpm	r0, Z+
    220c:	f4 91       	lpm	r31, Z
    220e:	e0 2d       	mov	r30, r0
    2210:	09 94       	ijmp

00002212 <__usmulhisi3>:
    2212:	0e 94 46 11 	call	0x228c	; 0x228c <__umulhisi3>

00002216 <__usmulhisi3_tail>:
    2216:	b7 ff       	sbrs	r27, 7
    2218:	08 95       	ret
    221a:	82 1b       	sub	r24, r18
    221c:	93 0b       	sbc	r25, r19
    221e:	08 95       	ret

00002220 <__udivmodhi4>:
    2220:	aa 1b       	sub	r26, r26
    2222:	bb 1b       	sub	r27, r27
    2224:	51 e1       	ldi	r21, 0x11	; 17
    2226:	07 c0       	rjmp	.+14     	; 0x2236 <__udivmodhi4_ep>

00002228 <__udivmodhi4_loop>:
    2228:	aa 1f       	adc	r26, r26
    222a:	bb 1f       	adc	r27, r27
    222c:	a6 17       	cp	r26, r22
    222e:	b7 07       	cpc	r27, r23
    2230:	10 f0       	brcs	.+4      	; 0x2236 <__udivmodhi4_ep>
    2232:	a6 1b       	sub	r26, r22
    2234:	b7 0b       	sbc	r27, r23

00002236 <__udivmodhi4_ep>:
    2236:	88 1f       	adc	r24, r24
    2238:	99 1f       	adc	r25, r25
    223a:	5a 95       	dec	r21
    223c:	a9 f7       	brne	.-22     	; 0x2228 <__udivmodhi4_loop>
    223e:	80 95       	com	r24
    2240:	90 95       	com	r25
    2242:	bc 01       	movw	r22, r24
    2244:	cd 01       	movw	r24, r26
    2246:	08 95       	ret

00002248 <__udivmodsi4>:
    2248:	a1 e2       	ldi	r26, 0x21	; 33
    224a:	1a 2e       	mov	r1, r26
    224c:	aa 1b       	sub	r26, r26
    224e:	bb 1b       	sub	r27, r27
    2250:	fd 01       	movw	r30, r26
    2252:	0d c0       	rjmp	.+26     	; 0x226e <__udivmodsi4_ep>

00002254 <__udivmodsi4_loop>:
    2254:	aa 1f       	adc	r26, r26
    2256:	bb 1f       	adc	r27, r27
    2258:	ee 1f       	adc	r30, r30
    225a:	ff 1f       	adc	r31, r31
    225c:	a2 17       	cp	r26, r18
    225e:	b3 07       	cpc	r27, r19
    2260:	e4 07       	cpc	r30, r20
    2262:	f5 07       	cpc	r31, r21
    2264:	20 f0       	brcs	.+8      	; 0x226e <__udivmodsi4_ep>
    2266:	a2 1b       	sub	r26, r18
    2268:	b3 0b       	sbc	r27, r19
    226a:	e4 0b       	sbc	r30, r20
    226c:	f5 0b       	sbc	r31, r21

0000226e <__udivmodsi4_ep>:
    226e:	66 1f       	adc	r22, r22
    2270:	77 1f       	adc	r23, r23
    2272:	88 1f       	adc	r24, r24
    2274:	99 1f       	adc	r25, r25
    2276:	1a 94       	dec	r1
    2278:	69 f7       	brne	.-38     	; 0x2254 <__udivmodsi4_loop>
    227a:	60 95       	com	r22
    227c:	70 95       	com	r23
    227e:	80 95       	com	r24
    2280:	90 95       	com	r25
    2282:	9b 01       	movw	r18, r22
    2284:	ac 01       	movw	r20, r24
    2286:	bd 01       	movw	r22, r26
    2288:	cf 01       	movw	r24, r30
    228a:	08 95       	ret

0000228c <__umulhisi3>:
    228c:	a2 9f       	mul	r26, r18
    228e:	b0 01       	movw	r22, r0
    2290:	b3 9f       	mul	r27, r19
    2292:	c0 01       	movw	r24, r0
    2294:	a3 9f       	mul	r26, r19
    2296:	70 0d       	add	r23, r0
    2298:	81 1d       	adc	r24, r1
    229a:	11 24       	eor	r1, r1
    229c:	91 1d       	adc	r25, r1
    229e:	b2 9f       	mul	r27, r18
    22a0:	70 0d       	add	r23, r0
    22a2:	81 1d       	adc	r24, r1
    22a4:	11 24       	eor	r1, r1
    22a6:	91 1d       	adc	r25, r1
    22a8:	08 95       	ret

000022aa <setjmp>:
    22aa:	dc 01       	movw	r26, r24
    22ac:	2d 92       	st	X+, r2
    22ae:	3d 92       	st	X+, r3
    22b0:	4d 92       	st	X+, r4
    22b2:	5d 92       	st	X+, r5
    22b4:	6d 92       	st	X+, r6
    22b6:	7d 92       	st	X+, r7
    22b8:	8d 92       	st	X+, r8
    22ba:	9d 92       	st	X+, r9
    22bc:	ad 92       	st	X+, r10
    22be:	bd 92       	st	X+, r11
    22c0:	cd 92       	st	X+, r12
    22c2:	dd 92       	st	X+, r13
    22c4:	ed 92       	st	X+, r14
    22c6:	fd 92       	st	X+, r15
    22c8:	0d 93       	st	X+, r16
    22ca:	1d 93       	st	X+, r17
    22cc:	cd 93       	st	X+, r28
    22ce:	dd 93       	st	X+, r29
    22d0:	ff 91       	pop	r31
    22d2:	ef 91       	pop	r30
    22d4:	8d b7       	in	r24, 0x3d	; 61
    22d6:	8d 93       	st	X+, r24
    22d8:	8e b7       	in	r24, 0x3e	; 62
    22da:	8d 93       	st	X+, r24
    22dc:	8f b7       	in	r24, 0x3f	; 63
    22de:	8d 93       	st	X+, r24
    22e0:	ed 93       	st	X+, r30
    22e2:	fd 93       	st	X+, r31
    22e4:	88 27       	eor	r24, r24
    22e6:	99 27       	eor	r25, r25
    22e8:	09 94       	ijmp

000022ea <longjmp>:
    22ea:	dc 01       	movw	r26, r24
    22ec:	cb 01       	movw	r24, r22
    22ee:	81 30       	cpi	r24, 0x01	; 1
    22f0:	91 05       	cpc	r25, r1
    22f2:	81 1d       	adc	r24, r1
    22f4:	2d 90       	ld	r2, X+
    22f6:	3d 90       	ld	r3, X+
    22f8:	4d 90       	ld	r4, X+
    22fa:	5d 90       	ld	r5, X+
    22fc:	6d 90       	ld	r6, X+
    22fe:	7d 90       	ld	r7, X+
    2300:	8d 90       	ld	r8, X+
    2302:	9d 90       	ld	r9, X+
    2304:	ad 90       	ld	r10, X+
    2306:	bd 90       	ld	r11, X+
    2308:	cd 90       	ld	r12, X+
    230a:	dd 90       	ld	r13, X+
    230c:	ed 90       	ld	r14, X+
    230e:	fd 90       	ld	r15, X+
    2310:	0d 91       	ld	r16, X+
    2312:	1d 91       	ld	r17, X+
    2314:	cd 91       	ld	r28, X+
    2316:	dd 91       	ld	r29, X+
    2318:	ed 91       	ld	r30, X+
    231a:	fd 91       	ld	r31, X+
    231c:	0d 90       	ld	r0, X+
    231e:	f8 94       	cli
    2320:	fe bf       	out	0x3e, r31	; 62
    2322:	0f be       	out	0x3f, r0	; 63
    2324:	ed bf       	out	0x3d, r30	; 61
    2326:	ed 91       	ld	r30, X+
    2328:	fd 91       	ld	r31, X+
    232a:	09 94       	ijmp

0000232c <_exit>:
    232c:	f8 94       	cli

0000232e <__stop_program>:
    232e:	ff cf       	rjmp	.-2      	; 0x232e <__stop_program>
