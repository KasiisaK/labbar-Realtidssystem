
lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000058  00800100  000023c0  00002454  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000023c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000035b  00800158  00800158  000024ac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000024ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000024dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a0  00000000  00000000  0000251c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003228  00000000  00000000  000027bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012b7  00000000  00000000  000059e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001869  00000000  00000000  00006c9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000cbc  00000000  00000000  00008504  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000aa1  00000000  00000000  000091c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002aa5  00000000  00000000  00009c61  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000230  00000000  00000000  0000c706  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 9a 05 	jmp	0xb34	; 0xb34 <__vector_1>
       8:	0c 94 06 06 	jmp	0xc0c	; 0xc0c <__vector_2>
       c:	0c 94 72 06 	jmp	0xce4	; 0xce4 <__vector_3>
      10:	0c 94 de 06 	jmp	0xdbc	; 0xdbc <__vector_4>
      14:	0c 94 4a 07 	jmp	0xe94	; 0xe94 <__vector_5>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 21 0e 	jmp	0x1c42	; 0x1c42 <__vector_7>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 cf 0d 	jmp	0x1b9e	; 0x1b9e <__vector_9>
      28:	0c 94 b6 07 	jmp	0xf6c	; 0xf6c <__vector_10>
      2c:	0c 94 22 08 	jmp	0x1044	; 0x1044 <__vector_11>
      30:	0c 94 8e 08 	jmp	0x111c	; 0x111c <__vector_12>
      34:	0c 94 fa 08 	jmp	0x11f4	; 0x11f4 <__vector_13>
      38:	0c 94 66 09 	jmp	0x12cc	; 0x12cc <__vector_14>
      3c:	0c 94 d2 09 	jmp	0x13a4	; 0x13a4 <__vector_15>
      40:	0c 94 3e 0a 	jmp	0x147c	; 0x147c <__vector_16>
      44:	0c 94 aa 0a 	jmp	0x1554	; 0x1554 <__vector_17>
      48:	0c 94 16 0b 	jmp	0x162c	; 0x162c <__vector_18>
      4c:	0c 94 82 0b 	jmp	0x1704	; 0x1704 <__vector_19>
      50:	0c 94 ee 0b 	jmp	0x17dc	; 0x17dc <__vector_20>
      54:	0c 94 5a 0c 	jmp	0x18b4	; 0x18b4 <__vector_21>
      58:	0c 94 c6 0c 	jmp	0x198c	; 0x198c <__vector_22>
      5c:	89 01       	movw	r16, r18
      5e:	6b 01       	movw	r12, r22
      60:	6e 01       	movw	r12, r28
      62:	71 01       	movw	r14, r2
      64:	74 01       	movw	r14, r8
      66:	77 01       	movw	r14, r14
      68:	7a 01       	movw	r14, r20
      6a:	7d 01       	movw	r14, r26
      6c:	80 01       	movw	r16, r0
      6e:	83 01       	movw	r16, r6

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	11 e0       	ldi	r17, 0x01	; 1
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	e0 ec       	ldi	r30, 0xC0	; 192
      84:	f3 e2       	ldi	r31, 0x23	; 35
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	a8 35       	cpi	r26, 0x58	; 88
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	24 e0       	ldi	r18, 0x04	; 4
      94:	a8 e5       	ldi	r26, 0x58	; 88
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	a3 3b       	cpi	r26, 0xB3	; 179
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 cb 03 	call	0x796	; 0x796 <main>
      a6:	0c 94 de 11 	jmp	0x23bc	; 0x23bc <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <swithToLeftGen>:
#include "Backend.h"


void swithToLeftGen(Backend *self) {
      ae:	cf 92       	push	r12
      b0:	df 92       	push	r13
      b2:	ef 92       	push	r14
      b4:	ff 92       	push	r15
      b6:	0f 93       	push	r16
      b8:	1f 93       	push	r17
      ba:	cf 93       	push	r28
      bc:	df 93       	push	r29
      be:	ec 01       	movw	r28, r24
	self->activeGen = self->gen1;
      c0:	8e 81       	ldd	r24, Y+6	; 0x06
      c2:	9f 81       	ldd	r25, Y+7	; 0x07
      c4:	9b 87       	std	Y+11, r25	; 0x0b
      c6:	8a 87       	std	Y+10, r24	; 0x0a
	SYNC(self->gui, setActive, true);
      c8:	41 e0       	ldi	r20, 0x01	; 1
      ca:	50 e0       	ldi	r21, 0x00	; 0
      cc:	68 ec       	ldi	r22, 0xC8	; 200
      ce:	72 e0       	ldi	r23, 0x02	; 2
      d0:	8c 81       	ldd	r24, Y+4	; 0x04
      d2:	9d 81       	ldd	r25, Y+5	; 0x05
      d4:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <sync>
	ASYNC(self->gui, updateDisplay, 10);
      d8:	0c 81       	ldd	r16, Y+4	; 0x04
      da:	1d 81       	ldd	r17, Y+5	; 0x05
      dc:	0f 2e       	mov	r0, r31
      de:	fa e0       	ldi	r31, 0x0A	; 10
      e0:	cf 2e       	mov	r12, r31
      e2:	d1 2c       	mov	r13, r1
      e4:	f0 2d       	mov	r31, r0
      e6:	0f 2e       	mov	r0, r31
      e8:	fb ec       	ldi	r31, 0xCB	; 203
      ea:	ef 2e       	mov	r14, r31
      ec:	f2 e0       	ldi	r31, 0x02	; 2
      ee:	ff 2e       	mov	r15, r31
      f0:	f0 2d       	mov	r31, r0
      f2:	20 e0       	ldi	r18, 0x00	; 0
      f4:	30 e0       	ldi	r19, 0x00	; 0
      f6:	a9 01       	movw	r20, r18
      f8:	60 e0       	ldi	r22, 0x00	; 0
      fa:	70 e0       	ldi	r23, 0x00	; 0
      fc:	cb 01       	movw	r24, r22
      fe:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <async>
}
     102:	df 91       	pop	r29
     104:	cf 91       	pop	r28
     106:	1f 91       	pop	r17
     108:	0f 91       	pop	r16
     10a:	ff 90       	pop	r15
     10c:	ef 90       	pop	r14
     10e:	df 90       	pop	r13
     110:	cf 90       	pop	r12
     112:	08 95       	ret

00000114 <swithToRightGen>:

void swithToRightGen(Backend *self) {
     114:	cf 92       	push	r12
     116:	df 92       	push	r13
     118:	ef 92       	push	r14
     11a:	ff 92       	push	r15
     11c:	0f 93       	push	r16
     11e:	1f 93       	push	r17
     120:	cf 93       	push	r28
     122:	df 93       	push	r29
     124:	ec 01       	movw	r28, r24
	self->activeGen = self->gen2;
     126:	88 85       	ldd	r24, Y+8	; 0x08
     128:	99 85       	ldd	r25, Y+9	; 0x09
     12a:	9b 87       	std	Y+11, r25	; 0x0b
     12c:	8a 87       	std	Y+10, r24	; 0x0a
	SYNC(self->gui, setActive, false);
     12e:	40 e0       	ldi	r20, 0x00	; 0
     130:	50 e0       	ldi	r21, 0x00	; 0
     132:	68 ec       	ldi	r22, 0xC8	; 200
     134:	72 e0       	ldi	r23, 0x02	; 2
     136:	8c 81       	ldd	r24, Y+4	; 0x04
     138:	9d 81       	ldd	r25, Y+5	; 0x05
     13a:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <sync>
	ASYNC(self->gui, updateDisplay, 20);
     13e:	0c 81       	ldd	r16, Y+4	; 0x04
     140:	1d 81       	ldd	r17, Y+5	; 0x05
     142:	0f 2e       	mov	r0, r31
     144:	f4 e1       	ldi	r31, 0x14	; 20
     146:	cf 2e       	mov	r12, r31
     148:	d1 2c       	mov	r13, r1
     14a:	f0 2d       	mov	r31, r0
     14c:	0f 2e       	mov	r0, r31
     14e:	fb ec       	ldi	r31, 0xCB	; 203
     150:	ef 2e       	mov	r14, r31
     152:	f2 e0       	ldi	r31, 0x02	; 2
     154:	ff 2e       	mov	r15, r31
     156:	f0 2d       	mov	r31, r0
     158:	20 e0       	ldi	r18, 0x00	; 0
     15a:	30 e0       	ldi	r19, 0x00	; 0
     15c:	a9 01       	movw	r20, r18
     15e:	60 e0       	ldi	r22, 0x00	; 0
     160:	70 e0       	ldi	r23, 0x00	; 0
     162:	cb 01       	movw	r24, r22
     164:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <async>
}
     168:	df 91       	pop	r29
     16a:	cf 91       	pop	r28
     16c:	1f 91       	pop	r17
     16e:	0f 91       	pop	r16
     170:	ff 90       	pop	r15
     172:	ef 90       	pop	r14
     174:	df 90       	pop	r13
     176:	cf 90       	pop	r12
     178:	08 95       	ret

0000017a <adjustFrequency>:

void adjustFrequency(Backend *self, int delta) {
     17a:	cf 92       	push	r12
     17c:	df 92       	push	r13
     17e:	ef 92       	push	r14
     180:	ff 92       	push	r15
     182:	0f 93       	push	r16
     184:	1f 93       	push	r17
     186:	cf 93       	push	r28
     188:	df 93       	push	r29
     18a:	ec 01       	movw	r28, r24
     18c:	8b 01       	movw	r16, r22
	// Get right target gen
	int newFreq = SYNC(self->activeGen, getFrequency, 0) + delta;
     18e:	40 e0       	ldi	r20, 0x00	; 0
     190:	50 e0       	ldi	r21, 0x00	; 0
     192:	60 ed       	ldi	r22, 0xD0	; 208
     194:	74 e0       	ldi	r23, 0x04	; 4
     196:	8a 85       	ldd	r24, Y+10	; 0x0a
     198:	9b 85       	ldd	r25, Y+11	; 0x0b
     19a:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <sync>
     19e:	ac 01       	movw	r20, r24
     1a0:	40 0f       	add	r20, r16
     1a2:	51 1f       	adc	r21, r17
	if (newFreq < 0) newFreq = 0;
	// Update everything
	SYNC(self->activeGen, setFrequency, newFreq);
     1a4:	55 23       	and	r21, r21
     1a6:	14 f4       	brge	.+4      	; 0x1ac <adjustFrequency+0x32>
     1a8:	40 e0       	ldi	r20, 0x00	; 0
     1aa:	50 e0       	ldi	r21, 0x00	; 0
     1ac:	60 ec       	ldi	r22, 0xC0	; 192
     1ae:	74 e0       	ldi	r23, 0x04	; 4
     1b0:	8a 85       	ldd	r24, Y+10	; 0x0a
     1b2:	9b 85       	ldd	r25, Y+11	; 0x0b
     1b4:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <sync>
	ASYNC(self->gui, updateDisplay, 0);
     1b8:	0c 81       	ldd	r16, Y+4	; 0x04
     1ba:	1d 81       	ldd	r17, Y+5	; 0x05
     1bc:	c1 2c       	mov	r12, r1
     1be:	d1 2c       	mov	r13, r1
     1c0:	0f 2e       	mov	r0, r31
     1c2:	fb ec       	ldi	r31, 0xCB	; 203
     1c4:	ef 2e       	mov	r14, r31
     1c6:	f2 e0       	ldi	r31, 0x02	; 2
     1c8:	ff 2e       	mov	r15, r31
     1ca:	f0 2d       	mov	r31, r0
     1cc:	20 e0       	ldi	r18, 0x00	; 0
     1ce:	30 e0       	ldi	r19, 0x00	; 0
     1d0:	a9 01       	movw	r20, r18
     1d2:	60 e0       	ldi	r22, 0x00	; 0
     1d4:	70 e0       	ldi	r23, 0x00	; 0
     1d6:	cb 01       	movw	r24, r22
     1d8:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <async>
}
     1dc:	df 91       	pop	r29
     1de:	cf 91       	pop	r28
     1e0:	1f 91       	pop	r17
     1e2:	0f 91       	pop	r16
     1e4:	ff 90       	pop	r15
     1e6:	ef 90       	pop	r14
     1e8:	df 90       	pop	r13
     1ea:	cf 90       	pop	r12
     1ec:	08 95       	ret

000001ee <saveRestore>:

void saveRestore(Backend *self) {
     1ee:	cf 92       	push	r12
     1f0:	df 92       	push	r13
     1f2:	ef 92       	push	r14
     1f4:	ff 92       	push	r15
     1f6:	0f 93       	push	r16
     1f8:	1f 93       	push	r17
     1fa:	cf 93       	push	r28
     1fc:	df 93       	push	r29
     1fe:	ec 01       	movw	r28, r24
	if (SYNC(self->activeGen, getFrequency, 0) == 0) {
     200:	40 e0       	ldi	r20, 0x00	; 0
     202:	50 e0       	ldi	r21, 0x00	; 0
     204:	60 ed       	ldi	r22, 0xD0	; 208
     206:	74 e0       	ldi	r23, 0x04	; 4
     208:	8a 85       	ldd	r24, Y+10	; 0x0a
     20a:	9b 85       	ldd	r25, Y+11	; 0x0b
     20c:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <sync>
     210:	89 2b       	or	r24, r25
     212:	49 f4       	brne	.+18     	; 0x226 <saveRestore+0x38>
		SYNC(self->activeGen, restore, 0);
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	6a ec       	ldi	r22, 0xCA	; 202
     21a:	74 e0       	ldi	r23, 0x04	; 4
     21c:	8a 85       	ldd	r24, Y+10	; 0x0a
     21e:	9b 85       	ldd	r25, Y+11	; 0x0b
     220:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <sync>
     224:	10 c0       	rjmp	.+32     	; 0x246 <saveRestore+0x58>
		} else {
		SYNC(self->activeGen, save, 0);
     226:	40 e0       	ldi	r20, 0x00	; 0
     228:	50 e0       	ldi	r21, 0x00	; 0
     22a:	64 ec       	ldi	r22, 0xC4	; 196
     22c:	74 e0       	ldi	r23, 0x04	; 4
     22e:	8a 85       	ldd	r24, Y+10	; 0x0a
     230:	9b 85       	ldd	r25, Y+11	; 0x0b
     232:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <sync>
		SYNC(self->activeGen, setFrequency, 0);
     236:	40 e0       	ldi	r20, 0x00	; 0
     238:	50 e0       	ldi	r21, 0x00	; 0
     23a:	60 ec       	ldi	r22, 0xC0	; 192
     23c:	74 e0       	ldi	r23, 0x04	; 4
     23e:	8a 85       	ldd	r24, Y+10	; 0x0a
     240:	9b 85       	ldd	r25, Y+11	; 0x0b
     242:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <sync>
	}
	ASYNC(self->gui, updateDisplay, 0);
     246:	0c 81       	ldd	r16, Y+4	; 0x04
     248:	1d 81       	ldd	r17, Y+5	; 0x05
     24a:	c1 2c       	mov	r12, r1
     24c:	d1 2c       	mov	r13, r1
     24e:	0f 2e       	mov	r0, r31
     250:	fb ec       	ldi	r31, 0xCB	; 203
     252:	ef 2e       	mov	r14, r31
     254:	f2 e0       	ldi	r31, 0x02	; 2
     256:	ff 2e       	mov	r15, r31
     258:	f0 2d       	mov	r31, r0
     25a:	20 e0       	ldi	r18, 0x00	; 0
     25c:	30 e0       	ldi	r19, 0x00	; 0
     25e:	a9 01       	movw	r20, r18
     260:	60 e0       	ldi	r22, 0x00	; 0
     262:	70 e0       	ldi	r23, 0x00	; 0
     264:	cb 01       	movw	r24, r22
     266:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <async>
}
     26a:	df 91       	pop	r29
     26c:	cf 91       	pop	r28
     26e:	1f 91       	pop	r17
     270:	0f 91       	pop	r16
     272:	ff 90       	pop	r15
     274:	ef 90       	pop	r14
     276:	df 90       	pop	r13
     278:	cf 90       	pop	r12
     27a:	08 95       	ret

0000027c <startProgram>:

void startProgram(Backend *self) {
     27c:	cf 93       	push	r28
     27e:	df 93       	push	r29
     280:	ec 01       	movw	r28, r24
	SYNC(self->gen1, genFreq, 0);
     282:	40 e0       	ldi	r20, 0x00	; 0
     284:	50 e0       	ldi	r21, 0x00	; 0
     286:	6d e5       	ldi	r22, 0x5D	; 93
     288:	74 e0       	ldi	r23, 0x04	; 4
     28a:	8e 81       	ldd	r24, Y+6	; 0x06
     28c:	9f 81       	ldd	r25, Y+7	; 0x07
     28e:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <sync>
	SYNC(self->gen2, genFreq, 0);
     292:	40 e0       	ldi	r20, 0x00	; 0
     294:	50 e0       	ldi	r21, 0x00	; 0
     296:	6d e5       	ldi	r22, 0x5D	; 93
     298:	74 e0       	ldi	r23, 0x04	; 4
     29a:	88 85       	ldd	r24, Y+8	; 0x08
     29c:	99 85       	ldd	r25, Y+9	; 0x09
     29e:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <sync>
}
     2a2:	df 91       	pop	r29
     2a4:	cf 91       	pop	r28
     2a6:	08 95       	ret

000002a8 <LCD_init>:
#include "PulseGen.h"
#include "TinyTimber.h"

void LCD_init() {
	// LCD(Contrast Control Register), LCD(Display Configuration)(000): 300 s, LCD(Contrast Control)(1111): 3.35 V
	LCDCCR = (0 << LCDDC0) | (0 << LCDDC1) | (0 << LCDDC2) | (1 << LCDCC0) | (1 << LCDCC1) | (1 << LCDCC2) | (1 << LCDCC3);
     2a8:	8f e0       	ldi	r24, 0x0F	; 15
     2aa:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__DATA_REGION_ORIGIN__+0x87>
	// LCDCS: asynchronous clock, LCDMUX(11): D=1/4, B=1/3, LCD(Port Mask): 25 segments
	LCDCRB = (1 << LCDCS) | (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM2) | (1 << LCDPM1) | (1 << LCDPM0);
     2ae:	87 eb       	ldi	r24, 0xB7	; 183
     2b0:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
	// LCD(Clock Divide)(111): (D=8) 32Hz
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);
     2b4:	87 e0       	ldi	r24, 0x07	; 7
     2b6:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__DATA_REGION_ORIGIN__+0x86>
	// LCD(Control and Status Register A), LCD(Enable): True, LCD(Low Power Waveform): True, (no frame interrupt, no blanking)
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
     2ba:	80 ec       	ldi	r24, 0xC0	; 192
     2bc:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
     2c0:	08 95       	ret

000002c2 <getSegmentForChar>:
int none[] = {0b0000, 0b0000, 0b0000, 0b0000};

// Returns wall of data based on char input ('0' = 48 (char))
int* getSegmentForChar(char ch) {

	switch (ch) {
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	fc 01       	movw	r30, r24
     2c6:	f0 97       	sbiw	r30, 0x30	; 48
     2c8:	ea 30       	cpi	r30, 0x0A	; 10
     2ca:	f1 05       	cpc	r31, r1
     2cc:	f8 f4       	brcc	.+62     	; 0x30c <getSegmentForChar+0x4a>
     2ce:	e2 5d       	subi	r30, 0xD2	; 210
     2d0:	ff 4f       	sbci	r31, 0xFF	; 255
     2d2:	0c 94 4b 11 	jmp	0x2296	; 0x2296 <__tablejump2__>
		case '0': return zero;
		case '1': return one;
     2d6:	80 e4       	ldi	r24, 0x40	; 64
     2d8:	91 e0       	ldi	r25, 0x01	; 1
     2da:	08 95       	ret
		case '2': return two;
     2dc:	88 e3       	ldi	r24, 0x38	; 56
     2de:	91 e0       	ldi	r25, 0x01	; 1
     2e0:	08 95       	ret
		case '3': return three;
     2e2:	80 e3       	ldi	r24, 0x30	; 48
     2e4:	91 e0       	ldi	r25, 0x01	; 1
     2e6:	08 95       	ret
		case '4': return four;
     2e8:	88 e2       	ldi	r24, 0x28	; 40
     2ea:	91 e0       	ldi	r25, 0x01	; 1
     2ec:	08 95       	ret
		case '5': return five;
     2ee:	80 e2       	ldi	r24, 0x20	; 32
     2f0:	91 e0       	ldi	r25, 0x01	; 1
     2f2:	08 95       	ret
		case '6': return six;
     2f4:	88 e1       	ldi	r24, 0x18	; 24
     2f6:	91 e0       	ldi	r25, 0x01	; 1
     2f8:	08 95       	ret
		case '7': return seven;
     2fa:	80 e1       	ldi	r24, 0x10	; 16
     2fc:	91 e0       	ldi	r25, 0x01	; 1
     2fe:	08 95       	ret
		case '8': return eight;
     300:	88 e0       	ldi	r24, 0x08	; 8
     302:	91 e0       	ldi	r25, 0x01	; 1
     304:	08 95       	ret
		case '9': return nine;
     306:	80 e0       	ldi	r24, 0x00	; 0
     308:	91 e0       	ldi	r25, 0x01	; 1
     30a:	08 95       	ret
		default:  return none;
     30c:	88 e5       	ldi	r24, 0x58	; 88
     30e:	91 e0       	ldi	r25, 0x01	; 1
     310:	08 95       	ret

// Returns wall of data based on char input ('0' = 48 (char))
int* getSegmentForChar(char ch) {

	switch (ch) {
		case '0': return zero;
     312:	88 e4       	ldi	r24, 0x48	; 72
     314:	91 e0       	ldi	r25, 0x01	; 1
		case '7': return seven;
		case '8': return eight;
		case '9': return nine;
		default:  return none;
	}
}
     316:	08 95       	ret

00000318 <writeChar>:

// Write a char ch at position pos
void writeChar(char ch, uint8_t pos) {
     318:	cf 93       	push	r28
	// Check if outside range
	if (pos > 5 || pos < 0) return;	
     31a:	66 30       	cpi	r22, 0x06	; 6
     31c:	08 f0       	brcs	.+2      	; 0x320 <writeChar+0x8>
     31e:	e4 c0       	rjmp	.+456    	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
     320:	c6 2f       	mov	r28, r22

	// Get correct char data
	int* segment = getSegmentForChar(ch);
     322:	0e 94 61 01 	call	0x2c2	; 0x2c2 <getSegmentForChar>
     326:	fc 01       	movw	r30, r24
	
	// Chose position
	switch (pos) {
     328:	c2 30       	cpi	r28, 0x02	; 2
     32a:	09 f4       	brne	.+2      	; 0x32e <writeChar+0x16>
     32c:	67 c0       	rjmp	.+206    	; 0x3fc <writeChar+0xe4>
     32e:	28 f4       	brcc	.+10     	; 0x33a <writeChar+0x22>
     330:	cc 23       	and	r28, r28
     332:	51 f0       	breq	.+20     	; 0x348 <writeChar+0x30>
     334:	c1 30       	cpi	r28, 0x01	; 1
     336:	29 f1       	breq	.+74     	; 0x382 <writeChar+0x6a>
     338:	d7 c0       	rjmp	.+430    	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
     33a:	c3 30       	cpi	r28, 0x03	; 3
     33c:	09 f4       	brne	.+2      	; 0x340 <writeChar+0x28>
     33e:	7b c0       	rjmp	.+246    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     340:	c4 30       	cpi	r28, 0x04	; 4
     342:	09 f4       	brne	.+2      	; 0x346 <writeChar+0x2e>
     344:	b5 c0       	rjmp	.+362    	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
     346:	d0 c0       	rjmp	.+416    	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
		case 0:
			// Segment start at 0, 5, 10, 15, higher 4 bits.
			// (LCDDR0 & 0xF0) clears the segment before writing 
			LCDDR0 = (LCDDR0 & 0xF0) | segment[0];
     348:	ac ee       	ldi	r26, 0xEC	; 236
     34a:	b0 e0       	ldi	r27, 0x00	; 0
     34c:	8c 91       	ld	r24, X
     34e:	80 7f       	andi	r24, 0xF0	; 240
     350:	90 81       	ld	r25, Z
     352:	89 2b       	or	r24, r25
     354:	8c 93       	st	X, r24
			LCDDR5 = (LCDDR5 & 0xF0) | segment[1];
     356:	a1 ef       	ldi	r26, 0xF1	; 241
     358:	b0 e0       	ldi	r27, 0x00	; 0
     35a:	8c 91       	ld	r24, X
     35c:	80 7f       	andi	r24, 0xF0	; 240
     35e:	92 81       	ldd	r25, Z+2	; 0x02
     360:	89 2b       	or	r24, r25
     362:	8c 93       	st	X, r24
			LCDDR10 = (LCDDR10 & 0xF0) | segment[2];
     364:	a6 ef       	ldi	r26, 0xF6	; 246
     366:	b0 e0       	ldi	r27, 0x00	; 0
     368:	8c 91       	ld	r24, X
     36a:	80 7f       	andi	r24, 0xF0	; 240
     36c:	94 81       	ldd	r25, Z+4	; 0x04
     36e:	89 2b       	or	r24, r25
     370:	8c 93       	st	X, r24
			LCDDR15 = (LCDDR15 & 0xF0) | segment[3];
     372:	ab ef       	ldi	r26, 0xFB	; 251
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	8c 91       	ld	r24, X
     378:	80 7f       	andi	r24, 0xF0	; 240
     37a:	96 81       	ldd	r25, Z+6	; 0x06
     37c:	89 2b       	or	r24, r25
     37e:	8c 93       	st	X, r24
			break;
     380:	b3 c0       	rjmp	.+358    	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
		case 1:
			// Same segment just lower 4 bits
			LCDDR0 = (LCDDR0 & 0x0F) | (segment[0] << 4);
     382:	ac ee       	ldi	r26, 0xEC	; 236
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	2c 91       	ld	r18, X
     388:	80 81       	ld	r24, Z
     38a:	91 81       	ldd	r25, Z+1	; 0x01
     38c:	82 95       	swap	r24
     38e:	92 95       	swap	r25
     390:	90 7f       	andi	r25, 0xF0	; 240
     392:	98 27       	eor	r25, r24
     394:	80 7f       	andi	r24, 0xF0	; 240
     396:	98 27       	eor	r25, r24
     398:	92 2f       	mov	r25, r18
     39a:	9f 70       	andi	r25, 0x0F	; 15
     39c:	89 2b       	or	r24, r25
     39e:	8c 93       	st	X, r24
			LCDDR5 = (LCDDR5 & 0x0F) | (segment[1] << 4);
     3a0:	a1 ef       	ldi	r26, 0xF1	; 241
     3a2:	b0 e0       	ldi	r27, 0x00	; 0
     3a4:	2c 91       	ld	r18, X
     3a6:	82 81       	ldd	r24, Z+2	; 0x02
     3a8:	93 81       	ldd	r25, Z+3	; 0x03
     3aa:	82 95       	swap	r24
     3ac:	92 95       	swap	r25
     3ae:	90 7f       	andi	r25, 0xF0	; 240
     3b0:	98 27       	eor	r25, r24
     3b2:	80 7f       	andi	r24, 0xF0	; 240
     3b4:	98 27       	eor	r25, r24
     3b6:	92 2f       	mov	r25, r18
     3b8:	9f 70       	andi	r25, 0x0F	; 15
     3ba:	89 2b       	or	r24, r25
     3bc:	8c 93       	st	X, r24
			LCDDR10 = (LCDDR10 & 0x0F) | (segment[2] << 4);
     3be:	a6 ef       	ldi	r26, 0xF6	; 246
     3c0:	b0 e0       	ldi	r27, 0x00	; 0
     3c2:	2c 91       	ld	r18, X
     3c4:	84 81       	ldd	r24, Z+4	; 0x04
     3c6:	95 81       	ldd	r25, Z+5	; 0x05
     3c8:	82 95       	swap	r24
     3ca:	92 95       	swap	r25
     3cc:	90 7f       	andi	r25, 0xF0	; 240
     3ce:	98 27       	eor	r25, r24
     3d0:	80 7f       	andi	r24, 0xF0	; 240
     3d2:	98 27       	eor	r25, r24
     3d4:	92 2f       	mov	r25, r18
     3d6:	9f 70       	andi	r25, 0x0F	; 15
     3d8:	89 2b       	or	r24, r25
     3da:	8c 93       	st	X, r24
			LCDDR15 = (LCDDR15 & 0x0F) | (segment[3] << 4);
     3dc:	ab ef       	ldi	r26, 0xFB	; 251
     3de:	b0 e0       	ldi	r27, 0x00	; 0
     3e0:	2c 91       	ld	r18, X
     3e2:	86 81       	ldd	r24, Z+6	; 0x06
     3e4:	97 81       	ldd	r25, Z+7	; 0x07
     3e6:	82 95       	swap	r24
     3e8:	92 95       	swap	r25
     3ea:	90 7f       	andi	r25, 0xF0	; 240
     3ec:	98 27       	eor	r25, r24
     3ee:	80 7f       	andi	r24, 0xF0	; 240
     3f0:	98 27       	eor	r25, r24
     3f2:	92 2f       	mov	r25, r18
     3f4:	9f 70       	andi	r25, 0x0F	; 15
     3f6:	89 2b       	or	r24, r25
     3f8:	8c 93       	st	X, r24
			break;
     3fa:	76 c0       	rjmp	.+236    	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
		case 2:
			LCDDR1 = (LCDDR1 & 0xF0) | segment[0];
     3fc:	ad ee       	ldi	r26, 0xED	; 237
     3fe:	b0 e0       	ldi	r27, 0x00	; 0
     400:	8c 91       	ld	r24, X
     402:	80 7f       	andi	r24, 0xF0	; 240
     404:	90 81       	ld	r25, Z
     406:	89 2b       	or	r24, r25
     408:	8c 93       	st	X, r24
			LCDDR6 = (LCDDR6 & 0xF0) | segment[1];
     40a:	a2 ef       	ldi	r26, 0xF2	; 242
     40c:	b0 e0       	ldi	r27, 0x00	; 0
     40e:	8c 91       	ld	r24, X
     410:	80 7f       	andi	r24, 0xF0	; 240
     412:	92 81       	ldd	r25, Z+2	; 0x02
     414:	89 2b       	or	r24, r25
     416:	8c 93       	st	X, r24
			LCDDR11 = (LCDDR11 & 0xF0) | segment[2];
     418:	a7 ef       	ldi	r26, 0xF7	; 247
     41a:	b0 e0       	ldi	r27, 0x00	; 0
     41c:	8c 91       	ld	r24, X
     41e:	80 7f       	andi	r24, 0xF0	; 240
     420:	94 81       	ldd	r25, Z+4	; 0x04
     422:	89 2b       	or	r24, r25
     424:	8c 93       	st	X, r24
			LCDDR16 = (LCDDR16 & 0xF0) | segment[3];
     426:	ac ef       	ldi	r26, 0xFC	; 252
     428:	b0 e0       	ldi	r27, 0x00	; 0
     42a:	8c 91       	ld	r24, X
     42c:	80 7f       	andi	r24, 0xF0	; 240
     42e:	96 81       	ldd	r25, Z+6	; 0x06
     430:	89 2b       	or	r24, r25
     432:	8c 93       	st	X, r24
			break;
     434:	59 c0       	rjmp	.+178    	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
		case 3:
			LCDDR1 = (LCDDR1 & 0x0F) | (segment[0] << 4);
     436:	ad ee       	ldi	r26, 0xED	; 237
     438:	b0 e0       	ldi	r27, 0x00	; 0
     43a:	2c 91       	ld	r18, X
     43c:	80 81       	ld	r24, Z
     43e:	91 81       	ldd	r25, Z+1	; 0x01
     440:	82 95       	swap	r24
     442:	92 95       	swap	r25
     444:	90 7f       	andi	r25, 0xF0	; 240
     446:	98 27       	eor	r25, r24
     448:	80 7f       	andi	r24, 0xF0	; 240
     44a:	98 27       	eor	r25, r24
     44c:	92 2f       	mov	r25, r18
     44e:	9f 70       	andi	r25, 0x0F	; 15
     450:	89 2b       	or	r24, r25
     452:	8c 93       	st	X, r24
			LCDDR6 = (LCDDR6 & 0x0F) | (segment[1] << 4);
     454:	a2 ef       	ldi	r26, 0xF2	; 242
     456:	b0 e0       	ldi	r27, 0x00	; 0
     458:	2c 91       	ld	r18, X
     45a:	82 81       	ldd	r24, Z+2	; 0x02
     45c:	93 81       	ldd	r25, Z+3	; 0x03
     45e:	82 95       	swap	r24
     460:	92 95       	swap	r25
     462:	90 7f       	andi	r25, 0xF0	; 240
     464:	98 27       	eor	r25, r24
     466:	80 7f       	andi	r24, 0xF0	; 240
     468:	98 27       	eor	r25, r24
     46a:	92 2f       	mov	r25, r18
     46c:	9f 70       	andi	r25, 0x0F	; 15
     46e:	89 2b       	or	r24, r25
     470:	8c 93       	st	X, r24
			LCDDR11 = (LCDDR11 & 0x0F) | (segment[2] << 4);
     472:	a7 ef       	ldi	r26, 0xF7	; 247
     474:	b0 e0       	ldi	r27, 0x00	; 0
     476:	2c 91       	ld	r18, X
     478:	84 81       	ldd	r24, Z+4	; 0x04
     47a:	95 81       	ldd	r25, Z+5	; 0x05
     47c:	82 95       	swap	r24
     47e:	92 95       	swap	r25
     480:	90 7f       	andi	r25, 0xF0	; 240
     482:	98 27       	eor	r25, r24
     484:	80 7f       	andi	r24, 0xF0	; 240
     486:	98 27       	eor	r25, r24
     488:	92 2f       	mov	r25, r18
     48a:	9f 70       	andi	r25, 0x0F	; 15
     48c:	89 2b       	or	r24, r25
     48e:	8c 93       	st	X, r24
			LCDDR16 = (LCDDR16 & 0x0F) | (segment[3] << 4);
     490:	ac ef       	ldi	r26, 0xFC	; 252
     492:	b0 e0       	ldi	r27, 0x00	; 0
     494:	2c 91       	ld	r18, X
     496:	86 81       	ldd	r24, Z+6	; 0x06
     498:	97 81       	ldd	r25, Z+7	; 0x07
     49a:	82 95       	swap	r24
     49c:	92 95       	swap	r25
     49e:	90 7f       	andi	r25, 0xF0	; 240
     4a0:	98 27       	eor	r25, r24
     4a2:	80 7f       	andi	r24, 0xF0	; 240
     4a4:	98 27       	eor	r25, r24
     4a6:	92 2f       	mov	r25, r18
     4a8:	9f 70       	andi	r25, 0x0F	; 15
     4aa:	89 2b       	or	r24, r25
     4ac:	8c 93       	st	X, r24
			break;
     4ae:	1c c0       	rjmp	.+56     	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
		case 4:
			LCDDR2 = (LCDDR2 & 0xF0) | segment[0];
     4b0:	ae ee       	ldi	r26, 0xEE	; 238
     4b2:	b0 e0       	ldi	r27, 0x00	; 0
     4b4:	8c 91       	ld	r24, X
     4b6:	80 7f       	andi	r24, 0xF0	; 240
     4b8:	90 81       	ld	r25, Z
     4ba:	89 2b       	or	r24, r25
     4bc:	8c 93       	st	X, r24
			LCDDR7 = (LCDDR7 & 0xF0) | segment[1];
     4be:	a3 ef       	ldi	r26, 0xF3	; 243
     4c0:	b0 e0       	ldi	r27, 0x00	; 0
     4c2:	8c 91       	ld	r24, X
     4c4:	80 7f       	andi	r24, 0xF0	; 240
     4c6:	92 81       	ldd	r25, Z+2	; 0x02
     4c8:	89 2b       	or	r24, r25
     4ca:	8c 93       	st	X, r24
			LCDDR12 = (LCDDR12 & 0xF0) | segment[2];
     4cc:	a8 ef       	ldi	r26, 0xF8	; 248
     4ce:	b0 e0       	ldi	r27, 0x00	; 0
     4d0:	8c 91       	ld	r24, X
     4d2:	80 7f       	andi	r24, 0xF0	; 240
     4d4:	94 81       	ldd	r25, Z+4	; 0x04
     4d6:	89 2b       	or	r24, r25
     4d8:	8c 93       	st	X, r24
			LCDDR17 = (LCDDR17 & 0xF0) | segment[3];
     4da:	ad ef       	ldi	r26, 0xFD	; 253
     4dc:	b0 e0       	ldi	r27, 0x00	; 0
     4de:	8c 91       	ld	r24, X
     4e0:	80 7f       	andi	r24, 0xF0	; 240
     4e2:	96 81       	ldd	r25, Z+6	; 0x06
     4e4:	89 2b       	or	r24, r25
     4e6:	8c 93       	st	X, r24
			break;
	}
}
     4e8:	cf 91       	pop	r28
     4ea:	08 95       	ret

000004ec <printAt>:

void printAt(long num, int pos) {
     4ec:	8f 92       	push	r8
     4ee:	9f 92       	push	r9
     4f0:	af 92       	push	r10
     4f2:	bf 92       	push	r11
     4f4:	cf 92       	push	r12
     4f6:	df 92       	push	r13
     4f8:	ef 92       	push	r14
     4fa:	ff 92       	push	r15
     4fc:	cf 93       	push	r28
     4fe:	df 93       	push	r29
     500:	4b 01       	movw	r8, r22
     502:	5c 01       	movw	r10, r24
     504:	ea 01       	movw	r28, r20
	writeChar((num % 100) / 10 + '0', pos);
     506:	24 e6       	ldi	r18, 0x64	; 100
     508:	30 e0       	ldi	r19, 0x00	; 0
     50a:	40 e0       	ldi	r20, 0x00	; 0
     50c:	50 e0       	ldi	r21, 0x00	; 0
     50e:	0e 94 2c 11 	call	0x2258	; 0x2258 <__divmodsi4>
     512:	0f 2e       	mov	r0, r31
     514:	fa e0       	ldi	r31, 0x0A	; 10
     516:	cf 2e       	mov	r12, r31
     518:	d1 2c       	mov	r13, r1
     51a:	e1 2c       	mov	r14, r1
     51c:	f1 2c       	mov	r15, r1
     51e:	f0 2d       	mov	r31, r0
     520:	a7 01       	movw	r20, r14
     522:	96 01       	movw	r18, r12
     524:	0e 94 2c 11 	call	0x2258	; 0x2258 <__divmodsi4>
     528:	6c 2f       	mov	r22, r28
     52a:	80 e3       	ldi	r24, 0x30	; 48
     52c:	82 0f       	add	r24, r18
     52e:	0e 94 8c 01 	call	0x318	; 0x318 <writeChar>
	pos++;
	writeChar(num % 10 + '0', pos);
     532:	21 96       	adiw	r28, 0x01	; 1
     534:	c5 01       	movw	r24, r10
     536:	b4 01       	movw	r22, r8
     538:	a7 01       	movw	r20, r14
     53a:	96 01       	movw	r18, r12
     53c:	0e 94 2c 11 	call	0x2258	; 0x2258 <__divmodsi4>
     540:	86 2f       	mov	r24, r22
     542:	6c 2f       	mov	r22, r28
     544:	80 5d       	subi	r24, 0xD0	; 208
     546:	0e 94 8c 01 	call	0x318	; 0x318 <writeChar>
}
     54a:	df 91       	pop	r29
     54c:	cf 91       	pop	r28
     54e:	ff 90       	pop	r15
     550:	ef 90       	pop	r14
     552:	df 90       	pop	r13
     554:	cf 90       	pop	r12
     556:	bf 90       	pop	r11
     558:	af 90       	pop	r10
     55a:	9f 90       	pop	r9
     55c:	8f 90       	pop	r8
     55e:	08 95       	ret

00000560 <activeGenIndicator>:

void activeGenIndicator(GUI *self, int activeGen) {
     560:	dc 01       	movw	r26, r24
	LCDDR0 &= ~(0b01000100);
     562:	ec ee       	ldi	r30, 0xEC	; 236
     564:	f0 e0       	ldi	r31, 0x00	; 0
     566:	90 81       	ld	r25, Z
     568:	9b 7b       	andi	r25, 0xBB	; 187
     56a:	90 83       	st	Z, r25
	if (self->leftActive) {
     56c:	14 96       	adiw	r26, 0x04	; 4
     56e:	8c 91       	ld	r24, X
     570:	14 97       	sbiw	r26, 0x04	; 4
     572:	88 23       	and	r24, r24
     574:	39 f0       	breq	.+14     	; 0x584 <activeGenIndicator+0x24>
		LCDDR0 |= 0b00000100;
     576:	80 81       	ld	r24, Z
     578:	84 60       	ori	r24, 0x04	; 4
     57a:	80 83       	st	Z, r24
	} 
	if (!self->leftActive) {
     57c:	14 96       	adiw	r26, 0x04	; 4
     57e:	8c 91       	ld	r24, X
     580:	81 11       	cpse	r24, r1
     582:	05 c0       	rjmp	.+10     	; 0x58e <activeGenIndicator+0x2e>
		LCDDR0 |= 0b01000000;
     584:	ec ee       	ldi	r30, 0xEC	; 236
     586:	f0 e0       	ldi	r31, 0x00	; 0
     588:	80 81       	ld	r24, Z
     58a:	80 64       	ori	r24, 0x40	; 64
     58c:	80 83       	st	Z, r24
     58e:	08 95       	ret

00000590 <setActive>:
	}
}

void setActive(GUI *self, bool status) {
	self->leftActive = status;
     590:	fc 01       	movw	r30, r24
     592:	64 83       	std	Z+4, r22	; 0x04
     594:	08 95       	ret

00000596 <updateDisplay>:
}

void updateDisplay(GUI *self, int activeGen) {
     596:	cf 92       	push	r12
     598:	df 92       	push	r13
     59a:	ef 92       	push	r14
     59c:	ff 92       	push	r15
     59e:	0f 93       	push	r16
     5a0:	1f 93       	push	r17
     5a2:	cf 93       	push	r28
     5a4:	df 93       	push	r29
     5a6:	ec 01       	movw	r28, r24
     5a8:	7b 01       	movw	r14, r22
	int gen1Freq = SYNC(self->gen1, getFrequency, 0);
     5aa:	40 e0       	ldi	r20, 0x00	; 0
     5ac:	50 e0       	ldi	r21, 0x00	; 0
     5ae:	60 ed       	ldi	r22, 0xD0	; 208
     5b0:	74 e0       	ldi	r23, 0x04	; 4
     5b2:	8d 81       	ldd	r24, Y+5	; 0x05
     5b4:	9e 81       	ldd	r25, Y+6	; 0x06
     5b6:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <sync>
     5ba:	6c 01       	movw	r12, r24
	int gen2Freq = SYNC(self->gen2, getFrequency, 0);
     5bc:	40 e0       	ldi	r20, 0x00	; 0
     5be:	50 e0       	ldi	r21, 0x00	; 0
     5c0:	60 ed       	ldi	r22, 0xD0	; 208
     5c2:	74 e0       	ldi	r23, 0x04	; 4
     5c4:	8f 81       	ldd	r24, Y+7	; 0x07
     5c6:	98 85       	ldd	r25, Y+8	; 0x08
     5c8:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <sync>
     5cc:	8c 01       	movw	r16, r24
	printAt(gen1Freq, 0); //gen1 hz at pos 0-1
     5ce:	b6 01       	movw	r22, r12
     5d0:	dd 0c       	add	r13, r13
     5d2:	88 0b       	sbc	r24, r24
     5d4:	99 0b       	sbc	r25, r25
     5d6:	40 e0       	ldi	r20, 0x00	; 0
     5d8:	50 e0       	ldi	r21, 0x00	; 0
     5da:	0e 94 76 02 	call	0x4ec	; 0x4ec <printAt>
	printAt(gen2Freq, 3); //gen2 hz at pos 3-4
     5de:	b8 01       	movw	r22, r16
     5e0:	11 0f       	add	r17, r17
     5e2:	88 0b       	sbc	r24, r24
     5e4:	99 0b       	sbc	r25, r25
     5e6:	43 e0       	ldi	r20, 0x03	; 3
     5e8:	50 e0       	ldi	r21, 0x00	; 0
     5ea:	0e 94 76 02 	call	0x4ec	; 0x4ec <printAt>
	activeGenIndicator(self, activeGen);
     5ee:	b7 01       	movw	r22, r14
     5f0:	ce 01       	movw	r24, r28
     5f2:	0e 94 b0 02 	call	0x560	; 0x560 <activeGenIndicator>
}
     5f6:	df 91       	pop	r29
     5f8:	cf 91       	pop	r28
     5fa:	1f 91       	pop	r17
     5fc:	0f 91       	pop	r16
     5fe:	ff 90       	pop	r15
     600:	ef 90       	pop	r14
     602:	df 90       	pop	r13
     604:	cf 90       	pop	r12
     606:	08 95       	ret

00000608 <joystickInteruptHandler>:
    PCMSK0 |= (1 << PCINT3) | (1 << PCINT2);
}


// Joystick input handler
void joystickInteruptHandler(JoystickHandler *self) { 
     608:	cf 92       	push	r12
     60a:	df 92       	push	r13
     60c:	ef 92       	push	r14
     60e:	ff 92       	push	r15
     610:	0f 93       	push	r16
     612:	1f 93       	push	r17
     614:	cf 93       	push	r28
     616:	df 93       	push	r29
     618:	ec 01       	movw	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     61a:	87 ea       	ldi	r24, 0xA7	; 167
     61c:	91 e6       	ldi	r25, 0x61	; 97
     61e:	01 97       	sbiw	r24, 0x01	; 1
     620:	f1 f7       	brne	.-4      	; 0x61e <joystickInteruptHandler+0x16>
     622:	00 c0       	rjmp	.+0      	; 0x624 <joystickInteruptHandler+0x1c>
     624:	00 00       	nop
	
	_delay_ms(100);
	
	// In
	if (!(PINB & (1 << PB4))) {
     626:	1c 99       	sbic	0x03, 4	; 3
     628:	12 c0       	rjmp	.+36     	; 0x64e <joystickInteruptHandler+0x46>
		ASYNC(self->BE, saveRestore, 0);
     62a:	0c 81       	ldd	r16, Y+4	; 0x04
     62c:	1d 81       	ldd	r17, Y+5	; 0x05
     62e:	c1 2c       	mov	r12, r1
     630:	d1 2c       	mov	r13, r1
     632:	0f 2e       	mov	r0, r31
     634:	f7 ef       	ldi	r31, 0xF7	; 247
     636:	ef 2e       	mov	r14, r31
     638:	f0 e0       	ldi	r31, 0x00	; 0
     63a:	ff 2e       	mov	r15, r31
     63c:	f0 2d       	mov	r31, r0
     63e:	20 e0       	ldi	r18, 0x00	; 0
     640:	30 e0       	ldi	r19, 0x00	; 0
     642:	a9 01       	movw	r20, r18
     644:	60 e0       	ldi	r22, 0x00	; 0
     646:	70 e0       	ldi	r23, 0x00	; 0
     648:	cb 01       	movw	r24, r22
     64a:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <async>
	}
	
	// Right
	if (!(PINE & (1 << PB3))) {
     64e:	63 99       	sbic	0x0c, 3	; 12
     650:	12 c0       	rjmp	.+36     	; 0x676 <joystickInteruptHandler+0x6e>
		ASYNC(self->BE, swithToRightGen, 0);
     652:	0c 81       	ldd	r16, Y+4	; 0x04
     654:	1d 81       	ldd	r17, Y+5	; 0x05
     656:	c1 2c       	mov	r12, r1
     658:	d1 2c       	mov	r13, r1
     65a:	0f 2e       	mov	r0, r31
     65c:	fa e8       	ldi	r31, 0x8A	; 138
     65e:	ef 2e       	mov	r14, r31
     660:	f0 e0       	ldi	r31, 0x00	; 0
     662:	ff 2e       	mov	r15, r31
     664:	f0 2d       	mov	r31, r0
     666:	20 e0       	ldi	r18, 0x00	; 0
     668:	30 e0       	ldi	r19, 0x00	; 0
     66a:	a9 01       	movw	r20, r18
     66c:	60 e0       	ldi	r22, 0x00	; 0
     66e:	70 e0       	ldi	r23, 0x00	; 0
     670:	cb 01       	movw	r24, r22
     672:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <async>
	}
	
	// Left
	if (!(PINE & (1 << PB2))) {
     676:	62 99       	sbic	0x0c, 2	; 12
     678:	12 c0       	rjmp	.+36     	; 0x69e <joystickInteruptHandler+0x96>
		ASYNC(self->BE, swithToLeftGen, 0);
     67a:	0c 81       	ldd	r16, Y+4	; 0x04
     67c:	1d 81       	ldd	r17, Y+5	; 0x05
     67e:	c1 2c       	mov	r12, r1
     680:	d1 2c       	mov	r13, r1
     682:	0f 2e       	mov	r0, r31
     684:	f7 e5       	ldi	r31, 0x57	; 87
     686:	ef 2e       	mov	r14, r31
     688:	f0 e0       	ldi	r31, 0x00	; 0
     68a:	ff 2e       	mov	r15, r31
     68c:	f0 2d       	mov	r31, r0
     68e:	20 e0       	ldi	r18, 0x00	; 0
     690:	30 e0       	ldi	r19, 0x00	; 0
     692:	a9 01       	movw	r20, r18
     694:	60 e0       	ldi	r22, 0x00	; 0
     696:	70 e0       	ldi	r23, 0x00	; 0
     698:	cb 01       	movw	r24, r22
     69a:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <async>
     69e:	9f e1       	ldi	r25, 0x1F	; 31
     6a0:	2f eb       	ldi	r18, 0xBF	; 191
     6a2:	82 e0       	ldi	r24, 0x02	; 2
     6a4:	91 50       	subi	r25, 0x01	; 1
     6a6:	20 40       	sbci	r18, 0x00	; 0
     6a8:	80 40       	sbci	r24, 0x00	; 0
     6aa:	e1 f7       	brne	.-8      	; 0x6a4 <joystickInteruptHandler+0x9c>
     6ac:	00 c0       	rjmp	.+0      	; 0x6ae <joystickInteruptHandler+0xa6>
     6ae:	00 00       	nop
	}
	
	_delay_ms(900);
	
	// Down
	if (!(PINB & (1 << PB7))) {
     6b0:	1f 99       	sbic	0x03, 7	; 3
     6b2:	24 c0       	rjmp	.+72     	; 0x6fc <joystickInteruptHandler+0xf4>
		ASYNC(self->BE, adjustFrequency, -1);	
     6b4:	0c 81       	ldd	r16, Y+4	; 0x04
     6b6:	1d 81       	ldd	r17, Y+5	; 0x05
     6b8:	cc 24       	eor	r12, r12
     6ba:	ca 94       	dec	r12
     6bc:	dc 2c       	mov	r13, r12
     6be:	0f 2e       	mov	r0, r31
     6c0:	fd eb       	ldi	r31, 0xBD	; 189
     6c2:	ef 2e       	mov	r14, r31
     6c4:	f0 e0       	ldi	r31, 0x00	; 0
     6c6:	ff 2e       	mov	r15, r31
     6c8:	f0 2d       	mov	r31, r0
     6ca:	20 e0       	ldi	r18, 0x00	; 0
     6cc:	30 e0       	ldi	r19, 0x00	; 0
     6ce:	a9 01       	movw	r20, r18
     6d0:	60 e0       	ldi	r22, 0x00	; 0
     6d2:	70 e0       	ldi	r23, 0x00	; 0
     6d4:	cb 01       	movw	r24, r22
     6d6:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <async>
		ASYNC(self, joystickInteruptHandler, 0);
     6da:	c1 2c       	mov	r12, r1
     6dc:	d1 2c       	mov	r13, r1
     6de:	0f 2e       	mov	r0, r31
     6e0:	f4 e0       	ldi	r31, 0x04	; 4
     6e2:	ef 2e       	mov	r14, r31
     6e4:	f3 e0       	ldi	r31, 0x03	; 3
     6e6:	ff 2e       	mov	r15, r31
     6e8:	f0 2d       	mov	r31, r0
     6ea:	8e 01       	movw	r16, r28
     6ec:	20 e0       	ldi	r18, 0x00	; 0
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	a9 01       	movw	r20, r18
     6f2:	60 e0       	ldi	r22, 0x00	; 0
     6f4:	70 e0       	ldi	r23, 0x00	; 0
     6f6:	cb 01       	movw	r24, r22
     6f8:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <async>
	}
	
	// Up
	if (!(PINB & (1 << PB6))) {
     6fc:	1e 99       	sbic	0x03, 6	; 3
     6fe:	24 c0       	rjmp	.+72     	; 0x748 <joystickInteruptHandler+0x140>
		ASYNC(self->BE, adjustFrequency, 1);
     700:	0c 81       	ldd	r16, Y+4	; 0x04
     702:	1d 81       	ldd	r17, Y+5	; 0x05
     704:	cc 24       	eor	r12, r12
     706:	c3 94       	inc	r12
     708:	d1 2c       	mov	r13, r1
     70a:	0f 2e       	mov	r0, r31
     70c:	fd eb       	ldi	r31, 0xBD	; 189
     70e:	ef 2e       	mov	r14, r31
     710:	f0 e0       	ldi	r31, 0x00	; 0
     712:	ff 2e       	mov	r15, r31
     714:	f0 2d       	mov	r31, r0
     716:	20 e0       	ldi	r18, 0x00	; 0
     718:	30 e0       	ldi	r19, 0x00	; 0
     71a:	a9 01       	movw	r20, r18
     71c:	60 e0       	ldi	r22, 0x00	; 0
     71e:	70 e0       	ldi	r23, 0x00	; 0
     720:	cb 01       	movw	r24, r22
     722:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <async>
		ASYNC(self, joystickInteruptHandler, 0);
     726:	c1 2c       	mov	r12, r1
     728:	d1 2c       	mov	r13, r1
     72a:	0f 2e       	mov	r0, r31
     72c:	f4 e0       	ldi	r31, 0x04	; 4
     72e:	ef 2e       	mov	r14, r31
     730:	f3 e0       	ldi	r31, 0x03	; 3
     732:	ff 2e       	mov	r15, r31
     734:	f0 2d       	mov	r31, r0
     736:	8e 01       	movw	r16, r28
     738:	20 e0       	ldi	r18, 0x00	; 0
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	a9 01       	movw	r20, r18
     73e:	60 e0       	ldi	r22, 0x00	; 0
     740:	70 e0       	ldi	r23, 0x00	; 0
     742:	cb 01       	movw	r24, r22
     744:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <async>
	}	
     748:	df 91       	pop	r29
     74a:	cf 91       	pop	r28
     74c:	1f 91       	pop	r17
     74e:	0f 91       	pop	r16
     750:	ff 90       	pop	r15
     752:	ef 90       	pop	r14
     754:	df 90       	pop	r13
     756:	cf 90       	pop	r12
     758:	08 95       	ret

0000075a <joystickInit>:
#include <util/delay.h>


void joystickInit() {
    // Input for: Down, Up, Click
    PORTB |= (1 << PB7) | (1 << PB6) | (1 << PB4);
     75a:	85 b1       	in	r24, 0x05	; 5
     75c:	80 6d       	ori	r24, 0xD0	; 208
     75e:	85 b9       	out	0x05, r24	; 5
    // Input for; Left, Right
    PORTE |= (1 << PE3) | (1 << PE2);
     760:	8e b1       	in	r24, 0x0e	; 14
     762:	8c 60       	ori	r24, 0x0C	; 12
     764:	8e b9       	out	0x0e, r24	; 14
    // Turn on interrupts
    EIMSK |= (1 << PCINT15) | (1 << PCINT14);
     766:	8d b3       	in	r24, 0x1d	; 29
     768:	80 6c       	ori	r24, 0xC0	; 192
     76a:	8d bb       	out	0x1d, r24	; 29

    // Define interrupts from PB7,6,4
    PCMSK1 |= (1 << PCINT15) | (1 << PCINT14) | (1 << PCINT12);
     76c:	ec e6       	ldi	r30, 0x6C	; 108
     76e:	f0 e0       	ldi	r31, 0x00	; 0
     770:	80 81       	ld	r24, Z
     772:	80 6d       	ori	r24, 0xD0	; 208
     774:	80 83       	st	Z, r24
    // Define interrupts from PE3,2
    PCMSK0 |= (1 << PCINT3) | (1 << PCINT2);
     776:	eb e6       	ldi	r30, 0x6B	; 107
     778:	f0 e0       	ldi	r31, 0x00	; 0
     77a:	80 81       	ld	r24, Z
     77c:	8c 60       	ori	r24, 0x0C	; 12
     77e:	80 83       	st	Z, r24
     780:	08 95       	ret

00000782 <sysInit>:
#include "TinyTimber.h"
#include "Backend.h"

void sysInit(){
    // Clock Prescale Register "maximum speed"
	CLKPR = 0b10000000; // Clock Prescaler Change Enable
     782:	e1 e6       	ldi	r30, 0x61	; 97
     784:	f0 e0       	ldi	r31, 0x00	; 0
     786:	80 e8       	ldi	r24, 0x80	; 128
     788:	80 83       	st	Z, r24
	CLKPR = 0b00000000; // Set 0 for sysclock
     78a:	10 82       	st	Z, r1
     78c:	08 95       	ret

0000078e <pinOutputInit>:
}

void pinOutputInit(){
    // Initialize Port E as output for PE4 and PE6
	DDRE |= (1 << PE4) | (1 << PE6);
     78e:	8d b1       	in	r24, 0x0d	; 13
     790:	80 65       	ori	r24, 0x50	; 80
     792:	8d b9       	out	0x0d, r24	; 13
     794:	08 95       	ret

00000796 <main>:
}

int main() {
     796:	0f 93       	push	r16
     798:	1f 93       	push	r17
     79a:	cf 93       	push	r28
     79c:	df 93       	push	r29
     79e:	cd b7       	in	r28, 0x3d	; 61
     7a0:	de b7       	in	r29, 0x3e	; 62
     7a2:	e7 97       	sbiw	r28, 0x37	; 55
     7a4:	0f b6       	in	r0, 0x3f	; 63
     7a6:	f8 94       	cli
     7a8:	de bf       	out	0x3e, r29	; 62
     7aa:	0f be       	out	0x3f, r0	; 63
     7ac:	cd bf       	out	0x3d, r28	; 61
	// Initialize objects
	PortWrite portWriter = initPortWrite();
     7ae:	1a 82       	std	Y+2, r1	; 0x02
     7b0:	19 82       	std	Y+1, r1	; 0x01
     7b2:	1c 82       	std	Y+4, r1	; 0x04
     7b4:	1b 82       	std	Y+3, r1	; 0x03
	PulseGen gen1 = initPulseGen(4, &portWriter);
     7b6:	1e 82       	std	Y+6, r1	; 0x06
     7b8:	1d 82       	std	Y+5, r1	; 0x05
     7ba:	18 86       	std	Y+8, r1	; 0x08
     7bc:	1f 82       	std	Y+7, r1	; 0x07
     7be:	84 e0       	ldi	r24, 0x04	; 4
     7c0:	89 87       	std	Y+9, r24	; 0x09
     7c2:	1a 86       	std	Y+10, r1	; 0x0a
     7c4:	1c 86       	std	Y+12, r1	; 0x0c
     7c6:	1b 86       	std	Y+11, r1	; 0x0b
     7c8:	1e 86       	std	Y+14, r1	; 0x0e
     7ca:	1d 86       	std	Y+13, r1	; 0x0d
     7cc:	ce 01       	movw	r24, r28
     7ce:	01 96       	adiw	r24, 0x01	; 1
     7d0:	98 8b       	std	Y+16, r25	; 0x10
     7d2:	8f 87       	std	Y+15, r24	; 0x0f
	PulseGen gen2 = initPulseGen(6, &portWriter);
     7d4:	1a 8a       	std	Y+18, r1	; 0x12
     7d6:	19 8a       	std	Y+17, r1	; 0x11
     7d8:	1c 8a       	std	Y+20, r1	; 0x14
     7da:	1b 8a       	std	Y+19, r1	; 0x13
     7dc:	26 e0       	ldi	r18, 0x06	; 6
     7de:	2d 8b       	std	Y+21, r18	; 0x15
     7e0:	1e 8a       	std	Y+22, r1	; 0x16
     7e2:	18 8e       	std	Y+24, r1	; 0x18
     7e4:	1f 8a       	std	Y+23, r1	; 0x17
     7e6:	1a 8e       	std	Y+26, r1	; 0x1a
     7e8:	19 8e       	std	Y+25, r1	; 0x19
     7ea:	9c 8f       	std	Y+28, r25	; 0x1c
     7ec:	8b 8f       	std	Y+27, r24	; 0x1b
	GUI gui = initGUI(&gen1, &gen2, true);
     7ee:	1e 8e       	std	Y+30, r1	; 0x1e
     7f0:	1d 8e       	std	Y+29, r1	; 0x1d
     7f2:	18 a2       	std	Y+32, r1	; 0x20
     7f4:	1f 8e       	std	Y+31, r1	; 0x1f
     7f6:	81 e0       	ldi	r24, 0x01	; 1
     7f8:	89 a3       	std	Y+33, r24	; 0x21
     7fa:	ce 01       	movw	r24, r28
     7fc:	05 96       	adiw	r24, 0x05	; 5
     7fe:	9b a3       	std	Y+35, r25	; 0x23
     800:	8a a3       	std	Y+34, r24	; 0x22
     802:	9e 01       	movw	r18, r28
     804:	2f 5e       	subi	r18, 0xEF	; 239
     806:	3f 4f       	sbci	r19, 0xFF	; 255
     808:	3d a3       	std	Y+37, r19	; 0x25
     80a:	2c a3       	std	Y+36, r18	; 0x24
	Backend BE = initBackend(&gen1, &gen2, &gui);
     80c:	1f a2       	std	Y+39, r1	; 0x27
     80e:	1e a2       	std	Y+38, r1	; 0x26
     810:	19 a6       	std	Y+41, r1	; 0x29
     812:	18 a6       	std	Y+40, r1	; 0x28
     814:	ae 01       	movw	r20, r28
     816:	43 5e       	subi	r20, 0xE3	; 227
     818:	5f 4f       	sbci	r21, 0xFF	; 255
     81a:	5b a7       	std	Y+43, r21	; 0x2b
     81c:	4a a7       	std	Y+42, r20	; 0x2a
     81e:	9d a7       	std	Y+45, r25	; 0x2d
     820:	8c a7       	std	Y+44, r24	; 0x2c
     822:	3f a7       	std	Y+47, r19	; 0x2f
     824:	2e a7       	std	Y+46, r18	; 0x2e
     826:	99 ab       	std	Y+49, r25	; 0x31
     828:	88 ab       	std	Y+48, r24	; 0x30
	JoystickHandler joystick = initJoystickHandler(&BE);
     82a:	1b aa       	std	Y+51, r1	; 0x33
     82c:	1a aa       	std	Y+50, r1	; 0x32
     82e:	1d aa       	std	Y+53, r1	; 0x35
     830:	1c aa       	std	Y+52, r1	; 0x34
     832:	8e 01       	movw	r16, r28
     834:	0a 5d       	subi	r16, 0xDA	; 218
     836:	1f 4f       	sbci	r17, 0xFF	; 255
     838:	1f ab       	std	Y+55, r17	; 0x37
     83a:	0e ab       	std	Y+54, r16	; 0x36
	
    sysInit();
     83c:	0e 94 c1 03 	call	0x782	; 0x782 <sysInit>
    pinOutputInit(); // Is this needed
     840:	0e 94 c7 03 	call	0x78e	; 0x78e <pinOutputInit>
    joystickInit();
     844:	0e 94 ad 03 	call	0x75a	; 0x75a <joystickInit>
    LCD_init();	
     848:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LCD_init>
	
	
    // Install interrupt handler
    INSTALL(&joystick, joystickInteruptHandler, IRQ_PCINT0);
     84c:	41 e0       	ldi	r20, 0x01	; 1
     84e:	64 e0       	ldi	r22, 0x04	; 4
     850:	73 e0       	ldi	r23, 0x03	; 3
     852:	ce 01       	movw	r24, r28
     854:	c2 96       	adiw	r24, 0x32	; 50
     856:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <install>
	INSTALL(&joystick, joystickInteruptHandler, IRQ_PCINT1);
     85a:	42 e0       	ldi	r20, 0x02	; 2
     85c:	64 e0       	ldi	r22, 0x04	; 4
     85e:	73 e0       	ldi	r23, 0x03	; 3
     860:	ce 01       	movw	r24, r28
     862:	c2 96       	adiw	r24, 0x32	; 50
     864:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <install>
    
    // Start kernel
    return TINYTIMBER(&BE, startProgram, NULL);	
     868:	40 e0       	ldi	r20, 0x00	; 0
     86a:	50 e0       	ldi	r21, 0x00	; 0
     86c:	6e e3       	ldi	r22, 0x3E	; 62
     86e:	71 e0       	ldi	r23, 0x01	; 1
     870:	c8 01       	movw	r24, r16
     872:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <tinytimber>
}
     876:	e7 96       	adiw	r28, 0x37	; 55
     878:	0f b6       	in	r0, 0x3f	; 63
     87a:	f8 94       	cli
     87c:	de bf       	out	0x3e, r29	; 62
     87e:	0f be       	out	0x3f, r0	; 63
     880:	cd bf       	out	0x3d, r28	; 61
     882:	df 91       	pop	r29
     884:	cf 91       	pop	r28
     886:	1f 91       	pop	r17
     888:	0f 91       	pop	r16
     88a:	08 95       	ret

0000088c <turnOffPin>:
#include "PortWrite.h"
#include "TinyTimber.h"

// Set a specific bit on Port E high or low
void turnOffPin(PortWrite *self, uint8_t bit) {
    PORTE &= ~(1 << bit);
     88c:	2e b1       	in	r18, 0x0e	; 14
     88e:	81 e0       	ldi	r24, 0x01	; 1
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	02 c0       	rjmp	.+4      	; 0x898 <turnOffPin+0xc>
     894:	88 0f       	add	r24, r24
     896:	99 1f       	adc	r25, r25
     898:	6a 95       	dec	r22
     89a:	e2 f7       	brpl	.-8      	; 0x894 <turnOffPin+0x8>
     89c:	80 95       	com	r24
     89e:	82 23       	and	r24, r18
     8a0:	8e b9       	out	0x0e, r24	; 14
     8a2:	08 95       	ret

000008a4 <togglePin>:
}

// Toggle a specific bit on Port E
void togglePin(PortWrite *self, uint8_t bit) {
    PORTE ^= (1 << bit);   // Toggle the bit
     8a4:	2e b1       	in	r18, 0x0e	; 14
     8a6:	81 e0       	ldi	r24, 0x01	; 1
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	02 c0       	rjmp	.+4      	; 0x8b0 <togglePin+0xc>
     8ac:	88 0f       	add	r24, r24
     8ae:	99 1f       	adc	r25, r25
     8b0:	6a 95       	dec	r22
     8b2:	e2 f7       	brpl	.-8      	; 0x8ac <togglePin+0x8>
     8b4:	82 27       	eor	r24, r18
     8b6:	8e b9       	out	0x0e, r24	; 14
     8b8:	08 95       	ret

000008ba <genFreq>:

int getFrequency(PulseGen *self) {
	return self->frequency;
}

void genFreq(PulseGen *self) {
     8ba:	cf 92       	push	r12
     8bc:	df 92       	push	r13
     8be:	ef 92       	push	r14
     8c0:	ff 92       	push	r15
     8c2:	0f 93       	push	r16
     8c4:	1f 93       	push	r17
     8c6:	cf 93       	push	r28
     8c8:	df 93       	push	r29
     8ca:	ec 01       	movw	r28, r24
	if (self->frequency == 0) {
     8cc:	6e 81       	ldd	r22, Y+6	; 0x06
     8ce:	7f 81       	ldd	r23, Y+7	; 0x07
     8d0:	61 15       	cp	r22, r1
     8d2:	71 05       	cpc	r23, r1
     8d4:	d9 f4       	brne	.+54     	; 0x90c <genFreq+0x52>
		SYNC(self->write, turnOffPin, self->bit);
     8d6:	4c 81       	ldd	r20, Y+4	; 0x04
     8d8:	50 e0       	ldi	r21, 0x00	; 0
     8da:	66 e4       	ldi	r22, 0x46	; 70
     8dc:	74 e0       	ldi	r23, 0x04	; 4
     8de:	8a 85       	ldd	r24, Y+10	; 0x0a
     8e0:	9b 85       	ldd	r25, Y+11	; 0x0b
     8e2:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <sync>
		AFTER(SEC(1), self, genFreq, 0);
     8e6:	c1 2c       	mov	r12, r1
     8e8:	d1 2c       	mov	r13, r1
     8ea:	0f 2e       	mov	r0, r31
     8ec:	fd e5       	ldi	r31, 0x5D	; 93
     8ee:	ef 2e       	mov	r14, r31
     8f0:	f4 e0       	ldi	r31, 0x04	; 4
     8f2:	ff 2e       	mov	r15, r31
     8f4:	f0 2d       	mov	r31, r0
     8f6:	8e 01       	movw	r16, r28
     8f8:	20 e0       	ldi	r18, 0x00	; 0
     8fa:	30 e0       	ldi	r19, 0x00	; 0
     8fc:	a9 01       	movw	r20, r18
     8fe:	62 e1       	ldi	r22, 0x12	; 18
     900:	7a e7       	ldi	r23, 0x7A	; 122
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <async>
     90a:	31 c0       	rjmp	.+98     	; 0x96e <genFreq+0xb4>
	} else {		
		int halfFreq = (int)(500 / self->frequency);
		AFTER(MSEC(halfFreq), self, genFreq, 0);
     90c:	84 ef       	ldi	r24, 0xF4	; 244
     90e:	91 e0       	ldi	r25, 0x01	; 1
     910:	0e 94 18 11 	call	0x2230	; 0x2230 <__divmodhi4>
     914:	2d e7       	ldi	r18, 0x7D	; 125
     916:	30 e0       	ldi	r19, 0x00	; 0
     918:	db 01       	movw	r26, r22
     91a:	0e 94 51 11 	call	0x22a2	; 0x22a2 <__usmulhisi3>
     91e:	8b 01       	movw	r16, r22
     920:	9c 01       	movw	r18, r24
     922:	99 23       	and	r25, r25
     924:	24 f4       	brge	.+8      	; 0x92e <genFreq+0x74>
     926:	0d 5f       	subi	r16, 0xFD	; 253
     928:	1f 4f       	sbci	r17, 0xFF	; 255
     92a:	2f 4f       	sbci	r18, 0xFF	; 255
     92c:	3f 4f       	sbci	r19, 0xFF	; 255
     92e:	c9 01       	movw	r24, r18
     930:	b8 01       	movw	r22, r16
     932:	95 95       	asr	r25
     934:	87 95       	ror	r24
     936:	77 95       	ror	r23
     938:	67 95       	ror	r22
     93a:	95 95       	asr	r25
     93c:	87 95       	ror	r24
     93e:	77 95       	ror	r23
     940:	67 95       	ror	r22
     942:	c1 2c       	mov	r12, r1
     944:	d1 2c       	mov	r13, r1
     946:	0f 2e       	mov	r0, r31
     948:	fd e5       	ldi	r31, 0x5D	; 93
     94a:	ef 2e       	mov	r14, r31
     94c:	f4 e0       	ldi	r31, 0x04	; 4
     94e:	ff 2e       	mov	r15, r31
     950:	f0 2d       	mov	r31, r0
     952:	8e 01       	movw	r16, r28
     954:	20 e0       	ldi	r18, 0x00	; 0
     956:	30 e0       	ldi	r19, 0x00	; 0
     958:	a9 01       	movw	r20, r18
     95a:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <async>
		SYNC(self->write, togglePin, self->bit);
     95e:	4c 81       	ldd	r20, Y+4	; 0x04
     960:	50 e0       	ldi	r21, 0x00	; 0
     962:	62 e5       	ldi	r22, 0x52	; 82
     964:	74 e0       	ldi	r23, 0x04	; 4
     966:	8a 85       	ldd	r24, Y+10	; 0x0a
     968:	9b 85       	ldd	r25, Y+11	; 0x0b
     96a:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <sync>
	}
     96e:	df 91       	pop	r29
     970:	cf 91       	pop	r28
     972:	1f 91       	pop	r17
     974:	0f 91       	pop	r16
     976:	ff 90       	pop	r15
     978:	ef 90       	pop	r14
     97a:	df 90       	pop	r13
     97c:	cf 90       	pop	r12
     97e:	08 95       	ret

00000980 <setFrequency>:
#include <avr/io.h>
#include "PulseGen.h"
#include <util/delay.h>

void setFrequency(PulseGen *self, int freq) {
	self->frequency = freq;
     980:	fc 01       	movw	r30, r24
     982:	77 83       	std	Z+7, r23	; 0x07
     984:	66 83       	std	Z+6, r22	; 0x06
     986:	08 95       	ret

00000988 <save>:
}

// Saves the freq
void save(PulseGen *self) {
	self->saved_freq = self->frequency;
     988:	fc 01       	movw	r30, r24
     98a:	26 81       	ldd	r18, Z+6	; 0x06
     98c:	37 81       	ldd	r19, Z+7	; 0x07
     98e:	31 87       	std	Z+9, r19	; 0x09
     990:	20 87       	std	Z+8, r18	; 0x08
     992:	08 95       	ret

00000994 <restore>:
}

// Restores freq to last saved
void restore(PulseGen *self) {
	self->frequency = self->saved_freq;
     994:	fc 01       	movw	r30, r24
     996:	20 85       	ldd	r18, Z+8	; 0x08
     998:	31 85       	ldd	r19, Z+9	; 0x09
     99a:	37 83       	std	Z+7, r19	; 0x07
     99c:	26 83       	std	Z+6, r18	; 0x06
     99e:	08 95       	ret

000009a0 <getFrequency>:
}

int getFrequency(PulseGen *self) {
	return self->frequency;
}
     9a0:	fc 01       	movw	r30, r24
     9a2:	86 81       	ldd	r24, Z+6	; 0x06
     9a4:	97 81       	ldd	r25, Z+7	; 0x07
     9a6:	08 95       	ret

000009a8 <initialize>:
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
}
     9a8:	cf 93       	push	r28
     9aa:	df 93       	push	r29
     9ac:	00 d0       	rcall	.+0      	; 0x9ae <initialize+0x6>
     9ae:	00 d0       	rcall	.+0      	; 0x9b0 <initialize+0x8>
     9b0:	cd b7       	in	r28, 0x3d	; 61
     9b2:	de b7       	in	r29, 0x3e	; 62
     9b4:	83 e5       	ldi	r24, 0x53	; 83
     9b6:	92 e0       	ldi	r25, 0x02	; 2
     9b8:	23 e3       	ldi	r18, 0x33	; 51
     9ba:	33 e0       	ldi	r19, 0x03	; 3
     9bc:	fc 01       	movw	r30, r24
     9be:	70 97       	sbiw	r30, 0x10	; 16
     9c0:	91 83       	std	Z+1, r25	; 0x01
     9c2:	80 83       	st	Z, r24
     9c4:	40 96       	adiw	r24, 0x10	; 16
     9c6:	82 17       	cp	r24, r18
     9c8:	93 07       	cpc	r25, r19
     9ca:	c1 f7       	brne	.-16     	; 0x9bc <initialize+0x14>
     9cc:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <messages+0xe1>
     9d0:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <messages+0xe0>
     9d4:	ee e8       	ldi	r30, 0x8E	; 142
     9d6:	f1 e0       	ldi	r31, 0x01	; 1
     9d8:	8b ea       	ldi	r24, 0xAB	; 171
     9da:	91 e0       	ldi	r25, 0x01	; 1
     9dc:	91 83       	std	Z+1, r25	; 0x01
     9de:	80 83       	st	Z, r24
     9e0:	88 ec       	ldi	r24, 0xC8	; 200
     9e2:	91 e0       	ldi	r25, 0x01	; 1
     9e4:	96 8f       	std	Z+30, r25	; 0x1e
     9e6:	85 8f       	std	Z+29, r24	; 0x1d
     9e8:	a5 ee       	ldi	r26, 0xE5	; 229
     9ea:	b1 e0       	ldi	r27, 0x01	; 1
     9ec:	b3 af       	std	Z+59, r27	; 0x3b
     9ee:	a2 af       	std	Z+58, r26	; 0x3a
     9f0:	1d 92       	st	X+, r1
     9f2:	1c 92       	st	X, r1
     9f4:	fa 83       	std	Y+2, r31	; 0x02
     9f6:	e9 83       	std	Y+1, r30	; 0x01
     9f8:	ef e8       	ldi	r30, 0x8F	; 143
     9fa:	f3 e0       	ldi	r31, 0x03	; 3
     9fc:	fc 83       	std	Y+4, r31	; 0x04
     9fe:	eb 83       	std	Y+3, r30	; 0x03
     a00:	89 81       	ldd	r24, Y+1	; 0x01
     a02:	9a 81       	ldd	r25, Y+2	; 0x02
     a04:	06 96       	adiw	r24, 0x06	; 6
     a06:	0e 94 9d 11 	call	0x233a	; 0x233a <setjmp>
     a0a:	8b 81       	ldd	r24, Y+3	; 0x03
     a0c:	9c 81       	ldd	r25, Y+4	; 0x04
     a0e:	e9 81       	ldd	r30, Y+1	; 0x01
     a10:	fa 81       	ldd	r31, Y+2	; 0x02
     a12:	97 8b       	std	Z+23, r25	; 0x17
     a14:	86 8b       	std	Z+22, r24	; 0x16
     a16:	91 8f       	std	Z+25, r25	; 0x19
     a18:	80 8f       	std	Z+24, r24	; 0x18
     a1a:	84 e7       	ldi	r24, 0x74	; 116
     a1c:	90 e1       	ldi	r25, 0x10	; 16
     a1e:	94 8f       	std	Z+28, r25	; 0x1c
     a20:	83 8f       	std	Z+27, r24	; 0x1b
     a22:	15 82       	std	Z+5, r1	; 0x05
     a24:	14 82       	std	Z+4, r1	; 0x04
     a26:	7d 96       	adiw	r30, 0x1d	; 29
     a28:	fa 83       	std	Y+2, r31	; 0x02
     a2a:	e9 83       	std	Y+1, r30	; 0x01
     a2c:	eb 81       	ldd	r30, Y+3	; 0x03
     a2e:	fc 81       	ldd	r31, Y+4	; 0x04
     a30:	e0 5a       	subi	r30, 0xA0	; 160
     a32:	ff 4f       	sbci	r31, 0xFF	; 255
     a34:	fc 83       	std	Y+4, r31	; 0x04
     a36:	eb 83       	std	Y+3, r30	; 0x03
     a38:	89 81       	ldd	r24, Y+1	; 0x01
     a3a:	9a 81       	ldd	r25, Y+2	; 0x02
     a3c:	82 50       	subi	r24, 0x02	; 2
     a3e:	92 40       	sbci	r25, 0x02	; 2
     a40:	f9 f6       	brne	.-66     	; 0xa00 <initialize+0x58>
     a42:	e6 e2       	ldi	r30, 0x26	; 38
     a44:	f2 e0       	ldi	r31, 0x02	; 2
     a46:	11 82       	std	Z+1, r1	; 0x01
     a48:	10 82       	st	Z, r1
     a4a:	15 82       	std	Z+5, r1	; 0x05
     a4c:	14 82       	std	Z+4, r1	; 0x04
     a4e:	13 82       	std	Z+3, r1	; 0x03
     a50:	12 82       	std	Z+2, r1	; 0x02
     a52:	e1 e6       	ldi	r30, 0x61	; 97
     a54:	f0 e0       	ldi	r31, 0x00	; 0
     a56:	80 e8       	ldi	r24, 0x80	; 128
     a58:	80 83       	st	Z, r24
     a5a:	10 82       	st	Z, r1
     a5c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     a60:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     a64:	84 e0       	ldi	r24, 0x04	; 4
     a66:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
     a70:	0f 90       	pop	r0
     a72:	0f 90       	pop	r0
     a74:	0f 90       	pop	r0
     a76:	0f 90       	pop	r0
     a78:	df 91       	pop	r29
     a7a:	cf 91       	pop	r28
     a7c:	08 95       	ret

00000a7e <dispatch>:
     a7e:	cf 93       	push	r28
     a80:	df 93       	push	r29
     a82:	00 d0       	rcall	.+0      	; 0xa84 <dispatch+0x6>
     a84:	cd b7       	in	r28, 0x3d	; 61
     a86:	de b7       	in	r29, 0x3e	; 62
     a88:	9a 83       	std	Y+2, r25	; 0x02
     a8a:	89 83       	std	Y+1, r24	; 0x01
     a8c:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <current>
     a90:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <current+0x1>
     a94:	06 96       	adiw	r24, 0x06	; 6
     a96:	0e 94 9d 11 	call	0x233a	; 0x233a <setjmp>
     a9a:	89 2b       	or	r24, r25
     a9c:	59 f4       	brne	.+22     	; 0xab4 <dispatch+0x36>
     a9e:	89 81       	ldd	r24, Y+1	; 0x01
     aa0:	9a 81       	ldd	r25, Y+2	; 0x02
     aa2:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <current+0x1>
     aa6:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <current>
     aaa:	61 e0       	ldi	r22, 0x01	; 1
     aac:	70 e0       	ldi	r23, 0x00	; 0
     aae:	06 96       	adiw	r24, 0x06	; 6
     ab0:	0e 94 bd 11 	call	0x237a	; 0x237a <longjmp>
     ab4:	0f 90       	pop	r0
     ab6:	0f 90       	pop	r0
     ab8:	df 91       	pop	r29
     aba:	cf 91       	pop	r28
     abc:	08 95       	ret

00000abe <schedule>:
     abe:	0f 93       	push	r16
     ac0:	1f 93       	push	r17
     ac2:	cf 93       	push	r28
     ac4:	df 93       	push	r29
     ac6:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <msgQ>
     aca:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <msgQ+0x1>
     ace:	30 97       	sbiw	r30, 0x00	; 0
     ad0:	61 f1       	breq	.+88     	; 0xb2a <schedule+0x6c>
     ad2:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <threadPool>
     ad6:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <threadPool+0x1>
     ada:	00 97       	sbiw	r24, 0x00	; 0
     adc:	31 f1       	breq	.+76     	; 0xb2a <schedule+0x6c>
     ade:	c0 91 52 01 	lds	r28, 0x0152	; 0x800152 <activeStack>
     ae2:	d0 91 53 01 	lds	r29, 0x0153	; 0x800153 <activeStack+0x1>
     ae6:	aa 81       	ldd	r26, Y+2	; 0x02
     ae8:	bb 81       	ldd	r27, Y+3	; 0x03
     aea:	10 97       	sbiw	r26, 0x00	; 0
     aec:	79 f0       	breq	.+30     	; 0xb0c <schedule+0x4e>
     aee:	46 81       	ldd	r20, Z+6	; 0x06
     af0:	57 81       	ldd	r21, Z+7	; 0x07
     af2:	60 85       	ldd	r22, Z+8	; 0x08
     af4:	71 85       	ldd	r23, Z+9	; 0x09
     af6:	16 96       	adiw	r26, 0x06	; 6
     af8:	0d 91       	ld	r16, X+
     afa:	1d 91       	ld	r17, X+
     afc:	2d 91       	ld	r18, X+
     afe:	3c 91       	ld	r19, X
     b00:	19 97       	sbiw	r26, 0x09	; 9
     b02:	40 1b       	sub	r20, r16
     b04:	51 0b       	sbc	r21, r17
     b06:	62 0b       	sbc	r22, r18
     b08:	73 0b       	sbc	r23, r19
     b0a:	7a f4       	brpl	.+30     	; 0xb2a <schedule+0x6c>
     b0c:	fc 01       	movw	r30, r24
     b0e:	20 81       	ld	r18, Z
     b10:	31 81       	ldd	r19, Z+1	; 0x01
     b12:	30 93 55 01 	sts	0x0155, r19	; 0x800155 <threadPool+0x1>
     b16:	20 93 54 01 	sts	0x0154, r18	; 0x800154 <threadPool>
     b1a:	d1 83       	std	Z+1, r29	; 0x01
     b1c:	c0 83       	st	Z, r28
     b1e:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <activeStack+0x1>
     b22:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <activeStack>
     b26:	0e 94 3f 05 	call	0xa7e	; 0xa7e <dispatch>
     b2a:	df 91       	pop	r29
     b2c:	cf 91       	pop	r28
     b2e:	1f 91       	pop	r17
     b30:	0f 91       	pop	r16
     b32:	08 95       	ret

00000b34 <__vector_1>:
     b34:	1f 92       	push	r1
     b36:	0f 92       	push	r0
     b38:	0f b6       	in	r0, 0x3f	; 63
     b3a:	0f 92       	push	r0
     b3c:	11 24       	eor	r1, r1
     b3e:	2f 93       	push	r18
     b40:	3f 93       	push	r19
     b42:	4f 93       	push	r20
     b44:	5f 93       	push	r21
     b46:	6f 93       	push	r22
     b48:	7f 93       	push	r23
     b4a:	8f 93       	push	r24
     b4c:	9f 93       	push	r25
     b4e:	af 93       	push	r26
     b50:	bf 93       	push	r27
     b52:	ef 93       	push	r30
     b54:	ff 93       	push	r31
     b56:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <overflows>
     b5a:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <overflows+0x1>
     b5e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     b62:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     b66:	c9 01       	movw	r24, r18
     b68:	03 2e       	mov	r0, r19
     b6a:	00 0c       	add	r0, r0
     b6c:	aa 0b       	sbc	r26, r26
     b6e:	bb 0b       	sbc	r27, r27
     b70:	dc 01       	movw	r26, r24
     b72:	99 27       	eor	r25, r25
     b74:	88 27       	eor	r24, r24
     b76:	60 e0       	ldi	r22, 0x00	; 0
     b78:	70 e0       	ldi	r23, 0x00	; 0
     b7a:	84 2b       	or	r24, r20
     b7c:	95 2b       	or	r25, r21
     b7e:	a6 2b       	or	r26, r22
     b80:	b7 2b       	or	r27, r23
     b82:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
     b86:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
     b8a:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
     b8e:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
     b92:	b0 9b       	sbis	0x16, 0	; 22
     b94:	1b c0       	rjmp	.+54     	; 0xbcc <__vector_1+0x98>
     b96:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     b9a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     b9e:	c9 01       	movw	r24, r18
     ba0:	01 96       	adiw	r24, 0x01	; 1
     ba2:	09 2e       	mov	r0, r25
     ba4:	00 0c       	add	r0, r0
     ba6:	aa 0b       	sbc	r26, r26
     ba8:	bb 0b       	sbc	r27, r27
     baa:	dc 01       	movw	r26, r24
     bac:	99 27       	eor	r25, r25
     bae:	88 27       	eor	r24, r24
     bb0:	60 e0       	ldi	r22, 0x00	; 0
     bb2:	70 e0       	ldi	r23, 0x00	; 0
     bb4:	84 2b       	or	r24, r20
     bb6:	95 2b       	or	r25, r21
     bb8:	a6 2b       	or	r26, r22
     bba:	b7 2b       	or	r27, r23
     bbc:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
     bc0:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
     bc4:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
     bc8:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
     bcc:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <mtable>
     bd0:	f0 91 03 02 	lds	r31, 0x0203	; 0x800203 <mtable+0x1>
     bd4:	30 97       	sbiw	r30, 0x00	; 0
     bd6:	39 f0       	breq	.+14     	; 0xbe6 <__vector_1+0xb2>
     bd8:	60 e0       	ldi	r22, 0x00	; 0
     bda:	70 e0       	ldi	r23, 0x00	; 0
     bdc:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <otable>
     be0:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <otable+0x1>
     be4:	09 95       	icall
     be6:	0e 94 5f 05 	call	0xabe	; 0xabe <schedule>
     bea:	ff 91       	pop	r31
     bec:	ef 91       	pop	r30
     bee:	bf 91       	pop	r27
     bf0:	af 91       	pop	r26
     bf2:	9f 91       	pop	r25
     bf4:	8f 91       	pop	r24
     bf6:	7f 91       	pop	r23
     bf8:	6f 91       	pop	r22
     bfa:	5f 91       	pop	r21
     bfc:	4f 91       	pop	r20
     bfe:	3f 91       	pop	r19
     c00:	2f 91       	pop	r18
     c02:	0f 90       	pop	r0
     c04:	0f be       	out	0x3f, r0	; 63
     c06:	0f 90       	pop	r0
     c08:	1f 90       	pop	r1
     c0a:	18 95       	reti

00000c0c <__vector_2>:
     c0c:	1f 92       	push	r1
     c0e:	0f 92       	push	r0
     c10:	0f b6       	in	r0, 0x3f	; 63
     c12:	0f 92       	push	r0
     c14:	11 24       	eor	r1, r1
     c16:	2f 93       	push	r18
     c18:	3f 93       	push	r19
     c1a:	4f 93       	push	r20
     c1c:	5f 93       	push	r21
     c1e:	6f 93       	push	r22
     c20:	7f 93       	push	r23
     c22:	8f 93       	push	r24
     c24:	9f 93       	push	r25
     c26:	af 93       	push	r26
     c28:	bf 93       	push	r27
     c2a:	ef 93       	push	r30
     c2c:	ff 93       	push	r31
     c2e:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <overflows>
     c32:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <overflows+0x1>
     c36:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     c3a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     c3e:	c9 01       	movw	r24, r18
     c40:	03 2e       	mov	r0, r19
     c42:	00 0c       	add	r0, r0
     c44:	aa 0b       	sbc	r26, r26
     c46:	bb 0b       	sbc	r27, r27
     c48:	dc 01       	movw	r26, r24
     c4a:	99 27       	eor	r25, r25
     c4c:	88 27       	eor	r24, r24
     c4e:	60 e0       	ldi	r22, 0x00	; 0
     c50:	70 e0       	ldi	r23, 0x00	; 0
     c52:	84 2b       	or	r24, r20
     c54:	95 2b       	or	r25, r21
     c56:	a6 2b       	or	r26, r22
     c58:	b7 2b       	or	r27, r23
     c5a:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
     c5e:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
     c62:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
     c66:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
     c6a:	b0 9b       	sbis	0x16, 0	; 22
     c6c:	1b c0       	rjmp	.+54     	; 0xca4 <__vector_2+0x98>
     c6e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     c72:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     c76:	c9 01       	movw	r24, r18
     c78:	01 96       	adiw	r24, 0x01	; 1
     c7a:	09 2e       	mov	r0, r25
     c7c:	00 0c       	add	r0, r0
     c7e:	aa 0b       	sbc	r26, r26
     c80:	bb 0b       	sbc	r27, r27
     c82:	dc 01       	movw	r26, r24
     c84:	99 27       	eor	r25, r25
     c86:	88 27       	eor	r24, r24
     c88:	60 e0       	ldi	r22, 0x00	; 0
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	84 2b       	or	r24, r20
     c8e:	95 2b       	or	r25, r21
     c90:	a6 2b       	or	r26, r22
     c92:	b7 2b       	or	r27, r23
     c94:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
     c98:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
     c9c:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
     ca0:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
     ca4:	e0 91 04 02 	lds	r30, 0x0204	; 0x800204 <mtable+0x2>
     ca8:	f0 91 05 02 	lds	r31, 0x0205	; 0x800205 <mtable+0x3>
     cac:	30 97       	sbiw	r30, 0x00	; 0
     cae:	39 f0       	breq	.+14     	; 0xcbe <__vector_2+0xb2>
     cb0:	61 e0       	ldi	r22, 0x01	; 1
     cb2:	70 e0       	ldi	r23, 0x00	; 0
     cb4:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <otable+0x2>
     cb8:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <otable+0x3>
     cbc:	09 95       	icall
     cbe:	0e 94 5f 05 	call	0xabe	; 0xabe <schedule>
     cc2:	ff 91       	pop	r31
     cc4:	ef 91       	pop	r30
     cc6:	bf 91       	pop	r27
     cc8:	af 91       	pop	r26
     cca:	9f 91       	pop	r25
     ccc:	8f 91       	pop	r24
     cce:	7f 91       	pop	r23
     cd0:	6f 91       	pop	r22
     cd2:	5f 91       	pop	r21
     cd4:	4f 91       	pop	r20
     cd6:	3f 91       	pop	r19
     cd8:	2f 91       	pop	r18
     cda:	0f 90       	pop	r0
     cdc:	0f be       	out	0x3f, r0	; 63
     cde:	0f 90       	pop	r0
     ce0:	1f 90       	pop	r1
     ce2:	18 95       	reti

00000ce4 <__vector_3>:
     ce4:	1f 92       	push	r1
     ce6:	0f 92       	push	r0
     ce8:	0f b6       	in	r0, 0x3f	; 63
     cea:	0f 92       	push	r0
     cec:	11 24       	eor	r1, r1
     cee:	2f 93       	push	r18
     cf0:	3f 93       	push	r19
     cf2:	4f 93       	push	r20
     cf4:	5f 93       	push	r21
     cf6:	6f 93       	push	r22
     cf8:	7f 93       	push	r23
     cfa:	8f 93       	push	r24
     cfc:	9f 93       	push	r25
     cfe:	af 93       	push	r26
     d00:	bf 93       	push	r27
     d02:	ef 93       	push	r30
     d04:	ff 93       	push	r31
     d06:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <overflows>
     d0a:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <overflows+0x1>
     d0e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     d12:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     d16:	c9 01       	movw	r24, r18
     d18:	03 2e       	mov	r0, r19
     d1a:	00 0c       	add	r0, r0
     d1c:	aa 0b       	sbc	r26, r26
     d1e:	bb 0b       	sbc	r27, r27
     d20:	dc 01       	movw	r26, r24
     d22:	99 27       	eor	r25, r25
     d24:	88 27       	eor	r24, r24
     d26:	60 e0       	ldi	r22, 0x00	; 0
     d28:	70 e0       	ldi	r23, 0x00	; 0
     d2a:	84 2b       	or	r24, r20
     d2c:	95 2b       	or	r25, r21
     d2e:	a6 2b       	or	r26, r22
     d30:	b7 2b       	or	r27, r23
     d32:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
     d36:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
     d3a:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
     d3e:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
     d42:	b0 9b       	sbis	0x16, 0	; 22
     d44:	1b c0       	rjmp	.+54     	; 0xd7c <__vector_3+0x98>
     d46:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     d4a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     d4e:	c9 01       	movw	r24, r18
     d50:	01 96       	adiw	r24, 0x01	; 1
     d52:	09 2e       	mov	r0, r25
     d54:	00 0c       	add	r0, r0
     d56:	aa 0b       	sbc	r26, r26
     d58:	bb 0b       	sbc	r27, r27
     d5a:	dc 01       	movw	r26, r24
     d5c:	99 27       	eor	r25, r25
     d5e:	88 27       	eor	r24, r24
     d60:	60 e0       	ldi	r22, 0x00	; 0
     d62:	70 e0       	ldi	r23, 0x00	; 0
     d64:	84 2b       	or	r24, r20
     d66:	95 2b       	or	r25, r21
     d68:	a6 2b       	or	r26, r22
     d6a:	b7 2b       	or	r27, r23
     d6c:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
     d70:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
     d74:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
     d78:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
     d7c:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <mtable+0x4>
     d80:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <mtable+0x5>
     d84:	30 97       	sbiw	r30, 0x00	; 0
     d86:	39 f0       	breq	.+14     	; 0xd96 <__vector_3+0xb2>
     d88:	62 e0       	ldi	r22, 0x02	; 2
     d8a:	70 e0       	ldi	r23, 0x00	; 0
     d8c:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <otable+0x4>
     d90:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <otable+0x5>
     d94:	09 95       	icall
     d96:	0e 94 5f 05 	call	0xabe	; 0xabe <schedule>
     d9a:	ff 91       	pop	r31
     d9c:	ef 91       	pop	r30
     d9e:	bf 91       	pop	r27
     da0:	af 91       	pop	r26
     da2:	9f 91       	pop	r25
     da4:	8f 91       	pop	r24
     da6:	7f 91       	pop	r23
     da8:	6f 91       	pop	r22
     daa:	5f 91       	pop	r21
     dac:	4f 91       	pop	r20
     dae:	3f 91       	pop	r19
     db0:	2f 91       	pop	r18
     db2:	0f 90       	pop	r0
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	0f 90       	pop	r0
     db8:	1f 90       	pop	r1
     dba:	18 95       	reti

00000dbc <__vector_4>:
     dbc:	1f 92       	push	r1
     dbe:	0f 92       	push	r0
     dc0:	0f b6       	in	r0, 0x3f	; 63
     dc2:	0f 92       	push	r0
     dc4:	11 24       	eor	r1, r1
     dc6:	2f 93       	push	r18
     dc8:	3f 93       	push	r19
     dca:	4f 93       	push	r20
     dcc:	5f 93       	push	r21
     dce:	6f 93       	push	r22
     dd0:	7f 93       	push	r23
     dd2:	8f 93       	push	r24
     dd4:	9f 93       	push	r25
     dd6:	af 93       	push	r26
     dd8:	bf 93       	push	r27
     dda:	ef 93       	push	r30
     ddc:	ff 93       	push	r31
     dde:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <overflows>
     de2:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <overflows+0x1>
     de6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     dea:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     dee:	c9 01       	movw	r24, r18
     df0:	03 2e       	mov	r0, r19
     df2:	00 0c       	add	r0, r0
     df4:	aa 0b       	sbc	r26, r26
     df6:	bb 0b       	sbc	r27, r27
     df8:	dc 01       	movw	r26, r24
     dfa:	99 27       	eor	r25, r25
     dfc:	88 27       	eor	r24, r24
     dfe:	60 e0       	ldi	r22, 0x00	; 0
     e00:	70 e0       	ldi	r23, 0x00	; 0
     e02:	84 2b       	or	r24, r20
     e04:	95 2b       	or	r25, r21
     e06:	a6 2b       	or	r26, r22
     e08:	b7 2b       	or	r27, r23
     e0a:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
     e0e:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
     e12:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
     e16:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
     e1a:	b0 9b       	sbis	0x16, 0	; 22
     e1c:	1b c0       	rjmp	.+54     	; 0xe54 <__vector_4+0x98>
     e1e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     e22:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     e26:	c9 01       	movw	r24, r18
     e28:	01 96       	adiw	r24, 0x01	; 1
     e2a:	09 2e       	mov	r0, r25
     e2c:	00 0c       	add	r0, r0
     e2e:	aa 0b       	sbc	r26, r26
     e30:	bb 0b       	sbc	r27, r27
     e32:	dc 01       	movw	r26, r24
     e34:	99 27       	eor	r25, r25
     e36:	88 27       	eor	r24, r24
     e38:	60 e0       	ldi	r22, 0x00	; 0
     e3a:	70 e0       	ldi	r23, 0x00	; 0
     e3c:	84 2b       	or	r24, r20
     e3e:	95 2b       	or	r25, r21
     e40:	a6 2b       	or	r26, r22
     e42:	b7 2b       	or	r27, r23
     e44:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
     e48:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
     e4c:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
     e50:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
     e54:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <mtable+0x6>
     e58:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <mtable+0x7>
     e5c:	30 97       	sbiw	r30, 0x00	; 0
     e5e:	39 f0       	breq	.+14     	; 0xe6e <__vector_4+0xb2>
     e60:	63 e0       	ldi	r22, 0x03	; 3
     e62:	70 e0       	ldi	r23, 0x00	; 0
     e64:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <otable+0x6>
     e68:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <otable+0x7>
     e6c:	09 95       	icall
     e6e:	0e 94 5f 05 	call	0xabe	; 0xabe <schedule>
     e72:	ff 91       	pop	r31
     e74:	ef 91       	pop	r30
     e76:	bf 91       	pop	r27
     e78:	af 91       	pop	r26
     e7a:	9f 91       	pop	r25
     e7c:	8f 91       	pop	r24
     e7e:	7f 91       	pop	r23
     e80:	6f 91       	pop	r22
     e82:	5f 91       	pop	r21
     e84:	4f 91       	pop	r20
     e86:	3f 91       	pop	r19
     e88:	2f 91       	pop	r18
     e8a:	0f 90       	pop	r0
     e8c:	0f be       	out	0x3f, r0	; 63
     e8e:	0f 90       	pop	r0
     e90:	1f 90       	pop	r1
     e92:	18 95       	reti

00000e94 <__vector_5>:
     e94:	1f 92       	push	r1
     e96:	0f 92       	push	r0
     e98:	0f b6       	in	r0, 0x3f	; 63
     e9a:	0f 92       	push	r0
     e9c:	11 24       	eor	r1, r1
     e9e:	2f 93       	push	r18
     ea0:	3f 93       	push	r19
     ea2:	4f 93       	push	r20
     ea4:	5f 93       	push	r21
     ea6:	6f 93       	push	r22
     ea8:	7f 93       	push	r23
     eaa:	8f 93       	push	r24
     eac:	9f 93       	push	r25
     eae:	af 93       	push	r26
     eb0:	bf 93       	push	r27
     eb2:	ef 93       	push	r30
     eb4:	ff 93       	push	r31
     eb6:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <overflows>
     eba:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <overflows+0x1>
     ebe:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     ec2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     ec6:	c9 01       	movw	r24, r18
     ec8:	03 2e       	mov	r0, r19
     eca:	00 0c       	add	r0, r0
     ecc:	aa 0b       	sbc	r26, r26
     ece:	bb 0b       	sbc	r27, r27
     ed0:	dc 01       	movw	r26, r24
     ed2:	99 27       	eor	r25, r25
     ed4:	88 27       	eor	r24, r24
     ed6:	60 e0       	ldi	r22, 0x00	; 0
     ed8:	70 e0       	ldi	r23, 0x00	; 0
     eda:	84 2b       	or	r24, r20
     edc:	95 2b       	or	r25, r21
     ede:	a6 2b       	or	r26, r22
     ee0:	b7 2b       	or	r27, r23
     ee2:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
     ee6:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
     eea:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
     eee:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
     ef2:	b0 9b       	sbis	0x16, 0	; 22
     ef4:	1b c0       	rjmp	.+54     	; 0xf2c <__vector_5+0x98>
     ef6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     efa:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     efe:	c9 01       	movw	r24, r18
     f00:	01 96       	adiw	r24, 0x01	; 1
     f02:	09 2e       	mov	r0, r25
     f04:	00 0c       	add	r0, r0
     f06:	aa 0b       	sbc	r26, r26
     f08:	bb 0b       	sbc	r27, r27
     f0a:	dc 01       	movw	r26, r24
     f0c:	99 27       	eor	r25, r25
     f0e:	88 27       	eor	r24, r24
     f10:	60 e0       	ldi	r22, 0x00	; 0
     f12:	70 e0       	ldi	r23, 0x00	; 0
     f14:	84 2b       	or	r24, r20
     f16:	95 2b       	or	r25, r21
     f18:	a6 2b       	or	r26, r22
     f1a:	b7 2b       	or	r27, r23
     f1c:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
     f20:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
     f24:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
     f28:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
     f2c:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <mtable+0x8>
     f30:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <mtable+0x9>
     f34:	30 97       	sbiw	r30, 0x00	; 0
     f36:	39 f0       	breq	.+14     	; 0xf46 <__vector_5+0xb2>
     f38:	64 e0       	ldi	r22, 0x04	; 4
     f3a:	70 e0       	ldi	r23, 0x00	; 0
     f3c:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <otable+0x8>
     f40:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <otable+0x9>
     f44:	09 95       	icall
     f46:	0e 94 5f 05 	call	0xabe	; 0xabe <schedule>
     f4a:	ff 91       	pop	r31
     f4c:	ef 91       	pop	r30
     f4e:	bf 91       	pop	r27
     f50:	af 91       	pop	r26
     f52:	9f 91       	pop	r25
     f54:	8f 91       	pop	r24
     f56:	7f 91       	pop	r23
     f58:	6f 91       	pop	r22
     f5a:	5f 91       	pop	r21
     f5c:	4f 91       	pop	r20
     f5e:	3f 91       	pop	r19
     f60:	2f 91       	pop	r18
     f62:	0f 90       	pop	r0
     f64:	0f be       	out	0x3f, r0	; 63
     f66:	0f 90       	pop	r0
     f68:	1f 90       	pop	r1
     f6a:	18 95       	reti

00000f6c <__vector_10>:
     f6c:	1f 92       	push	r1
     f6e:	0f 92       	push	r0
     f70:	0f b6       	in	r0, 0x3f	; 63
     f72:	0f 92       	push	r0
     f74:	11 24       	eor	r1, r1
     f76:	2f 93       	push	r18
     f78:	3f 93       	push	r19
     f7a:	4f 93       	push	r20
     f7c:	5f 93       	push	r21
     f7e:	6f 93       	push	r22
     f80:	7f 93       	push	r23
     f82:	8f 93       	push	r24
     f84:	9f 93       	push	r25
     f86:	af 93       	push	r26
     f88:	bf 93       	push	r27
     f8a:	ef 93       	push	r30
     f8c:	ff 93       	push	r31
     f8e:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <overflows>
     f92:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <overflows+0x1>
     f96:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     f9a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     f9e:	c9 01       	movw	r24, r18
     fa0:	03 2e       	mov	r0, r19
     fa2:	00 0c       	add	r0, r0
     fa4:	aa 0b       	sbc	r26, r26
     fa6:	bb 0b       	sbc	r27, r27
     fa8:	dc 01       	movw	r26, r24
     faa:	99 27       	eor	r25, r25
     fac:	88 27       	eor	r24, r24
     fae:	60 e0       	ldi	r22, 0x00	; 0
     fb0:	70 e0       	ldi	r23, 0x00	; 0
     fb2:	84 2b       	or	r24, r20
     fb4:	95 2b       	or	r25, r21
     fb6:	a6 2b       	or	r26, r22
     fb8:	b7 2b       	or	r27, r23
     fba:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
     fbe:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
     fc2:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
     fc6:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
     fca:	b0 9b       	sbis	0x16, 0	; 22
     fcc:	1b c0       	rjmp	.+54     	; 0x1004 <__vector_10+0x98>
     fce:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     fd2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     fd6:	c9 01       	movw	r24, r18
     fd8:	01 96       	adiw	r24, 0x01	; 1
     fda:	09 2e       	mov	r0, r25
     fdc:	00 0c       	add	r0, r0
     fde:	aa 0b       	sbc	r26, r26
     fe0:	bb 0b       	sbc	r27, r27
     fe2:	dc 01       	movw	r26, r24
     fe4:	99 27       	eor	r25, r25
     fe6:	88 27       	eor	r24, r24
     fe8:	60 e0       	ldi	r22, 0x00	; 0
     fea:	70 e0       	ldi	r23, 0x00	; 0
     fec:	84 2b       	or	r24, r20
     fee:	95 2b       	or	r25, r21
     ff0:	a6 2b       	or	r26, r22
     ff2:	b7 2b       	or	r27, r23
     ff4:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
     ff8:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
     ffc:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    1000:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    1004:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <mtable+0xa>
    1008:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <mtable+0xb>
    100c:	30 97       	sbiw	r30, 0x00	; 0
    100e:	39 f0       	breq	.+14     	; 0x101e <__vector_10+0xb2>
    1010:	65 e0       	ldi	r22, 0x05	; 5
    1012:	70 e0       	ldi	r23, 0x00	; 0
    1014:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <otable+0xa>
    1018:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <otable+0xb>
    101c:	09 95       	icall
    101e:	0e 94 5f 05 	call	0xabe	; 0xabe <schedule>
    1022:	ff 91       	pop	r31
    1024:	ef 91       	pop	r30
    1026:	bf 91       	pop	r27
    1028:	af 91       	pop	r26
    102a:	9f 91       	pop	r25
    102c:	8f 91       	pop	r24
    102e:	7f 91       	pop	r23
    1030:	6f 91       	pop	r22
    1032:	5f 91       	pop	r21
    1034:	4f 91       	pop	r20
    1036:	3f 91       	pop	r19
    1038:	2f 91       	pop	r18
    103a:	0f 90       	pop	r0
    103c:	0f be       	out	0x3f, r0	; 63
    103e:	0f 90       	pop	r0
    1040:	1f 90       	pop	r1
    1042:	18 95       	reti

00001044 <__vector_11>:
    1044:	1f 92       	push	r1
    1046:	0f 92       	push	r0
    1048:	0f b6       	in	r0, 0x3f	; 63
    104a:	0f 92       	push	r0
    104c:	11 24       	eor	r1, r1
    104e:	2f 93       	push	r18
    1050:	3f 93       	push	r19
    1052:	4f 93       	push	r20
    1054:	5f 93       	push	r21
    1056:	6f 93       	push	r22
    1058:	7f 93       	push	r23
    105a:	8f 93       	push	r24
    105c:	9f 93       	push	r25
    105e:	af 93       	push	r26
    1060:	bf 93       	push	r27
    1062:	ef 93       	push	r30
    1064:	ff 93       	push	r31
    1066:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <overflows>
    106a:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <overflows+0x1>
    106e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1072:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1076:	c9 01       	movw	r24, r18
    1078:	03 2e       	mov	r0, r19
    107a:	00 0c       	add	r0, r0
    107c:	aa 0b       	sbc	r26, r26
    107e:	bb 0b       	sbc	r27, r27
    1080:	dc 01       	movw	r26, r24
    1082:	99 27       	eor	r25, r25
    1084:	88 27       	eor	r24, r24
    1086:	60 e0       	ldi	r22, 0x00	; 0
    1088:	70 e0       	ldi	r23, 0x00	; 0
    108a:	84 2b       	or	r24, r20
    108c:	95 2b       	or	r25, r21
    108e:	a6 2b       	or	r26, r22
    1090:	b7 2b       	or	r27, r23
    1092:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    1096:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    109a:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    109e:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    10a2:	b0 9b       	sbis	0x16, 0	; 22
    10a4:	1b c0       	rjmp	.+54     	; 0x10dc <__vector_11+0x98>
    10a6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    10aa:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    10ae:	c9 01       	movw	r24, r18
    10b0:	01 96       	adiw	r24, 0x01	; 1
    10b2:	09 2e       	mov	r0, r25
    10b4:	00 0c       	add	r0, r0
    10b6:	aa 0b       	sbc	r26, r26
    10b8:	bb 0b       	sbc	r27, r27
    10ba:	dc 01       	movw	r26, r24
    10bc:	99 27       	eor	r25, r25
    10be:	88 27       	eor	r24, r24
    10c0:	60 e0       	ldi	r22, 0x00	; 0
    10c2:	70 e0       	ldi	r23, 0x00	; 0
    10c4:	84 2b       	or	r24, r20
    10c6:	95 2b       	or	r25, r21
    10c8:	a6 2b       	or	r26, r22
    10ca:	b7 2b       	or	r27, r23
    10cc:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    10d0:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    10d4:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    10d8:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    10dc:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <mtable+0xc>
    10e0:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <mtable+0xd>
    10e4:	30 97       	sbiw	r30, 0x00	; 0
    10e6:	39 f0       	breq	.+14     	; 0x10f6 <__vector_11+0xb2>
    10e8:	66 e0       	ldi	r22, 0x06	; 6
    10ea:	70 e0       	ldi	r23, 0x00	; 0
    10ec:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <otable+0xc>
    10f0:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <otable+0xd>
    10f4:	09 95       	icall
    10f6:	0e 94 5f 05 	call	0xabe	; 0xabe <schedule>
    10fa:	ff 91       	pop	r31
    10fc:	ef 91       	pop	r30
    10fe:	bf 91       	pop	r27
    1100:	af 91       	pop	r26
    1102:	9f 91       	pop	r25
    1104:	8f 91       	pop	r24
    1106:	7f 91       	pop	r23
    1108:	6f 91       	pop	r22
    110a:	5f 91       	pop	r21
    110c:	4f 91       	pop	r20
    110e:	3f 91       	pop	r19
    1110:	2f 91       	pop	r18
    1112:	0f 90       	pop	r0
    1114:	0f be       	out	0x3f, r0	; 63
    1116:	0f 90       	pop	r0
    1118:	1f 90       	pop	r1
    111a:	18 95       	reti

0000111c <__vector_12>:
    111c:	1f 92       	push	r1
    111e:	0f 92       	push	r0
    1120:	0f b6       	in	r0, 0x3f	; 63
    1122:	0f 92       	push	r0
    1124:	11 24       	eor	r1, r1
    1126:	2f 93       	push	r18
    1128:	3f 93       	push	r19
    112a:	4f 93       	push	r20
    112c:	5f 93       	push	r21
    112e:	6f 93       	push	r22
    1130:	7f 93       	push	r23
    1132:	8f 93       	push	r24
    1134:	9f 93       	push	r25
    1136:	af 93       	push	r26
    1138:	bf 93       	push	r27
    113a:	ef 93       	push	r30
    113c:	ff 93       	push	r31
    113e:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <overflows>
    1142:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <overflows+0x1>
    1146:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    114a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    114e:	c9 01       	movw	r24, r18
    1150:	03 2e       	mov	r0, r19
    1152:	00 0c       	add	r0, r0
    1154:	aa 0b       	sbc	r26, r26
    1156:	bb 0b       	sbc	r27, r27
    1158:	dc 01       	movw	r26, r24
    115a:	99 27       	eor	r25, r25
    115c:	88 27       	eor	r24, r24
    115e:	60 e0       	ldi	r22, 0x00	; 0
    1160:	70 e0       	ldi	r23, 0x00	; 0
    1162:	84 2b       	or	r24, r20
    1164:	95 2b       	or	r25, r21
    1166:	a6 2b       	or	r26, r22
    1168:	b7 2b       	or	r27, r23
    116a:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    116e:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    1172:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    1176:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    117a:	b0 9b       	sbis	0x16, 0	; 22
    117c:	1b c0       	rjmp	.+54     	; 0x11b4 <__vector_12+0x98>
    117e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1182:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1186:	c9 01       	movw	r24, r18
    1188:	01 96       	adiw	r24, 0x01	; 1
    118a:	09 2e       	mov	r0, r25
    118c:	00 0c       	add	r0, r0
    118e:	aa 0b       	sbc	r26, r26
    1190:	bb 0b       	sbc	r27, r27
    1192:	dc 01       	movw	r26, r24
    1194:	99 27       	eor	r25, r25
    1196:	88 27       	eor	r24, r24
    1198:	60 e0       	ldi	r22, 0x00	; 0
    119a:	70 e0       	ldi	r23, 0x00	; 0
    119c:	84 2b       	or	r24, r20
    119e:	95 2b       	or	r25, r21
    11a0:	a6 2b       	or	r26, r22
    11a2:	b7 2b       	or	r27, r23
    11a4:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    11a8:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    11ac:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    11b0:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    11b4:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <mtable+0xe>
    11b8:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <mtable+0xf>
    11bc:	30 97       	sbiw	r30, 0x00	; 0
    11be:	39 f0       	breq	.+14     	; 0x11ce <__vector_12+0xb2>
    11c0:	67 e0       	ldi	r22, 0x07	; 7
    11c2:	70 e0       	ldi	r23, 0x00	; 0
    11c4:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <otable+0xe>
    11c8:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <otable+0xf>
    11cc:	09 95       	icall
    11ce:	0e 94 5f 05 	call	0xabe	; 0xabe <schedule>
    11d2:	ff 91       	pop	r31
    11d4:	ef 91       	pop	r30
    11d6:	bf 91       	pop	r27
    11d8:	af 91       	pop	r26
    11da:	9f 91       	pop	r25
    11dc:	8f 91       	pop	r24
    11de:	7f 91       	pop	r23
    11e0:	6f 91       	pop	r22
    11e2:	5f 91       	pop	r21
    11e4:	4f 91       	pop	r20
    11e6:	3f 91       	pop	r19
    11e8:	2f 91       	pop	r18
    11ea:	0f 90       	pop	r0
    11ec:	0f be       	out	0x3f, r0	; 63
    11ee:	0f 90       	pop	r0
    11f0:	1f 90       	pop	r1
    11f2:	18 95       	reti

000011f4 <__vector_13>:
    11f4:	1f 92       	push	r1
    11f6:	0f 92       	push	r0
    11f8:	0f b6       	in	r0, 0x3f	; 63
    11fa:	0f 92       	push	r0
    11fc:	11 24       	eor	r1, r1
    11fe:	2f 93       	push	r18
    1200:	3f 93       	push	r19
    1202:	4f 93       	push	r20
    1204:	5f 93       	push	r21
    1206:	6f 93       	push	r22
    1208:	7f 93       	push	r23
    120a:	8f 93       	push	r24
    120c:	9f 93       	push	r25
    120e:	af 93       	push	r26
    1210:	bf 93       	push	r27
    1212:	ef 93       	push	r30
    1214:	ff 93       	push	r31
    1216:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <overflows>
    121a:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <overflows+0x1>
    121e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1222:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1226:	c9 01       	movw	r24, r18
    1228:	03 2e       	mov	r0, r19
    122a:	00 0c       	add	r0, r0
    122c:	aa 0b       	sbc	r26, r26
    122e:	bb 0b       	sbc	r27, r27
    1230:	dc 01       	movw	r26, r24
    1232:	99 27       	eor	r25, r25
    1234:	88 27       	eor	r24, r24
    1236:	60 e0       	ldi	r22, 0x00	; 0
    1238:	70 e0       	ldi	r23, 0x00	; 0
    123a:	84 2b       	or	r24, r20
    123c:	95 2b       	or	r25, r21
    123e:	a6 2b       	or	r26, r22
    1240:	b7 2b       	or	r27, r23
    1242:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    1246:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    124a:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    124e:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    1252:	b0 9b       	sbis	0x16, 0	; 22
    1254:	1b c0       	rjmp	.+54     	; 0x128c <__vector_13+0x98>
    1256:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    125a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    125e:	c9 01       	movw	r24, r18
    1260:	01 96       	adiw	r24, 0x01	; 1
    1262:	09 2e       	mov	r0, r25
    1264:	00 0c       	add	r0, r0
    1266:	aa 0b       	sbc	r26, r26
    1268:	bb 0b       	sbc	r27, r27
    126a:	dc 01       	movw	r26, r24
    126c:	99 27       	eor	r25, r25
    126e:	88 27       	eor	r24, r24
    1270:	60 e0       	ldi	r22, 0x00	; 0
    1272:	70 e0       	ldi	r23, 0x00	; 0
    1274:	84 2b       	or	r24, r20
    1276:	95 2b       	or	r25, r21
    1278:	a6 2b       	or	r26, r22
    127a:	b7 2b       	or	r27, r23
    127c:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    1280:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    1284:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    1288:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    128c:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <mtable+0x10>
    1290:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <mtable+0x11>
    1294:	30 97       	sbiw	r30, 0x00	; 0
    1296:	39 f0       	breq	.+14     	; 0x12a6 <__vector_13+0xb2>
    1298:	68 e0       	ldi	r22, 0x08	; 8
    129a:	70 e0       	ldi	r23, 0x00	; 0
    129c:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <otable+0x10>
    12a0:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <otable+0x11>
    12a4:	09 95       	icall
    12a6:	0e 94 5f 05 	call	0xabe	; 0xabe <schedule>
    12aa:	ff 91       	pop	r31
    12ac:	ef 91       	pop	r30
    12ae:	bf 91       	pop	r27
    12b0:	af 91       	pop	r26
    12b2:	9f 91       	pop	r25
    12b4:	8f 91       	pop	r24
    12b6:	7f 91       	pop	r23
    12b8:	6f 91       	pop	r22
    12ba:	5f 91       	pop	r21
    12bc:	4f 91       	pop	r20
    12be:	3f 91       	pop	r19
    12c0:	2f 91       	pop	r18
    12c2:	0f 90       	pop	r0
    12c4:	0f be       	out	0x3f, r0	; 63
    12c6:	0f 90       	pop	r0
    12c8:	1f 90       	pop	r1
    12ca:	18 95       	reti

000012cc <__vector_14>:
    12cc:	1f 92       	push	r1
    12ce:	0f 92       	push	r0
    12d0:	0f b6       	in	r0, 0x3f	; 63
    12d2:	0f 92       	push	r0
    12d4:	11 24       	eor	r1, r1
    12d6:	2f 93       	push	r18
    12d8:	3f 93       	push	r19
    12da:	4f 93       	push	r20
    12dc:	5f 93       	push	r21
    12de:	6f 93       	push	r22
    12e0:	7f 93       	push	r23
    12e2:	8f 93       	push	r24
    12e4:	9f 93       	push	r25
    12e6:	af 93       	push	r26
    12e8:	bf 93       	push	r27
    12ea:	ef 93       	push	r30
    12ec:	ff 93       	push	r31
    12ee:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <overflows>
    12f2:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <overflows+0x1>
    12f6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    12fa:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    12fe:	c9 01       	movw	r24, r18
    1300:	03 2e       	mov	r0, r19
    1302:	00 0c       	add	r0, r0
    1304:	aa 0b       	sbc	r26, r26
    1306:	bb 0b       	sbc	r27, r27
    1308:	dc 01       	movw	r26, r24
    130a:	99 27       	eor	r25, r25
    130c:	88 27       	eor	r24, r24
    130e:	60 e0       	ldi	r22, 0x00	; 0
    1310:	70 e0       	ldi	r23, 0x00	; 0
    1312:	84 2b       	or	r24, r20
    1314:	95 2b       	or	r25, r21
    1316:	a6 2b       	or	r26, r22
    1318:	b7 2b       	or	r27, r23
    131a:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    131e:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    1322:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    1326:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    132a:	b0 9b       	sbis	0x16, 0	; 22
    132c:	1b c0       	rjmp	.+54     	; 0x1364 <__vector_14+0x98>
    132e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1332:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1336:	c9 01       	movw	r24, r18
    1338:	01 96       	adiw	r24, 0x01	; 1
    133a:	09 2e       	mov	r0, r25
    133c:	00 0c       	add	r0, r0
    133e:	aa 0b       	sbc	r26, r26
    1340:	bb 0b       	sbc	r27, r27
    1342:	dc 01       	movw	r26, r24
    1344:	99 27       	eor	r25, r25
    1346:	88 27       	eor	r24, r24
    1348:	60 e0       	ldi	r22, 0x00	; 0
    134a:	70 e0       	ldi	r23, 0x00	; 0
    134c:	84 2b       	or	r24, r20
    134e:	95 2b       	or	r25, r21
    1350:	a6 2b       	or	r26, r22
    1352:	b7 2b       	or	r27, r23
    1354:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    1358:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    135c:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    1360:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    1364:	e0 91 14 02 	lds	r30, 0x0214	; 0x800214 <mtable+0x12>
    1368:	f0 91 15 02 	lds	r31, 0x0215	; 0x800215 <mtable+0x13>
    136c:	30 97       	sbiw	r30, 0x00	; 0
    136e:	39 f0       	breq	.+14     	; 0x137e <__vector_14+0xb2>
    1370:	69 e0       	ldi	r22, 0x09	; 9
    1372:	70 e0       	ldi	r23, 0x00	; 0
    1374:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <otable+0x12>
    1378:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <otable+0x13>
    137c:	09 95       	icall
    137e:	0e 94 5f 05 	call	0xabe	; 0xabe <schedule>
    1382:	ff 91       	pop	r31
    1384:	ef 91       	pop	r30
    1386:	bf 91       	pop	r27
    1388:	af 91       	pop	r26
    138a:	9f 91       	pop	r25
    138c:	8f 91       	pop	r24
    138e:	7f 91       	pop	r23
    1390:	6f 91       	pop	r22
    1392:	5f 91       	pop	r21
    1394:	4f 91       	pop	r20
    1396:	3f 91       	pop	r19
    1398:	2f 91       	pop	r18
    139a:	0f 90       	pop	r0
    139c:	0f be       	out	0x3f, r0	; 63
    139e:	0f 90       	pop	r0
    13a0:	1f 90       	pop	r1
    13a2:	18 95       	reti

000013a4 <__vector_15>:
    13a4:	1f 92       	push	r1
    13a6:	0f 92       	push	r0
    13a8:	0f b6       	in	r0, 0x3f	; 63
    13aa:	0f 92       	push	r0
    13ac:	11 24       	eor	r1, r1
    13ae:	2f 93       	push	r18
    13b0:	3f 93       	push	r19
    13b2:	4f 93       	push	r20
    13b4:	5f 93       	push	r21
    13b6:	6f 93       	push	r22
    13b8:	7f 93       	push	r23
    13ba:	8f 93       	push	r24
    13bc:	9f 93       	push	r25
    13be:	af 93       	push	r26
    13c0:	bf 93       	push	r27
    13c2:	ef 93       	push	r30
    13c4:	ff 93       	push	r31
    13c6:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <overflows>
    13ca:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <overflows+0x1>
    13ce:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    13d2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    13d6:	c9 01       	movw	r24, r18
    13d8:	03 2e       	mov	r0, r19
    13da:	00 0c       	add	r0, r0
    13dc:	aa 0b       	sbc	r26, r26
    13de:	bb 0b       	sbc	r27, r27
    13e0:	dc 01       	movw	r26, r24
    13e2:	99 27       	eor	r25, r25
    13e4:	88 27       	eor	r24, r24
    13e6:	60 e0       	ldi	r22, 0x00	; 0
    13e8:	70 e0       	ldi	r23, 0x00	; 0
    13ea:	84 2b       	or	r24, r20
    13ec:	95 2b       	or	r25, r21
    13ee:	a6 2b       	or	r26, r22
    13f0:	b7 2b       	or	r27, r23
    13f2:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    13f6:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    13fa:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    13fe:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    1402:	b0 9b       	sbis	0x16, 0	; 22
    1404:	1b c0       	rjmp	.+54     	; 0x143c <__vector_15+0x98>
    1406:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    140a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    140e:	c9 01       	movw	r24, r18
    1410:	01 96       	adiw	r24, 0x01	; 1
    1412:	09 2e       	mov	r0, r25
    1414:	00 0c       	add	r0, r0
    1416:	aa 0b       	sbc	r26, r26
    1418:	bb 0b       	sbc	r27, r27
    141a:	dc 01       	movw	r26, r24
    141c:	99 27       	eor	r25, r25
    141e:	88 27       	eor	r24, r24
    1420:	60 e0       	ldi	r22, 0x00	; 0
    1422:	70 e0       	ldi	r23, 0x00	; 0
    1424:	84 2b       	or	r24, r20
    1426:	95 2b       	or	r25, r21
    1428:	a6 2b       	or	r26, r22
    142a:	b7 2b       	or	r27, r23
    142c:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    1430:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    1434:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    1438:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    143c:	e0 91 16 02 	lds	r30, 0x0216	; 0x800216 <mtable+0x14>
    1440:	f0 91 17 02 	lds	r31, 0x0217	; 0x800217 <mtable+0x15>
    1444:	30 97       	sbiw	r30, 0x00	; 0
    1446:	39 f0       	breq	.+14     	; 0x1456 <__vector_15+0xb2>
    1448:	6a e0       	ldi	r22, 0x0A	; 10
    144a:	70 e0       	ldi	r23, 0x00	; 0
    144c:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <otable+0x14>
    1450:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <otable+0x15>
    1454:	09 95       	icall
    1456:	0e 94 5f 05 	call	0xabe	; 0xabe <schedule>
    145a:	ff 91       	pop	r31
    145c:	ef 91       	pop	r30
    145e:	bf 91       	pop	r27
    1460:	af 91       	pop	r26
    1462:	9f 91       	pop	r25
    1464:	8f 91       	pop	r24
    1466:	7f 91       	pop	r23
    1468:	6f 91       	pop	r22
    146a:	5f 91       	pop	r21
    146c:	4f 91       	pop	r20
    146e:	3f 91       	pop	r19
    1470:	2f 91       	pop	r18
    1472:	0f 90       	pop	r0
    1474:	0f be       	out	0x3f, r0	; 63
    1476:	0f 90       	pop	r0
    1478:	1f 90       	pop	r1
    147a:	18 95       	reti

0000147c <__vector_16>:
    147c:	1f 92       	push	r1
    147e:	0f 92       	push	r0
    1480:	0f b6       	in	r0, 0x3f	; 63
    1482:	0f 92       	push	r0
    1484:	11 24       	eor	r1, r1
    1486:	2f 93       	push	r18
    1488:	3f 93       	push	r19
    148a:	4f 93       	push	r20
    148c:	5f 93       	push	r21
    148e:	6f 93       	push	r22
    1490:	7f 93       	push	r23
    1492:	8f 93       	push	r24
    1494:	9f 93       	push	r25
    1496:	af 93       	push	r26
    1498:	bf 93       	push	r27
    149a:	ef 93       	push	r30
    149c:	ff 93       	push	r31
    149e:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <overflows>
    14a2:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <overflows+0x1>
    14a6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    14aa:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    14ae:	c9 01       	movw	r24, r18
    14b0:	03 2e       	mov	r0, r19
    14b2:	00 0c       	add	r0, r0
    14b4:	aa 0b       	sbc	r26, r26
    14b6:	bb 0b       	sbc	r27, r27
    14b8:	dc 01       	movw	r26, r24
    14ba:	99 27       	eor	r25, r25
    14bc:	88 27       	eor	r24, r24
    14be:	60 e0       	ldi	r22, 0x00	; 0
    14c0:	70 e0       	ldi	r23, 0x00	; 0
    14c2:	84 2b       	or	r24, r20
    14c4:	95 2b       	or	r25, r21
    14c6:	a6 2b       	or	r26, r22
    14c8:	b7 2b       	or	r27, r23
    14ca:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    14ce:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    14d2:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    14d6:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    14da:	b0 9b       	sbis	0x16, 0	; 22
    14dc:	1b c0       	rjmp	.+54     	; 0x1514 <__vector_16+0x98>
    14de:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    14e2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    14e6:	c9 01       	movw	r24, r18
    14e8:	01 96       	adiw	r24, 0x01	; 1
    14ea:	09 2e       	mov	r0, r25
    14ec:	00 0c       	add	r0, r0
    14ee:	aa 0b       	sbc	r26, r26
    14f0:	bb 0b       	sbc	r27, r27
    14f2:	dc 01       	movw	r26, r24
    14f4:	99 27       	eor	r25, r25
    14f6:	88 27       	eor	r24, r24
    14f8:	60 e0       	ldi	r22, 0x00	; 0
    14fa:	70 e0       	ldi	r23, 0x00	; 0
    14fc:	84 2b       	or	r24, r20
    14fe:	95 2b       	or	r25, r21
    1500:	a6 2b       	or	r26, r22
    1502:	b7 2b       	or	r27, r23
    1504:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    1508:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    150c:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    1510:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    1514:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <mtable+0x16>
    1518:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <mtable+0x17>
    151c:	30 97       	sbiw	r30, 0x00	; 0
    151e:	39 f0       	breq	.+14     	; 0x152e <__vector_16+0xb2>
    1520:	6b e0       	ldi	r22, 0x0B	; 11
    1522:	70 e0       	ldi	r23, 0x00	; 0
    1524:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <otable+0x16>
    1528:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <otable+0x17>
    152c:	09 95       	icall
    152e:	0e 94 5f 05 	call	0xabe	; 0xabe <schedule>
    1532:	ff 91       	pop	r31
    1534:	ef 91       	pop	r30
    1536:	bf 91       	pop	r27
    1538:	af 91       	pop	r26
    153a:	9f 91       	pop	r25
    153c:	8f 91       	pop	r24
    153e:	7f 91       	pop	r23
    1540:	6f 91       	pop	r22
    1542:	5f 91       	pop	r21
    1544:	4f 91       	pop	r20
    1546:	3f 91       	pop	r19
    1548:	2f 91       	pop	r18
    154a:	0f 90       	pop	r0
    154c:	0f be       	out	0x3f, r0	; 63
    154e:	0f 90       	pop	r0
    1550:	1f 90       	pop	r1
    1552:	18 95       	reti

00001554 <__vector_17>:
    1554:	1f 92       	push	r1
    1556:	0f 92       	push	r0
    1558:	0f b6       	in	r0, 0x3f	; 63
    155a:	0f 92       	push	r0
    155c:	11 24       	eor	r1, r1
    155e:	2f 93       	push	r18
    1560:	3f 93       	push	r19
    1562:	4f 93       	push	r20
    1564:	5f 93       	push	r21
    1566:	6f 93       	push	r22
    1568:	7f 93       	push	r23
    156a:	8f 93       	push	r24
    156c:	9f 93       	push	r25
    156e:	af 93       	push	r26
    1570:	bf 93       	push	r27
    1572:	ef 93       	push	r30
    1574:	ff 93       	push	r31
    1576:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <overflows>
    157a:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <overflows+0x1>
    157e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1582:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1586:	c9 01       	movw	r24, r18
    1588:	03 2e       	mov	r0, r19
    158a:	00 0c       	add	r0, r0
    158c:	aa 0b       	sbc	r26, r26
    158e:	bb 0b       	sbc	r27, r27
    1590:	dc 01       	movw	r26, r24
    1592:	99 27       	eor	r25, r25
    1594:	88 27       	eor	r24, r24
    1596:	60 e0       	ldi	r22, 0x00	; 0
    1598:	70 e0       	ldi	r23, 0x00	; 0
    159a:	84 2b       	or	r24, r20
    159c:	95 2b       	or	r25, r21
    159e:	a6 2b       	or	r26, r22
    15a0:	b7 2b       	or	r27, r23
    15a2:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    15a6:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    15aa:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    15ae:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    15b2:	b0 9b       	sbis	0x16, 0	; 22
    15b4:	1b c0       	rjmp	.+54     	; 0x15ec <__vector_17+0x98>
    15b6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    15ba:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    15be:	c9 01       	movw	r24, r18
    15c0:	01 96       	adiw	r24, 0x01	; 1
    15c2:	09 2e       	mov	r0, r25
    15c4:	00 0c       	add	r0, r0
    15c6:	aa 0b       	sbc	r26, r26
    15c8:	bb 0b       	sbc	r27, r27
    15ca:	dc 01       	movw	r26, r24
    15cc:	99 27       	eor	r25, r25
    15ce:	88 27       	eor	r24, r24
    15d0:	60 e0       	ldi	r22, 0x00	; 0
    15d2:	70 e0       	ldi	r23, 0x00	; 0
    15d4:	84 2b       	or	r24, r20
    15d6:	95 2b       	or	r25, r21
    15d8:	a6 2b       	or	r26, r22
    15da:	b7 2b       	or	r27, r23
    15dc:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    15e0:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    15e4:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    15e8:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    15ec:	e0 91 1a 02 	lds	r30, 0x021A	; 0x80021a <mtable+0x18>
    15f0:	f0 91 1b 02 	lds	r31, 0x021B	; 0x80021b <mtable+0x19>
    15f4:	30 97       	sbiw	r30, 0x00	; 0
    15f6:	39 f0       	breq	.+14     	; 0x1606 <__vector_17+0xb2>
    15f8:	6c e0       	ldi	r22, 0x0C	; 12
    15fa:	70 e0       	ldi	r23, 0x00	; 0
    15fc:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <otable+0x18>
    1600:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <otable+0x19>
    1604:	09 95       	icall
    1606:	0e 94 5f 05 	call	0xabe	; 0xabe <schedule>
    160a:	ff 91       	pop	r31
    160c:	ef 91       	pop	r30
    160e:	bf 91       	pop	r27
    1610:	af 91       	pop	r26
    1612:	9f 91       	pop	r25
    1614:	8f 91       	pop	r24
    1616:	7f 91       	pop	r23
    1618:	6f 91       	pop	r22
    161a:	5f 91       	pop	r21
    161c:	4f 91       	pop	r20
    161e:	3f 91       	pop	r19
    1620:	2f 91       	pop	r18
    1622:	0f 90       	pop	r0
    1624:	0f be       	out	0x3f, r0	; 63
    1626:	0f 90       	pop	r0
    1628:	1f 90       	pop	r1
    162a:	18 95       	reti

0000162c <__vector_18>:
    162c:	1f 92       	push	r1
    162e:	0f 92       	push	r0
    1630:	0f b6       	in	r0, 0x3f	; 63
    1632:	0f 92       	push	r0
    1634:	11 24       	eor	r1, r1
    1636:	2f 93       	push	r18
    1638:	3f 93       	push	r19
    163a:	4f 93       	push	r20
    163c:	5f 93       	push	r21
    163e:	6f 93       	push	r22
    1640:	7f 93       	push	r23
    1642:	8f 93       	push	r24
    1644:	9f 93       	push	r25
    1646:	af 93       	push	r26
    1648:	bf 93       	push	r27
    164a:	ef 93       	push	r30
    164c:	ff 93       	push	r31
    164e:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <overflows>
    1652:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <overflows+0x1>
    1656:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    165a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    165e:	c9 01       	movw	r24, r18
    1660:	03 2e       	mov	r0, r19
    1662:	00 0c       	add	r0, r0
    1664:	aa 0b       	sbc	r26, r26
    1666:	bb 0b       	sbc	r27, r27
    1668:	dc 01       	movw	r26, r24
    166a:	99 27       	eor	r25, r25
    166c:	88 27       	eor	r24, r24
    166e:	60 e0       	ldi	r22, 0x00	; 0
    1670:	70 e0       	ldi	r23, 0x00	; 0
    1672:	84 2b       	or	r24, r20
    1674:	95 2b       	or	r25, r21
    1676:	a6 2b       	or	r26, r22
    1678:	b7 2b       	or	r27, r23
    167a:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    167e:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    1682:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    1686:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    168a:	b0 9b       	sbis	0x16, 0	; 22
    168c:	1b c0       	rjmp	.+54     	; 0x16c4 <__vector_18+0x98>
    168e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1692:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1696:	c9 01       	movw	r24, r18
    1698:	01 96       	adiw	r24, 0x01	; 1
    169a:	09 2e       	mov	r0, r25
    169c:	00 0c       	add	r0, r0
    169e:	aa 0b       	sbc	r26, r26
    16a0:	bb 0b       	sbc	r27, r27
    16a2:	dc 01       	movw	r26, r24
    16a4:	99 27       	eor	r25, r25
    16a6:	88 27       	eor	r24, r24
    16a8:	60 e0       	ldi	r22, 0x00	; 0
    16aa:	70 e0       	ldi	r23, 0x00	; 0
    16ac:	84 2b       	or	r24, r20
    16ae:	95 2b       	or	r25, r21
    16b0:	a6 2b       	or	r26, r22
    16b2:	b7 2b       	or	r27, r23
    16b4:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    16b8:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    16bc:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    16c0:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    16c4:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <mtable+0x1a>
    16c8:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <mtable+0x1b>
    16cc:	30 97       	sbiw	r30, 0x00	; 0
    16ce:	39 f0       	breq	.+14     	; 0x16de <__vector_18+0xb2>
    16d0:	6d e0       	ldi	r22, 0x0D	; 13
    16d2:	70 e0       	ldi	r23, 0x00	; 0
    16d4:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <otable+0x1a>
    16d8:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <otable+0x1b>
    16dc:	09 95       	icall
    16de:	0e 94 5f 05 	call	0xabe	; 0xabe <schedule>
    16e2:	ff 91       	pop	r31
    16e4:	ef 91       	pop	r30
    16e6:	bf 91       	pop	r27
    16e8:	af 91       	pop	r26
    16ea:	9f 91       	pop	r25
    16ec:	8f 91       	pop	r24
    16ee:	7f 91       	pop	r23
    16f0:	6f 91       	pop	r22
    16f2:	5f 91       	pop	r21
    16f4:	4f 91       	pop	r20
    16f6:	3f 91       	pop	r19
    16f8:	2f 91       	pop	r18
    16fa:	0f 90       	pop	r0
    16fc:	0f be       	out	0x3f, r0	; 63
    16fe:	0f 90       	pop	r0
    1700:	1f 90       	pop	r1
    1702:	18 95       	reti

00001704 <__vector_19>:
    1704:	1f 92       	push	r1
    1706:	0f 92       	push	r0
    1708:	0f b6       	in	r0, 0x3f	; 63
    170a:	0f 92       	push	r0
    170c:	11 24       	eor	r1, r1
    170e:	2f 93       	push	r18
    1710:	3f 93       	push	r19
    1712:	4f 93       	push	r20
    1714:	5f 93       	push	r21
    1716:	6f 93       	push	r22
    1718:	7f 93       	push	r23
    171a:	8f 93       	push	r24
    171c:	9f 93       	push	r25
    171e:	af 93       	push	r26
    1720:	bf 93       	push	r27
    1722:	ef 93       	push	r30
    1724:	ff 93       	push	r31
    1726:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <overflows>
    172a:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <overflows+0x1>
    172e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1732:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1736:	c9 01       	movw	r24, r18
    1738:	03 2e       	mov	r0, r19
    173a:	00 0c       	add	r0, r0
    173c:	aa 0b       	sbc	r26, r26
    173e:	bb 0b       	sbc	r27, r27
    1740:	dc 01       	movw	r26, r24
    1742:	99 27       	eor	r25, r25
    1744:	88 27       	eor	r24, r24
    1746:	60 e0       	ldi	r22, 0x00	; 0
    1748:	70 e0       	ldi	r23, 0x00	; 0
    174a:	84 2b       	or	r24, r20
    174c:	95 2b       	or	r25, r21
    174e:	a6 2b       	or	r26, r22
    1750:	b7 2b       	or	r27, r23
    1752:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    1756:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    175a:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    175e:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    1762:	b0 9b       	sbis	0x16, 0	; 22
    1764:	1b c0       	rjmp	.+54     	; 0x179c <__vector_19+0x98>
    1766:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    176a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    176e:	c9 01       	movw	r24, r18
    1770:	01 96       	adiw	r24, 0x01	; 1
    1772:	09 2e       	mov	r0, r25
    1774:	00 0c       	add	r0, r0
    1776:	aa 0b       	sbc	r26, r26
    1778:	bb 0b       	sbc	r27, r27
    177a:	dc 01       	movw	r26, r24
    177c:	99 27       	eor	r25, r25
    177e:	88 27       	eor	r24, r24
    1780:	60 e0       	ldi	r22, 0x00	; 0
    1782:	70 e0       	ldi	r23, 0x00	; 0
    1784:	84 2b       	or	r24, r20
    1786:	95 2b       	or	r25, r21
    1788:	a6 2b       	or	r26, r22
    178a:	b7 2b       	or	r27, r23
    178c:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    1790:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    1794:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    1798:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    179c:	e0 91 1e 02 	lds	r30, 0x021E	; 0x80021e <mtable+0x1c>
    17a0:	f0 91 1f 02 	lds	r31, 0x021F	; 0x80021f <mtable+0x1d>
    17a4:	30 97       	sbiw	r30, 0x00	; 0
    17a6:	39 f0       	breq	.+14     	; 0x17b6 <__vector_19+0xb2>
    17a8:	6e e0       	ldi	r22, 0x0E	; 14
    17aa:	70 e0       	ldi	r23, 0x00	; 0
    17ac:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <otable+0x1c>
    17b0:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <otable+0x1d>
    17b4:	09 95       	icall
    17b6:	0e 94 5f 05 	call	0xabe	; 0xabe <schedule>
    17ba:	ff 91       	pop	r31
    17bc:	ef 91       	pop	r30
    17be:	bf 91       	pop	r27
    17c0:	af 91       	pop	r26
    17c2:	9f 91       	pop	r25
    17c4:	8f 91       	pop	r24
    17c6:	7f 91       	pop	r23
    17c8:	6f 91       	pop	r22
    17ca:	5f 91       	pop	r21
    17cc:	4f 91       	pop	r20
    17ce:	3f 91       	pop	r19
    17d0:	2f 91       	pop	r18
    17d2:	0f 90       	pop	r0
    17d4:	0f be       	out	0x3f, r0	; 63
    17d6:	0f 90       	pop	r0
    17d8:	1f 90       	pop	r1
    17da:	18 95       	reti

000017dc <__vector_20>:
    17dc:	1f 92       	push	r1
    17de:	0f 92       	push	r0
    17e0:	0f b6       	in	r0, 0x3f	; 63
    17e2:	0f 92       	push	r0
    17e4:	11 24       	eor	r1, r1
    17e6:	2f 93       	push	r18
    17e8:	3f 93       	push	r19
    17ea:	4f 93       	push	r20
    17ec:	5f 93       	push	r21
    17ee:	6f 93       	push	r22
    17f0:	7f 93       	push	r23
    17f2:	8f 93       	push	r24
    17f4:	9f 93       	push	r25
    17f6:	af 93       	push	r26
    17f8:	bf 93       	push	r27
    17fa:	ef 93       	push	r30
    17fc:	ff 93       	push	r31
    17fe:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <overflows>
    1802:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <overflows+0x1>
    1806:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    180a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    180e:	c9 01       	movw	r24, r18
    1810:	03 2e       	mov	r0, r19
    1812:	00 0c       	add	r0, r0
    1814:	aa 0b       	sbc	r26, r26
    1816:	bb 0b       	sbc	r27, r27
    1818:	dc 01       	movw	r26, r24
    181a:	99 27       	eor	r25, r25
    181c:	88 27       	eor	r24, r24
    181e:	60 e0       	ldi	r22, 0x00	; 0
    1820:	70 e0       	ldi	r23, 0x00	; 0
    1822:	84 2b       	or	r24, r20
    1824:	95 2b       	or	r25, r21
    1826:	a6 2b       	or	r26, r22
    1828:	b7 2b       	or	r27, r23
    182a:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    182e:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    1832:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    1836:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    183a:	b0 9b       	sbis	0x16, 0	; 22
    183c:	1b c0       	rjmp	.+54     	; 0x1874 <__vector_20+0x98>
    183e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1842:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1846:	c9 01       	movw	r24, r18
    1848:	01 96       	adiw	r24, 0x01	; 1
    184a:	09 2e       	mov	r0, r25
    184c:	00 0c       	add	r0, r0
    184e:	aa 0b       	sbc	r26, r26
    1850:	bb 0b       	sbc	r27, r27
    1852:	dc 01       	movw	r26, r24
    1854:	99 27       	eor	r25, r25
    1856:	88 27       	eor	r24, r24
    1858:	60 e0       	ldi	r22, 0x00	; 0
    185a:	70 e0       	ldi	r23, 0x00	; 0
    185c:	84 2b       	or	r24, r20
    185e:	95 2b       	or	r25, r21
    1860:	a6 2b       	or	r26, r22
    1862:	b7 2b       	or	r27, r23
    1864:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    1868:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    186c:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    1870:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    1874:	e0 91 20 02 	lds	r30, 0x0220	; 0x800220 <mtable+0x1e>
    1878:	f0 91 21 02 	lds	r31, 0x0221	; 0x800221 <mtable+0x1f>
    187c:	30 97       	sbiw	r30, 0x00	; 0
    187e:	39 f0       	breq	.+14     	; 0x188e <__vector_20+0xb2>
    1880:	6f e0       	ldi	r22, 0x0F	; 15
    1882:	70 e0       	ldi	r23, 0x00	; 0
    1884:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <otable+0x1e>
    1888:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <otable+0x1f>
    188c:	09 95       	icall
    188e:	0e 94 5f 05 	call	0xabe	; 0xabe <schedule>
    1892:	ff 91       	pop	r31
    1894:	ef 91       	pop	r30
    1896:	bf 91       	pop	r27
    1898:	af 91       	pop	r26
    189a:	9f 91       	pop	r25
    189c:	8f 91       	pop	r24
    189e:	7f 91       	pop	r23
    18a0:	6f 91       	pop	r22
    18a2:	5f 91       	pop	r21
    18a4:	4f 91       	pop	r20
    18a6:	3f 91       	pop	r19
    18a8:	2f 91       	pop	r18
    18aa:	0f 90       	pop	r0
    18ac:	0f be       	out	0x3f, r0	; 63
    18ae:	0f 90       	pop	r0
    18b0:	1f 90       	pop	r1
    18b2:	18 95       	reti

000018b4 <__vector_21>:
    18b4:	1f 92       	push	r1
    18b6:	0f 92       	push	r0
    18b8:	0f b6       	in	r0, 0x3f	; 63
    18ba:	0f 92       	push	r0
    18bc:	11 24       	eor	r1, r1
    18be:	2f 93       	push	r18
    18c0:	3f 93       	push	r19
    18c2:	4f 93       	push	r20
    18c4:	5f 93       	push	r21
    18c6:	6f 93       	push	r22
    18c8:	7f 93       	push	r23
    18ca:	8f 93       	push	r24
    18cc:	9f 93       	push	r25
    18ce:	af 93       	push	r26
    18d0:	bf 93       	push	r27
    18d2:	ef 93       	push	r30
    18d4:	ff 93       	push	r31
    18d6:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <overflows>
    18da:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <overflows+0x1>
    18de:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    18e2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    18e6:	c9 01       	movw	r24, r18
    18e8:	03 2e       	mov	r0, r19
    18ea:	00 0c       	add	r0, r0
    18ec:	aa 0b       	sbc	r26, r26
    18ee:	bb 0b       	sbc	r27, r27
    18f0:	dc 01       	movw	r26, r24
    18f2:	99 27       	eor	r25, r25
    18f4:	88 27       	eor	r24, r24
    18f6:	60 e0       	ldi	r22, 0x00	; 0
    18f8:	70 e0       	ldi	r23, 0x00	; 0
    18fa:	84 2b       	or	r24, r20
    18fc:	95 2b       	or	r25, r21
    18fe:	a6 2b       	or	r26, r22
    1900:	b7 2b       	or	r27, r23
    1902:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    1906:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    190a:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    190e:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    1912:	b0 9b       	sbis	0x16, 0	; 22
    1914:	1b c0       	rjmp	.+54     	; 0x194c <__vector_21+0x98>
    1916:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    191a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    191e:	c9 01       	movw	r24, r18
    1920:	01 96       	adiw	r24, 0x01	; 1
    1922:	09 2e       	mov	r0, r25
    1924:	00 0c       	add	r0, r0
    1926:	aa 0b       	sbc	r26, r26
    1928:	bb 0b       	sbc	r27, r27
    192a:	dc 01       	movw	r26, r24
    192c:	99 27       	eor	r25, r25
    192e:	88 27       	eor	r24, r24
    1930:	60 e0       	ldi	r22, 0x00	; 0
    1932:	70 e0       	ldi	r23, 0x00	; 0
    1934:	84 2b       	or	r24, r20
    1936:	95 2b       	or	r25, r21
    1938:	a6 2b       	or	r26, r22
    193a:	b7 2b       	or	r27, r23
    193c:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    1940:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    1944:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    1948:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    194c:	e0 91 22 02 	lds	r30, 0x0222	; 0x800222 <mtable+0x20>
    1950:	f0 91 23 02 	lds	r31, 0x0223	; 0x800223 <mtable+0x21>
    1954:	30 97       	sbiw	r30, 0x00	; 0
    1956:	39 f0       	breq	.+14     	; 0x1966 <__vector_21+0xb2>
    1958:	60 e1       	ldi	r22, 0x10	; 16
    195a:	70 e0       	ldi	r23, 0x00	; 0
    195c:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <otable+0x20>
    1960:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <otable+0x21>
    1964:	09 95       	icall
    1966:	0e 94 5f 05 	call	0xabe	; 0xabe <schedule>
    196a:	ff 91       	pop	r31
    196c:	ef 91       	pop	r30
    196e:	bf 91       	pop	r27
    1970:	af 91       	pop	r26
    1972:	9f 91       	pop	r25
    1974:	8f 91       	pop	r24
    1976:	7f 91       	pop	r23
    1978:	6f 91       	pop	r22
    197a:	5f 91       	pop	r21
    197c:	4f 91       	pop	r20
    197e:	3f 91       	pop	r19
    1980:	2f 91       	pop	r18
    1982:	0f 90       	pop	r0
    1984:	0f be       	out	0x3f, r0	; 63
    1986:	0f 90       	pop	r0
    1988:	1f 90       	pop	r1
    198a:	18 95       	reti

0000198c <__vector_22>:
    198c:	1f 92       	push	r1
    198e:	0f 92       	push	r0
    1990:	0f b6       	in	r0, 0x3f	; 63
    1992:	0f 92       	push	r0
    1994:	11 24       	eor	r1, r1
    1996:	2f 93       	push	r18
    1998:	3f 93       	push	r19
    199a:	4f 93       	push	r20
    199c:	5f 93       	push	r21
    199e:	6f 93       	push	r22
    19a0:	7f 93       	push	r23
    19a2:	8f 93       	push	r24
    19a4:	9f 93       	push	r25
    19a6:	af 93       	push	r26
    19a8:	bf 93       	push	r27
    19aa:	ef 93       	push	r30
    19ac:	ff 93       	push	r31
    19ae:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <overflows>
    19b2:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <overflows+0x1>
    19b6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    19ba:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    19be:	c9 01       	movw	r24, r18
    19c0:	03 2e       	mov	r0, r19
    19c2:	00 0c       	add	r0, r0
    19c4:	aa 0b       	sbc	r26, r26
    19c6:	bb 0b       	sbc	r27, r27
    19c8:	dc 01       	movw	r26, r24
    19ca:	99 27       	eor	r25, r25
    19cc:	88 27       	eor	r24, r24
    19ce:	60 e0       	ldi	r22, 0x00	; 0
    19d0:	70 e0       	ldi	r23, 0x00	; 0
    19d2:	84 2b       	or	r24, r20
    19d4:	95 2b       	or	r25, r21
    19d6:	a6 2b       	or	r26, r22
    19d8:	b7 2b       	or	r27, r23
    19da:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    19de:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    19e2:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    19e6:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    19ea:	b0 9b       	sbis	0x16, 0	; 22
    19ec:	1b c0       	rjmp	.+54     	; 0x1a24 <__vector_22+0x98>
    19ee:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    19f2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    19f6:	c9 01       	movw	r24, r18
    19f8:	01 96       	adiw	r24, 0x01	; 1
    19fa:	09 2e       	mov	r0, r25
    19fc:	00 0c       	add	r0, r0
    19fe:	aa 0b       	sbc	r26, r26
    1a00:	bb 0b       	sbc	r27, r27
    1a02:	dc 01       	movw	r26, r24
    1a04:	99 27       	eor	r25, r25
    1a06:	88 27       	eor	r24, r24
    1a08:	60 e0       	ldi	r22, 0x00	; 0
    1a0a:	70 e0       	ldi	r23, 0x00	; 0
    1a0c:	84 2b       	or	r24, r20
    1a0e:	95 2b       	or	r25, r21
    1a10:	a6 2b       	or	r26, r22
    1a12:	b7 2b       	or	r27, r23
    1a14:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    1a18:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    1a1c:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    1a20:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    1a24:	e0 91 24 02 	lds	r30, 0x0224	; 0x800224 <mtable+0x22>
    1a28:	f0 91 25 02 	lds	r31, 0x0225	; 0x800225 <mtable+0x23>
    1a2c:	30 97       	sbiw	r30, 0x00	; 0
    1a2e:	39 f0       	breq	.+14     	; 0x1a3e <__vector_22+0xb2>
    1a30:	61 e1       	ldi	r22, 0x11	; 17
    1a32:	70 e0       	ldi	r23, 0x00	; 0
    1a34:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <otable+0x22>
    1a38:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <otable+0x23>
    1a3c:	09 95       	icall
    1a3e:	0e 94 5f 05 	call	0xabe	; 0xabe <schedule>
    1a42:	ff 91       	pop	r31
    1a44:	ef 91       	pop	r30
    1a46:	bf 91       	pop	r27
    1a48:	af 91       	pop	r26
    1a4a:	9f 91       	pop	r25
    1a4c:	8f 91       	pop	r24
    1a4e:	7f 91       	pop	r23
    1a50:	6f 91       	pop	r22
    1a52:	5f 91       	pop	r21
    1a54:	4f 91       	pop	r20
    1a56:	3f 91       	pop	r19
    1a58:	2f 91       	pop	r18
    1a5a:	0f 90       	pop	r0
    1a5c:	0f be       	out	0x3f, r0	; 63
    1a5e:	0f 90       	pop	r0
    1a60:	1f 90       	pop	r1
    1a62:	18 95       	reti

00001a64 <enqueueByDeadline>:
    1a64:	ef 92       	push	r14
    1a66:	ff 92       	push	r15
    1a68:	0f 93       	push	r16
    1a6a:	1f 93       	push	r17
    1a6c:	cf 93       	push	r28
    1a6e:	df 93       	push	r29
    1a70:	7b 01       	movw	r14, r22
    1a72:	eb 01       	movw	r28, r22
    1a74:	a8 81       	ld	r26, Y
    1a76:	b9 81       	ldd	r27, Y+1	; 0x01
    1a78:	10 97       	sbiw	r26, 0x00	; 0
    1a7a:	61 f1       	breq	.+88     	; 0x1ad4 <enqueueByDeadline+0x70>
    1a7c:	fc 01       	movw	r30, r24
    1a7e:	06 81       	ldd	r16, Z+6	; 0x06
    1a80:	17 81       	ldd	r17, Z+7	; 0x07
    1a82:	20 85       	ldd	r18, Z+8	; 0x08
    1a84:	31 85       	ldd	r19, Z+9	; 0x09
    1a86:	16 96       	adiw	r26, 0x06	; 6
    1a88:	4d 91       	ld	r20, X+
    1a8a:	5d 91       	ld	r21, X+
    1a8c:	6d 91       	ld	r22, X+
    1a8e:	7c 91       	ld	r23, X
    1a90:	19 97       	sbiw	r26, 0x09	; 9
    1a92:	04 17       	cp	r16, r20
    1a94:	15 07       	cpc	r17, r21
    1a96:	26 07       	cpc	r18, r22
    1a98:	37 07       	cpc	r19, r23
    1a9a:	14 f4       	brge	.+4      	; 0x1aa0 <enqueueByDeadline+0x3c>
    1a9c:	1b c0       	rjmp	.+54     	; 0x1ad4 <enqueueByDeadline+0x70>
    1a9e:	df 01       	movw	r26, r30
    1aa0:	ed 91       	ld	r30, X+
    1aa2:	fc 91       	ld	r31, X
    1aa4:	11 97       	sbiw	r26, 0x01	; 1
    1aa6:	30 97       	sbiw	r30, 0x00	; 0
    1aa8:	49 f0       	breq	.+18     	; 0x1abc <enqueueByDeadline+0x58>
    1aaa:	46 81       	ldd	r20, Z+6	; 0x06
    1aac:	57 81       	ldd	r21, Z+7	; 0x07
    1aae:	60 85       	ldd	r22, Z+8	; 0x08
    1ab0:	71 85       	ldd	r23, Z+9	; 0x09
    1ab2:	04 17       	cp	r16, r20
    1ab4:	15 07       	cpc	r17, r21
    1ab6:	26 07       	cpc	r18, r22
    1ab8:	37 07       	cpc	r19, r23
    1aba:	8c f7       	brge	.-30     	; 0x1a9e <enqueueByDeadline+0x3a>
    1abc:	ec 01       	movw	r28, r24
    1abe:	f9 83       	std	Y+1, r31	; 0x01
    1ac0:	e8 83       	st	Y, r30
    1ac2:	10 97       	sbiw	r26, 0x00	; 0
    1ac4:	21 f4       	brne	.+8      	; 0x1ace <enqueueByDeadline+0x6a>
    1ac6:	f7 01       	movw	r30, r14
    1ac8:	91 83       	std	Z+1, r25	; 0x01
    1aca:	80 83       	st	Z, r24
    1acc:	07 c0       	rjmp	.+14     	; 0x1adc <enqueueByDeadline+0x78>
    1ace:	8d 93       	st	X+, r24
    1ad0:	9c 93       	st	X, r25
    1ad2:	04 c0       	rjmp	.+8      	; 0x1adc <enqueueByDeadline+0x78>
    1ad4:	ec 01       	movw	r28, r24
    1ad6:	b9 83       	std	Y+1, r27	; 0x01
    1ad8:	a8 83       	st	Y, r26
    1ada:	f5 cf       	rjmp	.-22     	; 0x1ac6 <enqueueByDeadline+0x62>
    1adc:	df 91       	pop	r29
    1ade:	cf 91       	pop	r28
    1ae0:	1f 91       	pop	r17
    1ae2:	0f 91       	pop	r16
    1ae4:	ff 90       	pop	r15
    1ae6:	ef 90       	pop	r14
    1ae8:	08 95       	ret

00001aea <enqueueByBaseline>:
    1aea:	ef 92       	push	r14
    1aec:	ff 92       	push	r15
    1aee:	0f 93       	push	r16
    1af0:	1f 93       	push	r17
    1af2:	cf 93       	push	r28
    1af4:	df 93       	push	r29
    1af6:	7b 01       	movw	r14, r22
    1af8:	eb 01       	movw	r28, r22
    1afa:	a8 81       	ld	r26, Y
    1afc:	b9 81       	ldd	r27, Y+1	; 0x01
    1afe:	10 97       	sbiw	r26, 0x00	; 0
    1b00:	61 f1       	breq	.+88     	; 0x1b5a <enqueueByBaseline+0x70>
    1b02:	fc 01       	movw	r30, r24
    1b04:	02 81       	ldd	r16, Z+2	; 0x02
    1b06:	13 81       	ldd	r17, Z+3	; 0x03
    1b08:	24 81       	ldd	r18, Z+4	; 0x04
    1b0a:	35 81       	ldd	r19, Z+5	; 0x05
    1b0c:	12 96       	adiw	r26, 0x02	; 2
    1b0e:	4d 91       	ld	r20, X+
    1b10:	5d 91       	ld	r21, X+
    1b12:	6d 91       	ld	r22, X+
    1b14:	7c 91       	ld	r23, X
    1b16:	15 97       	sbiw	r26, 0x05	; 5
    1b18:	04 17       	cp	r16, r20
    1b1a:	15 07       	cpc	r17, r21
    1b1c:	26 07       	cpc	r18, r22
    1b1e:	37 07       	cpc	r19, r23
    1b20:	14 f4       	brge	.+4      	; 0x1b26 <enqueueByBaseline+0x3c>
    1b22:	1b c0       	rjmp	.+54     	; 0x1b5a <enqueueByBaseline+0x70>
    1b24:	df 01       	movw	r26, r30
    1b26:	ed 91       	ld	r30, X+
    1b28:	fc 91       	ld	r31, X
    1b2a:	11 97       	sbiw	r26, 0x01	; 1
    1b2c:	30 97       	sbiw	r30, 0x00	; 0
    1b2e:	49 f0       	breq	.+18     	; 0x1b42 <enqueueByBaseline+0x58>
    1b30:	42 81       	ldd	r20, Z+2	; 0x02
    1b32:	53 81       	ldd	r21, Z+3	; 0x03
    1b34:	64 81       	ldd	r22, Z+4	; 0x04
    1b36:	75 81       	ldd	r23, Z+5	; 0x05
    1b38:	04 17       	cp	r16, r20
    1b3a:	15 07       	cpc	r17, r21
    1b3c:	26 07       	cpc	r18, r22
    1b3e:	37 07       	cpc	r19, r23
    1b40:	8c f7       	brge	.-30     	; 0x1b24 <enqueueByBaseline+0x3a>
    1b42:	ec 01       	movw	r28, r24
    1b44:	f9 83       	std	Y+1, r31	; 0x01
    1b46:	e8 83       	st	Y, r30
    1b48:	10 97       	sbiw	r26, 0x00	; 0
    1b4a:	21 f4       	brne	.+8      	; 0x1b54 <enqueueByBaseline+0x6a>
    1b4c:	f7 01       	movw	r30, r14
    1b4e:	91 83       	std	Z+1, r25	; 0x01
    1b50:	80 83       	st	Z, r24
    1b52:	07 c0       	rjmp	.+14     	; 0x1b62 <enqueueByBaseline+0x78>
    1b54:	8d 93       	st	X+, r24
    1b56:	9c 93       	st	X, r25
    1b58:	04 c0       	rjmp	.+8      	; 0x1b62 <enqueueByBaseline+0x78>
    1b5a:	ec 01       	movw	r28, r24
    1b5c:	b9 83       	std	Y+1, r27	; 0x01
    1b5e:	a8 83       	st	Y, r26
    1b60:	f5 cf       	rjmp	.-22     	; 0x1b4c <enqueueByBaseline+0x62>
    1b62:	df 91       	pop	r29
    1b64:	cf 91       	pop	r28
    1b66:	1f 91       	pop	r17
    1b68:	0f 91       	pop	r16
    1b6a:	ff 90       	pop	r15
    1b6c:	ef 90       	pop	r14
    1b6e:	08 95       	ret

00001b70 <dequeue>:
    1b70:	dc 01       	movw	r26, r24
    1b72:	ed 91       	ld	r30, X+
    1b74:	fc 91       	ld	r31, X
    1b76:	11 97       	sbiw	r26, 0x01	; 1
    1b78:	30 97       	sbiw	r30, 0x00	; 0
    1b7a:	59 f4       	brne	.+22     	; 0x1b92 <dequeue+0x22>
    1b7c:	8f ef       	ldi	r24, 0xFF	; 255
    1b7e:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
    1b82:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
    1b86:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
    1b8c:	83 bf       	out	0x33, r24	; 51
    1b8e:	88 95       	sleep
    1b90:	fd cf       	rjmp	.-6      	; 0x1b8c <dequeue+0x1c>
    1b92:	20 81       	ld	r18, Z
    1b94:	31 81       	ldd	r19, Z+1	; 0x01
    1b96:	2d 93       	st	X+, r18
    1b98:	3c 93       	st	X, r19
    1b9a:	cf 01       	movw	r24, r30
    1b9c:	08 95       	ret

00001b9e <__vector_9>:
    1b9e:	1f 92       	push	r1
    1ba0:	0f 92       	push	r0
    1ba2:	0f b6       	in	r0, 0x3f	; 63
    1ba4:	0f 92       	push	r0
    1ba6:	11 24       	eor	r1, r1
    1ba8:	2f 93       	push	r18
    1baa:	3f 93       	push	r19
    1bac:	4f 93       	push	r20
    1bae:	5f 93       	push	r21
    1bb0:	6f 93       	push	r22
    1bb2:	7f 93       	push	r23
    1bb4:	8f 93       	push	r24
    1bb6:	9f 93       	push	r25
    1bb8:	ef 93       	push	r30
    1bba:	ff 93       	push	r31
    1bbc:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <overflows>
    1bc0:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <overflows+0x1>
    1bc4:	01 96       	adiw	r24, 0x01	; 1
    1bc6:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <overflows+0x1>
    1bca:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <overflows>
    1bce:	e0 91 66 01 	lds	r30, 0x0166	; 0x800166 <timerQ>
    1bd2:	f0 91 67 01 	lds	r31, 0x0167	; 0x800167 <timerQ+0x1>
    1bd6:	30 97       	sbiw	r30, 0x00	; 0
    1bd8:	01 f1       	breq	.+64     	; 0x1c1a <__vector_9+0x7c>
    1bda:	42 81       	ldd	r20, Z+2	; 0x02
    1bdc:	53 81       	ldd	r21, Z+3	; 0x03
    1bde:	64 81       	ldd	r22, Z+4	; 0x04
    1be0:	75 81       	ldd	r23, Z+5	; 0x05
    1be2:	86 17       	cp	r24, r22
    1be4:	97 07       	cpc	r25, r23
    1be6:	c9 f4       	brne	.+50     	; 0x1c1a <__vector_9+0x7c>
    1be8:	ca 01       	movw	r24, r20
    1bea:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1bee:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1bf2:	42 1b       	sub	r20, r18
    1bf4:	53 0b       	sbc	r21, r19
    1bf6:	41 30       	cpi	r20, 0x01	; 1
    1bf8:	51 05       	cpc	r21, r1
    1bfa:	29 f4       	brne	.+10     	; 0x1c06 <__vector_9+0x68>
    1bfc:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1c00:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1c04:	01 96       	adiw	r24, 0x01	; 1
    1c06:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1c0a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1c0e:	ef e6       	ldi	r30, 0x6F	; 111
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	80 81       	ld	r24, Z
    1c14:	82 60       	ori	r24, 0x02	; 2
    1c16:	80 83       	st	Z, r24
    1c18:	05 c0       	rjmp	.+10     	; 0x1c24 <__vector_9+0x86>
    1c1a:	ef e6       	ldi	r30, 0x6F	; 111
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	80 81       	ld	r24, Z
    1c20:	8d 7f       	andi	r24, 0xFD	; 253
    1c22:	80 83       	st	Z, r24
    1c24:	ff 91       	pop	r31
    1c26:	ef 91       	pop	r30
    1c28:	9f 91       	pop	r25
    1c2a:	8f 91       	pop	r24
    1c2c:	7f 91       	pop	r23
    1c2e:	6f 91       	pop	r22
    1c30:	5f 91       	pop	r21
    1c32:	4f 91       	pop	r20
    1c34:	3f 91       	pop	r19
    1c36:	2f 91       	pop	r18
    1c38:	0f 90       	pop	r0
    1c3a:	0f be       	out	0x3f, r0	; 63
    1c3c:	0f 90       	pop	r0
    1c3e:	1f 90       	pop	r1
    1c40:	18 95       	reti

00001c42 <__vector_7>:
    1c42:	1f 92       	push	r1
    1c44:	0f 92       	push	r0
    1c46:	0f b6       	in	r0, 0x3f	; 63
    1c48:	0f 92       	push	r0
    1c4a:	11 24       	eor	r1, r1
    1c4c:	cf 92       	push	r12
    1c4e:	df 92       	push	r13
    1c50:	ef 92       	push	r14
    1c52:	ff 92       	push	r15
    1c54:	2f 93       	push	r18
    1c56:	3f 93       	push	r19
    1c58:	4f 93       	push	r20
    1c5a:	5f 93       	push	r21
    1c5c:	6f 93       	push	r22
    1c5e:	7f 93       	push	r23
    1c60:	8f 93       	push	r24
    1c62:	9f 93       	push	r25
    1c64:	af 93       	push	r26
    1c66:	bf 93       	push	r27
    1c68:	ef 93       	push	r30
    1c6a:	ff 93       	push	r31
    1c6c:	c0 90 60 01 	lds	r12, 0x0160	; 0x800160 <overflows>
    1c70:	d0 90 61 01 	lds	r13, 0x0161	; 0x800161 <overflows+0x1>
    1c74:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1c78:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1c7c:	b0 99       	sbic	0x16, 0	; 22
    1c7e:	0f c0       	rjmp	.+30     	; 0x1c9e <__vector_7+0x5c>
    1c80:	0d 2c       	mov	r0, r13
    1c82:	00 0c       	add	r0, r0
    1c84:	ee 08       	sbc	r14, r14
    1c86:	ff 08       	sbc	r15, r15
    1c88:	d6 01       	movw	r26, r12
    1c8a:	99 27       	eor	r25, r25
    1c8c:	88 27       	eor	r24, r24
    1c8e:	69 01       	movw	r12, r18
    1c90:	e1 2c       	mov	r14, r1
    1c92:	f1 2c       	mov	r15, r1
    1c94:	c8 2a       	or	r12, r24
    1c96:	d9 2a       	or	r13, r25
    1c98:	ea 2a       	or	r14, r26
    1c9a:	fb 2a       	or	r15, r27
    1c9c:	15 c0       	rjmp	.+42     	; 0x1cc8 <__vector_7+0x86>
    1c9e:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1ca2:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1ca6:	8f ef       	ldi	r24, 0xFF	; 255
    1ca8:	c8 1a       	sub	r12, r24
    1caa:	d8 0a       	sbc	r13, r24
    1cac:	0d 2c       	mov	r0, r13
    1cae:	00 0c       	add	r0, r0
    1cb0:	ee 08       	sbc	r14, r14
    1cb2:	ff 08       	sbc	r15, r15
    1cb4:	d6 01       	movw	r26, r12
    1cb6:	99 27       	eor	r25, r25
    1cb8:	88 27       	eor	r24, r24
    1cba:	69 01       	movw	r12, r18
    1cbc:	e1 2c       	mov	r14, r1
    1cbe:	f1 2c       	mov	r15, r1
    1cc0:	c8 2a       	or	r12, r24
    1cc2:	d9 2a       	or	r13, r25
    1cc4:	ea 2a       	or	r14, r26
    1cc6:	fb 2a       	or	r15, r27
    1cc8:	e0 91 66 01 	lds	r30, 0x0166	; 0x800166 <timerQ>
    1ccc:	f0 91 67 01 	lds	r31, 0x0167	; 0x800167 <timerQ+0x1>
    1cd0:	30 97       	sbiw	r30, 0x00	; 0
    1cd2:	09 f4       	brne	.+2      	; 0x1cd6 <__vector_7+0x94>
    1cd4:	42 c0       	rjmp	.+132    	; 0x1d5a <__vector_7+0x118>
    1cd6:	82 81       	ldd	r24, Z+2	; 0x02
    1cd8:	93 81       	ldd	r25, Z+3	; 0x03
    1cda:	a4 81       	ldd	r26, Z+4	; 0x04
    1cdc:	b5 81       	ldd	r27, Z+5	; 0x05
    1cde:	8c 19       	sub	r24, r12
    1ce0:	9d 09       	sbc	r25, r13
    1ce2:	ae 09       	sbc	r26, r14
    1ce4:	bf 09       	sbc	r27, r15
    1ce6:	18 16       	cp	r1, r24
    1ce8:	19 06       	cpc	r1, r25
    1cea:	1a 06       	cpc	r1, r26
    1cec:	1b 06       	cpc	r1, r27
    1cee:	ec f1       	brlt	.+122    	; 0x1d6a <__vector_7+0x128>
    1cf0:	86 e6       	ldi	r24, 0x66	; 102
    1cf2:	91 e0       	ldi	r25, 0x01	; 1
    1cf4:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <dequeue>
    1cf8:	68 e6       	ldi	r22, 0x68	; 104
    1cfa:	71 e0       	ldi	r23, 0x01	; 1
    1cfc:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <enqueueByDeadline>
    1d00:	e0 91 66 01 	lds	r30, 0x0166	; 0x800166 <timerQ>
    1d04:	f0 91 67 01 	lds	r31, 0x0167	; 0x800167 <timerQ+0x1>
    1d08:	30 97       	sbiw	r30, 0x00	; 0
    1d0a:	39 f1       	breq	.+78     	; 0x1d5a <__vector_7+0x118>
    1d0c:	82 81       	ldd	r24, Z+2	; 0x02
    1d0e:	93 81       	ldd	r25, Z+3	; 0x03
    1d10:	a4 81       	ldd	r26, Z+4	; 0x04
    1d12:	b5 81       	ldd	r27, Z+5	; 0x05
    1d14:	8c 19       	sub	r24, r12
    1d16:	9d 09       	sbc	r25, r13
    1d18:	ae 09       	sbc	r26, r14
    1d1a:	bf 09       	sbc	r27, r15
    1d1c:	18 16       	cp	r1, r24
    1d1e:	19 06       	cpc	r1, r25
    1d20:	1a 06       	cpc	r1, r26
    1d22:	1b 06       	cpc	r1, r27
    1d24:	2c f7       	brge	.-54     	; 0x1cf0 <__vector_7+0xae>
    1d26:	21 c0       	rjmp	.+66     	; 0x1d6a <__vector_7+0x128>
    1d28:	9c 01       	movw	r18, r24
    1d2a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1d2e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1d32:	84 1b       	sub	r24, r20
    1d34:	95 0b       	sbc	r25, r21
    1d36:	01 97       	sbiw	r24, 0x01	; 1
    1d38:	31 f4       	brne	.+12     	; 0x1d46 <__vector_7+0x104>
    1d3a:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1d3e:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1d42:	2f 5f       	subi	r18, 0xFF	; 255
    1d44:	3f 4f       	sbci	r19, 0xFF	; 255
    1d46:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1d4a:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1d4e:	ef e6       	ldi	r30, 0x6F	; 111
    1d50:	f0 e0       	ldi	r31, 0x00	; 0
    1d52:	80 81       	ld	r24, Z
    1d54:	82 60       	ori	r24, 0x02	; 2
    1d56:	80 83       	st	Z, r24
    1d58:	05 c0       	rjmp	.+10     	; 0x1d64 <__vector_7+0x122>
    1d5a:	ef e6       	ldi	r30, 0x6F	; 111
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	80 81       	ld	r24, Z
    1d60:	8d 7f       	andi	r24, 0xFD	; 253
    1d62:	80 83       	st	Z, r24
    1d64:	0e 94 5f 05 	call	0xabe	; 0xabe <schedule>
    1d68:	0c c0       	rjmp	.+24     	; 0x1d82 <__vector_7+0x140>
    1d6a:	82 81       	ldd	r24, Z+2	; 0x02
    1d6c:	93 81       	ldd	r25, Z+3	; 0x03
    1d6e:	a4 81       	ldd	r26, Z+4	; 0x04
    1d70:	b5 81       	ldd	r27, Z+5	; 0x05
    1d72:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <overflows>
    1d76:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <overflows+0x1>
    1d7a:	2a 17       	cp	r18, r26
    1d7c:	3b 07       	cpc	r19, r27
    1d7e:	69 f7       	brne	.-38     	; 0x1d5a <__vector_7+0x118>
    1d80:	d3 cf       	rjmp	.-90     	; 0x1d28 <__vector_7+0xe6>
    1d82:	ff 91       	pop	r31
    1d84:	ef 91       	pop	r30
    1d86:	bf 91       	pop	r27
    1d88:	af 91       	pop	r26
    1d8a:	9f 91       	pop	r25
    1d8c:	8f 91       	pop	r24
    1d8e:	7f 91       	pop	r23
    1d90:	6f 91       	pop	r22
    1d92:	5f 91       	pop	r21
    1d94:	4f 91       	pop	r20
    1d96:	3f 91       	pop	r19
    1d98:	2f 91       	pop	r18
    1d9a:	ff 90       	pop	r15
    1d9c:	ef 90       	pop	r14
    1d9e:	df 90       	pop	r13
    1da0:	cf 90       	pop	r12
    1da2:	0f 90       	pop	r0
    1da4:	0f be       	out	0x3f, r0	; 63
    1da6:	0f 90       	pop	r0
    1da8:	1f 90       	pop	r1
    1daa:	18 95       	reti

00001dac <async>:
    1dac:	3f 92       	push	r3
    1dae:	4f 92       	push	r4
    1db0:	5f 92       	push	r5
    1db2:	6f 92       	push	r6
    1db4:	7f 92       	push	r7
    1db6:	8f 92       	push	r8
    1db8:	9f 92       	push	r9
    1dba:	af 92       	push	r10
    1dbc:	bf 92       	push	r11
    1dbe:	cf 92       	push	r12
    1dc0:	df 92       	push	r13
    1dc2:	ef 92       	push	r14
    1dc4:	ff 92       	push	r15
    1dc6:	0f 93       	push	r16
    1dc8:	1f 93       	push	r17
    1dca:	cf 93       	push	r28
    1dcc:	df 93       	push	r29
    1dce:	2b 01       	movw	r4, r22
    1dd0:	3c 01       	movw	r6, r24
    1dd2:	49 01       	movw	r8, r18
    1dd4:	5a 01       	movw	r10, r20
    1dd6:	8f b7       	in	r24, 0x3f	; 63
    1dd8:	80 78       	andi	r24, 0x80	; 128
    1dda:	38 2e       	mov	r3, r24
    1ddc:	f8 94       	cli
    1dde:	86 e5       	ldi	r24, 0x56	; 86
    1de0:	91 e0       	ldi	r25, 0x01	; 1
    1de2:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <dequeue>
    1de6:	ec 01       	movw	r28, r24
    1de8:	1b 87       	std	Y+11, r17	; 0x0b
    1dea:	0a 87       	std	Y+10, r16	; 0x0a
    1dec:	fd 86       	std	Y+13, r15	; 0x0d
    1dee:	ec 86       	std	Y+12, r14	; 0x0c
    1df0:	df 86       	std	Y+15, r13	; 0x0f
    1df2:	ce 86       	std	Y+14, r12	; 0x0e
    1df4:	33 20       	and	r3, r3
    1df6:	61 f0       	breq	.+24     	; 0x1e10 <async+0x64>
    1df8:	e0 91 50 01 	lds	r30, 0x0150	; 0x800150 <current>
    1dfc:	f0 91 51 01 	lds	r31, 0x0151	; 0x800151 <current+0x1>
    1e00:	02 80       	ldd	r0, Z+2	; 0x02
    1e02:	f3 81       	ldd	r31, Z+3	; 0x03
    1e04:	e0 2d       	mov	r30, r0
    1e06:	82 81       	ldd	r24, Z+2	; 0x02
    1e08:	93 81       	ldd	r25, Z+3	; 0x03
    1e0a:	a4 81       	ldd	r26, Z+4	; 0x04
    1e0c:	b5 81       	ldd	r27, Z+5	; 0x05
    1e0e:	08 c0       	rjmp	.+16     	; 0x1e20 <async+0x74>
    1e10:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <timestamp>
    1e14:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <timestamp+0x1>
    1e18:	a0 91 64 01 	lds	r26, 0x0164	; 0x800164 <timestamp+0x2>
    1e1c:	b0 91 65 01 	lds	r27, 0x0165	; 0x800165 <timestamp+0x3>
    1e20:	48 0e       	add	r4, r24
    1e22:	59 1e       	adc	r5, r25
    1e24:	6a 1e       	adc	r6, r26
    1e26:	7b 1e       	adc	r7, r27
    1e28:	4a 82       	std	Y+2, r4	; 0x02
    1e2a:	5b 82       	std	Y+3, r5	; 0x03
    1e2c:	6c 82       	std	Y+4, r6	; 0x04
    1e2e:	7d 82       	std	Y+5, r7	; 0x05
    1e30:	18 14       	cp	r1, r8
    1e32:	19 04       	cpc	r1, r9
    1e34:	1a 04       	cpc	r1, r10
    1e36:	1b 04       	cpc	r1, r11
    1e38:	44 f0       	brlt	.+16     	; 0x1e4a <async+0x9e>
    1e3a:	0f 2e       	mov	r0, r31
    1e3c:	88 24       	eor	r8, r8
    1e3e:	8a 94       	dec	r8
    1e40:	98 2c       	mov	r9, r8
    1e42:	a8 2c       	mov	r10, r8
    1e44:	ff e7       	ldi	r31, 0x7F	; 127
    1e46:	bf 2e       	mov	r11, r31
    1e48:	f0 2d       	mov	r31, r0
    1e4a:	84 0c       	add	r8, r4
    1e4c:	95 1c       	adc	r9, r5
    1e4e:	a6 1c       	adc	r10, r6
    1e50:	b7 1c       	adc	r11, r7
    1e52:	8e 82       	std	Y+6, r8	; 0x06
    1e54:	9f 82       	std	Y+7, r9	; 0x07
    1e56:	a8 86       	std	Y+8, r10	; 0x08
    1e58:	b9 86       	std	Y+9, r11	; 0x09
    1e5a:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <overflows>
    1e5e:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <overflows+0x1>
    1e62:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1e66:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1e6a:	b0 99       	sbic	0x16, 0	; 22
    1e6c:	0e c0       	rjmp	.+28     	; 0x1e8a <async+0xde>
    1e6e:	09 2e       	mov	r0, r25
    1e70:	00 0c       	add	r0, r0
    1e72:	aa 0b       	sbc	r26, r26
    1e74:	bb 0b       	sbc	r27, r27
    1e76:	dc 01       	movw	r26, r24
    1e78:	99 27       	eor	r25, r25
    1e7a:	88 27       	eor	r24, r24
    1e7c:	60 e0       	ldi	r22, 0x00	; 0
    1e7e:	70 e0       	ldi	r23, 0x00	; 0
    1e80:	84 2b       	or	r24, r20
    1e82:	95 2b       	or	r25, r21
    1e84:	a6 2b       	or	r26, r22
    1e86:	b7 2b       	or	r27, r23
    1e88:	13 c0       	rjmp	.+38     	; 0x1eb0 <async+0x104>
    1e8a:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1e8e:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1e92:	01 96       	adiw	r24, 0x01	; 1
    1e94:	09 2e       	mov	r0, r25
    1e96:	00 0c       	add	r0, r0
    1e98:	aa 0b       	sbc	r26, r26
    1e9a:	bb 0b       	sbc	r27, r27
    1e9c:	dc 01       	movw	r26, r24
    1e9e:	99 27       	eor	r25, r25
    1ea0:	88 27       	eor	r24, r24
    1ea2:	a9 01       	movw	r20, r18
    1ea4:	60 e0       	ldi	r22, 0x00	; 0
    1ea6:	70 e0       	ldi	r23, 0x00	; 0
    1ea8:	84 2b       	or	r24, r20
    1eaa:	95 2b       	or	r25, r21
    1eac:	a6 2b       	or	r26, r22
    1eae:	b7 2b       	or	r27, r23
    1eb0:	48 1a       	sub	r4, r24
    1eb2:	59 0a       	sbc	r5, r25
    1eb4:	6a 0a       	sbc	r6, r26
    1eb6:	7b 0a       	sbc	r7, r27
    1eb8:	14 14       	cp	r1, r4
    1eba:	15 04       	cpc	r1, r5
    1ebc:	16 04       	cpc	r1, r6
    1ebe:	17 04       	cpc	r1, r7
    1ec0:	ac f5       	brge	.+106    	; 0x1f2c <async+0x180>
    1ec2:	66 e6       	ldi	r22, 0x66	; 102
    1ec4:	71 e0       	ldi	r23, 0x01	; 1
    1ec6:	ce 01       	movw	r24, r28
    1ec8:	0e 94 75 0d 	call	0x1aea	; 0x1aea <enqueueByBaseline>
    1ecc:	e0 91 66 01 	lds	r30, 0x0166	; 0x800166 <timerQ>
    1ed0:	f0 91 67 01 	lds	r31, 0x0167	; 0x800167 <timerQ+0x1>
    1ed4:	30 97       	sbiw	r30, 0x00	; 0
    1ed6:	21 f1       	breq	.+72     	; 0x1f20 <async+0x174>
    1ed8:	82 81       	ldd	r24, Z+2	; 0x02
    1eda:	93 81       	ldd	r25, Z+3	; 0x03
    1edc:	a4 81       	ldd	r26, Z+4	; 0x04
    1ede:	b5 81       	ldd	r27, Z+5	; 0x05
    1ee0:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <overflows>
    1ee4:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <overflows+0x1>
    1ee8:	2a 17       	cp	r18, r26
    1eea:	3b 07       	cpc	r19, r27
    1eec:	c9 f4       	brne	.+50     	; 0x1f20 <async+0x174>
    1eee:	9c 01       	movw	r18, r24
    1ef0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1ef4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1ef8:	84 1b       	sub	r24, r20
    1efa:	95 0b       	sbc	r25, r21
    1efc:	01 97       	sbiw	r24, 0x01	; 1
    1efe:	31 f4       	brne	.+12     	; 0x1f0c <async+0x160>
    1f00:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1f04:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1f08:	2f 5f       	subi	r18, 0xFF	; 255
    1f0a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f0c:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1f10:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1f14:	ef e6       	ldi	r30, 0x6F	; 111
    1f16:	f0 e0       	ldi	r31, 0x00	; 0
    1f18:	80 81       	ld	r24, Z
    1f1a:	82 60       	ori	r24, 0x02	; 2
    1f1c:	80 83       	st	Z, r24
    1f1e:	41 c0       	rjmp	.+130    	; 0x1fa2 <async+0x1f6>
    1f20:	ef e6       	ldi	r30, 0x6F	; 111
    1f22:	f0 e0       	ldi	r31, 0x00	; 0
    1f24:	80 81       	ld	r24, Z
    1f26:	8d 7f       	andi	r24, 0xFD	; 253
    1f28:	80 83       	st	Z, r24
    1f2a:	3b c0       	rjmp	.+118    	; 0x1fa2 <async+0x1f6>
    1f2c:	68 e6       	ldi	r22, 0x68	; 104
    1f2e:	71 e0       	ldi	r23, 0x01	; 1
    1f30:	ce 01       	movw	r24, r28
    1f32:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <enqueueByDeadline>
    1f36:	33 20       	and	r3, r3
    1f38:	b9 f1       	breq	.+110    	; 0x1fa8 <async+0x1fc>
    1f3a:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <threadPool>
    1f3e:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <threadPool+0x1>
    1f42:	00 97       	sbiw	r24, 0x00	; 0
    1f44:	81 f1       	breq	.+96     	; 0x1fa6 <async+0x1fa>
    1f46:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <activeStack>
    1f4a:	f0 91 53 01 	lds	r31, 0x0153	; 0x800153 <activeStack+0x1>
    1f4e:	20 91 68 01 	lds	r18, 0x0168	; 0x800168 <msgQ>
    1f52:	30 91 69 01 	lds	r19, 0x0169	; 0x800169 <msgQ+0x1>
    1f56:	02 81       	ldd	r16, Z+2	; 0x02
    1f58:	13 81       	ldd	r17, Z+3	; 0x03
    1f5a:	d9 01       	movw	r26, r18
    1f5c:	16 96       	adiw	r26, 0x06	; 6
    1f5e:	4d 91       	ld	r20, X+
    1f60:	5d 91       	ld	r21, X+
    1f62:	6d 91       	ld	r22, X+
    1f64:	7c 91       	ld	r23, X
    1f66:	19 97       	sbiw	r26, 0x09	; 9
    1f68:	d8 01       	movw	r26, r16
    1f6a:	16 96       	adiw	r26, 0x06	; 6
    1f6c:	0d 91       	ld	r16, X+
    1f6e:	1d 91       	ld	r17, X+
    1f70:	2d 91       	ld	r18, X+
    1f72:	3c 91       	ld	r19, X
    1f74:	19 97       	sbiw	r26, 0x09	; 9
    1f76:	40 1b       	sub	r20, r16
    1f78:	51 0b       	sbc	r21, r17
    1f7a:	62 0b       	sbc	r22, r18
    1f7c:	73 0b       	sbc	r23, r19
    1f7e:	9a f4       	brpl	.+38     	; 0x1fa6 <async+0x1fa>
    1f80:	dc 01       	movw	r26, r24
    1f82:	2d 91       	ld	r18, X+
    1f84:	3c 91       	ld	r19, X
    1f86:	11 97       	sbiw	r26, 0x01	; 1
    1f88:	30 93 55 01 	sts	0x0155, r19	; 0x800155 <threadPool+0x1>
    1f8c:	20 93 54 01 	sts	0x0154, r18	; 0x800154 <threadPool>
    1f90:	ed 93       	st	X+, r30
    1f92:	fc 93       	st	X, r31
    1f94:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <activeStack+0x1>
    1f98:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <activeStack>
    1f9c:	0e 94 3f 05 	call	0xa7e	; 0xa7e <dispatch>
    1fa0:	02 c0       	rjmp	.+4      	; 0x1fa6 <async+0x1fa>
    1fa2:	33 20       	and	r3, r3
    1fa4:	09 f0       	breq	.+2      	; 0x1fa8 <async+0x1fc>
    1fa6:	78 94       	sei
    1fa8:	ce 01       	movw	r24, r28
    1faa:	df 91       	pop	r29
    1fac:	cf 91       	pop	r28
    1fae:	1f 91       	pop	r17
    1fb0:	0f 91       	pop	r16
    1fb2:	ff 90       	pop	r15
    1fb4:	ef 90       	pop	r14
    1fb6:	df 90       	pop	r13
    1fb8:	cf 90       	pop	r12
    1fba:	bf 90       	pop	r11
    1fbc:	af 90       	pop	r10
    1fbe:	9f 90       	pop	r9
    1fc0:	8f 90       	pop	r8
    1fc2:	7f 90       	pop	r7
    1fc4:	6f 90       	pop	r6
    1fc6:	5f 90       	pop	r5
    1fc8:	4f 90       	pop	r4
    1fca:	3f 90       	pop	r3
    1fcc:	08 95       	ret

00001fce <sync>:
    1fce:	cf 92       	push	r12
    1fd0:	df 92       	push	r13
    1fd2:	ef 92       	push	r14
    1fd4:	ff 92       	push	r15
    1fd6:	0f 93       	push	r16
    1fd8:	1f 93       	push	r17
    1fda:	cf 93       	push	r28
    1fdc:	df 93       	push	r29
    1fde:	ec 01       	movw	r28, r24
    1fe0:	7b 01       	movw	r14, r22
    1fe2:	6a 01       	movw	r12, r20
    1fe4:	1f b7       	in	r17, 0x3f	; 63
    1fe6:	10 78       	andi	r17, 0x80	; 128
    1fe8:	f8 94       	cli
    1fea:	a8 81       	ld	r26, Y
    1fec:	b9 81       	ldd	r27, Y+1	; 0x01
    1fee:	10 97       	sbiw	r26, 0x00	; 0
    1ff0:	61 f1       	breq	.+88     	; 0x204a <sync+0x7c>
    1ff2:	14 96       	adiw	r26, 0x04	; 4
    1ff4:	ed 91       	ld	r30, X+
    1ff6:	fc 91       	ld	r31, X
    1ff8:	15 97       	sbiw	r26, 0x05	; 5
    1ffa:	30 97       	sbiw	r30, 0x00	; 0
    1ffc:	41 f0       	breq	.+16     	; 0x200e <sync+0x40>
    1ffe:	a0 81       	ld	r26, Z
    2000:	b1 81       	ldd	r27, Z+1	; 0x01
    2002:	14 96       	adiw	r26, 0x04	; 4
    2004:	ed 91       	ld	r30, X+
    2006:	fc 91       	ld	r31, X
    2008:	15 97       	sbiw	r26, 0x05	; 5
    200a:	30 97       	sbiw	r30, 0x00	; 0
    200c:	c1 f7       	brne	.-16     	; 0x1ffe <sync+0x30>
    200e:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <current>
    2012:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <current+0x1>
    2016:	2a 17       	cp	r18, r26
    2018:	3b 07       	cpc	r19, r27
    201a:	21 f0       	breq	.+8      	; 0x2024 <sync+0x56>
    201c:	11 23       	and	r17, r17
    201e:	09 f4       	brne	.+2      	; 0x2022 <sync+0x54>
    2020:	3d c0       	rjmp	.+122    	; 0x209c <sync+0xce>
    2022:	07 c0       	rjmp	.+14     	; 0x2032 <sync+0x64>
    2024:	11 23       	and	r17, r17
    2026:	09 f4       	brne	.+2      	; 0x202a <sync+0x5c>
    2028:	3c c0       	rjmp	.+120    	; 0x20a2 <sync+0xd4>
    202a:	78 94       	sei
    202c:	8f ef       	ldi	r24, 0xFF	; 255
    202e:	9f ef       	ldi	r25, 0xFF	; 255
    2030:	52 c0       	rjmp	.+164    	; 0x20d6 <sync+0x108>
    2032:	8a 81       	ldd	r24, Y+2	; 0x02
    2034:	9b 81       	ldd	r25, Y+3	; 0x03
    2036:	00 97       	sbiw	r24, 0x00	; 0
    2038:	d1 f1       	breq	.+116    	; 0x20ae <sync+0xe0>
    203a:	fc 01       	movw	r30, r24
    203c:	15 82       	std	Z+5, r1	; 0x05
    203e:	14 82       	std	Z+4, r1	; 0x04
    2040:	36 c0       	rjmp	.+108    	; 0x20ae <sync+0xe0>
    2042:	78 94       	sei
    2044:	80 e0       	ldi	r24, 0x00	; 0
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	46 c0       	rjmp	.+140    	; 0x20d6 <sync+0x108>
    204a:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <current>
    204e:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <current+0x1>
    2052:	99 83       	std	Y+1, r25	; 0x01
    2054:	88 83       	st	Y, r24
    2056:	11 23       	and	r17, r17
    2058:	29 f0       	breq	.+10     	; 0x2064 <sync+0x96>
    205a:	8a 81       	ldd	r24, Y+2	; 0x02
    205c:	9b 81       	ldd	r25, Y+3	; 0x03
    205e:	01 97       	sbiw	r24, 0x01	; 1
    2060:	09 f0       	breq	.+2      	; 0x2064 <sync+0x96>
    2062:	78 94       	sei
    2064:	b6 01       	movw	r22, r12
    2066:	ce 01       	movw	r24, r28
    2068:	f7 01       	movw	r30, r14
    206a:	09 95       	icall
    206c:	f8 2e       	mov	r15, r24
    206e:	09 2f       	mov	r16, r25
    2070:	8f b7       	in	r24, 0x3f	; 63
    2072:	f8 94       	cli
    2074:	19 82       	std	Y+1, r1	; 0x01
    2076:	18 82       	st	Y, r1
    2078:	8a 81       	ldd	r24, Y+2	; 0x02
    207a:	9b 81       	ldd	r25, Y+3	; 0x03
    207c:	82 30       	cpi	r24, 0x02	; 2
    207e:	91 05       	cpc	r25, r1
    2080:	38 f0       	brcs	.+14     	; 0x2090 <sync+0xc2>
    2082:	1b 82       	std	Y+3, r1	; 0x03
    2084:	1a 82       	std	Y+2, r1	; 0x02
    2086:	fc 01       	movw	r30, r24
    2088:	15 82       	std	Z+5, r1	; 0x05
    208a:	14 82       	std	Z+4, r1	; 0x04
    208c:	0e 94 3f 05 	call	0xa7e	; 0xa7e <dispatch>
    2090:	11 23       	and	r17, r17
    2092:	51 f0       	breq	.+20     	; 0x20a8 <sync+0xda>
    2094:	78 94       	sei
    2096:	8f 2d       	mov	r24, r15
    2098:	90 2f       	mov	r25, r16
    209a:	1d c0       	rjmp	.+58     	; 0x20d6 <sync+0x108>
    209c:	8f ef       	ldi	r24, 0xFF	; 255
    209e:	9f ef       	ldi	r25, 0xFF	; 255
    20a0:	1a c0       	rjmp	.+52     	; 0x20d6 <sync+0x108>
    20a2:	8f ef       	ldi	r24, 0xFF	; 255
    20a4:	9f ef       	ldi	r25, 0xFF	; 255
    20a6:	17 c0       	rjmp	.+46     	; 0x20d6 <sync+0x108>
    20a8:	8f 2d       	mov	r24, r15
    20aa:	90 2f       	mov	r25, r16
    20ac:	14 c0       	rjmp	.+40     	; 0x20d6 <sync+0x108>
    20ae:	3b 83       	std	Y+3, r19	; 0x03
    20b0:	2a 83       	std	Y+2, r18	; 0x02
    20b2:	f9 01       	movw	r30, r18
    20b4:	d5 83       	std	Z+5, r29	; 0x05
    20b6:	c4 83       	std	Z+4, r28	; 0x04
    20b8:	cd 01       	movw	r24, r26
    20ba:	0e 94 3f 05 	call	0xa7e	; 0xa7e <dispatch>
    20be:	e0 91 50 01 	lds	r30, 0x0150	; 0x800150 <current>
    20c2:	f0 91 51 01 	lds	r31, 0x0151	; 0x800151 <current+0x1>
    20c6:	82 81       	ldd	r24, Z+2	; 0x02
    20c8:	93 81       	ldd	r25, Z+3	; 0x03
    20ca:	89 2b       	or	r24, r25
    20cc:	09 f4       	brne	.+2      	; 0x20d0 <sync+0x102>
    20ce:	b9 cf       	rjmp	.-142    	; 0x2042 <sync+0x74>
    20d0:	f9 83       	std	Y+1, r31	; 0x01
    20d2:	e8 83       	st	Y, r30
    20d4:	c2 cf       	rjmp	.-124    	; 0x205a <sync+0x8c>
    20d6:	df 91       	pop	r29
    20d8:	cf 91       	pop	r28
    20da:	1f 91       	pop	r17
    20dc:	0f 91       	pop	r16
    20de:	ff 90       	pop	r15
    20e0:	ef 90       	pop	r14
    20e2:	df 90       	pop	r13
    20e4:	cf 90       	pop	r12
    20e6:	08 95       	ret

000020e8 <run>:
    20e8:	00 91 50 01 	lds	r16, 0x0150	; 0x800150 <current>
    20ec:	10 91 51 01 	lds	r17, 0x0151	; 0x800151 <current+0x1>
    20f0:	88 e6       	ldi	r24, 0x68	; 104
    20f2:	91 e0       	ldi	r25, 0x01	; 1
    20f4:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <dequeue>
    20f8:	ec 01       	movw	r28, r24
    20fa:	d8 01       	movw	r26, r16
    20fc:	13 96       	adiw	r26, 0x03	; 3
    20fe:	9c 93       	st	X, r25
    2100:	8e 93       	st	-X, r24
    2102:	12 97       	sbiw	r26, 0x02	; 2
    2104:	78 94       	sei
    2106:	4e 85       	ldd	r20, Y+14	; 0x0e
    2108:	5f 85       	ldd	r21, Y+15	; 0x0f
    210a:	6c 85       	ldd	r22, Y+12	; 0x0c
    210c:	7d 85       	ldd	r23, Y+13	; 0x0d
    210e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2110:	9b 85       	ldd	r25, Y+11	; 0x0b
    2112:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <sync>
    2116:	8f b7       	in	r24, 0x3f	; 63
    2118:	f8 94       	cli
    211a:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <msgPool>
    211e:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <msgPool+0x1>
    2122:	99 83       	std	Y+1, r25	; 0x01
    2124:	88 83       	st	Y, r24
    2126:	d0 93 57 01 	sts	0x0157, r29	; 0x800157 <msgPool+0x1>
    212a:	c0 93 56 01 	sts	0x0156, r28	; 0x800156 <msgPool>
    212e:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <activeStack>
    2132:	f0 91 53 01 	lds	r31, 0x0153	; 0x800153 <activeStack+0x1>
    2136:	00 81       	ld	r16, Z
    2138:	11 81       	ldd	r17, Z+1	; 0x01
    213a:	e8 01       	movw	r28, r16
    213c:	2a 81       	ldd	r18, Y+2	; 0x02
    213e:	3b 81       	ldd	r19, Y+3	; 0x03
    2140:	a0 91 68 01 	lds	r26, 0x0168	; 0x800168 <msgQ>
    2144:	b0 91 69 01 	lds	r27, 0x0169	; 0x800169 <msgQ+0x1>
    2148:	10 97       	sbiw	r26, 0x00	; 0
    214a:	c1 f0       	breq	.+48     	; 0x217c <run+0x94>
    214c:	21 15       	cp	r18, r1
    214e:	31 05       	cpc	r19, r1
    2150:	59 f2       	breq	.-106    	; 0x20e8 <run>
    2152:	16 96       	adiw	r26, 0x06	; 6
    2154:	8d 91       	ld	r24, X+
    2156:	9d 91       	ld	r25, X+
    2158:	0d 90       	ld	r0, X+
    215a:	bc 91       	ld	r27, X
    215c:	a0 2d       	mov	r26, r0
    215e:	e9 01       	movw	r28, r18
    2160:	4e 81       	ldd	r20, Y+6	; 0x06
    2162:	5f 81       	ldd	r21, Y+7	; 0x07
    2164:	68 85       	ldd	r22, Y+8	; 0x08
    2166:	79 85       	ldd	r23, Y+9	; 0x09
    2168:	84 1b       	sub	r24, r20
    216a:	95 0b       	sbc	r25, r21
    216c:	a6 0b       	sbc	r26, r22
    216e:	b7 0b       	sbc	r27, r23
    2170:	18 16       	cp	r1, r24
    2172:	19 06       	cpc	r1, r25
    2174:	1a 06       	cpc	r1, r26
    2176:	1b 06       	cpc	r1, r27
    2178:	0c f0       	brlt	.+2      	; 0x217c <run+0x94>
    217a:	b6 cf       	rjmp	.-148    	; 0x20e8 <run>
    217c:	10 93 53 01 	sts	0x0153, r17	; 0x800153 <activeStack+0x1>
    2180:	00 93 52 01 	sts	0x0152, r16	; 0x800152 <activeStack>
    2184:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <threadPool>
    2188:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <threadPool+0x1>
    218c:	91 83       	std	Z+1, r25	; 0x01
    218e:	80 83       	st	Z, r24
    2190:	f0 93 55 01 	sts	0x0155, r31	; 0x800155 <threadPool+0x1>
    2194:	e0 93 54 01 	sts	0x0154, r30	; 0x800154 <threadPool>
    2198:	a0 91 52 01 	lds	r26, 0x0152	; 0x800152 <activeStack>
    219c:	b0 91 53 01 	lds	r27, 0x0153	; 0x800153 <activeStack+0x1>
    21a0:	14 96       	adiw	r26, 0x04	; 4
    21a2:	ed 91       	ld	r30, X+
    21a4:	fc 91       	ld	r31, X
    21a6:	15 97       	sbiw	r26, 0x05	; 5
    21a8:	30 97       	sbiw	r30, 0x00	; 0
    21aa:	41 f0       	breq	.+16     	; 0x21bc <run+0xd4>
    21ac:	a0 81       	ld	r26, Z
    21ae:	b1 81       	ldd	r27, Z+1	; 0x01
    21b0:	14 96       	adiw	r26, 0x04	; 4
    21b2:	ed 91       	ld	r30, X+
    21b4:	fc 91       	ld	r31, X
    21b6:	15 97       	sbiw	r26, 0x05	; 5
    21b8:	30 97       	sbiw	r30, 0x00	; 0
    21ba:	c1 f7       	brne	.-16     	; 0x21ac <run+0xc4>
    21bc:	cd 01       	movw	r24, r26
    21be:	0e 94 3f 05 	call	0xa7e	; 0xa7e <dispatch>
    21c2:	92 cf       	rjmp	.-220    	; 0x20e8 <run>

000021c4 <install>:
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    if (i >= 0 && i < N_VECTORS) {
    21c4:	42 31       	cpi	r20, 0x12	; 18
    21c6:	b8 f4       	brcc	.+46     	; 0x21f6 <install+0x32>
        char status;
        DISABLE(status);
    21c8:	2f b7       	in	r18, 0x3f	; 63
    21ca:	f8 94       	cli
        otable[i] = obj;
    21cc:	50 e0       	ldi	r21, 0x00	; 0
    21ce:	44 0f       	add	r20, r20
    21d0:	55 1f       	adc	r21, r21
    21d2:	fa 01       	movw	r30, r20
    21d4:	e6 59       	subi	r30, 0x96	; 150
    21d6:	fe 4f       	sbci	r31, 0xFE	; 254
    21d8:	91 83       	std	Z+1, r25	; 0x01
    21da:	80 83       	st	Z, r24
        mtable[i] = m;
    21dc:	fa 01       	movw	r30, r20
    21de:	ee 5f       	subi	r30, 0xFE	; 254
    21e0:	fd 4f       	sbci	r31, 0xFD	; 253
    21e2:	71 83       	std	Z+1, r23	; 0x01
    21e4:	60 83       	st	Z, r22
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    21e6:	41 e0       	ldi	r20, 0x01	; 1
    21e8:	50 e0       	ldi	r21, 0x00	; 0
    21ea:	fc 01       	movw	r30, r24
    21ec:	53 83       	std	Z+3, r21	; 0x03
    21ee:	42 83       	std	Z+2, r20	; 0x02
        ENABLE(status);
    21f0:	22 23       	and	r18, r18
    21f2:	0c f4       	brge	.+2      	; 0x21f6 <install+0x32>
    21f4:	78 94       	sei
    21f6:	08 95       	ret

000021f8 <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    21f8:	8c 01       	movw	r16, r24
    21fa:	7b 01       	movw	r14, r22
    21fc:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    21fe:	8f b7       	in	r24, 0x3f	; 63
    2200:	f8 94       	cli
    initialize();
    2202:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <initialize>
    ENABLE(1);
    2206:	78 94       	sei
    if (m != NULL)
    2208:	e1 14       	cp	r14, r1
    220a:	f1 04       	cpc	r15, r1
    220c:	41 f0       	breq	.+16     	; 0x221e <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    220e:	20 e0       	ldi	r18, 0x00	; 0
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	a9 01       	movw	r20, r18
    2214:	60 e0       	ldi	r22, 0x00	; 0
    2216:	70 e0       	ldi	r23, 0x00	; 0
    2218:	cb 01       	movw	r24, r22
    221a:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <async>
    DISABLE(status);
    221e:	8f b7       	in	r24, 0x3f	; 63
    2220:	f8 94       	cli
        }
    }
}

static void idle(void) {
    schedule();
    2222:	0e 94 5f 05 	call	0xabe	; 0xabe <schedule>
    ENABLE(1);
    2226:	78 94       	sei
    while (1) {
        SLEEP();
    2228:	81 e0       	ldi	r24, 0x01	; 1
    222a:	83 bf       	out	0x33, r24	; 51
    222c:	88 95       	sleep
    222e:	fd cf       	rjmp	.-6      	; 0x222a <tinytimber+0x32>

00002230 <__divmodhi4>:
    2230:	97 fb       	bst	r25, 7
    2232:	07 2e       	mov	r0, r23
    2234:	16 f4       	brtc	.+4      	; 0x223a <__divmodhi4+0xa>
    2236:	00 94       	com	r0
    2238:	07 d0       	rcall	.+14     	; 0x2248 <__divmodhi4_neg1>
    223a:	77 fd       	sbrc	r23, 7
    223c:	09 d0       	rcall	.+18     	; 0x2250 <__divmodhi4_neg2>
    223e:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__udivmodhi4>
    2242:	07 fc       	sbrc	r0, 7
    2244:	05 d0       	rcall	.+10     	; 0x2250 <__divmodhi4_neg2>
    2246:	3e f4       	brtc	.+14     	; 0x2256 <__divmodhi4_exit>

00002248 <__divmodhi4_neg1>:
    2248:	90 95       	com	r25
    224a:	81 95       	neg	r24
    224c:	9f 4f       	sbci	r25, 0xFF	; 255
    224e:	08 95       	ret

00002250 <__divmodhi4_neg2>:
    2250:	70 95       	com	r23
    2252:	61 95       	neg	r22
    2254:	7f 4f       	sbci	r23, 0xFF	; 255

00002256 <__divmodhi4_exit>:
    2256:	08 95       	ret

00002258 <__divmodsi4>:
    2258:	05 2e       	mov	r0, r21
    225a:	97 fb       	bst	r25, 7
    225c:	1e f4       	brtc	.+6      	; 0x2264 <__divmodsi4+0xc>
    225e:	00 94       	com	r0
    2260:	0e 94 43 11 	call	0x2286	; 0x2286 <__negsi2>
    2264:	57 fd       	sbrc	r21, 7
    2266:	07 d0       	rcall	.+14     	; 0x2276 <__divmodsi4_neg2>
    2268:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <__udivmodsi4>
    226c:	07 fc       	sbrc	r0, 7
    226e:	03 d0       	rcall	.+6      	; 0x2276 <__divmodsi4_neg2>
    2270:	4e f4       	brtc	.+18     	; 0x2284 <__divmodsi4_exit>
    2272:	0c 94 43 11 	jmp	0x2286	; 0x2286 <__negsi2>

00002276 <__divmodsi4_neg2>:
    2276:	50 95       	com	r21
    2278:	40 95       	com	r20
    227a:	30 95       	com	r19
    227c:	21 95       	neg	r18
    227e:	3f 4f       	sbci	r19, 0xFF	; 255
    2280:	4f 4f       	sbci	r20, 0xFF	; 255
    2282:	5f 4f       	sbci	r21, 0xFF	; 255

00002284 <__divmodsi4_exit>:
    2284:	08 95       	ret

00002286 <__negsi2>:
    2286:	90 95       	com	r25
    2288:	80 95       	com	r24
    228a:	70 95       	com	r23
    228c:	61 95       	neg	r22
    228e:	7f 4f       	sbci	r23, 0xFF	; 255
    2290:	8f 4f       	sbci	r24, 0xFF	; 255
    2292:	9f 4f       	sbci	r25, 0xFF	; 255
    2294:	08 95       	ret

00002296 <__tablejump2__>:
    2296:	ee 0f       	add	r30, r30
    2298:	ff 1f       	adc	r31, r31
    229a:	05 90       	lpm	r0, Z+
    229c:	f4 91       	lpm	r31, Z
    229e:	e0 2d       	mov	r30, r0
    22a0:	09 94       	ijmp

000022a2 <__usmulhisi3>:
    22a2:	0e 94 8e 11 	call	0x231c	; 0x231c <__umulhisi3>

000022a6 <__usmulhisi3_tail>:
    22a6:	b7 ff       	sbrs	r27, 7
    22a8:	08 95       	ret
    22aa:	82 1b       	sub	r24, r18
    22ac:	93 0b       	sbc	r25, r19
    22ae:	08 95       	ret

000022b0 <__udivmodhi4>:
    22b0:	aa 1b       	sub	r26, r26
    22b2:	bb 1b       	sub	r27, r27
    22b4:	51 e1       	ldi	r21, 0x11	; 17
    22b6:	07 c0       	rjmp	.+14     	; 0x22c6 <__udivmodhi4_ep>

000022b8 <__udivmodhi4_loop>:
    22b8:	aa 1f       	adc	r26, r26
    22ba:	bb 1f       	adc	r27, r27
    22bc:	a6 17       	cp	r26, r22
    22be:	b7 07       	cpc	r27, r23
    22c0:	10 f0       	brcs	.+4      	; 0x22c6 <__udivmodhi4_ep>
    22c2:	a6 1b       	sub	r26, r22
    22c4:	b7 0b       	sbc	r27, r23

000022c6 <__udivmodhi4_ep>:
    22c6:	88 1f       	adc	r24, r24
    22c8:	99 1f       	adc	r25, r25
    22ca:	5a 95       	dec	r21
    22cc:	a9 f7       	brne	.-22     	; 0x22b8 <__udivmodhi4_loop>
    22ce:	80 95       	com	r24
    22d0:	90 95       	com	r25
    22d2:	bc 01       	movw	r22, r24
    22d4:	cd 01       	movw	r24, r26
    22d6:	08 95       	ret

000022d8 <__udivmodsi4>:
    22d8:	a1 e2       	ldi	r26, 0x21	; 33
    22da:	1a 2e       	mov	r1, r26
    22dc:	aa 1b       	sub	r26, r26
    22de:	bb 1b       	sub	r27, r27
    22e0:	fd 01       	movw	r30, r26
    22e2:	0d c0       	rjmp	.+26     	; 0x22fe <__udivmodsi4_ep>

000022e4 <__udivmodsi4_loop>:
    22e4:	aa 1f       	adc	r26, r26
    22e6:	bb 1f       	adc	r27, r27
    22e8:	ee 1f       	adc	r30, r30
    22ea:	ff 1f       	adc	r31, r31
    22ec:	a2 17       	cp	r26, r18
    22ee:	b3 07       	cpc	r27, r19
    22f0:	e4 07       	cpc	r30, r20
    22f2:	f5 07       	cpc	r31, r21
    22f4:	20 f0       	brcs	.+8      	; 0x22fe <__udivmodsi4_ep>
    22f6:	a2 1b       	sub	r26, r18
    22f8:	b3 0b       	sbc	r27, r19
    22fa:	e4 0b       	sbc	r30, r20
    22fc:	f5 0b       	sbc	r31, r21

000022fe <__udivmodsi4_ep>:
    22fe:	66 1f       	adc	r22, r22
    2300:	77 1f       	adc	r23, r23
    2302:	88 1f       	adc	r24, r24
    2304:	99 1f       	adc	r25, r25
    2306:	1a 94       	dec	r1
    2308:	69 f7       	brne	.-38     	; 0x22e4 <__udivmodsi4_loop>
    230a:	60 95       	com	r22
    230c:	70 95       	com	r23
    230e:	80 95       	com	r24
    2310:	90 95       	com	r25
    2312:	9b 01       	movw	r18, r22
    2314:	ac 01       	movw	r20, r24
    2316:	bd 01       	movw	r22, r26
    2318:	cf 01       	movw	r24, r30
    231a:	08 95       	ret

0000231c <__umulhisi3>:
    231c:	a2 9f       	mul	r26, r18
    231e:	b0 01       	movw	r22, r0
    2320:	b3 9f       	mul	r27, r19
    2322:	c0 01       	movw	r24, r0
    2324:	a3 9f       	mul	r26, r19
    2326:	70 0d       	add	r23, r0
    2328:	81 1d       	adc	r24, r1
    232a:	11 24       	eor	r1, r1
    232c:	91 1d       	adc	r25, r1
    232e:	b2 9f       	mul	r27, r18
    2330:	70 0d       	add	r23, r0
    2332:	81 1d       	adc	r24, r1
    2334:	11 24       	eor	r1, r1
    2336:	91 1d       	adc	r25, r1
    2338:	08 95       	ret

0000233a <setjmp>:
    233a:	dc 01       	movw	r26, r24
    233c:	2d 92       	st	X+, r2
    233e:	3d 92       	st	X+, r3
    2340:	4d 92       	st	X+, r4
    2342:	5d 92       	st	X+, r5
    2344:	6d 92       	st	X+, r6
    2346:	7d 92       	st	X+, r7
    2348:	8d 92       	st	X+, r8
    234a:	9d 92       	st	X+, r9
    234c:	ad 92       	st	X+, r10
    234e:	bd 92       	st	X+, r11
    2350:	cd 92       	st	X+, r12
    2352:	dd 92       	st	X+, r13
    2354:	ed 92       	st	X+, r14
    2356:	fd 92       	st	X+, r15
    2358:	0d 93       	st	X+, r16
    235a:	1d 93       	st	X+, r17
    235c:	cd 93       	st	X+, r28
    235e:	dd 93       	st	X+, r29
    2360:	ff 91       	pop	r31
    2362:	ef 91       	pop	r30
    2364:	8d b7       	in	r24, 0x3d	; 61
    2366:	8d 93       	st	X+, r24
    2368:	8e b7       	in	r24, 0x3e	; 62
    236a:	8d 93       	st	X+, r24
    236c:	8f b7       	in	r24, 0x3f	; 63
    236e:	8d 93       	st	X+, r24
    2370:	ed 93       	st	X+, r30
    2372:	fd 93       	st	X+, r31
    2374:	88 27       	eor	r24, r24
    2376:	99 27       	eor	r25, r25
    2378:	09 94       	ijmp

0000237a <longjmp>:
    237a:	dc 01       	movw	r26, r24
    237c:	cb 01       	movw	r24, r22
    237e:	81 30       	cpi	r24, 0x01	; 1
    2380:	91 05       	cpc	r25, r1
    2382:	81 1d       	adc	r24, r1
    2384:	2d 90       	ld	r2, X+
    2386:	3d 90       	ld	r3, X+
    2388:	4d 90       	ld	r4, X+
    238a:	5d 90       	ld	r5, X+
    238c:	6d 90       	ld	r6, X+
    238e:	7d 90       	ld	r7, X+
    2390:	8d 90       	ld	r8, X+
    2392:	9d 90       	ld	r9, X+
    2394:	ad 90       	ld	r10, X+
    2396:	bd 90       	ld	r11, X+
    2398:	cd 90       	ld	r12, X+
    239a:	dd 90       	ld	r13, X+
    239c:	ed 90       	ld	r14, X+
    239e:	fd 90       	ld	r15, X+
    23a0:	0d 91       	ld	r16, X+
    23a2:	1d 91       	ld	r17, X+
    23a4:	cd 91       	ld	r28, X+
    23a6:	dd 91       	ld	r29, X+
    23a8:	ed 91       	ld	r30, X+
    23aa:	fd 91       	ld	r31, X+
    23ac:	0d 90       	ld	r0, X+
    23ae:	f8 94       	cli
    23b0:	fe bf       	out	0x3e, r31	; 62
    23b2:	0f be       	out	0x3f, r0	; 63
    23b4:	ed bf       	out	0x3d, r30	; 61
    23b6:	ed 91       	ld	r30, X+
    23b8:	fd 91       	ld	r31, X+
    23ba:	09 94       	ijmp

000023bc <_exit>:
    23bc:	f8 94       	cli

000023be <__stop_program>:
    23be:	ff cf       	rjmp	.-2      	; 0x23be <__stop_program>
