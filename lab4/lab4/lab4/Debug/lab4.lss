
lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000086  00800100  0000219c  00002230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000219c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000035f  00800186  00800186  000022b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000022b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000022e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000270  00000000  00000000  00002328  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002e79  00000000  00000000  00002598  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010a8  00000000  00000000  00005411  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001640  00000000  00000000  000064b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000cc4  00000000  00000000  00007afc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a81  00000000  00000000  000087c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002a81  00000000  00000000  00009241  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000220  00000000  00000000  0000bcc2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 c6 04 	jmp	0x98c	; 0x98c <__vector_1>
       8:	0c 94 32 05 	jmp	0xa64	; 0xa64 <__vector_2>
       c:	0c 94 9e 05 	jmp	0xb3c	; 0xb3c <__vector_3>
      10:	0c 94 0a 06 	jmp	0xc14	; 0xc14 <__vector_4>
      14:	0c 94 76 06 	jmp	0xcec	; 0xcec <__vector_5>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 4d 0d 	jmp	0x1a9a	; 0x1a9a <__vector_7>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 fb 0c 	jmp	0x19f6	; 0x19f6 <__vector_9>
      28:	0c 94 e2 06 	jmp	0xdc4	; 0xdc4 <__vector_10>
      2c:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__vector_11>
      30:	0c 94 ba 07 	jmp	0xf74	; 0xf74 <__vector_12>
      34:	0c 94 26 08 	jmp	0x104c	; 0x104c <__vector_13>
      38:	0c 94 92 08 	jmp	0x1124	; 0x1124 <__vector_14>
      3c:	0c 94 fe 08 	jmp	0x11fc	; 0x11fc <__vector_15>
      40:	0c 94 6a 09 	jmp	0x12d4	; 0x12d4 <__vector_16>
      44:	0c 94 d6 09 	jmp	0x13ac	; 0x13ac <__vector_17>
      48:	0c 94 42 0a 	jmp	0x1484	; 0x1484 <__vector_18>
      4c:	0c 94 ae 0a 	jmp	0x155c	; 0x155c <__vector_19>
      50:	0c 94 1a 0b 	jmp	0x1634	; 0x1634 <__vector_20>
      54:	0c 94 86 0b 	jmp	0x170c	; 0x170c <__vector_21>
      58:	0c 94 f2 0b 	jmp	0x17e4	; 0x17e4 <__vector_22>
      5c:	8c 00       	.word	0x008c	; ????
      5e:	6e 00       	.word	0x006e	; ????
      60:	71 00       	.word	0x0071	; ????
      62:	74 00       	.word	0x0074	; ????
      64:	77 00       	.word	0x0077	; ????
      66:	7a 00       	.word	0x007a	; ????
      68:	7d 00       	.word	0x007d	; ????
      6a:	80 00       	.word	0x0080	; ????
      6c:	83 00       	.word	0x0083	; ????
      6e:	86 00       	.word	0x0086	; ????

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	11 e0       	ldi	r17, 0x01	; 1
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	ec e9       	ldi	r30, 0x9C	; 156
      84:	f1 e2       	ldi	r31, 0x21	; 33
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	a6 38       	cpi	r26, 0x86	; 134
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	24 e0       	ldi	r18, 0x04	; 4
      94:	a6 e8       	ldi	r26, 0x86	; 134
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	a5 3e       	cpi	r26, 0xE5	; 229
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 ca 03 	call	0x794	; 0x794 <main>
      a6:	0c 94 cc 10 	jmp	0x2198	; 0x2198 <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <LCD_init>:
#include "PulseGen.h"
#include "TinyTimber.h"

void LCD_init() {
	// LCD(Contrast Control Register), LCD(Display Configuration)(000): 300 s, LCD(Contrast Control)(1111): 3.35 V
	LCDCCR = (0 << LCDDC0) | (0 << LCDDC1) | (0 << LCDDC2) | (1 << LCDCC0) | (1 << LCDCC1) | (1 << LCDCC2) | (1 << LCDCC3);
      ae:	8f e0       	ldi	r24, 0x0F	; 15
      b0:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__DATA_REGION_ORIGIN__+0x87>
	// LCDCS: asynchronous clock, LCDMUX(11): D=1/4, B=1/3, LCD(Port Mask): 25 segments
	LCDCRB = (1 << LCDCS) | (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM2) | (1 << LCDPM1) | (1 << LCDPM0);
      b4:	87 eb       	ldi	r24, 0xB7	; 183
      b6:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
	// LCD(Clock Divide)(111): (D=8) 32Hz
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);
      ba:	87 e0       	ldi	r24, 0x07	; 7
      bc:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__DATA_REGION_ORIGIN__+0x86>
	// LCD(Control and Status Register A), LCD(Enable): True, LCD(Low Power Waveform): True, (no frame interrupt, no blanking)
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
      c0:	80 ec       	ldi	r24, 0xC0	; 192
      c2:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
      c6:	08 95       	ret

000000c8 <getSegmentForChar>:
int none[] = {0b0000, 0b0000, 0b0000, 0b0000};

// Returns wall of data based on char input ('0' = 48 (char))
int* getSegmentForChar(char ch) {

	switch (ch) {
      c8:	90 e0       	ldi	r25, 0x00	; 0
      ca:	fc 01       	movw	r30, r24
      cc:	f0 97       	sbiw	r30, 0x30	; 48
      ce:	ea 30       	cpi	r30, 0x0A	; 10
      d0:	f1 05       	cpc	r31, r1
      d2:	f8 f4       	brcc	.+62     	; 0x112 <getSegmentForChar+0x4a>
      d4:	e2 5d       	subi	r30, 0xD2	; 210
      d6:	ff 4f       	sbci	r31, 0xFF	; 255
      d8:	0c 94 63 10 	jmp	0x20c6	; 0x20c6 <__tablejump2__>
		case '0': return zero;
		case '1': return one;
      dc:	80 e4       	ldi	r24, 0x40	; 64
      de:	91 e0       	ldi	r25, 0x01	; 1
      e0:	08 95       	ret
		case '2': return two;
      e2:	88 e3       	ldi	r24, 0x38	; 56
      e4:	91 e0       	ldi	r25, 0x01	; 1
      e6:	08 95       	ret
		case '3': return three;
      e8:	80 e3       	ldi	r24, 0x30	; 48
      ea:	91 e0       	ldi	r25, 0x01	; 1
      ec:	08 95       	ret
		case '4': return four;
      ee:	88 e2       	ldi	r24, 0x28	; 40
      f0:	91 e0       	ldi	r25, 0x01	; 1
      f2:	08 95       	ret
		case '5': return five;
      f4:	80 e2       	ldi	r24, 0x20	; 32
      f6:	91 e0       	ldi	r25, 0x01	; 1
      f8:	08 95       	ret
		case '6': return six;
      fa:	88 e1       	ldi	r24, 0x18	; 24
      fc:	91 e0       	ldi	r25, 0x01	; 1
      fe:	08 95       	ret
		case '7': return seven;
     100:	80 e1       	ldi	r24, 0x10	; 16
     102:	91 e0       	ldi	r25, 0x01	; 1
     104:	08 95       	ret
		case '8': return eight;
     106:	88 e0       	ldi	r24, 0x08	; 8
     108:	91 e0       	ldi	r25, 0x01	; 1
     10a:	08 95       	ret
		case '9': return nine;
     10c:	80 e0       	ldi	r24, 0x00	; 0
     10e:	91 e0       	ldi	r25, 0x01	; 1
     110:	08 95       	ret
		default:  return none;
     112:	86 e8       	ldi	r24, 0x86	; 134
     114:	91 e0       	ldi	r25, 0x01	; 1
     116:	08 95       	ret

// Returns wall of data based on char input ('0' = 48 (char))
int* getSegmentForChar(char ch) {

	switch (ch) {
		case '0': return zero;
     118:	88 e4       	ldi	r24, 0x48	; 72
     11a:	91 e0       	ldi	r25, 0x01	; 1
		case '7': return seven;
		case '8': return eight;
		case '9': return nine;
		default:  return none;
	}
}
     11c:	08 95       	ret

0000011e <writeChar>:

// Write a char ch at position pos
void writeChar(char ch, uint8_t pos) {
     11e:	cf 93       	push	r28
	// Check if outside range
	if (pos > 5 || pos < 0) return;	
     120:	66 30       	cpi	r22, 0x06	; 6
     122:	08 f0       	brcs	.+2      	; 0x126 <writeChar+0x8>
     124:	e4 c0       	rjmp	.+456    	; 0x2ee <writeChar+0x1d0>
     126:	c6 2f       	mov	r28, r22

	// Get correct char data
	int* segment = getSegmentForChar(ch);
     128:	0e 94 64 00 	call	0xc8	; 0xc8 <getSegmentForChar>
     12c:	fc 01       	movw	r30, r24
	
	// Chose position
	switch (pos) {
     12e:	c2 30       	cpi	r28, 0x02	; 2
     130:	09 f4       	brne	.+2      	; 0x134 <writeChar+0x16>
     132:	67 c0       	rjmp	.+206    	; 0x202 <writeChar+0xe4>
     134:	28 f4       	brcc	.+10     	; 0x140 <writeChar+0x22>
     136:	cc 23       	and	r28, r28
     138:	51 f0       	breq	.+20     	; 0x14e <writeChar+0x30>
     13a:	c1 30       	cpi	r28, 0x01	; 1
     13c:	29 f1       	breq	.+74     	; 0x188 <writeChar+0x6a>
     13e:	d7 c0       	rjmp	.+430    	; 0x2ee <writeChar+0x1d0>
     140:	c3 30       	cpi	r28, 0x03	; 3
     142:	09 f4       	brne	.+2      	; 0x146 <writeChar+0x28>
     144:	7b c0       	rjmp	.+246    	; 0x23c <writeChar+0x11e>
     146:	c4 30       	cpi	r28, 0x04	; 4
     148:	09 f4       	brne	.+2      	; 0x14c <writeChar+0x2e>
     14a:	b5 c0       	rjmp	.+362    	; 0x2b6 <writeChar+0x198>
     14c:	d0 c0       	rjmp	.+416    	; 0x2ee <writeChar+0x1d0>
		case 0:
			// Segment start at 0, 5, 10, 15, higher 4 bits.
			// (LCDDR0 & 0xF0) clears the segment before writing 
			LCDDR0 = (LCDDR0 & 0xF0) | segment[0];
     14e:	ac ee       	ldi	r26, 0xEC	; 236
     150:	b0 e0       	ldi	r27, 0x00	; 0
     152:	8c 91       	ld	r24, X
     154:	80 7f       	andi	r24, 0xF0	; 240
     156:	90 81       	ld	r25, Z
     158:	89 2b       	or	r24, r25
     15a:	8c 93       	st	X, r24
			LCDDR5 = (LCDDR5 & 0xF0) | segment[1];
     15c:	a1 ef       	ldi	r26, 0xF1	; 241
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	8c 91       	ld	r24, X
     162:	80 7f       	andi	r24, 0xF0	; 240
     164:	92 81       	ldd	r25, Z+2	; 0x02
     166:	89 2b       	or	r24, r25
     168:	8c 93       	st	X, r24
			LCDDR10 = (LCDDR10 & 0xF0) | segment[2];
     16a:	a6 ef       	ldi	r26, 0xF6	; 246
     16c:	b0 e0       	ldi	r27, 0x00	; 0
     16e:	8c 91       	ld	r24, X
     170:	80 7f       	andi	r24, 0xF0	; 240
     172:	94 81       	ldd	r25, Z+4	; 0x04
     174:	89 2b       	or	r24, r25
     176:	8c 93       	st	X, r24
			LCDDR15 = (LCDDR15 & 0xF0) | segment[3];
     178:	ab ef       	ldi	r26, 0xFB	; 251
     17a:	b0 e0       	ldi	r27, 0x00	; 0
     17c:	8c 91       	ld	r24, X
     17e:	80 7f       	andi	r24, 0xF0	; 240
     180:	96 81       	ldd	r25, Z+6	; 0x06
     182:	89 2b       	or	r24, r25
     184:	8c 93       	st	X, r24
			break;
     186:	b3 c0       	rjmp	.+358    	; 0x2ee <writeChar+0x1d0>
		case 1:
			// Same segment just lower 4 bits
			LCDDR0 = (LCDDR0 & 0x0F) | (segment[0] << 4);
     188:	ac ee       	ldi	r26, 0xEC	; 236
     18a:	b0 e0       	ldi	r27, 0x00	; 0
     18c:	2c 91       	ld	r18, X
     18e:	80 81       	ld	r24, Z
     190:	91 81       	ldd	r25, Z+1	; 0x01
     192:	82 95       	swap	r24
     194:	92 95       	swap	r25
     196:	90 7f       	andi	r25, 0xF0	; 240
     198:	98 27       	eor	r25, r24
     19a:	80 7f       	andi	r24, 0xF0	; 240
     19c:	98 27       	eor	r25, r24
     19e:	92 2f       	mov	r25, r18
     1a0:	9f 70       	andi	r25, 0x0F	; 15
     1a2:	89 2b       	or	r24, r25
     1a4:	8c 93       	st	X, r24
			LCDDR5 = (LCDDR5 & 0x0F) | (segment[1] << 4);
     1a6:	a1 ef       	ldi	r26, 0xF1	; 241
     1a8:	b0 e0       	ldi	r27, 0x00	; 0
     1aa:	2c 91       	ld	r18, X
     1ac:	82 81       	ldd	r24, Z+2	; 0x02
     1ae:	93 81       	ldd	r25, Z+3	; 0x03
     1b0:	82 95       	swap	r24
     1b2:	92 95       	swap	r25
     1b4:	90 7f       	andi	r25, 0xF0	; 240
     1b6:	98 27       	eor	r25, r24
     1b8:	80 7f       	andi	r24, 0xF0	; 240
     1ba:	98 27       	eor	r25, r24
     1bc:	92 2f       	mov	r25, r18
     1be:	9f 70       	andi	r25, 0x0F	; 15
     1c0:	89 2b       	or	r24, r25
     1c2:	8c 93       	st	X, r24
			LCDDR10 = (LCDDR10 & 0x0F) | (segment[2] << 4);
     1c4:	a6 ef       	ldi	r26, 0xF6	; 246
     1c6:	b0 e0       	ldi	r27, 0x00	; 0
     1c8:	2c 91       	ld	r18, X
     1ca:	84 81       	ldd	r24, Z+4	; 0x04
     1cc:	95 81       	ldd	r25, Z+5	; 0x05
     1ce:	82 95       	swap	r24
     1d0:	92 95       	swap	r25
     1d2:	90 7f       	andi	r25, 0xF0	; 240
     1d4:	98 27       	eor	r25, r24
     1d6:	80 7f       	andi	r24, 0xF0	; 240
     1d8:	98 27       	eor	r25, r24
     1da:	92 2f       	mov	r25, r18
     1dc:	9f 70       	andi	r25, 0x0F	; 15
     1de:	89 2b       	or	r24, r25
     1e0:	8c 93       	st	X, r24
			LCDDR15 = (LCDDR15 & 0x0F) | (segment[3] << 4);
     1e2:	ab ef       	ldi	r26, 0xFB	; 251
     1e4:	b0 e0       	ldi	r27, 0x00	; 0
     1e6:	2c 91       	ld	r18, X
     1e8:	86 81       	ldd	r24, Z+6	; 0x06
     1ea:	97 81       	ldd	r25, Z+7	; 0x07
     1ec:	82 95       	swap	r24
     1ee:	92 95       	swap	r25
     1f0:	90 7f       	andi	r25, 0xF0	; 240
     1f2:	98 27       	eor	r25, r24
     1f4:	80 7f       	andi	r24, 0xF0	; 240
     1f6:	98 27       	eor	r25, r24
     1f8:	92 2f       	mov	r25, r18
     1fa:	9f 70       	andi	r25, 0x0F	; 15
     1fc:	89 2b       	or	r24, r25
     1fe:	8c 93       	st	X, r24
			break;
     200:	76 c0       	rjmp	.+236    	; 0x2ee <writeChar+0x1d0>
		case 2:
			LCDDR1 = (LCDDR1 & 0xF0) | segment[0];
     202:	ad ee       	ldi	r26, 0xED	; 237
     204:	b0 e0       	ldi	r27, 0x00	; 0
     206:	8c 91       	ld	r24, X
     208:	80 7f       	andi	r24, 0xF0	; 240
     20a:	90 81       	ld	r25, Z
     20c:	89 2b       	or	r24, r25
     20e:	8c 93       	st	X, r24
			LCDDR6 = (LCDDR6 & 0xF0) | segment[1];
     210:	a2 ef       	ldi	r26, 0xF2	; 242
     212:	b0 e0       	ldi	r27, 0x00	; 0
     214:	8c 91       	ld	r24, X
     216:	80 7f       	andi	r24, 0xF0	; 240
     218:	92 81       	ldd	r25, Z+2	; 0x02
     21a:	89 2b       	or	r24, r25
     21c:	8c 93       	st	X, r24
			LCDDR11 = (LCDDR11 & 0xF0) | segment[2];
     21e:	a7 ef       	ldi	r26, 0xF7	; 247
     220:	b0 e0       	ldi	r27, 0x00	; 0
     222:	8c 91       	ld	r24, X
     224:	80 7f       	andi	r24, 0xF0	; 240
     226:	94 81       	ldd	r25, Z+4	; 0x04
     228:	89 2b       	or	r24, r25
     22a:	8c 93       	st	X, r24
			LCDDR16 = (LCDDR16 & 0xF0) | segment[3];
     22c:	ac ef       	ldi	r26, 0xFC	; 252
     22e:	b0 e0       	ldi	r27, 0x00	; 0
     230:	8c 91       	ld	r24, X
     232:	80 7f       	andi	r24, 0xF0	; 240
     234:	96 81       	ldd	r25, Z+6	; 0x06
     236:	89 2b       	or	r24, r25
     238:	8c 93       	st	X, r24
			break;
     23a:	59 c0       	rjmp	.+178    	; 0x2ee <writeChar+0x1d0>
		case 3:
			LCDDR1 = (LCDDR1 & 0x0F) | (segment[0] << 4);
     23c:	ad ee       	ldi	r26, 0xED	; 237
     23e:	b0 e0       	ldi	r27, 0x00	; 0
     240:	2c 91       	ld	r18, X
     242:	80 81       	ld	r24, Z
     244:	91 81       	ldd	r25, Z+1	; 0x01
     246:	82 95       	swap	r24
     248:	92 95       	swap	r25
     24a:	90 7f       	andi	r25, 0xF0	; 240
     24c:	98 27       	eor	r25, r24
     24e:	80 7f       	andi	r24, 0xF0	; 240
     250:	98 27       	eor	r25, r24
     252:	92 2f       	mov	r25, r18
     254:	9f 70       	andi	r25, 0x0F	; 15
     256:	89 2b       	or	r24, r25
     258:	8c 93       	st	X, r24
			LCDDR6 = (LCDDR6 & 0x0F) | (segment[1] << 4);
     25a:	a2 ef       	ldi	r26, 0xF2	; 242
     25c:	b0 e0       	ldi	r27, 0x00	; 0
     25e:	2c 91       	ld	r18, X
     260:	82 81       	ldd	r24, Z+2	; 0x02
     262:	93 81       	ldd	r25, Z+3	; 0x03
     264:	82 95       	swap	r24
     266:	92 95       	swap	r25
     268:	90 7f       	andi	r25, 0xF0	; 240
     26a:	98 27       	eor	r25, r24
     26c:	80 7f       	andi	r24, 0xF0	; 240
     26e:	98 27       	eor	r25, r24
     270:	92 2f       	mov	r25, r18
     272:	9f 70       	andi	r25, 0x0F	; 15
     274:	89 2b       	or	r24, r25
     276:	8c 93       	st	X, r24
			LCDDR11 = (LCDDR11 & 0x0F) | (segment[2] << 4);
     278:	a7 ef       	ldi	r26, 0xF7	; 247
     27a:	b0 e0       	ldi	r27, 0x00	; 0
     27c:	2c 91       	ld	r18, X
     27e:	84 81       	ldd	r24, Z+4	; 0x04
     280:	95 81       	ldd	r25, Z+5	; 0x05
     282:	82 95       	swap	r24
     284:	92 95       	swap	r25
     286:	90 7f       	andi	r25, 0xF0	; 240
     288:	98 27       	eor	r25, r24
     28a:	80 7f       	andi	r24, 0xF0	; 240
     28c:	98 27       	eor	r25, r24
     28e:	92 2f       	mov	r25, r18
     290:	9f 70       	andi	r25, 0x0F	; 15
     292:	89 2b       	or	r24, r25
     294:	8c 93       	st	X, r24
			LCDDR16 = (LCDDR16 & 0x0F) | (segment[3] << 4);
     296:	ac ef       	ldi	r26, 0xFC	; 252
     298:	b0 e0       	ldi	r27, 0x00	; 0
     29a:	2c 91       	ld	r18, X
     29c:	86 81       	ldd	r24, Z+6	; 0x06
     29e:	97 81       	ldd	r25, Z+7	; 0x07
     2a0:	82 95       	swap	r24
     2a2:	92 95       	swap	r25
     2a4:	90 7f       	andi	r25, 0xF0	; 240
     2a6:	98 27       	eor	r25, r24
     2a8:	80 7f       	andi	r24, 0xF0	; 240
     2aa:	98 27       	eor	r25, r24
     2ac:	92 2f       	mov	r25, r18
     2ae:	9f 70       	andi	r25, 0x0F	; 15
     2b0:	89 2b       	or	r24, r25
     2b2:	8c 93       	st	X, r24
			break;
     2b4:	1c c0       	rjmp	.+56     	; 0x2ee <writeChar+0x1d0>
		case 4:
			LCDDR2 = (LCDDR2 & 0xF0) | segment[0];
     2b6:	ae ee       	ldi	r26, 0xEE	; 238
     2b8:	b0 e0       	ldi	r27, 0x00	; 0
     2ba:	8c 91       	ld	r24, X
     2bc:	80 7f       	andi	r24, 0xF0	; 240
     2be:	90 81       	ld	r25, Z
     2c0:	89 2b       	or	r24, r25
     2c2:	8c 93       	st	X, r24
			LCDDR7 = (LCDDR7 & 0xF0) | segment[1];
     2c4:	a3 ef       	ldi	r26, 0xF3	; 243
     2c6:	b0 e0       	ldi	r27, 0x00	; 0
     2c8:	8c 91       	ld	r24, X
     2ca:	80 7f       	andi	r24, 0xF0	; 240
     2cc:	92 81       	ldd	r25, Z+2	; 0x02
     2ce:	89 2b       	or	r24, r25
     2d0:	8c 93       	st	X, r24
			LCDDR12 = (LCDDR12 & 0xF0) | segment[2];
     2d2:	a8 ef       	ldi	r26, 0xF8	; 248
     2d4:	b0 e0       	ldi	r27, 0x00	; 0
     2d6:	8c 91       	ld	r24, X
     2d8:	80 7f       	andi	r24, 0xF0	; 240
     2da:	94 81       	ldd	r25, Z+4	; 0x04
     2dc:	89 2b       	or	r24, r25
     2de:	8c 93       	st	X, r24
			LCDDR17 = (LCDDR17 & 0xF0) | segment[3];
     2e0:	ad ef       	ldi	r26, 0xFD	; 253
     2e2:	b0 e0       	ldi	r27, 0x00	; 0
     2e4:	8c 91       	ld	r24, X
     2e6:	80 7f       	andi	r24, 0xF0	; 240
     2e8:	96 81       	ldd	r25, Z+6	; 0x06
     2ea:	89 2b       	or	r24, r25
     2ec:	8c 93       	st	X, r24
			break;
	}
}
     2ee:	cf 91       	pop	r28
     2f0:	08 95       	ret

000002f2 <printAt>:

void printAt(long num, int pos) {
     2f2:	8f 92       	push	r8
     2f4:	9f 92       	push	r9
     2f6:	af 92       	push	r10
     2f8:	bf 92       	push	r11
     2fa:	cf 92       	push	r12
     2fc:	df 92       	push	r13
     2fe:	ef 92       	push	r14
     300:	ff 92       	push	r15
     302:	cf 93       	push	r28
     304:	df 93       	push	r29
     306:	4b 01       	movw	r8, r22
     308:	5c 01       	movw	r10, r24
     30a:	ea 01       	movw	r28, r20
	writeChar((num % 100) / 10 + '0', pos);
     30c:	24 e6       	ldi	r18, 0x64	; 100
     30e:	30 e0       	ldi	r19, 0x00	; 0
     310:	40 e0       	ldi	r20, 0x00	; 0
     312:	50 e0       	ldi	r21, 0x00	; 0
     314:	0e 94 44 10 	call	0x2088	; 0x2088 <__divmodsi4>
     318:	0f 2e       	mov	r0, r31
     31a:	fa e0       	ldi	r31, 0x0A	; 10
     31c:	cf 2e       	mov	r12, r31
     31e:	d1 2c       	mov	r13, r1
     320:	e1 2c       	mov	r14, r1
     322:	f1 2c       	mov	r15, r1
     324:	f0 2d       	mov	r31, r0
     326:	a7 01       	movw	r20, r14
     328:	96 01       	movw	r18, r12
     32a:	0e 94 44 10 	call	0x2088	; 0x2088 <__divmodsi4>
     32e:	6c 2f       	mov	r22, r28
     330:	80 e3       	ldi	r24, 0x30	; 48
     332:	82 0f       	add	r24, r18
     334:	0e 94 8f 00 	call	0x11e	; 0x11e <writeChar>
	pos++;
	writeChar(num % 10 + '0', pos);
     338:	21 96       	adiw	r28, 0x01	; 1
     33a:	c5 01       	movw	r24, r10
     33c:	b4 01       	movw	r22, r8
     33e:	a7 01       	movw	r20, r14
     340:	96 01       	movw	r18, r12
     342:	0e 94 44 10 	call	0x2088	; 0x2088 <__divmodsi4>
     346:	86 2f       	mov	r24, r22
     348:	6c 2f       	mov	r22, r28
     34a:	80 5d       	subi	r24, 0xD0	; 208
     34c:	0e 94 8f 00 	call	0x11e	; 0x11e <writeChar>
}
     350:	df 91       	pop	r29
     352:	cf 91       	pop	r28
     354:	ff 90       	pop	r15
     356:	ef 90       	pop	r14
     358:	df 90       	pop	r13
     35a:	cf 90       	pop	r12
     35c:	bf 90       	pop	r11
     35e:	af 90       	pop	r10
     360:	9f 90       	pop	r9
     362:	8f 90       	pop	r8
     364:	08 95       	ret

00000366 <activeGenIndicator>:

void activeGenIndicator(GUI *self) {
	//turn on 1 or 2
	if (self->activeGen == self->gen1) {
     366:	fc 01       	movw	r30, r24
     368:	20 85       	ldd	r18, Z+8	; 0x08
     36a:	31 85       	ldd	r19, Z+9	; 0x09
     36c:	84 81       	ldd	r24, Z+4	; 0x04
     36e:	95 81       	ldd	r25, Z+5	; 0x05
     370:	28 17       	cp	r18, r24
     372:	39 07       	cpc	r19, r25
     374:	31 f4       	brne	.+12     	; 0x382 <activeGenIndicator+0x1c>
		LCDDR0 |= 0b00000100;
     376:	ec ee       	ldi	r30, 0xEC	; 236
     378:	f0 e0       	ldi	r31, 0x00	; 0
     37a:	80 81       	ld	r24, Z
     37c:	84 60       	ori	r24, 0x04	; 4
     37e:	80 83       	st	Z, r24
     380:	08 95       	ret
	} else {
		LCDDR0 |= 0b01000000;
     382:	ec ee       	ldi	r30, 0xEC	; 236
     384:	f0 e0       	ldi	r31, 0x00	; 0
     386:	80 81       	ld	r24, Z
     388:	80 64       	ori	r24, 0x40	; 64
     38a:	80 83       	st	Z, r24
     38c:	08 95       	ret

0000038e <updateDisplay>:
		SYNC(self->activeGen, setFrequency, 0);
	}
	ASYNC(self, updateDisplay, 0);
}

void updateDisplay(GUI *self) {
     38e:	ef 92       	push	r14
     390:	ff 92       	push	r15
     392:	0f 93       	push	r16
     394:	1f 93       	push	r17
     396:	cf 93       	push	r28
     398:	df 93       	push	r29
     39a:	ec 01       	movw	r28, r24
	int gen1Freq = SYNC(self->gen1, getFrequency, 0);
     39c:	40 e0       	ldi	r20, 0x00	; 0
     39e:	50 e0       	ldi	r21, 0x00	; 0
     3a0:	69 ef       	ldi	r22, 0xF9	; 249
     3a2:	73 e0       	ldi	r23, 0x03	; 3
     3a4:	8c 81       	ldd	r24, Y+4	; 0x04
     3a6:	9d 81       	ldd	r25, Y+5	; 0x05
     3a8:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <sync>
     3ac:	7c 01       	movw	r14, r24
	int gen2Freq = SYNC(self->gen2, getFrequency, 0);
     3ae:	40 e0       	ldi	r20, 0x00	; 0
     3b0:	50 e0       	ldi	r21, 0x00	; 0
     3b2:	69 ef       	ldi	r22, 0xF9	; 249
     3b4:	73 e0       	ldi	r23, 0x03	; 3
     3b6:	8e 81       	ldd	r24, Y+6	; 0x06
     3b8:	9f 81       	ldd	r25, Y+7	; 0x07
     3ba:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <sync>
     3be:	8c 01       	movw	r16, r24
    printAt(gen1Freq, 0); //gen1 hz at pos 0-1
     3c0:	b7 01       	movw	r22, r14
     3c2:	ff 0c       	add	r15, r15
     3c4:	88 0b       	sbc	r24, r24
     3c6:	99 0b       	sbc	r25, r25
     3c8:	40 e0       	ldi	r20, 0x00	; 0
     3ca:	50 e0       	ldi	r21, 0x00	; 0
     3cc:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printAt>
    printAt(gen2Freq, 3); //gen2 hz at pos 3-4
     3d0:	b8 01       	movw	r22, r16
     3d2:	11 0f       	add	r17, r17
     3d4:	88 0b       	sbc	r24, r24
     3d6:	99 0b       	sbc	r25, r25
     3d8:	43 e0       	ldi	r20, 0x03	; 3
     3da:	50 e0       	ldi	r21, 0x00	; 0
     3dc:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printAt>
	activeGenIndicator(self);
     3e0:	ce 01       	movw	r24, r28
     3e2:	0e 94 b3 01 	call	0x366	; 0x366 <activeGenIndicator>
     3e6:	df 91       	pop	r29
     3e8:	cf 91       	pop	r28
     3ea:	1f 91       	pop	r17
     3ec:	0f 91       	pop	r16
     3ee:	ff 90       	pop	r15
     3f0:	ef 90       	pop	r14
     3f2:	08 95       	ret

000003f4 <swithToLeftGen>:
	} else {
		LCDDR0 |= 0b01000000;
	}
}

void swithToLeftGen(GUI *self) {
     3f4:	cf 92       	push	r12
     3f6:	df 92       	push	r13
     3f8:	ef 92       	push	r14
     3fa:	ff 92       	push	r15
     3fc:	0f 93       	push	r16
     3fe:	1f 93       	push	r17
     400:	cf 93       	push	r28
     402:	df 93       	push	r29
     404:	ec 01       	movw	r28, r24
	self->activeGen = self->gen1;
     406:	8c 81       	ldd	r24, Y+4	; 0x04
     408:	9d 81       	ldd	r25, Y+5	; 0x05
     40a:	99 87       	std	Y+9, r25	; 0x09
     40c:	88 87       	std	Y+8, r24	; 0x08
	SYNC(self->gen1, setStatus, true);
     40e:	41 e0       	ldi	r20, 0x01	; 1
     410:	50 e0       	ldi	r21, 0x00	; 0
     412:	6d ef       	ldi	r22, 0xFD	; 253
     414:	73 e0       	ldi	r23, 0x03	; 3
     416:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <sync>
	SYNC(self->gen2, setStatus, false);
     41a:	40 e0       	ldi	r20, 0x00	; 0
     41c:	50 e0       	ldi	r21, 0x00	; 0
     41e:	6d ef       	ldi	r22, 0xFD	; 253
     420:	73 e0       	ldi	r23, 0x03	; 3
     422:	8e 81       	ldd	r24, Y+6	; 0x06
     424:	9f 81       	ldd	r25, Y+7	; 0x07
     426:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <sync>
	ASYNC(self, updateDisplay, 0);
     42a:	c1 2c       	mov	r12, r1
     42c:	d1 2c       	mov	r13, r1
     42e:	0f 2e       	mov	r0, r31
     430:	f7 ec       	ldi	r31, 0xC7	; 199
     432:	ef 2e       	mov	r14, r31
     434:	f1 e0       	ldi	r31, 0x01	; 1
     436:	ff 2e       	mov	r15, r31
     438:	f0 2d       	mov	r31, r0
     43a:	8e 01       	movw	r16, r28
     43c:	20 e0       	ldi	r18, 0x00	; 0
     43e:	30 e0       	ldi	r19, 0x00	; 0
     440:	a9 01       	movw	r20, r18
     442:	60 e0       	ldi	r22, 0x00	; 0
     444:	70 e0       	ldi	r23, 0x00	; 0
     446:	cb 01       	movw	r24, r22
     448:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <async>
}
     44c:	df 91       	pop	r29
     44e:	cf 91       	pop	r28
     450:	1f 91       	pop	r17
     452:	0f 91       	pop	r16
     454:	ff 90       	pop	r15
     456:	ef 90       	pop	r14
     458:	df 90       	pop	r13
     45a:	cf 90       	pop	r12
     45c:	08 95       	ret

0000045e <swithToRightGen>:

void swithToRightGen(GUI *self) {
     45e:	cf 92       	push	r12
     460:	df 92       	push	r13
     462:	ef 92       	push	r14
     464:	ff 92       	push	r15
     466:	0f 93       	push	r16
     468:	1f 93       	push	r17
     46a:	cf 93       	push	r28
     46c:	df 93       	push	r29
     46e:	ec 01       	movw	r28, r24
	self->activeGen = self->gen2;
     470:	8e 81       	ldd	r24, Y+6	; 0x06
     472:	9f 81       	ldd	r25, Y+7	; 0x07
     474:	99 87       	std	Y+9, r25	; 0x09
     476:	88 87       	std	Y+8, r24	; 0x08
	SYNC(self->gen2, setStatus, true);
     478:	41 e0       	ldi	r20, 0x01	; 1
     47a:	50 e0       	ldi	r21, 0x00	; 0
     47c:	6d ef       	ldi	r22, 0xFD	; 253
     47e:	73 e0       	ldi	r23, 0x03	; 3
     480:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <sync>
	SYNC(self->gen1, setStatus, false);
     484:	40 e0       	ldi	r20, 0x00	; 0
     486:	50 e0       	ldi	r21, 0x00	; 0
     488:	6d ef       	ldi	r22, 0xFD	; 253
     48a:	73 e0       	ldi	r23, 0x03	; 3
     48c:	8c 81       	ldd	r24, Y+4	; 0x04
     48e:	9d 81       	ldd	r25, Y+5	; 0x05
     490:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <sync>
	ASYNC(self, updateDisplay, 0);
     494:	c1 2c       	mov	r12, r1
     496:	d1 2c       	mov	r13, r1
     498:	0f 2e       	mov	r0, r31
     49a:	f7 ec       	ldi	r31, 0xC7	; 199
     49c:	ef 2e       	mov	r14, r31
     49e:	f1 e0       	ldi	r31, 0x01	; 1
     4a0:	ff 2e       	mov	r15, r31
     4a2:	f0 2d       	mov	r31, r0
     4a4:	8e 01       	movw	r16, r28
     4a6:	20 e0       	ldi	r18, 0x00	; 0
     4a8:	30 e0       	ldi	r19, 0x00	; 0
     4aa:	a9 01       	movw	r20, r18
     4ac:	60 e0       	ldi	r22, 0x00	; 0
     4ae:	70 e0       	ldi	r23, 0x00	; 0
     4b0:	cb 01       	movw	r24, r22
     4b2:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <async>
}
     4b6:	df 91       	pop	r29
     4b8:	cf 91       	pop	r28
     4ba:	1f 91       	pop	r17
     4bc:	0f 91       	pop	r16
     4be:	ff 90       	pop	r15
     4c0:	ef 90       	pop	r14
     4c2:	df 90       	pop	r13
     4c4:	cf 90       	pop	r12
     4c6:	08 95       	ret

000004c8 <adjustFrequency>:

void adjustFrequency(GUI *self, int delta) {
     4c8:	cf 92       	push	r12
     4ca:	df 92       	push	r13
     4cc:	ef 92       	push	r14
     4ce:	ff 92       	push	r15
     4d0:	0f 93       	push	r16
     4d2:	1f 93       	push	r17
     4d4:	cf 93       	push	r28
     4d6:	df 93       	push	r29
     4d8:	8c 01       	movw	r16, r24
     4da:	eb 01       	movw	r28, r22
	// Get right target gen
	int newFreq = SYNC(self->activeGen, getFrequency, 0) + delta;
     4dc:	40 e0       	ldi	r20, 0x00	; 0
     4de:	50 e0       	ldi	r21, 0x00	; 0
     4e0:	69 ef       	ldi	r22, 0xF9	; 249
     4e2:	73 e0       	ldi	r23, 0x03	; 3
     4e4:	fc 01       	movw	r30, r24
     4e6:	80 85       	ldd	r24, Z+8	; 0x08
     4e8:	91 85       	ldd	r25, Z+9	; 0x09
     4ea:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <sync>
     4ee:	ac 01       	movw	r20, r24
     4f0:	4c 0f       	add	r20, r28
     4f2:	5d 1f       	adc	r21, r29
	if (newFreq < 0) newFreq = 0;
	// Update everything
	SYNC(self->activeGen, setFrequency, newFreq);
     4f4:	55 23       	and	r21, r21
     4f6:	14 f4       	brge	.+4      	; 0x4fc <adjustFrequency+0x34>
     4f8:	40 e0       	ldi	r20, 0x00	; 0
     4fa:	50 e0       	ldi	r21, 0x00	; 0
     4fc:	69 ee       	ldi	r22, 0xE9	; 233
     4fe:	73 e0       	ldi	r23, 0x03	; 3
     500:	f8 01       	movw	r30, r16
     502:	80 85       	ldd	r24, Z+8	; 0x08
     504:	91 85       	ldd	r25, Z+9	; 0x09
     506:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <sync>
	ASYNC(self, updateDisplay, 0);
     50a:	c1 2c       	mov	r12, r1
     50c:	d1 2c       	mov	r13, r1
     50e:	0f 2e       	mov	r0, r31
     510:	f7 ec       	ldi	r31, 0xC7	; 199
     512:	ef 2e       	mov	r14, r31
     514:	f1 e0       	ldi	r31, 0x01	; 1
     516:	ff 2e       	mov	r15, r31
     518:	f0 2d       	mov	r31, r0
     51a:	20 e0       	ldi	r18, 0x00	; 0
     51c:	30 e0       	ldi	r19, 0x00	; 0
     51e:	a9 01       	movw	r20, r18
     520:	60 e0       	ldi	r22, 0x00	; 0
     522:	70 e0       	ldi	r23, 0x00	; 0
     524:	cb 01       	movw	r24, r22
     526:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <async>
}
     52a:	df 91       	pop	r29
     52c:	cf 91       	pop	r28
     52e:	1f 91       	pop	r17
     530:	0f 91       	pop	r16
     532:	ff 90       	pop	r15
     534:	ef 90       	pop	r14
     536:	df 90       	pop	r13
     538:	cf 90       	pop	r12
     53a:	08 95       	ret

0000053c <saveRestore>:

void saveRestore(GUI *self) {
     53c:	cf 92       	push	r12
     53e:	df 92       	push	r13
     540:	ef 92       	push	r14
     542:	ff 92       	push	r15
     544:	0f 93       	push	r16
     546:	1f 93       	push	r17
     548:	cf 93       	push	r28
     54a:	df 93       	push	r29
     54c:	ec 01       	movw	r28, r24
	if (SYNC(self->activeGen, getFrequency, 0) == 0) {
     54e:	40 e0       	ldi	r20, 0x00	; 0
     550:	50 e0       	ldi	r21, 0x00	; 0
     552:	69 ef       	ldi	r22, 0xF9	; 249
     554:	73 e0       	ldi	r23, 0x03	; 3
     556:	88 85       	ldd	r24, Y+8	; 0x08
     558:	99 85       	ldd	r25, Y+9	; 0x09
     55a:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <sync>
     55e:	89 2b       	or	r24, r25
     560:	49 f4       	brne	.+18     	; 0x574 <saveRestore+0x38>
		SYNC(self->activeGen, restore, 0);
     562:	40 e0       	ldi	r20, 0x00	; 0
     564:	50 e0       	ldi	r21, 0x00	; 0
     566:	63 ef       	ldi	r22, 0xF3	; 243
     568:	73 e0       	ldi	r23, 0x03	; 3
     56a:	88 85       	ldd	r24, Y+8	; 0x08
     56c:	99 85       	ldd	r25, Y+9	; 0x09
     56e:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <sync>
     572:	10 c0       	rjmp	.+32     	; 0x594 <saveRestore+0x58>
		} else {
		SYNC(self->activeGen, save, 0);
     574:	40 e0       	ldi	r20, 0x00	; 0
     576:	50 e0       	ldi	r21, 0x00	; 0
     578:	6d ee       	ldi	r22, 0xED	; 237
     57a:	73 e0       	ldi	r23, 0x03	; 3
     57c:	88 85       	ldd	r24, Y+8	; 0x08
     57e:	99 85       	ldd	r25, Y+9	; 0x09
     580:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <sync>
		SYNC(self->activeGen, setFrequency, 0);
     584:	40 e0       	ldi	r20, 0x00	; 0
     586:	50 e0       	ldi	r21, 0x00	; 0
     588:	69 ee       	ldi	r22, 0xE9	; 233
     58a:	73 e0       	ldi	r23, 0x03	; 3
     58c:	88 85       	ldd	r24, Y+8	; 0x08
     58e:	99 85       	ldd	r25, Y+9	; 0x09
     590:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <sync>
	}
	ASYNC(self, updateDisplay, 0);
     594:	c1 2c       	mov	r12, r1
     596:	d1 2c       	mov	r13, r1
     598:	0f 2e       	mov	r0, r31
     59a:	f7 ec       	ldi	r31, 0xC7	; 199
     59c:	ef 2e       	mov	r14, r31
     59e:	f1 e0       	ldi	r31, 0x01	; 1
     5a0:	ff 2e       	mov	r15, r31
     5a2:	f0 2d       	mov	r31, r0
     5a4:	8e 01       	movw	r16, r28
     5a6:	20 e0       	ldi	r18, 0x00	; 0
     5a8:	30 e0       	ldi	r19, 0x00	; 0
     5aa:	a9 01       	movw	r20, r18
     5ac:	60 e0       	ldi	r22, 0x00	; 0
     5ae:	70 e0       	ldi	r23, 0x00	; 0
     5b0:	cb 01       	movw	r24, r22
     5b2:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <async>
}
     5b6:	df 91       	pop	r29
     5b8:	cf 91       	pop	r28
     5ba:	1f 91       	pop	r17
     5bc:	0f 91       	pop	r16
     5be:	ff 90       	pop	r15
     5c0:	ef 90       	pop	r14
     5c2:	df 90       	pop	r13
     5c4:	cf 90       	pop	r12
     5c6:	08 95       	ret

000005c8 <holdDown>:
        ASYNC(self->gui, swithToRightGen, 0);
		//swithToRightGen(self->gui);
    }
}

void holdDown(JoystickHandler *self) {
     5c8:	cf 92       	push	r12
     5ca:	df 92       	push	r13
     5cc:	ef 92       	push	r14
     5ce:	ff 92       	push	r15
     5d0:	0f 93       	push	r16
     5d2:	1f 93       	push	r17
	if (!(PINB & (1 << PB7))) {
     5d4:	1f 99       	sbic	0x03, 7	; 3
     5d6:	1b c0       	rjmp	.+54     	; 0x60e <holdDown+0x46>
     5d8:	8c 01       	movw	r16, r24
		SYNC(self->gui, adjustFrequency, -1);
     5da:	4f ef       	ldi	r20, 0xFF	; 255
     5dc:	5f ef       	ldi	r21, 0xFF	; 255
     5de:	64 e6       	ldi	r22, 0x64	; 100
     5e0:	72 e0       	ldi	r23, 0x02	; 2
     5e2:	fc 01       	movw	r30, r24
     5e4:	84 81       	ldd	r24, Z+4	; 0x04
     5e6:	95 81       	ldd	r25, Z+5	; 0x05
     5e8:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <sync>
        AFTER(MSEC(500), self, holdDown, 0);
     5ec:	c1 2c       	mov	r12, r1
     5ee:	d1 2c       	mov	r13, r1
     5f0:	0f 2e       	mov	r0, r31
     5f2:	f4 ee       	ldi	r31, 0xE4	; 228
     5f4:	ef 2e       	mov	r14, r31
     5f6:	f2 e0       	ldi	r31, 0x02	; 2
     5f8:	ff 2e       	mov	r15, r31
     5fa:	f0 2d       	mov	r31, r0
     5fc:	20 e0       	ldi	r18, 0x00	; 0
     5fe:	30 e0       	ldi	r19, 0x00	; 0
     600:	a9 01       	movw	r20, r18
     602:	69 e0       	ldi	r22, 0x09	; 9
     604:	7d e3       	ldi	r23, 0x3D	; 61
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <async>
	}
}
     60e:	1f 91       	pop	r17
     610:	0f 91       	pop	r16
     612:	ff 90       	pop	r15
     614:	ef 90       	pop	r14
     616:	df 90       	pop	r13
     618:	cf 90       	pop	r12
     61a:	08 95       	ret

0000061c <holdUp>:

void holdUp(JoystickHandler *self) {
     61c:	cf 92       	push	r12
     61e:	df 92       	push	r13
     620:	ef 92       	push	r14
     622:	ff 92       	push	r15
     624:	0f 93       	push	r16
     626:	1f 93       	push	r17
    // If holding down (up) key
    if (!(PINB & (1 << PB6))) {
     628:	1e 99       	sbic	0x03, 6	; 3
     62a:	1b c0       	rjmp	.+54     	; 0x662 <holdUp+0x46>
     62c:	8c 01       	movw	r16, r24
        SYNC(self->gui, adjustFrequency, 1);
     62e:	41 e0       	ldi	r20, 0x01	; 1
     630:	50 e0       	ldi	r21, 0x00	; 0
     632:	64 e6       	ldi	r22, 0x64	; 100
     634:	72 e0       	ldi	r23, 0x02	; 2
     636:	fc 01       	movw	r30, r24
     638:	84 81       	ldd	r24, Z+4	; 0x04
     63a:	95 81       	ldd	r25, Z+5	; 0x05
     63c:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <sync>
        AFTER(MSEC(500), self, holdUp, 0);
     640:	c1 2c       	mov	r12, r1
     642:	d1 2c       	mov	r13, r1
     644:	0f 2e       	mov	r0, r31
     646:	fe e0       	ldi	r31, 0x0E	; 14
     648:	ef 2e       	mov	r14, r31
     64a:	f3 e0       	ldi	r31, 0x03	; 3
     64c:	ff 2e       	mov	r15, r31
     64e:	f0 2d       	mov	r31, r0
     650:	20 e0       	ldi	r18, 0x00	; 0
     652:	30 e0       	ldi	r19, 0x00	; 0
     654:	a9 01       	movw	r20, r18
     656:	69 e0       	ldi	r22, 0x09	; 9
     658:	7d e3       	ldi	r23, 0x3D	; 61
     65a:	80 e0       	ldi	r24, 0x00	; 0
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <async>
    }
}
     662:	1f 91       	pop	r17
     664:	0f 91       	pop	r16
     666:	ff 90       	pop	r15
     668:	ef 90       	pop	r14
     66a:	df 90       	pop	r13
     66c:	cf 90       	pop	r12
     66e:	08 95       	ret

00000670 <joystickInit>:
#include "PulseGen.h"


void joystickInit() {
    // Input for: Down, Up, Click
    PORTB |= (1 << PB7) | (1 << PB6) | (1 << PB4);
     670:	85 b1       	in	r24, 0x05	; 5
     672:	80 6d       	ori	r24, 0xD0	; 208
     674:	85 b9       	out	0x05, r24	; 5
    // Input for; Left, Right
    PORTE |= (1 << PE3) | (1 << PE2);
     676:	8e b1       	in	r24, 0x0e	; 14
     678:	8c 60       	ori	r24, 0x0C	; 12
     67a:	8e b9       	out	0x0e, r24	; 14
    // Turn on interrupts
    EIMSK |= (1 << PCINT15) | (1 << PCINT14);
     67c:	8d b3       	in	r24, 0x1d	; 29
     67e:	80 6c       	ori	r24, 0xC0	; 192
     680:	8d bb       	out	0x1d, r24	; 29

    // Define interrupts from PB7,6,4
    PCMSK1 |= (1 << PCINT15) | (1 << PCINT14) | (1 << PCINT12);
     682:	ec e6       	ldi	r30, 0x6C	; 108
     684:	f0 e0       	ldi	r31, 0x00	; 0
     686:	80 81       	ld	r24, Z
     688:	80 6d       	ori	r24, 0xD0	; 208
     68a:	80 83       	st	Z, r24
    // Define interrupts from PE3,2
    PCMSK0 |= (1 << PCINT3) | (1 << PCINT2);
     68c:	eb e6       	ldi	r30, 0x6B	; 107
     68e:	f0 e0       	ldi	r31, 0x00	; 0
     690:	80 81       	ld	r24, Z
     692:	8c 60       	ori	r24, 0x0C	; 12
     694:	80 83       	st	Z, r24
     696:	08 95       	ret

00000698 <joysticckInteruptHandler>:
}


// Joystick input handler
void joysticckInteruptHandler(JoystickHandler *self) { 
     698:	cf 92       	push	r12
     69a:	df 92       	push	r13
     69c:	ef 92       	push	r14
     69e:	ff 92       	push	r15
     6a0:	0f 93       	push	r16
     6a2:	1f 93       	push	r17
     6a4:	cf 93       	push	r28
     6a6:	df 93       	push	r29
     6a8:	ec 01       	movw	r28, r24
    // Down
    if (!(PINB & (1 << PB7))) {
     6aa:	1f 99       	sbic	0x03, 7	; 3
     6ac:	11 c0       	rjmp	.+34     	; 0x6d0 <joysticckInteruptHandler+0x38>
		ASYNC(self, holdDown, 0);
     6ae:	c1 2c       	mov	r12, r1
     6b0:	d1 2c       	mov	r13, r1
     6b2:	0f 2e       	mov	r0, r31
     6b4:	f4 ee       	ldi	r31, 0xE4	; 228
     6b6:	ef 2e       	mov	r14, r31
     6b8:	f2 e0       	ldi	r31, 0x02	; 2
     6ba:	ff 2e       	mov	r15, r31
     6bc:	f0 2d       	mov	r31, r0
     6be:	8c 01       	movw	r16, r24
     6c0:	20 e0       	ldi	r18, 0x00	; 0
     6c2:	30 e0       	ldi	r19, 0x00	; 0
     6c4:	a9 01       	movw	r20, r18
     6c6:	60 e0       	ldi	r22, 0x00	; 0
     6c8:	70 e0       	ldi	r23, 0x00	; 0
     6ca:	cb 01       	movw	r24, r22
     6cc:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <async>
	    //holdDown(self);
    }
    // Up
    if (!(PINB & (1 << PB6))) {
     6d0:	1e 99       	sbic	0x03, 6	; 3
     6d2:	11 c0       	rjmp	.+34     	; 0x6f6 <joysticckInteruptHandler+0x5e>
        ASYNC(self, holdUp, 0);
     6d4:	c1 2c       	mov	r12, r1
     6d6:	d1 2c       	mov	r13, r1
     6d8:	0f 2e       	mov	r0, r31
     6da:	fe e0       	ldi	r31, 0x0E	; 14
     6dc:	ef 2e       	mov	r14, r31
     6de:	f3 e0       	ldi	r31, 0x03	; 3
     6e0:	ff 2e       	mov	r15, r31
     6e2:	f0 2d       	mov	r31, r0
     6e4:	8e 01       	movw	r16, r28
     6e6:	20 e0       	ldi	r18, 0x00	; 0
     6e8:	30 e0       	ldi	r19, 0x00	; 0
     6ea:	a9 01       	movw	r20, r18
     6ec:	60 e0       	ldi	r22, 0x00	; 0
     6ee:	70 e0       	ldi	r23, 0x00	; 0
     6f0:	cb 01       	movw	r24, r22
     6f2:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <async>
		//holdUp(self);
    }
    // In
    if (!(PINB & (1 << PB4))) {
     6f6:	1c 99       	sbic	0x03, 4	; 3
     6f8:	12 c0       	rjmp	.+36     	; 0x71e <joysticckInteruptHandler+0x86>
        ASYNC(self->gui, saveRestore, 0);
     6fa:	0c 81       	ldd	r16, Y+4	; 0x04
     6fc:	1d 81       	ldd	r17, Y+5	; 0x05
     6fe:	c1 2c       	mov	r12, r1
     700:	d1 2c       	mov	r13, r1
     702:	0f 2e       	mov	r0, r31
     704:	fe e9       	ldi	r31, 0x9E	; 158
     706:	ef 2e       	mov	r14, r31
     708:	f2 e0       	ldi	r31, 0x02	; 2
     70a:	ff 2e       	mov	r15, r31
     70c:	f0 2d       	mov	r31, r0
     70e:	20 e0       	ldi	r18, 0x00	; 0
     710:	30 e0       	ldi	r19, 0x00	; 0
     712:	a9 01       	movw	r20, r18
     714:	60 e0       	ldi	r22, 0x00	; 0
     716:	70 e0       	ldi	r23, 0x00	; 0
     718:	cb 01       	movw	r24, r22
     71a:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <async>
		//saveRestore(self->gui);
    }
    // Left
    if (!(PINE & (1 << PB2))) {
     71e:	62 99       	sbic	0x0c, 2	; 12
     720:	12 c0       	rjmp	.+36     	; 0x746 <joysticckInteruptHandler+0xae>
        ASYNC(self->gui, swithToLeftGen, 0);
     722:	0c 81       	ldd	r16, Y+4	; 0x04
     724:	1d 81       	ldd	r17, Y+5	; 0x05
     726:	c1 2c       	mov	r12, r1
     728:	d1 2c       	mov	r13, r1
     72a:	0f 2e       	mov	r0, r31
     72c:	fa ef       	ldi	r31, 0xFA	; 250
     72e:	ef 2e       	mov	r14, r31
     730:	f1 e0       	ldi	r31, 0x01	; 1
     732:	ff 2e       	mov	r15, r31
     734:	f0 2d       	mov	r31, r0
     736:	20 e0       	ldi	r18, 0x00	; 0
     738:	30 e0       	ldi	r19, 0x00	; 0
     73a:	a9 01       	movw	r20, r18
     73c:	60 e0       	ldi	r22, 0x00	; 0
     73e:	70 e0       	ldi	r23, 0x00	; 0
     740:	cb 01       	movw	r24, r22
     742:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <async>
		//swithToLeftGen(self->gui);
    }
    // Right
    if (!(PINE & (1 << PB3))) {
     746:	63 99       	sbic	0x0c, 3	; 12
     748:	12 c0       	rjmp	.+36     	; 0x76e <joysticckInteruptHandler+0xd6>
        ASYNC(self->gui, swithToRightGen, 0);
     74a:	0c 81       	ldd	r16, Y+4	; 0x04
     74c:	1d 81       	ldd	r17, Y+5	; 0x05
     74e:	c1 2c       	mov	r12, r1
     750:	d1 2c       	mov	r13, r1
     752:	0f 2e       	mov	r0, r31
     754:	ff e2       	ldi	r31, 0x2F	; 47
     756:	ef 2e       	mov	r14, r31
     758:	f2 e0       	ldi	r31, 0x02	; 2
     75a:	ff 2e       	mov	r15, r31
     75c:	f0 2d       	mov	r31, r0
     75e:	20 e0       	ldi	r18, 0x00	; 0
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	a9 01       	movw	r20, r18
     764:	60 e0       	ldi	r22, 0x00	; 0
     766:	70 e0       	ldi	r23, 0x00	; 0
     768:	cb 01       	movw	r24, r22
     76a:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <async>
		//swithToRightGen(self->gui);
    }
}
     76e:	df 91       	pop	r29
     770:	cf 91       	pop	r28
     772:	1f 91       	pop	r17
     774:	0f 91       	pop	r16
     776:	ff 90       	pop	r15
     778:	ef 90       	pop	r14
     77a:	df 90       	pop	r13
     77c:	cf 90       	pop	r12
     77e:	08 95       	ret

00000780 <sysInit>:
GUI gui = initGUI(&gen1, &gen2);
JoystickHandler joystick = initJoystickHandler(&gui);

void sysInit(){
    // Clock Prescale Register "maximum speed"
	CLKPR = 0b10000000; // Clock Prescaler Change Enable
     780:	e1 e6       	ldi	r30, 0x61	; 97
     782:	f0 e0       	ldi	r31, 0x00	; 0
     784:	80 e8       	ldi	r24, 0x80	; 128
     786:	80 83       	st	Z, r24
	CLKPR = 0b00000000; // Set 0 for sysclock
     788:	10 82       	st	Z, r1
     78a:	08 95       	ret

0000078c <pinOutputInit>:
}

void pinOutputInit(){
    // Initialize Port E as output for PE4 and PE6
	DDRE |= (1 << PE4) | (1 << PE6);
     78c:	8d b1       	in	r24, 0x0d	; 13
     78e:	80 65       	ori	r24, 0x50	; 80
     790:	8d b9       	out	0x0d, r24	; 13
     792:	08 95       	ret

00000794 <main>:
}


int main() {
    sysInit();
     794:	0e 94 c0 03 	call	0x780	; 0x780 <sysInit>
    pinOutputInit(); // Is this needed
     798:	0e 94 c6 03 	call	0x78c	; 0x78c <pinOutputInit>
    joystickInit();
     79c:	0e 94 38 03 	call	0x670	; 0x670 <joystickInit>
    LCD_init();
     7a0:	0e 94 57 00 	call	0xae	; 0xae <LCD_init>
    
	
	
    // Instal interupt handler
    //when the joystick's vertical state changes
    INSTALL(&joystick, joysticckInteruptHandler, IRQ_PCINT0);
     7a4:	41 e0       	ldi	r20, 0x01	; 1
     7a6:	6c e4       	ldi	r22, 0x4C	; 76
     7a8:	73 e0       	ldi	r23, 0x03	; 3
     7aa:	80 e5       	ldi	r24, 0x50	; 80
     7ac:	91 e0       	ldi	r25, 0x01	; 1
     7ae:	0e 94 0e 10 	call	0x201c	; 0x201c <install>
	INSTALL(&joystick, joysticckInteruptHandler, IRQ_PCINT1);
     7b2:	42 e0       	ldi	r20, 0x02	; 2
     7b4:	6c e4       	ldi	r22, 0x4C	; 76
     7b6:	73 e0       	ldi	r23, 0x03	; 3
     7b8:	80 e5       	ldi	r24, 0x50	; 80
     7ba:	91 e0       	ldi	r25, 0x01	; 1
     7bc:	0e 94 0e 10 	call	0x201c	; 0x201c <install>
    //when the joystick's horizontal (minus middle) state changes
    
    // Start kernel
    return TINYTIMBER(&gui, NULL, NULL);
     7c0:	40 e0       	ldi	r20, 0x00	; 0
     7c2:	50 e0       	ldi	r21, 0x00	; 0
     7c4:	60 e0       	ldi	r22, 0x00	; 0
     7c6:	70 e0       	ldi	r23, 0x00	; 0
     7c8:	86 e5       	ldi	r24, 0x56	; 86
     7ca:	91 e0       	ldi	r25, 0x01	; 1
     7cc:	0e 94 28 10 	call	0x2050	; 0x2050 <tinytimber>
}
     7d0:	08 95       	ret

000007d2 <setFrequency>:
	ASYNC(self, genFreq, 0);
}


void setFrequency(PulseGen *self, int freq) {
	self->frequency = freq;
     7d2:	fc 01       	movw	r30, r24
     7d4:	71 87       	std	Z+9, r23	; 0x09
     7d6:	60 87       	std	Z+8, r22	; 0x08
     7d8:	08 95       	ret

000007da <save>:
}

// Saves the freq
void save(PulseGen *self) {
	self->saved_freq = self->frequency;
     7da:	fc 01       	movw	r30, r24
     7dc:	20 85       	ldd	r18, Z+8	; 0x08
     7de:	31 85       	ldd	r19, Z+9	; 0x09
     7e0:	33 87       	std	Z+11, r19	; 0x0b
     7e2:	22 87       	std	Z+10, r18	; 0x0a
     7e4:	08 95       	ret

000007e6 <restore>:
}

// Restores freq to last saved
void restore(PulseGen *self) {
	self->frequency = self->saved_freq;
     7e6:	fc 01       	movw	r30, r24
     7e8:	22 85       	ldd	r18, Z+10	; 0x0a
     7ea:	33 85       	ldd	r19, Z+11	; 0x0b
     7ec:	31 87       	std	Z+9, r19	; 0x09
     7ee:	20 87       	std	Z+8, r18	; 0x08
     7f0:	08 95       	ret

000007f2 <getFrequency>:
}

int getFrequency(PulseGen *self) {
	return self->frequency;
}
     7f2:	fc 01       	movw	r30, r24
     7f4:	80 85       	ldd	r24, Z+8	; 0x08
     7f6:	91 85       	ldd	r25, Z+9	; 0x09
     7f8:	08 95       	ret

000007fa <setStatus>:

void setStatus(PulseGen *self, bool status) {
	self->genStatus = status;
     7fa:	fc 01       	movw	r30, r24
     7fc:	66 87       	std	Z+14, r22	; 0x0e
     7fe:	08 95       	ret

00000800 <initialize>:
     800:	cf 93       	push	r28
     802:	df 93       	push	r29
     804:	00 d0       	rcall	.+0      	; 0x806 <initialize+0x6>
     806:	00 d0       	rcall	.+0      	; 0x808 <initialize+0x8>
     808:	cd b7       	in	r28, 0x3d	; 61
     80a:	de b7       	in	r29, 0x3e	; 62
     80c:	85 e8       	ldi	r24, 0x85	; 133
     80e:	92 e0       	ldi	r25, 0x02	; 2
     810:	25 e6       	ldi	r18, 0x65	; 101
     812:	33 e0       	ldi	r19, 0x03	; 3
     814:	fc 01       	movw	r30, r24
     816:	70 97       	sbiw	r30, 0x10	; 16
     818:	91 83       	std	Z+1, r25	; 0x01
     81a:	80 83       	st	Z, r24
     81c:	40 96       	adiw	r24, 0x10	; 16
     81e:	82 17       	cp	r24, r18
     820:	93 07       	cpc	r25, r19
     822:	c1 f7       	brne	.-16     	; 0x814 <initialize+0x14>
     824:	10 92 56 03 	sts	0x0356, r1	; 0x800356 <messages+0xe1>
     828:	10 92 55 03 	sts	0x0355, r1	; 0x800355 <messages+0xe0>
     82c:	e0 ec       	ldi	r30, 0xC0	; 192
     82e:	f1 e0       	ldi	r31, 0x01	; 1
     830:	8d ed       	ldi	r24, 0xDD	; 221
     832:	91 e0       	ldi	r25, 0x01	; 1
     834:	91 83       	std	Z+1, r25	; 0x01
     836:	80 83       	st	Z, r24
     838:	8a ef       	ldi	r24, 0xFA	; 250
     83a:	91 e0       	ldi	r25, 0x01	; 1
     83c:	96 8f       	std	Z+30, r25	; 0x1e
     83e:	85 8f       	std	Z+29, r24	; 0x1d
     840:	a7 e1       	ldi	r26, 0x17	; 23
     842:	b2 e0       	ldi	r27, 0x02	; 2
     844:	b3 af       	std	Z+59, r27	; 0x3b
     846:	a2 af       	std	Z+58, r26	; 0x3a
     848:	1d 92       	st	X+, r1
     84a:	1c 92       	st	X, r1
     84c:	fa 83       	std	Y+2, r31	; 0x02
     84e:	e9 83       	std	Y+1, r30	; 0x01
     850:	e1 ec       	ldi	r30, 0xC1	; 193
     852:	f3 e0       	ldi	r31, 0x03	; 3
     854:	fc 83       	std	Y+4, r31	; 0x04
     856:	eb 83       	std	Y+3, r30	; 0x03
     858:	89 81       	ldd	r24, Y+1	; 0x01
     85a:	9a 81       	ldd	r25, Y+2	; 0x02
     85c:	06 96       	adiw	r24, 0x06	; 6
     85e:	0e 94 8b 10 	call	0x2116	; 0x2116 <setjmp>
     862:	8b 81       	ldd	r24, Y+3	; 0x03
     864:	9c 81       	ldd	r25, Y+4	; 0x04
     866:	e9 81       	ldd	r30, Y+1	; 0x01
     868:	fa 81       	ldd	r31, Y+2	; 0x02
     86a:	97 8b       	std	Z+23, r25	; 0x17
     86c:	86 8b       	std	Z+22, r24	; 0x16
     86e:	91 8f       	std	Z+25, r25	; 0x19
     870:	80 8f       	std	Z+24, r24	; 0x18
     872:	80 ea       	ldi	r24, 0xA0	; 160
     874:	9f e0       	ldi	r25, 0x0F	; 15
     876:	94 8f       	std	Z+28, r25	; 0x1c
     878:	83 8f       	std	Z+27, r24	; 0x1b
     87a:	15 82       	std	Z+5, r1	; 0x05
     87c:	14 82       	std	Z+4, r1	; 0x04
     87e:	7d 96       	adiw	r30, 0x1d	; 29
     880:	fa 83       	std	Y+2, r31	; 0x02
     882:	e9 83       	std	Y+1, r30	; 0x01
     884:	eb 81       	ldd	r30, Y+3	; 0x03
     886:	fc 81       	ldd	r31, Y+4	; 0x04
     888:	e0 5a       	subi	r30, 0xA0	; 160
     88a:	ff 4f       	sbci	r31, 0xFF	; 255
     88c:	fc 83       	std	Y+4, r31	; 0x04
     88e:	eb 83       	std	Y+3, r30	; 0x03
     890:	89 81       	ldd	r24, Y+1	; 0x01
     892:	9a 81       	ldd	r25, Y+2	; 0x02
     894:	84 53       	subi	r24, 0x34	; 52
     896:	92 40       	sbci	r25, 0x02	; 2
     898:	f9 f6       	brne	.-66     	; 0x858 <initialize+0x58>
     89a:	e8 e5       	ldi	r30, 0x58	; 88
     89c:	f2 e0       	ldi	r31, 0x02	; 2
     89e:	11 82       	std	Z+1, r1	; 0x01
     8a0:	10 82       	st	Z, r1
     8a2:	15 82       	std	Z+5, r1	; 0x05
     8a4:	14 82       	std	Z+4, r1	; 0x04
     8a6:	13 82       	std	Z+3, r1	; 0x03
     8a8:	12 82       	std	Z+2, r1	; 0x02
     8aa:	e1 e6       	ldi	r30, 0x61	; 97
     8ac:	f0 e0       	ldi	r31, 0x00	; 0
     8ae:	80 e8       	ldi	r24, 0x80	; 128
     8b0:	80 83       	st	Z, r24
     8b2:	10 82       	st	Z, r1
     8b4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     8b8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     8bc:	84 e0       	ldi	r24, 0x04	; 4
     8be:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     8c2:	81 e0       	ldi	r24, 0x01	; 1
     8c4:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
     8c8:	0f 90       	pop	r0
     8ca:	0f 90       	pop	r0
     8cc:	0f 90       	pop	r0
     8ce:	0f 90       	pop	r0
     8d0:	df 91       	pop	r29
     8d2:	cf 91       	pop	r28
     8d4:	08 95       	ret

000008d6 <dispatch>:
     8d6:	cf 93       	push	r28
     8d8:	df 93       	push	r29
     8da:	00 d0       	rcall	.+0      	; 0x8dc <dispatch+0x6>
     8dc:	cd b7       	in	r28, 0x3d	; 61
     8de:	de b7       	in	r29, 0x3e	; 62
     8e0:	9a 83       	std	Y+2, r25	; 0x02
     8e2:	89 83       	std	Y+1, r24	; 0x01
     8e4:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <current>
     8e8:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <current+0x1>
     8ec:	06 96       	adiw	r24, 0x06	; 6
     8ee:	0e 94 8b 10 	call	0x2116	; 0x2116 <setjmp>
     8f2:	89 2b       	or	r24, r25
     8f4:	59 f4       	brne	.+22     	; 0x90c <dispatch+0x36>
     8f6:	89 81       	ldd	r24, Y+1	; 0x01
     8f8:	9a 81       	ldd	r25, Y+2	; 0x02
     8fa:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <current+0x1>
     8fe:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <current>
     902:	61 e0       	ldi	r22, 0x01	; 1
     904:	70 e0       	ldi	r23, 0x00	; 0
     906:	06 96       	adiw	r24, 0x06	; 6
     908:	0e 94 ab 10 	call	0x2156	; 0x2156 <longjmp>
     90c:	0f 90       	pop	r0
     90e:	0f 90       	pop	r0
     910:	df 91       	pop	r29
     912:	cf 91       	pop	r28
     914:	08 95       	ret

00000916 <schedule>:
     916:	0f 93       	push	r16
     918:	1f 93       	push	r17
     91a:	cf 93       	push	r28
     91c:	df 93       	push	r29
     91e:	e0 91 9a 01 	lds	r30, 0x019A	; 0x80019a <msgQ>
     922:	f0 91 9b 01 	lds	r31, 0x019B	; 0x80019b <msgQ+0x1>
     926:	30 97       	sbiw	r30, 0x00	; 0
     928:	61 f1       	breq	.+88     	; 0x982 <schedule+0x6c>
     92a:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <threadPool>
     92e:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <threadPool+0x1>
     932:	00 97       	sbiw	r24, 0x00	; 0
     934:	31 f1       	breq	.+76     	; 0x982 <schedule+0x6c>
     936:	c0 91 80 01 	lds	r28, 0x0180	; 0x800180 <activeStack>
     93a:	d0 91 81 01 	lds	r29, 0x0181	; 0x800181 <activeStack+0x1>
     93e:	aa 81       	ldd	r26, Y+2	; 0x02
     940:	bb 81       	ldd	r27, Y+3	; 0x03
     942:	10 97       	sbiw	r26, 0x00	; 0
     944:	79 f0       	breq	.+30     	; 0x964 <schedule+0x4e>
     946:	46 81       	ldd	r20, Z+6	; 0x06
     948:	57 81       	ldd	r21, Z+7	; 0x07
     94a:	60 85       	ldd	r22, Z+8	; 0x08
     94c:	71 85       	ldd	r23, Z+9	; 0x09
     94e:	16 96       	adiw	r26, 0x06	; 6
     950:	0d 91       	ld	r16, X+
     952:	1d 91       	ld	r17, X+
     954:	2d 91       	ld	r18, X+
     956:	3c 91       	ld	r19, X
     958:	19 97       	sbiw	r26, 0x09	; 9
     95a:	40 1b       	sub	r20, r16
     95c:	51 0b       	sbc	r21, r17
     95e:	62 0b       	sbc	r22, r18
     960:	73 0b       	sbc	r23, r19
     962:	7a f4       	brpl	.+30     	; 0x982 <schedule+0x6c>
     964:	fc 01       	movw	r30, r24
     966:	20 81       	ld	r18, Z
     968:	31 81       	ldd	r19, Z+1	; 0x01
     96a:	30 93 83 01 	sts	0x0183, r19	; 0x800183 <threadPool+0x1>
     96e:	20 93 82 01 	sts	0x0182, r18	; 0x800182 <threadPool>
     972:	d1 83       	std	Z+1, r29	; 0x01
     974:	c0 83       	st	Z, r28
     976:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <activeStack+0x1>
     97a:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <activeStack>
     97e:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <dispatch>
     982:	df 91       	pop	r29
     984:	cf 91       	pop	r28
     986:	1f 91       	pop	r17
     988:	0f 91       	pop	r16
     98a:	08 95       	ret

0000098c <__vector_1>:
     98c:	1f 92       	push	r1
     98e:	0f 92       	push	r0
     990:	0f b6       	in	r0, 0x3f	; 63
     992:	0f 92       	push	r0
     994:	11 24       	eor	r1, r1
     996:	2f 93       	push	r18
     998:	3f 93       	push	r19
     99a:	4f 93       	push	r20
     99c:	5f 93       	push	r21
     99e:	6f 93       	push	r22
     9a0:	7f 93       	push	r23
     9a2:	8f 93       	push	r24
     9a4:	9f 93       	push	r25
     9a6:	af 93       	push	r26
     9a8:	bf 93       	push	r27
     9aa:	ef 93       	push	r30
     9ac:	ff 93       	push	r31
     9ae:	20 91 92 01 	lds	r18, 0x0192	; 0x800192 <overflows>
     9b2:	30 91 93 01 	lds	r19, 0x0193	; 0x800193 <overflows+0x1>
     9b6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     9ba:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     9be:	c9 01       	movw	r24, r18
     9c0:	03 2e       	mov	r0, r19
     9c2:	00 0c       	add	r0, r0
     9c4:	aa 0b       	sbc	r26, r26
     9c6:	bb 0b       	sbc	r27, r27
     9c8:	dc 01       	movw	r26, r24
     9ca:	99 27       	eor	r25, r25
     9cc:	88 27       	eor	r24, r24
     9ce:	60 e0       	ldi	r22, 0x00	; 0
     9d0:	70 e0       	ldi	r23, 0x00	; 0
     9d2:	84 2b       	or	r24, r20
     9d4:	95 2b       	or	r25, r21
     9d6:	a6 2b       	or	r26, r22
     9d8:	b7 2b       	or	r27, r23
     9da:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <timestamp>
     9de:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <timestamp+0x1>
     9e2:	a0 93 96 01 	sts	0x0196, r26	; 0x800196 <timestamp+0x2>
     9e6:	b0 93 97 01 	sts	0x0197, r27	; 0x800197 <timestamp+0x3>
     9ea:	b0 9b       	sbis	0x16, 0	; 22
     9ec:	1b c0       	rjmp	.+54     	; 0xa24 <__vector_1+0x98>
     9ee:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     9f2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     9f6:	c9 01       	movw	r24, r18
     9f8:	01 96       	adiw	r24, 0x01	; 1
     9fa:	09 2e       	mov	r0, r25
     9fc:	00 0c       	add	r0, r0
     9fe:	aa 0b       	sbc	r26, r26
     a00:	bb 0b       	sbc	r27, r27
     a02:	dc 01       	movw	r26, r24
     a04:	99 27       	eor	r25, r25
     a06:	88 27       	eor	r24, r24
     a08:	60 e0       	ldi	r22, 0x00	; 0
     a0a:	70 e0       	ldi	r23, 0x00	; 0
     a0c:	84 2b       	or	r24, r20
     a0e:	95 2b       	or	r25, r21
     a10:	a6 2b       	or	r26, r22
     a12:	b7 2b       	or	r27, r23
     a14:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <timestamp>
     a18:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <timestamp+0x1>
     a1c:	a0 93 96 01 	sts	0x0196, r26	; 0x800196 <timestamp+0x2>
     a20:	b0 93 97 01 	sts	0x0197, r27	; 0x800197 <timestamp+0x3>
     a24:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <mtable>
     a28:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <mtable+0x1>
     a2c:	30 97       	sbiw	r30, 0x00	; 0
     a2e:	39 f0       	breq	.+14     	; 0xa3e <__vector_1+0xb2>
     a30:	60 e0       	ldi	r22, 0x00	; 0
     a32:	70 e0       	ldi	r23, 0x00	; 0
     a34:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <otable>
     a38:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <otable+0x1>
     a3c:	09 95       	icall
     a3e:	0e 94 8b 04 	call	0x916	; 0x916 <schedule>
     a42:	ff 91       	pop	r31
     a44:	ef 91       	pop	r30
     a46:	bf 91       	pop	r27
     a48:	af 91       	pop	r26
     a4a:	9f 91       	pop	r25
     a4c:	8f 91       	pop	r24
     a4e:	7f 91       	pop	r23
     a50:	6f 91       	pop	r22
     a52:	5f 91       	pop	r21
     a54:	4f 91       	pop	r20
     a56:	3f 91       	pop	r19
     a58:	2f 91       	pop	r18
     a5a:	0f 90       	pop	r0
     a5c:	0f be       	out	0x3f, r0	; 63
     a5e:	0f 90       	pop	r0
     a60:	1f 90       	pop	r1
     a62:	18 95       	reti

00000a64 <__vector_2>:
     a64:	1f 92       	push	r1
     a66:	0f 92       	push	r0
     a68:	0f b6       	in	r0, 0x3f	; 63
     a6a:	0f 92       	push	r0
     a6c:	11 24       	eor	r1, r1
     a6e:	2f 93       	push	r18
     a70:	3f 93       	push	r19
     a72:	4f 93       	push	r20
     a74:	5f 93       	push	r21
     a76:	6f 93       	push	r22
     a78:	7f 93       	push	r23
     a7a:	8f 93       	push	r24
     a7c:	9f 93       	push	r25
     a7e:	af 93       	push	r26
     a80:	bf 93       	push	r27
     a82:	ef 93       	push	r30
     a84:	ff 93       	push	r31
     a86:	20 91 92 01 	lds	r18, 0x0192	; 0x800192 <overflows>
     a8a:	30 91 93 01 	lds	r19, 0x0193	; 0x800193 <overflows+0x1>
     a8e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     a92:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     a96:	c9 01       	movw	r24, r18
     a98:	03 2e       	mov	r0, r19
     a9a:	00 0c       	add	r0, r0
     a9c:	aa 0b       	sbc	r26, r26
     a9e:	bb 0b       	sbc	r27, r27
     aa0:	dc 01       	movw	r26, r24
     aa2:	99 27       	eor	r25, r25
     aa4:	88 27       	eor	r24, r24
     aa6:	60 e0       	ldi	r22, 0x00	; 0
     aa8:	70 e0       	ldi	r23, 0x00	; 0
     aaa:	84 2b       	or	r24, r20
     aac:	95 2b       	or	r25, r21
     aae:	a6 2b       	or	r26, r22
     ab0:	b7 2b       	or	r27, r23
     ab2:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <timestamp>
     ab6:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <timestamp+0x1>
     aba:	a0 93 96 01 	sts	0x0196, r26	; 0x800196 <timestamp+0x2>
     abe:	b0 93 97 01 	sts	0x0197, r27	; 0x800197 <timestamp+0x3>
     ac2:	b0 9b       	sbis	0x16, 0	; 22
     ac4:	1b c0       	rjmp	.+54     	; 0xafc <__vector_2+0x98>
     ac6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     aca:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     ace:	c9 01       	movw	r24, r18
     ad0:	01 96       	adiw	r24, 0x01	; 1
     ad2:	09 2e       	mov	r0, r25
     ad4:	00 0c       	add	r0, r0
     ad6:	aa 0b       	sbc	r26, r26
     ad8:	bb 0b       	sbc	r27, r27
     ada:	dc 01       	movw	r26, r24
     adc:	99 27       	eor	r25, r25
     ade:	88 27       	eor	r24, r24
     ae0:	60 e0       	ldi	r22, 0x00	; 0
     ae2:	70 e0       	ldi	r23, 0x00	; 0
     ae4:	84 2b       	or	r24, r20
     ae6:	95 2b       	or	r25, r21
     ae8:	a6 2b       	or	r26, r22
     aea:	b7 2b       	or	r27, r23
     aec:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <timestamp>
     af0:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <timestamp+0x1>
     af4:	a0 93 96 01 	sts	0x0196, r26	; 0x800196 <timestamp+0x2>
     af8:	b0 93 97 01 	sts	0x0197, r27	; 0x800197 <timestamp+0x3>
     afc:	e0 91 36 02 	lds	r30, 0x0236	; 0x800236 <mtable+0x2>
     b00:	f0 91 37 02 	lds	r31, 0x0237	; 0x800237 <mtable+0x3>
     b04:	30 97       	sbiw	r30, 0x00	; 0
     b06:	39 f0       	breq	.+14     	; 0xb16 <__vector_2+0xb2>
     b08:	61 e0       	ldi	r22, 0x01	; 1
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <otable+0x2>
     b10:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <otable+0x3>
     b14:	09 95       	icall
     b16:	0e 94 8b 04 	call	0x916	; 0x916 <schedule>
     b1a:	ff 91       	pop	r31
     b1c:	ef 91       	pop	r30
     b1e:	bf 91       	pop	r27
     b20:	af 91       	pop	r26
     b22:	9f 91       	pop	r25
     b24:	8f 91       	pop	r24
     b26:	7f 91       	pop	r23
     b28:	6f 91       	pop	r22
     b2a:	5f 91       	pop	r21
     b2c:	4f 91       	pop	r20
     b2e:	3f 91       	pop	r19
     b30:	2f 91       	pop	r18
     b32:	0f 90       	pop	r0
     b34:	0f be       	out	0x3f, r0	; 63
     b36:	0f 90       	pop	r0
     b38:	1f 90       	pop	r1
     b3a:	18 95       	reti

00000b3c <__vector_3>:
     b3c:	1f 92       	push	r1
     b3e:	0f 92       	push	r0
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	0f 92       	push	r0
     b44:	11 24       	eor	r1, r1
     b46:	2f 93       	push	r18
     b48:	3f 93       	push	r19
     b4a:	4f 93       	push	r20
     b4c:	5f 93       	push	r21
     b4e:	6f 93       	push	r22
     b50:	7f 93       	push	r23
     b52:	8f 93       	push	r24
     b54:	9f 93       	push	r25
     b56:	af 93       	push	r26
     b58:	bf 93       	push	r27
     b5a:	ef 93       	push	r30
     b5c:	ff 93       	push	r31
     b5e:	20 91 92 01 	lds	r18, 0x0192	; 0x800192 <overflows>
     b62:	30 91 93 01 	lds	r19, 0x0193	; 0x800193 <overflows+0x1>
     b66:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     b6a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     b6e:	c9 01       	movw	r24, r18
     b70:	03 2e       	mov	r0, r19
     b72:	00 0c       	add	r0, r0
     b74:	aa 0b       	sbc	r26, r26
     b76:	bb 0b       	sbc	r27, r27
     b78:	dc 01       	movw	r26, r24
     b7a:	99 27       	eor	r25, r25
     b7c:	88 27       	eor	r24, r24
     b7e:	60 e0       	ldi	r22, 0x00	; 0
     b80:	70 e0       	ldi	r23, 0x00	; 0
     b82:	84 2b       	or	r24, r20
     b84:	95 2b       	or	r25, r21
     b86:	a6 2b       	or	r26, r22
     b88:	b7 2b       	or	r27, r23
     b8a:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <timestamp>
     b8e:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <timestamp+0x1>
     b92:	a0 93 96 01 	sts	0x0196, r26	; 0x800196 <timestamp+0x2>
     b96:	b0 93 97 01 	sts	0x0197, r27	; 0x800197 <timestamp+0x3>
     b9a:	b0 9b       	sbis	0x16, 0	; 22
     b9c:	1b c0       	rjmp	.+54     	; 0xbd4 <__vector_3+0x98>
     b9e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     ba2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     ba6:	c9 01       	movw	r24, r18
     ba8:	01 96       	adiw	r24, 0x01	; 1
     baa:	09 2e       	mov	r0, r25
     bac:	00 0c       	add	r0, r0
     bae:	aa 0b       	sbc	r26, r26
     bb0:	bb 0b       	sbc	r27, r27
     bb2:	dc 01       	movw	r26, r24
     bb4:	99 27       	eor	r25, r25
     bb6:	88 27       	eor	r24, r24
     bb8:	60 e0       	ldi	r22, 0x00	; 0
     bba:	70 e0       	ldi	r23, 0x00	; 0
     bbc:	84 2b       	or	r24, r20
     bbe:	95 2b       	or	r25, r21
     bc0:	a6 2b       	or	r26, r22
     bc2:	b7 2b       	or	r27, r23
     bc4:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <timestamp>
     bc8:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <timestamp+0x1>
     bcc:	a0 93 96 01 	sts	0x0196, r26	; 0x800196 <timestamp+0x2>
     bd0:	b0 93 97 01 	sts	0x0197, r27	; 0x800197 <timestamp+0x3>
     bd4:	e0 91 38 02 	lds	r30, 0x0238	; 0x800238 <mtable+0x4>
     bd8:	f0 91 39 02 	lds	r31, 0x0239	; 0x800239 <mtable+0x5>
     bdc:	30 97       	sbiw	r30, 0x00	; 0
     bde:	39 f0       	breq	.+14     	; 0xbee <__vector_3+0xb2>
     be0:	62 e0       	ldi	r22, 0x02	; 2
     be2:	70 e0       	ldi	r23, 0x00	; 0
     be4:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <otable+0x4>
     be8:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <otable+0x5>
     bec:	09 95       	icall
     bee:	0e 94 8b 04 	call	0x916	; 0x916 <schedule>
     bf2:	ff 91       	pop	r31
     bf4:	ef 91       	pop	r30
     bf6:	bf 91       	pop	r27
     bf8:	af 91       	pop	r26
     bfa:	9f 91       	pop	r25
     bfc:	8f 91       	pop	r24
     bfe:	7f 91       	pop	r23
     c00:	6f 91       	pop	r22
     c02:	5f 91       	pop	r21
     c04:	4f 91       	pop	r20
     c06:	3f 91       	pop	r19
     c08:	2f 91       	pop	r18
     c0a:	0f 90       	pop	r0
     c0c:	0f be       	out	0x3f, r0	; 63
     c0e:	0f 90       	pop	r0
     c10:	1f 90       	pop	r1
     c12:	18 95       	reti

00000c14 <__vector_4>:
     c14:	1f 92       	push	r1
     c16:	0f 92       	push	r0
     c18:	0f b6       	in	r0, 0x3f	; 63
     c1a:	0f 92       	push	r0
     c1c:	11 24       	eor	r1, r1
     c1e:	2f 93       	push	r18
     c20:	3f 93       	push	r19
     c22:	4f 93       	push	r20
     c24:	5f 93       	push	r21
     c26:	6f 93       	push	r22
     c28:	7f 93       	push	r23
     c2a:	8f 93       	push	r24
     c2c:	9f 93       	push	r25
     c2e:	af 93       	push	r26
     c30:	bf 93       	push	r27
     c32:	ef 93       	push	r30
     c34:	ff 93       	push	r31
     c36:	20 91 92 01 	lds	r18, 0x0192	; 0x800192 <overflows>
     c3a:	30 91 93 01 	lds	r19, 0x0193	; 0x800193 <overflows+0x1>
     c3e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     c42:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     c46:	c9 01       	movw	r24, r18
     c48:	03 2e       	mov	r0, r19
     c4a:	00 0c       	add	r0, r0
     c4c:	aa 0b       	sbc	r26, r26
     c4e:	bb 0b       	sbc	r27, r27
     c50:	dc 01       	movw	r26, r24
     c52:	99 27       	eor	r25, r25
     c54:	88 27       	eor	r24, r24
     c56:	60 e0       	ldi	r22, 0x00	; 0
     c58:	70 e0       	ldi	r23, 0x00	; 0
     c5a:	84 2b       	or	r24, r20
     c5c:	95 2b       	or	r25, r21
     c5e:	a6 2b       	or	r26, r22
     c60:	b7 2b       	or	r27, r23
     c62:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <timestamp>
     c66:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <timestamp+0x1>
     c6a:	a0 93 96 01 	sts	0x0196, r26	; 0x800196 <timestamp+0x2>
     c6e:	b0 93 97 01 	sts	0x0197, r27	; 0x800197 <timestamp+0x3>
     c72:	b0 9b       	sbis	0x16, 0	; 22
     c74:	1b c0       	rjmp	.+54     	; 0xcac <__vector_4+0x98>
     c76:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     c7a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     c7e:	c9 01       	movw	r24, r18
     c80:	01 96       	adiw	r24, 0x01	; 1
     c82:	09 2e       	mov	r0, r25
     c84:	00 0c       	add	r0, r0
     c86:	aa 0b       	sbc	r26, r26
     c88:	bb 0b       	sbc	r27, r27
     c8a:	dc 01       	movw	r26, r24
     c8c:	99 27       	eor	r25, r25
     c8e:	88 27       	eor	r24, r24
     c90:	60 e0       	ldi	r22, 0x00	; 0
     c92:	70 e0       	ldi	r23, 0x00	; 0
     c94:	84 2b       	or	r24, r20
     c96:	95 2b       	or	r25, r21
     c98:	a6 2b       	or	r26, r22
     c9a:	b7 2b       	or	r27, r23
     c9c:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <timestamp>
     ca0:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <timestamp+0x1>
     ca4:	a0 93 96 01 	sts	0x0196, r26	; 0x800196 <timestamp+0x2>
     ca8:	b0 93 97 01 	sts	0x0197, r27	; 0x800197 <timestamp+0x3>
     cac:	e0 91 3a 02 	lds	r30, 0x023A	; 0x80023a <mtable+0x6>
     cb0:	f0 91 3b 02 	lds	r31, 0x023B	; 0x80023b <mtable+0x7>
     cb4:	30 97       	sbiw	r30, 0x00	; 0
     cb6:	39 f0       	breq	.+14     	; 0xcc6 <__vector_4+0xb2>
     cb8:	63 e0       	ldi	r22, 0x03	; 3
     cba:	70 e0       	ldi	r23, 0x00	; 0
     cbc:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <otable+0x6>
     cc0:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <otable+0x7>
     cc4:	09 95       	icall
     cc6:	0e 94 8b 04 	call	0x916	; 0x916 <schedule>
     cca:	ff 91       	pop	r31
     ccc:	ef 91       	pop	r30
     cce:	bf 91       	pop	r27
     cd0:	af 91       	pop	r26
     cd2:	9f 91       	pop	r25
     cd4:	8f 91       	pop	r24
     cd6:	7f 91       	pop	r23
     cd8:	6f 91       	pop	r22
     cda:	5f 91       	pop	r21
     cdc:	4f 91       	pop	r20
     cde:	3f 91       	pop	r19
     ce0:	2f 91       	pop	r18
     ce2:	0f 90       	pop	r0
     ce4:	0f be       	out	0x3f, r0	; 63
     ce6:	0f 90       	pop	r0
     ce8:	1f 90       	pop	r1
     cea:	18 95       	reti

00000cec <__vector_5>:
     cec:	1f 92       	push	r1
     cee:	0f 92       	push	r0
     cf0:	0f b6       	in	r0, 0x3f	; 63
     cf2:	0f 92       	push	r0
     cf4:	11 24       	eor	r1, r1
     cf6:	2f 93       	push	r18
     cf8:	3f 93       	push	r19
     cfa:	4f 93       	push	r20
     cfc:	5f 93       	push	r21
     cfe:	6f 93       	push	r22
     d00:	7f 93       	push	r23
     d02:	8f 93       	push	r24
     d04:	9f 93       	push	r25
     d06:	af 93       	push	r26
     d08:	bf 93       	push	r27
     d0a:	ef 93       	push	r30
     d0c:	ff 93       	push	r31
     d0e:	20 91 92 01 	lds	r18, 0x0192	; 0x800192 <overflows>
     d12:	30 91 93 01 	lds	r19, 0x0193	; 0x800193 <overflows+0x1>
     d16:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     d1a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     d1e:	c9 01       	movw	r24, r18
     d20:	03 2e       	mov	r0, r19
     d22:	00 0c       	add	r0, r0
     d24:	aa 0b       	sbc	r26, r26
     d26:	bb 0b       	sbc	r27, r27
     d28:	dc 01       	movw	r26, r24
     d2a:	99 27       	eor	r25, r25
     d2c:	88 27       	eor	r24, r24
     d2e:	60 e0       	ldi	r22, 0x00	; 0
     d30:	70 e0       	ldi	r23, 0x00	; 0
     d32:	84 2b       	or	r24, r20
     d34:	95 2b       	or	r25, r21
     d36:	a6 2b       	or	r26, r22
     d38:	b7 2b       	or	r27, r23
     d3a:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <timestamp>
     d3e:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <timestamp+0x1>
     d42:	a0 93 96 01 	sts	0x0196, r26	; 0x800196 <timestamp+0x2>
     d46:	b0 93 97 01 	sts	0x0197, r27	; 0x800197 <timestamp+0x3>
     d4a:	b0 9b       	sbis	0x16, 0	; 22
     d4c:	1b c0       	rjmp	.+54     	; 0xd84 <__vector_5+0x98>
     d4e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     d52:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     d56:	c9 01       	movw	r24, r18
     d58:	01 96       	adiw	r24, 0x01	; 1
     d5a:	09 2e       	mov	r0, r25
     d5c:	00 0c       	add	r0, r0
     d5e:	aa 0b       	sbc	r26, r26
     d60:	bb 0b       	sbc	r27, r27
     d62:	dc 01       	movw	r26, r24
     d64:	99 27       	eor	r25, r25
     d66:	88 27       	eor	r24, r24
     d68:	60 e0       	ldi	r22, 0x00	; 0
     d6a:	70 e0       	ldi	r23, 0x00	; 0
     d6c:	84 2b       	or	r24, r20
     d6e:	95 2b       	or	r25, r21
     d70:	a6 2b       	or	r26, r22
     d72:	b7 2b       	or	r27, r23
     d74:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <timestamp>
     d78:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <timestamp+0x1>
     d7c:	a0 93 96 01 	sts	0x0196, r26	; 0x800196 <timestamp+0x2>
     d80:	b0 93 97 01 	sts	0x0197, r27	; 0x800197 <timestamp+0x3>
     d84:	e0 91 3c 02 	lds	r30, 0x023C	; 0x80023c <mtable+0x8>
     d88:	f0 91 3d 02 	lds	r31, 0x023D	; 0x80023d <mtable+0x9>
     d8c:	30 97       	sbiw	r30, 0x00	; 0
     d8e:	39 f0       	breq	.+14     	; 0xd9e <__vector_5+0xb2>
     d90:	64 e0       	ldi	r22, 0x04	; 4
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <otable+0x8>
     d98:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <otable+0x9>
     d9c:	09 95       	icall
     d9e:	0e 94 8b 04 	call	0x916	; 0x916 <schedule>
     da2:	ff 91       	pop	r31
     da4:	ef 91       	pop	r30
     da6:	bf 91       	pop	r27
     da8:	af 91       	pop	r26
     daa:	9f 91       	pop	r25
     dac:	8f 91       	pop	r24
     dae:	7f 91       	pop	r23
     db0:	6f 91       	pop	r22
     db2:	5f 91       	pop	r21
     db4:	4f 91       	pop	r20
     db6:	3f 91       	pop	r19
     db8:	2f 91       	pop	r18
     dba:	0f 90       	pop	r0
     dbc:	0f be       	out	0x3f, r0	; 63
     dbe:	0f 90       	pop	r0
     dc0:	1f 90       	pop	r1
     dc2:	18 95       	reti

00000dc4 <__vector_10>:
     dc4:	1f 92       	push	r1
     dc6:	0f 92       	push	r0
     dc8:	0f b6       	in	r0, 0x3f	; 63
     dca:	0f 92       	push	r0
     dcc:	11 24       	eor	r1, r1
     dce:	2f 93       	push	r18
     dd0:	3f 93       	push	r19
     dd2:	4f 93       	push	r20
     dd4:	5f 93       	push	r21
     dd6:	6f 93       	push	r22
     dd8:	7f 93       	push	r23
     dda:	8f 93       	push	r24
     ddc:	9f 93       	push	r25
     dde:	af 93       	push	r26
     de0:	bf 93       	push	r27
     de2:	ef 93       	push	r30
     de4:	ff 93       	push	r31
     de6:	20 91 92 01 	lds	r18, 0x0192	; 0x800192 <overflows>
     dea:	30 91 93 01 	lds	r19, 0x0193	; 0x800193 <overflows+0x1>
     dee:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     df2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     df6:	c9 01       	movw	r24, r18
     df8:	03 2e       	mov	r0, r19
     dfa:	00 0c       	add	r0, r0
     dfc:	aa 0b       	sbc	r26, r26
     dfe:	bb 0b       	sbc	r27, r27
     e00:	dc 01       	movw	r26, r24
     e02:	99 27       	eor	r25, r25
     e04:	88 27       	eor	r24, r24
     e06:	60 e0       	ldi	r22, 0x00	; 0
     e08:	70 e0       	ldi	r23, 0x00	; 0
     e0a:	84 2b       	or	r24, r20
     e0c:	95 2b       	or	r25, r21
     e0e:	a6 2b       	or	r26, r22
     e10:	b7 2b       	or	r27, r23
     e12:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <timestamp>
     e16:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <timestamp+0x1>
     e1a:	a0 93 96 01 	sts	0x0196, r26	; 0x800196 <timestamp+0x2>
     e1e:	b0 93 97 01 	sts	0x0197, r27	; 0x800197 <timestamp+0x3>
     e22:	b0 9b       	sbis	0x16, 0	; 22
     e24:	1b c0       	rjmp	.+54     	; 0xe5c <__vector_10+0x98>
     e26:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     e2a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     e2e:	c9 01       	movw	r24, r18
     e30:	01 96       	adiw	r24, 0x01	; 1
     e32:	09 2e       	mov	r0, r25
     e34:	00 0c       	add	r0, r0
     e36:	aa 0b       	sbc	r26, r26
     e38:	bb 0b       	sbc	r27, r27
     e3a:	dc 01       	movw	r26, r24
     e3c:	99 27       	eor	r25, r25
     e3e:	88 27       	eor	r24, r24
     e40:	60 e0       	ldi	r22, 0x00	; 0
     e42:	70 e0       	ldi	r23, 0x00	; 0
     e44:	84 2b       	or	r24, r20
     e46:	95 2b       	or	r25, r21
     e48:	a6 2b       	or	r26, r22
     e4a:	b7 2b       	or	r27, r23
     e4c:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <timestamp>
     e50:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <timestamp+0x1>
     e54:	a0 93 96 01 	sts	0x0196, r26	; 0x800196 <timestamp+0x2>
     e58:	b0 93 97 01 	sts	0x0197, r27	; 0x800197 <timestamp+0x3>
     e5c:	e0 91 3e 02 	lds	r30, 0x023E	; 0x80023e <mtable+0xa>
     e60:	f0 91 3f 02 	lds	r31, 0x023F	; 0x80023f <mtable+0xb>
     e64:	30 97       	sbiw	r30, 0x00	; 0
     e66:	39 f0       	breq	.+14     	; 0xe76 <__vector_10+0xb2>
     e68:	65 e0       	ldi	r22, 0x05	; 5
     e6a:	70 e0       	ldi	r23, 0x00	; 0
     e6c:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <otable+0xa>
     e70:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <otable+0xb>
     e74:	09 95       	icall
     e76:	0e 94 8b 04 	call	0x916	; 0x916 <schedule>
     e7a:	ff 91       	pop	r31
     e7c:	ef 91       	pop	r30
     e7e:	bf 91       	pop	r27
     e80:	af 91       	pop	r26
     e82:	9f 91       	pop	r25
     e84:	8f 91       	pop	r24
     e86:	7f 91       	pop	r23
     e88:	6f 91       	pop	r22
     e8a:	5f 91       	pop	r21
     e8c:	4f 91       	pop	r20
     e8e:	3f 91       	pop	r19
     e90:	2f 91       	pop	r18
     e92:	0f 90       	pop	r0
     e94:	0f be       	out	0x3f, r0	; 63
     e96:	0f 90       	pop	r0
     e98:	1f 90       	pop	r1
     e9a:	18 95       	reti

00000e9c <__vector_11>:
     e9c:	1f 92       	push	r1
     e9e:	0f 92       	push	r0
     ea0:	0f b6       	in	r0, 0x3f	; 63
     ea2:	0f 92       	push	r0
     ea4:	11 24       	eor	r1, r1
     ea6:	2f 93       	push	r18
     ea8:	3f 93       	push	r19
     eaa:	4f 93       	push	r20
     eac:	5f 93       	push	r21
     eae:	6f 93       	push	r22
     eb0:	7f 93       	push	r23
     eb2:	8f 93       	push	r24
     eb4:	9f 93       	push	r25
     eb6:	af 93       	push	r26
     eb8:	bf 93       	push	r27
     eba:	ef 93       	push	r30
     ebc:	ff 93       	push	r31
     ebe:	20 91 92 01 	lds	r18, 0x0192	; 0x800192 <overflows>
     ec2:	30 91 93 01 	lds	r19, 0x0193	; 0x800193 <overflows+0x1>
     ec6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     eca:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     ece:	c9 01       	movw	r24, r18
     ed0:	03 2e       	mov	r0, r19
     ed2:	00 0c       	add	r0, r0
     ed4:	aa 0b       	sbc	r26, r26
     ed6:	bb 0b       	sbc	r27, r27
     ed8:	dc 01       	movw	r26, r24
     eda:	99 27       	eor	r25, r25
     edc:	88 27       	eor	r24, r24
     ede:	60 e0       	ldi	r22, 0x00	; 0
     ee0:	70 e0       	ldi	r23, 0x00	; 0
     ee2:	84 2b       	or	r24, r20
     ee4:	95 2b       	or	r25, r21
     ee6:	a6 2b       	or	r26, r22
     ee8:	b7 2b       	or	r27, r23
     eea:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <timestamp>
     eee:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <timestamp+0x1>
     ef2:	a0 93 96 01 	sts	0x0196, r26	; 0x800196 <timestamp+0x2>
     ef6:	b0 93 97 01 	sts	0x0197, r27	; 0x800197 <timestamp+0x3>
     efa:	b0 9b       	sbis	0x16, 0	; 22
     efc:	1b c0       	rjmp	.+54     	; 0xf34 <__vector_11+0x98>
     efe:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     f02:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     f06:	c9 01       	movw	r24, r18
     f08:	01 96       	adiw	r24, 0x01	; 1
     f0a:	09 2e       	mov	r0, r25
     f0c:	00 0c       	add	r0, r0
     f0e:	aa 0b       	sbc	r26, r26
     f10:	bb 0b       	sbc	r27, r27
     f12:	dc 01       	movw	r26, r24
     f14:	99 27       	eor	r25, r25
     f16:	88 27       	eor	r24, r24
     f18:	60 e0       	ldi	r22, 0x00	; 0
     f1a:	70 e0       	ldi	r23, 0x00	; 0
     f1c:	84 2b       	or	r24, r20
     f1e:	95 2b       	or	r25, r21
     f20:	a6 2b       	or	r26, r22
     f22:	b7 2b       	or	r27, r23
     f24:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <timestamp>
     f28:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <timestamp+0x1>
     f2c:	a0 93 96 01 	sts	0x0196, r26	; 0x800196 <timestamp+0x2>
     f30:	b0 93 97 01 	sts	0x0197, r27	; 0x800197 <timestamp+0x3>
     f34:	e0 91 40 02 	lds	r30, 0x0240	; 0x800240 <mtable+0xc>
     f38:	f0 91 41 02 	lds	r31, 0x0241	; 0x800241 <mtable+0xd>
     f3c:	30 97       	sbiw	r30, 0x00	; 0
     f3e:	39 f0       	breq	.+14     	; 0xf4e <__vector_11+0xb2>
     f40:	66 e0       	ldi	r22, 0x06	; 6
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <otable+0xc>
     f48:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <otable+0xd>
     f4c:	09 95       	icall
     f4e:	0e 94 8b 04 	call	0x916	; 0x916 <schedule>
     f52:	ff 91       	pop	r31
     f54:	ef 91       	pop	r30
     f56:	bf 91       	pop	r27
     f58:	af 91       	pop	r26
     f5a:	9f 91       	pop	r25
     f5c:	8f 91       	pop	r24
     f5e:	7f 91       	pop	r23
     f60:	6f 91       	pop	r22
     f62:	5f 91       	pop	r21
     f64:	4f 91       	pop	r20
     f66:	3f 91       	pop	r19
     f68:	2f 91       	pop	r18
     f6a:	0f 90       	pop	r0
     f6c:	0f be       	out	0x3f, r0	; 63
     f6e:	0f 90       	pop	r0
     f70:	1f 90       	pop	r1
     f72:	18 95       	reti

00000f74 <__vector_12>:
     f74:	1f 92       	push	r1
     f76:	0f 92       	push	r0
     f78:	0f b6       	in	r0, 0x3f	; 63
     f7a:	0f 92       	push	r0
     f7c:	11 24       	eor	r1, r1
     f7e:	2f 93       	push	r18
     f80:	3f 93       	push	r19
     f82:	4f 93       	push	r20
     f84:	5f 93       	push	r21
     f86:	6f 93       	push	r22
     f88:	7f 93       	push	r23
     f8a:	8f 93       	push	r24
     f8c:	9f 93       	push	r25
     f8e:	af 93       	push	r26
     f90:	bf 93       	push	r27
     f92:	ef 93       	push	r30
     f94:	ff 93       	push	r31
     f96:	20 91 92 01 	lds	r18, 0x0192	; 0x800192 <overflows>
     f9a:	30 91 93 01 	lds	r19, 0x0193	; 0x800193 <overflows+0x1>
     f9e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     fa2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     fa6:	c9 01       	movw	r24, r18
     fa8:	03 2e       	mov	r0, r19
     faa:	00 0c       	add	r0, r0
     fac:	aa 0b       	sbc	r26, r26
     fae:	bb 0b       	sbc	r27, r27
     fb0:	dc 01       	movw	r26, r24
     fb2:	99 27       	eor	r25, r25
     fb4:	88 27       	eor	r24, r24
     fb6:	60 e0       	ldi	r22, 0x00	; 0
     fb8:	70 e0       	ldi	r23, 0x00	; 0
     fba:	84 2b       	or	r24, r20
     fbc:	95 2b       	or	r25, r21
     fbe:	a6 2b       	or	r26, r22
     fc0:	b7 2b       	or	r27, r23
     fc2:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <timestamp>
     fc6:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <timestamp+0x1>
     fca:	a0 93 96 01 	sts	0x0196, r26	; 0x800196 <timestamp+0x2>
     fce:	b0 93 97 01 	sts	0x0197, r27	; 0x800197 <timestamp+0x3>
     fd2:	b0 9b       	sbis	0x16, 0	; 22
     fd4:	1b c0       	rjmp	.+54     	; 0x100c <__vector_12+0x98>
     fd6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     fda:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     fde:	c9 01       	movw	r24, r18
     fe0:	01 96       	adiw	r24, 0x01	; 1
     fe2:	09 2e       	mov	r0, r25
     fe4:	00 0c       	add	r0, r0
     fe6:	aa 0b       	sbc	r26, r26
     fe8:	bb 0b       	sbc	r27, r27
     fea:	dc 01       	movw	r26, r24
     fec:	99 27       	eor	r25, r25
     fee:	88 27       	eor	r24, r24
     ff0:	60 e0       	ldi	r22, 0x00	; 0
     ff2:	70 e0       	ldi	r23, 0x00	; 0
     ff4:	84 2b       	or	r24, r20
     ff6:	95 2b       	or	r25, r21
     ff8:	a6 2b       	or	r26, r22
     ffa:	b7 2b       	or	r27, r23
     ffc:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <timestamp>
    1000:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <timestamp+0x1>
    1004:	a0 93 96 01 	sts	0x0196, r26	; 0x800196 <timestamp+0x2>
    1008:	b0 93 97 01 	sts	0x0197, r27	; 0x800197 <timestamp+0x3>
    100c:	e0 91 42 02 	lds	r30, 0x0242	; 0x800242 <mtable+0xe>
    1010:	f0 91 43 02 	lds	r31, 0x0243	; 0x800243 <mtable+0xf>
    1014:	30 97       	sbiw	r30, 0x00	; 0
    1016:	39 f0       	breq	.+14     	; 0x1026 <__vector_12+0xb2>
    1018:	67 e0       	ldi	r22, 0x07	; 7
    101a:	70 e0       	ldi	r23, 0x00	; 0
    101c:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <otable+0xe>
    1020:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <otable+0xf>
    1024:	09 95       	icall
    1026:	0e 94 8b 04 	call	0x916	; 0x916 <schedule>
    102a:	ff 91       	pop	r31
    102c:	ef 91       	pop	r30
    102e:	bf 91       	pop	r27
    1030:	af 91       	pop	r26
    1032:	9f 91       	pop	r25
    1034:	8f 91       	pop	r24
    1036:	7f 91       	pop	r23
    1038:	6f 91       	pop	r22
    103a:	5f 91       	pop	r21
    103c:	4f 91       	pop	r20
    103e:	3f 91       	pop	r19
    1040:	2f 91       	pop	r18
    1042:	0f 90       	pop	r0
    1044:	0f be       	out	0x3f, r0	; 63
    1046:	0f 90       	pop	r0
    1048:	1f 90       	pop	r1
    104a:	18 95       	reti

0000104c <__vector_13>:
    104c:	1f 92       	push	r1
    104e:	0f 92       	push	r0
    1050:	0f b6       	in	r0, 0x3f	; 63
    1052:	0f 92       	push	r0
    1054:	11 24       	eor	r1, r1
    1056:	2f 93       	push	r18
    1058:	3f 93       	push	r19
    105a:	4f 93       	push	r20
    105c:	5f 93       	push	r21
    105e:	6f 93       	push	r22
    1060:	7f 93       	push	r23
    1062:	8f 93       	push	r24
    1064:	9f 93       	push	r25
    1066:	af 93       	push	r26
    1068:	bf 93       	push	r27
    106a:	ef 93       	push	r30
    106c:	ff 93       	push	r31
    106e:	20 91 92 01 	lds	r18, 0x0192	; 0x800192 <overflows>
    1072:	30 91 93 01 	lds	r19, 0x0193	; 0x800193 <overflows+0x1>
    1076:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    107a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    107e:	c9 01       	movw	r24, r18
    1080:	03 2e       	mov	r0, r19
    1082:	00 0c       	add	r0, r0
    1084:	aa 0b       	sbc	r26, r26
    1086:	bb 0b       	sbc	r27, r27
    1088:	dc 01       	movw	r26, r24
    108a:	99 27       	eor	r25, r25
    108c:	88 27       	eor	r24, r24
    108e:	60 e0       	ldi	r22, 0x00	; 0
    1090:	70 e0       	ldi	r23, 0x00	; 0
    1092:	84 2b       	or	r24, r20
    1094:	95 2b       	or	r25, r21
    1096:	a6 2b       	or	r26, r22
    1098:	b7 2b       	or	r27, r23
    109a:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <timestamp>
    109e:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <timestamp+0x1>
    10a2:	a0 93 96 01 	sts	0x0196, r26	; 0x800196 <timestamp+0x2>
    10a6:	b0 93 97 01 	sts	0x0197, r27	; 0x800197 <timestamp+0x3>
    10aa:	b0 9b       	sbis	0x16, 0	; 22
    10ac:	1b c0       	rjmp	.+54     	; 0x10e4 <__vector_13+0x98>
    10ae:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    10b2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    10b6:	c9 01       	movw	r24, r18
    10b8:	01 96       	adiw	r24, 0x01	; 1
    10ba:	09 2e       	mov	r0, r25
    10bc:	00 0c       	add	r0, r0
    10be:	aa 0b       	sbc	r26, r26
    10c0:	bb 0b       	sbc	r27, r27
    10c2:	dc 01       	movw	r26, r24
    10c4:	99 27       	eor	r25, r25
    10c6:	88 27       	eor	r24, r24
    10c8:	60 e0       	ldi	r22, 0x00	; 0
    10ca:	70 e0       	ldi	r23, 0x00	; 0
    10cc:	84 2b       	or	r24, r20
    10ce:	95 2b       	or	r25, r21
    10d0:	a6 2b       	or	r26, r22
    10d2:	b7 2b       	or	r27, r23
    10d4:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <timestamp>
    10d8:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <timestamp+0x1>
    10dc:	a0 93 96 01 	sts	0x0196, r26	; 0x800196 <timestamp+0x2>
    10e0:	b0 93 97 01 	sts	0x0197, r27	; 0x800197 <timestamp+0x3>
    10e4:	e0 91 44 02 	lds	r30, 0x0244	; 0x800244 <mtable+0x10>
    10e8:	f0 91 45 02 	lds	r31, 0x0245	; 0x800245 <mtable+0x11>
    10ec:	30 97       	sbiw	r30, 0x00	; 0
    10ee:	39 f0       	breq	.+14     	; 0x10fe <__vector_13+0xb2>
    10f0:	68 e0       	ldi	r22, 0x08	; 8
    10f2:	70 e0       	ldi	r23, 0x00	; 0
    10f4:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <otable+0x10>
    10f8:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <otable+0x11>
    10fc:	09 95       	icall
    10fe:	0e 94 8b 04 	call	0x916	; 0x916 <schedule>
    1102:	ff 91       	pop	r31
    1104:	ef 91       	pop	r30
    1106:	bf 91       	pop	r27
    1108:	af 91       	pop	r26
    110a:	9f 91       	pop	r25
    110c:	8f 91       	pop	r24
    110e:	7f 91       	pop	r23
    1110:	6f 91       	pop	r22
    1112:	5f 91       	pop	r21
    1114:	4f 91       	pop	r20
    1116:	3f 91       	pop	r19
    1118:	2f 91       	pop	r18
    111a:	0f 90       	pop	r0
    111c:	0f be       	out	0x3f, r0	; 63
    111e:	0f 90       	pop	r0
    1120:	1f 90       	pop	r1
    1122:	18 95       	reti

00001124 <__vector_14>:
    1124:	1f 92       	push	r1
    1126:	0f 92       	push	r0
    1128:	0f b6       	in	r0, 0x3f	; 63
    112a:	0f 92       	push	r0
    112c:	11 24       	eor	r1, r1
    112e:	2f 93       	push	r18
    1130:	3f 93       	push	r19
    1132:	4f 93       	push	r20
    1134:	5f 93       	push	r21
    1136:	6f 93       	push	r22
    1138:	7f 93       	push	r23
    113a:	8f 93       	push	r24
    113c:	9f 93       	push	r25
    113e:	af 93       	push	r26
    1140:	bf 93       	push	r27
    1142:	ef 93       	push	r30
    1144:	ff 93       	push	r31
    1146:	20 91 92 01 	lds	r18, 0x0192	; 0x800192 <overflows>
    114a:	30 91 93 01 	lds	r19, 0x0193	; 0x800193 <overflows+0x1>
    114e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1152:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1156:	c9 01       	movw	r24, r18
    1158:	03 2e       	mov	r0, r19
    115a:	00 0c       	add	r0, r0
    115c:	aa 0b       	sbc	r26, r26
    115e:	bb 0b       	sbc	r27, r27
    1160:	dc 01       	movw	r26, r24
    1162:	99 27       	eor	r25, r25
    1164:	88 27       	eor	r24, r24
    1166:	60 e0       	ldi	r22, 0x00	; 0
    1168:	70 e0       	ldi	r23, 0x00	; 0
    116a:	84 2b       	or	r24, r20
    116c:	95 2b       	or	r25, r21
    116e:	a6 2b       	or	r26, r22
    1170:	b7 2b       	or	r27, r23
    1172:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <timestamp>
    1176:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <timestamp+0x1>
    117a:	a0 93 96 01 	sts	0x0196, r26	; 0x800196 <timestamp+0x2>
    117e:	b0 93 97 01 	sts	0x0197, r27	; 0x800197 <timestamp+0x3>
    1182:	b0 9b       	sbis	0x16, 0	; 22
    1184:	1b c0       	rjmp	.+54     	; 0x11bc <__vector_14+0x98>
    1186:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    118a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    118e:	c9 01       	movw	r24, r18
    1190:	01 96       	adiw	r24, 0x01	; 1
    1192:	09 2e       	mov	r0, r25
    1194:	00 0c       	add	r0, r0
    1196:	aa 0b       	sbc	r26, r26
    1198:	bb 0b       	sbc	r27, r27
    119a:	dc 01       	movw	r26, r24
    119c:	99 27       	eor	r25, r25
    119e:	88 27       	eor	r24, r24
    11a0:	60 e0       	ldi	r22, 0x00	; 0
    11a2:	70 e0       	ldi	r23, 0x00	; 0
    11a4:	84 2b       	or	r24, r20
    11a6:	95 2b       	or	r25, r21
    11a8:	a6 2b       	or	r26, r22
    11aa:	b7 2b       	or	r27, r23
    11ac:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <timestamp>
    11b0:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <timestamp+0x1>
    11b4:	a0 93 96 01 	sts	0x0196, r26	; 0x800196 <timestamp+0x2>
    11b8:	b0 93 97 01 	sts	0x0197, r27	; 0x800197 <timestamp+0x3>
    11bc:	e0 91 46 02 	lds	r30, 0x0246	; 0x800246 <mtable+0x12>
    11c0:	f0 91 47 02 	lds	r31, 0x0247	; 0x800247 <mtable+0x13>
    11c4:	30 97       	sbiw	r30, 0x00	; 0
    11c6:	39 f0       	breq	.+14     	; 0x11d6 <__vector_14+0xb2>
    11c8:	69 e0       	ldi	r22, 0x09	; 9
    11ca:	70 e0       	ldi	r23, 0x00	; 0
    11cc:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <otable+0x12>
    11d0:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <otable+0x13>
    11d4:	09 95       	icall
    11d6:	0e 94 8b 04 	call	0x916	; 0x916 <schedule>
    11da:	ff 91       	pop	r31
    11dc:	ef 91       	pop	r30
    11de:	bf 91       	pop	r27
    11e0:	af 91       	pop	r26
    11e2:	9f 91       	pop	r25
    11e4:	8f 91       	pop	r24
    11e6:	7f 91       	pop	r23
    11e8:	6f 91       	pop	r22
    11ea:	5f 91       	pop	r21
    11ec:	4f 91       	pop	r20
    11ee:	3f 91       	pop	r19
    11f0:	2f 91       	pop	r18
    11f2:	0f 90       	pop	r0
    11f4:	0f be       	out	0x3f, r0	; 63
    11f6:	0f 90       	pop	r0
    11f8:	1f 90       	pop	r1
    11fa:	18 95       	reti

000011fc <__vector_15>:
    11fc:	1f 92       	push	r1
    11fe:	0f 92       	push	r0
    1200:	0f b6       	in	r0, 0x3f	; 63
    1202:	0f 92       	push	r0
    1204:	11 24       	eor	r1, r1
    1206:	2f 93       	push	r18
    1208:	3f 93       	push	r19
    120a:	4f 93       	push	r20
    120c:	5f 93       	push	r21
    120e:	6f 93       	push	r22
    1210:	7f 93       	push	r23
    1212:	8f 93       	push	r24
    1214:	9f 93       	push	r25
    1216:	af 93       	push	r26
    1218:	bf 93       	push	r27
    121a:	ef 93       	push	r30
    121c:	ff 93       	push	r31
    121e:	20 91 92 01 	lds	r18, 0x0192	; 0x800192 <overflows>
    1222:	30 91 93 01 	lds	r19, 0x0193	; 0x800193 <overflows+0x1>
    1226:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    122a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    122e:	c9 01       	movw	r24, r18
    1230:	03 2e       	mov	r0, r19
    1232:	00 0c       	add	r0, r0
    1234:	aa 0b       	sbc	r26, r26
    1236:	bb 0b       	sbc	r27, r27
    1238:	dc 01       	movw	r26, r24
    123a:	99 27       	eor	r25, r25
    123c:	88 27       	eor	r24, r24
    123e:	60 e0       	ldi	r22, 0x00	; 0
    1240:	70 e0       	ldi	r23, 0x00	; 0
    1242:	84 2b       	or	r24, r20
    1244:	95 2b       	or	r25, r21
    1246:	a6 2b       	or	r26, r22
    1248:	b7 2b       	or	r27, r23
    124a:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <timestamp>
    124e:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <timestamp+0x1>
    1252:	a0 93 96 01 	sts	0x0196, r26	; 0x800196 <timestamp+0x2>
    1256:	b0 93 97 01 	sts	0x0197, r27	; 0x800197 <timestamp+0x3>
    125a:	b0 9b       	sbis	0x16, 0	; 22
    125c:	1b c0       	rjmp	.+54     	; 0x1294 <__vector_15+0x98>
    125e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1262:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1266:	c9 01       	movw	r24, r18
    1268:	01 96       	adiw	r24, 0x01	; 1
    126a:	09 2e       	mov	r0, r25
    126c:	00 0c       	add	r0, r0
    126e:	aa 0b       	sbc	r26, r26
    1270:	bb 0b       	sbc	r27, r27
    1272:	dc 01       	movw	r26, r24
    1274:	99 27       	eor	r25, r25
    1276:	88 27       	eor	r24, r24
    1278:	60 e0       	ldi	r22, 0x00	; 0
    127a:	70 e0       	ldi	r23, 0x00	; 0
    127c:	84 2b       	or	r24, r20
    127e:	95 2b       	or	r25, r21
    1280:	a6 2b       	or	r26, r22
    1282:	b7 2b       	or	r27, r23
    1284:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <timestamp>
    1288:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <timestamp+0x1>
    128c:	a0 93 96 01 	sts	0x0196, r26	; 0x800196 <timestamp+0x2>
    1290:	b0 93 97 01 	sts	0x0197, r27	; 0x800197 <timestamp+0x3>
    1294:	e0 91 48 02 	lds	r30, 0x0248	; 0x800248 <mtable+0x14>
    1298:	f0 91 49 02 	lds	r31, 0x0249	; 0x800249 <mtable+0x15>
    129c:	30 97       	sbiw	r30, 0x00	; 0
    129e:	39 f0       	breq	.+14     	; 0x12ae <__vector_15+0xb2>
    12a0:	6a e0       	ldi	r22, 0x0A	; 10
    12a2:	70 e0       	ldi	r23, 0x00	; 0
    12a4:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <otable+0x14>
    12a8:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <otable+0x15>
    12ac:	09 95       	icall
    12ae:	0e 94 8b 04 	call	0x916	; 0x916 <schedule>
    12b2:	ff 91       	pop	r31
    12b4:	ef 91       	pop	r30
    12b6:	bf 91       	pop	r27
    12b8:	af 91       	pop	r26
    12ba:	9f 91       	pop	r25
    12bc:	8f 91       	pop	r24
    12be:	7f 91       	pop	r23
    12c0:	6f 91       	pop	r22
    12c2:	5f 91       	pop	r21
    12c4:	4f 91       	pop	r20
    12c6:	3f 91       	pop	r19
    12c8:	2f 91       	pop	r18
    12ca:	0f 90       	pop	r0
    12cc:	0f be       	out	0x3f, r0	; 63
    12ce:	0f 90       	pop	r0
    12d0:	1f 90       	pop	r1
    12d2:	18 95       	reti

000012d4 <__vector_16>:
    12d4:	1f 92       	push	r1
    12d6:	0f 92       	push	r0
    12d8:	0f b6       	in	r0, 0x3f	; 63
    12da:	0f 92       	push	r0
    12dc:	11 24       	eor	r1, r1
    12de:	2f 93       	push	r18
    12e0:	3f 93       	push	r19
    12e2:	4f 93       	push	r20
    12e4:	5f 93       	push	r21
    12e6:	6f 93       	push	r22
    12e8:	7f 93       	push	r23
    12ea:	8f 93       	push	r24
    12ec:	9f 93       	push	r25
    12ee:	af 93       	push	r26
    12f0:	bf 93       	push	r27
    12f2:	ef 93       	push	r30
    12f4:	ff 93       	push	r31
    12f6:	20 91 92 01 	lds	r18, 0x0192	; 0x800192 <overflows>
    12fa:	30 91 93 01 	lds	r19, 0x0193	; 0x800193 <overflows+0x1>
    12fe:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1302:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1306:	c9 01       	movw	r24, r18
    1308:	03 2e       	mov	r0, r19
    130a:	00 0c       	add	r0, r0
    130c:	aa 0b       	sbc	r26, r26
    130e:	bb 0b       	sbc	r27, r27
    1310:	dc 01       	movw	r26, r24
    1312:	99 27       	eor	r25, r25
    1314:	88 27       	eor	r24, r24
    1316:	60 e0       	ldi	r22, 0x00	; 0
    1318:	70 e0       	ldi	r23, 0x00	; 0
    131a:	84 2b       	or	r24, r20
    131c:	95 2b       	or	r25, r21
    131e:	a6 2b       	or	r26, r22
    1320:	b7 2b       	or	r27, r23
    1322:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <timestamp>
    1326:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <timestamp+0x1>
    132a:	a0 93 96 01 	sts	0x0196, r26	; 0x800196 <timestamp+0x2>
    132e:	b0 93 97 01 	sts	0x0197, r27	; 0x800197 <timestamp+0x3>
    1332:	b0 9b       	sbis	0x16, 0	; 22
    1334:	1b c0       	rjmp	.+54     	; 0x136c <__vector_16+0x98>
    1336:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    133a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    133e:	c9 01       	movw	r24, r18
    1340:	01 96       	adiw	r24, 0x01	; 1
    1342:	09 2e       	mov	r0, r25
    1344:	00 0c       	add	r0, r0
    1346:	aa 0b       	sbc	r26, r26
    1348:	bb 0b       	sbc	r27, r27
    134a:	dc 01       	movw	r26, r24
    134c:	99 27       	eor	r25, r25
    134e:	88 27       	eor	r24, r24
    1350:	60 e0       	ldi	r22, 0x00	; 0
    1352:	70 e0       	ldi	r23, 0x00	; 0
    1354:	84 2b       	or	r24, r20
    1356:	95 2b       	or	r25, r21
    1358:	a6 2b       	or	r26, r22
    135a:	b7 2b       	or	r27, r23
    135c:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <timestamp>
    1360:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <timestamp+0x1>
    1364:	a0 93 96 01 	sts	0x0196, r26	; 0x800196 <timestamp+0x2>
    1368:	b0 93 97 01 	sts	0x0197, r27	; 0x800197 <timestamp+0x3>
    136c:	e0 91 4a 02 	lds	r30, 0x024A	; 0x80024a <mtable+0x16>
    1370:	f0 91 4b 02 	lds	r31, 0x024B	; 0x80024b <mtable+0x17>
    1374:	30 97       	sbiw	r30, 0x00	; 0
    1376:	39 f0       	breq	.+14     	; 0x1386 <__vector_16+0xb2>
    1378:	6b e0       	ldi	r22, 0x0B	; 11
    137a:	70 e0       	ldi	r23, 0x00	; 0
    137c:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <otable+0x16>
    1380:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <otable+0x17>
    1384:	09 95       	icall
    1386:	0e 94 8b 04 	call	0x916	; 0x916 <schedule>
    138a:	ff 91       	pop	r31
    138c:	ef 91       	pop	r30
    138e:	bf 91       	pop	r27
    1390:	af 91       	pop	r26
    1392:	9f 91       	pop	r25
    1394:	8f 91       	pop	r24
    1396:	7f 91       	pop	r23
    1398:	6f 91       	pop	r22
    139a:	5f 91       	pop	r21
    139c:	4f 91       	pop	r20
    139e:	3f 91       	pop	r19
    13a0:	2f 91       	pop	r18
    13a2:	0f 90       	pop	r0
    13a4:	0f be       	out	0x3f, r0	; 63
    13a6:	0f 90       	pop	r0
    13a8:	1f 90       	pop	r1
    13aa:	18 95       	reti

000013ac <__vector_17>:
    13ac:	1f 92       	push	r1
    13ae:	0f 92       	push	r0
    13b0:	0f b6       	in	r0, 0x3f	; 63
    13b2:	0f 92       	push	r0
    13b4:	11 24       	eor	r1, r1
    13b6:	2f 93       	push	r18
    13b8:	3f 93       	push	r19
    13ba:	4f 93       	push	r20
    13bc:	5f 93       	push	r21
    13be:	6f 93       	push	r22
    13c0:	7f 93       	push	r23
    13c2:	8f 93       	push	r24
    13c4:	9f 93       	push	r25
    13c6:	af 93       	push	r26
    13c8:	bf 93       	push	r27
    13ca:	ef 93       	push	r30
    13cc:	ff 93       	push	r31
    13ce:	20 91 92 01 	lds	r18, 0x0192	; 0x800192 <overflows>
    13d2:	30 91 93 01 	lds	r19, 0x0193	; 0x800193 <overflows+0x1>
    13d6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    13da:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    13de:	c9 01       	movw	r24, r18
    13e0:	03 2e       	mov	r0, r19
    13e2:	00 0c       	add	r0, r0
    13e4:	aa 0b       	sbc	r26, r26
    13e6:	bb 0b       	sbc	r27, r27
    13e8:	dc 01       	movw	r26, r24
    13ea:	99 27       	eor	r25, r25
    13ec:	88 27       	eor	r24, r24
    13ee:	60 e0       	ldi	r22, 0x00	; 0
    13f0:	70 e0       	ldi	r23, 0x00	; 0
    13f2:	84 2b       	or	r24, r20
    13f4:	95 2b       	or	r25, r21
    13f6:	a6 2b       	or	r26, r22
    13f8:	b7 2b       	or	r27, r23
    13fa:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <timestamp>
    13fe:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <timestamp+0x1>
    1402:	a0 93 96 01 	sts	0x0196, r26	; 0x800196 <timestamp+0x2>
    1406:	b0 93 97 01 	sts	0x0197, r27	; 0x800197 <timestamp+0x3>
    140a:	b0 9b       	sbis	0x16, 0	; 22
    140c:	1b c0       	rjmp	.+54     	; 0x1444 <__vector_17+0x98>
    140e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1412:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1416:	c9 01       	movw	r24, r18
    1418:	01 96       	adiw	r24, 0x01	; 1
    141a:	09 2e       	mov	r0, r25
    141c:	00 0c       	add	r0, r0
    141e:	aa 0b       	sbc	r26, r26
    1420:	bb 0b       	sbc	r27, r27
    1422:	dc 01       	movw	r26, r24
    1424:	99 27       	eor	r25, r25
    1426:	88 27       	eor	r24, r24
    1428:	60 e0       	ldi	r22, 0x00	; 0
    142a:	70 e0       	ldi	r23, 0x00	; 0
    142c:	84 2b       	or	r24, r20
    142e:	95 2b       	or	r25, r21
    1430:	a6 2b       	or	r26, r22
    1432:	b7 2b       	or	r27, r23
    1434:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <timestamp>
    1438:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <timestamp+0x1>
    143c:	a0 93 96 01 	sts	0x0196, r26	; 0x800196 <timestamp+0x2>
    1440:	b0 93 97 01 	sts	0x0197, r27	; 0x800197 <timestamp+0x3>
    1444:	e0 91 4c 02 	lds	r30, 0x024C	; 0x80024c <mtable+0x18>
    1448:	f0 91 4d 02 	lds	r31, 0x024D	; 0x80024d <mtable+0x19>
    144c:	30 97       	sbiw	r30, 0x00	; 0
    144e:	39 f0       	breq	.+14     	; 0x145e <__vector_17+0xb2>
    1450:	6c e0       	ldi	r22, 0x0C	; 12
    1452:	70 e0       	ldi	r23, 0x00	; 0
    1454:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <otable+0x18>
    1458:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <otable+0x19>
    145c:	09 95       	icall
    145e:	0e 94 8b 04 	call	0x916	; 0x916 <schedule>
    1462:	ff 91       	pop	r31
    1464:	ef 91       	pop	r30
    1466:	bf 91       	pop	r27
    1468:	af 91       	pop	r26
    146a:	9f 91       	pop	r25
    146c:	8f 91       	pop	r24
    146e:	7f 91       	pop	r23
    1470:	6f 91       	pop	r22
    1472:	5f 91       	pop	r21
    1474:	4f 91       	pop	r20
    1476:	3f 91       	pop	r19
    1478:	2f 91       	pop	r18
    147a:	0f 90       	pop	r0
    147c:	0f be       	out	0x3f, r0	; 63
    147e:	0f 90       	pop	r0
    1480:	1f 90       	pop	r1
    1482:	18 95       	reti

00001484 <__vector_18>:
    1484:	1f 92       	push	r1
    1486:	0f 92       	push	r0
    1488:	0f b6       	in	r0, 0x3f	; 63
    148a:	0f 92       	push	r0
    148c:	11 24       	eor	r1, r1
    148e:	2f 93       	push	r18
    1490:	3f 93       	push	r19
    1492:	4f 93       	push	r20
    1494:	5f 93       	push	r21
    1496:	6f 93       	push	r22
    1498:	7f 93       	push	r23
    149a:	8f 93       	push	r24
    149c:	9f 93       	push	r25
    149e:	af 93       	push	r26
    14a0:	bf 93       	push	r27
    14a2:	ef 93       	push	r30
    14a4:	ff 93       	push	r31
    14a6:	20 91 92 01 	lds	r18, 0x0192	; 0x800192 <overflows>
    14aa:	30 91 93 01 	lds	r19, 0x0193	; 0x800193 <overflows+0x1>
    14ae:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    14b2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    14b6:	c9 01       	movw	r24, r18
    14b8:	03 2e       	mov	r0, r19
    14ba:	00 0c       	add	r0, r0
    14bc:	aa 0b       	sbc	r26, r26
    14be:	bb 0b       	sbc	r27, r27
    14c0:	dc 01       	movw	r26, r24
    14c2:	99 27       	eor	r25, r25
    14c4:	88 27       	eor	r24, r24
    14c6:	60 e0       	ldi	r22, 0x00	; 0
    14c8:	70 e0       	ldi	r23, 0x00	; 0
    14ca:	84 2b       	or	r24, r20
    14cc:	95 2b       	or	r25, r21
    14ce:	a6 2b       	or	r26, r22
    14d0:	b7 2b       	or	r27, r23
    14d2:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <timestamp>
    14d6:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <timestamp+0x1>
    14da:	a0 93 96 01 	sts	0x0196, r26	; 0x800196 <timestamp+0x2>
    14de:	b0 93 97 01 	sts	0x0197, r27	; 0x800197 <timestamp+0x3>
    14e2:	b0 9b       	sbis	0x16, 0	; 22
    14e4:	1b c0       	rjmp	.+54     	; 0x151c <__vector_18+0x98>
    14e6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    14ea:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    14ee:	c9 01       	movw	r24, r18
    14f0:	01 96       	adiw	r24, 0x01	; 1
    14f2:	09 2e       	mov	r0, r25
    14f4:	00 0c       	add	r0, r0
    14f6:	aa 0b       	sbc	r26, r26
    14f8:	bb 0b       	sbc	r27, r27
    14fa:	dc 01       	movw	r26, r24
    14fc:	99 27       	eor	r25, r25
    14fe:	88 27       	eor	r24, r24
    1500:	60 e0       	ldi	r22, 0x00	; 0
    1502:	70 e0       	ldi	r23, 0x00	; 0
    1504:	84 2b       	or	r24, r20
    1506:	95 2b       	or	r25, r21
    1508:	a6 2b       	or	r26, r22
    150a:	b7 2b       	or	r27, r23
    150c:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <timestamp>
    1510:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <timestamp+0x1>
    1514:	a0 93 96 01 	sts	0x0196, r26	; 0x800196 <timestamp+0x2>
    1518:	b0 93 97 01 	sts	0x0197, r27	; 0x800197 <timestamp+0x3>
    151c:	e0 91 4e 02 	lds	r30, 0x024E	; 0x80024e <mtable+0x1a>
    1520:	f0 91 4f 02 	lds	r31, 0x024F	; 0x80024f <mtable+0x1b>
    1524:	30 97       	sbiw	r30, 0x00	; 0
    1526:	39 f0       	breq	.+14     	; 0x1536 <__vector_18+0xb2>
    1528:	6d e0       	ldi	r22, 0x0D	; 13
    152a:	70 e0       	ldi	r23, 0x00	; 0
    152c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <otable+0x1a>
    1530:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <otable+0x1b>
    1534:	09 95       	icall
    1536:	0e 94 8b 04 	call	0x916	; 0x916 <schedule>
    153a:	ff 91       	pop	r31
    153c:	ef 91       	pop	r30
    153e:	bf 91       	pop	r27
    1540:	af 91       	pop	r26
    1542:	9f 91       	pop	r25
    1544:	8f 91       	pop	r24
    1546:	7f 91       	pop	r23
    1548:	6f 91       	pop	r22
    154a:	5f 91       	pop	r21
    154c:	4f 91       	pop	r20
    154e:	3f 91       	pop	r19
    1550:	2f 91       	pop	r18
    1552:	0f 90       	pop	r0
    1554:	0f be       	out	0x3f, r0	; 63
    1556:	0f 90       	pop	r0
    1558:	1f 90       	pop	r1
    155a:	18 95       	reti

0000155c <__vector_19>:
    155c:	1f 92       	push	r1
    155e:	0f 92       	push	r0
    1560:	0f b6       	in	r0, 0x3f	; 63
    1562:	0f 92       	push	r0
    1564:	11 24       	eor	r1, r1
    1566:	2f 93       	push	r18
    1568:	3f 93       	push	r19
    156a:	4f 93       	push	r20
    156c:	5f 93       	push	r21
    156e:	6f 93       	push	r22
    1570:	7f 93       	push	r23
    1572:	8f 93       	push	r24
    1574:	9f 93       	push	r25
    1576:	af 93       	push	r26
    1578:	bf 93       	push	r27
    157a:	ef 93       	push	r30
    157c:	ff 93       	push	r31
    157e:	20 91 92 01 	lds	r18, 0x0192	; 0x800192 <overflows>
    1582:	30 91 93 01 	lds	r19, 0x0193	; 0x800193 <overflows+0x1>
    1586:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    158a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    158e:	c9 01       	movw	r24, r18
    1590:	03 2e       	mov	r0, r19
    1592:	00 0c       	add	r0, r0
    1594:	aa 0b       	sbc	r26, r26
    1596:	bb 0b       	sbc	r27, r27
    1598:	dc 01       	movw	r26, r24
    159a:	99 27       	eor	r25, r25
    159c:	88 27       	eor	r24, r24
    159e:	60 e0       	ldi	r22, 0x00	; 0
    15a0:	70 e0       	ldi	r23, 0x00	; 0
    15a2:	84 2b       	or	r24, r20
    15a4:	95 2b       	or	r25, r21
    15a6:	a6 2b       	or	r26, r22
    15a8:	b7 2b       	or	r27, r23
    15aa:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <timestamp>
    15ae:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <timestamp+0x1>
    15b2:	a0 93 96 01 	sts	0x0196, r26	; 0x800196 <timestamp+0x2>
    15b6:	b0 93 97 01 	sts	0x0197, r27	; 0x800197 <timestamp+0x3>
    15ba:	b0 9b       	sbis	0x16, 0	; 22
    15bc:	1b c0       	rjmp	.+54     	; 0x15f4 <__vector_19+0x98>
    15be:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    15c2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    15c6:	c9 01       	movw	r24, r18
    15c8:	01 96       	adiw	r24, 0x01	; 1
    15ca:	09 2e       	mov	r0, r25
    15cc:	00 0c       	add	r0, r0
    15ce:	aa 0b       	sbc	r26, r26
    15d0:	bb 0b       	sbc	r27, r27
    15d2:	dc 01       	movw	r26, r24
    15d4:	99 27       	eor	r25, r25
    15d6:	88 27       	eor	r24, r24
    15d8:	60 e0       	ldi	r22, 0x00	; 0
    15da:	70 e0       	ldi	r23, 0x00	; 0
    15dc:	84 2b       	or	r24, r20
    15de:	95 2b       	or	r25, r21
    15e0:	a6 2b       	or	r26, r22
    15e2:	b7 2b       	or	r27, r23
    15e4:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <timestamp>
    15e8:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <timestamp+0x1>
    15ec:	a0 93 96 01 	sts	0x0196, r26	; 0x800196 <timestamp+0x2>
    15f0:	b0 93 97 01 	sts	0x0197, r27	; 0x800197 <timestamp+0x3>
    15f4:	e0 91 50 02 	lds	r30, 0x0250	; 0x800250 <mtable+0x1c>
    15f8:	f0 91 51 02 	lds	r31, 0x0251	; 0x800251 <mtable+0x1d>
    15fc:	30 97       	sbiw	r30, 0x00	; 0
    15fe:	39 f0       	breq	.+14     	; 0x160e <__vector_19+0xb2>
    1600:	6e e0       	ldi	r22, 0x0E	; 14
    1602:	70 e0       	ldi	r23, 0x00	; 0
    1604:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <otable+0x1c>
    1608:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <otable+0x1d>
    160c:	09 95       	icall
    160e:	0e 94 8b 04 	call	0x916	; 0x916 <schedule>
    1612:	ff 91       	pop	r31
    1614:	ef 91       	pop	r30
    1616:	bf 91       	pop	r27
    1618:	af 91       	pop	r26
    161a:	9f 91       	pop	r25
    161c:	8f 91       	pop	r24
    161e:	7f 91       	pop	r23
    1620:	6f 91       	pop	r22
    1622:	5f 91       	pop	r21
    1624:	4f 91       	pop	r20
    1626:	3f 91       	pop	r19
    1628:	2f 91       	pop	r18
    162a:	0f 90       	pop	r0
    162c:	0f be       	out	0x3f, r0	; 63
    162e:	0f 90       	pop	r0
    1630:	1f 90       	pop	r1
    1632:	18 95       	reti

00001634 <__vector_20>:
    1634:	1f 92       	push	r1
    1636:	0f 92       	push	r0
    1638:	0f b6       	in	r0, 0x3f	; 63
    163a:	0f 92       	push	r0
    163c:	11 24       	eor	r1, r1
    163e:	2f 93       	push	r18
    1640:	3f 93       	push	r19
    1642:	4f 93       	push	r20
    1644:	5f 93       	push	r21
    1646:	6f 93       	push	r22
    1648:	7f 93       	push	r23
    164a:	8f 93       	push	r24
    164c:	9f 93       	push	r25
    164e:	af 93       	push	r26
    1650:	bf 93       	push	r27
    1652:	ef 93       	push	r30
    1654:	ff 93       	push	r31
    1656:	20 91 92 01 	lds	r18, 0x0192	; 0x800192 <overflows>
    165a:	30 91 93 01 	lds	r19, 0x0193	; 0x800193 <overflows+0x1>
    165e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1662:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1666:	c9 01       	movw	r24, r18
    1668:	03 2e       	mov	r0, r19
    166a:	00 0c       	add	r0, r0
    166c:	aa 0b       	sbc	r26, r26
    166e:	bb 0b       	sbc	r27, r27
    1670:	dc 01       	movw	r26, r24
    1672:	99 27       	eor	r25, r25
    1674:	88 27       	eor	r24, r24
    1676:	60 e0       	ldi	r22, 0x00	; 0
    1678:	70 e0       	ldi	r23, 0x00	; 0
    167a:	84 2b       	or	r24, r20
    167c:	95 2b       	or	r25, r21
    167e:	a6 2b       	or	r26, r22
    1680:	b7 2b       	or	r27, r23
    1682:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <timestamp>
    1686:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <timestamp+0x1>
    168a:	a0 93 96 01 	sts	0x0196, r26	; 0x800196 <timestamp+0x2>
    168e:	b0 93 97 01 	sts	0x0197, r27	; 0x800197 <timestamp+0x3>
    1692:	b0 9b       	sbis	0x16, 0	; 22
    1694:	1b c0       	rjmp	.+54     	; 0x16cc <__vector_20+0x98>
    1696:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    169a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    169e:	c9 01       	movw	r24, r18
    16a0:	01 96       	adiw	r24, 0x01	; 1
    16a2:	09 2e       	mov	r0, r25
    16a4:	00 0c       	add	r0, r0
    16a6:	aa 0b       	sbc	r26, r26
    16a8:	bb 0b       	sbc	r27, r27
    16aa:	dc 01       	movw	r26, r24
    16ac:	99 27       	eor	r25, r25
    16ae:	88 27       	eor	r24, r24
    16b0:	60 e0       	ldi	r22, 0x00	; 0
    16b2:	70 e0       	ldi	r23, 0x00	; 0
    16b4:	84 2b       	or	r24, r20
    16b6:	95 2b       	or	r25, r21
    16b8:	a6 2b       	or	r26, r22
    16ba:	b7 2b       	or	r27, r23
    16bc:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <timestamp>
    16c0:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <timestamp+0x1>
    16c4:	a0 93 96 01 	sts	0x0196, r26	; 0x800196 <timestamp+0x2>
    16c8:	b0 93 97 01 	sts	0x0197, r27	; 0x800197 <timestamp+0x3>
    16cc:	e0 91 52 02 	lds	r30, 0x0252	; 0x800252 <mtable+0x1e>
    16d0:	f0 91 53 02 	lds	r31, 0x0253	; 0x800253 <mtable+0x1f>
    16d4:	30 97       	sbiw	r30, 0x00	; 0
    16d6:	39 f0       	breq	.+14     	; 0x16e6 <__vector_20+0xb2>
    16d8:	6f e0       	ldi	r22, 0x0F	; 15
    16da:	70 e0       	ldi	r23, 0x00	; 0
    16dc:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <otable+0x1e>
    16e0:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <otable+0x1f>
    16e4:	09 95       	icall
    16e6:	0e 94 8b 04 	call	0x916	; 0x916 <schedule>
    16ea:	ff 91       	pop	r31
    16ec:	ef 91       	pop	r30
    16ee:	bf 91       	pop	r27
    16f0:	af 91       	pop	r26
    16f2:	9f 91       	pop	r25
    16f4:	8f 91       	pop	r24
    16f6:	7f 91       	pop	r23
    16f8:	6f 91       	pop	r22
    16fa:	5f 91       	pop	r21
    16fc:	4f 91       	pop	r20
    16fe:	3f 91       	pop	r19
    1700:	2f 91       	pop	r18
    1702:	0f 90       	pop	r0
    1704:	0f be       	out	0x3f, r0	; 63
    1706:	0f 90       	pop	r0
    1708:	1f 90       	pop	r1
    170a:	18 95       	reti

0000170c <__vector_21>:
    170c:	1f 92       	push	r1
    170e:	0f 92       	push	r0
    1710:	0f b6       	in	r0, 0x3f	; 63
    1712:	0f 92       	push	r0
    1714:	11 24       	eor	r1, r1
    1716:	2f 93       	push	r18
    1718:	3f 93       	push	r19
    171a:	4f 93       	push	r20
    171c:	5f 93       	push	r21
    171e:	6f 93       	push	r22
    1720:	7f 93       	push	r23
    1722:	8f 93       	push	r24
    1724:	9f 93       	push	r25
    1726:	af 93       	push	r26
    1728:	bf 93       	push	r27
    172a:	ef 93       	push	r30
    172c:	ff 93       	push	r31
    172e:	20 91 92 01 	lds	r18, 0x0192	; 0x800192 <overflows>
    1732:	30 91 93 01 	lds	r19, 0x0193	; 0x800193 <overflows+0x1>
    1736:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    173a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    173e:	c9 01       	movw	r24, r18
    1740:	03 2e       	mov	r0, r19
    1742:	00 0c       	add	r0, r0
    1744:	aa 0b       	sbc	r26, r26
    1746:	bb 0b       	sbc	r27, r27
    1748:	dc 01       	movw	r26, r24
    174a:	99 27       	eor	r25, r25
    174c:	88 27       	eor	r24, r24
    174e:	60 e0       	ldi	r22, 0x00	; 0
    1750:	70 e0       	ldi	r23, 0x00	; 0
    1752:	84 2b       	or	r24, r20
    1754:	95 2b       	or	r25, r21
    1756:	a6 2b       	or	r26, r22
    1758:	b7 2b       	or	r27, r23
    175a:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <timestamp>
    175e:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <timestamp+0x1>
    1762:	a0 93 96 01 	sts	0x0196, r26	; 0x800196 <timestamp+0x2>
    1766:	b0 93 97 01 	sts	0x0197, r27	; 0x800197 <timestamp+0x3>
    176a:	b0 9b       	sbis	0x16, 0	; 22
    176c:	1b c0       	rjmp	.+54     	; 0x17a4 <__vector_21+0x98>
    176e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1772:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1776:	c9 01       	movw	r24, r18
    1778:	01 96       	adiw	r24, 0x01	; 1
    177a:	09 2e       	mov	r0, r25
    177c:	00 0c       	add	r0, r0
    177e:	aa 0b       	sbc	r26, r26
    1780:	bb 0b       	sbc	r27, r27
    1782:	dc 01       	movw	r26, r24
    1784:	99 27       	eor	r25, r25
    1786:	88 27       	eor	r24, r24
    1788:	60 e0       	ldi	r22, 0x00	; 0
    178a:	70 e0       	ldi	r23, 0x00	; 0
    178c:	84 2b       	or	r24, r20
    178e:	95 2b       	or	r25, r21
    1790:	a6 2b       	or	r26, r22
    1792:	b7 2b       	or	r27, r23
    1794:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <timestamp>
    1798:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <timestamp+0x1>
    179c:	a0 93 96 01 	sts	0x0196, r26	; 0x800196 <timestamp+0x2>
    17a0:	b0 93 97 01 	sts	0x0197, r27	; 0x800197 <timestamp+0x3>
    17a4:	e0 91 54 02 	lds	r30, 0x0254	; 0x800254 <mtable+0x20>
    17a8:	f0 91 55 02 	lds	r31, 0x0255	; 0x800255 <mtable+0x21>
    17ac:	30 97       	sbiw	r30, 0x00	; 0
    17ae:	39 f0       	breq	.+14     	; 0x17be <__vector_21+0xb2>
    17b0:	60 e1       	ldi	r22, 0x10	; 16
    17b2:	70 e0       	ldi	r23, 0x00	; 0
    17b4:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <otable+0x20>
    17b8:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <otable+0x21>
    17bc:	09 95       	icall
    17be:	0e 94 8b 04 	call	0x916	; 0x916 <schedule>
    17c2:	ff 91       	pop	r31
    17c4:	ef 91       	pop	r30
    17c6:	bf 91       	pop	r27
    17c8:	af 91       	pop	r26
    17ca:	9f 91       	pop	r25
    17cc:	8f 91       	pop	r24
    17ce:	7f 91       	pop	r23
    17d0:	6f 91       	pop	r22
    17d2:	5f 91       	pop	r21
    17d4:	4f 91       	pop	r20
    17d6:	3f 91       	pop	r19
    17d8:	2f 91       	pop	r18
    17da:	0f 90       	pop	r0
    17dc:	0f be       	out	0x3f, r0	; 63
    17de:	0f 90       	pop	r0
    17e0:	1f 90       	pop	r1
    17e2:	18 95       	reti

000017e4 <__vector_22>:
    17e4:	1f 92       	push	r1
    17e6:	0f 92       	push	r0
    17e8:	0f b6       	in	r0, 0x3f	; 63
    17ea:	0f 92       	push	r0
    17ec:	11 24       	eor	r1, r1
    17ee:	2f 93       	push	r18
    17f0:	3f 93       	push	r19
    17f2:	4f 93       	push	r20
    17f4:	5f 93       	push	r21
    17f6:	6f 93       	push	r22
    17f8:	7f 93       	push	r23
    17fa:	8f 93       	push	r24
    17fc:	9f 93       	push	r25
    17fe:	af 93       	push	r26
    1800:	bf 93       	push	r27
    1802:	ef 93       	push	r30
    1804:	ff 93       	push	r31
    1806:	20 91 92 01 	lds	r18, 0x0192	; 0x800192 <overflows>
    180a:	30 91 93 01 	lds	r19, 0x0193	; 0x800193 <overflows+0x1>
    180e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1812:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1816:	c9 01       	movw	r24, r18
    1818:	03 2e       	mov	r0, r19
    181a:	00 0c       	add	r0, r0
    181c:	aa 0b       	sbc	r26, r26
    181e:	bb 0b       	sbc	r27, r27
    1820:	dc 01       	movw	r26, r24
    1822:	99 27       	eor	r25, r25
    1824:	88 27       	eor	r24, r24
    1826:	60 e0       	ldi	r22, 0x00	; 0
    1828:	70 e0       	ldi	r23, 0x00	; 0
    182a:	84 2b       	or	r24, r20
    182c:	95 2b       	or	r25, r21
    182e:	a6 2b       	or	r26, r22
    1830:	b7 2b       	or	r27, r23
    1832:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <timestamp>
    1836:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <timestamp+0x1>
    183a:	a0 93 96 01 	sts	0x0196, r26	; 0x800196 <timestamp+0x2>
    183e:	b0 93 97 01 	sts	0x0197, r27	; 0x800197 <timestamp+0x3>
    1842:	b0 9b       	sbis	0x16, 0	; 22
    1844:	1b c0       	rjmp	.+54     	; 0x187c <__vector_22+0x98>
    1846:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    184a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    184e:	c9 01       	movw	r24, r18
    1850:	01 96       	adiw	r24, 0x01	; 1
    1852:	09 2e       	mov	r0, r25
    1854:	00 0c       	add	r0, r0
    1856:	aa 0b       	sbc	r26, r26
    1858:	bb 0b       	sbc	r27, r27
    185a:	dc 01       	movw	r26, r24
    185c:	99 27       	eor	r25, r25
    185e:	88 27       	eor	r24, r24
    1860:	60 e0       	ldi	r22, 0x00	; 0
    1862:	70 e0       	ldi	r23, 0x00	; 0
    1864:	84 2b       	or	r24, r20
    1866:	95 2b       	or	r25, r21
    1868:	a6 2b       	or	r26, r22
    186a:	b7 2b       	or	r27, r23
    186c:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <timestamp>
    1870:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <timestamp+0x1>
    1874:	a0 93 96 01 	sts	0x0196, r26	; 0x800196 <timestamp+0x2>
    1878:	b0 93 97 01 	sts	0x0197, r27	; 0x800197 <timestamp+0x3>
    187c:	e0 91 56 02 	lds	r30, 0x0256	; 0x800256 <mtable+0x22>
    1880:	f0 91 57 02 	lds	r31, 0x0257	; 0x800257 <mtable+0x23>
    1884:	30 97       	sbiw	r30, 0x00	; 0
    1886:	39 f0       	breq	.+14     	; 0x1896 <__vector_22+0xb2>
    1888:	61 e1       	ldi	r22, 0x11	; 17
    188a:	70 e0       	ldi	r23, 0x00	; 0
    188c:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <otable+0x22>
    1890:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <otable+0x23>
    1894:	09 95       	icall
    1896:	0e 94 8b 04 	call	0x916	; 0x916 <schedule>
    189a:	ff 91       	pop	r31
    189c:	ef 91       	pop	r30
    189e:	bf 91       	pop	r27
    18a0:	af 91       	pop	r26
    18a2:	9f 91       	pop	r25
    18a4:	8f 91       	pop	r24
    18a6:	7f 91       	pop	r23
    18a8:	6f 91       	pop	r22
    18aa:	5f 91       	pop	r21
    18ac:	4f 91       	pop	r20
    18ae:	3f 91       	pop	r19
    18b0:	2f 91       	pop	r18
    18b2:	0f 90       	pop	r0
    18b4:	0f be       	out	0x3f, r0	; 63
    18b6:	0f 90       	pop	r0
    18b8:	1f 90       	pop	r1
    18ba:	18 95       	reti

000018bc <enqueueByDeadline>:
    18bc:	ef 92       	push	r14
    18be:	ff 92       	push	r15
    18c0:	0f 93       	push	r16
    18c2:	1f 93       	push	r17
    18c4:	cf 93       	push	r28
    18c6:	df 93       	push	r29
    18c8:	7b 01       	movw	r14, r22
    18ca:	eb 01       	movw	r28, r22
    18cc:	a8 81       	ld	r26, Y
    18ce:	b9 81       	ldd	r27, Y+1	; 0x01
    18d0:	10 97       	sbiw	r26, 0x00	; 0
    18d2:	61 f1       	breq	.+88     	; 0x192c <enqueueByDeadline+0x70>
    18d4:	fc 01       	movw	r30, r24
    18d6:	06 81       	ldd	r16, Z+6	; 0x06
    18d8:	17 81       	ldd	r17, Z+7	; 0x07
    18da:	20 85       	ldd	r18, Z+8	; 0x08
    18dc:	31 85       	ldd	r19, Z+9	; 0x09
    18de:	16 96       	adiw	r26, 0x06	; 6
    18e0:	4d 91       	ld	r20, X+
    18e2:	5d 91       	ld	r21, X+
    18e4:	6d 91       	ld	r22, X+
    18e6:	7c 91       	ld	r23, X
    18e8:	19 97       	sbiw	r26, 0x09	; 9
    18ea:	04 17       	cp	r16, r20
    18ec:	15 07       	cpc	r17, r21
    18ee:	26 07       	cpc	r18, r22
    18f0:	37 07       	cpc	r19, r23
    18f2:	14 f4       	brge	.+4      	; 0x18f8 <enqueueByDeadline+0x3c>
    18f4:	1b c0       	rjmp	.+54     	; 0x192c <enqueueByDeadline+0x70>
    18f6:	df 01       	movw	r26, r30
    18f8:	ed 91       	ld	r30, X+
    18fa:	fc 91       	ld	r31, X
    18fc:	11 97       	sbiw	r26, 0x01	; 1
    18fe:	30 97       	sbiw	r30, 0x00	; 0
    1900:	49 f0       	breq	.+18     	; 0x1914 <enqueueByDeadline+0x58>
    1902:	46 81       	ldd	r20, Z+6	; 0x06
    1904:	57 81       	ldd	r21, Z+7	; 0x07
    1906:	60 85       	ldd	r22, Z+8	; 0x08
    1908:	71 85       	ldd	r23, Z+9	; 0x09
    190a:	04 17       	cp	r16, r20
    190c:	15 07       	cpc	r17, r21
    190e:	26 07       	cpc	r18, r22
    1910:	37 07       	cpc	r19, r23
    1912:	8c f7       	brge	.-30     	; 0x18f6 <enqueueByDeadline+0x3a>
    1914:	ec 01       	movw	r28, r24
    1916:	f9 83       	std	Y+1, r31	; 0x01
    1918:	e8 83       	st	Y, r30
    191a:	10 97       	sbiw	r26, 0x00	; 0
    191c:	21 f4       	brne	.+8      	; 0x1926 <enqueueByDeadline+0x6a>
    191e:	f7 01       	movw	r30, r14
    1920:	91 83       	std	Z+1, r25	; 0x01
    1922:	80 83       	st	Z, r24
    1924:	07 c0       	rjmp	.+14     	; 0x1934 <enqueueByDeadline+0x78>
    1926:	8d 93       	st	X+, r24
    1928:	9c 93       	st	X, r25
    192a:	04 c0       	rjmp	.+8      	; 0x1934 <enqueueByDeadline+0x78>
    192c:	ec 01       	movw	r28, r24
    192e:	b9 83       	std	Y+1, r27	; 0x01
    1930:	a8 83       	st	Y, r26
    1932:	f5 cf       	rjmp	.-22     	; 0x191e <enqueueByDeadline+0x62>
    1934:	df 91       	pop	r29
    1936:	cf 91       	pop	r28
    1938:	1f 91       	pop	r17
    193a:	0f 91       	pop	r16
    193c:	ff 90       	pop	r15
    193e:	ef 90       	pop	r14
    1940:	08 95       	ret

00001942 <enqueueByBaseline>:
    1942:	ef 92       	push	r14
    1944:	ff 92       	push	r15
    1946:	0f 93       	push	r16
    1948:	1f 93       	push	r17
    194a:	cf 93       	push	r28
    194c:	df 93       	push	r29
    194e:	7b 01       	movw	r14, r22
    1950:	eb 01       	movw	r28, r22
    1952:	a8 81       	ld	r26, Y
    1954:	b9 81       	ldd	r27, Y+1	; 0x01
    1956:	10 97       	sbiw	r26, 0x00	; 0
    1958:	61 f1       	breq	.+88     	; 0x19b2 <enqueueByBaseline+0x70>
    195a:	fc 01       	movw	r30, r24
    195c:	02 81       	ldd	r16, Z+2	; 0x02
    195e:	13 81       	ldd	r17, Z+3	; 0x03
    1960:	24 81       	ldd	r18, Z+4	; 0x04
    1962:	35 81       	ldd	r19, Z+5	; 0x05
    1964:	12 96       	adiw	r26, 0x02	; 2
    1966:	4d 91       	ld	r20, X+
    1968:	5d 91       	ld	r21, X+
    196a:	6d 91       	ld	r22, X+
    196c:	7c 91       	ld	r23, X
    196e:	15 97       	sbiw	r26, 0x05	; 5
    1970:	04 17       	cp	r16, r20
    1972:	15 07       	cpc	r17, r21
    1974:	26 07       	cpc	r18, r22
    1976:	37 07       	cpc	r19, r23
    1978:	14 f4       	brge	.+4      	; 0x197e <enqueueByBaseline+0x3c>
    197a:	1b c0       	rjmp	.+54     	; 0x19b2 <enqueueByBaseline+0x70>
    197c:	df 01       	movw	r26, r30
    197e:	ed 91       	ld	r30, X+
    1980:	fc 91       	ld	r31, X
    1982:	11 97       	sbiw	r26, 0x01	; 1
    1984:	30 97       	sbiw	r30, 0x00	; 0
    1986:	49 f0       	breq	.+18     	; 0x199a <enqueueByBaseline+0x58>
    1988:	42 81       	ldd	r20, Z+2	; 0x02
    198a:	53 81       	ldd	r21, Z+3	; 0x03
    198c:	64 81       	ldd	r22, Z+4	; 0x04
    198e:	75 81       	ldd	r23, Z+5	; 0x05
    1990:	04 17       	cp	r16, r20
    1992:	15 07       	cpc	r17, r21
    1994:	26 07       	cpc	r18, r22
    1996:	37 07       	cpc	r19, r23
    1998:	8c f7       	brge	.-30     	; 0x197c <enqueueByBaseline+0x3a>
    199a:	ec 01       	movw	r28, r24
    199c:	f9 83       	std	Y+1, r31	; 0x01
    199e:	e8 83       	st	Y, r30
    19a0:	10 97       	sbiw	r26, 0x00	; 0
    19a2:	21 f4       	brne	.+8      	; 0x19ac <enqueueByBaseline+0x6a>
    19a4:	f7 01       	movw	r30, r14
    19a6:	91 83       	std	Z+1, r25	; 0x01
    19a8:	80 83       	st	Z, r24
    19aa:	07 c0       	rjmp	.+14     	; 0x19ba <enqueueByBaseline+0x78>
    19ac:	8d 93       	st	X+, r24
    19ae:	9c 93       	st	X, r25
    19b0:	04 c0       	rjmp	.+8      	; 0x19ba <enqueueByBaseline+0x78>
    19b2:	ec 01       	movw	r28, r24
    19b4:	b9 83       	std	Y+1, r27	; 0x01
    19b6:	a8 83       	st	Y, r26
    19b8:	f5 cf       	rjmp	.-22     	; 0x19a4 <enqueueByBaseline+0x62>
    19ba:	df 91       	pop	r29
    19bc:	cf 91       	pop	r28
    19be:	1f 91       	pop	r17
    19c0:	0f 91       	pop	r16
    19c2:	ff 90       	pop	r15
    19c4:	ef 90       	pop	r14
    19c6:	08 95       	ret

000019c8 <dequeue>:
    19c8:	dc 01       	movw	r26, r24
    19ca:	ed 91       	ld	r30, X+
    19cc:	fc 91       	ld	r31, X
    19ce:	11 97       	sbiw	r26, 0x01	; 1
    19d0:	30 97       	sbiw	r30, 0x00	; 0
    19d2:	59 f4       	brne	.+22     	; 0x19ea <dequeue+0x22>
    19d4:	8f ef       	ldi	r24, 0xFF	; 255
    19d6:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
    19da:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
    19de:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	83 bf       	out	0x33, r24	; 51
    19e6:	88 95       	sleep
    19e8:	fd cf       	rjmp	.-6      	; 0x19e4 <dequeue+0x1c>
    19ea:	20 81       	ld	r18, Z
    19ec:	31 81       	ldd	r19, Z+1	; 0x01
    19ee:	2d 93       	st	X+, r18
    19f0:	3c 93       	st	X, r19
    19f2:	cf 01       	movw	r24, r30
    19f4:	08 95       	ret

000019f6 <__vector_9>:
    19f6:	1f 92       	push	r1
    19f8:	0f 92       	push	r0
    19fa:	0f b6       	in	r0, 0x3f	; 63
    19fc:	0f 92       	push	r0
    19fe:	11 24       	eor	r1, r1
    1a00:	2f 93       	push	r18
    1a02:	3f 93       	push	r19
    1a04:	4f 93       	push	r20
    1a06:	5f 93       	push	r21
    1a08:	6f 93       	push	r22
    1a0a:	7f 93       	push	r23
    1a0c:	8f 93       	push	r24
    1a0e:	9f 93       	push	r25
    1a10:	ef 93       	push	r30
    1a12:	ff 93       	push	r31
    1a14:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <overflows>
    1a18:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <overflows+0x1>
    1a1c:	01 96       	adiw	r24, 0x01	; 1
    1a1e:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <overflows+0x1>
    1a22:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <overflows>
    1a26:	e0 91 98 01 	lds	r30, 0x0198	; 0x800198 <timerQ>
    1a2a:	f0 91 99 01 	lds	r31, 0x0199	; 0x800199 <timerQ+0x1>
    1a2e:	30 97       	sbiw	r30, 0x00	; 0
    1a30:	01 f1       	breq	.+64     	; 0x1a72 <__vector_9+0x7c>
    1a32:	42 81       	ldd	r20, Z+2	; 0x02
    1a34:	53 81       	ldd	r21, Z+3	; 0x03
    1a36:	64 81       	ldd	r22, Z+4	; 0x04
    1a38:	75 81       	ldd	r23, Z+5	; 0x05
    1a3a:	86 17       	cp	r24, r22
    1a3c:	97 07       	cpc	r25, r23
    1a3e:	c9 f4       	brne	.+50     	; 0x1a72 <__vector_9+0x7c>
    1a40:	ca 01       	movw	r24, r20
    1a42:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1a46:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1a4a:	42 1b       	sub	r20, r18
    1a4c:	53 0b       	sbc	r21, r19
    1a4e:	41 30       	cpi	r20, 0x01	; 1
    1a50:	51 05       	cpc	r21, r1
    1a52:	29 f4       	brne	.+10     	; 0x1a5e <__vector_9+0x68>
    1a54:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1a58:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1a5c:	01 96       	adiw	r24, 0x01	; 1
    1a5e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1a62:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1a66:	ef e6       	ldi	r30, 0x6F	; 111
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
    1a6a:	80 81       	ld	r24, Z
    1a6c:	82 60       	ori	r24, 0x02	; 2
    1a6e:	80 83       	st	Z, r24
    1a70:	05 c0       	rjmp	.+10     	; 0x1a7c <__vector_9+0x86>
    1a72:	ef e6       	ldi	r30, 0x6F	; 111
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	80 81       	ld	r24, Z
    1a78:	8d 7f       	andi	r24, 0xFD	; 253
    1a7a:	80 83       	st	Z, r24
    1a7c:	ff 91       	pop	r31
    1a7e:	ef 91       	pop	r30
    1a80:	9f 91       	pop	r25
    1a82:	8f 91       	pop	r24
    1a84:	7f 91       	pop	r23
    1a86:	6f 91       	pop	r22
    1a88:	5f 91       	pop	r21
    1a8a:	4f 91       	pop	r20
    1a8c:	3f 91       	pop	r19
    1a8e:	2f 91       	pop	r18
    1a90:	0f 90       	pop	r0
    1a92:	0f be       	out	0x3f, r0	; 63
    1a94:	0f 90       	pop	r0
    1a96:	1f 90       	pop	r1
    1a98:	18 95       	reti

00001a9a <__vector_7>:
    1a9a:	1f 92       	push	r1
    1a9c:	0f 92       	push	r0
    1a9e:	0f b6       	in	r0, 0x3f	; 63
    1aa0:	0f 92       	push	r0
    1aa2:	11 24       	eor	r1, r1
    1aa4:	cf 92       	push	r12
    1aa6:	df 92       	push	r13
    1aa8:	ef 92       	push	r14
    1aaa:	ff 92       	push	r15
    1aac:	2f 93       	push	r18
    1aae:	3f 93       	push	r19
    1ab0:	4f 93       	push	r20
    1ab2:	5f 93       	push	r21
    1ab4:	6f 93       	push	r22
    1ab6:	7f 93       	push	r23
    1ab8:	8f 93       	push	r24
    1aba:	9f 93       	push	r25
    1abc:	af 93       	push	r26
    1abe:	bf 93       	push	r27
    1ac0:	ef 93       	push	r30
    1ac2:	ff 93       	push	r31
    1ac4:	c0 90 92 01 	lds	r12, 0x0192	; 0x800192 <overflows>
    1ac8:	d0 90 93 01 	lds	r13, 0x0193	; 0x800193 <overflows+0x1>
    1acc:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1ad0:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1ad4:	b0 99       	sbic	0x16, 0	; 22
    1ad6:	0f c0       	rjmp	.+30     	; 0x1af6 <__vector_7+0x5c>
    1ad8:	0d 2c       	mov	r0, r13
    1ada:	00 0c       	add	r0, r0
    1adc:	ee 08       	sbc	r14, r14
    1ade:	ff 08       	sbc	r15, r15
    1ae0:	d6 01       	movw	r26, r12
    1ae2:	99 27       	eor	r25, r25
    1ae4:	88 27       	eor	r24, r24
    1ae6:	69 01       	movw	r12, r18
    1ae8:	e1 2c       	mov	r14, r1
    1aea:	f1 2c       	mov	r15, r1
    1aec:	c8 2a       	or	r12, r24
    1aee:	d9 2a       	or	r13, r25
    1af0:	ea 2a       	or	r14, r26
    1af2:	fb 2a       	or	r15, r27
    1af4:	15 c0       	rjmp	.+42     	; 0x1b20 <__vector_7+0x86>
    1af6:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1afa:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1afe:	8f ef       	ldi	r24, 0xFF	; 255
    1b00:	c8 1a       	sub	r12, r24
    1b02:	d8 0a       	sbc	r13, r24
    1b04:	0d 2c       	mov	r0, r13
    1b06:	00 0c       	add	r0, r0
    1b08:	ee 08       	sbc	r14, r14
    1b0a:	ff 08       	sbc	r15, r15
    1b0c:	d6 01       	movw	r26, r12
    1b0e:	99 27       	eor	r25, r25
    1b10:	88 27       	eor	r24, r24
    1b12:	69 01       	movw	r12, r18
    1b14:	e1 2c       	mov	r14, r1
    1b16:	f1 2c       	mov	r15, r1
    1b18:	c8 2a       	or	r12, r24
    1b1a:	d9 2a       	or	r13, r25
    1b1c:	ea 2a       	or	r14, r26
    1b1e:	fb 2a       	or	r15, r27
    1b20:	e0 91 98 01 	lds	r30, 0x0198	; 0x800198 <timerQ>
    1b24:	f0 91 99 01 	lds	r31, 0x0199	; 0x800199 <timerQ+0x1>
    1b28:	30 97       	sbiw	r30, 0x00	; 0
    1b2a:	09 f4       	brne	.+2      	; 0x1b2e <__vector_7+0x94>
    1b2c:	42 c0       	rjmp	.+132    	; 0x1bb2 <__vector_7+0x118>
    1b2e:	82 81       	ldd	r24, Z+2	; 0x02
    1b30:	93 81       	ldd	r25, Z+3	; 0x03
    1b32:	a4 81       	ldd	r26, Z+4	; 0x04
    1b34:	b5 81       	ldd	r27, Z+5	; 0x05
    1b36:	8c 19       	sub	r24, r12
    1b38:	9d 09       	sbc	r25, r13
    1b3a:	ae 09       	sbc	r26, r14
    1b3c:	bf 09       	sbc	r27, r15
    1b3e:	18 16       	cp	r1, r24
    1b40:	19 06       	cpc	r1, r25
    1b42:	1a 06       	cpc	r1, r26
    1b44:	1b 06       	cpc	r1, r27
    1b46:	ec f1       	brlt	.+122    	; 0x1bc2 <__vector_7+0x128>
    1b48:	88 e9       	ldi	r24, 0x98	; 152
    1b4a:	91 e0       	ldi	r25, 0x01	; 1
    1b4c:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <dequeue>
    1b50:	6a e9       	ldi	r22, 0x9A	; 154
    1b52:	71 e0       	ldi	r23, 0x01	; 1
    1b54:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <enqueueByDeadline>
    1b58:	e0 91 98 01 	lds	r30, 0x0198	; 0x800198 <timerQ>
    1b5c:	f0 91 99 01 	lds	r31, 0x0199	; 0x800199 <timerQ+0x1>
    1b60:	30 97       	sbiw	r30, 0x00	; 0
    1b62:	39 f1       	breq	.+78     	; 0x1bb2 <__vector_7+0x118>
    1b64:	82 81       	ldd	r24, Z+2	; 0x02
    1b66:	93 81       	ldd	r25, Z+3	; 0x03
    1b68:	a4 81       	ldd	r26, Z+4	; 0x04
    1b6a:	b5 81       	ldd	r27, Z+5	; 0x05
    1b6c:	8c 19       	sub	r24, r12
    1b6e:	9d 09       	sbc	r25, r13
    1b70:	ae 09       	sbc	r26, r14
    1b72:	bf 09       	sbc	r27, r15
    1b74:	18 16       	cp	r1, r24
    1b76:	19 06       	cpc	r1, r25
    1b78:	1a 06       	cpc	r1, r26
    1b7a:	1b 06       	cpc	r1, r27
    1b7c:	2c f7       	brge	.-54     	; 0x1b48 <__vector_7+0xae>
    1b7e:	21 c0       	rjmp	.+66     	; 0x1bc2 <__vector_7+0x128>
    1b80:	9c 01       	movw	r18, r24
    1b82:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1b86:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1b8a:	84 1b       	sub	r24, r20
    1b8c:	95 0b       	sbc	r25, r21
    1b8e:	01 97       	sbiw	r24, 0x01	; 1
    1b90:	31 f4       	brne	.+12     	; 0x1b9e <__vector_7+0x104>
    1b92:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1b96:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1b9a:	2f 5f       	subi	r18, 0xFF	; 255
    1b9c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b9e:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1ba2:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1ba6:	ef e6       	ldi	r30, 0x6F	; 111
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	80 81       	ld	r24, Z
    1bac:	82 60       	ori	r24, 0x02	; 2
    1bae:	80 83       	st	Z, r24
    1bb0:	05 c0       	rjmp	.+10     	; 0x1bbc <__vector_7+0x122>
    1bb2:	ef e6       	ldi	r30, 0x6F	; 111
    1bb4:	f0 e0       	ldi	r31, 0x00	; 0
    1bb6:	80 81       	ld	r24, Z
    1bb8:	8d 7f       	andi	r24, 0xFD	; 253
    1bba:	80 83       	st	Z, r24
    1bbc:	0e 94 8b 04 	call	0x916	; 0x916 <schedule>
    1bc0:	0c c0       	rjmp	.+24     	; 0x1bda <__vector_7+0x140>
    1bc2:	82 81       	ldd	r24, Z+2	; 0x02
    1bc4:	93 81       	ldd	r25, Z+3	; 0x03
    1bc6:	a4 81       	ldd	r26, Z+4	; 0x04
    1bc8:	b5 81       	ldd	r27, Z+5	; 0x05
    1bca:	20 91 92 01 	lds	r18, 0x0192	; 0x800192 <overflows>
    1bce:	30 91 93 01 	lds	r19, 0x0193	; 0x800193 <overflows+0x1>
    1bd2:	2a 17       	cp	r18, r26
    1bd4:	3b 07       	cpc	r19, r27
    1bd6:	69 f7       	brne	.-38     	; 0x1bb2 <__vector_7+0x118>
    1bd8:	d3 cf       	rjmp	.-90     	; 0x1b80 <__vector_7+0xe6>
    1bda:	ff 91       	pop	r31
    1bdc:	ef 91       	pop	r30
    1bde:	bf 91       	pop	r27
    1be0:	af 91       	pop	r26
    1be2:	9f 91       	pop	r25
    1be4:	8f 91       	pop	r24
    1be6:	7f 91       	pop	r23
    1be8:	6f 91       	pop	r22
    1bea:	5f 91       	pop	r21
    1bec:	4f 91       	pop	r20
    1bee:	3f 91       	pop	r19
    1bf0:	2f 91       	pop	r18
    1bf2:	ff 90       	pop	r15
    1bf4:	ef 90       	pop	r14
    1bf6:	df 90       	pop	r13
    1bf8:	cf 90       	pop	r12
    1bfa:	0f 90       	pop	r0
    1bfc:	0f be       	out	0x3f, r0	; 63
    1bfe:	0f 90       	pop	r0
    1c00:	1f 90       	pop	r1
    1c02:	18 95       	reti

00001c04 <async>:
    1c04:	3f 92       	push	r3
    1c06:	4f 92       	push	r4
    1c08:	5f 92       	push	r5
    1c0a:	6f 92       	push	r6
    1c0c:	7f 92       	push	r7
    1c0e:	8f 92       	push	r8
    1c10:	9f 92       	push	r9
    1c12:	af 92       	push	r10
    1c14:	bf 92       	push	r11
    1c16:	cf 92       	push	r12
    1c18:	df 92       	push	r13
    1c1a:	ef 92       	push	r14
    1c1c:	ff 92       	push	r15
    1c1e:	0f 93       	push	r16
    1c20:	1f 93       	push	r17
    1c22:	cf 93       	push	r28
    1c24:	df 93       	push	r29
    1c26:	2b 01       	movw	r4, r22
    1c28:	3c 01       	movw	r6, r24
    1c2a:	49 01       	movw	r8, r18
    1c2c:	5a 01       	movw	r10, r20
    1c2e:	8f b7       	in	r24, 0x3f	; 63
    1c30:	80 78       	andi	r24, 0x80	; 128
    1c32:	38 2e       	mov	r3, r24
    1c34:	f8 94       	cli
    1c36:	84 e8       	ldi	r24, 0x84	; 132
    1c38:	91 e0       	ldi	r25, 0x01	; 1
    1c3a:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <dequeue>
    1c3e:	ec 01       	movw	r28, r24
    1c40:	1b 87       	std	Y+11, r17	; 0x0b
    1c42:	0a 87       	std	Y+10, r16	; 0x0a
    1c44:	fd 86       	std	Y+13, r15	; 0x0d
    1c46:	ec 86       	std	Y+12, r14	; 0x0c
    1c48:	df 86       	std	Y+15, r13	; 0x0f
    1c4a:	ce 86       	std	Y+14, r12	; 0x0e
    1c4c:	33 20       	and	r3, r3
    1c4e:	61 f0       	breq	.+24     	; 0x1c68 <async+0x64>
    1c50:	e0 91 7e 01 	lds	r30, 0x017E	; 0x80017e <current>
    1c54:	f0 91 7f 01 	lds	r31, 0x017F	; 0x80017f <current+0x1>
    1c58:	02 80       	ldd	r0, Z+2	; 0x02
    1c5a:	f3 81       	ldd	r31, Z+3	; 0x03
    1c5c:	e0 2d       	mov	r30, r0
    1c5e:	82 81       	ldd	r24, Z+2	; 0x02
    1c60:	93 81       	ldd	r25, Z+3	; 0x03
    1c62:	a4 81       	ldd	r26, Z+4	; 0x04
    1c64:	b5 81       	ldd	r27, Z+5	; 0x05
    1c66:	08 c0       	rjmp	.+16     	; 0x1c78 <async+0x74>
    1c68:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <timestamp>
    1c6c:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <timestamp+0x1>
    1c70:	a0 91 96 01 	lds	r26, 0x0196	; 0x800196 <timestamp+0x2>
    1c74:	b0 91 97 01 	lds	r27, 0x0197	; 0x800197 <timestamp+0x3>
    1c78:	48 0e       	add	r4, r24
    1c7a:	59 1e       	adc	r5, r25
    1c7c:	6a 1e       	adc	r6, r26
    1c7e:	7b 1e       	adc	r7, r27
    1c80:	4a 82       	std	Y+2, r4	; 0x02
    1c82:	5b 82       	std	Y+3, r5	; 0x03
    1c84:	6c 82       	std	Y+4, r6	; 0x04
    1c86:	7d 82       	std	Y+5, r7	; 0x05
    1c88:	18 14       	cp	r1, r8
    1c8a:	19 04       	cpc	r1, r9
    1c8c:	1a 04       	cpc	r1, r10
    1c8e:	1b 04       	cpc	r1, r11
    1c90:	44 f0       	brlt	.+16     	; 0x1ca2 <async+0x9e>
    1c92:	0f 2e       	mov	r0, r31
    1c94:	88 24       	eor	r8, r8
    1c96:	8a 94       	dec	r8
    1c98:	98 2c       	mov	r9, r8
    1c9a:	a8 2c       	mov	r10, r8
    1c9c:	ff e7       	ldi	r31, 0x7F	; 127
    1c9e:	bf 2e       	mov	r11, r31
    1ca0:	f0 2d       	mov	r31, r0
    1ca2:	84 0c       	add	r8, r4
    1ca4:	95 1c       	adc	r9, r5
    1ca6:	a6 1c       	adc	r10, r6
    1ca8:	b7 1c       	adc	r11, r7
    1caa:	8e 82       	std	Y+6, r8	; 0x06
    1cac:	9f 82       	std	Y+7, r9	; 0x07
    1cae:	a8 86       	std	Y+8, r10	; 0x08
    1cb0:	b9 86       	std	Y+9, r11	; 0x09
    1cb2:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <overflows>
    1cb6:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <overflows+0x1>
    1cba:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1cbe:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1cc2:	b0 99       	sbic	0x16, 0	; 22
    1cc4:	0e c0       	rjmp	.+28     	; 0x1ce2 <async+0xde>
    1cc6:	09 2e       	mov	r0, r25
    1cc8:	00 0c       	add	r0, r0
    1cca:	aa 0b       	sbc	r26, r26
    1ccc:	bb 0b       	sbc	r27, r27
    1cce:	dc 01       	movw	r26, r24
    1cd0:	99 27       	eor	r25, r25
    1cd2:	88 27       	eor	r24, r24
    1cd4:	60 e0       	ldi	r22, 0x00	; 0
    1cd6:	70 e0       	ldi	r23, 0x00	; 0
    1cd8:	84 2b       	or	r24, r20
    1cda:	95 2b       	or	r25, r21
    1cdc:	a6 2b       	or	r26, r22
    1cde:	b7 2b       	or	r27, r23
    1ce0:	13 c0       	rjmp	.+38     	; 0x1d08 <async+0x104>
    1ce2:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1ce6:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1cea:	01 96       	adiw	r24, 0x01	; 1
    1cec:	09 2e       	mov	r0, r25
    1cee:	00 0c       	add	r0, r0
    1cf0:	aa 0b       	sbc	r26, r26
    1cf2:	bb 0b       	sbc	r27, r27
    1cf4:	dc 01       	movw	r26, r24
    1cf6:	99 27       	eor	r25, r25
    1cf8:	88 27       	eor	r24, r24
    1cfa:	a9 01       	movw	r20, r18
    1cfc:	60 e0       	ldi	r22, 0x00	; 0
    1cfe:	70 e0       	ldi	r23, 0x00	; 0
    1d00:	84 2b       	or	r24, r20
    1d02:	95 2b       	or	r25, r21
    1d04:	a6 2b       	or	r26, r22
    1d06:	b7 2b       	or	r27, r23
    1d08:	48 1a       	sub	r4, r24
    1d0a:	59 0a       	sbc	r5, r25
    1d0c:	6a 0a       	sbc	r6, r26
    1d0e:	7b 0a       	sbc	r7, r27
    1d10:	14 14       	cp	r1, r4
    1d12:	15 04       	cpc	r1, r5
    1d14:	16 04       	cpc	r1, r6
    1d16:	17 04       	cpc	r1, r7
    1d18:	ac f5       	brge	.+106    	; 0x1d84 <async+0x180>
    1d1a:	68 e9       	ldi	r22, 0x98	; 152
    1d1c:	71 e0       	ldi	r23, 0x01	; 1
    1d1e:	ce 01       	movw	r24, r28
    1d20:	0e 94 a1 0c 	call	0x1942	; 0x1942 <enqueueByBaseline>
    1d24:	e0 91 98 01 	lds	r30, 0x0198	; 0x800198 <timerQ>
    1d28:	f0 91 99 01 	lds	r31, 0x0199	; 0x800199 <timerQ+0x1>
    1d2c:	30 97       	sbiw	r30, 0x00	; 0
    1d2e:	21 f1       	breq	.+72     	; 0x1d78 <async+0x174>
    1d30:	82 81       	ldd	r24, Z+2	; 0x02
    1d32:	93 81       	ldd	r25, Z+3	; 0x03
    1d34:	a4 81       	ldd	r26, Z+4	; 0x04
    1d36:	b5 81       	ldd	r27, Z+5	; 0x05
    1d38:	20 91 92 01 	lds	r18, 0x0192	; 0x800192 <overflows>
    1d3c:	30 91 93 01 	lds	r19, 0x0193	; 0x800193 <overflows+0x1>
    1d40:	2a 17       	cp	r18, r26
    1d42:	3b 07       	cpc	r19, r27
    1d44:	c9 f4       	brne	.+50     	; 0x1d78 <async+0x174>
    1d46:	9c 01       	movw	r18, r24
    1d48:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1d4c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1d50:	84 1b       	sub	r24, r20
    1d52:	95 0b       	sbc	r25, r21
    1d54:	01 97       	sbiw	r24, 0x01	; 1
    1d56:	31 f4       	brne	.+12     	; 0x1d64 <async+0x160>
    1d58:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1d5c:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1d60:	2f 5f       	subi	r18, 0xFF	; 255
    1d62:	3f 4f       	sbci	r19, 0xFF	; 255
    1d64:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1d68:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1d6c:	ef e6       	ldi	r30, 0x6F	; 111
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	80 81       	ld	r24, Z
    1d72:	82 60       	ori	r24, 0x02	; 2
    1d74:	80 83       	st	Z, r24
    1d76:	41 c0       	rjmp	.+130    	; 0x1dfa <async+0x1f6>
    1d78:	ef e6       	ldi	r30, 0x6F	; 111
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	80 81       	ld	r24, Z
    1d7e:	8d 7f       	andi	r24, 0xFD	; 253
    1d80:	80 83       	st	Z, r24
    1d82:	3b c0       	rjmp	.+118    	; 0x1dfa <async+0x1f6>
    1d84:	6a e9       	ldi	r22, 0x9A	; 154
    1d86:	71 e0       	ldi	r23, 0x01	; 1
    1d88:	ce 01       	movw	r24, r28
    1d8a:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <enqueueByDeadline>
    1d8e:	33 20       	and	r3, r3
    1d90:	b9 f1       	breq	.+110    	; 0x1e00 <async+0x1fc>
    1d92:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <threadPool>
    1d96:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <threadPool+0x1>
    1d9a:	00 97       	sbiw	r24, 0x00	; 0
    1d9c:	81 f1       	breq	.+96     	; 0x1dfe <async+0x1fa>
    1d9e:	e0 91 80 01 	lds	r30, 0x0180	; 0x800180 <activeStack>
    1da2:	f0 91 81 01 	lds	r31, 0x0181	; 0x800181 <activeStack+0x1>
    1da6:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <msgQ>
    1daa:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <msgQ+0x1>
    1dae:	02 81       	ldd	r16, Z+2	; 0x02
    1db0:	13 81       	ldd	r17, Z+3	; 0x03
    1db2:	d9 01       	movw	r26, r18
    1db4:	16 96       	adiw	r26, 0x06	; 6
    1db6:	4d 91       	ld	r20, X+
    1db8:	5d 91       	ld	r21, X+
    1dba:	6d 91       	ld	r22, X+
    1dbc:	7c 91       	ld	r23, X
    1dbe:	19 97       	sbiw	r26, 0x09	; 9
    1dc0:	d8 01       	movw	r26, r16
    1dc2:	16 96       	adiw	r26, 0x06	; 6
    1dc4:	0d 91       	ld	r16, X+
    1dc6:	1d 91       	ld	r17, X+
    1dc8:	2d 91       	ld	r18, X+
    1dca:	3c 91       	ld	r19, X
    1dcc:	19 97       	sbiw	r26, 0x09	; 9
    1dce:	40 1b       	sub	r20, r16
    1dd0:	51 0b       	sbc	r21, r17
    1dd2:	62 0b       	sbc	r22, r18
    1dd4:	73 0b       	sbc	r23, r19
    1dd6:	9a f4       	brpl	.+38     	; 0x1dfe <async+0x1fa>
    1dd8:	dc 01       	movw	r26, r24
    1dda:	2d 91       	ld	r18, X+
    1ddc:	3c 91       	ld	r19, X
    1dde:	11 97       	sbiw	r26, 0x01	; 1
    1de0:	30 93 83 01 	sts	0x0183, r19	; 0x800183 <threadPool+0x1>
    1de4:	20 93 82 01 	sts	0x0182, r18	; 0x800182 <threadPool>
    1de8:	ed 93       	st	X+, r30
    1dea:	fc 93       	st	X, r31
    1dec:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <activeStack+0x1>
    1df0:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <activeStack>
    1df4:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <dispatch>
    1df8:	02 c0       	rjmp	.+4      	; 0x1dfe <async+0x1fa>
    1dfa:	33 20       	and	r3, r3
    1dfc:	09 f0       	breq	.+2      	; 0x1e00 <async+0x1fc>
    1dfe:	78 94       	sei
    1e00:	ce 01       	movw	r24, r28
    1e02:	df 91       	pop	r29
    1e04:	cf 91       	pop	r28
    1e06:	1f 91       	pop	r17
    1e08:	0f 91       	pop	r16
    1e0a:	ff 90       	pop	r15
    1e0c:	ef 90       	pop	r14
    1e0e:	df 90       	pop	r13
    1e10:	cf 90       	pop	r12
    1e12:	bf 90       	pop	r11
    1e14:	af 90       	pop	r10
    1e16:	9f 90       	pop	r9
    1e18:	8f 90       	pop	r8
    1e1a:	7f 90       	pop	r7
    1e1c:	6f 90       	pop	r6
    1e1e:	5f 90       	pop	r5
    1e20:	4f 90       	pop	r4
    1e22:	3f 90       	pop	r3
    1e24:	08 95       	ret

00001e26 <sync>:
    1e26:	cf 92       	push	r12
    1e28:	df 92       	push	r13
    1e2a:	ef 92       	push	r14
    1e2c:	ff 92       	push	r15
    1e2e:	0f 93       	push	r16
    1e30:	1f 93       	push	r17
    1e32:	cf 93       	push	r28
    1e34:	df 93       	push	r29
    1e36:	ec 01       	movw	r28, r24
    1e38:	7b 01       	movw	r14, r22
    1e3a:	6a 01       	movw	r12, r20
    1e3c:	1f b7       	in	r17, 0x3f	; 63
    1e3e:	10 78       	andi	r17, 0x80	; 128
    1e40:	f8 94       	cli
    1e42:	a8 81       	ld	r26, Y
    1e44:	b9 81       	ldd	r27, Y+1	; 0x01
    1e46:	10 97       	sbiw	r26, 0x00	; 0
    1e48:	61 f1       	breq	.+88     	; 0x1ea2 <sync+0x7c>
    1e4a:	14 96       	adiw	r26, 0x04	; 4
    1e4c:	ed 91       	ld	r30, X+
    1e4e:	fc 91       	ld	r31, X
    1e50:	15 97       	sbiw	r26, 0x05	; 5
    1e52:	30 97       	sbiw	r30, 0x00	; 0
    1e54:	41 f0       	breq	.+16     	; 0x1e66 <sync+0x40>
    1e56:	a0 81       	ld	r26, Z
    1e58:	b1 81       	ldd	r27, Z+1	; 0x01
    1e5a:	14 96       	adiw	r26, 0x04	; 4
    1e5c:	ed 91       	ld	r30, X+
    1e5e:	fc 91       	ld	r31, X
    1e60:	15 97       	sbiw	r26, 0x05	; 5
    1e62:	30 97       	sbiw	r30, 0x00	; 0
    1e64:	c1 f7       	brne	.-16     	; 0x1e56 <sync+0x30>
    1e66:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <current>
    1e6a:	30 91 7f 01 	lds	r19, 0x017F	; 0x80017f <current+0x1>
    1e6e:	2a 17       	cp	r18, r26
    1e70:	3b 07       	cpc	r19, r27
    1e72:	21 f0       	breq	.+8      	; 0x1e7c <sync+0x56>
    1e74:	11 23       	and	r17, r17
    1e76:	09 f4       	brne	.+2      	; 0x1e7a <sync+0x54>
    1e78:	3d c0       	rjmp	.+122    	; 0x1ef4 <sync+0xce>
    1e7a:	07 c0       	rjmp	.+14     	; 0x1e8a <sync+0x64>
    1e7c:	11 23       	and	r17, r17
    1e7e:	09 f4       	brne	.+2      	; 0x1e82 <sync+0x5c>
    1e80:	3c c0       	rjmp	.+120    	; 0x1efa <sync+0xd4>
    1e82:	78 94       	sei
    1e84:	8f ef       	ldi	r24, 0xFF	; 255
    1e86:	9f ef       	ldi	r25, 0xFF	; 255
    1e88:	52 c0       	rjmp	.+164    	; 0x1f2e <sync+0x108>
    1e8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e8e:	00 97       	sbiw	r24, 0x00	; 0
    1e90:	d1 f1       	breq	.+116    	; 0x1f06 <sync+0xe0>
    1e92:	fc 01       	movw	r30, r24
    1e94:	15 82       	std	Z+5, r1	; 0x05
    1e96:	14 82       	std	Z+4, r1	; 0x04
    1e98:	36 c0       	rjmp	.+108    	; 0x1f06 <sync+0xe0>
    1e9a:	78 94       	sei
    1e9c:	80 e0       	ldi	r24, 0x00	; 0
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	46 c0       	rjmp	.+140    	; 0x1f2e <sync+0x108>
    1ea2:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <current>
    1ea6:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <current+0x1>
    1eaa:	99 83       	std	Y+1, r25	; 0x01
    1eac:	88 83       	st	Y, r24
    1eae:	11 23       	and	r17, r17
    1eb0:	29 f0       	breq	.+10     	; 0x1ebc <sync+0x96>
    1eb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb4:	9b 81       	ldd	r25, Y+3	; 0x03
    1eb6:	01 97       	sbiw	r24, 0x01	; 1
    1eb8:	09 f0       	breq	.+2      	; 0x1ebc <sync+0x96>
    1eba:	78 94       	sei
    1ebc:	b6 01       	movw	r22, r12
    1ebe:	ce 01       	movw	r24, r28
    1ec0:	f7 01       	movw	r30, r14
    1ec2:	09 95       	icall
    1ec4:	f8 2e       	mov	r15, r24
    1ec6:	09 2f       	mov	r16, r25
    1ec8:	8f b7       	in	r24, 0x3f	; 63
    1eca:	f8 94       	cli
    1ecc:	19 82       	std	Y+1, r1	; 0x01
    1ece:	18 82       	st	Y, r1
    1ed0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ed4:	82 30       	cpi	r24, 0x02	; 2
    1ed6:	91 05       	cpc	r25, r1
    1ed8:	38 f0       	brcs	.+14     	; 0x1ee8 <sync+0xc2>
    1eda:	1b 82       	std	Y+3, r1	; 0x03
    1edc:	1a 82       	std	Y+2, r1	; 0x02
    1ede:	fc 01       	movw	r30, r24
    1ee0:	15 82       	std	Z+5, r1	; 0x05
    1ee2:	14 82       	std	Z+4, r1	; 0x04
    1ee4:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <dispatch>
    1ee8:	11 23       	and	r17, r17
    1eea:	51 f0       	breq	.+20     	; 0x1f00 <sync+0xda>
    1eec:	78 94       	sei
    1eee:	8f 2d       	mov	r24, r15
    1ef0:	90 2f       	mov	r25, r16
    1ef2:	1d c0       	rjmp	.+58     	; 0x1f2e <sync+0x108>
    1ef4:	8f ef       	ldi	r24, 0xFF	; 255
    1ef6:	9f ef       	ldi	r25, 0xFF	; 255
    1ef8:	1a c0       	rjmp	.+52     	; 0x1f2e <sync+0x108>
    1efa:	8f ef       	ldi	r24, 0xFF	; 255
    1efc:	9f ef       	ldi	r25, 0xFF	; 255
    1efe:	17 c0       	rjmp	.+46     	; 0x1f2e <sync+0x108>
    1f00:	8f 2d       	mov	r24, r15
    1f02:	90 2f       	mov	r25, r16
    1f04:	14 c0       	rjmp	.+40     	; 0x1f2e <sync+0x108>
    1f06:	3b 83       	std	Y+3, r19	; 0x03
    1f08:	2a 83       	std	Y+2, r18	; 0x02
    1f0a:	f9 01       	movw	r30, r18
    1f0c:	d5 83       	std	Z+5, r29	; 0x05
    1f0e:	c4 83       	std	Z+4, r28	; 0x04
    1f10:	cd 01       	movw	r24, r26
    1f12:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <dispatch>
    1f16:	e0 91 7e 01 	lds	r30, 0x017E	; 0x80017e <current>
    1f1a:	f0 91 7f 01 	lds	r31, 0x017F	; 0x80017f <current+0x1>
    1f1e:	82 81       	ldd	r24, Z+2	; 0x02
    1f20:	93 81       	ldd	r25, Z+3	; 0x03
    1f22:	89 2b       	or	r24, r25
    1f24:	09 f4       	brne	.+2      	; 0x1f28 <sync+0x102>
    1f26:	b9 cf       	rjmp	.-142    	; 0x1e9a <sync+0x74>
    1f28:	f9 83       	std	Y+1, r31	; 0x01
    1f2a:	e8 83       	st	Y, r30
    1f2c:	c2 cf       	rjmp	.-124    	; 0x1eb2 <sync+0x8c>
    1f2e:	df 91       	pop	r29
    1f30:	cf 91       	pop	r28
    1f32:	1f 91       	pop	r17
    1f34:	0f 91       	pop	r16
    1f36:	ff 90       	pop	r15
    1f38:	ef 90       	pop	r14
    1f3a:	df 90       	pop	r13
    1f3c:	cf 90       	pop	r12
    1f3e:	08 95       	ret

00001f40 <run>:
    1f40:	00 91 7e 01 	lds	r16, 0x017E	; 0x80017e <current>
    1f44:	10 91 7f 01 	lds	r17, 0x017F	; 0x80017f <current+0x1>
    1f48:	8a e9       	ldi	r24, 0x9A	; 154
    1f4a:	91 e0       	ldi	r25, 0x01	; 1
    1f4c:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <dequeue>
    1f50:	ec 01       	movw	r28, r24
    1f52:	d8 01       	movw	r26, r16
    1f54:	13 96       	adiw	r26, 0x03	; 3
    1f56:	9c 93       	st	X, r25
    1f58:	8e 93       	st	-X, r24
    1f5a:	12 97       	sbiw	r26, 0x02	; 2
    1f5c:	78 94       	sei
    1f5e:	4e 85       	ldd	r20, Y+14	; 0x0e
    1f60:	5f 85       	ldd	r21, Y+15	; 0x0f
    1f62:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f64:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f66:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f68:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f6a:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <sync>
    1f6e:	8f b7       	in	r24, 0x3f	; 63
    1f70:	f8 94       	cli
    1f72:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <msgPool>
    1f76:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <msgPool+0x1>
    1f7a:	99 83       	std	Y+1, r25	; 0x01
    1f7c:	88 83       	st	Y, r24
    1f7e:	d0 93 85 01 	sts	0x0185, r29	; 0x800185 <msgPool+0x1>
    1f82:	c0 93 84 01 	sts	0x0184, r28	; 0x800184 <msgPool>
    1f86:	e0 91 80 01 	lds	r30, 0x0180	; 0x800180 <activeStack>
    1f8a:	f0 91 81 01 	lds	r31, 0x0181	; 0x800181 <activeStack+0x1>
    1f8e:	00 81       	ld	r16, Z
    1f90:	11 81       	ldd	r17, Z+1	; 0x01
    1f92:	e8 01       	movw	r28, r16
    1f94:	2a 81       	ldd	r18, Y+2	; 0x02
    1f96:	3b 81       	ldd	r19, Y+3	; 0x03
    1f98:	a0 91 9a 01 	lds	r26, 0x019A	; 0x80019a <msgQ>
    1f9c:	b0 91 9b 01 	lds	r27, 0x019B	; 0x80019b <msgQ+0x1>
    1fa0:	10 97       	sbiw	r26, 0x00	; 0
    1fa2:	c1 f0       	breq	.+48     	; 0x1fd4 <run+0x94>
    1fa4:	21 15       	cp	r18, r1
    1fa6:	31 05       	cpc	r19, r1
    1fa8:	59 f2       	breq	.-106    	; 0x1f40 <run>
    1faa:	16 96       	adiw	r26, 0x06	; 6
    1fac:	8d 91       	ld	r24, X+
    1fae:	9d 91       	ld	r25, X+
    1fb0:	0d 90       	ld	r0, X+
    1fb2:	bc 91       	ld	r27, X
    1fb4:	a0 2d       	mov	r26, r0
    1fb6:	e9 01       	movw	r28, r18
    1fb8:	4e 81       	ldd	r20, Y+6	; 0x06
    1fba:	5f 81       	ldd	r21, Y+7	; 0x07
    1fbc:	68 85       	ldd	r22, Y+8	; 0x08
    1fbe:	79 85       	ldd	r23, Y+9	; 0x09
    1fc0:	84 1b       	sub	r24, r20
    1fc2:	95 0b       	sbc	r25, r21
    1fc4:	a6 0b       	sbc	r26, r22
    1fc6:	b7 0b       	sbc	r27, r23
    1fc8:	18 16       	cp	r1, r24
    1fca:	19 06       	cpc	r1, r25
    1fcc:	1a 06       	cpc	r1, r26
    1fce:	1b 06       	cpc	r1, r27
    1fd0:	0c f0       	brlt	.+2      	; 0x1fd4 <run+0x94>
    1fd2:	b6 cf       	rjmp	.-148    	; 0x1f40 <run>
    1fd4:	10 93 81 01 	sts	0x0181, r17	; 0x800181 <activeStack+0x1>
    1fd8:	00 93 80 01 	sts	0x0180, r16	; 0x800180 <activeStack>
    1fdc:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <threadPool>
    1fe0:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <threadPool+0x1>
    1fe4:	91 83       	std	Z+1, r25	; 0x01
    1fe6:	80 83       	st	Z, r24
    1fe8:	f0 93 83 01 	sts	0x0183, r31	; 0x800183 <threadPool+0x1>
    1fec:	e0 93 82 01 	sts	0x0182, r30	; 0x800182 <threadPool>
    1ff0:	a0 91 80 01 	lds	r26, 0x0180	; 0x800180 <activeStack>
    1ff4:	b0 91 81 01 	lds	r27, 0x0181	; 0x800181 <activeStack+0x1>
    1ff8:	14 96       	adiw	r26, 0x04	; 4
    1ffa:	ed 91       	ld	r30, X+
    1ffc:	fc 91       	ld	r31, X
    1ffe:	15 97       	sbiw	r26, 0x05	; 5
    2000:	30 97       	sbiw	r30, 0x00	; 0
    2002:	41 f0       	breq	.+16     	; 0x2014 <run+0xd4>
    2004:	a0 81       	ld	r26, Z
    2006:	b1 81       	ldd	r27, Z+1	; 0x01
    2008:	14 96       	adiw	r26, 0x04	; 4
    200a:	ed 91       	ld	r30, X+
    200c:	fc 91       	ld	r31, X
    200e:	15 97       	sbiw	r26, 0x05	; 5
    2010:	30 97       	sbiw	r30, 0x00	; 0
    2012:	c1 f7       	brne	.-16     	; 0x2004 <run+0xc4>
    2014:	cd 01       	movw	r24, r26
    2016:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <dispatch>
    201a:	92 cf       	rjmp	.-220    	; 0x1f40 <run>

0000201c <install>:
    201c:	42 31       	cpi	r20, 0x12	; 18
    201e:	b8 f4       	brcc	.+46     	; 0x204e <install+0x32>
    2020:	2f b7       	in	r18, 0x3f	; 63
    2022:	f8 94       	cli
    2024:	50 e0       	ldi	r21, 0x00	; 0
    2026:	44 0f       	add	r20, r20
    2028:	55 1f       	adc	r21, r21
    202a:	fa 01       	movw	r30, r20
    202c:	e4 56       	subi	r30, 0x64	; 100
    202e:	fe 4f       	sbci	r31, 0xFE	; 254
    2030:	91 83       	std	Z+1, r25	; 0x01
    2032:	80 83       	st	Z, r24
    2034:	fa 01       	movw	r30, r20
    2036:	ec 5c       	subi	r30, 0xCC	; 204
    2038:	fd 4f       	sbci	r31, 0xFD	; 253
    203a:	71 83       	std	Z+1, r23	; 0x01
    203c:	60 83       	st	Z, r22
    203e:	41 e0       	ldi	r20, 0x01	; 1
    2040:	50 e0       	ldi	r21, 0x00	; 0
    2042:	fc 01       	movw	r30, r24
    2044:	53 83       	std	Z+3, r21	; 0x03
    2046:	42 83       	std	Z+2, r20	; 0x02
    2048:	22 23       	and	r18, r18
    204a:	0c f4       	brge	.+2      	; 0x204e <install+0x32>
    204c:	78 94       	sei
    204e:	08 95       	ret

00002050 <tinytimber>:
    2050:	8c 01       	movw	r16, r24
    2052:	7b 01       	movw	r14, r22
    2054:	6a 01       	movw	r12, r20
    2056:	8f b7       	in	r24, 0x3f	; 63
    2058:	f8 94       	cli
    205a:	0e 94 00 04 	call	0x800	; 0x800 <initialize>
    205e:	78 94       	sei
    2060:	e1 14       	cp	r14, r1
    2062:	f1 04       	cpc	r15, r1
    2064:	41 f0       	breq	.+16     	; 0x2076 <tinytimber+0x26>
    2066:	20 e0       	ldi	r18, 0x00	; 0
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	a9 01       	movw	r20, r18
    206c:	60 e0       	ldi	r22, 0x00	; 0
    206e:	70 e0       	ldi	r23, 0x00	; 0
    2070:	cb 01       	movw	r24, r22
    2072:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <async>
    2076:	8f b7       	in	r24, 0x3f	; 63
    2078:	f8 94       	cli
    207a:	0e 94 8b 04 	call	0x916	; 0x916 <schedule>
    207e:	78 94       	sei
    2080:	81 e0       	ldi	r24, 0x01	; 1
    2082:	83 bf       	out	0x33, r24	; 51
    2084:	88 95       	sleep
    2086:	fd cf       	rjmp	.-6      	; 0x2082 <tinytimber+0x32>

00002088 <__divmodsi4>:
    2088:	05 2e       	mov	r0, r21
    208a:	97 fb       	bst	r25, 7
    208c:	1e f4       	brtc	.+6      	; 0x2094 <__divmodsi4+0xc>
    208e:	00 94       	com	r0
    2090:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <__negsi2>
    2094:	57 fd       	sbrc	r21, 7
    2096:	07 d0       	rcall	.+14     	; 0x20a6 <__divmodsi4_neg2>
    2098:	0e 94 69 10 	call	0x20d2	; 0x20d2 <__udivmodsi4>
    209c:	07 fc       	sbrc	r0, 7
    209e:	03 d0       	rcall	.+6      	; 0x20a6 <__divmodsi4_neg2>
    20a0:	4e f4       	brtc	.+18     	; 0x20b4 <__divmodsi4_exit>
    20a2:	0c 94 5b 10 	jmp	0x20b6	; 0x20b6 <__negsi2>

000020a6 <__divmodsi4_neg2>:
    20a6:	50 95       	com	r21
    20a8:	40 95       	com	r20
    20aa:	30 95       	com	r19
    20ac:	21 95       	neg	r18
    20ae:	3f 4f       	sbci	r19, 0xFF	; 255
    20b0:	4f 4f       	sbci	r20, 0xFF	; 255
    20b2:	5f 4f       	sbci	r21, 0xFF	; 255

000020b4 <__divmodsi4_exit>:
    20b4:	08 95       	ret

000020b6 <__negsi2>:
    20b6:	90 95       	com	r25
    20b8:	80 95       	com	r24
    20ba:	70 95       	com	r23
    20bc:	61 95       	neg	r22
    20be:	7f 4f       	sbci	r23, 0xFF	; 255
    20c0:	8f 4f       	sbci	r24, 0xFF	; 255
    20c2:	9f 4f       	sbci	r25, 0xFF	; 255
    20c4:	08 95       	ret

000020c6 <__tablejump2__>:
    20c6:	ee 0f       	add	r30, r30
    20c8:	ff 1f       	adc	r31, r31
    20ca:	05 90       	lpm	r0, Z+
    20cc:	f4 91       	lpm	r31, Z
    20ce:	e0 2d       	mov	r30, r0
    20d0:	09 94       	ijmp

000020d2 <__udivmodsi4>:
    20d2:	a1 e2       	ldi	r26, 0x21	; 33
    20d4:	1a 2e       	mov	r1, r26
    20d6:	aa 1b       	sub	r26, r26
    20d8:	bb 1b       	sub	r27, r27
    20da:	fd 01       	movw	r30, r26
    20dc:	0d c0       	rjmp	.+26     	; 0x20f8 <__udivmodsi4_ep>

000020de <__udivmodsi4_loop>:
    20de:	aa 1f       	adc	r26, r26
    20e0:	bb 1f       	adc	r27, r27
    20e2:	ee 1f       	adc	r30, r30
    20e4:	ff 1f       	adc	r31, r31
    20e6:	a2 17       	cp	r26, r18
    20e8:	b3 07       	cpc	r27, r19
    20ea:	e4 07       	cpc	r30, r20
    20ec:	f5 07       	cpc	r31, r21
    20ee:	20 f0       	brcs	.+8      	; 0x20f8 <__udivmodsi4_ep>
    20f0:	a2 1b       	sub	r26, r18
    20f2:	b3 0b       	sbc	r27, r19
    20f4:	e4 0b       	sbc	r30, r20
    20f6:	f5 0b       	sbc	r31, r21

000020f8 <__udivmodsi4_ep>:
    20f8:	66 1f       	adc	r22, r22
    20fa:	77 1f       	adc	r23, r23
    20fc:	88 1f       	adc	r24, r24
    20fe:	99 1f       	adc	r25, r25
    2100:	1a 94       	dec	r1
    2102:	69 f7       	brne	.-38     	; 0x20de <__udivmodsi4_loop>
    2104:	60 95       	com	r22
    2106:	70 95       	com	r23
    2108:	80 95       	com	r24
    210a:	90 95       	com	r25
    210c:	9b 01       	movw	r18, r22
    210e:	ac 01       	movw	r20, r24
    2110:	bd 01       	movw	r22, r26
    2112:	cf 01       	movw	r24, r30
    2114:	08 95       	ret

00002116 <setjmp>:
    2116:	dc 01       	movw	r26, r24
    2118:	2d 92       	st	X+, r2
    211a:	3d 92       	st	X+, r3
    211c:	4d 92       	st	X+, r4
    211e:	5d 92       	st	X+, r5
    2120:	6d 92       	st	X+, r6
    2122:	7d 92       	st	X+, r7
    2124:	8d 92       	st	X+, r8
    2126:	9d 92       	st	X+, r9
    2128:	ad 92       	st	X+, r10
    212a:	bd 92       	st	X+, r11
    212c:	cd 92       	st	X+, r12
    212e:	dd 92       	st	X+, r13
    2130:	ed 92       	st	X+, r14
    2132:	fd 92       	st	X+, r15
    2134:	0d 93       	st	X+, r16
    2136:	1d 93       	st	X+, r17
    2138:	cd 93       	st	X+, r28
    213a:	dd 93       	st	X+, r29
    213c:	ff 91       	pop	r31
    213e:	ef 91       	pop	r30
    2140:	8d b7       	in	r24, 0x3d	; 61
    2142:	8d 93       	st	X+, r24
    2144:	8e b7       	in	r24, 0x3e	; 62
    2146:	8d 93       	st	X+, r24
    2148:	8f b7       	in	r24, 0x3f	; 63
    214a:	8d 93       	st	X+, r24
    214c:	ed 93       	st	X+, r30
    214e:	fd 93       	st	X+, r31
    2150:	88 27       	eor	r24, r24
    2152:	99 27       	eor	r25, r25
    2154:	09 94       	ijmp

00002156 <longjmp>:
    2156:	dc 01       	movw	r26, r24
    2158:	cb 01       	movw	r24, r22
    215a:	81 30       	cpi	r24, 0x01	; 1
    215c:	91 05       	cpc	r25, r1
    215e:	81 1d       	adc	r24, r1
    2160:	2d 90       	ld	r2, X+
    2162:	3d 90       	ld	r3, X+
    2164:	4d 90       	ld	r4, X+
    2166:	5d 90       	ld	r5, X+
    2168:	6d 90       	ld	r6, X+
    216a:	7d 90       	ld	r7, X+
    216c:	8d 90       	ld	r8, X+
    216e:	9d 90       	ld	r9, X+
    2170:	ad 90       	ld	r10, X+
    2172:	bd 90       	ld	r11, X+
    2174:	cd 90       	ld	r12, X+
    2176:	dd 90       	ld	r13, X+
    2178:	ed 90       	ld	r14, X+
    217a:	fd 90       	ld	r15, X+
    217c:	0d 91       	ld	r16, X+
    217e:	1d 91       	ld	r17, X+
    2180:	cd 91       	ld	r28, X+
    2182:	dd 91       	ld	r29, X+
    2184:	ed 91       	ld	r30, X+
    2186:	fd 91       	ld	r31, X+
    2188:	0d 90       	ld	r0, X+
    218a:	f8 94       	cli
    218c:	fe bf       	out	0x3e, r31	; 62
    218e:	0f be       	out	0x3f, r0	; 63
    2190:	ed bf       	out	0x3d, r30	; 61
    2192:	ed 91       	ld	r30, X+
    2194:	fd 91       	ld	r31, X+
    2196:	09 94       	ijmp

00002198 <_exit>:
    2198:	f8 94       	cli

0000219a <__stop_program>:
    219a:	ff cf       	rjmp	.-2      	; 0x219a <__stop_program>
