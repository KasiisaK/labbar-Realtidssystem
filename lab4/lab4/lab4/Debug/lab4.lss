
lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008c  00800100  000022ea  0000237e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000022ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000035f  0080018c  0080018c  0000240a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000240a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000243c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a0  00000000  00000000  0000247c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000031fc  00000000  00000000  0000271c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012b0  00000000  00000000  00005918  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000183f  00000000  00000000  00006bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ca0  00000000  00000000  00008408  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a98  00000000  00000000  000090a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002a34  00000000  00000000  00009b40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000230  00000000  00000000  0000c574  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 2f 05 	jmp	0xa5e	; 0xa5e <__vector_1>
       8:	0c 94 9b 05 	jmp	0xb36	; 0xb36 <__vector_2>
       c:	0c 94 07 06 	jmp	0xc0e	; 0xc0e <__vector_3>
      10:	0c 94 73 06 	jmp	0xce6	; 0xce6 <__vector_4>
      14:	0c 94 df 06 	jmp	0xdbe	; 0xdbe <__vector_5>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 b6 0d 	jmp	0x1b6c	; 0x1b6c <__vector_7>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 64 0d 	jmp	0x1ac8	; 0x1ac8 <__vector_9>
      28:	0c 94 4b 07 	jmp	0xe96	; 0xe96 <__vector_10>
      2c:	0c 94 b7 07 	jmp	0xf6e	; 0xf6e <__vector_11>
      30:	0c 94 23 08 	jmp	0x1046	; 0x1046 <__vector_12>
      34:	0c 94 8f 08 	jmp	0x111e	; 0x111e <__vector_13>
      38:	0c 94 fb 08 	jmp	0x11f6	; 0x11f6 <__vector_14>
      3c:	0c 94 67 09 	jmp	0x12ce	; 0x12ce <__vector_15>
      40:	0c 94 d3 09 	jmp	0x13a6	; 0x13a6 <__vector_16>
      44:	0c 94 3f 0a 	jmp	0x147e	; 0x147e <__vector_17>
      48:	0c 94 ab 0a 	jmp	0x1556	; 0x1556 <__vector_18>
      4c:	0c 94 17 0b 	jmp	0x162e	; 0x162e <__vector_19>
      50:	0c 94 83 0b 	jmp	0x1706	; 0x1706 <__vector_20>
      54:	0c 94 ef 0b 	jmp	0x17de	; 0x17de <__vector_21>
      58:	0c 94 5b 0c 	jmp	0x18b6	; 0x18b6 <__vector_22>
      5c:	89 01       	movw	r16, r18
      5e:	6b 01       	movw	r12, r22
      60:	6e 01       	movw	r12, r28
      62:	71 01       	movw	r14, r2
      64:	74 01       	movw	r14, r8
      66:	77 01       	movw	r14, r14
      68:	7a 01       	movw	r14, r20
      6a:	7d 01       	movw	r14, r26
      6c:	80 01       	movw	r16, r0
      6e:	83 01       	movw	r16, r6

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	11 e0       	ldi	r17, 0x01	; 1
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	ea ee       	ldi	r30, 0xEA	; 234
      84:	f2 e2       	ldi	r31, 0x22	; 34
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	ac 38       	cpi	r26, 0x8C	; 140
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	24 e0       	ldi	r18, 0x04	; 4
      94:	ac e8       	ldi	r26, 0x8C	; 140
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	ab 3e       	cpi	r26, 0xEB	; 235
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 cb 03 	call	0x796	; 0x796 <main>
      a6:	0c 94 73 11 	jmp	0x22e6	; 0x22e6 <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <swithToLeftGen>:
#include "Backend.h"


void swithToLeftGen(Backend *self) {
      ae:	cf 92       	push	r12
      b0:	df 92       	push	r13
      b2:	ef 92       	push	r14
      b4:	ff 92       	push	r15
      b6:	0f 93       	push	r16
      b8:	1f 93       	push	r17
      ba:	cf 93       	push	r28
      bc:	df 93       	push	r29
      be:	ec 01       	movw	r28, r24
	self->activeGen = self->gen1;
      c0:	8e 81       	ldd	r24, Y+6	; 0x06
      c2:	9f 81       	ldd	r25, Y+7	; 0x07
      c4:	9b 87       	std	Y+11, r25	; 0x0b
      c6:	8a 87       	std	Y+10, r24	; 0x0a
	SYNC(self->gui, setActive, true);
      c8:	41 e0       	ldi	r20, 0x01	; 1
      ca:	50 e0       	ldi	r21, 0x00	; 0
      cc:	68 ec       	ldi	r22, 0xC8	; 200
      ce:	72 e0       	ldi	r23, 0x02	; 2
      d0:	8c 81       	ldd	r24, Y+4	; 0x04
      d2:	9d 81       	ldd	r25, Y+5	; 0x05
      d4:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <sync>
	ASYNC(self->gui, updateDisplay, 10);
      d8:	0c 81       	ldd	r16, Y+4	; 0x04
      da:	1d 81       	ldd	r17, Y+5	; 0x05
      dc:	0f 2e       	mov	r0, r31
      de:	fa e0       	ldi	r31, 0x0A	; 10
      e0:	cf 2e       	mov	r12, r31
      e2:	d1 2c       	mov	r13, r1
      e4:	f0 2d       	mov	r31, r0
      e6:	0f 2e       	mov	r0, r31
      e8:	fb ec       	ldi	r31, 0xCB	; 203
      ea:	ef 2e       	mov	r14, r31
      ec:	f2 e0       	ldi	r31, 0x02	; 2
      ee:	ff 2e       	mov	r15, r31
      f0:	f0 2d       	mov	r31, r0
      f2:	20 e0       	ldi	r18, 0x00	; 0
      f4:	30 e0       	ldi	r19, 0x00	; 0
      f6:	a9 01       	movw	r20, r18
      f8:	60 e0       	ldi	r22, 0x00	; 0
      fa:	70 e0       	ldi	r23, 0x00	; 0
      fc:	cb 01       	movw	r24, r22
      fe:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <async>
}
     102:	df 91       	pop	r29
     104:	cf 91       	pop	r28
     106:	1f 91       	pop	r17
     108:	0f 91       	pop	r16
     10a:	ff 90       	pop	r15
     10c:	ef 90       	pop	r14
     10e:	df 90       	pop	r13
     110:	cf 90       	pop	r12
     112:	08 95       	ret

00000114 <swithToRightGen>:

void swithToRightGen(Backend *self) {
     114:	cf 92       	push	r12
     116:	df 92       	push	r13
     118:	ef 92       	push	r14
     11a:	ff 92       	push	r15
     11c:	0f 93       	push	r16
     11e:	1f 93       	push	r17
     120:	cf 93       	push	r28
     122:	df 93       	push	r29
     124:	ec 01       	movw	r28, r24
	self->activeGen = self->gen2;
     126:	88 85       	ldd	r24, Y+8	; 0x08
     128:	99 85       	ldd	r25, Y+9	; 0x09
     12a:	9b 87       	std	Y+11, r25	; 0x0b
     12c:	8a 87       	std	Y+10, r24	; 0x0a
	SYNC(self->gui, setActive, false);
     12e:	40 e0       	ldi	r20, 0x00	; 0
     130:	50 e0       	ldi	r21, 0x00	; 0
     132:	68 ec       	ldi	r22, 0xC8	; 200
     134:	72 e0       	ldi	r23, 0x02	; 2
     136:	8c 81       	ldd	r24, Y+4	; 0x04
     138:	9d 81       	ldd	r25, Y+5	; 0x05
     13a:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <sync>
	ASYNC(self->gui, updateDisplay, 20);
     13e:	0c 81       	ldd	r16, Y+4	; 0x04
     140:	1d 81       	ldd	r17, Y+5	; 0x05
     142:	0f 2e       	mov	r0, r31
     144:	f4 e1       	ldi	r31, 0x14	; 20
     146:	cf 2e       	mov	r12, r31
     148:	d1 2c       	mov	r13, r1
     14a:	f0 2d       	mov	r31, r0
     14c:	0f 2e       	mov	r0, r31
     14e:	fb ec       	ldi	r31, 0xCB	; 203
     150:	ef 2e       	mov	r14, r31
     152:	f2 e0       	ldi	r31, 0x02	; 2
     154:	ff 2e       	mov	r15, r31
     156:	f0 2d       	mov	r31, r0
     158:	20 e0       	ldi	r18, 0x00	; 0
     15a:	30 e0       	ldi	r19, 0x00	; 0
     15c:	a9 01       	movw	r20, r18
     15e:	60 e0       	ldi	r22, 0x00	; 0
     160:	70 e0       	ldi	r23, 0x00	; 0
     162:	cb 01       	movw	r24, r22
     164:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <async>
}
     168:	df 91       	pop	r29
     16a:	cf 91       	pop	r28
     16c:	1f 91       	pop	r17
     16e:	0f 91       	pop	r16
     170:	ff 90       	pop	r15
     172:	ef 90       	pop	r14
     174:	df 90       	pop	r13
     176:	cf 90       	pop	r12
     178:	08 95       	ret

0000017a <adjustFrequency>:

void adjustFrequency(Backend *self, int delta) {
     17a:	cf 92       	push	r12
     17c:	df 92       	push	r13
     17e:	ef 92       	push	r14
     180:	ff 92       	push	r15
     182:	0f 93       	push	r16
     184:	1f 93       	push	r17
     186:	cf 93       	push	r28
     188:	df 93       	push	r29
     18a:	ec 01       	movw	r28, r24
     18c:	8b 01       	movw	r16, r22
	// Get right target gen
	int newFreq = SYNC(self->activeGen, getFrequency, 0) + delta;
     18e:	40 e0       	ldi	r20, 0x00	; 0
     190:	50 e0       	ldi	r21, 0x00	; 0
     192:	65 e6       	ldi	r22, 0x65	; 101
     194:	74 e0       	ldi	r23, 0x04	; 4
     196:	8a 85       	ldd	r24, Y+10	; 0x0a
     198:	9b 85       	ldd	r25, Y+11	; 0x0b
     19a:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <sync>
     19e:	ac 01       	movw	r20, r24
     1a0:	40 0f       	add	r20, r16
     1a2:	51 1f       	adc	r21, r17
	if (newFreq < 0) newFreq = 0;
	// Update everything
	SYNC(self->activeGen, setFrequency, newFreq);
     1a4:	55 23       	and	r21, r21
     1a6:	14 f4       	brge	.+4      	; 0x1ac <adjustFrequency+0x32>
     1a8:	40 e0       	ldi	r20, 0x00	; 0
     1aa:	50 e0       	ldi	r21, 0x00	; 0
     1ac:	65 e5       	ldi	r22, 0x55	; 85
     1ae:	74 e0       	ldi	r23, 0x04	; 4
     1b0:	8a 85       	ldd	r24, Y+10	; 0x0a
     1b2:	9b 85       	ldd	r25, Y+11	; 0x0b
     1b4:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <sync>
	ASYNC(self->gui, updateDisplay, 0);
     1b8:	0c 81       	ldd	r16, Y+4	; 0x04
     1ba:	1d 81       	ldd	r17, Y+5	; 0x05
     1bc:	c1 2c       	mov	r12, r1
     1be:	d1 2c       	mov	r13, r1
     1c0:	0f 2e       	mov	r0, r31
     1c2:	fb ec       	ldi	r31, 0xCB	; 203
     1c4:	ef 2e       	mov	r14, r31
     1c6:	f2 e0       	ldi	r31, 0x02	; 2
     1c8:	ff 2e       	mov	r15, r31
     1ca:	f0 2d       	mov	r31, r0
     1cc:	20 e0       	ldi	r18, 0x00	; 0
     1ce:	30 e0       	ldi	r19, 0x00	; 0
     1d0:	a9 01       	movw	r20, r18
     1d2:	60 e0       	ldi	r22, 0x00	; 0
     1d4:	70 e0       	ldi	r23, 0x00	; 0
     1d6:	cb 01       	movw	r24, r22
     1d8:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <async>
}
     1dc:	df 91       	pop	r29
     1de:	cf 91       	pop	r28
     1e0:	1f 91       	pop	r17
     1e2:	0f 91       	pop	r16
     1e4:	ff 90       	pop	r15
     1e6:	ef 90       	pop	r14
     1e8:	df 90       	pop	r13
     1ea:	cf 90       	pop	r12
     1ec:	08 95       	ret

000001ee <saveRestore>:

void saveRestore(Backend *self) {
     1ee:	cf 92       	push	r12
     1f0:	df 92       	push	r13
     1f2:	ef 92       	push	r14
     1f4:	ff 92       	push	r15
     1f6:	0f 93       	push	r16
     1f8:	1f 93       	push	r17
     1fa:	cf 93       	push	r28
     1fc:	df 93       	push	r29
     1fe:	ec 01       	movw	r28, r24
	if (SYNC(self->activeGen, getFrequency, 0) == 0) {
     200:	40 e0       	ldi	r20, 0x00	; 0
     202:	50 e0       	ldi	r21, 0x00	; 0
     204:	65 e6       	ldi	r22, 0x65	; 101
     206:	74 e0       	ldi	r23, 0x04	; 4
     208:	8a 85       	ldd	r24, Y+10	; 0x0a
     20a:	9b 85       	ldd	r25, Y+11	; 0x0b
     20c:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <sync>
     210:	89 2b       	or	r24, r25
     212:	49 f4       	brne	.+18     	; 0x226 <saveRestore+0x38>
		SYNC(self->activeGen, restore, 0);
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	6f e5       	ldi	r22, 0x5F	; 95
     21a:	74 e0       	ldi	r23, 0x04	; 4
     21c:	8a 85       	ldd	r24, Y+10	; 0x0a
     21e:	9b 85       	ldd	r25, Y+11	; 0x0b
     220:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <sync>
     224:	10 c0       	rjmp	.+32     	; 0x246 <saveRestore+0x58>
		} else {
		SYNC(self->activeGen, save, 0);
     226:	40 e0       	ldi	r20, 0x00	; 0
     228:	50 e0       	ldi	r21, 0x00	; 0
     22a:	69 e5       	ldi	r22, 0x59	; 89
     22c:	74 e0       	ldi	r23, 0x04	; 4
     22e:	8a 85       	ldd	r24, Y+10	; 0x0a
     230:	9b 85       	ldd	r25, Y+11	; 0x0b
     232:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <sync>
		SYNC(self->activeGen, setFrequency, 0);
     236:	40 e0       	ldi	r20, 0x00	; 0
     238:	50 e0       	ldi	r21, 0x00	; 0
     23a:	65 e5       	ldi	r22, 0x55	; 85
     23c:	74 e0       	ldi	r23, 0x04	; 4
     23e:	8a 85       	ldd	r24, Y+10	; 0x0a
     240:	9b 85       	ldd	r25, Y+11	; 0x0b
     242:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <sync>
	}
	ASYNC(self->gui, updateDisplay, 0);
     246:	0c 81       	ldd	r16, Y+4	; 0x04
     248:	1d 81       	ldd	r17, Y+5	; 0x05
     24a:	c1 2c       	mov	r12, r1
     24c:	d1 2c       	mov	r13, r1
     24e:	0f 2e       	mov	r0, r31
     250:	fb ec       	ldi	r31, 0xCB	; 203
     252:	ef 2e       	mov	r14, r31
     254:	f2 e0       	ldi	r31, 0x02	; 2
     256:	ff 2e       	mov	r15, r31
     258:	f0 2d       	mov	r31, r0
     25a:	20 e0       	ldi	r18, 0x00	; 0
     25c:	30 e0       	ldi	r19, 0x00	; 0
     25e:	a9 01       	movw	r20, r18
     260:	60 e0       	ldi	r22, 0x00	; 0
     262:	70 e0       	ldi	r23, 0x00	; 0
     264:	cb 01       	movw	r24, r22
     266:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <async>
}
     26a:	df 91       	pop	r29
     26c:	cf 91       	pop	r28
     26e:	1f 91       	pop	r17
     270:	0f 91       	pop	r16
     272:	ff 90       	pop	r15
     274:	ef 90       	pop	r14
     276:	df 90       	pop	r13
     278:	cf 90       	pop	r12
     27a:	08 95       	ret

0000027c <startProgram>:

void startProgram(Backend *self) {
     27c:	cf 93       	push	r28
     27e:	df 93       	push	r29
     280:	ec 01       	movw	r28, r24
	SYNC(self->gen1, genFreq, 0);
     282:	40 e0       	ldi	r20, 0x00	; 0
     284:	50 e0       	ldi	r21, 0x00	; 0
     286:	61 e0       	ldi	r22, 0x01	; 1
     288:	74 e0       	ldi	r23, 0x04	; 4
     28a:	8e 81       	ldd	r24, Y+6	; 0x06
     28c:	9f 81       	ldd	r25, Y+7	; 0x07
     28e:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <sync>
	SYNC(self->gen2, genFreq, 0);
     292:	40 e0       	ldi	r20, 0x00	; 0
     294:	50 e0       	ldi	r21, 0x00	; 0
     296:	61 e0       	ldi	r22, 0x01	; 1
     298:	74 e0       	ldi	r23, 0x04	; 4
     29a:	88 85       	ldd	r24, Y+8	; 0x08
     29c:	99 85       	ldd	r25, Y+9	; 0x09
     29e:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <sync>
}
     2a2:	df 91       	pop	r29
     2a4:	cf 91       	pop	r28
     2a6:	08 95       	ret

000002a8 <LCD_init>:
#include "PulseGen.h"
#include "TinyTimber.h"

void LCD_init() {
	// LCD(Contrast Control Register), LCD(Display Configuration)(000): 300 s, LCD(Contrast Control)(1111): 3.35 V
	LCDCCR = (0 << LCDDC0) | (0 << LCDDC1) | (0 << LCDDC2) | (1 << LCDCC0) | (1 << LCDCC1) | (1 << LCDCC2) | (1 << LCDCC3);
     2a8:	8f e0       	ldi	r24, 0x0F	; 15
     2aa:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__DATA_REGION_ORIGIN__+0x87>
	// LCDCS: asynchronous clock, LCDMUX(11): D=1/4, B=1/3, LCD(Port Mask): 25 segments
	LCDCRB = (1 << LCDCS) | (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM2) | (1 << LCDPM1) | (1 << LCDPM0);
     2ae:	87 eb       	ldi	r24, 0xB7	; 183
     2b0:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
	// LCD(Clock Divide)(111): (D=8) 32Hz
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);
     2b4:	87 e0       	ldi	r24, 0x07	; 7
     2b6:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__DATA_REGION_ORIGIN__+0x86>
	// LCD(Control and Status Register A), LCD(Enable): True, LCD(Low Power Waveform): True, (no frame interrupt, no blanking)
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
     2ba:	80 ec       	ldi	r24, 0xC0	; 192
     2bc:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
     2c0:	08 95       	ret

000002c2 <getSegmentForChar>:
int none[] = {0b0000, 0b0000, 0b0000, 0b0000};

// Returns wall of data based on char input ('0' = 48 (char))
int* getSegmentForChar(char ch) {

	switch (ch) {
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	fc 01       	movw	r30, r24
     2c6:	f0 97       	sbiw	r30, 0x30	; 48
     2c8:	ea 30       	cpi	r30, 0x0A	; 10
     2ca:	f1 05       	cpc	r31, r1
     2cc:	f8 f4       	brcc	.+62     	; 0x30c <getSegmentForChar+0x4a>
     2ce:	e2 5d       	subi	r30, 0xD2	; 210
     2d0:	ff 4f       	sbci	r31, 0xFF	; 255
     2d2:	0c 94 e0 10 	jmp	0x21c0	; 0x21c0 <__tablejump2__>
		case '0': return zero;
		case '1': return one;
     2d6:	80 e4       	ldi	r24, 0x40	; 64
     2d8:	91 e0       	ldi	r25, 0x01	; 1
     2da:	08 95       	ret
		case '2': return two;
     2dc:	88 e3       	ldi	r24, 0x38	; 56
     2de:	91 e0       	ldi	r25, 0x01	; 1
     2e0:	08 95       	ret
		case '3': return three;
     2e2:	80 e3       	ldi	r24, 0x30	; 48
     2e4:	91 e0       	ldi	r25, 0x01	; 1
     2e6:	08 95       	ret
		case '4': return four;
     2e8:	88 e2       	ldi	r24, 0x28	; 40
     2ea:	91 e0       	ldi	r25, 0x01	; 1
     2ec:	08 95       	ret
		case '5': return five;
     2ee:	80 e2       	ldi	r24, 0x20	; 32
     2f0:	91 e0       	ldi	r25, 0x01	; 1
     2f2:	08 95       	ret
		case '6': return six;
     2f4:	88 e1       	ldi	r24, 0x18	; 24
     2f6:	91 e0       	ldi	r25, 0x01	; 1
     2f8:	08 95       	ret
		case '7': return seven;
     2fa:	80 e1       	ldi	r24, 0x10	; 16
     2fc:	91 e0       	ldi	r25, 0x01	; 1
     2fe:	08 95       	ret
		case '8': return eight;
     300:	88 e0       	ldi	r24, 0x08	; 8
     302:	91 e0       	ldi	r25, 0x01	; 1
     304:	08 95       	ret
		case '9': return nine;
     306:	80 e0       	ldi	r24, 0x00	; 0
     308:	91 e0       	ldi	r25, 0x01	; 1
     30a:	08 95       	ret
		default:  return none;
     30c:	8c e8       	ldi	r24, 0x8C	; 140
     30e:	91 e0       	ldi	r25, 0x01	; 1
     310:	08 95       	ret

// Returns wall of data based on char input ('0' = 48 (char))
int* getSegmentForChar(char ch) {

	switch (ch) {
		case '0': return zero;
     312:	88 e4       	ldi	r24, 0x48	; 72
     314:	91 e0       	ldi	r25, 0x01	; 1
		case '7': return seven;
		case '8': return eight;
		case '9': return nine;
		default:  return none;
	}
}
     316:	08 95       	ret

00000318 <writeChar>:

// Write a char ch at position pos
void writeChar(char ch, uint8_t pos) {
     318:	cf 93       	push	r28
	// Check if outside range
	if (pos > 5 || pos < 0) return;	
     31a:	66 30       	cpi	r22, 0x06	; 6
     31c:	08 f0       	brcs	.+2      	; 0x320 <writeChar+0x8>
     31e:	e4 c0       	rjmp	.+456    	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
     320:	c6 2f       	mov	r28, r22

	// Get correct char data
	int* segment = getSegmentForChar(ch);
     322:	0e 94 61 01 	call	0x2c2	; 0x2c2 <getSegmentForChar>
     326:	fc 01       	movw	r30, r24
	
	// Chose position
	switch (pos) {
     328:	c2 30       	cpi	r28, 0x02	; 2
     32a:	09 f4       	brne	.+2      	; 0x32e <writeChar+0x16>
     32c:	67 c0       	rjmp	.+206    	; 0x3fc <writeChar+0xe4>
     32e:	28 f4       	brcc	.+10     	; 0x33a <writeChar+0x22>
     330:	cc 23       	and	r28, r28
     332:	51 f0       	breq	.+20     	; 0x348 <writeChar+0x30>
     334:	c1 30       	cpi	r28, 0x01	; 1
     336:	29 f1       	breq	.+74     	; 0x382 <writeChar+0x6a>
     338:	d7 c0       	rjmp	.+430    	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
     33a:	c3 30       	cpi	r28, 0x03	; 3
     33c:	09 f4       	brne	.+2      	; 0x340 <writeChar+0x28>
     33e:	7b c0       	rjmp	.+246    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     340:	c4 30       	cpi	r28, 0x04	; 4
     342:	09 f4       	brne	.+2      	; 0x346 <writeChar+0x2e>
     344:	b5 c0       	rjmp	.+362    	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
     346:	d0 c0       	rjmp	.+416    	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
		case 0:
			// Segment start at 0, 5, 10, 15, higher 4 bits.
			// (LCDDR0 & 0xF0) clears the segment before writing 
			LCDDR0 = (LCDDR0 & 0xF0) | segment[0];
     348:	ac ee       	ldi	r26, 0xEC	; 236
     34a:	b0 e0       	ldi	r27, 0x00	; 0
     34c:	8c 91       	ld	r24, X
     34e:	80 7f       	andi	r24, 0xF0	; 240
     350:	90 81       	ld	r25, Z
     352:	89 2b       	or	r24, r25
     354:	8c 93       	st	X, r24
			LCDDR5 = (LCDDR5 & 0xF0) | segment[1];
     356:	a1 ef       	ldi	r26, 0xF1	; 241
     358:	b0 e0       	ldi	r27, 0x00	; 0
     35a:	8c 91       	ld	r24, X
     35c:	80 7f       	andi	r24, 0xF0	; 240
     35e:	92 81       	ldd	r25, Z+2	; 0x02
     360:	89 2b       	or	r24, r25
     362:	8c 93       	st	X, r24
			LCDDR10 = (LCDDR10 & 0xF0) | segment[2];
     364:	a6 ef       	ldi	r26, 0xF6	; 246
     366:	b0 e0       	ldi	r27, 0x00	; 0
     368:	8c 91       	ld	r24, X
     36a:	80 7f       	andi	r24, 0xF0	; 240
     36c:	94 81       	ldd	r25, Z+4	; 0x04
     36e:	89 2b       	or	r24, r25
     370:	8c 93       	st	X, r24
			LCDDR15 = (LCDDR15 & 0xF0) | segment[3];
     372:	ab ef       	ldi	r26, 0xFB	; 251
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	8c 91       	ld	r24, X
     378:	80 7f       	andi	r24, 0xF0	; 240
     37a:	96 81       	ldd	r25, Z+6	; 0x06
     37c:	89 2b       	or	r24, r25
     37e:	8c 93       	st	X, r24
			break;
     380:	b3 c0       	rjmp	.+358    	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
		case 1:
			// Same segment just lower 4 bits
			LCDDR0 = (LCDDR0 & 0x0F) | (segment[0] << 4);
     382:	ac ee       	ldi	r26, 0xEC	; 236
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	2c 91       	ld	r18, X
     388:	80 81       	ld	r24, Z
     38a:	91 81       	ldd	r25, Z+1	; 0x01
     38c:	82 95       	swap	r24
     38e:	92 95       	swap	r25
     390:	90 7f       	andi	r25, 0xF0	; 240
     392:	98 27       	eor	r25, r24
     394:	80 7f       	andi	r24, 0xF0	; 240
     396:	98 27       	eor	r25, r24
     398:	92 2f       	mov	r25, r18
     39a:	9f 70       	andi	r25, 0x0F	; 15
     39c:	89 2b       	or	r24, r25
     39e:	8c 93       	st	X, r24
			LCDDR5 = (LCDDR5 & 0x0F) | (segment[1] << 4);
     3a0:	a1 ef       	ldi	r26, 0xF1	; 241
     3a2:	b0 e0       	ldi	r27, 0x00	; 0
     3a4:	2c 91       	ld	r18, X
     3a6:	82 81       	ldd	r24, Z+2	; 0x02
     3a8:	93 81       	ldd	r25, Z+3	; 0x03
     3aa:	82 95       	swap	r24
     3ac:	92 95       	swap	r25
     3ae:	90 7f       	andi	r25, 0xF0	; 240
     3b0:	98 27       	eor	r25, r24
     3b2:	80 7f       	andi	r24, 0xF0	; 240
     3b4:	98 27       	eor	r25, r24
     3b6:	92 2f       	mov	r25, r18
     3b8:	9f 70       	andi	r25, 0x0F	; 15
     3ba:	89 2b       	or	r24, r25
     3bc:	8c 93       	st	X, r24
			LCDDR10 = (LCDDR10 & 0x0F) | (segment[2] << 4);
     3be:	a6 ef       	ldi	r26, 0xF6	; 246
     3c0:	b0 e0       	ldi	r27, 0x00	; 0
     3c2:	2c 91       	ld	r18, X
     3c4:	84 81       	ldd	r24, Z+4	; 0x04
     3c6:	95 81       	ldd	r25, Z+5	; 0x05
     3c8:	82 95       	swap	r24
     3ca:	92 95       	swap	r25
     3cc:	90 7f       	andi	r25, 0xF0	; 240
     3ce:	98 27       	eor	r25, r24
     3d0:	80 7f       	andi	r24, 0xF0	; 240
     3d2:	98 27       	eor	r25, r24
     3d4:	92 2f       	mov	r25, r18
     3d6:	9f 70       	andi	r25, 0x0F	; 15
     3d8:	89 2b       	or	r24, r25
     3da:	8c 93       	st	X, r24
			LCDDR15 = (LCDDR15 & 0x0F) | (segment[3] << 4);
     3dc:	ab ef       	ldi	r26, 0xFB	; 251
     3de:	b0 e0       	ldi	r27, 0x00	; 0
     3e0:	2c 91       	ld	r18, X
     3e2:	86 81       	ldd	r24, Z+6	; 0x06
     3e4:	97 81       	ldd	r25, Z+7	; 0x07
     3e6:	82 95       	swap	r24
     3e8:	92 95       	swap	r25
     3ea:	90 7f       	andi	r25, 0xF0	; 240
     3ec:	98 27       	eor	r25, r24
     3ee:	80 7f       	andi	r24, 0xF0	; 240
     3f0:	98 27       	eor	r25, r24
     3f2:	92 2f       	mov	r25, r18
     3f4:	9f 70       	andi	r25, 0x0F	; 15
     3f6:	89 2b       	or	r24, r25
     3f8:	8c 93       	st	X, r24
			break;
     3fa:	76 c0       	rjmp	.+236    	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
		case 2:
			LCDDR1 = (LCDDR1 & 0xF0) | segment[0];
     3fc:	ad ee       	ldi	r26, 0xED	; 237
     3fe:	b0 e0       	ldi	r27, 0x00	; 0
     400:	8c 91       	ld	r24, X
     402:	80 7f       	andi	r24, 0xF0	; 240
     404:	90 81       	ld	r25, Z
     406:	89 2b       	or	r24, r25
     408:	8c 93       	st	X, r24
			LCDDR6 = (LCDDR6 & 0xF0) | segment[1];
     40a:	a2 ef       	ldi	r26, 0xF2	; 242
     40c:	b0 e0       	ldi	r27, 0x00	; 0
     40e:	8c 91       	ld	r24, X
     410:	80 7f       	andi	r24, 0xF0	; 240
     412:	92 81       	ldd	r25, Z+2	; 0x02
     414:	89 2b       	or	r24, r25
     416:	8c 93       	st	X, r24
			LCDDR11 = (LCDDR11 & 0xF0) | segment[2];
     418:	a7 ef       	ldi	r26, 0xF7	; 247
     41a:	b0 e0       	ldi	r27, 0x00	; 0
     41c:	8c 91       	ld	r24, X
     41e:	80 7f       	andi	r24, 0xF0	; 240
     420:	94 81       	ldd	r25, Z+4	; 0x04
     422:	89 2b       	or	r24, r25
     424:	8c 93       	st	X, r24
			LCDDR16 = (LCDDR16 & 0xF0) | segment[3];
     426:	ac ef       	ldi	r26, 0xFC	; 252
     428:	b0 e0       	ldi	r27, 0x00	; 0
     42a:	8c 91       	ld	r24, X
     42c:	80 7f       	andi	r24, 0xF0	; 240
     42e:	96 81       	ldd	r25, Z+6	; 0x06
     430:	89 2b       	or	r24, r25
     432:	8c 93       	st	X, r24
			break;
     434:	59 c0       	rjmp	.+178    	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
		case 3:
			LCDDR1 = (LCDDR1 & 0x0F) | (segment[0] << 4);
     436:	ad ee       	ldi	r26, 0xED	; 237
     438:	b0 e0       	ldi	r27, 0x00	; 0
     43a:	2c 91       	ld	r18, X
     43c:	80 81       	ld	r24, Z
     43e:	91 81       	ldd	r25, Z+1	; 0x01
     440:	82 95       	swap	r24
     442:	92 95       	swap	r25
     444:	90 7f       	andi	r25, 0xF0	; 240
     446:	98 27       	eor	r25, r24
     448:	80 7f       	andi	r24, 0xF0	; 240
     44a:	98 27       	eor	r25, r24
     44c:	92 2f       	mov	r25, r18
     44e:	9f 70       	andi	r25, 0x0F	; 15
     450:	89 2b       	or	r24, r25
     452:	8c 93       	st	X, r24
			LCDDR6 = (LCDDR6 & 0x0F) | (segment[1] << 4);
     454:	a2 ef       	ldi	r26, 0xF2	; 242
     456:	b0 e0       	ldi	r27, 0x00	; 0
     458:	2c 91       	ld	r18, X
     45a:	82 81       	ldd	r24, Z+2	; 0x02
     45c:	93 81       	ldd	r25, Z+3	; 0x03
     45e:	82 95       	swap	r24
     460:	92 95       	swap	r25
     462:	90 7f       	andi	r25, 0xF0	; 240
     464:	98 27       	eor	r25, r24
     466:	80 7f       	andi	r24, 0xF0	; 240
     468:	98 27       	eor	r25, r24
     46a:	92 2f       	mov	r25, r18
     46c:	9f 70       	andi	r25, 0x0F	; 15
     46e:	89 2b       	or	r24, r25
     470:	8c 93       	st	X, r24
			LCDDR11 = (LCDDR11 & 0x0F) | (segment[2] << 4);
     472:	a7 ef       	ldi	r26, 0xF7	; 247
     474:	b0 e0       	ldi	r27, 0x00	; 0
     476:	2c 91       	ld	r18, X
     478:	84 81       	ldd	r24, Z+4	; 0x04
     47a:	95 81       	ldd	r25, Z+5	; 0x05
     47c:	82 95       	swap	r24
     47e:	92 95       	swap	r25
     480:	90 7f       	andi	r25, 0xF0	; 240
     482:	98 27       	eor	r25, r24
     484:	80 7f       	andi	r24, 0xF0	; 240
     486:	98 27       	eor	r25, r24
     488:	92 2f       	mov	r25, r18
     48a:	9f 70       	andi	r25, 0x0F	; 15
     48c:	89 2b       	or	r24, r25
     48e:	8c 93       	st	X, r24
			LCDDR16 = (LCDDR16 & 0x0F) | (segment[3] << 4);
     490:	ac ef       	ldi	r26, 0xFC	; 252
     492:	b0 e0       	ldi	r27, 0x00	; 0
     494:	2c 91       	ld	r18, X
     496:	86 81       	ldd	r24, Z+6	; 0x06
     498:	97 81       	ldd	r25, Z+7	; 0x07
     49a:	82 95       	swap	r24
     49c:	92 95       	swap	r25
     49e:	90 7f       	andi	r25, 0xF0	; 240
     4a0:	98 27       	eor	r25, r24
     4a2:	80 7f       	andi	r24, 0xF0	; 240
     4a4:	98 27       	eor	r25, r24
     4a6:	92 2f       	mov	r25, r18
     4a8:	9f 70       	andi	r25, 0x0F	; 15
     4aa:	89 2b       	or	r24, r25
     4ac:	8c 93       	st	X, r24
			break;
     4ae:	1c c0       	rjmp	.+56     	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
		case 4:
			LCDDR2 = (LCDDR2 & 0xF0) | segment[0];
     4b0:	ae ee       	ldi	r26, 0xEE	; 238
     4b2:	b0 e0       	ldi	r27, 0x00	; 0
     4b4:	8c 91       	ld	r24, X
     4b6:	80 7f       	andi	r24, 0xF0	; 240
     4b8:	90 81       	ld	r25, Z
     4ba:	89 2b       	or	r24, r25
     4bc:	8c 93       	st	X, r24
			LCDDR7 = (LCDDR7 & 0xF0) | segment[1];
     4be:	a3 ef       	ldi	r26, 0xF3	; 243
     4c0:	b0 e0       	ldi	r27, 0x00	; 0
     4c2:	8c 91       	ld	r24, X
     4c4:	80 7f       	andi	r24, 0xF0	; 240
     4c6:	92 81       	ldd	r25, Z+2	; 0x02
     4c8:	89 2b       	or	r24, r25
     4ca:	8c 93       	st	X, r24
			LCDDR12 = (LCDDR12 & 0xF0) | segment[2];
     4cc:	a8 ef       	ldi	r26, 0xF8	; 248
     4ce:	b0 e0       	ldi	r27, 0x00	; 0
     4d0:	8c 91       	ld	r24, X
     4d2:	80 7f       	andi	r24, 0xF0	; 240
     4d4:	94 81       	ldd	r25, Z+4	; 0x04
     4d6:	89 2b       	or	r24, r25
     4d8:	8c 93       	st	X, r24
			LCDDR17 = (LCDDR17 & 0xF0) | segment[3];
     4da:	ad ef       	ldi	r26, 0xFD	; 253
     4dc:	b0 e0       	ldi	r27, 0x00	; 0
     4de:	8c 91       	ld	r24, X
     4e0:	80 7f       	andi	r24, 0xF0	; 240
     4e2:	96 81       	ldd	r25, Z+6	; 0x06
     4e4:	89 2b       	or	r24, r25
     4e6:	8c 93       	st	X, r24
			break;
	}
}
     4e8:	cf 91       	pop	r28
     4ea:	08 95       	ret

000004ec <printAt>:

void printAt(long num, int pos) {
     4ec:	8f 92       	push	r8
     4ee:	9f 92       	push	r9
     4f0:	af 92       	push	r10
     4f2:	bf 92       	push	r11
     4f4:	cf 92       	push	r12
     4f6:	df 92       	push	r13
     4f8:	ef 92       	push	r14
     4fa:	ff 92       	push	r15
     4fc:	cf 93       	push	r28
     4fe:	df 93       	push	r29
     500:	4b 01       	movw	r8, r22
     502:	5c 01       	movw	r10, r24
     504:	ea 01       	movw	r28, r20
	writeChar((num % 100) / 10 + '0', pos);
     506:	24 e6       	ldi	r18, 0x64	; 100
     508:	30 e0       	ldi	r19, 0x00	; 0
     50a:	40 e0       	ldi	r20, 0x00	; 0
     50c:	50 e0       	ldi	r21, 0x00	; 0
     50e:	0e 94 c1 10 	call	0x2182	; 0x2182 <__divmodsi4>
     512:	0f 2e       	mov	r0, r31
     514:	fa e0       	ldi	r31, 0x0A	; 10
     516:	cf 2e       	mov	r12, r31
     518:	d1 2c       	mov	r13, r1
     51a:	e1 2c       	mov	r14, r1
     51c:	f1 2c       	mov	r15, r1
     51e:	f0 2d       	mov	r31, r0
     520:	a7 01       	movw	r20, r14
     522:	96 01       	movw	r18, r12
     524:	0e 94 c1 10 	call	0x2182	; 0x2182 <__divmodsi4>
     528:	6c 2f       	mov	r22, r28
     52a:	80 e3       	ldi	r24, 0x30	; 48
     52c:	82 0f       	add	r24, r18
     52e:	0e 94 8c 01 	call	0x318	; 0x318 <writeChar>
	pos++;
	writeChar(num % 10 + '0', pos);
     532:	21 96       	adiw	r28, 0x01	; 1
     534:	c5 01       	movw	r24, r10
     536:	b4 01       	movw	r22, r8
     538:	a7 01       	movw	r20, r14
     53a:	96 01       	movw	r18, r12
     53c:	0e 94 c1 10 	call	0x2182	; 0x2182 <__divmodsi4>
     540:	86 2f       	mov	r24, r22
     542:	6c 2f       	mov	r22, r28
     544:	80 5d       	subi	r24, 0xD0	; 208
     546:	0e 94 8c 01 	call	0x318	; 0x318 <writeChar>
}
     54a:	df 91       	pop	r29
     54c:	cf 91       	pop	r28
     54e:	ff 90       	pop	r15
     550:	ef 90       	pop	r14
     552:	df 90       	pop	r13
     554:	cf 90       	pop	r12
     556:	bf 90       	pop	r11
     558:	af 90       	pop	r10
     55a:	9f 90       	pop	r9
     55c:	8f 90       	pop	r8
     55e:	08 95       	ret

00000560 <activeGenIndicator>:

void activeGenIndicator(GUI *self, int activeGen) {
     560:	dc 01       	movw	r26, r24
	LCDDR0 &= ~(0b01000100);
     562:	ec ee       	ldi	r30, 0xEC	; 236
     564:	f0 e0       	ldi	r31, 0x00	; 0
     566:	90 81       	ld	r25, Z
     568:	9b 7b       	andi	r25, 0xBB	; 187
     56a:	90 83       	st	Z, r25
	if (self->leftActive) {
     56c:	14 96       	adiw	r26, 0x04	; 4
     56e:	8c 91       	ld	r24, X
     570:	14 97       	sbiw	r26, 0x04	; 4
     572:	88 23       	and	r24, r24
     574:	39 f0       	breq	.+14     	; 0x584 <activeGenIndicator+0x24>
		LCDDR0 |= 0b00000100;
     576:	80 81       	ld	r24, Z
     578:	84 60       	ori	r24, 0x04	; 4
     57a:	80 83       	st	Z, r24
	} 
	if (!self->leftActive) {
     57c:	14 96       	adiw	r26, 0x04	; 4
     57e:	8c 91       	ld	r24, X
     580:	81 11       	cpse	r24, r1
     582:	05 c0       	rjmp	.+10     	; 0x58e <activeGenIndicator+0x2e>
		LCDDR0 |= 0b01000000;
     584:	ec ee       	ldi	r30, 0xEC	; 236
     586:	f0 e0       	ldi	r31, 0x00	; 0
     588:	80 81       	ld	r24, Z
     58a:	80 64       	ori	r24, 0x40	; 64
     58c:	80 83       	st	Z, r24
     58e:	08 95       	ret

00000590 <setActive>:
	}
}

void setActive(GUI *self, bool status) {
	self->leftActive = status;
     590:	fc 01       	movw	r30, r24
     592:	64 83       	std	Z+4, r22	; 0x04
     594:	08 95       	ret

00000596 <updateDisplay>:
}

void updateDisplay(GUI *self, int activeGen) {
     596:	cf 92       	push	r12
     598:	df 92       	push	r13
     59a:	ef 92       	push	r14
     59c:	ff 92       	push	r15
     59e:	0f 93       	push	r16
     5a0:	1f 93       	push	r17
     5a2:	cf 93       	push	r28
     5a4:	df 93       	push	r29
     5a6:	ec 01       	movw	r28, r24
     5a8:	7b 01       	movw	r14, r22
	int gen1Freq = SYNC(self->gen1, getFrequency, 0);
     5aa:	40 e0       	ldi	r20, 0x00	; 0
     5ac:	50 e0       	ldi	r21, 0x00	; 0
     5ae:	65 e6       	ldi	r22, 0x65	; 101
     5b0:	74 e0       	ldi	r23, 0x04	; 4
     5b2:	8d 81       	ldd	r24, Y+5	; 0x05
     5b4:	9e 81       	ldd	r25, Y+6	; 0x06
     5b6:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <sync>
     5ba:	6c 01       	movw	r12, r24
	int gen2Freq = SYNC(self->gen2, getFrequency, 0);
     5bc:	40 e0       	ldi	r20, 0x00	; 0
     5be:	50 e0       	ldi	r21, 0x00	; 0
     5c0:	65 e6       	ldi	r22, 0x65	; 101
     5c2:	74 e0       	ldi	r23, 0x04	; 4
     5c4:	8f 81       	ldd	r24, Y+7	; 0x07
     5c6:	98 85       	ldd	r25, Y+8	; 0x08
     5c8:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <sync>
     5cc:	8c 01       	movw	r16, r24
	printAt(gen1Freq, 0); //gen1 hz at pos 0-1
     5ce:	b6 01       	movw	r22, r12
     5d0:	dd 0c       	add	r13, r13
     5d2:	88 0b       	sbc	r24, r24
     5d4:	99 0b       	sbc	r25, r25
     5d6:	40 e0       	ldi	r20, 0x00	; 0
     5d8:	50 e0       	ldi	r21, 0x00	; 0
     5da:	0e 94 76 02 	call	0x4ec	; 0x4ec <printAt>
	printAt(gen2Freq, 3); //gen2 hz at pos 3-4
     5de:	b8 01       	movw	r22, r16
     5e0:	11 0f       	add	r17, r17
     5e2:	88 0b       	sbc	r24, r24
     5e4:	99 0b       	sbc	r25, r25
     5e6:	43 e0       	ldi	r20, 0x03	; 3
     5e8:	50 e0       	ldi	r21, 0x00	; 0
     5ea:	0e 94 76 02 	call	0x4ec	; 0x4ec <printAt>
	activeGenIndicator(self, activeGen);
     5ee:	b7 01       	movw	r22, r14
     5f0:	ce 01       	movw	r24, r28
     5f2:	0e 94 b0 02 	call	0x560	; 0x560 <activeGenIndicator>
}
     5f6:	df 91       	pop	r29
     5f8:	cf 91       	pop	r28
     5fa:	1f 91       	pop	r17
     5fc:	0f 91       	pop	r16
     5fe:	ff 90       	pop	r15
     600:	ef 90       	pop	r14
     602:	df 90       	pop	r13
     604:	cf 90       	pop	r12
     606:	08 95       	ret

00000608 <joystickInteruptHandler>:
    PCMSK0 |= (1 << PCINT3) | (1 << PCINT2);
}


// Joystick input handler
void joystickInteruptHandler(JoystickHandler *self) { 
     608:	cf 92       	push	r12
     60a:	df 92       	push	r13
     60c:	ef 92       	push	r14
     60e:	ff 92       	push	r15
     610:	0f 93       	push	r16
     612:	1f 93       	push	r17
     614:	cf 93       	push	r28
     616:	df 93       	push	r29
     618:	ec 01       	movw	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     61a:	87 ea       	ldi	r24, 0xA7	; 167
     61c:	91 e6       	ldi	r25, 0x61	; 97
     61e:	01 97       	sbiw	r24, 0x01	; 1
     620:	f1 f7       	brne	.-4      	; 0x61e <joystickInteruptHandler+0x16>
     622:	00 c0       	rjmp	.+0      	; 0x624 <joystickInteruptHandler+0x1c>
     624:	00 00       	nop
	
	_delay_ms(100);
	
	// In
	if (!(PINB & (1 << PB4))) {
     626:	1c 99       	sbic	0x03, 4	; 3
     628:	12 c0       	rjmp	.+36     	; 0x64e <joystickInteruptHandler+0x46>
		ASYNC(self->BE, saveRestore, 0);
     62a:	0c 81       	ldd	r16, Y+4	; 0x04
     62c:	1d 81       	ldd	r17, Y+5	; 0x05
     62e:	c1 2c       	mov	r12, r1
     630:	d1 2c       	mov	r13, r1
     632:	0f 2e       	mov	r0, r31
     634:	f7 ef       	ldi	r31, 0xF7	; 247
     636:	ef 2e       	mov	r14, r31
     638:	f0 e0       	ldi	r31, 0x00	; 0
     63a:	ff 2e       	mov	r15, r31
     63c:	f0 2d       	mov	r31, r0
     63e:	20 e0       	ldi	r18, 0x00	; 0
     640:	30 e0       	ldi	r19, 0x00	; 0
     642:	a9 01       	movw	r20, r18
     644:	60 e0       	ldi	r22, 0x00	; 0
     646:	70 e0       	ldi	r23, 0x00	; 0
     648:	cb 01       	movw	r24, r22
     64a:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <async>
	}
	
	// Right
	if (!(PINE & (1 << PB3))) {
     64e:	63 99       	sbic	0x0c, 3	; 12
     650:	12 c0       	rjmp	.+36     	; 0x676 <joystickInteruptHandler+0x6e>
		ASYNC(self->BE, swithToRightGen, 0);
     652:	0c 81       	ldd	r16, Y+4	; 0x04
     654:	1d 81       	ldd	r17, Y+5	; 0x05
     656:	c1 2c       	mov	r12, r1
     658:	d1 2c       	mov	r13, r1
     65a:	0f 2e       	mov	r0, r31
     65c:	fa e8       	ldi	r31, 0x8A	; 138
     65e:	ef 2e       	mov	r14, r31
     660:	f0 e0       	ldi	r31, 0x00	; 0
     662:	ff 2e       	mov	r15, r31
     664:	f0 2d       	mov	r31, r0
     666:	20 e0       	ldi	r18, 0x00	; 0
     668:	30 e0       	ldi	r19, 0x00	; 0
     66a:	a9 01       	movw	r20, r18
     66c:	60 e0       	ldi	r22, 0x00	; 0
     66e:	70 e0       	ldi	r23, 0x00	; 0
     670:	cb 01       	movw	r24, r22
     672:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <async>
	}
	
	// Left
	if (!(PINE & (1 << PB2))) {
     676:	62 99       	sbic	0x0c, 2	; 12
     678:	12 c0       	rjmp	.+36     	; 0x69e <joystickInteruptHandler+0x96>
		ASYNC(self->BE, swithToLeftGen, 0);
     67a:	0c 81       	ldd	r16, Y+4	; 0x04
     67c:	1d 81       	ldd	r17, Y+5	; 0x05
     67e:	c1 2c       	mov	r12, r1
     680:	d1 2c       	mov	r13, r1
     682:	0f 2e       	mov	r0, r31
     684:	f7 e5       	ldi	r31, 0x57	; 87
     686:	ef 2e       	mov	r14, r31
     688:	f0 e0       	ldi	r31, 0x00	; 0
     68a:	ff 2e       	mov	r15, r31
     68c:	f0 2d       	mov	r31, r0
     68e:	20 e0       	ldi	r18, 0x00	; 0
     690:	30 e0       	ldi	r19, 0x00	; 0
     692:	a9 01       	movw	r20, r18
     694:	60 e0       	ldi	r22, 0x00	; 0
     696:	70 e0       	ldi	r23, 0x00	; 0
     698:	cb 01       	movw	r24, r22
     69a:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <async>
     69e:	9f e1       	ldi	r25, 0x1F	; 31
     6a0:	2f eb       	ldi	r18, 0xBF	; 191
     6a2:	82 e0       	ldi	r24, 0x02	; 2
     6a4:	91 50       	subi	r25, 0x01	; 1
     6a6:	20 40       	sbci	r18, 0x00	; 0
     6a8:	80 40       	sbci	r24, 0x00	; 0
     6aa:	e1 f7       	brne	.-8      	; 0x6a4 <joystickInteruptHandler+0x9c>
     6ac:	00 c0       	rjmp	.+0      	; 0x6ae <joystickInteruptHandler+0xa6>
     6ae:	00 00       	nop
	}
	
	_delay_ms(900);
	
	// Down
	if (!(PINB & (1 << PB7))) {
     6b0:	1f 99       	sbic	0x03, 7	; 3
     6b2:	24 c0       	rjmp	.+72     	; 0x6fc <joystickInteruptHandler+0xf4>
		ASYNC(self->BE, adjustFrequency, -1);	
     6b4:	0c 81       	ldd	r16, Y+4	; 0x04
     6b6:	1d 81       	ldd	r17, Y+5	; 0x05
     6b8:	cc 24       	eor	r12, r12
     6ba:	ca 94       	dec	r12
     6bc:	dc 2c       	mov	r13, r12
     6be:	0f 2e       	mov	r0, r31
     6c0:	fd eb       	ldi	r31, 0xBD	; 189
     6c2:	ef 2e       	mov	r14, r31
     6c4:	f0 e0       	ldi	r31, 0x00	; 0
     6c6:	ff 2e       	mov	r15, r31
     6c8:	f0 2d       	mov	r31, r0
     6ca:	20 e0       	ldi	r18, 0x00	; 0
     6cc:	30 e0       	ldi	r19, 0x00	; 0
     6ce:	a9 01       	movw	r20, r18
     6d0:	60 e0       	ldi	r22, 0x00	; 0
     6d2:	70 e0       	ldi	r23, 0x00	; 0
     6d4:	cb 01       	movw	r24, r22
     6d6:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <async>
		ASYNC(self, joystickInteruptHandler, 0);
     6da:	c1 2c       	mov	r12, r1
     6dc:	d1 2c       	mov	r13, r1
     6de:	0f 2e       	mov	r0, r31
     6e0:	f4 e0       	ldi	r31, 0x04	; 4
     6e2:	ef 2e       	mov	r14, r31
     6e4:	f3 e0       	ldi	r31, 0x03	; 3
     6e6:	ff 2e       	mov	r15, r31
     6e8:	f0 2d       	mov	r31, r0
     6ea:	8e 01       	movw	r16, r28
     6ec:	20 e0       	ldi	r18, 0x00	; 0
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	a9 01       	movw	r20, r18
     6f2:	60 e0       	ldi	r22, 0x00	; 0
     6f4:	70 e0       	ldi	r23, 0x00	; 0
     6f6:	cb 01       	movw	r24, r22
     6f8:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <async>
	}
	
	// Up
	if (!(PINB & (1 << PB6))) {
     6fc:	1e 99       	sbic	0x03, 6	; 3
     6fe:	24 c0       	rjmp	.+72     	; 0x748 <joystickInteruptHandler+0x140>
		ASYNC(self->BE, adjustFrequency, 1);
     700:	0c 81       	ldd	r16, Y+4	; 0x04
     702:	1d 81       	ldd	r17, Y+5	; 0x05
     704:	cc 24       	eor	r12, r12
     706:	c3 94       	inc	r12
     708:	d1 2c       	mov	r13, r1
     70a:	0f 2e       	mov	r0, r31
     70c:	fd eb       	ldi	r31, 0xBD	; 189
     70e:	ef 2e       	mov	r14, r31
     710:	f0 e0       	ldi	r31, 0x00	; 0
     712:	ff 2e       	mov	r15, r31
     714:	f0 2d       	mov	r31, r0
     716:	20 e0       	ldi	r18, 0x00	; 0
     718:	30 e0       	ldi	r19, 0x00	; 0
     71a:	a9 01       	movw	r20, r18
     71c:	60 e0       	ldi	r22, 0x00	; 0
     71e:	70 e0       	ldi	r23, 0x00	; 0
     720:	cb 01       	movw	r24, r22
     722:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <async>
		ASYNC(self, joystickInteruptHandler, 0);
     726:	c1 2c       	mov	r12, r1
     728:	d1 2c       	mov	r13, r1
     72a:	0f 2e       	mov	r0, r31
     72c:	f4 e0       	ldi	r31, 0x04	; 4
     72e:	ef 2e       	mov	r14, r31
     730:	f3 e0       	ldi	r31, 0x03	; 3
     732:	ff 2e       	mov	r15, r31
     734:	f0 2d       	mov	r31, r0
     736:	8e 01       	movw	r16, r28
     738:	20 e0       	ldi	r18, 0x00	; 0
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	a9 01       	movw	r20, r18
     73e:	60 e0       	ldi	r22, 0x00	; 0
     740:	70 e0       	ldi	r23, 0x00	; 0
     742:	cb 01       	movw	r24, r22
     744:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <async>
	}	
     748:	df 91       	pop	r29
     74a:	cf 91       	pop	r28
     74c:	1f 91       	pop	r17
     74e:	0f 91       	pop	r16
     750:	ff 90       	pop	r15
     752:	ef 90       	pop	r14
     754:	df 90       	pop	r13
     756:	cf 90       	pop	r12
     758:	08 95       	ret

0000075a <joystickInit>:
#include <util/delay.h>


void joystickInit() {
    // Input for: Down, Up, Click
    PORTB |= (1 << PB7) | (1 << PB6) | (1 << PB4);
     75a:	85 b1       	in	r24, 0x05	; 5
     75c:	80 6d       	ori	r24, 0xD0	; 208
     75e:	85 b9       	out	0x05, r24	; 5
    // Input for; Left, Right
    PORTE |= (1 << PE3) | (1 << PE2);
     760:	8e b1       	in	r24, 0x0e	; 14
     762:	8c 60       	ori	r24, 0x0C	; 12
     764:	8e b9       	out	0x0e, r24	; 14
    // Turn on interrupts
    EIMSK |= (1 << PCINT15) | (1 << PCINT14);
     766:	8d b3       	in	r24, 0x1d	; 29
     768:	80 6c       	ori	r24, 0xC0	; 192
     76a:	8d bb       	out	0x1d, r24	; 29

    // Define interrupts from PB7,6,4
    PCMSK1 |= (1 << PCINT15) | (1 << PCINT14) | (1 << PCINT12);
     76c:	ec e6       	ldi	r30, 0x6C	; 108
     76e:	f0 e0       	ldi	r31, 0x00	; 0
     770:	80 81       	ld	r24, Z
     772:	80 6d       	ori	r24, 0xD0	; 208
     774:	80 83       	st	Z, r24
    // Define interrupts from PE3,2
    PCMSK0 |= (1 << PCINT3) | (1 << PCINT2);
     776:	eb e6       	ldi	r30, 0x6B	; 107
     778:	f0 e0       	ldi	r31, 0x00	; 0
     77a:	80 81       	ld	r24, Z
     77c:	8c 60       	ori	r24, 0x0C	; 12
     77e:	80 83       	st	Z, r24
     780:	08 95       	ret

00000782 <sysInit>:
Backend BE = initBackend(&gen1, &gen2, &gui);
JoystickHandler joystick = initJoystickHandler(&BE);

void sysInit(){
    // Clock Prescale Register "maximum speed"
	CLKPR = 0b10000000; // Clock Prescaler Change Enable
     782:	e1 e6       	ldi	r30, 0x61	; 97
     784:	f0 e0       	ldi	r31, 0x00	; 0
     786:	80 e8       	ldi	r24, 0x80	; 128
     788:	80 83       	st	Z, r24
	CLKPR = 0b00000000; // Set 0 for sysclock
     78a:	10 82       	st	Z, r1
     78c:	08 95       	ret

0000078e <pinOutputInit>:
}

void pinOutputInit(){
    // Initialize Port E as output for PE4 and PE6
	DDRE |= (1 << PE4) | (1 << PE6);
     78e:	8d b1       	in	r24, 0x0d	; 13
     790:	80 65       	ori	r24, 0x50	; 80
     792:	8d b9       	out	0x0d, r24	; 13
     794:	08 95       	ret

00000796 <main>:
}

int main() {
    sysInit();
     796:	0e 94 c1 03 	call	0x782	; 0x782 <sysInit>
    pinOutputInit(); // Is this needed
     79a:	0e 94 c7 03 	call	0x78e	; 0x78e <pinOutputInit>
    joystickInit();
     79e:	0e 94 ad 03 	call	0x75a	; 0x75a <joystickInit>
    LCD_init();
     7a2:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LCD_init>

	
    // Install interrupt handler
    INSTALL(&joystick, joystickInteruptHandler, IRQ_PCINT0);
     7a6:	41 e0       	ldi	r20, 0x01	; 1
     7a8:	64 e0       	ldi	r22, 0x04	; 4
     7aa:	73 e0       	ldi	r23, 0x03	; 3
     7ac:	80 e5       	ldi	r24, 0x50	; 80
     7ae:	91 e0       	ldi	r25, 0x01	; 1
     7b0:	0e 94 77 10 	call	0x20ee	; 0x20ee <install>
	INSTALL(&joystick, joystickInteruptHandler, IRQ_PCINT1);
     7b4:	42 e0       	ldi	r20, 0x02	; 2
     7b6:	64 e0       	ldi	r22, 0x04	; 4
     7b8:	73 e0       	ldi	r23, 0x03	; 3
     7ba:	80 e5       	ldi	r24, 0x50	; 80
     7bc:	91 e0       	ldi	r25, 0x01	; 1
     7be:	0e 94 77 10 	call	0x20ee	; 0x20ee <install>
    
    // Start kernel
    return TINYTIMBER(&BE, startProgram, NULL);
     7c2:	40 e0       	ldi	r20, 0x00	; 0
     7c4:	50 e0       	ldi	r21, 0x00	; 0
     7c6:	6e e3       	ldi	r22, 0x3E	; 62
     7c8:	71 e0       	ldi	r23, 0x01	; 1
     7ca:	86 e5       	ldi	r24, 0x56	; 86
     7cc:	91 e0       	ldi	r25, 0x01	; 1
     7ce:	0e 94 91 10 	call	0x2122	; 0x2122 <tinytimber>
}
     7d2:	08 95       	ret

000007d4 <turnOffPin>:
#include "PortWrite.h"
#include "TinyTimber.h"

// Set a specific bit on Port E high or low
void turnOffPin(PortWrite *self, uint8_t bit) {
    PORTE &= ~(1 << bit);
     7d4:	2e b1       	in	r18, 0x0e	; 14
     7d6:	81 e0       	ldi	r24, 0x01	; 1
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	02 c0       	rjmp	.+4      	; 0x7e0 <turnOffPin+0xc>
     7dc:	88 0f       	add	r24, r24
     7de:	99 1f       	adc	r25, r25
     7e0:	6a 95       	dec	r22
     7e2:	e2 f7       	brpl	.-8      	; 0x7dc <turnOffPin+0x8>
     7e4:	80 95       	com	r24
     7e6:	82 23       	and	r24, r18
     7e8:	8e b9       	out	0x0e, r24	; 14
     7ea:	08 95       	ret

000007ec <togglePin>:
}

// Toggle a specific bit on Port E
void togglePin(PortWrite *self, uint8_t bit) {
    PORTE ^= (1 << bit);   // Toggle the bit
     7ec:	2e b1       	in	r18, 0x0e	; 14
     7ee:	81 e0       	ldi	r24, 0x01	; 1
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	02 c0       	rjmp	.+4      	; 0x7f8 <togglePin+0xc>
     7f4:	88 0f       	add	r24, r24
     7f6:	99 1f       	adc	r25, r25
     7f8:	6a 95       	dec	r22
     7fa:	e2 f7       	brpl	.-8      	; 0x7f4 <togglePin+0x8>
     7fc:	82 27       	eor	r24, r18
     7fe:	8e b9       	out	0x0e, r24	; 14
     800:	08 95       	ret

00000802 <genFreq>:

int getFrequency(PulseGen *self) {
	return self->frequency;
}

int genFreq(PulseGen *self) {
     802:	cf 92       	push	r12
     804:	df 92       	push	r13
     806:	ef 92       	push	r14
     808:	ff 92       	push	r15
     80a:	0f 93       	push	r16
     80c:	1f 93       	push	r17
     80e:	cf 93       	push	r28
     810:	df 93       	push	r29
     812:	ec 01       	movw	r28, r24
	if (self->frequency > 0) {
     814:	0e 81       	ldd	r16, Y+6	; 0x06
     816:	1f 81       	ldd	r17, Y+7	; 0x07
     818:	10 16       	cp	r1, r16
     81a:	11 06       	cpc	r1, r17
     81c:	9c f5       	brge	.+102    	; 0x884 <genFreq+0x82>
		int delay_ms = 500 / self->frequency;
		SYNC(self->write, togglePin, self->bit);
     81e:	4c 81       	ldd	r20, Y+4	; 0x04
     820:	50 e0       	ldi	r21, 0x00	; 0
     822:	66 ef       	ldi	r22, 0xF6	; 246
     824:	73 e0       	ldi	r23, 0x03	; 3
     826:	8a 85       	ldd	r24, Y+10	; 0x0a
     828:	9b 85       	ldd	r25, Y+11	; 0x0b
     82a:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <sync>
		AFTER(MSEC(delay_ms), self, genFreq, 0);
     82e:	84 ef       	ldi	r24, 0xF4	; 244
     830:	91 e0       	ldi	r25, 0x01	; 1
     832:	b8 01       	movw	r22, r16
     834:	0e 94 ad 10 	call	0x215a	; 0x215a <__divmodhi4>
     838:	2d e7       	ldi	r18, 0x7D	; 125
     83a:	30 e0       	ldi	r19, 0x00	; 0
     83c:	db 01       	movw	r26, r22
     83e:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__usmulhisi3>
     842:	8b 01       	movw	r16, r22
     844:	9c 01       	movw	r18, r24
     846:	99 23       	and	r25, r25
     848:	24 f4       	brge	.+8      	; 0x852 <genFreq+0x50>
     84a:	0d 5f       	subi	r16, 0xFD	; 253
     84c:	1f 4f       	sbci	r17, 0xFF	; 255
     84e:	2f 4f       	sbci	r18, 0xFF	; 255
     850:	3f 4f       	sbci	r19, 0xFF	; 255
     852:	c9 01       	movw	r24, r18
     854:	b8 01       	movw	r22, r16
     856:	95 95       	asr	r25
     858:	87 95       	ror	r24
     85a:	77 95       	ror	r23
     85c:	67 95       	ror	r22
     85e:	95 95       	asr	r25
     860:	87 95       	ror	r24
     862:	77 95       	ror	r23
     864:	67 95       	ror	r22
     866:	c1 2c       	mov	r12, r1
     868:	d1 2c       	mov	r13, r1
     86a:	0f 2e       	mov	r0, r31
     86c:	f1 e0       	ldi	r31, 0x01	; 1
     86e:	ef 2e       	mov	r14, r31
     870:	f4 e0       	ldi	r31, 0x04	; 4
     872:	ff 2e       	mov	r15, r31
     874:	f0 2d       	mov	r31, r0
     876:	8e 01       	movw	r16, r28
     878:	20 e0       	ldi	r18, 0x00	; 0
     87a:	30 e0       	ldi	r19, 0x00	; 0
     87c:	a9 01       	movw	r20, r18
     87e:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <async>
     882:	08 c0       	rjmp	.+16     	; 0x894 <genFreq+0x92>
	} else {
		SYNC(self->write, turnOffPin, self->bit);
     884:	4c 81       	ldd	r20, Y+4	; 0x04
     886:	50 e0       	ldi	r21, 0x00	; 0
     888:	6a ee       	ldi	r22, 0xEA	; 234
     88a:	73 e0       	ldi	r23, 0x03	; 3
     88c:	8a 85       	ldd	r24, Y+10	; 0x0a
     88e:	9b 85       	ldd	r25, Y+11	; 0x0b
     890:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <sync>
	}
	return 0;
	
	
     894:	80 e0       	ldi	r24, 0x00	; 0
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	df 91       	pop	r29
     89a:	cf 91       	pop	r28
     89c:	1f 91       	pop	r17
     89e:	0f 91       	pop	r16
     8a0:	ff 90       	pop	r15
     8a2:	ef 90       	pop	r14
     8a4:	df 90       	pop	r13
     8a6:	cf 90       	pop	r12
     8a8:	08 95       	ret

000008aa <setFrequency>:
#include "PulseGen.h"
#include "PortWrite.h"
#include "TinyTimber.h"

void setFrequency(PulseGen *self, int freq) {
	self->frequency = freq;
     8aa:	fc 01       	movw	r30, r24
     8ac:	77 83       	std	Z+7, r23	; 0x07
     8ae:	66 83       	std	Z+6, r22	; 0x06
     8b0:	08 95       	ret

000008b2 <save>:
}

// Saves the freq
void save(PulseGen *self) {
	self->saved_freq = self->frequency;
     8b2:	fc 01       	movw	r30, r24
     8b4:	26 81       	ldd	r18, Z+6	; 0x06
     8b6:	37 81       	ldd	r19, Z+7	; 0x07
     8b8:	31 87       	std	Z+9, r19	; 0x09
     8ba:	20 87       	std	Z+8, r18	; 0x08
     8bc:	08 95       	ret

000008be <restore>:
}

// Restores freq to last saved
void restore(PulseGen *self) {
	self->frequency = self->saved_freq;
     8be:	fc 01       	movw	r30, r24
     8c0:	20 85       	ldd	r18, Z+8	; 0x08
     8c2:	31 85       	ldd	r19, Z+9	; 0x09
     8c4:	37 83       	std	Z+7, r19	; 0x07
     8c6:	26 83       	std	Z+6, r18	; 0x06
     8c8:	08 95       	ret

000008ca <getFrequency>:
}

int getFrequency(PulseGen *self) {
	return self->frequency;
}
     8ca:	fc 01       	movw	r30, r24
     8cc:	86 81       	ldd	r24, Z+6	; 0x06
     8ce:	97 81       	ldd	r25, Z+7	; 0x07
     8d0:	08 95       	ret

000008d2 <initialize>:
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
}
     8d2:	cf 93       	push	r28
     8d4:	df 93       	push	r29
     8d6:	00 d0       	rcall	.+0      	; 0x8d8 <initialize+0x6>
     8d8:	00 d0       	rcall	.+0      	; 0x8da <initialize+0x8>
     8da:	cd b7       	in	r28, 0x3d	; 61
     8dc:	de b7       	in	r29, 0x3e	; 62
     8de:	8b e8       	ldi	r24, 0x8B	; 139
     8e0:	92 e0       	ldi	r25, 0x02	; 2
     8e2:	2b e6       	ldi	r18, 0x6B	; 107
     8e4:	33 e0       	ldi	r19, 0x03	; 3
     8e6:	fc 01       	movw	r30, r24
     8e8:	70 97       	sbiw	r30, 0x10	; 16
     8ea:	91 83       	std	Z+1, r25	; 0x01
     8ec:	80 83       	st	Z, r24
     8ee:	40 96       	adiw	r24, 0x10	; 16
     8f0:	82 17       	cp	r24, r18
     8f2:	93 07       	cpc	r25, r19
     8f4:	c1 f7       	brne	.-16     	; 0x8e6 <initialize+0x14>
     8f6:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <messages+0xe1>
     8fa:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <messages+0xe0>
     8fe:	e6 ec       	ldi	r30, 0xC6	; 198
     900:	f1 e0       	ldi	r31, 0x01	; 1
     902:	83 ee       	ldi	r24, 0xE3	; 227
     904:	91 e0       	ldi	r25, 0x01	; 1
     906:	91 83       	std	Z+1, r25	; 0x01
     908:	80 83       	st	Z, r24
     90a:	80 e0       	ldi	r24, 0x00	; 0
     90c:	92 e0       	ldi	r25, 0x02	; 2
     90e:	96 8f       	std	Z+30, r25	; 0x1e
     910:	85 8f       	std	Z+29, r24	; 0x1d
     912:	ad e1       	ldi	r26, 0x1D	; 29
     914:	b2 e0       	ldi	r27, 0x02	; 2
     916:	b3 af       	std	Z+59, r27	; 0x3b
     918:	a2 af       	std	Z+58, r26	; 0x3a
     91a:	1d 92       	st	X+, r1
     91c:	1c 92       	st	X, r1
     91e:	fa 83       	std	Y+2, r31	; 0x02
     920:	e9 83       	std	Y+1, r30	; 0x01
     922:	e7 ec       	ldi	r30, 0xC7	; 199
     924:	f3 e0       	ldi	r31, 0x03	; 3
     926:	fc 83       	std	Y+4, r31	; 0x04
     928:	eb 83       	std	Y+3, r30	; 0x03
     92a:	89 81       	ldd	r24, Y+1	; 0x01
     92c:	9a 81       	ldd	r25, Y+2	; 0x02
     92e:	06 96       	adiw	r24, 0x06	; 6
     930:	0e 94 32 11 	call	0x2264	; 0x2264 <setjmp>
     934:	8b 81       	ldd	r24, Y+3	; 0x03
     936:	9c 81       	ldd	r25, Y+4	; 0x04
     938:	e9 81       	ldd	r30, Y+1	; 0x01
     93a:	fa 81       	ldd	r31, Y+2	; 0x02
     93c:	97 8b       	std	Z+23, r25	; 0x17
     93e:	86 8b       	std	Z+22, r24	; 0x16
     940:	91 8f       	std	Z+25, r25	; 0x19
     942:	80 8f       	std	Z+24, r24	; 0x18
     944:	89 e0       	ldi	r24, 0x09	; 9
     946:	90 e1       	ldi	r25, 0x10	; 16
     948:	94 8f       	std	Z+28, r25	; 0x1c
     94a:	83 8f       	std	Z+27, r24	; 0x1b
     94c:	15 82       	std	Z+5, r1	; 0x05
     94e:	14 82       	std	Z+4, r1	; 0x04
     950:	7d 96       	adiw	r30, 0x1d	; 29
     952:	fa 83       	std	Y+2, r31	; 0x02
     954:	e9 83       	std	Y+1, r30	; 0x01
     956:	eb 81       	ldd	r30, Y+3	; 0x03
     958:	fc 81       	ldd	r31, Y+4	; 0x04
     95a:	e0 5a       	subi	r30, 0xA0	; 160
     95c:	ff 4f       	sbci	r31, 0xFF	; 255
     95e:	fc 83       	std	Y+4, r31	; 0x04
     960:	eb 83       	std	Y+3, r30	; 0x03
     962:	89 81       	ldd	r24, Y+1	; 0x01
     964:	9a 81       	ldd	r25, Y+2	; 0x02
     966:	8a 53       	subi	r24, 0x3A	; 58
     968:	92 40       	sbci	r25, 0x02	; 2
     96a:	f9 f6       	brne	.-66     	; 0x92a <initialize+0x58>
     96c:	ee e5       	ldi	r30, 0x5E	; 94
     96e:	f2 e0       	ldi	r31, 0x02	; 2
     970:	11 82       	std	Z+1, r1	; 0x01
     972:	10 82       	st	Z, r1
     974:	15 82       	std	Z+5, r1	; 0x05
     976:	14 82       	std	Z+4, r1	; 0x04
     978:	13 82       	std	Z+3, r1	; 0x03
     97a:	12 82       	std	Z+2, r1	; 0x02
     97c:	e1 e6       	ldi	r30, 0x61	; 97
     97e:	f0 e0       	ldi	r31, 0x00	; 0
     980:	80 e8       	ldi	r24, 0x80	; 128
     982:	80 83       	st	Z, r24
     984:	10 82       	st	Z, r1
     986:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     98a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     98e:	84 e0       	ldi	r24, 0x04	; 4
     990:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     994:	81 e0       	ldi	r24, 0x01	; 1
     996:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
     99a:	0f 90       	pop	r0
     99c:	0f 90       	pop	r0
     99e:	0f 90       	pop	r0
     9a0:	0f 90       	pop	r0
     9a2:	df 91       	pop	r29
     9a4:	cf 91       	pop	r28
     9a6:	08 95       	ret

000009a8 <dispatch>:
     9a8:	cf 93       	push	r28
     9aa:	df 93       	push	r29
     9ac:	00 d0       	rcall	.+0      	; 0x9ae <dispatch+0x6>
     9ae:	cd b7       	in	r28, 0x3d	; 61
     9b0:	de b7       	in	r29, 0x3e	; 62
     9b2:	9a 83       	std	Y+2, r25	; 0x02
     9b4:	89 83       	std	Y+1, r24	; 0x01
     9b6:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <current>
     9ba:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <current+0x1>
     9be:	06 96       	adiw	r24, 0x06	; 6
     9c0:	0e 94 32 11 	call	0x2264	; 0x2264 <setjmp>
     9c4:	89 2b       	or	r24, r25
     9c6:	59 f4       	brne	.+22     	; 0x9de <dispatch+0x36>
     9c8:	89 81       	ldd	r24, Y+1	; 0x01
     9ca:	9a 81       	ldd	r25, Y+2	; 0x02
     9cc:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <current+0x1>
     9d0:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <current>
     9d4:	61 e0       	ldi	r22, 0x01	; 1
     9d6:	70 e0       	ldi	r23, 0x00	; 0
     9d8:	06 96       	adiw	r24, 0x06	; 6
     9da:	0e 94 52 11 	call	0x22a4	; 0x22a4 <longjmp>
     9de:	0f 90       	pop	r0
     9e0:	0f 90       	pop	r0
     9e2:	df 91       	pop	r29
     9e4:	cf 91       	pop	r28
     9e6:	08 95       	ret

000009e8 <schedule>:
     9e8:	0f 93       	push	r16
     9ea:	1f 93       	push	r17
     9ec:	cf 93       	push	r28
     9ee:	df 93       	push	r29
     9f0:	e0 91 a0 01 	lds	r30, 0x01A0	; 0x8001a0 <msgQ>
     9f4:	f0 91 a1 01 	lds	r31, 0x01A1	; 0x8001a1 <msgQ+0x1>
     9f8:	30 97       	sbiw	r30, 0x00	; 0
     9fa:	61 f1       	breq	.+88     	; 0xa54 <schedule+0x6c>
     9fc:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <threadPool>
     a00:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <threadPool+0x1>
     a04:	00 97       	sbiw	r24, 0x00	; 0
     a06:	31 f1       	breq	.+76     	; 0xa54 <schedule+0x6c>
     a08:	c0 91 85 01 	lds	r28, 0x0185	; 0x800185 <activeStack>
     a0c:	d0 91 86 01 	lds	r29, 0x0186	; 0x800186 <activeStack+0x1>
     a10:	aa 81       	ldd	r26, Y+2	; 0x02
     a12:	bb 81       	ldd	r27, Y+3	; 0x03
     a14:	10 97       	sbiw	r26, 0x00	; 0
     a16:	79 f0       	breq	.+30     	; 0xa36 <schedule+0x4e>
     a18:	46 81       	ldd	r20, Z+6	; 0x06
     a1a:	57 81       	ldd	r21, Z+7	; 0x07
     a1c:	60 85       	ldd	r22, Z+8	; 0x08
     a1e:	71 85       	ldd	r23, Z+9	; 0x09
     a20:	16 96       	adiw	r26, 0x06	; 6
     a22:	0d 91       	ld	r16, X+
     a24:	1d 91       	ld	r17, X+
     a26:	2d 91       	ld	r18, X+
     a28:	3c 91       	ld	r19, X
     a2a:	19 97       	sbiw	r26, 0x09	; 9
     a2c:	40 1b       	sub	r20, r16
     a2e:	51 0b       	sbc	r21, r17
     a30:	62 0b       	sbc	r22, r18
     a32:	73 0b       	sbc	r23, r19
     a34:	7a f4       	brpl	.+30     	; 0xa54 <schedule+0x6c>
     a36:	fc 01       	movw	r30, r24
     a38:	20 81       	ld	r18, Z
     a3a:	31 81       	ldd	r19, Z+1	; 0x01
     a3c:	30 93 88 01 	sts	0x0188, r19	; 0x800188 <threadPool+0x1>
     a40:	20 93 87 01 	sts	0x0187, r18	; 0x800187 <threadPool>
     a44:	d1 83       	std	Z+1, r29	; 0x01
     a46:	c0 83       	st	Z, r28
     a48:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <activeStack+0x1>
     a4c:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <activeStack>
     a50:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <dispatch>
     a54:	df 91       	pop	r29
     a56:	cf 91       	pop	r28
     a58:	1f 91       	pop	r17
     a5a:	0f 91       	pop	r16
     a5c:	08 95       	ret

00000a5e <__vector_1>:
     a5e:	1f 92       	push	r1
     a60:	0f 92       	push	r0
     a62:	0f b6       	in	r0, 0x3f	; 63
     a64:	0f 92       	push	r0
     a66:	11 24       	eor	r1, r1
     a68:	2f 93       	push	r18
     a6a:	3f 93       	push	r19
     a6c:	4f 93       	push	r20
     a6e:	5f 93       	push	r21
     a70:	6f 93       	push	r22
     a72:	7f 93       	push	r23
     a74:	8f 93       	push	r24
     a76:	9f 93       	push	r25
     a78:	af 93       	push	r26
     a7a:	bf 93       	push	r27
     a7c:	ef 93       	push	r30
     a7e:	ff 93       	push	r31
     a80:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <overflows>
     a84:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <overflows+0x1>
     a88:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     a8c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     a90:	c9 01       	movw	r24, r18
     a92:	03 2e       	mov	r0, r19
     a94:	00 0c       	add	r0, r0
     a96:	aa 0b       	sbc	r26, r26
     a98:	bb 0b       	sbc	r27, r27
     a9a:	dc 01       	movw	r26, r24
     a9c:	99 27       	eor	r25, r25
     a9e:	88 27       	eor	r24, r24
     aa0:	60 e0       	ldi	r22, 0x00	; 0
     aa2:	70 e0       	ldi	r23, 0x00	; 0
     aa4:	84 2b       	or	r24, r20
     aa6:	95 2b       	or	r25, r21
     aa8:	a6 2b       	or	r26, r22
     aaa:	b7 2b       	or	r27, r23
     aac:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
     ab0:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
     ab4:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
     ab8:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
     abc:	b0 9b       	sbis	0x16, 0	; 22
     abe:	1b c0       	rjmp	.+54     	; 0xaf6 <__vector_1+0x98>
     ac0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     ac4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     ac8:	c9 01       	movw	r24, r18
     aca:	01 96       	adiw	r24, 0x01	; 1
     acc:	09 2e       	mov	r0, r25
     ace:	00 0c       	add	r0, r0
     ad0:	aa 0b       	sbc	r26, r26
     ad2:	bb 0b       	sbc	r27, r27
     ad4:	dc 01       	movw	r26, r24
     ad6:	99 27       	eor	r25, r25
     ad8:	88 27       	eor	r24, r24
     ada:	60 e0       	ldi	r22, 0x00	; 0
     adc:	70 e0       	ldi	r23, 0x00	; 0
     ade:	84 2b       	or	r24, r20
     ae0:	95 2b       	or	r25, r21
     ae2:	a6 2b       	or	r26, r22
     ae4:	b7 2b       	or	r27, r23
     ae6:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
     aea:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
     aee:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
     af2:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
     af6:	e0 91 3a 02 	lds	r30, 0x023A	; 0x80023a <mtable>
     afa:	f0 91 3b 02 	lds	r31, 0x023B	; 0x80023b <mtable+0x1>
     afe:	30 97       	sbiw	r30, 0x00	; 0
     b00:	39 f0       	breq	.+14     	; 0xb10 <__vector_1+0xb2>
     b02:	60 e0       	ldi	r22, 0x00	; 0
     b04:	70 e0       	ldi	r23, 0x00	; 0
     b06:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <otable>
     b0a:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <otable+0x1>
     b0e:	09 95       	icall
     b10:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <schedule>
     b14:	ff 91       	pop	r31
     b16:	ef 91       	pop	r30
     b18:	bf 91       	pop	r27
     b1a:	af 91       	pop	r26
     b1c:	9f 91       	pop	r25
     b1e:	8f 91       	pop	r24
     b20:	7f 91       	pop	r23
     b22:	6f 91       	pop	r22
     b24:	5f 91       	pop	r21
     b26:	4f 91       	pop	r20
     b28:	3f 91       	pop	r19
     b2a:	2f 91       	pop	r18
     b2c:	0f 90       	pop	r0
     b2e:	0f be       	out	0x3f, r0	; 63
     b30:	0f 90       	pop	r0
     b32:	1f 90       	pop	r1
     b34:	18 95       	reti

00000b36 <__vector_2>:
     b36:	1f 92       	push	r1
     b38:	0f 92       	push	r0
     b3a:	0f b6       	in	r0, 0x3f	; 63
     b3c:	0f 92       	push	r0
     b3e:	11 24       	eor	r1, r1
     b40:	2f 93       	push	r18
     b42:	3f 93       	push	r19
     b44:	4f 93       	push	r20
     b46:	5f 93       	push	r21
     b48:	6f 93       	push	r22
     b4a:	7f 93       	push	r23
     b4c:	8f 93       	push	r24
     b4e:	9f 93       	push	r25
     b50:	af 93       	push	r26
     b52:	bf 93       	push	r27
     b54:	ef 93       	push	r30
     b56:	ff 93       	push	r31
     b58:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <overflows>
     b5c:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <overflows+0x1>
     b60:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     b64:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     b68:	c9 01       	movw	r24, r18
     b6a:	03 2e       	mov	r0, r19
     b6c:	00 0c       	add	r0, r0
     b6e:	aa 0b       	sbc	r26, r26
     b70:	bb 0b       	sbc	r27, r27
     b72:	dc 01       	movw	r26, r24
     b74:	99 27       	eor	r25, r25
     b76:	88 27       	eor	r24, r24
     b78:	60 e0       	ldi	r22, 0x00	; 0
     b7a:	70 e0       	ldi	r23, 0x00	; 0
     b7c:	84 2b       	or	r24, r20
     b7e:	95 2b       	or	r25, r21
     b80:	a6 2b       	or	r26, r22
     b82:	b7 2b       	or	r27, r23
     b84:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
     b88:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
     b8c:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
     b90:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
     b94:	b0 9b       	sbis	0x16, 0	; 22
     b96:	1b c0       	rjmp	.+54     	; 0xbce <__vector_2+0x98>
     b98:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     b9c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     ba0:	c9 01       	movw	r24, r18
     ba2:	01 96       	adiw	r24, 0x01	; 1
     ba4:	09 2e       	mov	r0, r25
     ba6:	00 0c       	add	r0, r0
     ba8:	aa 0b       	sbc	r26, r26
     baa:	bb 0b       	sbc	r27, r27
     bac:	dc 01       	movw	r26, r24
     bae:	99 27       	eor	r25, r25
     bb0:	88 27       	eor	r24, r24
     bb2:	60 e0       	ldi	r22, 0x00	; 0
     bb4:	70 e0       	ldi	r23, 0x00	; 0
     bb6:	84 2b       	or	r24, r20
     bb8:	95 2b       	or	r25, r21
     bba:	a6 2b       	or	r26, r22
     bbc:	b7 2b       	or	r27, r23
     bbe:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
     bc2:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
     bc6:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
     bca:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
     bce:	e0 91 3c 02 	lds	r30, 0x023C	; 0x80023c <mtable+0x2>
     bd2:	f0 91 3d 02 	lds	r31, 0x023D	; 0x80023d <mtable+0x3>
     bd6:	30 97       	sbiw	r30, 0x00	; 0
     bd8:	39 f0       	breq	.+14     	; 0xbe8 <__vector_2+0xb2>
     bda:	61 e0       	ldi	r22, 0x01	; 1
     bdc:	70 e0       	ldi	r23, 0x00	; 0
     bde:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <otable+0x2>
     be2:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <otable+0x3>
     be6:	09 95       	icall
     be8:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <schedule>
     bec:	ff 91       	pop	r31
     bee:	ef 91       	pop	r30
     bf0:	bf 91       	pop	r27
     bf2:	af 91       	pop	r26
     bf4:	9f 91       	pop	r25
     bf6:	8f 91       	pop	r24
     bf8:	7f 91       	pop	r23
     bfa:	6f 91       	pop	r22
     bfc:	5f 91       	pop	r21
     bfe:	4f 91       	pop	r20
     c00:	3f 91       	pop	r19
     c02:	2f 91       	pop	r18
     c04:	0f 90       	pop	r0
     c06:	0f be       	out	0x3f, r0	; 63
     c08:	0f 90       	pop	r0
     c0a:	1f 90       	pop	r1
     c0c:	18 95       	reti

00000c0e <__vector_3>:
     c0e:	1f 92       	push	r1
     c10:	0f 92       	push	r0
     c12:	0f b6       	in	r0, 0x3f	; 63
     c14:	0f 92       	push	r0
     c16:	11 24       	eor	r1, r1
     c18:	2f 93       	push	r18
     c1a:	3f 93       	push	r19
     c1c:	4f 93       	push	r20
     c1e:	5f 93       	push	r21
     c20:	6f 93       	push	r22
     c22:	7f 93       	push	r23
     c24:	8f 93       	push	r24
     c26:	9f 93       	push	r25
     c28:	af 93       	push	r26
     c2a:	bf 93       	push	r27
     c2c:	ef 93       	push	r30
     c2e:	ff 93       	push	r31
     c30:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <overflows>
     c34:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <overflows+0x1>
     c38:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     c3c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     c40:	c9 01       	movw	r24, r18
     c42:	03 2e       	mov	r0, r19
     c44:	00 0c       	add	r0, r0
     c46:	aa 0b       	sbc	r26, r26
     c48:	bb 0b       	sbc	r27, r27
     c4a:	dc 01       	movw	r26, r24
     c4c:	99 27       	eor	r25, r25
     c4e:	88 27       	eor	r24, r24
     c50:	60 e0       	ldi	r22, 0x00	; 0
     c52:	70 e0       	ldi	r23, 0x00	; 0
     c54:	84 2b       	or	r24, r20
     c56:	95 2b       	or	r25, r21
     c58:	a6 2b       	or	r26, r22
     c5a:	b7 2b       	or	r27, r23
     c5c:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
     c60:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
     c64:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
     c68:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
     c6c:	b0 9b       	sbis	0x16, 0	; 22
     c6e:	1b c0       	rjmp	.+54     	; 0xca6 <__vector_3+0x98>
     c70:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     c74:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     c78:	c9 01       	movw	r24, r18
     c7a:	01 96       	adiw	r24, 0x01	; 1
     c7c:	09 2e       	mov	r0, r25
     c7e:	00 0c       	add	r0, r0
     c80:	aa 0b       	sbc	r26, r26
     c82:	bb 0b       	sbc	r27, r27
     c84:	dc 01       	movw	r26, r24
     c86:	99 27       	eor	r25, r25
     c88:	88 27       	eor	r24, r24
     c8a:	60 e0       	ldi	r22, 0x00	; 0
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	84 2b       	or	r24, r20
     c90:	95 2b       	or	r25, r21
     c92:	a6 2b       	or	r26, r22
     c94:	b7 2b       	or	r27, r23
     c96:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
     c9a:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
     c9e:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
     ca2:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
     ca6:	e0 91 3e 02 	lds	r30, 0x023E	; 0x80023e <mtable+0x4>
     caa:	f0 91 3f 02 	lds	r31, 0x023F	; 0x80023f <mtable+0x5>
     cae:	30 97       	sbiw	r30, 0x00	; 0
     cb0:	39 f0       	breq	.+14     	; 0xcc0 <__vector_3+0xb2>
     cb2:	62 e0       	ldi	r22, 0x02	; 2
     cb4:	70 e0       	ldi	r23, 0x00	; 0
     cb6:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <otable+0x4>
     cba:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <otable+0x5>
     cbe:	09 95       	icall
     cc0:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <schedule>
     cc4:	ff 91       	pop	r31
     cc6:	ef 91       	pop	r30
     cc8:	bf 91       	pop	r27
     cca:	af 91       	pop	r26
     ccc:	9f 91       	pop	r25
     cce:	8f 91       	pop	r24
     cd0:	7f 91       	pop	r23
     cd2:	6f 91       	pop	r22
     cd4:	5f 91       	pop	r21
     cd6:	4f 91       	pop	r20
     cd8:	3f 91       	pop	r19
     cda:	2f 91       	pop	r18
     cdc:	0f 90       	pop	r0
     cde:	0f be       	out	0x3f, r0	; 63
     ce0:	0f 90       	pop	r0
     ce2:	1f 90       	pop	r1
     ce4:	18 95       	reti

00000ce6 <__vector_4>:
     ce6:	1f 92       	push	r1
     ce8:	0f 92       	push	r0
     cea:	0f b6       	in	r0, 0x3f	; 63
     cec:	0f 92       	push	r0
     cee:	11 24       	eor	r1, r1
     cf0:	2f 93       	push	r18
     cf2:	3f 93       	push	r19
     cf4:	4f 93       	push	r20
     cf6:	5f 93       	push	r21
     cf8:	6f 93       	push	r22
     cfa:	7f 93       	push	r23
     cfc:	8f 93       	push	r24
     cfe:	9f 93       	push	r25
     d00:	af 93       	push	r26
     d02:	bf 93       	push	r27
     d04:	ef 93       	push	r30
     d06:	ff 93       	push	r31
     d08:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <overflows>
     d0c:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <overflows+0x1>
     d10:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     d14:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     d18:	c9 01       	movw	r24, r18
     d1a:	03 2e       	mov	r0, r19
     d1c:	00 0c       	add	r0, r0
     d1e:	aa 0b       	sbc	r26, r26
     d20:	bb 0b       	sbc	r27, r27
     d22:	dc 01       	movw	r26, r24
     d24:	99 27       	eor	r25, r25
     d26:	88 27       	eor	r24, r24
     d28:	60 e0       	ldi	r22, 0x00	; 0
     d2a:	70 e0       	ldi	r23, 0x00	; 0
     d2c:	84 2b       	or	r24, r20
     d2e:	95 2b       	or	r25, r21
     d30:	a6 2b       	or	r26, r22
     d32:	b7 2b       	or	r27, r23
     d34:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
     d38:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
     d3c:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
     d40:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
     d44:	b0 9b       	sbis	0x16, 0	; 22
     d46:	1b c0       	rjmp	.+54     	; 0xd7e <__vector_4+0x98>
     d48:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     d4c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     d50:	c9 01       	movw	r24, r18
     d52:	01 96       	adiw	r24, 0x01	; 1
     d54:	09 2e       	mov	r0, r25
     d56:	00 0c       	add	r0, r0
     d58:	aa 0b       	sbc	r26, r26
     d5a:	bb 0b       	sbc	r27, r27
     d5c:	dc 01       	movw	r26, r24
     d5e:	99 27       	eor	r25, r25
     d60:	88 27       	eor	r24, r24
     d62:	60 e0       	ldi	r22, 0x00	; 0
     d64:	70 e0       	ldi	r23, 0x00	; 0
     d66:	84 2b       	or	r24, r20
     d68:	95 2b       	or	r25, r21
     d6a:	a6 2b       	or	r26, r22
     d6c:	b7 2b       	or	r27, r23
     d6e:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
     d72:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
     d76:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
     d7a:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
     d7e:	e0 91 40 02 	lds	r30, 0x0240	; 0x800240 <mtable+0x6>
     d82:	f0 91 41 02 	lds	r31, 0x0241	; 0x800241 <mtable+0x7>
     d86:	30 97       	sbiw	r30, 0x00	; 0
     d88:	39 f0       	breq	.+14     	; 0xd98 <__vector_4+0xb2>
     d8a:	63 e0       	ldi	r22, 0x03	; 3
     d8c:	70 e0       	ldi	r23, 0x00	; 0
     d8e:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <otable+0x6>
     d92:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <otable+0x7>
     d96:	09 95       	icall
     d98:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <schedule>
     d9c:	ff 91       	pop	r31
     d9e:	ef 91       	pop	r30
     da0:	bf 91       	pop	r27
     da2:	af 91       	pop	r26
     da4:	9f 91       	pop	r25
     da6:	8f 91       	pop	r24
     da8:	7f 91       	pop	r23
     daa:	6f 91       	pop	r22
     dac:	5f 91       	pop	r21
     dae:	4f 91       	pop	r20
     db0:	3f 91       	pop	r19
     db2:	2f 91       	pop	r18
     db4:	0f 90       	pop	r0
     db6:	0f be       	out	0x3f, r0	; 63
     db8:	0f 90       	pop	r0
     dba:	1f 90       	pop	r1
     dbc:	18 95       	reti

00000dbe <__vector_5>:
     dbe:	1f 92       	push	r1
     dc0:	0f 92       	push	r0
     dc2:	0f b6       	in	r0, 0x3f	; 63
     dc4:	0f 92       	push	r0
     dc6:	11 24       	eor	r1, r1
     dc8:	2f 93       	push	r18
     dca:	3f 93       	push	r19
     dcc:	4f 93       	push	r20
     dce:	5f 93       	push	r21
     dd0:	6f 93       	push	r22
     dd2:	7f 93       	push	r23
     dd4:	8f 93       	push	r24
     dd6:	9f 93       	push	r25
     dd8:	af 93       	push	r26
     dda:	bf 93       	push	r27
     ddc:	ef 93       	push	r30
     dde:	ff 93       	push	r31
     de0:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <overflows>
     de4:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <overflows+0x1>
     de8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     dec:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     df0:	c9 01       	movw	r24, r18
     df2:	03 2e       	mov	r0, r19
     df4:	00 0c       	add	r0, r0
     df6:	aa 0b       	sbc	r26, r26
     df8:	bb 0b       	sbc	r27, r27
     dfa:	dc 01       	movw	r26, r24
     dfc:	99 27       	eor	r25, r25
     dfe:	88 27       	eor	r24, r24
     e00:	60 e0       	ldi	r22, 0x00	; 0
     e02:	70 e0       	ldi	r23, 0x00	; 0
     e04:	84 2b       	or	r24, r20
     e06:	95 2b       	or	r25, r21
     e08:	a6 2b       	or	r26, r22
     e0a:	b7 2b       	or	r27, r23
     e0c:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
     e10:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
     e14:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
     e18:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
     e1c:	b0 9b       	sbis	0x16, 0	; 22
     e1e:	1b c0       	rjmp	.+54     	; 0xe56 <__vector_5+0x98>
     e20:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     e24:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     e28:	c9 01       	movw	r24, r18
     e2a:	01 96       	adiw	r24, 0x01	; 1
     e2c:	09 2e       	mov	r0, r25
     e2e:	00 0c       	add	r0, r0
     e30:	aa 0b       	sbc	r26, r26
     e32:	bb 0b       	sbc	r27, r27
     e34:	dc 01       	movw	r26, r24
     e36:	99 27       	eor	r25, r25
     e38:	88 27       	eor	r24, r24
     e3a:	60 e0       	ldi	r22, 0x00	; 0
     e3c:	70 e0       	ldi	r23, 0x00	; 0
     e3e:	84 2b       	or	r24, r20
     e40:	95 2b       	or	r25, r21
     e42:	a6 2b       	or	r26, r22
     e44:	b7 2b       	or	r27, r23
     e46:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
     e4a:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
     e4e:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
     e52:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
     e56:	e0 91 42 02 	lds	r30, 0x0242	; 0x800242 <mtable+0x8>
     e5a:	f0 91 43 02 	lds	r31, 0x0243	; 0x800243 <mtable+0x9>
     e5e:	30 97       	sbiw	r30, 0x00	; 0
     e60:	39 f0       	breq	.+14     	; 0xe70 <__vector_5+0xb2>
     e62:	64 e0       	ldi	r22, 0x04	; 4
     e64:	70 e0       	ldi	r23, 0x00	; 0
     e66:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <otable+0x8>
     e6a:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <otable+0x9>
     e6e:	09 95       	icall
     e70:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <schedule>
     e74:	ff 91       	pop	r31
     e76:	ef 91       	pop	r30
     e78:	bf 91       	pop	r27
     e7a:	af 91       	pop	r26
     e7c:	9f 91       	pop	r25
     e7e:	8f 91       	pop	r24
     e80:	7f 91       	pop	r23
     e82:	6f 91       	pop	r22
     e84:	5f 91       	pop	r21
     e86:	4f 91       	pop	r20
     e88:	3f 91       	pop	r19
     e8a:	2f 91       	pop	r18
     e8c:	0f 90       	pop	r0
     e8e:	0f be       	out	0x3f, r0	; 63
     e90:	0f 90       	pop	r0
     e92:	1f 90       	pop	r1
     e94:	18 95       	reti

00000e96 <__vector_10>:
     e96:	1f 92       	push	r1
     e98:	0f 92       	push	r0
     e9a:	0f b6       	in	r0, 0x3f	; 63
     e9c:	0f 92       	push	r0
     e9e:	11 24       	eor	r1, r1
     ea0:	2f 93       	push	r18
     ea2:	3f 93       	push	r19
     ea4:	4f 93       	push	r20
     ea6:	5f 93       	push	r21
     ea8:	6f 93       	push	r22
     eaa:	7f 93       	push	r23
     eac:	8f 93       	push	r24
     eae:	9f 93       	push	r25
     eb0:	af 93       	push	r26
     eb2:	bf 93       	push	r27
     eb4:	ef 93       	push	r30
     eb6:	ff 93       	push	r31
     eb8:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <overflows>
     ebc:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <overflows+0x1>
     ec0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     ec4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     ec8:	c9 01       	movw	r24, r18
     eca:	03 2e       	mov	r0, r19
     ecc:	00 0c       	add	r0, r0
     ece:	aa 0b       	sbc	r26, r26
     ed0:	bb 0b       	sbc	r27, r27
     ed2:	dc 01       	movw	r26, r24
     ed4:	99 27       	eor	r25, r25
     ed6:	88 27       	eor	r24, r24
     ed8:	60 e0       	ldi	r22, 0x00	; 0
     eda:	70 e0       	ldi	r23, 0x00	; 0
     edc:	84 2b       	or	r24, r20
     ede:	95 2b       	or	r25, r21
     ee0:	a6 2b       	or	r26, r22
     ee2:	b7 2b       	or	r27, r23
     ee4:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
     ee8:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
     eec:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
     ef0:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
     ef4:	b0 9b       	sbis	0x16, 0	; 22
     ef6:	1b c0       	rjmp	.+54     	; 0xf2e <__vector_10+0x98>
     ef8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     efc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     f00:	c9 01       	movw	r24, r18
     f02:	01 96       	adiw	r24, 0x01	; 1
     f04:	09 2e       	mov	r0, r25
     f06:	00 0c       	add	r0, r0
     f08:	aa 0b       	sbc	r26, r26
     f0a:	bb 0b       	sbc	r27, r27
     f0c:	dc 01       	movw	r26, r24
     f0e:	99 27       	eor	r25, r25
     f10:	88 27       	eor	r24, r24
     f12:	60 e0       	ldi	r22, 0x00	; 0
     f14:	70 e0       	ldi	r23, 0x00	; 0
     f16:	84 2b       	or	r24, r20
     f18:	95 2b       	or	r25, r21
     f1a:	a6 2b       	or	r26, r22
     f1c:	b7 2b       	or	r27, r23
     f1e:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
     f22:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
     f26:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
     f2a:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
     f2e:	e0 91 44 02 	lds	r30, 0x0244	; 0x800244 <mtable+0xa>
     f32:	f0 91 45 02 	lds	r31, 0x0245	; 0x800245 <mtable+0xb>
     f36:	30 97       	sbiw	r30, 0x00	; 0
     f38:	39 f0       	breq	.+14     	; 0xf48 <__vector_10+0xb2>
     f3a:	65 e0       	ldi	r22, 0x05	; 5
     f3c:	70 e0       	ldi	r23, 0x00	; 0
     f3e:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <otable+0xa>
     f42:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <otable+0xb>
     f46:	09 95       	icall
     f48:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <schedule>
     f4c:	ff 91       	pop	r31
     f4e:	ef 91       	pop	r30
     f50:	bf 91       	pop	r27
     f52:	af 91       	pop	r26
     f54:	9f 91       	pop	r25
     f56:	8f 91       	pop	r24
     f58:	7f 91       	pop	r23
     f5a:	6f 91       	pop	r22
     f5c:	5f 91       	pop	r21
     f5e:	4f 91       	pop	r20
     f60:	3f 91       	pop	r19
     f62:	2f 91       	pop	r18
     f64:	0f 90       	pop	r0
     f66:	0f be       	out	0x3f, r0	; 63
     f68:	0f 90       	pop	r0
     f6a:	1f 90       	pop	r1
     f6c:	18 95       	reti

00000f6e <__vector_11>:
     f6e:	1f 92       	push	r1
     f70:	0f 92       	push	r0
     f72:	0f b6       	in	r0, 0x3f	; 63
     f74:	0f 92       	push	r0
     f76:	11 24       	eor	r1, r1
     f78:	2f 93       	push	r18
     f7a:	3f 93       	push	r19
     f7c:	4f 93       	push	r20
     f7e:	5f 93       	push	r21
     f80:	6f 93       	push	r22
     f82:	7f 93       	push	r23
     f84:	8f 93       	push	r24
     f86:	9f 93       	push	r25
     f88:	af 93       	push	r26
     f8a:	bf 93       	push	r27
     f8c:	ef 93       	push	r30
     f8e:	ff 93       	push	r31
     f90:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <overflows>
     f94:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <overflows+0x1>
     f98:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     f9c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     fa0:	c9 01       	movw	r24, r18
     fa2:	03 2e       	mov	r0, r19
     fa4:	00 0c       	add	r0, r0
     fa6:	aa 0b       	sbc	r26, r26
     fa8:	bb 0b       	sbc	r27, r27
     faa:	dc 01       	movw	r26, r24
     fac:	99 27       	eor	r25, r25
     fae:	88 27       	eor	r24, r24
     fb0:	60 e0       	ldi	r22, 0x00	; 0
     fb2:	70 e0       	ldi	r23, 0x00	; 0
     fb4:	84 2b       	or	r24, r20
     fb6:	95 2b       	or	r25, r21
     fb8:	a6 2b       	or	r26, r22
     fba:	b7 2b       	or	r27, r23
     fbc:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
     fc0:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
     fc4:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
     fc8:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
     fcc:	b0 9b       	sbis	0x16, 0	; 22
     fce:	1b c0       	rjmp	.+54     	; 0x1006 <__vector_11+0x98>
     fd0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     fd4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     fd8:	c9 01       	movw	r24, r18
     fda:	01 96       	adiw	r24, 0x01	; 1
     fdc:	09 2e       	mov	r0, r25
     fde:	00 0c       	add	r0, r0
     fe0:	aa 0b       	sbc	r26, r26
     fe2:	bb 0b       	sbc	r27, r27
     fe4:	dc 01       	movw	r26, r24
     fe6:	99 27       	eor	r25, r25
     fe8:	88 27       	eor	r24, r24
     fea:	60 e0       	ldi	r22, 0x00	; 0
     fec:	70 e0       	ldi	r23, 0x00	; 0
     fee:	84 2b       	or	r24, r20
     ff0:	95 2b       	or	r25, r21
     ff2:	a6 2b       	or	r26, r22
     ff4:	b7 2b       	or	r27, r23
     ff6:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
     ffa:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
     ffe:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
    1002:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
    1006:	e0 91 46 02 	lds	r30, 0x0246	; 0x800246 <mtable+0xc>
    100a:	f0 91 47 02 	lds	r31, 0x0247	; 0x800247 <mtable+0xd>
    100e:	30 97       	sbiw	r30, 0x00	; 0
    1010:	39 f0       	breq	.+14     	; 0x1020 <__vector_11+0xb2>
    1012:	66 e0       	ldi	r22, 0x06	; 6
    1014:	70 e0       	ldi	r23, 0x00	; 0
    1016:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <otable+0xc>
    101a:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <otable+0xd>
    101e:	09 95       	icall
    1020:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <schedule>
    1024:	ff 91       	pop	r31
    1026:	ef 91       	pop	r30
    1028:	bf 91       	pop	r27
    102a:	af 91       	pop	r26
    102c:	9f 91       	pop	r25
    102e:	8f 91       	pop	r24
    1030:	7f 91       	pop	r23
    1032:	6f 91       	pop	r22
    1034:	5f 91       	pop	r21
    1036:	4f 91       	pop	r20
    1038:	3f 91       	pop	r19
    103a:	2f 91       	pop	r18
    103c:	0f 90       	pop	r0
    103e:	0f be       	out	0x3f, r0	; 63
    1040:	0f 90       	pop	r0
    1042:	1f 90       	pop	r1
    1044:	18 95       	reti

00001046 <__vector_12>:
    1046:	1f 92       	push	r1
    1048:	0f 92       	push	r0
    104a:	0f b6       	in	r0, 0x3f	; 63
    104c:	0f 92       	push	r0
    104e:	11 24       	eor	r1, r1
    1050:	2f 93       	push	r18
    1052:	3f 93       	push	r19
    1054:	4f 93       	push	r20
    1056:	5f 93       	push	r21
    1058:	6f 93       	push	r22
    105a:	7f 93       	push	r23
    105c:	8f 93       	push	r24
    105e:	9f 93       	push	r25
    1060:	af 93       	push	r26
    1062:	bf 93       	push	r27
    1064:	ef 93       	push	r30
    1066:	ff 93       	push	r31
    1068:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <overflows>
    106c:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <overflows+0x1>
    1070:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1074:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1078:	c9 01       	movw	r24, r18
    107a:	03 2e       	mov	r0, r19
    107c:	00 0c       	add	r0, r0
    107e:	aa 0b       	sbc	r26, r26
    1080:	bb 0b       	sbc	r27, r27
    1082:	dc 01       	movw	r26, r24
    1084:	99 27       	eor	r25, r25
    1086:	88 27       	eor	r24, r24
    1088:	60 e0       	ldi	r22, 0x00	; 0
    108a:	70 e0       	ldi	r23, 0x00	; 0
    108c:	84 2b       	or	r24, r20
    108e:	95 2b       	or	r25, r21
    1090:	a6 2b       	or	r26, r22
    1092:	b7 2b       	or	r27, r23
    1094:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
    1098:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
    109c:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
    10a0:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
    10a4:	b0 9b       	sbis	0x16, 0	; 22
    10a6:	1b c0       	rjmp	.+54     	; 0x10de <__vector_12+0x98>
    10a8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    10ac:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    10b0:	c9 01       	movw	r24, r18
    10b2:	01 96       	adiw	r24, 0x01	; 1
    10b4:	09 2e       	mov	r0, r25
    10b6:	00 0c       	add	r0, r0
    10b8:	aa 0b       	sbc	r26, r26
    10ba:	bb 0b       	sbc	r27, r27
    10bc:	dc 01       	movw	r26, r24
    10be:	99 27       	eor	r25, r25
    10c0:	88 27       	eor	r24, r24
    10c2:	60 e0       	ldi	r22, 0x00	; 0
    10c4:	70 e0       	ldi	r23, 0x00	; 0
    10c6:	84 2b       	or	r24, r20
    10c8:	95 2b       	or	r25, r21
    10ca:	a6 2b       	or	r26, r22
    10cc:	b7 2b       	or	r27, r23
    10ce:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
    10d2:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
    10d6:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
    10da:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
    10de:	e0 91 48 02 	lds	r30, 0x0248	; 0x800248 <mtable+0xe>
    10e2:	f0 91 49 02 	lds	r31, 0x0249	; 0x800249 <mtable+0xf>
    10e6:	30 97       	sbiw	r30, 0x00	; 0
    10e8:	39 f0       	breq	.+14     	; 0x10f8 <__vector_12+0xb2>
    10ea:	67 e0       	ldi	r22, 0x07	; 7
    10ec:	70 e0       	ldi	r23, 0x00	; 0
    10ee:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <otable+0xe>
    10f2:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <otable+0xf>
    10f6:	09 95       	icall
    10f8:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <schedule>
    10fc:	ff 91       	pop	r31
    10fe:	ef 91       	pop	r30
    1100:	bf 91       	pop	r27
    1102:	af 91       	pop	r26
    1104:	9f 91       	pop	r25
    1106:	8f 91       	pop	r24
    1108:	7f 91       	pop	r23
    110a:	6f 91       	pop	r22
    110c:	5f 91       	pop	r21
    110e:	4f 91       	pop	r20
    1110:	3f 91       	pop	r19
    1112:	2f 91       	pop	r18
    1114:	0f 90       	pop	r0
    1116:	0f be       	out	0x3f, r0	; 63
    1118:	0f 90       	pop	r0
    111a:	1f 90       	pop	r1
    111c:	18 95       	reti

0000111e <__vector_13>:
    111e:	1f 92       	push	r1
    1120:	0f 92       	push	r0
    1122:	0f b6       	in	r0, 0x3f	; 63
    1124:	0f 92       	push	r0
    1126:	11 24       	eor	r1, r1
    1128:	2f 93       	push	r18
    112a:	3f 93       	push	r19
    112c:	4f 93       	push	r20
    112e:	5f 93       	push	r21
    1130:	6f 93       	push	r22
    1132:	7f 93       	push	r23
    1134:	8f 93       	push	r24
    1136:	9f 93       	push	r25
    1138:	af 93       	push	r26
    113a:	bf 93       	push	r27
    113c:	ef 93       	push	r30
    113e:	ff 93       	push	r31
    1140:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <overflows>
    1144:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <overflows+0x1>
    1148:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    114c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1150:	c9 01       	movw	r24, r18
    1152:	03 2e       	mov	r0, r19
    1154:	00 0c       	add	r0, r0
    1156:	aa 0b       	sbc	r26, r26
    1158:	bb 0b       	sbc	r27, r27
    115a:	dc 01       	movw	r26, r24
    115c:	99 27       	eor	r25, r25
    115e:	88 27       	eor	r24, r24
    1160:	60 e0       	ldi	r22, 0x00	; 0
    1162:	70 e0       	ldi	r23, 0x00	; 0
    1164:	84 2b       	or	r24, r20
    1166:	95 2b       	or	r25, r21
    1168:	a6 2b       	or	r26, r22
    116a:	b7 2b       	or	r27, r23
    116c:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
    1170:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
    1174:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
    1178:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
    117c:	b0 9b       	sbis	0x16, 0	; 22
    117e:	1b c0       	rjmp	.+54     	; 0x11b6 <__vector_13+0x98>
    1180:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1184:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1188:	c9 01       	movw	r24, r18
    118a:	01 96       	adiw	r24, 0x01	; 1
    118c:	09 2e       	mov	r0, r25
    118e:	00 0c       	add	r0, r0
    1190:	aa 0b       	sbc	r26, r26
    1192:	bb 0b       	sbc	r27, r27
    1194:	dc 01       	movw	r26, r24
    1196:	99 27       	eor	r25, r25
    1198:	88 27       	eor	r24, r24
    119a:	60 e0       	ldi	r22, 0x00	; 0
    119c:	70 e0       	ldi	r23, 0x00	; 0
    119e:	84 2b       	or	r24, r20
    11a0:	95 2b       	or	r25, r21
    11a2:	a6 2b       	or	r26, r22
    11a4:	b7 2b       	or	r27, r23
    11a6:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
    11aa:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
    11ae:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
    11b2:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
    11b6:	e0 91 4a 02 	lds	r30, 0x024A	; 0x80024a <mtable+0x10>
    11ba:	f0 91 4b 02 	lds	r31, 0x024B	; 0x80024b <mtable+0x11>
    11be:	30 97       	sbiw	r30, 0x00	; 0
    11c0:	39 f0       	breq	.+14     	; 0x11d0 <__vector_13+0xb2>
    11c2:	68 e0       	ldi	r22, 0x08	; 8
    11c4:	70 e0       	ldi	r23, 0x00	; 0
    11c6:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <otable+0x10>
    11ca:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <otable+0x11>
    11ce:	09 95       	icall
    11d0:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <schedule>
    11d4:	ff 91       	pop	r31
    11d6:	ef 91       	pop	r30
    11d8:	bf 91       	pop	r27
    11da:	af 91       	pop	r26
    11dc:	9f 91       	pop	r25
    11de:	8f 91       	pop	r24
    11e0:	7f 91       	pop	r23
    11e2:	6f 91       	pop	r22
    11e4:	5f 91       	pop	r21
    11e6:	4f 91       	pop	r20
    11e8:	3f 91       	pop	r19
    11ea:	2f 91       	pop	r18
    11ec:	0f 90       	pop	r0
    11ee:	0f be       	out	0x3f, r0	; 63
    11f0:	0f 90       	pop	r0
    11f2:	1f 90       	pop	r1
    11f4:	18 95       	reti

000011f6 <__vector_14>:
    11f6:	1f 92       	push	r1
    11f8:	0f 92       	push	r0
    11fa:	0f b6       	in	r0, 0x3f	; 63
    11fc:	0f 92       	push	r0
    11fe:	11 24       	eor	r1, r1
    1200:	2f 93       	push	r18
    1202:	3f 93       	push	r19
    1204:	4f 93       	push	r20
    1206:	5f 93       	push	r21
    1208:	6f 93       	push	r22
    120a:	7f 93       	push	r23
    120c:	8f 93       	push	r24
    120e:	9f 93       	push	r25
    1210:	af 93       	push	r26
    1212:	bf 93       	push	r27
    1214:	ef 93       	push	r30
    1216:	ff 93       	push	r31
    1218:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <overflows>
    121c:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <overflows+0x1>
    1220:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1224:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1228:	c9 01       	movw	r24, r18
    122a:	03 2e       	mov	r0, r19
    122c:	00 0c       	add	r0, r0
    122e:	aa 0b       	sbc	r26, r26
    1230:	bb 0b       	sbc	r27, r27
    1232:	dc 01       	movw	r26, r24
    1234:	99 27       	eor	r25, r25
    1236:	88 27       	eor	r24, r24
    1238:	60 e0       	ldi	r22, 0x00	; 0
    123a:	70 e0       	ldi	r23, 0x00	; 0
    123c:	84 2b       	or	r24, r20
    123e:	95 2b       	or	r25, r21
    1240:	a6 2b       	or	r26, r22
    1242:	b7 2b       	or	r27, r23
    1244:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
    1248:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
    124c:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
    1250:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
    1254:	b0 9b       	sbis	0x16, 0	; 22
    1256:	1b c0       	rjmp	.+54     	; 0x128e <__vector_14+0x98>
    1258:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    125c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1260:	c9 01       	movw	r24, r18
    1262:	01 96       	adiw	r24, 0x01	; 1
    1264:	09 2e       	mov	r0, r25
    1266:	00 0c       	add	r0, r0
    1268:	aa 0b       	sbc	r26, r26
    126a:	bb 0b       	sbc	r27, r27
    126c:	dc 01       	movw	r26, r24
    126e:	99 27       	eor	r25, r25
    1270:	88 27       	eor	r24, r24
    1272:	60 e0       	ldi	r22, 0x00	; 0
    1274:	70 e0       	ldi	r23, 0x00	; 0
    1276:	84 2b       	or	r24, r20
    1278:	95 2b       	or	r25, r21
    127a:	a6 2b       	or	r26, r22
    127c:	b7 2b       	or	r27, r23
    127e:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
    1282:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
    1286:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
    128a:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
    128e:	e0 91 4c 02 	lds	r30, 0x024C	; 0x80024c <mtable+0x12>
    1292:	f0 91 4d 02 	lds	r31, 0x024D	; 0x80024d <mtable+0x13>
    1296:	30 97       	sbiw	r30, 0x00	; 0
    1298:	39 f0       	breq	.+14     	; 0x12a8 <__vector_14+0xb2>
    129a:	69 e0       	ldi	r22, 0x09	; 9
    129c:	70 e0       	ldi	r23, 0x00	; 0
    129e:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <otable+0x12>
    12a2:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <otable+0x13>
    12a6:	09 95       	icall
    12a8:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <schedule>
    12ac:	ff 91       	pop	r31
    12ae:	ef 91       	pop	r30
    12b0:	bf 91       	pop	r27
    12b2:	af 91       	pop	r26
    12b4:	9f 91       	pop	r25
    12b6:	8f 91       	pop	r24
    12b8:	7f 91       	pop	r23
    12ba:	6f 91       	pop	r22
    12bc:	5f 91       	pop	r21
    12be:	4f 91       	pop	r20
    12c0:	3f 91       	pop	r19
    12c2:	2f 91       	pop	r18
    12c4:	0f 90       	pop	r0
    12c6:	0f be       	out	0x3f, r0	; 63
    12c8:	0f 90       	pop	r0
    12ca:	1f 90       	pop	r1
    12cc:	18 95       	reti

000012ce <__vector_15>:
    12ce:	1f 92       	push	r1
    12d0:	0f 92       	push	r0
    12d2:	0f b6       	in	r0, 0x3f	; 63
    12d4:	0f 92       	push	r0
    12d6:	11 24       	eor	r1, r1
    12d8:	2f 93       	push	r18
    12da:	3f 93       	push	r19
    12dc:	4f 93       	push	r20
    12de:	5f 93       	push	r21
    12e0:	6f 93       	push	r22
    12e2:	7f 93       	push	r23
    12e4:	8f 93       	push	r24
    12e6:	9f 93       	push	r25
    12e8:	af 93       	push	r26
    12ea:	bf 93       	push	r27
    12ec:	ef 93       	push	r30
    12ee:	ff 93       	push	r31
    12f0:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <overflows>
    12f4:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <overflows+0x1>
    12f8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    12fc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1300:	c9 01       	movw	r24, r18
    1302:	03 2e       	mov	r0, r19
    1304:	00 0c       	add	r0, r0
    1306:	aa 0b       	sbc	r26, r26
    1308:	bb 0b       	sbc	r27, r27
    130a:	dc 01       	movw	r26, r24
    130c:	99 27       	eor	r25, r25
    130e:	88 27       	eor	r24, r24
    1310:	60 e0       	ldi	r22, 0x00	; 0
    1312:	70 e0       	ldi	r23, 0x00	; 0
    1314:	84 2b       	or	r24, r20
    1316:	95 2b       	or	r25, r21
    1318:	a6 2b       	or	r26, r22
    131a:	b7 2b       	or	r27, r23
    131c:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
    1320:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
    1324:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
    1328:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
    132c:	b0 9b       	sbis	0x16, 0	; 22
    132e:	1b c0       	rjmp	.+54     	; 0x1366 <__vector_15+0x98>
    1330:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1334:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1338:	c9 01       	movw	r24, r18
    133a:	01 96       	adiw	r24, 0x01	; 1
    133c:	09 2e       	mov	r0, r25
    133e:	00 0c       	add	r0, r0
    1340:	aa 0b       	sbc	r26, r26
    1342:	bb 0b       	sbc	r27, r27
    1344:	dc 01       	movw	r26, r24
    1346:	99 27       	eor	r25, r25
    1348:	88 27       	eor	r24, r24
    134a:	60 e0       	ldi	r22, 0x00	; 0
    134c:	70 e0       	ldi	r23, 0x00	; 0
    134e:	84 2b       	or	r24, r20
    1350:	95 2b       	or	r25, r21
    1352:	a6 2b       	or	r26, r22
    1354:	b7 2b       	or	r27, r23
    1356:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
    135a:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
    135e:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
    1362:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
    1366:	e0 91 4e 02 	lds	r30, 0x024E	; 0x80024e <mtable+0x14>
    136a:	f0 91 4f 02 	lds	r31, 0x024F	; 0x80024f <mtable+0x15>
    136e:	30 97       	sbiw	r30, 0x00	; 0
    1370:	39 f0       	breq	.+14     	; 0x1380 <__vector_15+0xb2>
    1372:	6a e0       	ldi	r22, 0x0A	; 10
    1374:	70 e0       	ldi	r23, 0x00	; 0
    1376:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <otable+0x14>
    137a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <otable+0x15>
    137e:	09 95       	icall
    1380:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <schedule>
    1384:	ff 91       	pop	r31
    1386:	ef 91       	pop	r30
    1388:	bf 91       	pop	r27
    138a:	af 91       	pop	r26
    138c:	9f 91       	pop	r25
    138e:	8f 91       	pop	r24
    1390:	7f 91       	pop	r23
    1392:	6f 91       	pop	r22
    1394:	5f 91       	pop	r21
    1396:	4f 91       	pop	r20
    1398:	3f 91       	pop	r19
    139a:	2f 91       	pop	r18
    139c:	0f 90       	pop	r0
    139e:	0f be       	out	0x3f, r0	; 63
    13a0:	0f 90       	pop	r0
    13a2:	1f 90       	pop	r1
    13a4:	18 95       	reti

000013a6 <__vector_16>:
    13a6:	1f 92       	push	r1
    13a8:	0f 92       	push	r0
    13aa:	0f b6       	in	r0, 0x3f	; 63
    13ac:	0f 92       	push	r0
    13ae:	11 24       	eor	r1, r1
    13b0:	2f 93       	push	r18
    13b2:	3f 93       	push	r19
    13b4:	4f 93       	push	r20
    13b6:	5f 93       	push	r21
    13b8:	6f 93       	push	r22
    13ba:	7f 93       	push	r23
    13bc:	8f 93       	push	r24
    13be:	9f 93       	push	r25
    13c0:	af 93       	push	r26
    13c2:	bf 93       	push	r27
    13c4:	ef 93       	push	r30
    13c6:	ff 93       	push	r31
    13c8:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <overflows>
    13cc:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <overflows+0x1>
    13d0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    13d4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    13d8:	c9 01       	movw	r24, r18
    13da:	03 2e       	mov	r0, r19
    13dc:	00 0c       	add	r0, r0
    13de:	aa 0b       	sbc	r26, r26
    13e0:	bb 0b       	sbc	r27, r27
    13e2:	dc 01       	movw	r26, r24
    13e4:	99 27       	eor	r25, r25
    13e6:	88 27       	eor	r24, r24
    13e8:	60 e0       	ldi	r22, 0x00	; 0
    13ea:	70 e0       	ldi	r23, 0x00	; 0
    13ec:	84 2b       	or	r24, r20
    13ee:	95 2b       	or	r25, r21
    13f0:	a6 2b       	or	r26, r22
    13f2:	b7 2b       	or	r27, r23
    13f4:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
    13f8:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
    13fc:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
    1400:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
    1404:	b0 9b       	sbis	0x16, 0	; 22
    1406:	1b c0       	rjmp	.+54     	; 0x143e <__vector_16+0x98>
    1408:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    140c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1410:	c9 01       	movw	r24, r18
    1412:	01 96       	adiw	r24, 0x01	; 1
    1414:	09 2e       	mov	r0, r25
    1416:	00 0c       	add	r0, r0
    1418:	aa 0b       	sbc	r26, r26
    141a:	bb 0b       	sbc	r27, r27
    141c:	dc 01       	movw	r26, r24
    141e:	99 27       	eor	r25, r25
    1420:	88 27       	eor	r24, r24
    1422:	60 e0       	ldi	r22, 0x00	; 0
    1424:	70 e0       	ldi	r23, 0x00	; 0
    1426:	84 2b       	or	r24, r20
    1428:	95 2b       	or	r25, r21
    142a:	a6 2b       	or	r26, r22
    142c:	b7 2b       	or	r27, r23
    142e:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
    1432:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
    1436:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
    143a:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
    143e:	e0 91 50 02 	lds	r30, 0x0250	; 0x800250 <mtable+0x16>
    1442:	f0 91 51 02 	lds	r31, 0x0251	; 0x800251 <mtable+0x17>
    1446:	30 97       	sbiw	r30, 0x00	; 0
    1448:	39 f0       	breq	.+14     	; 0x1458 <__vector_16+0xb2>
    144a:	6b e0       	ldi	r22, 0x0B	; 11
    144c:	70 e0       	ldi	r23, 0x00	; 0
    144e:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <otable+0x16>
    1452:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <otable+0x17>
    1456:	09 95       	icall
    1458:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <schedule>
    145c:	ff 91       	pop	r31
    145e:	ef 91       	pop	r30
    1460:	bf 91       	pop	r27
    1462:	af 91       	pop	r26
    1464:	9f 91       	pop	r25
    1466:	8f 91       	pop	r24
    1468:	7f 91       	pop	r23
    146a:	6f 91       	pop	r22
    146c:	5f 91       	pop	r21
    146e:	4f 91       	pop	r20
    1470:	3f 91       	pop	r19
    1472:	2f 91       	pop	r18
    1474:	0f 90       	pop	r0
    1476:	0f be       	out	0x3f, r0	; 63
    1478:	0f 90       	pop	r0
    147a:	1f 90       	pop	r1
    147c:	18 95       	reti

0000147e <__vector_17>:
    147e:	1f 92       	push	r1
    1480:	0f 92       	push	r0
    1482:	0f b6       	in	r0, 0x3f	; 63
    1484:	0f 92       	push	r0
    1486:	11 24       	eor	r1, r1
    1488:	2f 93       	push	r18
    148a:	3f 93       	push	r19
    148c:	4f 93       	push	r20
    148e:	5f 93       	push	r21
    1490:	6f 93       	push	r22
    1492:	7f 93       	push	r23
    1494:	8f 93       	push	r24
    1496:	9f 93       	push	r25
    1498:	af 93       	push	r26
    149a:	bf 93       	push	r27
    149c:	ef 93       	push	r30
    149e:	ff 93       	push	r31
    14a0:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <overflows>
    14a4:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <overflows+0x1>
    14a8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    14ac:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    14b0:	c9 01       	movw	r24, r18
    14b2:	03 2e       	mov	r0, r19
    14b4:	00 0c       	add	r0, r0
    14b6:	aa 0b       	sbc	r26, r26
    14b8:	bb 0b       	sbc	r27, r27
    14ba:	dc 01       	movw	r26, r24
    14bc:	99 27       	eor	r25, r25
    14be:	88 27       	eor	r24, r24
    14c0:	60 e0       	ldi	r22, 0x00	; 0
    14c2:	70 e0       	ldi	r23, 0x00	; 0
    14c4:	84 2b       	or	r24, r20
    14c6:	95 2b       	or	r25, r21
    14c8:	a6 2b       	or	r26, r22
    14ca:	b7 2b       	or	r27, r23
    14cc:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
    14d0:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
    14d4:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
    14d8:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
    14dc:	b0 9b       	sbis	0x16, 0	; 22
    14de:	1b c0       	rjmp	.+54     	; 0x1516 <__vector_17+0x98>
    14e0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    14e4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    14e8:	c9 01       	movw	r24, r18
    14ea:	01 96       	adiw	r24, 0x01	; 1
    14ec:	09 2e       	mov	r0, r25
    14ee:	00 0c       	add	r0, r0
    14f0:	aa 0b       	sbc	r26, r26
    14f2:	bb 0b       	sbc	r27, r27
    14f4:	dc 01       	movw	r26, r24
    14f6:	99 27       	eor	r25, r25
    14f8:	88 27       	eor	r24, r24
    14fa:	60 e0       	ldi	r22, 0x00	; 0
    14fc:	70 e0       	ldi	r23, 0x00	; 0
    14fe:	84 2b       	or	r24, r20
    1500:	95 2b       	or	r25, r21
    1502:	a6 2b       	or	r26, r22
    1504:	b7 2b       	or	r27, r23
    1506:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
    150a:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
    150e:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
    1512:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
    1516:	e0 91 52 02 	lds	r30, 0x0252	; 0x800252 <mtable+0x18>
    151a:	f0 91 53 02 	lds	r31, 0x0253	; 0x800253 <mtable+0x19>
    151e:	30 97       	sbiw	r30, 0x00	; 0
    1520:	39 f0       	breq	.+14     	; 0x1530 <__vector_17+0xb2>
    1522:	6c e0       	ldi	r22, 0x0C	; 12
    1524:	70 e0       	ldi	r23, 0x00	; 0
    1526:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <otable+0x18>
    152a:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <otable+0x19>
    152e:	09 95       	icall
    1530:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <schedule>
    1534:	ff 91       	pop	r31
    1536:	ef 91       	pop	r30
    1538:	bf 91       	pop	r27
    153a:	af 91       	pop	r26
    153c:	9f 91       	pop	r25
    153e:	8f 91       	pop	r24
    1540:	7f 91       	pop	r23
    1542:	6f 91       	pop	r22
    1544:	5f 91       	pop	r21
    1546:	4f 91       	pop	r20
    1548:	3f 91       	pop	r19
    154a:	2f 91       	pop	r18
    154c:	0f 90       	pop	r0
    154e:	0f be       	out	0x3f, r0	; 63
    1550:	0f 90       	pop	r0
    1552:	1f 90       	pop	r1
    1554:	18 95       	reti

00001556 <__vector_18>:
    1556:	1f 92       	push	r1
    1558:	0f 92       	push	r0
    155a:	0f b6       	in	r0, 0x3f	; 63
    155c:	0f 92       	push	r0
    155e:	11 24       	eor	r1, r1
    1560:	2f 93       	push	r18
    1562:	3f 93       	push	r19
    1564:	4f 93       	push	r20
    1566:	5f 93       	push	r21
    1568:	6f 93       	push	r22
    156a:	7f 93       	push	r23
    156c:	8f 93       	push	r24
    156e:	9f 93       	push	r25
    1570:	af 93       	push	r26
    1572:	bf 93       	push	r27
    1574:	ef 93       	push	r30
    1576:	ff 93       	push	r31
    1578:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <overflows>
    157c:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <overflows+0x1>
    1580:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1584:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1588:	c9 01       	movw	r24, r18
    158a:	03 2e       	mov	r0, r19
    158c:	00 0c       	add	r0, r0
    158e:	aa 0b       	sbc	r26, r26
    1590:	bb 0b       	sbc	r27, r27
    1592:	dc 01       	movw	r26, r24
    1594:	99 27       	eor	r25, r25
    1596:	88 27       	eor	r24, r24
    1598:	60 e0       	ldi	r22, 0x00	; 0
    159a:	70 e0       	ldi	r23, 0x00	; 0
    159c:	84 2b       	or	r24, r20
    159e:	95 2b       	or	r25, r21
    15a0:	a6 2b       	or	r26, r22
    15a2:	b7 2b       	or	r27, r23
    15a4:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
    15a8:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
    15ac:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
    15b0:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
    15b4:	b0 9b       	sbis	0x16, 0	; 22
    15b6:	1b c0       	rjmp	.+54     	; 0x15ee <__vector_18+0x98>
    15b8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    15bc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    15c0:	c9 01       	movw	r24, r18
    15c2:	01 96       	adiw	r24, 0x01	; 1
    15c4:	09 2e       	mov	r0, r25
    15c6:	00 0c       	add	r0, r0
    15c8:	aa 0b       	sbc	r26, r26
    15ca:	bb 0b       	sbc	r27, r27
    15cc:	dc 01       	movw	r26, r24
    15ce:	99 27       	eor	r25, r25
    15d0:	88 27       	eor	r24, r24
    15d2:	60 e0       	ldi	r22, 0x00	; 0
    15d4:	70 e0       	ldi	r23, 0x00	; 0
    15d6:	84 2b       	or	r24, r20
    15d8:	95 2b       	or	r25, r21
    15da:	a6 2b       	or	r26, r22
    15dc:	b7 2b       	or	r27, r23
    15de:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
    15e2:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
    15e6:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
    15ea:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
    15ee:	e0 91 54 02 	lds	r30, 0x0254	; 0x800254 <mtable+0x1a>
    15f2:	f0 91 55 02 	lds	r31, 0x0255	; 0x800255 <mtable+0x1b>
    15f6:	30 97       	sbiw	r30, 0x00	; 0
    15f8:	39 f0       	breq	.+14     	; 0x1608 <__vector_18+0xb2>
    15fa:	6d e0       	ldi	r22, 0x0D	; 13
    15fc:	70 e0       	ldi	r23, 0x00	; 0
    15fe:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <otable+0x1a>
    1602:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <otable+0x1b>
    1606:	09 95       	icall
    1608:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <schedule>
    160c:	ff 91       	pop	r31
    160e:	ef 91       	pop	r30
    1610:	bf 91       	pop	r27
    1612:	af 91       	pop	r26
    1614:	9f 91       	pop	r25
    1616:	8f 91       	pop	r24
    1618:	7f 91       	pop	r23
    161a:	6f 91       	pop	r22
    161c:	5f 91       	pop	r21
    161e:	4f 91       	pop	r20
    1620:	3f 91       	pop	r19
    1622:	2f 91       	pop	r18
    1624:	0f 90       	pop	r0
    1626:	0f be       	out	0x3f, r0	; 63
    1628:	0f 90       	pop	r0
    162a:	1f 90       	pop	r1
    162c:	18 95       	reti

0000162e <__vector_19>:
    162e:	1f 92       	push	r1
    1630:	0f 92       	push	r0
    1632:	0f b6       	in	r0, 0x3f	; 63
    1634:	0f 92       	push	r0
    1636:	11 24       	eor	r1, r1
    1638:	2f 93       	push	r18
    163a:	3f 93       	push	r19
    163c:	4f 93       	push	r20
    163e:	5f 93       	push	r21
    1640:	6f 93       	push	r22
    1642:	7f 93       	push	r23
    1644:	8f 93       	push	r24
    1646:	9f 93       	push	r25
    1648:	af 93       	push	r26
    164a:	bf 93       	push	r27
    164c:	ef 93       	push	r30
    164e:	ff 93       	push	r31
    1650:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <overflows>
    1654:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <overflows+0x1>
    1658:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    165c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1660:	c9 01       	movw	r24, r18
    1662:	03 2e       	mov	r0, r19
    1664:	00 0c       	add	r0, r0
    1666:	aa 0b       	sbc	r26, r26
    1668:	bb 0b       	sbc	r27, r27
    166a:	dc 01       	movw	r26, r24
    166c:	99 27       	eor	r25, r25
    166e:	88 27       	eor	r24, r24
    1670:	60 e0       	ldi	r22, 0x00	; 0
    1672:	70 e0       	ldi	r23, 0x00	; 0
    1674:	84 2b       	or	r24, r20
    1676:	95 2b       	or	r25, r21
    1678:	a6 2b       	or	r26, r22
    167a:	b7 2b       	or	r27, r23
    167c:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
    1680:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
    1684:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
    1688:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
    168c:	b0 9b       	sbis	0x16, 0	; 22
    168e:	1b c0       	rjmp	.+54     	; 0x16c6 <__vector_19+0x98>
    1690:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1694:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1698:	c9 01       	movw	r24, r18
    169a:	01 96       	adiw	r24, 0x01	; 1
    169c:	09 2e       	mov	r0, r25
    169e:	00 0c       	add	r0, r0
    16a0:	aa 0b       	sbc	r26, r26
    16a2:	bb 0b       	sbc	r27, r27
    16a4:	dc 01       	movw	r26, r24
    16a6:	99 27       	eor	r25, r25
    16a8:	88 27       	eor	r24, r24
    16aa:	60 e0       	ldi	r22, 0x00	; 0
    16ac:	70 e0       	ldi	r23, 0x00	; 0
    16ae:	84 2b       	or	r24, r20
    16b0:	95 2b       	or	r25, r21
    16b2:	a6 2b       	or	r26, r22
    16b4:	b7 2b       	or	r27, r23
    16b6:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
    16ba:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
    16be:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
    16c2:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
    16c6:	e0 91 56 02 	lds	r30, 0x0256	; 0x800256 <mtable+0x1c>
    16ca:	f0 91 57 02 	lds	r31, 0x0257	; 0x800257 <mtable+0x1d>
    16ce:	30 97       	sbiw	r30, 0x00	; 0
    16d0:	39 f0       	breq	.+14     	; 0x16e0 <__vector_19+0xb2>
    16d2:	6e e0       	ldi	r22, 0x0E	; 14
    16d4:	70 e0       	ldi	r23, 0x00	; 0
    16d6:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <otable+0x1c>
    16da:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <otable+0x1d>
    16de:	09 95       	icall
    16e0:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <schedule>
    16e4:	ff 91       	pop	r31
    16e6:	ef 91       	pop	r30
    16e8:	bf 91       	pop	r27
    16ea:	af 91       	pop	r26
    16ec:	9f 91       	pop	r25
    16ee:	8f 91       	pop	r24
    16f0:	7f 91       	pop	r23
    16f2:	6f 91       	pop	r22
    16f4:	5f 91       	pop	r21
    16f6:	4f 91       	pop	r20
    16f8:	3f 91       	pop	r19
    16fa:	2f 91       	pop	r18
    16fc:	0f 90       	pop	r0
    16fe:	0f be       	out	0x3f, r0	; 63
    1700:	0f 90       	pop	r0
    1702:	1f 90       	pop	r1
    1704:	18 95       	reti

00001706 <__vector_20>:
    1706:	1f 92       	push	r1
    1708:	0f 92       	push	r0
    170a:	0f b6       	in	r0, 0x3f	; 63
    170c:	0f 92       	push	r0
    170e:	11 24       	eor	r1, r1
    1710:	2f 93       	push	r18
    1712:	3f 93       	push	r19
    1714:	4f 93       	push	r20
    1716:	5f 93       	push	r21
    1718:	6f 93       	push	r22
    171a:	7f 93       	push	r23
    171c:	8f 93       	push	r24
    171e:	9f 93       	push	r25
    1720:	af 93       	push	r26
    1722:	bf 93       	push	r27
    1724:	ef 93       	push	r30
    1726:	ff 93       	push	r31
    1728:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <overflows>
    172c:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <overflows+0x1>
    1730:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1734:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1738:	c9 01       	movw	r24, r18
    173a:	03 2e       	mov	r0, r19
    173c:	00 0c       	add	r0, r0
    173e:	aa 0b       	sbc	r26, r26
    1740:	bb 0b       	sbc	r27, r27
    1742:	dc 01       	movw	r26, r24
    1744:	99 27       	eor	r25, r25
    1746:	88 27       	eor	r24, r24
    1748:	60 e0       	ldi	r22, 0x00	; 0
    174a:	70 e0       	ldi	r23, 0x00	; 0
    174c:	84 2b       	or	r24, r20
    174e:	95 2b       	or	r25, r21
    1750:	a6 2b       	or	r26, r22
    1752:	b7 2b       	or	r27, r23
    1754:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
    1758:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
    175c:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
    1760:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
    1764:	b0 9b       	sbis	0x16, 0	; 22
    1766:	1b c0       	rjmp	.+54     	; 0x179e <__vector_20+0x98>
    1768:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    176c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1770:	c9 01       	movw	r24, r18
    1772:	01 96       	adiw	r24, 0x01	; 1
    1774:	09 2e       	mov	r0, r25
    1776:	00 0c       	add	r0, r0
    1778:	aa 0b       	sbc	r26, r26
    177a:	bb 0b       	sbc	r27, r27
    177c:	dc 01       	movw	r26, r24
    177e:	99 27       	eor	r25, r25
    1780:	88 27       	eor	r24, r24
    1782:	60 e0       	ldi	r22, 0x00	; 0
    1784:	70 e0       	ldi	r23, 0x00	; 0
    1786:	84 2b       	or	r24, r20
    1788:	95 2b       	or	r25, r21
    178a:	a6 2b       	or	r26, r22
    178c:	b7 2b       	or	r27, r23
    178e:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
    1792:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
    1796:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
    179a:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
    179e:	e0 91 58 02 	lds	r30, 0x0258	; 0x800258 <mtable+0x1e>
    17a2:	f0 91 59 02 	lds	r31, 0x0259	; 0x800259 <mtable+0x1f>
    17a6:	30 97       	sbiw	r30, 0x00	; 0
    17a8:	39 f0       	breq	.+14     	; 0x17b8 <__vector_20+0xb2>
    17aa:	6f e0       	ldi	r22, 0x0F	; 15
    17ac:	70 e0       	ldi	r23, 0x00	; 0
    17ae:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <otable+0x1e>
    17b2:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <otable+0x1f>
    17b6:	09 95       	icall
    17b8:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <schedule>
    17bc:	ff 91       	pop	r31
    17be:	ef 91       	pop	r30
    17c0:	bf 91       	pop	r27
    17c2:	af 91       	pop	r26
    17c4:	9f 91       	pop	r25
    17c6:	8f 91       	pop	r24
    17c8:	7f 91       	pop	r23
    17ca:	6f 91       	pop	r22
    17cc:	5f 91       	pop	r21
    17ce:	4f 91       	pop	r20
    17d0:	3f 91       	pop	r19
    17d2:	2f 91       	pop	r18
    17d4:	0f 90       	pop	r0
    17d6:	0f be       	out	0x3f, r0	; 63
    17d8:	0f 90       	pop	r0
    17da:	1f 90       	pop	r1
    17dc:	18 95       	reti

000017de <__vector_21>:
    17de:	1f 92       	push	r1
    17e0:	0f 92       	push	r0
    17e2:	0f b6       	in	r0, 0x3f	; 63
    17e4:	0f 92       	push	r0
    17e6:	11 24       	eor	r1, r1
    17e8:	2f 93       	push	r18
    17ea:	3f 93       	push	r19
    17ec:	4f 93       	push	r20
    17ee:	5f 93       	push	r21
    17f0:	6f 93       	push	r22
    17f2:	7f 93       	push	r23
    17f4:	8f 93       	push	r24
    17f6:	9f 93       	push	r25
    17f8:	af 93       	push	r26
    17fa:	bf 93       	push	r27
    17fc:	ef 93       	push	r30
    17fe:	ff 93       	push	r31
    1800:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <overflows>
    1804:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <overflows+0x1>
    1808:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    180c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1810:	c9 01       	movw	r24, r18
    1812:	03 2e       	mov	r0, r19
    1814:	00 0c       	add	r0, r0
    1816:	aa 0b       	sbc	r26, r26
    1818:	bb 0b       	sbc	r27, r27
    181a:	dc 01       	movw	r26, r24
    181c:	99 27       	eor	r25, r25
    181e:	88 27       	eor	r24, r24
    1820:	60 e0       	ldi	r22, 0x00	; 0
    1822:	70 e0       	ldi	r23, 0x00	; 0
    1824:	84 2b       	or	r24, r20
    1826:	95 2b       	or	r25, r21
    1828:	a6 2b       	or	r26, r22
    182a:	b7 2b       	or	r27, r23
    182c:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
    1830:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
    1834:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
    1838:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
    183c:	b0 9b       	sbis	0x16, 0	; 22
    183e:	1b c0       	rjmp	.+54     	; 0x1876 <__vector_21+0x98>
    1840:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1844:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1848:	c9 01       	movw	r24, r18
    184a:	01 96       	adiw	r24, 0x01	; 1
    184c:	09 2e       	mov	r0, r25
    184e:	00 0c       	add	r0, r0
    1850:	aa 0b       	sbc	r26, r26
    1852:	bb 0b       	sbc	r27, r27
    1854:	dc 01       	movw	r26, r24
    1856:	99 27       	eor	r25, r25
    1858:	88 27       	eor	r24, r24
    185a:	60 e0       	ldi	r22, 0x00	; 0
    185c:	70 e0       	ldi	r23, 0x00	; 0
    185e:	84 2b       	or	r24, r20
    1860:	95 2b       	or	r25, r21
    1862:	a6 2b       	or	r26, r22
    1864:	b7 2b       	or	r27, r23
    1866:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
    186a:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
    186e:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
    1872:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
    1876:	e0 91 5a 02 	lds	r30, 0x025A	; 0x80025a <mtable+0x20>
    187a:	f0 91 5b 02 	lds	r31, 0x025B	; 0x80025b <mtable+0x21>
    187e:	30 97       	sbiw	r30, 0x00	; 0
    1880:	39 f0       	breq	.+14     	; 0x1890 <__vector_21+0xb2>
    1882:	60 e1       	ldi	r22, 0x10	; 16
    1884:	70 e0       	ldi	r23, 0x00	; 0
    1886:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <otable+0x20>
    188a:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <otable+0x21>
    188e:	09 95       	icall
    1890:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <schedule>
    1894:	ff 91       	pop	r31
    1896:	ef 91       	pop	r30
    1898:	bf 91       	pop	r27
    189a:	af 91       	pop	r26
    189c:	9f 91       	pop	r25
    189e:	8f 91       	pop	r24
    18a0:	7f 91       	pop	r23
    18a2:	6f 91       	pop	r22
    18a4:	5f 91       	pop	r21
    18a6:	4f 91       	pop	r20
    18a8:	3f 91       	pop	r19
    18aa:	2f 91       	pop	r18
    18ac:	0f 90       	pop	r0
    18ae:	0f be       	out	0x3f, r0	; 63
    18b0:	0f 90       	pop	r0
    18b2:	1f 90       	pop	r1
    18b4:	18 95       	reti

000018b6 <__vector_22>:
    18b6:	1f 92       	push	r1
    18b8:	0f 92       	push	r0
    18ba:	0f b6       	in	r0, 0x3f	; 63
    18bc:	0f 92       	push	r0
    18be:	11 24       	eor	r1, r1
    18c0:	2f 93       	push	r18
    18c2:	3f 93       	push	r19
    18c4:	4f 93       	push	r20
    18c6:	5f 93       	push	r21
    18c8:	6f 93       	push	r22
    18ca:	7f 93       	push	r23
    18cc:	8f 93       	push	r24
    18ce:	9f 93       	push	r25
    18d0:	af 93       	push	r26
    18d2:	bf 93       	push	r27
    18d4:	ef 93       	push	r30
    18d6:	ff 93       	push	r31
    18d8:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <overflows>
    18dc:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <overflows+0x1>
    18e0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    18e4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    18e8:	c9 01       	movw	r24, r18
    18ea:	03 2e       	mov	r0, r19
    18ec:	00 0c       	add	r0, r0
    18ee:	aa 0b       	sbc	r26, r26
    18f0:	bb 0b       	sbc	r27, r27
    18f2:	dc 01       	movw	r26, r24
    18f4:	99 27       	eor	r25, r25
    18f6:	88 27       	eor	r24, r24
    18f8:	60 e0       	ldi	r22, 0x00	; 0
    18fa:	70 e0       	ldi	r23, 0x00	; 0
    18fc:	84 2b       	or	r24, r20
    18fe:	95 2b       	or	r25, r21
    1900:	a6 2b       	or	r26, r22
    1902:	b7 2b       	or	r27, r23
    1904:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
    1908:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
    190c:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
    1910:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
    1914:	b0 9b       	sbis	0x16, 0	; 22
    1916:	1b c0       	rjmp	.+54     	; 0x194e <__vector_22+0x98>
    1918:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    191c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1920:	c9 01       	movw	r24, r18
    1922:	01 96       	adiw	r24, 0x01	; 1
    1924:	09 2e       	mov	r0, r25
    1926:	00 0c       	add	r0, r0
    1928:	aa 0b       	sbc	r26, r26
    192a:	bb 0b       	sbc	r27, r27
    192c:	dc 01       	movw	r26, r24
    192e:	99 27       	eor	r25, r25
    1930:	88 27       	eor	r24, r24
    1932:	60 e0       	ldi	r22, 0x00	; 0
    1934:	70 e0       	ldi	r23, 0x00	; 0
    1936:	84 2b       	or	r24, r20
    1938:	95 2b       	or	r25, r21
    193a:	a6 2b       	or	r26, r22
    193c:	b7 2b       	or	r27, r23
    193e:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timestamp>
    1942:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timestamp+0x1>
    1946:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timestamp+0x2>
    194a:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timestamp+0x3>
    194e:	e0 91 5c 02 	lds	r30, 0x025C	; 0x80025c <mtable+0x22>
    1952:	f0 91 5d 02 	lds	r31, 0x025D	; 0x80025d <mtable+0x23>
    1956:	30 97       	sbiw	r30, 0x00	; 0
    1958:	39 f0       	breq	.+14     	; 0x1968 <__vector_22+0xb2>
    195a:	61 e1       	ldi	r22, 0x11	; 17
    195c:	70 e0       	ldi	r23, 0x00	; 0
    195e:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <otable+0x22>
    1962:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <otable+0x23>
    1966:	09 95       	icall
    1968:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <schedule>
    196c:	ff 91       	pop	r31
    196e:	ef 91       	pop	r30
    1970:	bf 91       	pop	r27
    1972:	af 91       	pop	r26
    1974:	9f 91       	pop	r25
    1976:	8f 91       	pop	r24
    1978:	7f 91       	pop	r23
    197a:	6f 91       	pop	r22
    197c:	5f 91       	pop	r21
    197e:	4f 91       	pop	r20
    1980:	3f 91       	pop	r19
    1982:	2f 91       	pop	r18
    1984:	0f 90       	pop	r0
    1986:	0f be       	out	0x3f, r0	; 63
    1988:	0f 90       	pop	r0
    198a:	1f 90       	pop	r1
    198c:	18 95       	reti

0000198e <enqueueByDeadline>:
    198e:	ef 92       	push	r14
    1990:	ff 92       	push	r15
    1992:	0f 93       	push	r16
    1994:	1f 93       	push	r17
    1996:	cf 93       	push	r28
    1998:	df 93       	push	r29
    199a:	7b 01       	movw	r14, r22
    199c:	eb 01       	movw	r28, r22
    199e:	a8 81       	ld	r26, Y
    19a0:	b9 81       	ldd	r27, Y+1	; 0x01
    19a2:	10 97       	sbiw	r26, 0x00	; 0
    19a4:	61 f1       	breq	.+88     	; 0x19fe <enqueueByDeadline+0x70>
    19a6:	fc 01       	movw	r30, r24
    19a8:	06 81       	ldd	r16, Z+6	; 0x06
    19aa:	17 81       	ldd	r17, Z+7	; 0x07
    19ac:	20 85       	ldd	r18, Z+8	; 0x08
    19ae:	31 85       	ldd	r19, Z+9	; 0x09
    19b0:	16 96       	adiw	r26, 0x06	; 6
    19b2:	4d 91       	ld	r20, X+
    19b4:	5d 91       	ld	r21, X+
    19b6:	6d 91       	ld	r22, X+
    19b8:	7c 91       	ld	r23, X
    19ba:	19 97       	sbiw	r26, 0x09	; 9
    19bc:	04 17       	cp	r16, r20
    19be:	15 07       	cpc	r17, r21
    19c0:	26 07       	cpc	r18, r22
    19c2:	37 07       	cpc	r19, r23
    19c4:	14 f4       	brge	.+4      	; 0x19ca <enqueueByDeadline+0x3c>
    19c6:	1b c0       	rjmp	.+54     	; 0x19fe <enqueueByDeadline+0x70>
    19c8:	df 01       	movw	r26, r30
    19ca:	ed 91       	ld	r30, X+
    19cc:	fc 91       	ld	r31, X
    19ce:	11 97       	sbiw	r26, 0x01	; 1
    19d0:	30 97       	sbiw	r30, 0x00	; 0
    19d2:	49 f0       	breq	.+18     	; 0x19e6 <enqueueByDeadline+0x58>
    19d4:	46 81       	ldd	r20, Z+6	; 0x06
    19d6:	57 81       	ldd	r21, Z+7	; 0x07
    19d8:	60 85       	ldd	r22, Z+8	; 0x08
    19da:	71 85       	ldd	r23, Z+9	; 0x09
    19dc:	04 17       	cp	r16, r20
    19de:	15 07       	cpc	r17, r21
    19e0:	26 07       	cpc	r18, r22
    19e2:	37 07       	cpc	r19, r23
    19e4:	8c f7       	brge	.-30     	; 0x19c8 <enqueueByDeadline+0x3a>
    19e6:	ec 01       	movw	r28, r24
    19e8:	f9 83       	std	Y+1, r31	; 0x01
    19ea:	e8 83       	st	Y, r30
    19ec:	10 97       	sbiw	r26, 0x00	; 0
    19ee:	21 f4       	brne	.+8      	; 0x19f8 <enqueueByDeadline+0x6a>
    19f0:	f7 01       	movw	r30, r14
    19f2:	91 83       	std	Z+1, r25	; 0x01
    19f4:	80 83       	st	Z, r24
    19f6:	07 c0       	rjmp	.+14     	; 0x1a06 <enqueueByDeadline+0x78>
    19f8:	8d 93       	st	X+, r24
    19fa:	9c 93       	st	X, r25
    19fc:	04 c0       	rjmp	.+8      	; 0x1a06 <enqueueByDeadline+0x78>
    19fe:	ec 01       	movw	r28, r24
    1a00:	b9 83       	std	Y+1, r27	; 0x01
    1a02:	a8 83       	st	Y, r26
    1a04:	f5 cf       	rjmp	.-22     	; 0x19f0 <enqueueByDeadline+0x62>
    1a06:	df 91       	pop	r29
    1a08:	cf 91       	pop	r28
    1a0a:	1f 91       	pop	r17
    1a0c:	0f 91       	pop	r16
    1a0e:	ff 90       	pop	r15
    1a10:	ef 90       	pop	r14
    1a12:	08 95       	ret

00001a14 <enqueueByBaseline>:
    1a14:	ef 92       	push	r14
    1a16:	ff 92       	push	r15
    1a18:	0f 93       	push	r16
    1a1a:	1f 93       	push	r17
    1a1c:	cf 93       	push	r28
    1a1e:	df 93       	push	r29
    1a20:	7b 01       	movw	r14, r22
    1a22:	eb 01       	movw	r28, r22
    1a24:	a8 81       	ld	r26, Y
    1a26:	b9 81       	ldd	r27, Y+1	; 0x01
    1a28:	10 97       	sbiw	r26, 0x00	; 0
    1a2a:	61 f1       	breq	.+88     	; 0x1a84 <enqueueByBaseline+0x70>
    1a2c:	fc 01       	movw	r30, r24
    1a2e:	02 81       	ldd	r16, Z+2	; 0x02
    1a30:	13 81       	ldd	r17, Z+3	; 0x03
    1a32:	24 81       	ldd	r18, Z+4	; 0x04
    1a34:	35 81       	ldd	r19, Z+5	; 0x05
    1a36:	12 96       	adiw	r26, 0x02	; 2
    1a38:	4d 91       	ld	r20, X+
    1a3a:	5d 91       	ld	r21, X+
    1a3c:	6d 91       	ld	r22, X+
    1a3e:	7c 91       	ld	r23, X
    1a40:	15 97       	sbiw	r26, 0x05	; 5
    1a42:	04 17       	cp	r16, r20
    1a44:	15 07       	cpc	r17, r21
    1a46:	26 07       	cpc	r18, r22
    1a48:	37 07       	cpc	r19, r23
    1a4a:	14 f4       	brge	.+4      	; 0x1a50 <enqueueByBaseline+0x3c>
    1a4c:	1b c0       	rjmp	.+54     	; 0x1a84 <enqueueByBaseline+0x70>
    1a4e:	df 01       	movw	r26, r30
    1a50:	ed 91       	ld	r30, X+
    1a52:	fc 91       	ld	r31, X
    1a54:	11 97       	sbiw	r26, 0x01	; 1
    1a56:	30 97       	sbiw	r30, 0x00	; 0
    1a58:	49 f0       	breq	.+18     	; 0x1a6c <enqueueByBaseline+0x58>
    1a5a:	42 81       	ldd	r20, Z+2	; 0x02
    1a5c:	53 81       	ldd	r21, Z+3	; 0x03
    1a5e:	64 81       	ldd	r22, Z+4	; 0x04
    1a60:	75 81       	ldd	r23, Z+5	; 0x05
    1a62:	04 17       	cp	r16, r20
    1a64:	15 07       	cpc	r17, r21
    1a66:	26 07       	cpc	r18, r22
    1a68:	37 07       	cpc	r19, r23
    1a6a:	8c f7       	brge	.-30     	; 0x1a4e <enqueueByBaseline+0x3a>
    1a6c:	ec 01       	movw	r28, r24
    1a6e:	f9 83       	std	Y+1, r31	; 0x01
    1a70:	e8 83       	st	Y, r30
    1a72:	10 97       	sbiw	r26, 0x00	; 0
    1a74:	21 f4       	brne	.+8      	; 0x1a7e <enqueueByBaseline+0x6a>
    1a76:	f7 01       	movw	r30, r14
    1a78:	91 83       	std	Z+1, r25	; 0x01
    1a7a:	80 83       	st	Z, r24
    1a7c:	07 c0       	rjmp	.+14     	; 0x1a8c <enqueueByBaseline+0x78>
    1a7e:	8d 93       	st	X+, r24
    1a80:	9c 93       	st	X, r25
    1a82:	04 c0       	rjmp	.+8      	; 0x1a8c <enqueueByBaseline+0x78>
    1a84:	ec 01       	movw	r28, r24
    1a86:	b9 83       	std	Y+1, r27	; 0x01
    1a88:	a8 83       	st	Y, r26
    1a8a:	f5 cf       	rjmp	.-22     	; 0x1a76 <enqueueByBaseline+0x62>
    1a8c:	df 91       	pop	r29
    1a8e:	cf 91       	pop	r28
    1a90:	1f 91       	pop	r17
    1a92:	0f 91       	pop	r16
    1a94:	ff 90       	pop	r15
    1a96:	ef 90       	pop	r14
    1a98:	08 95       	ret

00001a9a <dequeue>:
    1a9a:	dc 01       	movw	r26, r24
    1a9c:	ed 91       	ld	r30, X+
    1a9e:	fc 91       	ld	r31, X
    1aa0:	11 97       	sbiw	r26, 0x01	; 1
    1aa2:	30 97       	sbiw	r30, 0x00	; 0
    1aa4:	59 f4       	brne	.+22     	; 0x1abc <dequeue+0x22>
    1aa6:	8f ef       	ldi	r24, 0xFF	; 255
    1aa8:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
    1aac:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
    1ab0:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
    1ab6:	83 bf       	out	0x33, r24	; 51
    1ab8:	88 95       	sleep
    1aba:	fd cf       	rjmp	.-6      	; 0x1ab6 <dequeue+0x1c>
    1abc:	20 81       	ld	r18, Z
    1abe:	31 81       	ldd	r19, Z+1	; 0x01
    1ac0:	2d 93       	st	X+, r18
    1ac2:	3c 93       	st	X, r19
    1ac4:	cf 01       	movw	r24, r30
    1ac6:	08 95       	ret

00001ac8 <__vector_9>:
    1ac8:	1f 92       	push	r1
    1aca:	0f 92       	push	r0
    1acc:	0f b6       	in	r0, 0x3f	; 63
    1ace:	0f 92       	push	r0
    1ad0:	11 24       	eor	r1, r1
    1ad2:	2f 93       	push	r18
    1ad4:	3f 93       	push	r19
    1ad6:	4f 93       	push	r20
    1ad8:	5f 93       	push	r21
    1ada:	6f 93       	push	r22
    1adc:	7f 93       	push	r23
    1ade:	8f 93       	push	r24
    1ae0:	9f 93       	push	r25
    1ae2:	ef 93       	push	r30
    1ae4:	ff 93       	push	r31
    1ae6:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <overflows>
    1aea:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <overflows+0x1>
    1aee:	01 96       	adiw	r24, 0x01	; 1
    1af0:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <overflows+0x1>
    1af4:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <overflows>
    1af8:	e0 91 9e 01 	lds	r30, 0x019E	; 0x80019e <timerQ>
    1afc:	f0 91 9f 01 	lds	r31, 0x019F	; 0x80019f <timerQ+0x1>
    1b00:	30 97       	sbiw	r30, 0x00	; 0
    1b02:	01 f1       	breq	.+64     	; 0x1b44 <__vector_9+0x7c>
    1b04:	42 81       	ldd	r20, Z+2	; 0x02
    1b06:	53 81       	ldd	r21, Z+3	; 0x03
    1b08:	64 81       	ldd	r22, Z+4	; 0x04
    1b0a:	75 81       	ldd	r23, Z+5	; 0x05
    1b0c:	86 17       	cp	r24, r22
    1b0e:	97 07       	cpc	r25, r23
    1b10:	c9 f4       	brne	.+50     	; 0x1b44 <__vector_9+0x7c>
    1b12:	ca 01       	movw	r24, r20
    1b14:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1b18:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1b1c:	42 1b       	sub	r20, r18
    1b1e:	53 0b       	sbc	r21, r19
    1b20:	41 30       	cpi	r20, 0x01	; 1
    1b22:	51 05       	cpc	r21, r1
    1b24:	29 f4       	brne	.+10     	; 0x1b30 <__vector_9+0x68>
    1b26:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1b2a:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1b2e:	01 96       	adiw	r24, 0x01	; 1
    1b30:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1b34:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1b38:	ef e6       	ldi	r30, 0x6F	; 111
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	80 81       	ld	r24, Z
    1b3e:	82 60       	ori	r24, 0x02	; 2
    1b40:	80 83       	st	Z, r24
    1b42:	05 c0       	rjmp	.+10     	; 0x1b4e <__vector_9+0x86>
    1b44:	ef e6       	ldi	r30, 0x6F	; 111
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	80 81       	ld	r24, Z
    1b4a:	8d 7f       	andi	r24, 0xFD	; 253
    1b4c:	80 83       	st	Z, r24
    1b4e:	ff 91       	pop	r31
    1b50:	ef 91       	pop	r30
    1b52:	9f 91       	pop	r25
    1b54:	8f 91       	pop	r24
    1b56:	7f 91       	pop	r23
    1b58:	6f 91       	pop	r22
    1b5a:	5f 91       	pop	r21
    1b5c:	4f 91       	pop	r20
    1b5e:	3f 91       	pop	r19
    1b60:	2f 91       	pop	r18
    1b62:	0f 90       	pop	r0
    1b64:	0f be       	out	0x3f, r0	; 63
    1b66:	0f 90       	pop	r0
    1b68:	1f 90       	pop	r1
    1b6a:	18 95       	reti

00001b6c <__vector_7>:
    1b6c:	1f 92       	push	r1
    1b6e:	0f 92       	push	r0
    1b70:	0f b6       	in	r0, 0x3f	; 63
    1b72:	0f 92       	push	r0
    1b74:	11 24       	eor	r1, r1
    1b76:	cf 92       	push	r12
    1b78:	df 92       	push	r13
    1b7a:	ef 92       	push	r14
    1b7c:	ff 92       	push	r15
    1b7e:	2f 93       	push	r18
    1b80:	3f 93       	push	r19
    1b82:	4f 93       	push	r20
    1b84:	5f 93       	push	r21
    1b86:	6f 93       	push	r22
    1b88:	7f 93       	push	r23
    1b8a:	8f 93       	push	r24
    1b8c:	9f 93       	push	r25
    1b8e:	af 93       	push	r26
    1b90:	bf 93       	push	r27
    1b92:	ef 93       	push	r30
    1b94:	ff 93       	push	r31
    1b96:	c0 90 98 01 	lds	r12, 0x0198	; 0x800198 <overflows>
    1b9a:	d0 90 99 01 	lds	r13, 0x0199	; 0x800199 <overflows+0x1>
    1b9e:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1ba2:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1ba6:	b0 99       	sbic	0x16, 0	; 22
    1ba8:	0f c0       	rjmp	.+30     	; 0x1bc8 <__vector_7+0x5c>
    1baa:	0d 2c       	mov	r0, r13
    1bac:	00 0c       	add	r0, r0
    1bae:	ee 08       	sbc	r14, r14
    1bb0:	ff 08       	sbc	r15, r15
    1bb2:	d6 01       	movw	r26, r12
    1bb4:	99 27       	eor	r25, r25
    1bb6:	88 27       	eor	r24, r24
    1bb8:	69 01       	movw	r12, r18
    1bba:	e1 2c       	mov	r14, r1
    1bbc:	f1 2c       	mov	r15, r1
    1bbe:	c8 2a       	or	r12, r24
    1bc0:	d9 2a       	or	r13, r25
    1bc2:	ea 2a       	or	r14, r26
    1bc4:	fb 2a       	or	r15, r27
    1bc6:	15 c0       	rjmp	.+42     	; 0x1bf2 <__vector_7+0x86>
    1bc8:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1bcc:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1bd0:	8f ef       	ldi	r24, 0xFF	; 255
    1bd2:	c8 1a       	sub	r12, r24
    1bd4:	d8 0a       	sbc	r13, r24
    1bd6:	0d 2c       	mov	r0, r13
    1bd8:	00 0c       	add	r0, r0
    1bda:	ee 08       	sbc	r14, r14
    1bdc:	ff 08       	sbc	r15, r15
    1bde:	d6 01       	movw	r26, r12
    1be0:	99 27       	eor	r25, r25
    1be2:	88 27       	eor	r24, r24
    1be4:	69 01       	movw	r12, r18
    1be6:	e1 2c       	mov	r14, r1
    1be8:	f1 2c       	mov	r15, r1
    1bea:	c8 2a       	or	r12, r24
    1bec:	d9 2a       	or	r13, r25
    1bee:	ea 2a       	or	r14, r26
    1bf0:	fb 2a       	or	r15, r27
    1bf2:	e0 91 9e 01 	lds	r30, 0x019E	; 0x80019e <timerQ>
    1bf6:	f0 91 9f 01 	lds	r31, 0x019F	; 0x80019f <timerQ+0x1>
    1bfa:	30 97       	sbiw	r30, 0x00	; 0
    1bfc:	09 f4       	brne	.+2      	; 0x1c00 <__vector_7+0x94>
    1bfe:	42 c0       	rjmp	.+132    	; 0x1c84 <__vector_7+0x118>
    1c00:	82 81       	ldd	r24, Z+2	; 0x02
    1c02:	93 81       	ldd	r25, Z+3	; 0x03
    1c04:	a4 81       	ldd	r26, Z+4	; 0x04
    1c06:	b5 81       	ldd	r27, Z+5	; 0x05
    1c08:	8c 19       	sub	r24, r12
    1c0a:	9d 09       	sbc	r25, r13
    1c0c:	ae 09       	sbc	r26, r14
    1c0e:	bf 09       	sbc	r27, r15
    1c10:	18 16       	cp	r1, r24
    1c12:	19 06       	cpc	r1, r25
    1c14:	1a 06       	cpc	r1, r26
    1c16:	1b 06       	cpc	r1, r27
    1c18:	ec f1       	brlt	.+122    	; 0x1c94 <__vector_7+0x128>
    1c1a:	8e e9       	ldi	r24, 0x9E	; 158
    1c1c:	91 e0       	ldi	r25, 0x01	; 1
    1c1e:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <dequeue>
    1c22:	60 ea       	ldi	r22, 0xA0	; 160
    1c24:	71 e0       	ldi	r23, 0x01	; 1
    1c26:	0e 94 c7 0c 	call	0x198e	; 0x198e <enqueueByDeadline>
    1c2a:	e0 91 9e 01 	lds	r30, 0x019E	; 0x80019e <timerQ>
    1c2e:	f0 91 9f 01 	lds	r31, 0x019F	; 0x80019f <timerQ+0x1>
    1c32:	30 97       	sbiw	r30, 0x00	; 0
    1c34:	39 f1       	breq	.+78     	; 0x1c84 <__vector_7+0x118>
    1c36:	82 81       	ldd	r24, Z+2	; 0x02
    1c38:	93 81       	ldd	r25, Z+3	; 0x03
    1c3a:	a4 81       	ldd	r26, Z+4	; 0x04
    1c3c:	b5 81       	ldd	r27, Z+5	; 0x05
    1c3e:	8c 19       	sub	r24, r12
    1c40:	9d 09       	sbc	r25, r13
    1c42:	ae 09       	sbc	r26, r14
    1c44:	bf 09       	sbc	r27, r15
    1c46:	18 16       	cp	r1, r24
    1c48:	19 06       	cpc	r1, r25
    1c4a:	1a 06       	cpc	r1, r26
    1c4c:	1b 06       	cpc	r1, r27
    1c4e:	2c f7       	brge	.-54     	; 0x1c1a <__vector_7+0xae>
    1c50:	21 c0       	rjmp	.+66     	; 0x1c94 <__vector_7+0x128>
    1c52:	9c 01       	movw	r18, r24
    1c54:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1c58:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1c5c:	84 1b       	sub	r24, r20
    1c5e:	95 0b       	sbc	r25, r21
    1c60:	01 97       	sbiw	r24, 0x01	; 1
    1c62:	31 f4       	brne	.+12     	; 0x1c70 <__vector_7+0x104>
    1c64:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1c68:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1c6c:	2f 5f       	subi	r18, 0xFF	; 255
    1c6e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c70:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1c74:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1c78:	ef e6       	ldi	r30, 0x6F	; 111
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	80 81       	ld	r24, Z
    1c7e:	82 60       	ori	r24, 0x02	; 2
    1c80:	80 83       	st	Z, r24
    1c82:	05 c0       	rjmp	.+10     	; 0x1c8e <__vector_7+0x122>
    1c84:	ef e6       	ldi	r30, 0x6F	; 111
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	80 81       	ld	r24, Z
    1c8a:	8d 7f       	andi	r24, 0xFD	; 253
    1c8c:	80 83       	st	Z, r24
    1c8e:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <schedule>
    1c92:	0c c0       	rjmp	.+24     	; 0x1cac <__vector_7+0x140>
    1c94:	82 81       	ldd	r24, Z+2	; 0x02
    1c96:	93 81       	ldd	r25, Z+3	; 0x03
    1c98:	a4 81       	ldd	r26, Z+4	; 0x04
    1c9a:	b5 81       	ldd	r27, Z+5	; 0x05
    1c9c:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <overflows>
    1ca0:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <overflows+0x1>
    1ca4:	2a 17       	cp	r18, r26
    1ca6:	3b 07       	cpc	r19, r27
    1ca8:	69 f7       	brne	.-38     	; 0x1c84 <__vector_7+0x118>
    1caa:	d3 cf       	rjmp	.-90     	; 0x1c52 <__vector_7+0xe6>
    1cac:	ff 91       	pop	r31
    1cae:	ef 91       	pop	r30
    1cb0:	bf 91       	pop	r27
    1cb2:	af 91       	pop	r26
    1cb4:	9f 91       	pop	r25
    1cb6:	8f 91       	pop	r24
    1cb8:	7f 91       	pop	r23
    1cba:	6f 91       	pop	r22
    1cbc:	5f 91       	pop	r21
    1cbe:	4f 91       	pop	r20
    1cc0:	3f 91       	pop	r19
    1cc2:	2f 91       	pop	r18
    1cc4:	ff 90       	pop	r15
    1cc6:	ef 90       	pop	r14
    1cc8:	df 90       	pop	r13
    1cca:	cf 90       	pop	r12
    1ccc:	0f 90       	pop	r0
    1cce:	0f be       	out	0x3f, r0	; 63
    1cd0:	0f 90       	pop	r0
    1cd2:	1f 90       	pop	r1
    1cd4:	18 95       	reti

00001cd6 <async>:
    1cd6:	3f 92       	push	r3
    1cd8:	4f 92       	push	r4
    1cda:	5f 92       	push	r5
    1cdc:	6f 92       	push	r6
    1cde:	7f 92       	push	r7
    1ce0:	8f 92       	push	r8
    1ce2:	9f 92       	push	r9
    1ce4:	af 92       	push	r10
    1ce6:	bf 92       	push	r11
    1ce8:	cf 92       	push	r12
    1cea:	df 92       	push	r13
    1cec:	ef 92       	push	r14
    1cee:	ff 92       	push	r15
    1cf0:	0f 93       	push	r16
    1cf2:	1f 93       	push	r17
    1cf4:	cf 93       	push	r28
    1cf6:	df 93       	push	r29
    1cf8:	2b 01       	movw	r4, r22
    1cfa:	3c 01       	movw	r6, r24
    1cfc:	49 01       	movw	r8, r18
    1cfe:	5a 01       	movw	r10, r20
    1d00:	8f b7       	in	r24, 0x3f	; 63
    1d02:	80 78       	andi	r24, 0x80	; 128
    1d04:	38 2e       	mov	r3, r24
    1d06:	f8 94       	cli
    1d08:	89 e8       	ldi	r24, 0x89	; 137
    1d0a:	91 e0       	ldi	r25, 0x01	; 1
    1d0c:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <dequeue>
    1d10:	ec 01       	movw	r28, r24
    1d12:	1b 87       	std	Y+11, r17	; 0x0b
    1d14:	0a 87       	std	Y+10, r16	; 0x0a
    1d16:	fd 86       	std	Y+13, r15	; 0x0d
    1d18:	ec 86       	std	Y+12, r14	; 0x0c
    1d1a:	df 86       	std	Y+15, r13	; 0x0f
    1d1c:	ce 86       	std	Y+14, r12	; 0x0e
    1d1e:	33 20       	and	r3, r3
    1d20:	61 f0       	breq	.+24     	; 0x1d3a <async+0x64>
    1d22:	e0 91 83 01 	lds	r30, 0x0183	; 0x800183 <current>
    1d26:	f0 91 84 01 	lds	r31, 0x0184	; 0x800184 <current+0x1>
    1d2a:	02 80       	ldd	r0, Z+2	; 0x02
    1d2c:	f3 81       	ldd	r31, Z+3	; 0x03
    1d2e:	e0 2d       	mov	r30, r0
    1d30:	82 81       	ldd	r24, Z+2	; 0x02
    1d32:	93 81       	ldd	r25, Z+3	; 0x03
    1d34:	a4 81       	ldd	r26, Z+4	; 0x04
    1d36:	b5 81       	ldd	r27, Z+5	; 0x05
    1d38:	08 c0       	rjmp	.+16     	; 0x1d4a <async+0x74>
    1d3a:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <timestamp>
    1d3e:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <timestamp+0x1>
    1d42:	a0 91 9c 01 	lds	r26, 0x019C	; 0x80019c <timestamp+0x2>
    1d46:	b0 91 9d 01 	lds	r27, 0x019D	; 0x80019d <timestamp+0x3>
    1d4a:	48 0e       	add	r4, r24
    1d4c:	59 1e       	adc	r5, r25
    1d4e:	6a 1e       	adc	r6, r26
    1d50:	7b 1e       	adc	r7, r27
    1d52:	4a 82       	std	Y+2, r4	; 0x02
    1d54:	5b 82       	std	Y+3, r5	; 0x03
    1d56:	6c 82       	std	Y+4, r6	; 0x04
    1d58:	7d 82       	std	Y+5, r7	; 0x05
    1d5a:	18 14       	cp	r1, r8
    1d5c:	19 04       	cpc	r1, r9
    1d5e:	1a 04       	cpc	r1, r10
    1d60:	1b 04       	cpc	r1, r11
    1d62:	44 f0       	brlt	.+16     	; 0x1d74 <async+0x9e>
    1d64:	0f 2e       	mov	r0, r31
    1d66:	88 24       	eor	r8, r8
    1d68:	8a 94       	dec	r8
    1d6a:	98 2c       	mov	r9, r8
    1d6c:	a8 2c       	mov	r10, r8
    1d6e:	ff e7       	ldi	r31, 0x7F	; 127
    1d70:	bf 2e       	mov	r11, r31
    1d72:	f0 2d       	mov	r31, r0
    1d74:	84 0c       	add	r8, r4
    1d76:	95 1c       	adc	r9, r5
    1d78:	a6 1c       	adc	r10, r6
    1d7a:	b7 1c       	adc	r11, r7
    1d7c:	8e 82       	std	Y+6, r8	; 0x06
    1d7e:	9f 82       	std	Y+7, r9	; 0x07
    1d80:	a8 86       	std	Y+8, r10	; 0x08
    1d82:	b9 86       	std	Y+9, r11	; 0x09
    1d84:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <overflows>
    1d88:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <overflows+0x1>
    1d8c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1d90:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1d94:	b0 99       	sbic	0x16, 0	; 22
    1d96:	0e c0       	rjmp	.+28     	; 0x1db4 <async+0xde>
    1d98:	09 2e       	mov	r0, r25
    1d9a:	00 0c       	add	r0, r0
    1d9c:	aa 0b       	sbc	r26, r26
    1d9e:	bb 0b       	sbc	r27, r27
    1da0:	dc 01       	movw	r26, r24
    1da2:	99 27       	eor	r25, r25
    1da4:	88 27       	eor	r24, r24
    1da6:	60 e0       	ldi	r22, 0x00	; 0
    1da8:	70 e0       	ldi	r23, 0x00	; 0
    1daa:	84 2b       	or	r24, r20
    1dac:	95 2b       	or	r25, r21
    1dae:	a6 2b       	or	r26, r22
    1db0:	b7 2b       	or	r27, r23
    1db2:	13 c0       	rjmp	.+38     	; 0x1dda <async+0x104>
    1db4:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1db8:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1dbc:	01 96       	adiw	r24, 0x01	; 1
    1dbe:	09 2e       	mov	r0, r25
    1dc0:	00 0c       	add	r0, r0
    1dc2:	aa 0b       	sbc	r26, r26
    1dc4:	bb 0b       	sbc	r27, r27
    1dc6:	dc 01       	movw	r26, r24
    1dc8:	99 27       	eor	r25, r25
    1dca:	88 27       	eor	r24, r24
    1dcc:	a9 01       	movw	r20, r18
    1dce:	60 e0       	ldi	r22, 0x00	; 0
    1dd0:	70 e0       	ldi	r23, 0x00	; 0
    1dd2:	84 2b       	or	r24, r20
    1dd4:	95 2b       	or	r25, r21
    1dd6:	a6 2b       	or	r26, r22
    1dd8:	b7 2b       	or	r27, r23
    1dda:	48 1a       	sub	r4, r24
    1ddc:	59 0a       	sbc	r5, r25
    1dde:	6a 0a       	sbc	r6, r26
    1de0:	7b 0a       	sbc	r7, r27
    1de2:	14 14       	cp	r1, r4
    1de4:	15 04       	cpc	r1, r5
    1de6:	16 04       	cpc	r1, r6
    1de8:	17 04       	cpc	r1, r7
    1dea:	ac f5       	brge	.+106    	; 0x1e56 <async+0x180>
    1dec:	6e e9       	ldi	r22, 0x9E	; 158
    1dee:	71 e0       	ldi	r23, 0x01	; 1
    1df0:	ce 01       	movw	r24, r28
    1df2:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <enqueueByBaseline>
    1df6:	e0 91 9e 01 	lds	r30, 0x019E	; 0x80019e <timerQ>
    1dfa:	f0 91 9f 01 	lds	r31, 0x019F	; 0x80019f <timerQ+0x1>
    1dfe:	30 97       	sbiw	r30, 0x00	; 0
    1e00:	21 f1       	breq	.+72     	; 0x1e4a <async+0x174>
    1e02:	82 81       	ldd	r24, Z+2	; 0x02
    1e04:	93 81       	ldd	r25, Z+3	; 0x03
    1e06:	a4 81       	ldd	r26, Z+4	; 0x04
    1e08:	b5 81       	ldd	r27, Z+5	; 0x05
    1e0a:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <overflows>
    1e0e:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <overflows+0x1>
    1e12:	2a 17       	cp	r18, r26
    1e14:	3b 07       	cpc	r19, r27
    1e16:	c9 f4       	brne	.+50     	; 0x1e4a <async+0x174>
    1e18:	9c 01       	movw	r18, r24
    1e1a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1e1e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1e22:	84 1b       	sub	r24, r20
    1e24:	95 0b       	sbc	r25, r21
    1e26:	01 97       	sbiw	r24, 0x01	; 1
    1e28:	31 f4       	brne	.+12     	; 0x1e36 <async+0x160>
    1e2a:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1e2e:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1e32:	2f 5f       	subi	r18, 0xFF	; 255
    1e34:	3f 4f       	sbci	r19, 0xFF	; 255
    1e36:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1e3a:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1e3e:	ef e6       	ldi	r30, 0x6F	; 111
    1e40:	f0 e0       	ldi	r31, 0x00	; 0
    1e42:	80 81       	ld	r24, Z
    1e44:	82 60       	ori	r24, 0x02	; 2
    1e46:	80 83       	st	Z, r24
    1e48:	41 c0       	rjmp	.+130    	; 0x1ecc <async+0x1f6>
    1e4a:	ef e6       	ldi	r30, 0x6F	; 111
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	80 81       	ld	r24, Z
    1e50:	8d 7f       	andi	r24, 0xFD	; 253
    1e52:	80 83       	st	Z, r24
    1e54:	3b c0       	rjmp	.+118    	; 0x1ecc <async+0x1f6>
    1e56:	60 ea       	ldi	r22, 0xA0	; 160
    1e58:	71 e0       	ldi	r23, 0x01	; 1
    1e5a:	ce 01       	movw	r24, r28
    1e5c:	0e 94 c7 0c 	call	0x198e	; 0x198e <enqueueByDeadline>
    1e60:	33 20       	and	r3, r3
    1e62:	b9 f1       	breq	.+110    	; 0x1ed2 <async+0x1fc>
    1e64:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <threadPool>
    1e68:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <threadPool+0x1>
    1e6c:	00 97       	sbiw	r24, 0x00	; 0
    1e6e:	81 f1       	breq	.+96     	; 0x1ed0 <async+0x1fa>
    1e70:	e0 91 85 01 	lds	r30, 0x0185	; 0x800185 <activeStack>
    1e74:	f0 91 86 01 	lds	r31, 0x0186	; 0x800186 <activeStack+0x1>
    1e78:	20 91 a0 01 	lds	r18, 0x01A0	; 0x8001a0 <msgQ>
    1e7c:	30 91 a1 01 	lds	r19, 0x01A1	; 0x8001a1 <msgQ+0x1>
    1e80:	02 81       	ldd	r16, Z+2	; 0x02
    1e82:	13 81       	ldd	r17, Z+3	; 0x03
    1e84:	d9 01       	movw	r26, r18
    1e86:	16 96       	adiw	r26, 0x06	; 6
    1e88:	4d 91       	ld	r20, X+
    1e8a:	5d 91       	ld	r21, X+
    1e8c:	6d 91       	ld	r22, X+
    1e8e:	7c 91       	ld	r23, X
    1e90:	19 97       	sbiw	r26, 0x09	; 9
    1e92:	d8 01       	movw	r26, r16
    1e94:	16 96       	adiw	r26, 0x06	; 6
    1e96:	0d 91       	ld	r16, X+
    1e98:	1d 91       	ld	r17, X+
    1e9a:	2d 91       	ld	r18, X+
    1e9c:	3c 91       	ld	r19, X
    1e9e:	19 97       	sbiw	r26, 0x09	; 9
    1ea0:	40 1b       	sub	r20, r16
    1ea2:	51 0b       	sbc	r21, r17
    1ea4:	62 0b       	sbc	r22, r18
    1ea6:	73 0b       	sbc	r23, r19
    1ea8:	9a f4       	brpl	.+38     	; 0x1ed0 <async+0x1fa>
    1eaa:	dc 01       	movw	r26, r24
    1eac:	2d 91       	ld	r18, X+
    1eae:	3c 91       	ld	r19, X
    1eb0:	11 97       	sbiw	r26, 0x01	; 1
    1eb2:	30 93 88 01 	sts	0x0188, r19	; 0x800188 <threadPool+0x1>
    1eb6:	20 93 87 01 	sts	0x0187, r18	; 0x800187 <threadPool>
    1eba:	ed 93       	st	X+, r30
    1ebc:	fc 93       	st	X, r31
    1ebe:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <activeStack+0x1>
    1ec2:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <activeStack>
    1ec6:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <dispatch>
    1eca:	02 c0       	rjmp	.+4      	; 0x1ed0 <async+0x1fa>
    1ecc:	33 20       	and	r3, r3
    1ece:	09 f0       	breq	.+2      	; 0x1ed2 <async+0x1fc>
    1ed0:	78 94       	sei
    1ed2:	ce 01       	movw	r24, r28
    1ed4:	df 91       	pop	r29
    1ed6:	cf 91       	pop	r28
    1ed8:	1f 91       	pop	r17
    1eda:	0f 91       	pop	r16
    1edc:	ff 90       	pop	r15
    1ede:	ef 90       	pop	r14
    1ee0:	df 90       	pop	r13
    1ee2:	cf 90       	pop	r12
    1ee4:	bf 90       	pop	r11
    1ee6:	af 90       	pop	r10
    1ee8:	9f 90       	pop	r9
    1eea:	8f 90       	pop	r8
    1eec:	7f 90       	pop	r7
    1eee:	6f 90       	pop	r6
    1ef0:	5f 90       	pop	r5
    1ef2:	4f 90       	pop	r4
    1ef4:	3f 90       	pop	r3
    1ef6:	08 95       	ret

00001ef8 <sync>:
    1ef8:	cf 92       	push	r12
    1efa:	df 92       	push	r13
    1efc:	ef 92       	push	r14
    1efe:	ff 92       	push	r15
    1f00:	0f 93       	push	r16
    1f02:	1f 93       	push	r17
    1f04:	cf 93       	push	r28
    1f06:	df 93       	push	r29
    1f08:	ec 01       	movw	r28, r24
    1f0a:	7b 01       	movw	r14, r22
    1f0c:	6a 01       	movw	r12, r20
    1f0e:	1f b7       	in	r17, 0x3f	; 63
    1f10:	10 78       	andi	r17, 0x80	; 128
    1f12:	f8 94       	cli
    1f14:	a8 81       	ld	r26, Y
    1f16:	b9 81       	ldd	r27, Y+1	; 0x01
    1f18:	10 97       	sbiw	r26, 0x00	; 0
    1f1a:	61 f1       	breq	.+88     	; 0x1f74 <sync+0x7c>
    1f1c:	14 96       	adiw	r26, 0x04	; 4
    1f1e:	ed 91       	ld	r30, X+
    1f20:	fc 91       	ld	r31, X
    1f22:	15 97       	sbiw	r26, 0x05	; 5
    1f24:	30 97       	sbiw	r30, 0x00	; 0
    1f26:	41 f0       	breq	.+16     	; 0x1f38 <sync+0x40>
    1f28:	a0 81       	ld	r26, Z
    1f2a:	b1 81       	ldd	r27, Z+1	; 0x01
    1f2c:	14 96       	adiw	r26, 0x04	; 4
    1f2e:	ed 91       	ld	r30, X+
    1f30:	fc 91       	ld	r31, X
    1f32:	15 97       	sbiw	r26, 0x05	; 5
    1f34:	30 97       	sbiw	r30, 0x00	; 0
    1f36:	c1 f7       	brne	.-16     	; 0x1f28 <sync+0x30>
    1f38:	20 91 83 01 	lds	r18, 0x0183	; 0x800183 <current>
    1f3c:	30 91 84 01 	lds	r19, 0x0184	; 0x800184 <current+0x1>
    1f40:	2a 17       	cp	r18, r26
    1f42:	3b 07       	cpc	r19, r27
    1f44:	21 f0       	breq	.+8      	; 0x1f4e <sync+0x56>
    1f46:	11 23       	and	r17, r17
    1f48:	09 f4       	brne	.+2      	; 0x1f4c <sync+0x54>
    1f4a:	3d c0       	rjmp	.+122    	; 0x1fc6 <sync+0xce>
    1f4c:	07 c0       	rjmp	.+14     	; 0x1f5c <sync+0x64>
    1f4e:	11 23       	and	r17, r17
    1f50:	09 f4       	brne	.+2      	; 0x1f54 <sync+0x5c>
    1f52:	3c c0       	rjmp	.+120    	; 0x1fcc <sync+0xd4>
    1f54:	78 94       	sei
    1f56:	8f ef       	ldi	r24, 0xFF	; 255
    1f58:	9f ef       	ldi	r25, 0xFF	; 255
    1f5a:	52 c0       	rjmp	.+164    	; 0x2000 <sync+0x108>
    1f5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f60:	00 97       	sbiw	r24, 0x00	; 0
    1f62:	d1 f1       	breq	.+116    	; 0x1fd8 <sync+0xe0>
    1f64:	fc 01       	movw	r30, r24
    1f66:	15 82       	std	Z+5, r1	; 0x05
    1f68:	14 82       	std	Z+4, r1	; 0x04
    1f6a:	36 c0       	rjmp	.+108    	; 0x1fd8 <sync+0xe0>
    1f6c:	78 94       	sei
    1f6e:	80 e0       	ldi	r24, 0x00	; 0
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	46 c0       	rjmp	.+140    	; 0x2000 <sync+0x108>
    1f74:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <current>
    1f78:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <current+0x1>
    1f7c:	99 83       	std	Y+1, r25	; 0x01
    1f7e:	88 83       	st	Y, r24
    1f80:	11 23       	and	r17, r17
    1f82:	29 f0       	breq	.+10     	; 0x1f8e <sync+0x96>
    1f84:	8a 81       	ldd	r24, Y+2	; 0x02
    1f86:	9b 81       	ldd	r25, Y+3	; 0x03
    1f88:	01 97       	sbiw	r24, 0x01	; 1
    1f8a:	09 f0       	breq	.+2      	; 0x1f8e <sync+0x96>
    1f8c:	78 94       	sei
    1f8e:	b6 01       	movw	r22, r12
    1f90:	ce 01       	movw	r24, r28
    1f92:	f7 01       	movw	r30, r14
    1f94:	09 95       	icall
    1f96:	f8 2e       	mov	r15, r24
    1f98:	09 2f       	mov	r16, r25
    1f9a:	8f b7       	in	r24, 0x3f	; 63
    1f9c:	f8 94       	cli
    1f9e:	19 82       	std	Y+1, r1	; 0x01
    1fa0:	18 82       	st	Y, r1
    1fa2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa4:	9b 81       	ldd	r25, Y+3	; 0x03
    1fa6:	82 30       	cpi	r24, 0x02	; 2
    1fa8:	91 05       	cpc	r25, r1
    1faa:	38 f0       	brcs	.+14     	; 0x1fba <sync+0xc2>
    1fac:	1b 82       	std	Y+3, r1	; 0x03
    1fae:	1a 82       	std	Y+2, r1	; 0x02
    1fb0:	fc 01       	movw	r30, r24
    1fb2:	15 82       	std	Z+5, r1	; 0x05
    1fb4:	14 82       	std	Z+4, r1	; 0x04
    1fb6:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <dispatch>
    1fba:	11 23       	and	r17, r17
    1fbc:	51 f0       	breq	.+20     	; 0x1fd2 <sync+0xda>
    1fbe:	78 94       	sei
    1fc0:	8f 2d       	mov	r24, r15
    1fc2:	90 2f       	mov	r25, r16
    1fc4:	1d c0       	rjmp	.+58     	; 0x2000 <sync+0x108>
    1fc6:	8f ef       	ldi	r24, 0xFF	; 255
    1fc8:	9f ef       	ldi	r25, 0xFF	; 255
    1fca:	1a c0       	rjmp	.+52     	; 0x2000 <sync+0x108>
    1fcc:	8f ef       	ldi	r24, 0xFF	; 255
    1fce:	9f ef       	ldi	r25, 0xFF	; 255
    1fd0:	17 c0       	rjmp	.+46     	; 0x2000 <sync+0x108>
    1fd2:	8f 2d       	mov	r24, r15
    1fd4:	90 2f       	mov	r25, r16
    1fd6:	14 c0       	rjmp	.+40     	; 0x2000 <sync+0x108>
    1fd8:	3b 83       	std	Y+3, r19	; 0x03
    1fda:	2a 83       	std	Y+2, r18	; 0x02
    1fdc:	f9 01       	movw	r30, r18
    1fde:	d5 83       	std	Z+5, r29	; 0x05
    1fe0:	c4 83       	std	Z+4, r28	; 0x04
    1fe2:	cd 01       	movw	r24, r26
    1fe4:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <dispatch>
    1fe8:	e0 91 83 01 	lds	r30, 0x0183	; 0x800183 <current>
    1fec:	f0 91 84 01 	lds	r31, 0x0184	; 0x800184 <current+0x1>
    1ff0:	82 81       	ldd	r24, Z+2	; 0x02
    1ff2:	93 81       	ldd	r25, Z+3	; 0x03
    1ff4:	89 2b       	or	r24, r25
    1ff6:	09 f4       	brne	.+2      	; 0x1ffa <sync+0x102>
    1ff8:	b9 cf       	rjmp	.-142    	; 0x1f6c <sync+0x74>
    1ffa:	f9 83       	std	Y+1, r31	; 0x01
    1ffc:	e8 83       	st	Y, r30
    1ffe:	c2 cf       	rjmp	.-124    	; 0x1f84 <sync+0x8c>
    2000:	df 91       	pop	r29
    2002:	cf 91       	pop	r28
    2004:	1f 91       	pop	r17
    2006:	0f 91       	pop	r16
    2008:	ff 90       	pop	r15
    200a:	ef 90       	pop	r14
    200c:	df 90       	pop	r13
    200e:	cf 90       	pop	r12
    2010:	08 95       	ret

00002012 <run>:
    2012:	00 91 83 01 	lds	r16, 0x0183	; 0x800183 <current>
    2016:	10 91 84 01 	lds	r17, 0x0184	; 0x800184 <current+0x1>
    201a:	80 ea       	ldi	r24, 0xA0	; 160
    201c:	91 e0       	ldi	r25, 0x01	; 1
    201e:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <dequeue>
    2022:	ec 01       	movw	r28, r24
    2024:	d8 01       	movw	r26, r16
    2026:	13 96       	adiw	r26, 0x03	; 3
    2028:	9c 93       	st	X, r25
    202a:	8e 93       	st	-X, r24
    202c:	12 97       	sbiw	r26, 0x02	; 2
    202e:	78 94       	sei
    2030:	4e 85       	ldd	r20, Y+14	; 0x0e
    2032:	5f 85       	ldd	r21, Y+15	; 0x0f
    2034:	6c 85       	ldd	r22, Y+12	; 0x0c
    2036:	7d 85       	ldd	r23, Y+13	; 0x0d
    2038:	8a 85       	ldd	r24, Y+10	; 0x0a
    203a:	9b 85       	ldd	r25, Y+11	; 0x0b
    203c:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <sync>
    2040:	8f b7       	in	r24, 0x3f	; 63
    2042:	f8 94       	cli
    2044:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <msgPool>
    2048:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <msgPool+0x1>
    204c:	99 83       	std	Y+1, r25	; 0x01
    204e:	88 83       	st	Y, r24
    2050:	d0 93 8a 01 	sts	0x018A, r29	; 0x80018a <msgPool+0x1>
    2054:	c0 93 89 01 	sts	0x0189, r28	; 0x800189 <msgPool>
    2058:	e0 91 85 01 	lds	r30, 0x0185	; 0x800185 <activeStack>
    205c:	f0 91 86 01 	lds	r31, 0x0186	; 0x800186 <activeStack+0x1>
    2060:	00 81       	ld	r16, Z
    2062:	11 81       	ldd	r17, Z+1	; 0x01
    2064:	e8 01       	movw	r28, r16
    2066:	2a 81       	ldd	r18, Y+2	; 0x02
    2068:	3b 81       	ldd	r19, Y+3	; 0x03
    206a:	a0 91 a0 01 	lds	r26, 0x01A0	; 0x8001a0 <msgQ>
    206e:	b0 91 a1 01 	lds	r27, 0x01A1	; 0x8001a1 <msgQ+0x1>
    2072:	10 97       	sbiw	r26, 0x00	; 0
    2074:	c1 f0       	breq	.+48     	; 0x20a6 <run+0x94>
    2076:	21 15       	cp	r18, r1
    2078:	31 05       	cpc	r19, r1
    207a:	59 f2       	breq	.-106    	; 0x2012 <run>
    207c:	16 96       	adiw	r26, 0x06	; 6
    207e:	8d 91       	ld	r24, X+
    2080:	9d 91       	ld	r25, X+
    2082:	0d 90       	ld	r0, X+
    2084:	bc 91       	ld	r27, X
    2086:	a0 2d       	mov	r26, r0
    2088:	e9 01       	movw	r28, r18
    208a:	4e 81       	ldd	r20, Y+6	; 0x06
    208c:	5f 81       	ldd	r21, Y+7	; 0x07
    208e:	68 85       	ldd	r22, Y+8	; 0x08
    2090:	79 85       	ldd	r23, Y+9	; 0x09
    2092:	84 1b       	sub	r24, r20
    2094:	95 0b       	sbc	r25, r21
    2096:	a6 0b       	sbc	r26, r22
    2098:	b7 0b       	sbc	r27, r23
    209a:	18 16       	cp	r1, r24
    209c:	19 06       	cpc	r1, r25
    209e:	1a 06       	cpc	r1, r26
    20a0:	1b 06       	cpc	r1, r27
    20a2:	0c f0       	brlt	.+2      	; 0x20a6 <run+0x94>
    20a4:	b6 cf       	rjmp	.-148    	; 0x2012 <run>
    20a6:	10 93 86 01 	sts	0x0186, r17	; 0x800186 <activeStack+0x1>
    20aa:	00 93 85 01 	sts	0x0185, r16	; 0x800185 <activeStack>
    20ae:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <threadPool>
    20b2:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <threadPool+0x1>
    20b6:	91 83       	std	Z+1, r25	; 0x01
    20b8:	80 83       	st	Z, r24
    20ba:	f0 93 88 01 	sts	0x0188, r31	; 0x800188 <threadPool+0x1>
    20be:	e0 93 87 01 	sts	0x0187, r30	; 0x800187 <threadPool>
    20c2:	a0 91 85 01 	lds	r26, 0x0185	; 0x800185 <activeStack>
    20c6:	b0 91 86 01 	lds	r27, 0x0186	; 0x800186 <activeStack+0x1>
    20ca:	14 96       	adiw	r26, 0x04	; 4
    20cc:	ed 91       	ld	r30, X+
    20ce:	fc 91       	ld	r31, X
    20d0:	15 97       	sbiw	r26, 0x05	; 5
    20d2:	30 97       	sbiw	r30, 0x00	; 0
    20d4:	41 f0       	breq	.+16     	; 0x20e6 <run+0xd4>
    20d6:	a0 81       	ld	r26, Z
    20d8:	b1 81       	ldd	r27, Z+1	; 0x01
    20da:	14 96       	adiw	r26, 0x04	; 4
    20dc:	ed 91       	ld	r30, X+
    20de:	fc 91       	ld	r31, X
    20e0:	15 97       	sbiw	r26, 0x05	; 5
    20e2:	30 97       	sbiw	r30, 0x00	; 0
    20e4:	c1 f7       	brne	.-16     	; 0x20d6 <run+0xc4>
    20e6:	cd 01       	movw	r24, r26
    20e8:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <dispatch>
    20ec:	92 cf       	rjmp	.-220    	; 0x2012 <run>

000020ee <install>:
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    if (i >= 0 && i < N_VECTORS) {
    20ee:	42 31       	cpi	r20, 0x12	; 18
    20f0:	b8 f4       	brcc	.+46     	; 0x2120 <install+0x32>
        char status;
        DISABLE(status);
    20f2:	2f b7       	in	r18, 0x3f	; 63
    20f4:	f8 94       	cli
        otable[i] = obj;
    20f6:	50 e0       	ldi	r21, 0x00	; 0
    20f8:	44 0f       	add	r20, r20
    20fa:	55 1f       	adc	r21, r21
    20fc:	fa 01       	movw	r30, r20
    20fe:	ee 55       	subi	r30, 0x5E	; 94
    2100:	fe 4f       	sbci	r31, 0xFE	; 254
    2102:	91 83       	std	Z+1, r25	; 0x01
    2104:	80 83       	st	Z, r24
        mtable[i] = m;
    2106:	fa 01       	movw	r30, r20
    2108:	e6 5c       	subi	r30, 0xC6	; 198
    210a:	fd 4f       	sbci	r31, 0xFD	; 253
    210c:	71 83       	std	Z+1, r23	; 0x01
    210e:	60 83       	st	Z, r22
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    2110:	41 e0       	ldi	r20, 0x01	; 1
    2112:	50 e0       	ldi	r21, 0x00	; 0
    2114:	fc 01       	movw	r30, r24
    2116:	53 83       	std	Z+3, r21	; 0x03
    2118:	42 83       	std	Z+2, r20	; 0x02
        ENABLE(status);
    211a:	22 23       	and	r18, r18
    211c:	0c f4       	brge	.+2      	; 0x2120 <install+0x32>
    211e:	78 94       	sei
    2120:	08 95       	ret

00002122 <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    2122:	8c 01       	movw	r16, r24
    2124:	7b 01       	movw	r14, r22
    2126:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    2128:	8f b7       	in	r24, 0x3f	; 63
    212a:	f8 94       	cli
    initialize();
    212c:	0e 94 69 04 	call	0x8d2	; 0x8d2 <initialize>
    ENABLE(1);
    2130:	78 94       	sei
    if (m != NULL)
    2132:	e1 14       	cp	r14, r1
    2134:	f1 04       	cpc	r15, r1
    2136:	41 f0       	breq	.+16     	; 0x2148 <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    2138:	20 e0       	ldi	r18, 0x00	; 0
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	a9 01       	movw	r20, r18
    213e:	60 e0       	ldi	r22, 0x00	; 0
    2140:	70 e0       	ldi	r23, 0x00	; 0
    2142:	cb 01       	movw	r24, r22
    2144:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <async>
    DISABLE(status);
    2148:	8f b7       	in	r24, 0x3f	; 63
    214a:	f8 94       	cli
        }
    }
}

static void idle(void) {
    schedule();
    214c:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <schedule>
    ENABLE(1);
    2150:	78 94       	sei
    while (1) {
        SLEEP();
    2152:	81 e0       	ldi	r24, 0x01	; 1
    2154:	83 bf       	out	0x33, r24	; 51
    2156:	88 95       	sleep
    2158:	fd cf       	rjmp	.-6      	; 0x2154 <tinytimber+0x32>

0000215a <__divmodhi4>:
    215a:	97 fb       	bst	r25, 7
    215c:	07 2e       	mov	r0, r23
    215e:	16 f4       	brtc	.+4      	; 0x2164 <__divmodhi4+0xa>
    2160:	00 94       	com	r0
    2162:	07 d0       	rcall	.+14     	; 0x2172 <__divmodhi4_neg1>
    2164:	77 fd       	sbrc	r23, 7
    2166:	09 d0       	rcall	.+18     	; 0x217a <__divmodhi4_neg2>
    2168:	0e 94 ed 10 	call	0x21da	; 0x21da <__udivmodhi4>
    216c:	07 fc       	sbrc	r0, 7
    216e:	05 d0       	rcall	.+10     	; 0x217a <__divmodhi4_neg2>
    2170:	3e f4       	brtc	.+14     	; 0x2180 <__divmodhi4_exit>

00002172 <__divmodhi4_neg1>:
    2172:	90 95       	com	r25
    2174:	81 95       	neg	r24
    2176:	9f 4f       	sbci	r25, 0xFF	; 255
    2178:	08 95       	ret

0000217a <__divmodhi4_neg2>:
    217a:	70 95       	com	r23
    217c:	61 95       	neg	r22
    217e:	7f 4f       	sbci	r23, 0xFF	; 255

00002180 <__divmodhi4_exit>:
    2180:	08 95       	ret

00002182 <__divmodsi4>:
    2182:	05 2e       	mov	r0, r21
    2184:	97 fb       	bst	r25, 7
    2186:	1e f4       	brtc	.+6      	; 0x218e <__divmodsi4+0xc>
    2188:	00 94       	com	r0
    218a:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <__negsi2>
    218e:	57 fd       	sbrc	r21, 7
    2190:	07 d0       	rcall	.+14     	; 0x21a0 <__divmodsi4_neg2>
    2192:	0e 94 01 11 	call	0x2202	; 0x2202 <__udivmodsi4>
    2196:	07 fc       	sbrc	r0, 7
    2198:	03 d0       	rcall	.+6      	; 0x21a0 <__divmodsi4_neg2>
    219a:	4e f4       	brtc	.+18     	; 0x21ae <__divmodsi4_exit>
    219c:	0c 94 d8 10 	jmp	0x21b0	; 0x21b0 <__negsi2>

000021a0 <__divmodsi4_neg2>:
    21a0:	50 95       	com	r21
    21a2:	40 95       	com	r20
    21a4:	30 95       	com	r19
    21a6:	21 95       	neg	r18
    21a8:	3f 4f       	sbci	r19, 0xFF	; 255
    21aa:	4f 4f       	sbci	r20, 0xFF	; 255
    21ac:	5f 4f       	sbci	r21, 0xFF	; 255

000021ae <__divmodsi4_exit>:
    21ae:	08 95       	ret

000021b0 <__negsi2>:
    21b0:	90 95       	com	r25
    21b2:	80 95       	com	r24
    21b4:	70 95       	com	r23
    21b6:	61 95       	neg	r22
    21b8:	7f 4f       	sbci	r23, 0xFF	; 255
    21ba:	8f 4f       	sbci	r24, 0xFF	; 255
    21bc:	9f 4f       	sbci	r25, 0xFF	; 255
    21be:	08 95       	ret

000021c0 <__tablejump2__>:
    21c0:	ee 0f       	add	r30, r30
    21c2:	ff 1f       	adc	r31, r31
    21c4:	05 90       	lpm	r0, Z+
    21c6:	f4 91       	lpm	r31, Z
    21c8:	e0 2d       	mov	r30, r0
    21ca:	09 94       	ijmp

000021cc <__usmulhisi3>:
    21cc:	0e 94 23 11 	call	0x2246	; 0x2246 <__umulhisi3>

000021d0 <__usmulhisi3_tail>:
    21d0:	b7 ff       	sbrs	r27, 7
    21d2:	08 95       	ret
    21d4:	82 1b       	sub	r24, r18
    21d6:	93 0b       	sbc	r25, r19
    21d8:	08 95       	ret

000021da <__udivmodhi4>:
    21da:	aa 1b       	sub	r26, r26
    21dc:	bb 1b       	sub	r27, r27
    21de:	51 e1       	ldi	r21, 0x11	; 17
    21e0:	07 c0       	rjmp	.+14     	; 0x21f0 <__udivmodhi4_ep>

000021e2 <__udivmodhi4_loop>:
    21e2:	aa 1f       	adc	r26, r26
    21e4:	bb 1f       	adc	r27, r27
    21e6:	a6 17       	cp	r26, r22
    21e8:	b7 07       	cpc	r27, r23
    21ea:	10 f0       	brcs	.+4      	; 0x21f0 <__udivmodhi4_ep>
    21ec:	a6 1b       	sub	r26, r22
    21ee:	b7 0b       	sbc	r27, r23

000021f0 <__udivmodhi4_ep>:
    21f0:	88 1f       	adc	r24, r24
    21f2:	99 1f       	adc	r25, r25
    21f4:	5a 95       	dec	r21
    21f6:	a9 f7       	brne	.-22     	; 0x21e2 <__udivmodhi4_loop>
    21f8:	80 95       	com	r24
    21fa:	90 95       	com	r25
    21fc:	bc 01       	movw	r22, r24
    21fe:	cd 01       	movw	r24, r26
    2200:	08 95       	ret

00002202 <__udivmodsi4>:
    2202:	a1 e2       	ldi	r26, 0x21	; 33
    2204:	1a 2e       	mov	r1, r26
    2206:	aa 1b       	sub	r26, r26
    2208:	bb 1b       	sub	r27, r27
    220a:	fd 01       	movw	r30, r26
    220c:	0d c0       	rjmp	.+26     	; 0x2228 <__udivmodsi4_ep>

0000220e <__udivmodsi4_loop>:
    220e:	aa 1f       	adc	r26, r26
    2210:	bb 1f       	adc	r27, r27
    2212:	ee 1f       	adc	r30, r30
    2214:	ff 1f       	adc	r31, r31
    2216:	a2 17       	cp	r26, r18
    2218:	b3 07       	cpc	r27, r19
    221a:	e4 07       	cpc	r30, r20
    221c:	f5 07       	cpc	r31, r21
    221e:	20 f0       	brcs	.+8      	; 0x2228 <__udivmodsi4_ep>
    2220:	a2 1b       	sub	r26, r18
    2222:	b3 0b       	sbc	r27, r19
    2224:	e4 0b       	sbc	r30, r20
    2226:	f5 0b       	sbc	r31, r21

00002228 <__udivmodsi4_ep>:
    2228:	66 1f       	adc	r22, r22
    222a:	77 1f       	adc	r23, r23
    222c:	88 1f       	adc	r24, r24
    222e:	99 1f       	adc	r25, r25
    2230:	1a 94       	dec	r1
    2232:	69 f7       	brne	.-38     	; 0x220e <__udivmodsi4_loop>
    2234:	60 95       	com	r22
    2236:	70 95       	com	r23
    2238:	80 95       	com	r24
    223a:	90 95       	com	r25
    223c:	9b 01       	movw	r18, r22
    223e:	ac 01       	movw	r20, r24
    2240:	bd 01       	movw	r22, r26
    2242:	cf 01       	movw	r24, r30
    2244:	08 95       	ret

00002246 <__umulhisi3>:
    2246:	a2 9f       	mul	r26, r18
    2248:	b0 01       	movw	r22, r0
    224a:	b3 9f       	mul	r27, r19
    224c:	c0 01       	movw	r24, r0
    224e:	a3 9f       	mul	r26, r19
    2250:	70 0d       	add	r23, r0
    2252:	81 1d       	adc	r24, r1
    2254:	11 24       	eor	r1, r1
    2256:	91 1d       	adc	r25, r1
    2258:	b2 9f       	mul	r27, r18
    225a:	70 0d       	add	r23, r0
    225c:	81 1d       	adc	r24, r1
    225e:	11 24       	eor	r1, r1
    2260:	91 1d       	adc	r25, r1
    2262:	08 95       	ret

00002264 <setjmp>:
    2264:	dc 01       	movw	r26, r24
    2266:	2d 92       	st	X+, r2
    2268:	3d 92       	st	X+, r3
    226a:	4d 92       	st	X+, r4
    226c:	5d 92       	st	X+, r5
    226e:	6d 92       	st	X+, r6
    2270:	7d 92       	st	X+, r7
    2272:	8d 92       	st	X+, r8
    2274:	9d 92       	st	X+, r9
    2276:	ad 92       	st	X+, r10
    2278:	bd 92       	st	X+, r11
    227a:	cd 92       	st	X+, r12
    227c:	dd 92       	st	X+, r13
    227e:	ed 92       	st	X+, r14
    2280:	fd 92       	st	X+, r15
    2282:	0d 93       	st	X+, r16
    2284:	1d 93       	st	X+, r17
    2286:	cd 93       	st	X+, r28
    2288:	dd 93       	st	X+, r29
    228a:	ff 91       	pop	r31
    228c:	ef 91       	pop	r30
    228e:	8d b7       	in	r24, 0x3d	; 61
    2290:	8d 93       	st	X+, r24
    2292:	8e b7       	in	r24, 0x3e	; 62
    2294:	8d 93       	st	X+, r24
    2296:	8f b7       	in	r24, 0x3f	; 63
    2298:	8d 93       	st	X+, r24
    229a:	ed 93       	st	X+, r30
    229c:	fd 93       	st	X+, r31
    229e:	88 27       	eor	r24, r24
    22a0:	99 27       	eor	r25, r25
    22a2:	09 94       	ijmp

000022a4 <longjmp>:
    22a4:	dc 01       	movw	r26, r24
    22a6:	cb 01       	movw	r24, r22
    22a8:	81 30       	cpi	r24, 0x01	; 1
    22aa:	91 05       	cpc	r25, r1
    22ac:	81 1d       	adc	r24, r1
    22ae:	2d 90       	ld	r2, X+
    22b0:	3d 90       	ld	r3, X+
    22b2:	4d 90       	ld	r4, X+
    22b4:	5d 90       	ld	r5, X+
    22b6:	6d 90       	ld	r6, X+
    22b8:	7d 90       	ld	r7, X+
    22ba:	8d 90       	ld	r8, X+
    22bc:	9d 90       	ld	r9, X+
    22be:	ad 90       	ld	r10, X+
    22c0:	bd 90       	ld	r11, X+
    22c2:	cd 90       	ld	r12, X+
    22c4:	dd 90       	ld	r13, X+
    22c6:	ed 90       	ld	r14, X+
    22c8:	fd 90       	ld	r15, X+
    22ca:	0d 91       	ld	r16, X+
    22cc:	1d 91       	ld	r17, X+
    22ce:	cd 91       	ld	r28, X+
    22d0:	dd 91       	ld	r29, X+
    22d2:	ed 91       	ld	r30, X+
    22d4:	fd 91       	ld	r31, X+
    22d6:	0d 90       	ld	r0, X+
    22d8:	f8 94       	cli
    22da:	fe bf       	out	0x3e, r31	; 62
    22dc:	0f be       	out	0x3f, r0	; 63
    22de:	ed bf       	out	0x3d, r30	; 61
    22e0:	ed 91       	ld	r30, X+
    22e2:	fd 91       	ld	r31, X+
    22e4:	09 94       	ijmp

000022e6 <_exit>:
    22e6:	f8 94       	cli

000022e8 <__stop_program>:
    22e8:	ff cf       	rjmp	.-2      	; 0x22e8 <__stop_program>
