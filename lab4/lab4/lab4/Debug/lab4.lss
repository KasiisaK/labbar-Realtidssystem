
lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000084  00800100  0000200e  000020a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000200e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000035b  00800184  00800184  00002126  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002126  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002158  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000250  00000000  00000000  00002198  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002ad5  00000000  00000000  000023e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000107c  00000000  00000000  00004ebd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015a6  00000000  00000000  00005f39  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bf8  00000000  00000000  000074e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009fb  00000000  00000000  000080d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002840  00000000  00000000  00008ad3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000200  00000000  00000000  0000b313  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 ff 03 	jmp	0x7fe	; 0x7fe <__vector_1>
       8:	0c 94 6b 04 	jmp	0x8d6	; 0x8d6 <__vector_2>
       c:	0c 94 d7 04 	jmp	0x9ae	; 0x9ae <__vector_3>
      10:	0c 94 43 05 	jmp	0xa86	; 0xa86 <__vector_4>
      14:	0c 94 af 05 	jmp	0xb5e	; 0xb5e <__vector_5>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 86 0c 	jmp	0x190c	; 0x190c <__vector_7>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 34 0c 	jmp	0x1868	; 0x1868 <__vector_9>
      28:	0c 94 1b 06 	jmp	0xc36	; 0xc36 <__vector_10>
      2c:	0c 94 87 06 	jmp	0xd0e	; 0xd0e <__vector_11>
      30:	0c 94 f3 06 	jmp	0xde6	; 0xde6 <__vector_12>
      34:	0c 94 5f 07 	jmp	0xebe	; 0xebe <__vector_13>
      38:	0c 94 cb 07 	jmp	0xf96	; 0xf96 <__vector_14>
      3c:	0c 94 37 08 	jmp	0x106e	; 0x106e <__vector_15>
      40:	0c 94 a3 08 	jmp	0x1146	; 0x1146 <__vector_16>
      44:	0c 94 0f 09 	jmp	0x121e	; 0x121e <__vector_17>
      48:	0c 94 7b 09 	jmp	0x12f6	; 0x12f6 <__vector_18>
      4c:	0c 94 e7 09 	jmp	0x13ce	; 0x13ce <__vector_19>
      50:	0c 94 53 0a 	jmp	0x14a6	; 0x14a6 <__vector_20>
      54:	0c 94 bf 0a 	jmp	0x157e	; 0x157e <__vector_21>
      58:	0c 94 2b 0b 	jmp	0x1656	; 0x1656 <__vector_22>
      5c:	8c 00       	.word	0x008c	; ????
      5e:	6e 00       	.word	0x006e	; ????
      60:	71 00       	.word	0x0071	; ????
      62:	74 00       	.word	0x0074	; ????
      64:	77 00       	.word	0x0077	; ????
      66:	7a 00       	.word	0x007a	; ????
      68:	7d 00       	.word	0x007d	; ????
      6a:	80 00       	.word	0x0080	; ????
      6c:	83 00       	.word	0x0083	; ????
      6e:	86 00       	.word	0x0086	; ????

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	11 e0       	ldi	r17, 0x01	; 1
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	ee e0       	ldi	r30, 0x0E	; 14
      84:	f0 e2       	ldi	r31, 0x20	; 32
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	a4 38       	cpi	r26, 0x84	; 132
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	24 e0       	ldi	r18, 0x04	; 4
      94:	a4 e8       	ldi	r26, 0x84	; 132
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	af 3d       	cpi	r26, 0xDF	; 223
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 06 03 	call	0x60c	; 0x60c <main>
      a6:	0c 94 05 10 	jmp	0x200a	; 0x200a <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <LCD_init>:
#include "PulseGen.h"
#include "TinyTimber.h"

void LCD_init() {
	// LCD(Contrast Control Register), LCD(Display Configuration)(000): 300 s, LCD(Contrast Control)(1111): 3.35 V
	LCDCCR = (0 << LCDDC0) | (0 << LCDDC1) | (0 << LCDDC2) | (1 << LCDCC0) | (1 << LCDCC1) | (1 << LCDCC2) | (1 << LCDCC3);
      ae:	8f e0       	ldi	r24, 0x0F	; 15
      b0:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__DATA_REGION_ORIGIN__+0x87>
	// LCDCS: asynchronous clock, LCDMUX(11): D=1/4, B=1/3, LCD(Port Mask): 25 segments
	LCDCRB = (1 << LCDCS) | (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM2) | (1 << LCDPM1) | (1 << LCDPM0);
      b4:	87 eb       	ldi	r24, 0xB7	; 183
      b6:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
	// LCD(Clock Divide)(111): (D=8) 32Hz
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);
      ba:	87 e0       	ldi	r24, 0x07	; 7
      bc:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__DATA_REGION_ORIGIN__+0x86>
	// LCD(Control and Status Register A), LCD(Enable): True, LCD(Low Power Waveform): True, (no frame interrupt, no blanking)
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
      c0:	80 ec       	ldi	r24, 0xC0	; 192
      c2:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
      c6:	08 95       	ret

000000c8 <getSegmentForChar>:
int none[] = {0b0000, 0b0000, 0b0000, 0b0000};

// Returns wall of data based on char input ('0' = 48 (char))
int* getSegmentForChar(char ch) {

	switch (ch) {
      c8:	90 e0       	ldi	r25, 0x00	; 0
      ca:	fc 01       	movw	r30, r24
      cc:	f0 97       	sbiw	r30, 0x30	; 48
      ce:	ea 30       	cpi	r30, 0x0A	; 10
      d0:	f1 05       	cpc	r31, r1
      d2:	f8 f4       	brcc	.+62     	; 0x112 <getSegmentForChar+0x4a>
      d4:	e2 5d       	subi	r30, 0xD2	; 210
      d6:	ff 4f       	sbci	r31, 0xFF	; 255
      d8:	0c 94 9c 0f 	jmp	0x1f38	; 0x1f38 <__tablejump2__>
		case '0': return zero;
		case '1': return one;
      dc:	80 e4       	ldi	r24, 0x40	; 64
      de:	91 e0       	ldi	r25, 0x01	; 1
      e0:	08 95       	ret
		case '2': return two;
      e2:	88 e3       	ldi	r24, 0x38	; 56
      e4:	91 e0       	ldi	r25, 0x01	; 1
      e6:	08 95       	ret
		case '3': return three;
      e8:	80 e3       	ldi	r24, 0x30	; 48
      ea:	91 e0       	ldi	r25, 0x01	; 1
      ec:	08 95       	ret
		case '4': return four;
      ee:	88 e2       	ldi	r24, 0x28	; 40
      f0:	91 e0       	ldi	r25, 0x01	; 1
      f2:	08 95       	ret
		case '5': return five;
      f4:	80 e2       	ldi	r24, 0x20	; 32
      f6:	91 e0       	ldi	r25, 0x01	; 1
      f8:	08 95       	ret
		case '6': return six;
      fa:	88 e1       	ldi	r24, 0x18	; 24
      fc:	91 e0       	ldi	r25, 0x01	; 1
      fe:	08 95       	ret
		case '7': return seven;
     100:	80 e1       	ldi	r24, 0x10	; 16
     102:	91 e0       	ldi	r25, 0x01	; 1
     104:	08 95       	ret
		case '8': return eight;
     106:	88 e0       	ldi	r24, 0x08	; 8
     108:	91 e0       	ldi	r25, 0x01	; 1
     10a:	08 95       	ret
		case '9': return nine;
     10c:	80 e0       	ldi	r24, 0x00	; 0
     10e:	91 e0       	ldi	r25, 0x01	; 1
     110:	08 95       	ret
		default:  return none;
     112:	84 e8       	ldi	r24, 0x84	; 132
     114:	91 e0       	ldi	r25, 0x01	; 1
     116:	08 95       	ret

// Returns wall of data based on char input ('0' = 48 (char))
int* getSegmentForChar(char ch) {

	switch (ch) {
		case '0': return zero;
     118:	88 e4       	ldi	r24, 0x48	; 72
     11a:	91 e0       	ldi	r25, 0x01	; 1
		case '7': return seven;
		case '8': return eight;
		case '9': return nine;
		default:  return none;
	}
}
     11c:	08 95       	ret

0000011e <writeChar>:

// Write a char ch at position pos
void writeChar(char ch, uint8_t pos) {
     11e:	cf 93       	push	r28
	// Check if outside range
	if (pos > 5 || pos < 0) return;	
     120:	66 30       	cpi	r22, 0x06	; 6
     122:	08 f0       	brcs	.+2      	; 0x126 <writeChar+0x8>
     124:	e4 c0       	rjmp	.+456    	; 0x2ee <writeChar+0x1d0>
     126:	c6 2f       	mov	r28, r22

	// Get correct char data
	int* segment = getSegmentForChar(ch);
     128:	0e 94 64 00 	call	0xc8	; 0xc8 <getSegmentForChar>
     12c:	fc 01       	movw	r30, r24
	
	// Chose position
	switch (pos) {
     12e:	c2 30       	cpi	r28, 0x02	; 2
     130:	09 f4       	brne	.+2      	; 0x134 <writeChar+0x16>
     132:	67 c0       	rjmp	.+206    	; 0x202 <writeChar+0xe4>
     134:	28 f4       	brcc	.+10     	; 0x140 <writeChar+0x22>
     136:	cc 23       	and	r28, r28
     138:	51 f0       	breq	.+20     	; 0x14e <writeChar+0x30>
     13a:	c1 30       	cpi	r28, 0x01	; 1
     13c:	29 f1       	breq	.+74     	; 0x188 <writeChar+0x6a>
     13e:	d7 c0       	rjmp	.+430    	; 0x2ee <writeChar+0x1d0>
     140:	c3 30       	cpi	r28, 0x03	; 3
     142:	09 f4       	brne	.+2      	; 0x146 <writeChar+0x28>
     144:	7b c0       	rjmp	.+246    	; 0x23c <writeChar+0x11e>
     146:	c4 30       	cpi	r28, 0x04	; 4
     148:	09 f4       	brne	.+2      	; 0x14c <writeChar+0x2e>
     14a:	b5 c0       	rjmp	.+362    	; 0x2b6 <writeChar+0x198>
     14c:	d0 c0       	rjmp	.+416    	; 0x2ee <writeChar+0x1d0>
		case 0:
			// Segment start at 0, 5, 10, 15, higher 4 bits.
			// (LCDDR0 & 0xF0) clears the segment before writing 
			LCDDR0 = (LCDDR0 & 0xF0) | segment[0];
     14e:	ac ee       	ldi	r26, 0xEC	; 236
     150:	b0 e0       	ldi	r27, 0x00	; 0
     152:	8c 91       	ld	r24, X
     154:	80 7f       	andi	r24, 0xF0	; 240
     156:	90 81       	ld	r25, Z
     158:	89 2b       	or	r24, r25
     15a:	8c 93       	st	X, r24
			LCDDR5 = (LCDDR5 & 0xF0) | segment[1];
     15c:	a1 ef       	ldi	r26, 0xF1	; 241
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	8c 91       	ld	r24, X
     162:	80 7f       	andi	r24, 0xF0	; 240
     164:	92 81       	ldd	r25, Z+2	; 0x02
     166:	89 2b       	or	r24, r25
     168:	8c 93       	st	X, r24
			LCDDR10 = (LCDDR10 & 0xF0) | segment[2];
     16a:	a6 ef       	ldi	r26, 0xF6	; 246
     16c:	b0 e0       	ldi	r27, 0x00	; 0
     16e:	8c 91       	ld	r24, X
     170:	80 7f       	andi	r24, 0xF0	; 240
     172:	94 81       	ldd	r25, Z+4	; 0x04
     174:	89 2b       	or	r24, r25
     176:	8c 93       	st	X, r24
			LCDDR15 = (LCDDR15 & 0xF0) | segment[3];
     178:	ab ef       	ldi	r26, 0xFB	; 251
     17a:	b0 e0       	ldi	r27, 0x00	; 0
     17c:	8c 91       	ld	r24, X
     17e:	80 7f       	andi	r24, 0xF0	; 240
     180:	96 81       	ldd	r25, Z+6	; 0x06
     182:	89 2b       	or	r24, r25
     184:	8c 93       	st	X, r24
			break;
     186:	b3 c0       	rjmp	.+358    	; 0x2ee <writeChar+0x1d0>
		case 1:
			// Same segment just lower 4 bits
			LCDDR0 = (LCDDR0 & 0x0F) | (segment[0] << 4);
     188:	ac ee       	ldi	r26, 0xEC	; 236
     18a:	b0 e0       	ldi	r27, 0x00	; 0
     18c:	2c 91       	ld	r18, X
     18e:	80 81       	ld	r24, Z
     190:	91 81       	ldd	r25, Z+1	; 0x01
     192:	82 95       	swap	r24
     194:	92 95       	swap	r25
     196:	90 7f       	andi	r25, 0xF0	; 240
     198:	98 27       	eor	r25, r24
     19a:	80 7f       	andi	r24, 0xF0	; 240
     19c:	98 27       	eor	r25, r24
     19e:	92 2f       	mov	r25, r18
     1a0:	9f 70       	andi	r25, 0x0F	; 15
     1a2:	89 2b       	or	r24, r25
     1a4:	8c 93       	st	X, r24
			LCDDR5 = (LCDDR5 & 0x0F) | (segment[1] << 4);
     1a6:	a1 ef       	ldi	r26, 0xF1	; 241
     1a8:	b0 e0       	ldi	r27, 0x00	; 0
     1aa:	2c 91       	ld	r18, X
     1ac:	82 81       	ldd	r24, Z+2	; 0x02
     1ae:	93 81       	ldd	r25, Z+3	; 0x03
     1b0:	82 95       	swap	r24
     1b2:	92 95       	swap	r25
     1b4:	90 7f       	andi	r25, 0xF0	; 240
     1b6:	98 27       	eor	r25, r24
     1b8:	80 7f       	andi	r24, 0xF0	; 240
     1ba:	98 27       	eor	r25, r24
     1bc:	92 2f       	mov	r25, r18
     1be:	9f 70       	andi	r25, 0x0F	; 15
     1c0:	89 2b       	or	r24, r25
     1c2:	8c 93       	st	X, r24
			LCDDR10 = (LCDDR10 & 0x0F) | (segment[2] << 4);
     1c4:	a6 ef       	ldi	r26, 0xF6	; 246
     1c6:	b0 e0       	ldi	r27, 0x00	; 0
     1c8:	2c 91       	ld	r18, X
     1ca:	84 81       	ldd	r24, Z+4	; 0x04
     1cc:	95 81       	ldd	r25, Z+5	; 0x05
     1ce:	82 95       	swap	r24
     1d0:	92 95       	swap	r25
     1d2:	90 7f       	andi	r25, 0xF0	; 240
     1d4:	98 27       	eor	r25, r24
     1d6:	80 7f       	andi	r24, 0xF0	; 240
     1d8:	98 27       	eor	r25, r24
     1da:	92 2f       	mov	r25, r18
     1dc:	9f 70       	andi	r25, 0x0F	; 15
     1de:	89 2b       	or	r24, r25
     1e0:	8c 93       	st	X, r24
			LCDDR15 = (LCDDR15 & 0x0F) | (segment[3] << 4);
     1e2:	ab ef       	ldi	r26, 0xFB	; 251
     1e4:	b0 e0       	ldi	r27, 0x00	; 0
     1e6:	2c 91       	ld	r18, X
     1e8:	86 81       	ldd	r24, Z+6	; 0x06
     1ea:	97 81       	ldd	r25, Z+7	; 0x07
     1ec:	82 95       	swap	r24
     1ee:	92 95       	swap	r25
     1f0:	90 7f       	andi	r25, 0xF0	; 240
     1f2:	98 27       	eor	r25, r24
     1f4:	80 7f       	andi	r24, 0xF0	; 240
     1f6:	98 27       	eor	r25, r24
     1f8:	92 2f       	mov	r25, r18
     1fa:	9f 70       	andi	r25, 0x0F	; 15
     1fc:	89 2b       	or	r24, r25
     1fe:	8c 93       	st	X, r24
			break;
     200:	76 c0       	rjmp	.+236    	; 0x2ee <writeChar+0x1d0>
		case 2:
			LCDDR1 = (LCDDR1 & 0xF0) | segment[0];
     202:	ad ee       	ldi	r26, 0xED	; 237
     204:	b0 e0       	ldi	r27, 0x00	; 0
     206:	8c 91       	ld	r24, X
     208:	80 7f       	andi	r24, 0xF0	; 240
     20a:	90 81       	ld	r25, Z
     20c:	89 2b       	or	r24, r25
     20e:	8c 93       	st	X, r24
			LCDDR6 = (LCDDR6 & 0xF0) | segment[1];
     210:	a2 ef       	ldi	r26, 0xF2	; 242
     212:	b0 e0       	ldi	r27, 0x00	; 0
     214:	8c 91       	ld	r24, X
     216:	80 7f       	andi	r24, 0xF0	; 240
     218:	92 81       	ldd	r25, Z+2	; 0x02
     21a:	89 2b       	or	r24, r25
     21c:	8c 93       	st	X, r24
			LCDDR11 = (LCDDR11 & 0xF0) | segment[2];
     21e:	a7 ef       	ldi	r26, 0xF7	; 247
     220:	b0 e0       	ldi	r27, 0x00	; 0
     222:	8c 91       	ld	r24, X
     224:	80 7f       	andi	r24, 0xF0	; 240
     226:	94 81       	ldd	r25, Z+4	; 0x04
     228:	89 2b       	or	r24, r25
     22a:	8c 93       	st	X, r24
			LCDDR16 = (LCDDR16 & 0xF0) | segment[3];
     22c:	ac ef       	ldi	r26, 0xFC	; 252
     22e:	b0 e0       	ldi	r27, 0x00	; 0
     230:	8c 91       	ld	r24, X
     232:	80 7f       	andi	r24, 0xF0	; 240
     234:	96 81       	ldd	r25, Z+6	; 0x06
     236:	89 2b       	or	r24, r25
     238:	8c 93       	st	X, r24
			break;
     23a:	59 c0       	rjmp	.+178    	; 0x2ee <writeChar+0x1d0>
		case 3:
			LCDDR1 = (LCDDR1 & 0x0F) | (segment[0] << 4);
     23c:	ad ee       	ldi	r26, 0xED	; 237
     23e:	b0 e0       	ldi	r27, 0x00	; 0
     240:	2c 91       	ld	r18, X
     242:	80 81       	ld	r24, Z
     244:	91 81       	ldd	r25, Z+1	; 0x01
     246:	82 95       	swap	r24
     248:	92 95       	swap	r25
     24a:	90 7f       	andi	r25, 0xF0	; 240
     24c:	98 27       	eor	r25, r24
     24e:	80 7f       	andi	r24, 0xF0	; 240
     250:	98 27       	eor	r25, r24
     252:	92 2f       	mov	r25, r18
     254:	9f 70       	andi	r25, 0x0F	; 15
     256:	89 2b       	or	r24, r25
     258:	8c 93       	st	X, r24
			LCDDR6 = (LCDDR6 & 0x0F) | (segment[1] << 4);
     25a:	a2 ef       	ldi	r26, 0xF2	; 242
     25c:	b0 e0       	ldi	r27, 0x00	; 0
     25e:	2c 91       	ld	r18, X
     260:	82 81       	ldd	r24, Z+2	; 0x02
     262:	93 81       	ldd	r25, Z+3	; 0x03
     264:	82 95       	swap	r24
     266:	92 95       	swap	r25
     268:	90 7f       	andi	r25, 0xF0	; 240
     26a:	98 27       	eor	r25, r24
     26c:	80 7f       	andi	r24, 0xF0	; 240
     26e:	98 27       	eor	r25, r24
     270:	92 2f       	mov	r25, r18
     272:	9f 70       	andi	r25, 0x0F	; 15
     274:	89 2b       	or	r24, r25
     276:	8c 93       	st	X, r24
			LCDDR11 = (LCDDR11 & 0x0F) | (segment[2] << 4);
     278:	a7 ef       	ldi	r26, 0xF7	; 247
     27a:	b0 e0       	ldi	r27, 0x00	; 0
     27c:	2c 91       	ld	r18, X
     27e:	84 81       	ldd	r24, Z+4	; 0x04
     280:	95 81       	ldd	r25, Z+5	; 0x05
     282:	82 95       	swap	r24
     284:	92 95       	swap	r25
     286:	90 7f       	andi	r25, 0xF0	; 240
     288:	98 27       	eor	r25, r24
     28a:	80 7f       	andi	r24, 0xF0	; 240
     28c:	98 27       	eor	r25, r24
     28e:	92 2f       	mov	r25, r18
     290:	9f 70       	andi	r25, 0x0F	; 15
     292:	89 2b       	or	r24, r25
     294:	8c 93       	st	X, r24
			LCDDR16 = (LCDDR16 & 0x0F) | (segment[3] << 4);
     296:	ac ef       	ldi	r26, 0xFC	; 252
     298:	b0 e0       	ldi	r27, 0x00	; 0
     29a:	2c 91       	ld	r18, X
     29c:	86 81       	ldd	r24, Z+6	; 0x06
     29e:	97 81       	ldd	r25, Z+7	; 0x07
     2a0:	82 95       	swap	r24
     2a2:	92 95       	swap	r25
     2a4:	90 7f       	andi	r25, 0xF0	; 240
     2a6:	98 27       	eor	r25, r24
     2a8:	80 7f       	andi	r24, 0xF0	; 240
     2aa:	98 27       	eor	r25, r24
     2ac:	92 2f       	mov	r25, r18
     2ae:	9f 70       	andi	r25, 0x0F	; 15
     2b0:	89 2b       	or	r24, r25
     2b2:	8c 93       	st	X, r24
			break;
     2b4:	1c c0       	rjmp	.+56     	; 0x2ee <writeChar+0x1d0>
		case 4:
			LCDDR2 = (LCDDR2 & 0xF0) | segment[0];
     2b6:	ae ee       	ldi	r26, 0xEE	; 238
     2b8:	b0 e0       	ldi	r27, 0x00	; 0
     2ba:	8c 91       	ld	r24, X
     2bc:	80 7f       	andi	r24, 0xF0	; 240
     2be:	90 81       	ld	r25, Z
     2c0:	89 2b       	or	r24, r25
     2c2:	8c 93       	st	X, r24
			LCDDR7 = (LCDDR7 & 0xF0) | segment[1];
     2c4:	a3 ef       	ldi	r26, 0xF3	; 243
     2c6:	b0 e0       	ldi	r27, 0x00	; 0
     2c8:	8c 91       	ld	r24, X
     2ca:	80 7f       	andi	r24, 0xF0	; 240
     2cc:	92 81       	ldd	r25, Z+2	; 0x02
     2ce:	89 2b       	or	r24, r25
     2d0:	8c 93       	st	X, r24
			LCDDR12 = (LCDDR12 & 0xF0) | segment[2];
     2d2:	a8 ef       	ldi	r26, 0xF8	; 248
     2d4:	b0 e0       	ldi	r27, 0x00	; 0
     2d6:	8c 91       	ld	r24, X
     2d8:	80 7f       	andi	r24, 0xF0	; 240
     2da:	94 81       	ldd	r25, Z+4	; 0x04
     2dc:	89 2b       	or	r24, r25
     2de:	8c 93       	st	X, r24
			LCDDR17 = (LCDDR17 & 0xF0) | segment[3];
     2e0:	ad ef       	ldi	r26, 0xFD	; 253
     2e2:	b0 e0       	ldi	r27, 0x00	; 0
     2e4:	8c 91       	ld	r24, X
     2e6:	80 7f       	andi	r24, 0xF0	; 240
     2e8:	96 81       	ldd	r25, Z+6	; 0x06
     2ea:	89 2b       	or	r24, r25
     2ec:	8c 93       	st	X, r24
			break;
	}
}
     2ee:	cf 91       	pop	r28
     2f0:	08 95       	ret

000002f2 <printAt>:

void printAt(long num, int pos) {
     2f2:	8f 92       	push	r8
     2f4:	9f 92       	push	r9
     2f6:	af 92       	push	r10
     2f8:	bf 92       	push	r11
     2fa:	cf 92       	push	r12
     2fc:	df 92       	push	r13
     2fe:	ef 92       	push	r14
     300:	ff 92       	push	r15
     302:	cf 93       	push	r28
     304:	df 93       	push	r29
     306:	4b 01       	movw	r8, r22
     308:	5c 01       	movw	r10, r24
     30a:	ea 01       	movw	r28, r20
	writeChar((num % 100) / 10 + '0', pos);
     30c:	24 e6       	ldi	r18, 0x64	; 100
     30e:	30 e0       	ldi	r19, 0x00	; 0
     310:	40 e0       	ldi	r20, 0x00	; 0
     312:	50 e0       	ldi	r21, 0x00	; 0
     314:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <__divmodsi4>
     318:	0f 2e       	mov	r0, r31
     31a:	fa e0       	ldi	r31, 0x0A	; 10
     31c:	cf 2e       	mov	r12, r31
     31e:	d1 2c       	mov	r13, r1
     320:	e1 2c       	mov	r14, r1
     322:	f1 2c       	mov	r15, r1
     324:	f0 2d       	mov	r31, r0
     326:	a7 01       	movw	r20, r14
     328:	96 01       	movw	r18, r12
     32a:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <__divmodsi4>
     32e:	6c 2f       	mov	r22, r28
     330:	80 e3       	ldi	r24, 0x30	; 48
     332:	82 0f       	add	r24, r18
     334:	0e 94 8f 00 	call	0x11e	; 0x11e <writeChar>
	pos++;
	writeChar(num % 10 + '0', pos);
     338:	21 96       	adiw	r28, 0x01	; 1
     33a:	c5 01       	movw	r24, r10
     33c:	b4 01       	movw	r22, r8
     33e:	a7 01       	movw	r20, r14
     340:	96 01       	movw	r18, r12
     342:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <__divmodsi4>
     346:	86 2f       	mov	r24, r22
     348:	6c 2f       	mov	r22, r28
     34a:	80 5d       	subi	r24, 0xD0	; 208
     34c:	0e 94 8f 00 	call	0x11e	; 0x11e <writeChar>
}
     350:	df 91       	pop	r29
     352:	cf 91       	pop	r28
     354:	ff 90       	pop	r15
     356:	ef 90       	pop	r14
     358:	df 90       	pop	r13
     35a:	cf 90       	pop	r12
     35c:	bf 90       	pop	r11
     35e:	af 90       	pop	r10
     360:	9f 90       	pop	r9
     362:	8f 90       	pop	r8
     364:	08 95       	ret

00000366 <activeGenIndicator>:

void activeGenIndicator(GUI *self) {
	// Clear 1 and 2
	//LCDDR0 &= ~(0b01000100);
	//turn on 1 or 2
	if (self->activeGen == self->gen1) {
     366:	fc 01       	movw	r30, r24
     368:	20 85       	ldd	r18, Z+8	; 0x08
     36a:	31 85       	ldd	r19, Z+9	; 0x09
     36c:	84 81       	ldd	r24, Z+4	; 0x04
     36e:	95 81       	ldd	r25, Z+5	; 0x05
     370:	28 17       	cp	r18, r24
     372:	39 07       	cpc	r19, r25
     374:	31 f4       	brne	.+12     	; 0x382 <activeGenIndicator+0x1c>
		LCDDR0 |= 0b00000100;
     376:	ec ee       	ldi	r30, 0xEC	; 236
     378:	f0 e0       	ldi	r31, 0x00	; 0
     37a:	80 81       	ld	r24, Z
     37c:	84 60       	ori	r24, 0x04	; 4
     37e:	80 83       	st	Z, r24
     380:	08 95       	ret
	} else {
		LCDDR0 |= 0b01000000;
     382:	ec ee       	ldi	r30, 0xEC	; 236
     384:	f0 e0       	ldi	r31, 0x00	; 0
     386:	80 81       	ld	r24, Z
     388:	80 64       	ori	r24, 0x40	; 64
     38a:	80 83       	st	Z, r24
     38c:	08 95       	ret

0000038e <updateDisplay>:
		SYNC(self->activeGen, setFrequency, 0);
	}
	ASYNC(self, updateDisplay, 0);
}

void updateDisplay(GUI *self) {
     38e:	ef 92       	push	r14
     390:	ff 92       	push	r15
     392:	0f 93       	push	r16
     394:	1f 93       	push	r17
     396:	cf 93       	push	r28
     398:	df 93       	push	r29
     39a:	ec 01       	movw	r28, r24
	int gen1Freq = SYNC(self->gen1, getFrequency, 0);
     39c:	40 e0       	ldi	r20, 0x00	; 0
     39e:	50 e0       	ldi	r21, 0x00	; 0
     3a0:	65 e3       	ldi	r22, 0x35	; 53
     3a2:	73 e0       	ldi	r23, 0x03	; 3
     3a4:	8c 81       	ldd	r24, Y+4	; 0x04
     3a6:	9d 81       	ldd	r25, Y+5	; 0x05
     3a8:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <sync>
     3ac:	7c 01       	movw	r14, r24
	int gen2Freq = SYNC(self->gen2, getFrequency, 0);
     3ae:	40 e0       	ldi	r20, 0x00	; 0
     3b0:	50 e0       	ldi	r21, 0x00	; 0
     3b2:	65 e3       	ldi	r22, 0x35	; 53
     3b4:	73 e0       	ldi	r23, 0x03	; 3
     3b6:	8e 81       	ldd	r24, Y+6	; 0x06
     3b8:	9f 81       	ldd	r25, Y+7	; 0x07
     3ba:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <sync>
     3be:	8c 01       	movw	r16, r24
    printAt(gen1Freq, 0); //gen1 hz at pos 0-1
     3c0:	b7 01       	movw	r22, r14
     3c2:	ff 0c       	add	r15, r15
     3c4:	88 0b       	sbc	r24, r24
     3c6:	99 0b       	sbc	r25, r25
     3c8:	40 e0       	ldi	r20, 0x00	; 0
     3ca:	50 e0       	ldi	r21, 0x00	; 0
     3cc:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printAt>
    printAt(gen2Freq, 3); //gen2 hz at pos 3-4
     3d0:	b8 01       	movw	r22, r16
     3d2:	11 0f       	add	r17, r17
     3d4:	88 0b       	sbc	r24, r24
     3d6:	99 0b       	sbc	r25, r25
     3d8:	43 e0       	ldi	r20, 0x03	; 3
     3da:	50 e0       	ldi	r21, 0x00	; 0
     3dc:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printAt>
	activeGenIndicator(self);
     3e0:	ce 01       	movw	r24, r28
     3e2:	0e 94 b3 01 	call	0x366	; 0x366 <activeGenIndicator>
     3e6:	df 91       	pop	r29
     3e8:	cf 91       	pop	r28
     3ea:	1f 91       	pop	r17
     3ec:	0f 91       	pop	r16
     3ee:	ff 90       	pop	r15
     3f0:	ef 90       	pop	r14
     3f2:	08 95       	ret

000003f4 <swithToLeftGen>:
	} else {
		LCDDR0 |= 0b01000000;
	}
}

void swithToLeftGen(GUI *self) {
     3f4:	cf 92       	push	r12
     3f6:	df 92       	push	r13
     3f8:	ef 92       	push	r14
     3fa:	ff 92       	push	r15
     3fc:	0f 93       	push	r16
     3fe:	1f 93       	push	r17
	self->activeGen = self->gen1;
     400:	fc 01       	movw	r30, r24
     402:	24 81       	ldd	r18, Z+4	; 0x04
     404:	35 81       	ldd	r19, Z+5	; 0x05
     406:	31 87       	std	Z+9, r19	; 0x09
     408:	20 87       	std	Z+8, r18	; 0x08
	ASYNC(self, updateDisplay, 0);
     40a:	c1 2c       	mov	r12, r1
     40c:	d1 2c       	mov	r13, r1
     40e:	0f 2e       	mov	r0, r31
     410:	f7 ec       	ldi	r31, 0xC7	; 199
     412:	ef 2e       	mov	r14, r31
     414:	f1 e0       	ldi	r31, 0x01	; 1
     416:	ff 2e       	mov	r15, r31
     418:	f0 2d       	mov	r31, r0
     41a:	8c 01       	movw	r16, r24
     41c:	20 e0       	ldi	r18, 0x00	; 0
     41e:	30 e0       	ldi	r19, 0x00	; 0
     420:	a9 01       	movw	r20, r18
     422:	60 e0       	ldi	r22, 0x00	; 0
     424:	70 e0       	ldi	r23, 0x00	; 0
     426:	cb 01       	movw	r24, r22
     428:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <async>
}
     42c:	1f 91       	pop	r17
     42e:	0f 91       	pop	r16
     430:	ff 90       	pop	r15
     432:	ef 90       	pop	r14
     434:	df 90       	pop	r13
     436:	cf 90       	pop	r12
     438:	08 95       	ret

0000043a <swithToRightGen>:

void swithToRightGen(GUI *self) {
     43a:	cf 92       	push	r12
     43c:	df 92       	push	r13
     43e:	ef 92       	push	r14
     440:	ff 92       	push	r15
     442:	0f 93       	push	r16
     444:	1f 93       	push	r17
	self->activeGen = self->gen2;
     446:	fc 01       	movw	r30, r24
     448:	26 81       	ldd	r18, Z+6	; 0x06
     44a:	37 81       	ldd	r19, Z+7	; 0x07
     44c:	31 87       	std	Z+9, r19	; 0x09
     44e:	20 87       	std	Z+8, r18	; 0x08
	ASYNC(self, updateDisplay, 0);
     450:	c1 2c       	mov	r12, r1
     452:	d1 2c       	mov	r13, r1
     454:	0f 2e       	mov	r0, r31
     456:	f7 ec       	ldi	r31, 0xC7	; 199
     458:	ef 2e       	mov	r14, r31
     45a:	f1 e0       	ldi	r31, 0x01	; 1
     45c:	ff 2e       	mov	r15, r31
     45e:	f0 2d       	mov	r31, r0
     460:	8c 01       	movw	r16, r24
     462:	20 e0       	ldi	r18, 0x00	; 0
     464:	30 e0       	ldi	r19, 0x00	; 0
     466:	a9 01       	movw	r20, r18
     468:	60 e0       	ldi	r22, 0x00	; 0
     46a:	70 e0       	ldi	r23, 0x00	; 0
     46c:	cb 01       	movw	r24, r22
     46e:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <async>
}
     472:	1f 91       	pop	r17
     474:	0f 91       	pop	r16
     476:	ff 90       	pop	r15
     478:	ef 90       	pop	r14
     47a:	df 90       	pop	r13
     47c:	cf 90       	pop	r12
     47e:	08 95       	ret

00000480 <adjustFrequency>:

void adjustFrequency(GUI *self, int delta) {
     480:	cf 92       	push	r12
     482:	df 92       	push	r13
     484:	ef 92       	push	r14
     486:	ff 92       	push	r15
     488:	0f 93       	push	r16
     48a:	1f 93       	push	r17
     48c:	cf 93       	push	r28
     48e:	df 93       	push	r29
     490:	8c 01       	movw	r16, r24
     492:	eb 01       	movw	r28, r22
	// Get right target gen
	int newFreq = SYNC(self->activeGen, getFrequency, 0) + delta;
     494:	40 e0       	ldi	r20, 0x00	; 0
     496:	50 e0       	ldi	r21, 0x00	; 0
     498:	65 e3       	ldi	r22, 0x35	; 53
     49a:	73 e0       	ldi	r23, 0x03	; 3
     49c:	fc 01       	movw	r30, r24
     49e:	80 85       	ldd	r24, Z+8	; 0x08
     4a0:	91 85       	ldd	r25, Z+9	; 0x09
     4a2:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <sync>
     4a6:	ac 01       	movw	r20, r24
     4a8:	4c 0f       	add	r20, r28
     4aa:	5d 1f       	adc	r21, r29
	if (newFreq < 0) newFreq = 0;
	// Update everything
	SYNC(self->activeGen, setFrequency, newFreq);
     4ac:	55 23       	and	r21, r21
     4ae:	14 f4       	brge	.+4      	; 0x4b4 <adjustFrequency+0x34>
     4b0:	40 e0       	ldi	r20, 0x00	; 0
     4b2:	50 e0       	ldi	r21, 0x00	; 0
     4b4:	65 e2       	ldi	r22, 0x25	; 37
     4b6:	73 e0       	ldi	r23, 0x03	; 3
     4b8:	f8 01       	movw	r30, r16
     4ba:	80 85       	ldd	r24, Z+8	; 0x08
     4bc:	91 85       	ldd	r25, Z+9	; 0x09
     4be:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <sync>
	ASYNC(self, updateDisplay, 0);
     4c2:	c1 2c       	mov	r12, r1
     4c4:	d1 2c       	mov	r13, r1
     4c6:	0f 2e       	mov	r0, r31
     4c8:	f7 ec       	ldi	r31, 0xC7	; 199
     4ca:	ef 2e       	mov	r14, r31
     4cc:	f1 e0       	ldi	r31, 0x01	; 1
     4ce:	ff 2e       	mov	r15, r31
     4d0:	f0 2d       	mov	r31, r0
     4d2:	20 e0       	ldi	r18, 0x00	; 0
     4d4:	30 e0       	ldi	r19, 0x00	; 0
     4d6:	a9 01       	movw	r20, r18
     4d8:	60 e0       	ldi	r22, 0x00	; 0
     4da:	70 e0       	ldi	r23, 0x00	; 0
     4dc:	cb 01       	movw	r24, r22
     4de:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <async>
}
     4e2:	df 91       	pop	r29
     4e4:	cf 91       	pop	r28
     4e6:	1f 91       	pop	r17
     4e8:	0f 91       	pop	r16
     4ea:	ff 90       	pop	r15
     4ec:	ef 90       	pop	r14
     4ee:	df 90       	pop	r13
     4f0:	cf 90       	pop	r12
     4f2:	08 95       	ret

000004f4 <saveRestore>:

void saveRestore(GUI *self) {
     4f4:	cf 92       	push	r12
     4f6:	df 92       	push	r13
     4f8:	ef 92       	push	r14
     4fa:	ff 92       	push	r15
     4fc:	0f 93       	push	r16
     4fe:	1f 93       	push	r17
     500:	cf 93       	push	r28
     502:	df 93       	push	r29
     504:	ec 01       	movw	r28, r24
	if (SYNC(self->activeGen, getFrequency, 0) == 0) {
     506:	40 e0       	ldi	r20, 0x00	; 0
     508:	50 e0       	ldi	r21, 0x00	; 0
     50a:	65 e3       	ldi	r22, 0x35	; 53
     50c:	73 e0       	ldi	r23, 0x03	; 3
     50e:	88 85       	ldd	r24, Y+8	; 0x08
     510:	99 85       	ldd	r25, Y+9	; 0x09
     512:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <sync>
     516:	89 2b       	or	r24, r25
     518:	49 f4       	brne	.+18     	; 0x52c <__stack+0x2d>
		SYNC(self->activeGen, restore, 0);
     51a:	40 e0       	ldi	r20, 0x00	; 0
     51c:	50 e0       	ldi	r21, 0x00	; 0
     51e:	6f e2       	ldi	r22, 0x2F	; 47
     520:	73 e0       	ldi	r23, 0x03	; 3
     522:	88 85       	ldd	r24, Y+8	; 0x08
     524:	99 85       	ldd	r25, Y+9	; 0x09
     526:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <sync>
     52a:	10 c0       	rjmp	.+32     	; 0x54c <__stack+0x4d>
		} else {
		SYNC(self->activeGen, save, 0);
     52c:	40 e0       	ldi	r20, 0x00	; 0
     52e:	50 e0       	ldi	r21, 0x00	; 0
     530:	69 e2       	ldi	r22, 0x29	; 41
     532:	73 e0       	ldi	r23, 0x03	; 3
     534:	88 85       	ldd	r24, Y+8	; 0x08
     536:	99 85       	ldd	r25, Y+9	; 0x09
     538:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <sync>
		SYNC(self->activeGen, setFrequency, 0);
     53c:	40 e0       	ldi	r20, 0x00	; 0
     53e:	50 e0       	ldi	r21, 0x00	; 0
     540:	65 e2       	ldi	r22, 0x25	; 37
     542:	73 e0       	ldi	r23, 0x03	; 3
     544:	88 85       	ldd	r24, Y+8	; 0x08
     546:	99 85       	ldd	r25, Y+9	; 0x09
     548:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <sync>
	}
	ASYNC(self, updateDisplay, 0);
     54c:	c1 2c       	mov	r12, r1
     54e:	d1 2c       	mov	r13, r1
     550:	0f 2e       	mov	r0, r31
     552:	f7 ec       	ldi	r31, 0xC7	; 199
     554:	ef 2e       	mov	r14, r31
     556:	f1 e0       	ldi	r31, 0x01	; 1
     558:	ff 2e       	mov	r15, r31
     55a:	f0 2d       	mov	r31, r0
     55c:	8e 01       	movw	r16, r28
     55e:	20 e0       	ldi	r18, 0x00	; 0
     560:	30 e0       	ldi	r19, 0x00	; 0
     562:	a9 01       	movw	r20, r18
     564:	60 e0       	ldi	r22, 0x00	; 0
     566:	70 e0       	ldi	r23, 0x00	; 0
     568:	cb 01       	movw	r24, r22
     56a:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <async>
}
     56e:	df 91       	pop	r29
     570:	cf 91       	pop	r28
     572:	1f 91       	pop	r17
     574:	0f 91       	pop	r16
     576:	ff 90       	pop	r15
     578:	ef 90       	pop	r14
     57a:	df 90       	pop	r13
     57c:	cf 90       	pop	r12
     57e:	08 95       	ret

00000580 <joystickInit>:
#include "PulseGen.h"


void joystickInit() {
    // Input for: Down, Up, Click
    PORTB |= (1 << PB7) | (1 << PB6) | (1 << PB4);
     580:	85 b1       	in	r24, 0x05	; 5
     582:	80 6d       	ori	r24, 0xD0	; 208
     584:	85 b9       	out	0x05, r24	; 5
    //Input for; Left, Right
    PORTE |= (1 << PE3) | (1 << PE2);
     586:	8e b1       	in	r24, 0x0e	; 14
     588:	8c 60       	ori	r24, 0x0C	; 12
     58a:	8e b9       	out	0x0e, r24	; 14
    // Turn on interrupts
    EIMSK |= (1 << PCINT15) | (1 << PCINT14);
     58c:	8d b3       	in	r24, 0x1d	; 29
     58e:	80 6c       	ori	r24, 0xC0	; 192
     590:	8d bb       	out	0x1d, r24	; 29

    // Define interrupts from PB7,6,4
    PCMSK1 |= (1 << PCINT15) | (1 << PCINT14) | (1 << PCINT12);
     592:	ec e6       	ldi	r30, 0x6C	; 108
     594:	f0 e0       	ldi	r31, 0x00	; 0
     596:	80 81       	ld	r24, Z
     598:	80 6d       	ori	r24, 0xD0	; 208
     59a:	80 83       	st	Z, r24
    // Define interrupts from PE3,2
    PCMSK0 |= (1 << PCINT3) | (1 << PCINT2);
     59c:	eb e6       	ldi	r30, 0x6B	; 107
     59e:	f0 e0       	ldi	r31, 0x00	; 0
     5a0:	80 81       	ld	r24, Z
     5a2:	8c 60       	ori	r24, 0x0C	; 12
     5a4:	80 83       	st	Z, r24
     5a6:	08 95       	ret

000005a8 <joysticckInteruptHandler>:
}


// Joystick input handler
void joysticckInteruptHandler(JoystickHandler *self) { 
     5a8:	cf 93       	push	r28
     5aa:	df 93       	push	r29
     5ac:	ec 01       	movw	r28, r24
    // Down
    if (!(PINB & (1 << PB7))) {
     5ae:	1f 99       	sbic	0x03, 7	; 3
     5b0:	06 c0       	rjmp	.+12     	; 0x5be <joysticckInteruptHandler+0x16>
        adjustFrequency(self->gui, -1);
     5b2:	6f ef       	ldi	r22, 0xFF	; 255
     5b4:	7f ef       	ldi	r23, 0xFF	; 255
     5b6:	8c 81       	ldd	r24, Y+4	; 0x04
     5b8:	9d 81       	ldd	r25, Y+5	; 0x05
     5ba:	0e 94 40 02 	call	0x480	; 0x480 <adjustFrequency>
    }
    // Up
    if (!(PINB & (1 << PB6))) {
     5be:	1e 99       	sbic	0x03, 6	; 3
     5c0:	06 c0       	rjmp	.+12     	; 0x5ce <joysticckInteruptHandler+0x26>
        adjustFrequency(self->gui, 1);
     5c2:	61 e0       	ldi	r22, 0x01	; 1
     5c4:	70 e0       	ldi	r23, 0x00	; 0
     5c6:	8c 81       	ldd	r24, Y+4	; 0x04
     5c8:	9d 81       	ldd	r25, Y+5	; 0x05
     5ca:	0e 94 40 02 	call	0x480	; 0x480 <adjustFrequency>
    }
    // In
    if (!(PINB & (1 << PB4))) {
     5ce:	1c 99       	sbic	0x03, 4	; 3
     5d0:	04 c0       	rjmp	.+8      	; 0x5da <joysticckInteruptHandler+0x32>
        saveRestore(self->gui);
     5d2:	8c 81       	ldd	r24, Y+4	; 0x04
     5d4:	9d 81       	ldd	r25, Y+5	; 0x05
     5d6:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <saveRestore>
    }
    // Left
    if (!(PINE & (1 << PB2))) {
     5da:	62 99       	sbic	0x0c, 2	; 12
     5dc:	04 c0       	rjmp	.+8      	; 0x5e6 <joysticckInteruptHandler+0x3e>
        swithToLeftGen(self->gui);
     5de:	8c 81       	ldd	r24, Y+4	; 0x04
     5e0:	9d 81       	ldd	r25, Y+5	; 0x05
     5e2:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <swithToLeftGen>
    }
    // Right
    if (!(PINE & (1 << PB3))) {
     5e6:	63 99       	sbic	0x0c, 3	; 12
     5e8:	04 c0       	rjmp	.+8      	; 0x5f2 <joysticckInteruptHandler+0x4a>
        swithToRightGen(self->gui);
     5ea:	8c 81       	ldd	r24, Y+4	; 0x04
     5ec:	9d 81       	ldd	r25, Y+5	; 0x05
     5ee:	0e 94 1d 02 	call	0x43a	; 0x43a <swithToRightGen>
    }
     5f2:	df 91       	pop	r29
     5f4:	cf 91       	pop	r28
     5f6:	08 95       	ret

000005f8 <sysInit>:
GUI gui = initGUI(&gen1, &gen2);
JoystickHandler joystick = initJoystickHandler(&gui);

void sysInit(){
    // Clock Prescale Register "maximum speed"
	CLKPR = 0b10000000; // Clock Prescaler Change Enable
     5f8:	e1 e6       	ldi	r30, 0x61	; 97
     5fa:	f0 e0       	ldi	r31, 0x00	; 0
     5fc:	80 e8       	ldi	r24, 0x80	; 128
     5fe:	80 83       	st	Z, r24
	CLKPR = 0b00000000; // Set 0 for sysclock
     600:	10 82       	st	Z, r1
     602:	08 95       	ret

00000604 <pinOutputInit>:
}

void pinOutputInit(){
    // Initialize Port E as output for PE4 and PE6
	DDRE |= (1 << PE4) | (1 << PE6);
     604:	8d b1       	in	r24, 0x0d	; 13
     606:	80 65       	ori	r24, 0x50	; 80
     608:	8d b9       	out	0x0d, r24	; 13
     60a:	08 95       	ret

0000060c <main>:
}


int main() {
    sysInit();
     60c:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <sysInit>
    pinOutputInit();
     610:	0e 94 02 03 	call	0x604	; 0x604 <pinOutputInit>
    joystickInit();
     614:	0e 94 c0 02 	call	0x580	; 0x580 <joystickInit>
    LCD_init();
     618:	0e 94 57 00 	call	0xae	; 0xae <LCD_init>
	//LCDDR0 = 0b01000100;
	//LCDDR0 = 0b01000100;
	
    // Instal interupt handler
    //when the joystick's vertical state changes
    INSTALL(&joystick, joysticckInteruptHandler, IRQ_PCINT0);
     61c:	41 e0       	ldi	r20, 0x01	; 1
     61e:	64 ed       	ldi	r22, 0xD4	; 212
     620:	72 e0       	ldi	r23, 0x02	; 2
     622:	80 e5       	ldi	r24, 0x50	; 80
     624:	91 e0       	ldi	r25, 0x01	; 1
     626:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <install>
	INSTALL(&joystick, joysticckInteruptHandler, IRQ_PCINT1);
     62a:	42 e0       	ldi	r20, 0x02	; 2
     62c:	64 ed       	ldi	r22, 0xD4	; 212
     62e:	72 e0       	ldi	r23, 0x02	; 2
     630:	80 e5       	ldi	r24, 0x50	; 80
     632:	91 e0       	ldi	r25, 0x01	; 1
     634:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <install>
    //when the joystick's horizontal (minus middle) state changes
    
    // Start kernel
    return TINYTIMBER(&gui, NULL, NULL);
     638:	40 e0       	ldi	r20, 0x00	; 0
     63a:	50 e0       	ldi	r21, 0x00	; 0
     63c:	60 e0       	ldi	r22, 0x00	; 0
     63e:	70 e0       	ldi	r23, 0x00	; 0
     640:	86 e5       	ldi	r24, 0x56	; 86
     642:	91 e0       	ldi	r25, 0x01	; 1
     644:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <tinytimber>
}
     648:	08 95       	ret

0000064a <setFrequency>:
#include "PortWrite.h"
#include "TinyTimber.h"


void setFrequency(PulseGen *self, int freq) {
	self->frequency = freq;
     64a:	fc 01       	movw	r30, r24
     64c:	71 87       	std	Z+9, r23	; 0x09
     64e:	60 87       	std	Z+8, r22	; 0x08
     650:	08 95       	ret

00000652 <save>:
    }
}

// Saves the freq
void save(PulseGen *self) {
	self->saved_freq = self->frequency;
     652:	fc 01       	movw	r30, r24
     654:	20 85       	ldd	r18, Z+8	; 0x08
     656:	31 85       	ldd	r19, Z+9	; 0x09
     658:	33 87       	std	Z+11, r19	; 0x0b
     65a:	22 87       	std	Z+10, r18	; 0x0a
     65c:	08 95       	ret

0000065e <restore>:
}

// Restores freq to last saved
void restore(PulseGen *self) {
	self->frequency = self->saved_freq;
     65e:	fc 01       	movw	r30, r24
     660:	22 85       	ldd	r18, Z+10	; 0x0a
     662:	33 85       	ldd	r19, Z+11	; 0x0b
     664:	31 87       	std	Z+9, r19	; 0x09
     666:	20 87       	std	Z+8, r18	; 0x08
     668:	08 95       	ret

0000066a <getFrequency>:
}

int getFrequency(PulseGen *self) {
	return self->frequency;
}
     66a:	fc 01       	movw	r30, r24
     66c:	80 85       	ldd	r24, Z+8	; 0x08
     66e:	91 85       	ldd	r25, Z+9	; 0x09
     670:	08 95       	ret

00000672 <initialize>:
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
}
     672:	cf 93       	push	r28
     674:	df 93       	push	r29
     676:	00 d0       	rcall	.+0      	; 0x678 <initialize+0x6>
     678:	00 d0       	rcall	.+0      	; 0x67a <initialize+0x8>
     67a:	cd b7       	in	r28, 0x3d	; 61
     67c:	de b7       	in	r29, 0x3e	; 62
     67e:	8f e7       	ldi	r24, 0x7F	; 127
     680:	92 e0       	ldi	r25, 0x02	; 2
     682:	2f e5       	ldi	r18, 0x5F	; 95
     684:	33 e0       	ldi	r19, 0x03	; 3
     686:	fc 01       	movw	r30, r24
     688:	70 97       	sbiw	r30, 0x10	; 16
     68a:	91 83       	std	Z+1, r25	; 0x01
     68c:	80 83       	st	Z, r24
     68e:	40 96       	adiw	r24, 0x10	; 16
     690:	82 17       	cp	r24, r18
     692:	93 07       	cpc	r25, r19
     694:	c1 f7       	brne	.-16     	; 0x686 <initialize+0x14>
     696:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <messages+0xe1>
     69a:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <messages+0xe0>
     69e:	ea eb       	ldi	r30, 0xBA	; 186
     6a0:	f1 e0       	ldi	r31, 0x01	; 1
     6a2:	87 ed       	ldi	r24, 0xD7	; 215
     6a4:	91 e0       	ldi	r25, 0x01	; 1
     6a6:	91 83       	std	Z+1, r25	; 0x01
     6a8:	80 83       	st	Z, r24
     6aa:	84 ef       	ldi	r24, 0xF4	; 244
     6ac:	91 e0       	ldi	r25, 0x01	; 1
     6ae:	96 8f       	std	Z+30, r25	; 0x1e
     6b0:	85 8f       	std	Z+29, r24	; 0x1d
     6b2:	a1 e1       	ldi	r26, 0x11	; 17
     6b4:	b2 e0       	ldi	r27, 0x02	; 2
     6b6:	b3 af       	std	Z+59, r27	; 0x3b
     6b8:	a2 af       	std	Z+58, r26	; 0x3a
     6ba:	1d 92       	st	X+, r1
     6bc:	1c 92       	st	X, r1
     6be:	fa 83       	std	Y+2, r31	; 0x02
     6c0:	e9 83       	std	Y+1, r30	; 0x01
     6c2:	eb eb       	ldi	r30, 0xBB	; 187
     6c4:	f3 e0       	ldi	r31, 0x03	; 3
     6c6:	fc 83       	std	Y+4, r31	; 0x04
     6c8:	eb 83       	std	Y+3, r30	; 0x03
     6ca:	89 81       	ldd	r24, Y+1	; 0x01
     6cc:	9a 81       	ldd	r25, Y+2	; 0x02
     6ce:	06 96       	adiw	r24, 0x06	; 6
     6d0:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <setjmp>
     6d4:	8b 81       	ldd	r24, Y+3	; 0x03
     6d6:	9c 81       	ldd	r25, Y+4	; 0x04
     6d8:	e9 81       	ldd	r30, Y+1	; 0x01
     6da:	fa 81       	ldd	r31, Y+2	; 0x02
     6dc:	97 8b       	std	Z+23, r25	; 0x17
     6de:	86 8b       	std	Z+22, r24	; 0x16
     6e0:	91 8f       	std	Z+25, r25	; 0x19
     6e2:	80 8f       	std	Z+24, r24	; 0x18
     6e4:	89 ed       	ldi	r24, 0xD9	; 217
     6e6:	9e e0       	ldi	r25, 0x0E	; 14
     6e8:	94 8f       	std	Z+28, r25	; 0x1c
     6ea:	83 8f       	std	Z+27, r24	; 0x1b
     6ec:	15 82       	std	Z+5, r1	; 0x05
     6ee:	14 82       	std	Z+4, r1	; 0x04
     6f0:	7d 96       	adiw	r30, 0x1d	; 29
     6f2:	fa 83       	std	Y+2, r31	; 0x02
     6f4:	e9 83       	std	Y+1, r30	; 0x01
     6f6:	eb 81       	ldd	r30, Y+3	; 0x03
     6f8:	fc 81       	ldd	r31, Y+4	; 0x04
     6fa:	e0 5a       	subi	r30, 0xA0	; 160
     6fc:	ff 4f       	sbci	r31, 0xFF	; 255
     6fe:	fc 83       	std	Y+4, r31	; 0x04
     700:	eb 83       	std	Y+3, r30	; 0x03
     702:	89 81       	ldd	r24, Y+1	; 0x01
     704:	9a 81       	ldd	r25, Y+2	; 0x02
     706:	8e 52       	subi	r24, 0x2E	; 46
     708:	92 40       	sbci	r25, 0x02	; 2
     70a:	f9 f6       	brne	.-66     	; 0x6ca <initialize+0x58>
     70c:	e2 e5       	ldi	r30, 0x52	; 82
     70e:	f2 e0       	ldi	r31, 0x02	; 2
     710:	11 82       	std	Z+1, r1	; 0x01
     712:	10 82       	st	Z, r1
     714:	15 82       	std	Z+5, r1	; 0x05
     716:	14 82       	std	Z+4, r1	; 0x04
     718:	13 82       	std	Z+3, r1	; 0x03
     71a:	12 82       	std	Z+2, r1	; 0x02
     71c:	e1 e6       	ldi	r30, 0x61	; 97
     71e:	f0 e0       	ldi	r31, 0x00	; 0
     720:	80 e8       	ldi	r24, 0x80	; 128
     722:	80 83       	st	Z, r24
     724:	10 82       	st	Z, r1
     726:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     72a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     72e:	84 e0       	ldi	r24, 0x04	; 4
     730:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     734:	81 e0       	ldi	r24, 0x01	; 1
     736:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
     73a:	0f 90       	pop	r0
     73c:	0f 90       	pop	r0
     73e:	0f 90       	pop	r0
     740:	0f 90       	pop	r0
     742:	df 91       	pop	r29
     744:	cf 91       	pop	r28
     746:	08 95       	ret

00000748 <dispatch>:
     748:	cf 93       	push	r28
     74a:	df 93       	push	r29
     74c:	00 d0       	rcall	.+0      	; 0x74e <dispatch+0x6>
     74e:	cd b7       	in	r28, 0x3d	; 61
     750:	de b7       	in	r29, 0x3e	; 62
     752:	9a 83       	std	Y+2, r25	; 0x02
     754:	89 83       	std	Y+1, r24	; 0x01
     756:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <current>
     75a:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <current+0x1>
     75e:	06 96       	adiw	r24, 0x06	; 6
     760:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <setjmp>
     764:	89 2b       	or	r24, r25
     766:	59 f4       	brne	.+22     	; 0x77e <dispatch+0x36>
     768:	89 81       	ldd	r24, Y+1	; 0x01
     76a:	9a 81       	ldd	r25, Y+2	; 0x02
     76c:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <current+0x1>
     770:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <current>
     774:	61 e0       	ldi	r22, 0x01	; 1
     776:	70 e0       	ldi	r23, 0x00	; 0
     778:	06 96       	adiw	r24, 0x06	; 6
     77a:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <longjmp>
     77e:	0f 90       	pop	r0
     780:	0f 90       	pop	r0
     782:	df 91       	pop	r29
     784:	cf 91       	pop	r28
     786:	08 95       	ret

00000788 <schedule>:
     788:	0f 93       	push	r16
     78a:	1f 93       	push	r17
     78c:	cf 93       	push	r28
     78e:	df 93       	push	r29
     790:	e0 91 94 01 	lds	r30, 0x0194	; 0x800194 <msgQ>
     794:	f0 91 95 01 	lds	r31, 0x0195	; 0x800195 <msgQ+0x1>
     798:	30 97       	sbiw	r30, 0x00	; 0
     79a:	61 f1       	breq	.+88     	; 0x7f4 <schedule+0x6c>
     79c:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <threadPool>
     7a0:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <threadPool+0x1>
     7a4:	00 97       	sbiw	r24, 0x00	; 0
     7a6:	31 f1       	breq	.+76     	; 0x7f4 <schedule+0x6c>
     7a8:	c0 91 7e 01 	lds	r28, 0x017E	; 0x80017e <activeStack>
     7ac:	d0 91 7f 01 	lds	r29, 0x017F	; 0x80017f <activeStack+0x1>
     7b0:	aa 81       	ldd	r26, Y+2	; 0x02
     7b2:	bb 81       	ldd	r27, Y+3	; 0x03
     7b4:	10 97       	sbiw	r26, 0x00	; 0
     7b6:	79 f0       	breq	.+30     	; 0x7d6 <schedule+0x4e>
     7b8:	46 81       	ldd	r20, Z+6	; 0x06
     7ba:	57 81       	ldd	r21, Z+7	; 0x07
     7bc:	60 85       	ldd	r22, Z+8	; 0x08
     7be:	71 85       	ldd	r23, Z+9	; 0x09
     7c0:	16 96       	adiw	r26, 0x06	; 6
     7c2:	0d 91       	ld	r16, X+
     7c4:	1d 91       	ld	r17, X+
     7c6:	2d 91       	ld	r18, X+
     7c8:	3c 91       	ld	r19, X
     7ca:	19 97       	sbiw	r26, 0x09	; 9
     7cc:	40 1b       	sub	r20, r16
     7ce:	51 0b       	sbc	r21, r17
     7d0:	62 0b       	sbc	r22, r18
     7d2:	73 0b       	sbc	r23, r19
     7d4:	7a f4       	brpl	.+30     	; 0x7f4 <schedule+0x6c>
     7d6:	fc 01       	movw	r30, r24
     7d8:	20 81       	ld	r18, Z
     7da:	31 81       	ldd	r19, Z+1	; 0x01
     7dc:	30 93 81 01 	sts	0x0181, r19	; 0x800181 <threadPool+0x1>
     7e0:	20 93 80 01 	sts	0x0180, r18	; 0x800180 <threadPool>
     7e4:	d1 83       	std	Z+1, r29	; 0x01
     7e6:	c0 83       	st	Z, r28
     7e8:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <activeStack+0x1>
     7ec:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <activeStack>
     7f0:	0e 94 a4 03 	call	0x748	; 0x748 <dispatch>
     7f4:	df 91       	pop	r29
     7f6:	cf 91       	pop	r28
     7f8:	1f 91       	pop	r17
     7fa:	0f 91       	pop	r16
     7fc:	08 95       	ret

000007fe <__vector_1>:
     7fe:	1f 92       	push	r1
     800:	0f 92       	push	r0
     802:	0f b6       	in	r0, 0x3f	; 63
     804:	0f 92       	push	r0
     806:	11 24       	eor	r1, r1
     808:	2f 93       	push	r18
     80a:	3f 93       	push	r19
     80c:	4f 93       	push	r20
     80e:	5f 93       	push	r21
     810:	6f 93       	push	r22
     812:	7f 93       	push	r23
     814:	8f 93       	push	r24
     816:	9f 93       	push	r25
     818:	af 93       	push	r26
     81a:	bf 93       	push	r27
     81c:	ef 93       	push	r30
     81e:	ff 93       	push	r31
     820:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     824:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     828:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     82c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     830:	c9 01       	movw	r24, r18
     832:	03 2e       	mov	r0, r19
     834:	00 0c       	add	r0, r0
     836:	aa 0b       	sbc	r26, r26
     838:	bb 0b       	sbc	r27, r27
     83a:	dc 01       	movw	r26, r24
     83c:	99 27       	eor	r25, r25
     83e:	88 27       	eor	r24, r24
     840:	60 e0       	ldi	r22, 0x00	; 0
     842:	70 e0       	ldi	r23, 0x00	; 0
     844:	84 2b       	or	r24, r20
     846:	95 2b       	or	r25, r21
     848:	a6 2b       	or	r26, r22
     84a:	b7 2b       	or	r27, r23
     84c:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     850:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     854:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     858:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     85c:	b0 9b       	sbis	0x16, 0	; 22
     85e:	1b c0       	rjmp	.+54     	; 0x896 <__vector_1+0x98>
     860:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     864:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     868:	c9 01       	movw	r24, r18
     86a:	01 96       	adiw	r24, 0x01	; 1
     86c:	09 2e       	mov	r0, r25
     86e:	00 0c       	add	r0, r0
     870:	aa 0b       	sbc	r26, r26
     872:	bb 0b       	sbc	r27, r27
     874:	dc 01       	movw	r26, r24
     876:	99 27       	eor	r25, r25
     878:	88 27       	eor	r24, r24
     87a:	60 e0       	ldi	r22, 0x00	; 0
     87c:	70 e0       	ldi	r23, 0x00	; 0
     87e:	84 2b       	or	r24, r20
     880:	95 2b       	or	r25, r21
     882:	a6 2b       	or	r26, r22
     884:	b7 2b       	or	r27, r23
     886:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     88a:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     88e:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     892:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     896:	e0 91 2e 02 	lds	r30, 0x022E	; 0x80022e <mtable>
     89a:	f0 91 2f 02 	lds	r31, 0x022F	; 0x80022f <mtable+0x1>
     89e:	30 97       	sbiw	r30, 0x00	; 0
     8a0:	39 f0       	breq	.+14     	; 0x8b0 <__vector_1+0xb2>
     8a2:	60 e0       	ldi	r22, 0x00	; 0
     8a4:	70 e0       	ldi	r23, 0x00	; 0
     8a6:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <otable>
     8aa:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <otable+0x1>
     8ae:	09 95       	icall
     8b0:	0e 94 c4 03 	call	0x788	; 0x788 <schedule>
     8b4:	ff 91       	pop	r31
     8b6:	ef 91       	pop	r30
     8b8:	bf 91       	pop	r27
     8ba:	af 91       	pop	r26
     8bc:	9f 91       	pop	r25
     8be:	8f 91       	pop	r24
     8c0:	7f 91       	pop	r23
     8c2:	6f 91       	pop	r22
     8c4:	5f 91       	pop	r21
     8c6:	4f 91       	pop	r20
     8c8:	3f 91       	pop	r19
     8ca:	2f 91       	pop	r18
     8cc:	0f 90       	pop	r0
     8ce:	0f be       	out	0x3f, r0	; 63
     8d0:	0f 90       	pop	r0
     8d2:	1f 90       	pop	r1
     8d4:	18 95       	reti

000008d6 <__vector_2>:
     8d6:	1f 92       	push	r1
     8d8:	0f 92       	push	r0
     8da:	0f b6       	in	r0, 0x3f	; 63
     8dc:	0f 92       	push	r0
     8de:	11 24       	eor	r1, r1
     8e0:	2f 93       	push	r18
     8e2:	3f 93       	push	r19
     8e4:	4f 93       	push	r20
     8e6:	5f 93       	push	r21
     8e8:	6f 93       	push	r22
     8ea:	7f 93       	push	r23
     8ec:	8f 93       	push	r24
     8ee:	9f 93       	push	r25
     8f0:	af 93       	push	r26
     8f2:	bf 93       	push	r27
     8f4:	ef 93       	push	r30
     8f6:	ff 93       	push	r31
     8f8:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     8fc:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     900:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     904:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     908:	c9 01       	movw	r24, r18
     90a:	03 2e       	mov	r0, r19
     90c:	00 0c       	add	r0, r0
     90e:	aa 0b       	sbc	r26, r26
     910:	bb 0b       	sbc	r27, r27
     912:	dc 01       	movw	r26, r24
     914:	99 27       	eor	r25, r25
     916:	88 27       	eor	r24, r24
     918:	60 e0       	ldi	r22, 0x00	; 0
     91a:	70 e0       	ldi	r23, 0x00	; 0
     91c:	84 2b       	or	r24, r20
     91e:	95 2b       	or	r25, r21
     920:	a6 2b       	or	r26, r22
     922:	b7 2b       	or	r27, r23
     924:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     928:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     92c:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     930:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     934:	b0 9b       	sbis	0x16, 0	; 22
     936:	1b c0       	rjmp	.+54     	; 0x96e <__vector_2+0x98>
     938:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     93c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     940:	c9 01       	movw	r24, r18
     942:	01 96       	adiw	r24, 0x01	; 1
     944:	09 2e       	mov	r0, r25
     946:	00 0c       	add	r0, r0
     948:	aa 0b       	sbc	r26, r26
     94a:	bb 0b       	sbc	r27, r27
     94c:	dc 01       	movw	r26, r24
     94e:	99 27       	eor	r25, r25
     950:	88 27       	eor	r24, r24
     952:	60 e0       	ldi	r22, 0x00	; 0
     954:	70 e0       	ldi	r23, 0x00	; 0
     956:	84 2b       	or	r24, r20
     958:	95 2b       	or	r25, r21
     95a:	a6 2b       	or	r26, r22
     95c:	b7 2b       	or	r27, r23
     95e:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     962:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     966:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     96a:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     96e:	e0 91 30 02 	lds	r30, 0x0230	; 0x800230 <mtable+0x2>
     972:	f0 91 31 02 	lds	r31, 0x0231	; 0x800231 <mtable+0x3>
     976:	30 97       	sbiw	r30, 0x00	; 0
     978:	39 f0       	breq	.+14     	; 0x988 <__vector_2+0xb2>
     97a:	61 e0       	ldi	r22, 0x01	; 1
     97c:	70 e0       	ldi	r23, 0x00	; 0
     97e:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <otable+0x2>
     982:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <otable+0x3>
     986:	09 95       	icall
     988:	0e 94 c4 03 	call	0x788	; 0x788 <schedule>
     98c:	ff 91       	pop	r31
     98e:	ef 91       	pop	r30
     990:	bf 91       	pop	r27
     992:	af 91       	pop	r26
     994:	9f 91       	pop	r25
     996:	8f 91       	pop	r24
     998:	7f 91       	pop	r23
     99a:	6f 91       	pop	r22
     99c:	5f 91       	pop	r21
     99e:	4f 91       	pop	r20
     9a0:	3f 91       	pop	r19
     9a2:	2f 91       	pop	r18
     9a4:	0f 90       	pop	r0
     9a6:	0f be       	out	0x3f, r0	; 63
     9a8:	0f 90       	pop	r0
     9aa:	1f 90       	pop	r1
     9ac:	18 95       	reti

000009ae <__vector_3>:
     9ae:	1f 92       	push	r1
     9b0:	0f 92       	push	r0
     9b2:	0f b6       	in	r0, 0x3f	; 63
     9b4:	0f 92       	push	r0
     9b6:	11 24       	eor	r1, r1
     9b8:	2f 93       	push	r18
     9ba:	3f 93       	push	r19
     9bc:	4f 93       	push	r20
     9be:	5f 93       	push	r21
     9c0:	6f 93       	push	r22
     9c2:	7f 93       	push	r23
     9c4:	8f 93       	push	r24
     9c6:	9f 93       	push	r25
     9c8:	af 93       	push	r26
     9ca:	bf 93       	push	r27
     9cc:	ef 93       	push	r30
     9ce:	ff 93       	push	r31
     9d0:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     9d4:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     9d8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     9dc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     9e0:	c9 01       	movw	r24, r18
     9e2:	03 2e       	mov	r0, r19
     9e4:	00 0c       	add	r0, r0
     9e6:	aa 0b       	sbc	r26, r26
     9e8:	bb 0b       	sbc	r27, r27
     9ea:	dc 01       	movw	r26, r24
     9ec:	99 27       	eor	r25, r25
     9ee:	88 27       	eor	r24, r24
     9f0:	60 e0       	ldi	r22, 0x00	; 0
     9f2:	70 e0       	ldi	r23, 0x00	; 0
     9f4:	84 2b       	or	r24, r20
     9f6:	95 2b       	or	r25, r21
     9f8:	a6 2b       	or	r26, r22
     9fa:	b7 2b       	or	r27, r23
     9fc:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     a00:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     a04:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     a08:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     a0c:	b0 9b       	sbis	0x16, 0	; 22
     a0e:	1b c0       	rjmp	.+54     	; 0xa46 <__vector_3+0x98>
     a10:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     a14:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     a18:	c9 01       	movw	r24, r18
     a1a:	01 96       	adiw	r24, 0x01	; 1
     a1c:	09 2e       	mov	r0, r25
     a1e:	00 0c       	add	r0, r0
     a20:	aa 0b       	sbc	r26, r26
     a22:	bb 0b       	sbc	r27, r27
     a24:	dc 01       	movw	r26, r24
     a26:	99 27       	eor	r25, r25
     a28:	88 27       	eor	r24, r24
     a2a:	60 e0       	ldi	r22, 0x00	; 0
     a2c:	70 e0       	ldi	r23, 0x00	; 0
     a2e:	84 2b       	or	r24, r20
     a30:	95 2b       	or	r25, r21
     a32:	a6 2b       	or	r26, r22
     a34:	b7 2b       	or	r27, r23
     a36:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     a3a:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     a3e:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     a42:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     a46:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <mtable+0x4>
     a4a:	f0 91 33 02 	lds	r31, 0x0233	; 0x800233 <mtable+0x5>
     a4e:	30 97       	sbiw	r30, 0x00	; 0
     a50:	39 f0       	breq	.+14     	; 0xa60 <__vector_3+0xb2>
     a52:	62 e0       	ldi	r22, 0x02	; 2
     a54:	70 e0       	ldi	r23, 0x00	; 0
     a56:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <otable+0x4>
     a5a:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <otable+0x5>
     a5e:	09 95       	icall
     a60:	0e 94 c4 03 	call	0x788	; 0x788 <schedule>
     a64:	ff 91       	pop	r31
     a66:	ef 91       	pop	r30
     a68:	bf 91       	pop	r27
     a6a:	af 91       	pop	r26
     a6c:	9f 91       	pop	r25
     a6e:	8f 91       	pop	r24
     a70:	7f 91       	pop	r23
     a72:	6f 91       	pop	r22
     a74:	5f 91       	pop	r21
     a76:	4f 91       	pop	r20
     a78:	3f 91       	pop	r19
     a7a:	2f 91       	pop	r18
     a7c:	0f 90       	pop	r0
     a7e:	0f be       	out	0x3f, r0	; 63
     a80:	0f 90       	pop	r0
     a82:	1f 90       	pop	r1
     a84:	18 95       	reti

00000a86 <__vector_4>:
     a86:	1f 92       	push	r1
     a88:	0f 92       	push	r0
     a8a:	0f b6       	in	r0, 0x3f	; 63
     a8c:	0f 92       	push	r0
     a8e:	11 24       	eor	r1, r1
     a90:	2f 93       	push	r18
     a92:	3f 93       	push	r19
     a94:	4f 93       	push	r20
     a96:	5f 93       	push	r21
     a98:	6f 93       	push	r22
     a9a:	7f 93       	push	r23
     a9c:	8f 93       	push	r24
     a9e:	9f 93       	push	r25
     aa0:	af 93       	push	r26
     aa2:	bf 93       	push	r27
     aa4:	ef 93       	push	r30
     aa6:	ff 93       	push	r31
     aa8:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     aac:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     ab0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     ab4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     ab8:	c9 01       	movw	r24, r18
     aba:	03 2e       	mov	r0, r19
     abc:	00 0c       	add	r0, r0
     abe:	aa 0b       	sbc	r26, r26
     ac0:	bb 0b       	sbc	r27, r27
     ac2:	dc 01       	movw	r26, r24
     ac4:	99 27       	eor	r25, r25
     ac6:	88 27       	eor	r24, r24
     ac8:	60 e0       	ldi	r22, 0x00	; 0
     aca:	70 e0       	ldi	r23, 0x00	; 0
     acc:	84 2b       	or	r24, r20
     ace:	95 2b       	or	r25, r21
     ad0:	a6 2b       	or	r26, r22
     ad2:	b7 2b       	or	r27, r23
     ad4:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     ad8:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     adc:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     ae0:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     ae4:	b0 9b       	sbis	0x16, 0	; 22
     ae6:	1b c0       	rjmp	.+54     	; 0xb1e <__vector_4+0x98>
     ae8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     aec:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     af0:	c9 01       	movw	r24, r18
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	09 2e       	mov	r0, r25
     af6:	00 0c       	add	r0, r0
     af8:	aa 0b       	sbc	r26, r26
     afa:	bb 0b       	sbc	r27, r27
     afc:	dc 01       	movw	r26, r24
     afe:	99 27       	eor	r25, r25
     b00:	88 27       	eor	r24, r24
     b02:	60 e0       	ldi	r22, 0x00	; 0
     b04:	70 e0       	ldi	r23, 0x00	; 0
     b06:	84 2b       	or	r24, r20
     b08:	95 2b       	or	r25, r21
     b0a:	a6 2b       	or	r26, r22
     b0c:	b7 2b       	or	r27, r23
     b0e:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     b12:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     b16:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     b1a:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     b1e:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <mtable+0x6>
     b22:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <mtable+0x7>
     b26:	30 97       	sbiw	r30, 0x00	; 0
     b28:	39 f0       	breq	.+14     	; 0xb38 <__vector_4+0xb2>
     b2a:	63 e0       	ldi	r22, 0x03	; 3
     b2c:	70 e0       	ldi	r23, 0x00	; 0
     b2e:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <otable+0x6>
     b32:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <otable+0x7>
     b36:	09 95       	icall
     b38:	0e 94 c4 03 	call	0x788	; 0x788 <schedule>
     b3c:	ff 91       	pop	r31
     b3e:	ef 91       	pop	r30
     b40:	bf 91       	pop	r27
     b42:	af 91       	pop	r26
     b44:	9f 91       	pop	r25
     b46:	8f 91       	pop	r24
     b48:	7f 91       	pop	r23
     b4a:	6f 91       	pop	r22
     b4c:	5f 91       	pop	r21
     b4e:	4f 91       	pop	r20
     b50:	3f 91       	pop	r19
     b52:	2f 91       	pop	r18
     b54:	0f 90       	pop	r0
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	0f 90       	pop	r0
     b5a:	1f 90       	pop	r1
     b5c:	18 95       	reti

00000b5e <__vector_5>:
     b5e:	1f 92       	push	r1
     b60:	0f 92       	push	r0
     b62:	0f b6       	in	r0, 0x3f	; 63
     b64:	0f 92       	push	r0
     b66:	11 24       	eor	r1, r1
     b68:	2f 93       	push	r18
     b6a:	3f 93       	push	r19
     b6c:	4f 93       	push	r20
     b6e:	5f 93       	push	r21
     b70:	6f 93       	push	r22
     b72:	7f 93       	push	r23
     b74:	8f 93       	push	r24
     b76:	9f 93       	push	r25
     b78:	af 93       	push	r26
     b7a:	bf 93       	push	r27
     b7c:	ef 93       	push	r30
     b7e:	ff 93       	push	r31
     b80:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     b84:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     b88:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     b8c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     b90:	c9 01       	movw	r24, r18
     b92:	03 2e       	mov	r0, r19
     b94:	00 0c       	add	r0, r0
     b96:	aa 0b       	sbc	r26, r26
     b98:	bb 0b       	sbc	r27, r27
     b9a:	dc 01       	movw	r26, r24
     b9c:	99 27       	eor	r25, r25
     b9e:	88 27       	eor	r24, r24
     ba0:	60 e0       	ldi	r22, 0x00	; 0
     ba2:	70 e0       	ldi	r23, 0x00	; 0
     ba4:	84 2b       	or	r24, r20
     ba6:	95 2b       	or	r25, r21
     ba8:	a6 2b       	or	r26, r22
     baa:	b7 2b       	or	r27, r23
     bac:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     bb0:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     bb4:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     bb8:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     bbc:	b0 9b       	sbis	0x16, 0	; 22
     bbe:	1b c0       	rjmp	.+54     	; 0xbf6 <__vector_5+0x98>
     bc0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     bc4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     bc8:	c9 01       	movw	r24, r18
     bca:	01 96       	adiw	r24, 0x01	; 1
     bcc:	09 2e       	mov	r0, r25
     bce:	00 0c       	add	r0, r0
     bd0:	aa 0b       	sbc	r26, r26
     bd2:	bb 0b       	sbc	r27, r27
     bd4:	dc 01       	movw	r26, r24
     bd6:	99 27       	eor	r25, r25
     bd8:	88 27       	eor	r24, r24
     bda:	60 e0       	ldi	r22, 0x00	; 0
     bdc:	70 e0       	ldi	r23, 0x00	; 0
     bde:	84 2b       	or	r24, r20
     be0:	95 2b       	or	r25, r21
     be2:	a6 2b       	or	r26, r22
     be4:	b7 2b       	or	r27, r23
     be6:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     bea:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     bee:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     bf2:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     bf6:	e0 91 36 02 	lds	r30, 0x0236	; 0x800236 <mtable+0x8>
     bfa:	f0 91 37 02 	lds	r31, 0x0237	; 0x800237 <mtable+0x9>
     bfe:	30 97       	sbiw	r30, 0x00	; 0
     c00:	39 f0       	breq	.+14     	; 0xc10 <__vector_5+0xb2>
     c02:	64 e0       	ldi	r22, 0x04	; 4
     c04:	70 e0       	ldi	r23, 0x00	; 0
     c06:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <otable+0x8>
     c0a:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <otable+0x9>
     c0e:	09 95       	icall
     c10:	0e 94 c4 03 	call	0x788	; 0x788 <schedule>
     c14:	ff 91       	pop	r31
     c16:	ef 91       	pop	r30
     c18:	bf 91       	pop	r27
     c1a:	af 91       	pop	r26
     c1c:	9f 91       	pop	r25
     c1e:	8f 91       	pop	r24
     c20:	7f 91       	pop	r23
     c22:	6f 91       	pop	r22
     c24:	5f 91       	pop	r21
     c26:	4f 91       	pop	r20
     c28:	3f 91       	pop	r19
     c2a:	2f 91       	pop	r18
     c2c:	0f 90       	pop	r0
     c2e:	0f be       	out	0x3f, r0	; 63
     c30:	0f 90       	pop	r0
     c32:	1f 90       	pop	r1
     c34:	18 95       	reti

00000c36 <__vector_10>:
     c36:	1f 92       	push	r1
     c38:	0f 92       	push	r0
     c3a:	0f b6       	in	r0, 0x3f	; 63
     c3c:	0f 92       	push	r0
     c3e:	11 24       	eor	r1, r1
     c40:	2f 93       	push	r18
     c42:	3f 93       	push	r19
     c44:	4f 93       	push	r20
     c46:	5f 93       	push	r21
     c48:	6f 93       	push	r22
     c4a:	7f 93       	push	r23
     c4c:	8f 93       	push	r24
     c4e:	9f 93       	push	r25
     c50:	af 93       	push	r26
     c52:	bf 93       	push	r27
     c54:	ef 93       	push	r30
     c56:	ff 93       	push	r31
     c58:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     c5c:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     c60:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     c64:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     c68:	c9 01       	movw	r24, r18
     c6a:	03 2e       	mov	r0, r19
     c6c:	00 0c       	add	r0, r0
     c6e:	aa 0b       	sbc	r26, r26
     c70:	bb 0b       	sbc	r27, r27
     c72:	dc 01       	movw	r26, r24
     c74:	99 27       	eor	r25, r25
     c76:	88 27       	eor	r24, r24
     c78:	60 e0       	ldi	r22, 0x00	; 0
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	84 2b       	or	r24, r20
     c7e:	95 2b       	or	r25, r21
     c80:	a6 2b       	or	r26, r22
     c82:	b7 2b       	or	r27, r23
     c84:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     c88:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     c8c:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     c90:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     c94:	b0 9b       	sbis	0x16, 0	; 22
     c96:	1b c0       	rjmp	.+54     	; 0xcce <__vector_10+0x98>
     c98:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     c9c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     ca0:	c9 01       	movw	r24, r18
     ca2:	01 96       	adiw	r24, 0x01	; 1
     ca4:	09 2e       	mov	r0, r25
     ca6:	00 0c       	add	r0, r0
     ca8:	aa 0b       	sbc	r26, r26
     caa:	bb 0b       	sbc	r27, r27
     cac:	dc 01       	movw	r26, r24
     cae:	99 27       	eor	r25, r25
     cb0:	88 27       	eor	r24, r24
     cb2:	60 e0       	ldi	r22, 0x00	; 0
     cb4:	70 e0       	ldi	r23, 0x00	; 0
     cb6:	84 2b       	or	r24, r20
     cb8:	95 2b       	or	r25, r21
     cba:	a6 2b       	or	r26, r22
     cbc:	b7 2b       	or	r27, r23
     cbe:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     cc2:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     cc6:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     cca:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     cce:	e0 91 38 02 	lds	r30, 0x0238	; 0x800238 <mtable+0xa>
     cd2:	f0 91 39 02 	lds	r31, 0x0239	; 0x800239 <mtable+0xb>
     cd6:	30 97       	sbiw	r30, 0x00	; 0
     cd8:	39 f0       	breq	.+14     	; 0xce8 <__vector_10+0xb2>
     cda:	65 e0       	ldi	r22, 0x05	; 5
     cdc:	70 e0       	ldi	r23, 0x00	; 0
     cde:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <otable+0xa>
     ce2:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <otable+0xb>
     ce6:	09 95       	icall
     ce8:	0e 94 c4 03 	call	0x788	; 0x788 <schedule>
     cec:	ff 91       	pop	r31
     cee:	ef 91       	pop	r30
     cf0:	bf 91       	pop	r27
     cf2:	af 91       	pop	r26
     cf4:	9f 91       	pop	r25
     cf6:	8f 91       	pop	r24
     cf8:	7f 91       	pop	r23
     cfa:	6f 91       	pop	r22
     cfc:	5f 91       	pop	r21
     cfe:	4f 91       	pop	r20
     d00:	3f 91       	pop	r19
     d02:	2f 91       	pop	r18
     d04:	0f 90       	pop	r0
     d06:	0f be       	out	0x3f, r0	; 63
     d08:	0f 90       	pop	r0
     d0a:	1f 90       	pop	r1
     d0c:	18 95       	reti

00000d0e <__vector_11>:
     d0e:	1f 92       	push	r1
     d10:	0f 92       	push	r0
     d12:	0f b6       	in	r0, 0x3f	; 63
     d14:	0f 92       	push	r0
     d16:	11 24       	eor	r1, r1
     d18:	2f 93       	push	r18
     d1a:	3f 93       	push	r19
     d1c:	4f 93       	push	r20
     d1e:	5f 93       	push	r21
     d20:	6f 93       	push	r22
     d22:	7f 93       	push	r23
     d24:	8f 93       	push	r24
     d26:	9f 93       	push	r25
     d28:	af 93       	push	r26
     d2a:	bf 93       	push	r27
     d2c:	ef 93       	push	r30
     d2e:	ff 93       	push	r31
     d30:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     d34:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     d38:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     d3c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     d40:	c9 01       	movw	r24, r18
     d42:	03 2e       	mov	r0, r19
     d44:	00 0c       	add	r0, r0
     d46:	aa 0b       	sbc	r26, r26
     d48:	bb 0b       	sbc	r27, r27
     d4a:	dc 01       	movw	r26, r24
     d4c:	99 27       	eor	r25, r25
     d4e:	88 27       	eor	r24, r24
     d50:	60 e0       	ldi	r22, 0x00	; 0
     d52:	70 e0       	ldi	r23, 0x00	; 0
     d54:	84 2b       	or	r24, r20
     d56:	95 2b       	or	r25, r21
     d58:	a6 2b       	or	r26, r22
     d5a:	b7 2b       	or	r27, r23
     d5c:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     d60:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     d64:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     d68:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     d6c:	b0 9b       	sbis	0x16, 0	; 22
     d6e:	1b c0       	rjmp	.+54     	; 0xda6 <__vector_11+0x98>
     d70:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     d74:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     d78:	c9 01       	movw	r24, r18
     d7a:	01 96       	adiw	r24, 0x01	; 1
     d7c:	09 2e       	mov	r0, r25
     d7e:	00 0c       	add	r0, r0
     d80:	aa 0b       	sbc	r26, r26
     d82:	bb 0b       	sbc	r27, r27
     d84:	dc 01       	movw	r26, r24
     d86:	99 27       	eor	r25, r25
     d88:	88 27       	eor	r24, r24
     d8a:	60 e0       	ldi	r22, 0x00	; 0
     d8c:	70 e0       	ldi	r23, 0x00	; 0
     d8e:	84 2b       	or	r24, r20
     d90:	95 2b       	or	r25, r21
     d92:	a6 2b       	or	r26, r22
     d94:	b7 2b       	or	r27, r23
     d96:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     d9a:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     d9e:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     da2:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     da6:	e0 91 3a 02 	lds	r30, 0x023A	; 0x80023a <mtable+0xc>
     daa:	f0 91 3b 02 	lds	r31, 0x023B	; 0x80023b <mtable+0xd>
     dae:	30 97       	sbiw	r30, 0x00	; 0
     db0:	39 f0       	breq	.+14     	; 0xdc0 <__vector_11+0xb2>
     db2:	66 e0       	ldi	r22, 0x06	; 6
     db4:	70 e0       	ldi	r23, 0x00	; 0
     db6:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <otable+0xc>
     dba:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <otable+0xd>
     dbe:	09 95       	icall
     dc0:	0e 94 c4 03 	call	0x788	; 0x788 <schedule>
     dc4:	ff 91       	pop	r31
     dc6:	ef 91       	pop	r30
     dc8:	bf 91       	pop	r27
     dca:	af 91       	pop	r26
     dcc:	9f 91       	pop	r25
     dce:	8f 91       	pop	r24
     dd0:	7f 91       	pop	r23
     dd2:	6f 91       	pop	r22
     dd4:	5f 91       	pop	r21
     dd6:	4f 91       	pop	r20
     dd8:	3f 91       	pop	r19
     dda:	2f 91       	pop	r18
     ddc:	0f 90       	pop	r0
     dde:	0f be       	out	0x3f, r0	; 63
     de0:	0f 90       	pop	r0
     de2:	1f 90       	pop	r1
     de4:	18 95       	reti

00000de6 <__vector_12>:
     de6:	1f 92       	push	r1
     de8:	0f 92       	push	r0
     dea:	0f b6       	in	r0, 0x3f	; 63
     dec:	0f 92       	push	r0
     dee:	11 24       	eor	r1, r1
     df0:	2f 93       	push	r18
     df2:	3f 93       	push	r19
     df4:	4f 93       	push	r20
     df6:	5f 93       	push	r21
     df8:	6f 93       	push	r22
     dfa:	7f 93       	push	r23
     dfc:	8f 93       	push	r24
     dfe:	9f 93       	push	r25
     e00:	af 93       	push	r26
     e02:	bf 93       	push	r27
     e04:	ef 93       	push	r30
     e06:	ff 93       	push	r31
     e08:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     e0c:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     e10:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     e14:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     e18:	c9 01       	movw	r24, r18
     e1a:	03 2e       	mov	r0, r19
     e1c:	00 0c       	add	r0, r0
     e1e:	aa 0b       	sbc	r26, r26
     e20:	bb 0b       	sbc	r27, r27
     e22:	dc 01       	movw	r26, r24
     e24:	99 27       	eor	r25, r25
     e26:	88 27       	eor	r24, r24
     e28:	60 e0       	ldi	r22, 0x00	; 0
     e2a:	70 e0       	ldi	r23, 0x00	; 0
     e2c:	84 2b       	or	r24, r20
     e2e:	95 2b       	or	r25, r21
     e30:	a6 2b       	or	r26, r22
     e32:	b7 2b       	or	r27, r23
     e34:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     e38:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     e3c:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     e40:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     e44:	b0 9b       	sbis	0x16, 0	; 22
     e46:	1b c0       	rjmp	.+54     	; 0xe7e <__vector_12+0x98>
     e48:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     e4c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     e50:	c9 01       	movw	r24, r18
     e52:	01 96       	adiw	r24, 0x01	; 1
     e54:	09 2e       	mov	r0, r25
     e56:	00 0c       	add	r0, r0
     e58:	aa 0b       	sbc	r26, r26
     e5a:	bb 0b       	sbc	r27, r27
     e5c:	dc 01       	movw	r26, r24
     e5e:	99 27       	eor	r25, r25
     e60:	88 27       	eor	r24, r24
     e62:	60 e0       	ldi	r22, 0x00	; 0
     e64:	70 e0       	ldi	r23, 0x00	; 0
     e66:	84 2b       	or	r24, r20
     e68:	95 2b       	or	r25, r21
     e6a:	a6 2b       	or	r26, r22
     e6c:	b7 2b       	or	r27, r23
     e6e:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     e72:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     e76:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     e7a:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     e7e:	e0 91 3c 02 	lds	r30, 0x023C	; 0x80023c <mtable+0xe>
     e82:	f0 91 3d 02 	lds	r31, 0x023D	; 0x80023d <mtable+0xf>
     e86:	30 97       	sbiw	r30, 0x00	; 0
     e88:	39 f0       	breq	.+14     	; 0xe98 <__vector_12+0xb2>
     e8a:	67 e0       	ldi	r22, 0x07	; 7
     e8c:	70 e0       	ldi	r23, 0x00	; 0
     e8e:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <otable+0xe>
     e92:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <otable+0xf>
     e96:	09 95       	icall
     e98:	0e 94 c4 03 	call	0x788	; 0x788 <schedule>
     e9c:	ff 91       	pop	r31
     e9e:	ef 91       	pop	r30
     ea0:	bf 91       	pop	r27
     ea2:	af 91       	pop	r26
     ea4:	9f 91       	pop	r25
     ea6:	8f 91       	pop	r24
     ea8:	7f 91       	pop	r23
     eaa:	6f 91       	pop	r22
     eac:	5f 91       	pop	r21
     eae:	4f 91       	pop	r20
     eb0:	3f 91       	pop	r19
     eb2:	2f 91       	pop	r18
     eb4:	0f 90       	pop	r0
     eb6:	0f be       	out	0x3f, r0	; 63
     eb8:	0f 90       	pop	r0
     eba:	1f 90       	pop	r1
     ebc:	18 95       	reti

00000ebe <__vector_13>:
     ebe:	1f 92       	push	r1
     ec0:	0f 92       	push	r0
     ec2:	0f b6       	in	r0, 0x3f	; 63
     ec4:	0f 92       	push	r0
     ec6:	11 24       	eor	r1, r1
     ec8:	2f 93       	push	r18
     eca:	3f 93       	push	r19
     ecc:	4f 93       	push	r20
     ece:	5f 93       	push	r21
     ed0:	6f 93       	push	r22
     ed2:	7f 93       	push	r23
     ed4:	8f 93       	push	r24
     ed6:	9f 93       	push	r25
     ed8:	af 93       	push	r26
     eda:	bf 93       	push	r27
     edc:	ef 93       	push	r30
     ede:	ff 93       	push	r31
     ee0:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     ee4:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     ee8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     eec:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     ef0:	c9 01       	movw	r24, r18
     ef2:	03 2e       	mov	r0, r19
     ef4:	00 0c       	add	r0, r0
     ef6:	aa 0b       	sbc	r26, r26
     ef8:	bb 0b       	sbc	r27, r27
     efa:	dc 01       	movw	r26, r24
     efc:	99 27       	eor	r25, r25
     efe:	88 27       	eor	r24, r24
     f00:	60 e0       	ldi	r22, 0x00	; 0
     f02:	70 e0       	ldi	r23, 0x00	; 0
     f04:	84 2b       	or	r24, r20
     f06:	95 2b       	or	r25, r21
     f08:	a6 2b       	or	r26, r22
     f0a:	b7 2b       	or	r27, r23
     f0c:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     f10:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     f14:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     f18:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     f1c:	b0 9b       	sbis	0x16, 0	; 22
     f1e:	1b c0       	rjmp	.+54     	; 0xf56 <__vector_13+0x98>
     f20:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     f24:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     f28:	c9 01       	movw	r24, r18
     f2a:	01 96       	adiw	r24, 0x01	; 1
     f2c:	09 2e       	mov	r0, r25
     f2e:	00 0c       	add	r0, r0
     f30:	aa 0b       	sbc	r26, r26
     f32:	bb 0b       	sbc	r27, r27
     f34:	dc 01       	movw	r26, r24
     f36:	99 27       	eor	r25, r25
     f38:	88 27       	eor	r24, r24
     f3a:	60 e0       	ldi	r22, 0x00	; 0
     f3c:	70 e0       	ldi	r23, 0x00	; 0
     f3e:	84 2b       	or	r24, r20
     f40:	95 2b       	or	r25, r21
     f42:	a6 2b       	or	r26, r22
     f44:	b7 2b       	or	r27, r23
     f46:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     f4a:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     f4e:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     f52:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     f56:	e0 91 3e 02 	lds	r30, 0x023E	; 0x80023e <mtable+0x10>
     f5a:	f0 91 3f 02 	lds	r31, 0x023F	; 0x80023f <mtable+0x11>
     f5e:	30 97       	sbiw	r30, 0x00	; 0
     f60:	39 f0       	breq	.+14     	; 0xf70 <__vector_13+0xb2>
     f62:	68 e0       	ldi	r22, 0x08	; 8
     f64:	70 e0       	ldi	r23, 0x00	; 0
     f66:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <otable+0x10>
     f6a:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <otable+0x11>
     f6e:	09 95       	icall
     f70:	0e 94 c4 03 	call	0x788	; 0x788 <schedule>
     f74:	ff 91       	pop	r31
     f76:	ef 91       	pop	r30
     f78:	bf 91       	pop	r27
     f7a:	af 91       	pop	r26
     f7c:	9f 91       	pop	r25
     f7e:	8f 91       	pop	r24
     f80:	7f 91       	pop	r23
     f82:	6f 91       	pop	r22
     f84:	5f 91       	pop	r21
     f86:	4f 91       	pop	r20
     f88:	3f 91       	pop	r19
     f8a:	2f 91       	pop	r18
     f8c:	0f 90       	pop	r0
     f8e:	0f be       	out	0x3f, r0	; 63
     f90:	0f 90       	pop	r0
     f92:	1f 90       	pop	r1
     f94:	18 95       	reti

00000f96 <__vector_14>:
     f96:	1f 92       	push	r1
     f98:	0f 92       	push	r0
     f9a:	0f b6       	in	r0, 0x3f	; 63
     f9c:	0f 92       	push	r0
     f9e:	11 24       	eor	r1, r1
     fa0:	2f 93       	push	r18
     fa2:	3f 93       	push	r19
     fa4:	4f 93       	push	r20
     fa6:	5f 93       	push	r21
     fa8:	6f 93       	push	r22
     faa:	7f 93       	push	r23
     fac:	8f 93       	push	r24
     fae:	9f 93       	push	r25
     fb0:	af 93       	push	r26
     fb2:	bf 93       	push	r27
     fb4:	ef 93       	push	r30
     fb6:	ff 93       	push	r31
     fb8:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     fbc:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     fc0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     fc4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     fc8:	c9 01       	movw	r24, r18
     fca:	03 2e       	mov	r0, r19
     fcc:	00 0c       	add	r0, r0
     fce:	aa 0b       	sbc	r26, r26
     fd0:	bb 0b       	sbc	r27, r27
     fd2:	dc 01       	movw	r26, r24
     fd4:	99 27       	eor	r25, r25
     fd6:	88 27       	eor	r24, r24
     fd8:	60 e0       	ldi	r22, 0x00	; 0
     fda:	70 e0       	ldi	r23, 0x00	; 0
     fdc:	84 2b       	or	r24, r20
     fde:	95 2b       	or	r25, r21
     fe0:	a6 2b       	or	r26, r22
     fe2:	b7 2b       	or	r27, r23
     fe4:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     fe8:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     fec:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     ff0:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     ff4:	b0 9b       	sbis	0x16, 0	; 22
     ff6:	1b c0       	rjmp	.+54     	; 0x102e <__vector_14+0x98>
     ff8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     ffc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1000:	c9 01       	movw	r24, r18
    1002:	01 96       	adiw	r24, 0x01	; 1
    1004:	09 2e       	mov	r0, r25
    1006:	00 0c       	add	r0, r0
    1008:	aa 0b       	sbc	r26, r26
    100a:	bb 0b       	sbc	r27, r27
    100c:	dc 01       	movw	r26, r24
    100e:	99 27       	eor	r25, r25
    1010:	88 27       	eor	r24, r24
    1012:	60 e0       	ldi	r22, 0x00	; 0
    1014:	70 e0       	ldi	r23, 0x00	; 0
    1016:	84 2b       	or	r24, r20
    1018:	95 2b       	or	r25, r21
    101a:	a6 2b       	or	r26, r22
    101c:	b7 2b       	or	r27, r23
    101e:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    1022:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    1026:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    102a:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    102e:	e0 91 40 02 	lds	r30, 0x0240	; 0x800240 <mtable+0x12>
    1032:	f0 91 41 02 	lds	r31, 0x0241	; 0x800241 <mtable+0x13>
    1036:	30 97       	sbiw	r30, 0x00	; 0
    1038:	39 f0       	breq	.+14     	; 0x1048 <__vector_14+0xb2>
    103a:	69 e0       	ldi	r22, 0x09	; 9
    103c:	70 e0       	ldi	r23, 0x00	; 0
    103e:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <otable+0x12>
    1042:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <otable+0x13>
    1046:	09 95       	icall
    1048:	0e 94 c4 03 	call	0x788	; 0x788 <schedule>
    104c:	ff 91       	pop	r31
    104e:	ef 91       	pop	r30
    1050:	bf 91       	pop	r27
    1052:	af 91       	pop	r26
    1054:	9f 91       	pop	r25
    1056:	8f 91       	pop	r24
    1058:	7f 91       	pop	r23
    105a:	6f 91       	pop	r22
    105c:	5f 91       	pop	r21
    105e:	4f 91       	pop	r20
    1060:	3f 91       	pop	r19
    1062:	2f 91       	pop	r18
    1064:	0f 90       	pop	r0
    1066:	0f be       	out	0x3f, r0	; 63
    1068:	0f 90       	pop	r0
    106a:	1f 90       	pop	r1
    106c:	18 95       	reti

0000106e <__vector_15>:
    106e:	1f 92       	push	r1
    1070:	0f 92       	push	r0
    1072:	0f b6       	in	r0, 0x3f	; 63
    1074:	0f 92       	push	r0
    1076:	11 24       	eor	r1, r1
    1078:	2f 93       	push	r18
    107a:	3f 93       	push	r19
    107c:	4f 93       	push	r20
    107e:	5f 93       	push	r21
    1080:	6f 93       	push	r22
    1082:	7f 93       	push	r23
    1084:	8f 93       	push	r24
    1086:	9f 93       	push	r25
    1088:	af 93       	push	r26
    108a:	bf 93       	push	r27
    108c:	ef 93       	push	r30
    108e:	ff 93       	push	r31
    1090:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    1094:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    1098:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    109c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    10a0:	c9 01       	movw	r24, r18
    10a2:	03 2e       	mov	r0, r19
    10a4:	00 0c       	add	r0, r0
    10a6:	aa 0b       	sbc	r26, r26
    10a8:	bb 0b       	sbc	r27, r27
    10aa:	dc 01       	movw	r26, r24
    10ac:	99 27       	eor	r25, r25
    10ae:	88 27       	eor	r24, r24
    10b0:	60 e0       	ldi	r22, 0x00	; 0
    10b2:	70 e0       	ldi	r23, 0x00	; 0
    10b4:	84 2b       	or	r24, r20
    10b6:	95 2b       	or	r25, r21
    10b8:	a6 2b       	or	r26, r22
    10ba:	b7 2b       	or	r27, r23
    10bc:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    10c0:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    10c4:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    10c8:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    10cc:	b0 9b       	sbis	0x16, 0	; 22
    10ce:	1b c0       	rjmp	.+54     	; 0x1106 <__vector_15+0x98>
    10d0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    10d4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    10d8:	c9 01       	movw	r24, r18
    10da:	01 96       	adiw	r24, 0x01	; 1
    10dc:	09 2e       	mov	r0, r25
    10de:	00 0c       	add	r0, r0
    10e0:	aa 0b       	sbc	r26, r26
    10e2:	bb 0b       	sbc	r27, r27
    10e4:	dc 01       	movw	r26, r24
    10e6:	99 27       	eor	r25, r25
    10e8:	88 27       	eor	r24, r24
    10ea:	60 e0       	ldi	r22, 0x00	; 0
    10ec:	70 e0       	ldi	r23, 0x00	; 0
    10ee:	84 2b       	or	r24, r20
    10f0:	95 2b       	or	r25, r21
    10f2:	a6 2b       	or	r26, r22
    10f4:	b7 2b       	or	r27, r23
    10f6:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    10fa:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    10fe:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    1102:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    1106:	e0 91 42 02 	lds	r30, 0x0242	; 0x800242 <mtable+0x14>
    110a:	f0 91 43 02 	lds	r31, 0x0243	; 0x800243 <mtable+0x15>
    110e:	30 97       	sbiw	r30, 0x00	; 0
    1110:	39 f0       	breq	.+14     	; 0x1120 <__vector_15+0xb2>
    1112:	6a e0       	ldi	r22, 0x0A	; 10
    1114:	70 e0       	ldi	r23, 0x00	; 0
    1116:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <otable+0x14>
    111a:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <otable+0x15>
    111e:	09 95       	icall
    1120:	0e 94 c4 03 	call	0x788	; 0x788 <schedule>
    1124:	ff 91       	pop	r31
    1126:	ef 91       	pop	r30
    1128:	bf 91       	pop	r27
    112a:	af 91       	pop	r26
    112c:	9f 91       	pop	r25
    112e:	8f 91       	pop	r24
    1130:	7f 91       	pop	r23
    1132:	6f 91       	pop	r22
    1134:	5f 91       	pop	r21
    1136:	4f 91       	pop	r20
    1138:	3f 91       	pop	r19
    113a:	2f 91       	pop	r18
    113c:	0f 90       	pop	r0
    113e:	0f be       	out	0x3f, r0	; 63
    1140:	0f 90       	pop	r0
    1142:	1f 90       	pop	r1
    1144:	18 95       	reti

00001146 <__vector_16>:
    1146:	1f 92       	push	r1
    1148:	0f 92       	push	r0
    114a:	0f b6       	in	r0, 0x3f	; 63
    114c:	0f 92       	push	r0
    114e:	11 24       	eor	r1, r1
    1150:	2f 93       	push	r18
    1152:	3f 93       	push	r19
    1154:	4f 93       	push	r20
    1156:	5f 93       	push	r21
    1158:	6f 93       	push	r22
    115a:	7f 93       	push	r23
    115c:	8f 93       	push	r24
    115e:	9f 93       	push	r25
    1160:	af 93       	push	r26
    1162:	bf 93       	push	r27
    1164:	ef 93       	push	r30
    1166:	ff 93       	push	r31
    1168:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    116c:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    1170:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1174:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1178:	c9 01       	movw	r24, r18
    117a:	03 2e       	mov	r0, r19
    117c:	00 0c       	add	r0, r0
    117e:	aa 0b       	sbc	r26, r26
    1180:	bb 0b       	sbc	r27, r27
    1182:	dc 01       	movw	r26, r24
    1184:	99 27       	eor	r25, r25
    1186:	88 27       	eor	r24, r24
    1188:	60 e0       	ldi	r22, 0x00	; 0
    118a:	70 e0       	ldi	r23, 0x00	; 0
    118c:	84 2b       	or	r24, r20
    118e:	95 2b       	or	r25, r21
    1190:	a6 2b       	or	r26, r22
    1192:	b7 2b       	or	r27, r23
    1194:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    1198:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    119c:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    11a0:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    11a4:	b0 9b       	sbis	0x16, 0	; 22
    11a6:	1b c0       	rjmp	.+54     	; 0x11de <__vector_16+0x98>
    11a8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    11ac:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    11b0:	c9 01       	movw	r24, r18
    11b2:	01 96       	adiw	r24, 0x01	; 1
    11b4:	09 2e       	mov	r0, r25
    11b6:	00 0c       	add	r0, r0
    11b8:	aa 0b       	sbc	r26, r26
    11ba:	bb 0b       	sbc	r27, r27
    11bc:	dc 01       	movw	r26, r24
    11be:	99 27       	eor	r25, r25
    11c0:	88 27       	eor	r24, r24
    11c2:	60 e0       	ldi	r22, 0x00	; 0
    11c4:	70 e0       	ldi	r23, 0x00	; 0
    11c6:	84 2b       	or	r24, r20
    11c8:	95 2b       	or	r25, r21
    11ca:	a6 2b       	or	r26, r22
    11cc:	b7 2b       	or	r27, r23
    11ce:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    11d2:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    11d6:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    11da:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    11de:	e0 91 44 02 	lds	r30, 0x0244	; 0x800244 <mtable+0x16>
    11e2:	f0 91 45 02 	lds	r31, 0x0245	; 0x800245 <mtable+0x17>
    11e6:	30 97       	sbiw	r30, 0x00	; 0
    11e8:	39 f0       	breq	.+14     	; 0x11f8 <__vector_16+0xb2>
    11ea:	6b e0       	ldi	r22, 0x0B	; 11
    11ec:	70 e0       	ldi	r23, 0x00	; 0
    11ee:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <otable+0x16>
    11f2:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <otable+0x17>
    11f6:	09 95       	icall
    11f8:	0e 94 c4 03 	call	0x788	; 0x788 <schedule>
    11fc:	ff 91       	pop	r31
    11fe:	ef 91       	pop	r30
    1200:	bf 91       	pop	r27
    1202:	af 91       	pop	r26
    1204:	9f 91       	pop	r25
    1206:	8f 91       	pop	r24
    1208:	7f 91       	pop	r23
    120a:	6f 91       	pop	r22
    120c:	5f 91       	pop	r21
    120e:	4f 91       	pop	r20
    1210:	3f 91       	pop	r19
    1212:	2f 91       	pop	r18
    1214:	0f 90       	pop	r0
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	0f 90       	pop	r0
    121a:	1f 90       	pop	r1
    121c:	18 95       	reti

0000121e <__vector_17>:
    121e:	1f 92       	push	r1
    1220:	0f 92       	push	r0
    1222:	0f b6       	in	r0, 0x3f	; 63
    1224:	0f 92       	push	r0
    1226:	11 24       	eor	r1, r1
    1228:	2f 93       	push	r18
    122a:	3f 93       	push	r19
    122c:	4f 93       	push	r20
    122e:	5f 93       	push	r21
    1230:	6f 93       	push	r22
    1232:	7f 93       	push	r23
    1234:	8f 93       	push	r24
    1236:	9f 93       	push	r25
    1238:	af 93       	push	r26
    123a:	bf 93       	push	r27
    123c:	ef 93       	push	r30
    123e:	ff 93       	push	r31
    1240:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    1244:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    1248:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    124c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1250:	c9 01       	movw	r24, r18
    1252:	03 2e       	mov	r0, r19
    1254:	00 0c       	add	r0, r0
    1256:	aa 0b       	sbc	r26, r26
    1258:	bb 0b       	sbc	r27, r27
    125a:	dc 01       	movw	r26, r24
    125c:	99 27       	eor	r25, r25
    125e:	88 27       	eor	r24, r24
    1260:	60 e0       	ldi	r22, 0x00	; 0
    1262:	70 e0       	ldi	r23, 0x00	; 0
    1264:	84 2b       	or	r24, r20
    1266:	95 2b       	or	r25, r21
    1268:	a6 2b       	or	r26, r22
    126a:	b7 2b       	or	r27, r23
    126c:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    1270:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    1274:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    1278:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    127c:	b0 9b       	sbis	0x16, 0	; 22
    127e:	1b c0       	rjmp	.+54     	; 0x12b6 <__vector_17+0x98>
    1280:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1284:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1288:	c9 01       	movw	r24, r18
    128a:	01 96       	adiw	r24, 0x01	; 1
    128c:	09 2e       	mov	r0, r25
    128e:	00 0c       	add	r0, r0
    1290:	aa 0b       	sbc	r26, r26
    1292:	bb 0b       	sbc	r27, r27
    1294:	dc 01       	movw	r26, r24
    1296:	99 27       	eor	r25, r25
    1298:	88 27       	eor	r24, r24
    129a:	60 e0       	ldi	r22, 0x00	; 0
    129c:	70 e0       	ldi	r23, 0x00	; 0
    129e:	84 2b       	or	r24, r20
    12a0:	95 2b       	or	r25, r21
    12a2:	a6 2b       	or	r26, r22
    12a4:	b7 2b       	or	r27, r23
    12a6:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    12aa:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    12ae:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    12b2:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    12b6:	e0 91 46 02 	lds	r30, 0x0246	; 0x800246 <mtable+0x18>
    12ba:	f0 91 47 02 	lds	r31, 0x0247	; 0x800247 <mtable+0x19>
    12be:	30 97       	sbiw	r30, 0x00	; 0
    12c0:	39 f0       	breq	.+14     	; 0x12d0 <__vector_17+0xb2>
    12c2:	6c e0       	ldi	r22, 0x0C	; 12
    12c4:	70 e0       	ldi	r23, 0x00	; 0
    12c6:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <otable+0x18>
    12ca:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <otable+0x19>
    12ce:	09 95       	icall
    12d0:	0e 94 c4 03 	call	0x788	; 0x788 <schedule>
    12d4:	ff 91       	pop	r31
    12d6:	ef 91       	pop	r30
    12d8:	bf 91       	pop	r27
    12da:	af 91       	pop	r26
    12dc:	9f 91       	pop	r25
    12de:	8f 91       	pop	r24
    12e0:	7f 91       	pop	r23
    12e2:	6f 91       	pop	r22
    12e4:	5f 91       	pop	r21
    12e6:	4f 91       	pop	r20
    12e8:	3f 91       	pop	r19
    12ea:	2f 91       	pop	r18
    12ec:	0f 90       	pop	r0
    12ee:	0f be       	out	0x3f, r0	; 63
    12f0:	0f 90       	pop	r0
    12f2:	1f 90       	pop	r1
    12f4:	18 95       	reti

000012f6 <__vector_18>:
    12f6:	1f 92       	push	r1
    12f8:	0f 92       	push	r0
    12fa:	0f b6       	in	r0, 0x3f	; 63
    12fc:	0f 92       	push	r0
    12fe:	11 24       	eor	r1, r1
    1300:	2f 93       	push	r18
    1302:	3f 93       	push	r19
    1304:	4f 93       	push	r20
    1306:	5f 93       	push	r21
    1308:	6f 93       	push	r22
    130a:	7f 93       	push	r23
    130c:	8f 93       	push	r24
    130e:	9f 93       	push	r25
    1310:	af 93       	push	r26
    1312:	bf 93       	push	r27
    1314:	ef 93       	push	r30
    1316:	ff 93       	push	r31
    1318:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    131c:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    1320:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1324:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1328:	c9 01       	movw	r24, r18
    132a:	03 2e       	mov	r0, r19
    132c:	00 0c       	add	r0, r0
    132e:	aa 0b       	sbc	r26, r26
    1330:	bb 0b       	sbc	r27, r27
    1332:	dc 01       	movw	r26, r24
    1334:	99 27       	eor	r25, r25
    1336:	88 27       	eor	r24, r24
    1338:	60 e0       	ldi	r22, 0x00	; 0
    133a:	70 e0       	ldi	r23, 0x00	; 0
    133c:	84 2b       	or	r24, r20
    133e:	95 2b       	or	r25, r21
    1340:	a6 2b       	or	r26, r22
    1342:	b7 2b       	or	r27, r23
    1344:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    1348:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    134c:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    1350:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    1354:	b0 9b       	sbis	0x16, 0	; 22
    1356:	1b c0       	rjmp	.+54     	; 0x138e <__vector_18+0x98>
    1358:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    135c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1360:	c9 01       	movw	r24, r18
    1362:	01 96       	adiw	r24, 0x01	; 1
    1364:	09 2e       	mov	r0, r25
    1366:	00 0c       	add	r0, r0
    1368:	aa 0b       	sbc	r26, r26
    136a:	bb 0b       	sbc	r27, r27
    136c:	dc 01       	movw	r26, r24
    136e:	99 27       	eor	r25, r25
    1370:	88 27       	eor	r24, r24
    1372:	60 e0       	ldi	r22, 0x00	; 0
    1374:	70 e0       	ldi	r23, 0x00	; 0
    1376:	84 2b       	or	r24, r20
    1378:	95 2b       	or	r25, r21
    137a:	a6 2b       	or	r26, r22
    137c:	b7 2b       	or	r27, r23
    137e:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    1382:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    1386:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    138a:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    138e:	e0 91 48 02 	lds	r30, 0x0248	; 0x800248 <mtable+0x1a>
    1392:	f0 91 49 02 	lds	r31, 0x0249	; 0x800249 <mtable+0x1b>
    1396:	30 97       	sbiw	r30, 0x00	; 0
    1398:	39 f0       	breq	.+14     	; 0x13a8 <__vector_18+0xb2>
    139a:	6d e0       	ldi	r22, 0x0D	; 13
    139c:	70 e0       	ldi	r23, 0x00	; 0
    139e:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <otable+0x1a>
    13a2:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <otable+0x1b>
    13a6:	09 95       	icall
    13a8:	0e 94 c4 03 	call	0x788	; 0x788 <schedule>
    13ac:	ff 91       	pop	r31
    13ae:	ef 91       	pop	r30
    13b0:	bf 91       	pop	r27
    13b2:	af 91       	pop	r26
    13b4:	9f 91       	pop	r25
    13b6:	8f 91       	pop	r24
    13b8:	7f 91       	pop	r23
    13ba:	6f 91       	pop	r22
    13bc:	5f 91       	pop	r21
    13be:	4f 91       	pop	r20
    13c0:	3f 91       	pop	r19
    13c2:	2f 91       	pop	r18
    13c4:	0f 90       	pop	r0
    13c6:	0f be       	out	0x3f, r0	; 63
    13c8:	0f 90       	pop	r0
    13ca:	1f 90       	pop	r1
    13cc:	18 95       	reti

000013ce <__vector_19>:
    13ce:	1f 92       	push	r1
    13d0:	0f 92       	push	r0
    13d2:	0f b6       	in	r0, 0x3f	; 63
    13d4:	0f 92       	push	r0
    13d6:	11 24       	eor	r1, r1
    13d8:	2f 93       	push	r18
    13da:	3f 93       	push	r19
    13dc:	4f 93       	push	r20
    13de:	5f 93       	push	r21
    13e0:	6f 93       	push	r22
    13e2:	7f 93       	push	r23
    13e4:	8f 93       	push	r24
    13e6:	9f 93       	push	r25
    13e8:	af 93       	push	r26
    13ea:	bf 93       	push	r27
    13ec:	ef 93       	push	r30
    13ee:	ff 93       	push	r31
    13f0:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    13f4:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    13f8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    13fc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1400:	c9 01       	movw	r24, r18
    1402:	03 2e       	mov	r0, r19
    1404:	00 0c       	add	r0, r0
    1406:	aa 0b       	sbc	r26, r26
    1408:	bb 0b       	sbc	r27, r27
    140a:	dc 01       	movw	r26, r24
    140c:	99 27       	eor	r25, r25
    140e:	88 27       	eor	r24, r24
    1410:	60 e0       	ldi	r22, 0x00	; 0
    1412:	70 e0       	ldi	r23, 0x00	; 0
    1414:	84 2b       	or	r24, r20
    1416:	95 2b       	or	r25, r21
    1418:	a6 2b       	or	r26, r22
    141a:	b7 2b       	or	r27, r23
    141c:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    1420:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    1424:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    1428:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    142c:	b0 9b       	sbis	0x16, 0	; 22
    142e:	1b c0       	rjmp	.+54     	; 0x1466 <__vector_19+0x98>
    1430:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1434:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1438:	c9 01       	movw	r24, r18
    143a:	01 96       	adiw	r24, 0x01	; 1
    143c:	09 2e       	mov	r0, r25
    143e:	00 0c       	add	r0, r0
    1440:	aa 0b       	sbc	r26, r26
    1442:	bb 0b       	sbc	r27, r27
    1444:	dc 01       	movw	r26, r24
    1446:	99 27       	eor	r25, r25
    1448:	88 27       	eor	r24, r24
    144a:	60 e0       	ldi	r22, 0x00	; 0
    144c:	70 e0       	ldi	r23, 0x00	; 0
    144e:	84 2b       	or	r24, r20
    1450:	95 2b       	or	r25, r21
    1452:	a6 2b       	or	r26, r22
    1454:	b7 2b       	or	r27, r23
    1456:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    145a:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    145e:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    1462:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    1466:	e0 91 4a 02 	lds	r30, 0x024A	; 0x80024a <mtable+0x1c>
    146a:	f0 91 4b 02 	lds	r31, 0x024B	; 0x80024b <mtable+0x1d>
    146e:	30 97       	sbiw	r30, 0x00	; 0
    1470:	39 f0       	breq	.+14     	; 0x1480 <__vector_19+0xb2>
    1472:	6e e0       	ldi	r22, 0x0E	; 14
    1474:	70 e0       	ldi	r23, 0x00	; 0
    1476:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <otable+0x1c>
    147a:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <otable+0x1d>
    147e:	09 95       	icall
    1480:	0e 94 c4 03 	call	0x788	; 0x788 <schedule>
    1484:	ff 91       	pop	r31
    1486:	ef 91       	pop	r30
    1488:	bf 91       	pop	r27
    148a:	af 91       	pop	r26
    148c:	9f 91       	pop	r25
    148e:	8f 91       	pop	r24
    1490:	7f 91       	pop	r23
    1492:	6f 91       	pop	r22
    1494:	5f 91       	pop	r21
    1496:	4f 91       	pop	r20
    1498:	3f 91       	pop	r19
    149a:	2f 91       	pop	r18
    149c:	0f 90       	pop	r0
    149e:	0f be       	out	0x3f, r0	; 63
    14a0:	0f 90       	pop	r0
    14a2:	1f 90       	pop	r1
    14a4:	18 95       	reti

000014a6 <__vector_20>:
    14a6:	1f 92       	push	r1
    14a8:	0f 92       	push	r0
    14aa:	0f b6       	in	r0, 0x3f	; 63
    14ac:	0f 92       	push	r0
    14ae:	11 24       	eor	r1, r1
    14b0:	2f 93       	push	r18
    14b2:	3f 93       	push	r19
    14b4:	4f 93       	push	r20
    14b6:	5f 93       	push	r21
    14b8:	6f 93       	push	r22
    14ba:	7f 93       	push	r23
    14bc:	8f 93       	push	r24
    14be:	9f 93       	push	r25
    14c0:	af 93       	push	r26
    14c2:	bf 93       	push	r27
    14c4:	ef 93       	push	r30
    14c6:	ff 93       	push	r31
    14c8:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    14cc:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    14d0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    14d4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    14d8:	c9 01       	movw	r24, r18
    14da:	03 2e       	mov	r0, r19
    14dc:	00 0c       	add	r0, r0
    14de:	aa 0b       	sbc	r26, r26
    14e0:	bb 0b       	sbc	r27, r27
    14e2:	dc 01       	movw	r26, r24
    14e4:	99 27       	eor	r25, r25
    14e6:	88 27       	eor	r24, r24
    14e8:	60 e0       	ldi	r22, 0x00	; 0
    14ea:	70 e0       	ldi	r23, 0x00	; 0
    14ec:	84 2b       	or	r24, r20
    14ee:	95 2b       	or	r25, r21
    14f0:	a6 2b       	or	r26, r22
    14f2:	b7 2b       	or	r27, r23
    14f4:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    14f8:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    14fc:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    1500:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    1504:	b0 9b       	sbis	0x16, 0	; 22
    1506:	1b c0       	rjmp	.+54     	; 0x153e <__vector_20+0x98>
    1508:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    150c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1510:	c9 01       	movw	r24, r18
    1512:	01 96       	adiw	r24, 0x01	; 1
    1514:	09 2e       	mov	r0, r25
    1516:	00 0c       	add	r0, r0
    1518:	aa 0b       	sbc	r26, r26
    151a:	bb 0b       	sbc	r27, r27
    151c:	dc 01       	movw	r26, r24
    151e:	99 27       	eor	r25, r25
    1520:	88 27       	eor	r24, r24
    1522:	60 e0       	ldi	r22, 0x00	; 0
    1524:	70 e0       	ldi	r23, 0x00	; 0
    1526:	84 2b       	or	r24, r20
    1528:	95 2b       	or	r25, r21
    152a:	a6 2b       	or	r26, r22
    152c:	b7 2b       	or	r27, r23
    152e:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    1532:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    1536:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    153a:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    153e:	e0 91 4c 02 	lds	r30, 0x024C	; 0x80024c <mtable+0x1e>
    1542:	f0 91 4d 02 	lds	r31, 0x024D	; 0x80024d <mtable+0x1f>
    1546:	30 97       	sbiw	r30, 0x00	; 0
    1548:	39 f0       	breq	.+14     	; 0x1558 <__vector_20+0xb2>
    154a:	6f e0       	ldi	r22, 0x0F	; 15
    154c:	70 e0       	ldi	r23, 0x00	; 0
    154e:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <otable+0x1e>
    1552:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <otable+0x1f>
    1556:	09 95       	icall
    1558:	0e 94 c4 03 	call	0x788	; 0x788 <schedule>
    155c:	ff 91       	pop	r31
    155e:	ef 91       	pop	r30
    1560:	bf 91       	pop	r27
    1562:	af 91       	pop	r26
    1564:	9f 91       	pop	r25
    1566:	8f 91       	pop	r24
    1568:	7f 91       	pop	r23
    156a:	6f 91       	pop	r22
    156c:	5f 91       	pop	r21
    156e:	4f 91       	pop	r20
    1570:	3f 91       	pop	r19
    1572:	2f 91       	pop	r18
    1574:	0f 90       	pop	r0
    1576:	0f be       	out	0x3f, r0	; 63
    1578:	0f 90       	pop	r0
    157a:	1f 90       	pop	r1
    157c:	18 95       	reti

0000157e <__vector_21>:
    157e:	1f 92       	push	r1
    1580:	0f 92       	push	r0
    1582:	0f b6       	in	r0, 0x3f	; 63
    1584:	0f 92       	push	r0
    1586:	11 24       	eor	r1, r1
    1588:	2f 93       	push	r18
    158a:	3f 93       	push	r19
    158c:	4f 93       	push	r20
    158e:	5f 93       	push	r21
    1590:	6f 93       	push	r22
    1592:	7f 93       	push	r23
    1594:	8f 93       	push	r24
    1596:	9f 93       	push	r25
    1598:	af 93       	push	r26
    159a:	bf 93       	push	r27
    159c:	ef 93       	push	r30
    159e:	ff 93       	push	r31
    15a0:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    15a4:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    15a8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    15ac:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    15b0:	c9 01       	movw	r24, r18
    15b2:	03 2e       	mov	r0, r19
    15b4:	00 0c       	add	r0, r0
    15b6:	aa 0b       	sbc	r26, r26
    15b8:	bb 0b       	sbc	r27, r27
    15ba:	dc 01       	movw	r26, r24
    15bc:	99 27       	eor	r25, r25
    15be:	88 27       	eor	r24, r24
    15c0:	60 e0       	ldi	r22, 0x00	; 0
    15c2:	70 e0       	ldi	r23, 0x00	; 0
    15c4:	84 2b       	or	r24, r20
    15c6:	95 2b       	or	r25, r21
    15c8:	a6 2b       	or	r26, r22
    15ca:	b7 2b       	or	r27, r23
    15cc:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    15d0:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    15d4:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    15d8:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    15dc:	b0 9b       	sbis	0x16, 0	; 22
    15de:	1b c0       	rjmp	.+54     	; 0x1616 <__vector_21+0x98>
    15e0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    15e4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    15e8:	c9 01       	movw	r24, r18
    15ea:	01 96       	adiw	r24, 0x01	; 1
    15ec:	09 2e       	mov	r0, r25
    15ee:	00 0c       	add	r0, r0
    15f0:	aa 0b       	sbc	r26, r26
    15f2:	bb 0b       	sbc	r27, r27
    15f4:	dc 01       	movw	r26, r24
    15f6:	99 27       	eor	r25, r25
    15f8:	88 27       	eor	r24, r24
    15fa:	60 e0       	ldi	r22, 0x00	; 0
    15fc:	70 e0       	ldi	r23, 0x00	; 0
    15fe:	84 2b       	or	r24, r20
    1600:	95 2b       	or	r25, r21
    1602:	a6 2b       	or	r26, r22
    1604:	b7 2b       	or	r27, r23
    1606:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    160a:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    160e:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    1612:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    1616:	e0 91 4e 02 	lds	r30, 0x024E	; 0x80024e <mtable+0x20>
    161a:	f0 91 4f 02 	lds	r31, 0x024F	; 0x80024f <mtable+0x21>
    161e:	30 97       	sbiw	r30, 0x00	; 0
    1620:	39 f0       	breq	.+14     	; 0x1630 <__vector_21+0xb2>
    1622:	60 e1       	ldi	r22, 0x10	; 16
    1624:	70 e0       	ldi	r23, 0x00	; 0
    1626:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <otable+0x20>
    162a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <otable+0x21>
    162e:	09 95       	icall
    1630:	0e 94 c4 03 	call	0x788	; 0x788 <schedule>
    1634:	ff 91       	pop	r31
    1636:	ef 91       	pop	r30
    1638:	bf 91       	pop	r27
    163a:	af 91       	pop	r26
    163c:	9f 91       	pop	r25
    163e:	8f 91       	pop	r24
    1640:	7f 91       	pop	r23
    1642:	6f 91       	pop	r22
    1644:	5f 91       	pop	r21
    1646:	4f 91       	pop	r20
    1648:	3f 91       	pop	r19
    164a:	2f 91       	pop	r18
    164c:	0f 90       	pop	r0
    164e:	0f be       	out	0x3f, r0	; 63
    1650:	0f 90       	pop	r0
    1652:	1f 90       	pop	r1
    1654:	18 95       	reti

00001656 <__vector_22>:
    1656:	1f 92       	push	r1
    1658:	0f 92       	push	r0
    165a:	0f b6       	in	r0, 0x3f	; 63
    165c:	0f 92       	push	r0
    165e:	11 24       	eor	r1, r1
    1660:	2f 93       	push	r18
    1662:	3f 93       	push	r19
    1664:	4f 93       	push	r20
    1666:	5f 93       	push	r21
    1668:	6f 93       	push	r22
    166a:	7f 93       	push	r23
    166c:	8f 93       	push	r24
    166e:	9f 93       	push	r25
    1670:	af 93       	push	r26
    1672:	bf 93       	push	r27
    1674:	ef 93       	push	r30
    1676:	ff 93       	push	r31
    1678:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    167c:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    1680:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1684:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1688:	c9 01       	movw	r24, r18
    168a:	03 2e       	mov	r0, r19
    168c:	00 0c       	add	r0, r0
    168e:	aa 0b       	sbc	r26, r26
    1690:	bb 0b       	sbc	r27, r27
    1692:	dc 01       	movw	r26, r24
    1694:	99 27       	eor	r25, r25
    1696:	88 27       	eor	r24, r24
    1698:	60 e0       	ldi	r22, 0x00	; 0
    169a:	70 e0       	ldi	r23, 0x00	; 0
    169c:	84 2b       	or	r24, r20
    169e:	95 2b       	or	r25, r21
    16a0:	a6 2b       	or	r26, r22
    16a2:	b7 2b       	or	r27, r23
    16a4:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    16a8:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    16ac:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    16b0:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    16b4:	b0 9b       	sbis	0x16, 0	; 22
    16b6:	1b c0       	rjmp	.+54     	; 0x16ee <__vector_22+0x98>
    16b8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    16bc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    16c0:	c9 01       	movw	r24, r18
    16c2:	01 96       	adiw	r24, 0x01	; 1
    16c4:	09 2e       	mov	r0, r25
    16c6:	00 0c       	add	r0, r0
    16c8:	aa 0b       	sbc	r26, r26
    16ca:	bb 0b       	sbc	r27, r27
    16cc:	dc 01       	movw	r26, r24
    16ce:	99 27       	eor	r25, r25
    16d0:	88 27       	eor	r24, r24
    16d2:	60 e0       	ldi	r22, 0x00	; 0
    16d4:	70 e0       	ldi	r23, 0x00	; 0
    16d6:	84 2b       	or	r24, r20
    16d8:	95 2b       	or	r25, r21
    16da:	a6 2b       	or	r26, r22
    16dc:	b7 2b       	or	r27, r23
    16de:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    16e2:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    16e6:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    16ea:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    16ee:	e0 91 50 02 	lds	r30, 0x0250	; 0x800250 <mtable+0x22>
    16f2:	f0 91 51 02 	lds	r31, 0x0251	; 0x800251 <mtable+0x23>
    16f6:	30 97       	sbiw	r30, 0x00	; 0
    16f8:	39 f0       	breq	.+14     	; 0x1708 <__vector_22+0xb2>
    16fa:	61 e1       	ldi	r22, 0x11	; 17
    16fc:	70 e0       	ldi	r23, 0x00	; 0
    16fe:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <otable+0x22>
    1702:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <otable+0x23>
    1706:	09 95       	icall
    1708:	0e 94 c4 03 	call	0x788	; 0x788 <schedule>
    170c:	ff 91       	pop	r31
    170e:	ef 91       	pop	r30
    1710:	bf 91       	pop	r27
    1712:	af 91       	pop	r26
    1714:	9f 91       	pop	r25
    1716:	8f 91       	pop	r24
    1718:	7f 91       	pop	r23
    171a:	6f 91       	pop	r22
    171c:	5f 91       	pop	r21
    171e:	4f 91       	pop	r20
    1720:	3f 91       	pop	r19
    1722:	2f 91       	pop	r18
    1724:	0f 90       	pop	r0
    1726:	0f be       	out	0x3f, r0	; 63
    1728:	0f 90       	pop	r0
    172a:	1f 90       	pop	r1
    172c:	18 95       	reti

0000172e <enqueueByDeadline>:
    172e:	ef 92       	push	r14
    1730:	ff 92       	push	r15
    1732:	0f 93       	push	r16
    1734:	1f 93       	push	r17
    1736:	cf 93       	push	r28
    1738:	df 93       	push	r29
    173a:	7b 01       	movw	r14, r22
    173c:	eb 01       	movw	r28, r22
    173e:	a8 81       	ld	r26, Y
    1740:	b9 81       	ldd	r27, Y+1	; 0x01
    1742:	10 97       	sbiw	r26, 0x00	; 0
    1744:	61 f1       	breq	.+88     	; 0x179e <enqueueByDeadline+0x70>
    1746:	fc 01       	movw	r30, r24
    1748:	06 81       	ldd	r16, Z+6	; 0x06
    174a:	17 81       	ldd	r17, Z+7	; 0x07
    174c:	20 85       	ldd	r18, Z+8	; 0x08
    174e:	31 85       	ldd	r19, Z+9	; 0x09
    1750:	16 96       	adiw	r26, 0x06	; 6
    1752:	4d 91       	ld	r20, X+
    1754:	5d 91       	ld	r21, X+
    1756:	6d 91       	ld	r22, X+
    1758:	7c 91       	ld	r23, X
    175a:	19 97       	sbiw	r26, 0x09	; 9
    175c:	04 17       	cp	r16, r20
    175e:	15 07       	cpc	r17, r21
    1760:	26 07       	cpc	r18, r22
    1762:	37 07       	cpc	r19, r23
    1764:	14 f4       	brge	.+4      	; 0x176a <enqueueByDeadline+0x3c>
    1766:	1b c0       	rjmp	.+54     	; 0x179e <enqueueByDeadline+0x70>
    1768:	df 01       	movw	r26, r30
    176a:	ed 91       	ld	r30, X+
    176c:	fc 91       	ld	r31, X
    176e:	11 97       	sbiw	r26, 0x01	; 1
    1770:	30 97       	sbiw	r30, 0x00	; 0
    1772:	49 f0       	breq	.+18     	; 0x1786 <enqueueByDeadline+0x58>
    1774:	46 81       	ldd	r20, Z+6	; 0x06
    1776:	57 81       	ldd	r21, Z+7	; 0x07
    1778:	60 85       	ldd	r22, Z+8	; 0x08
    177a:	71 85       	ldd	r23, Z+9	; 0x09
    177c:	04 17       	cp	r16, r20
    177e:	15 07       	cpc	r17, r21
    1780:	26 07       	cpc	r18, r22
    1782:	37 07       	cpc	r19, r23
    1784:	8c f7       	brge	.-30     	; 0x1768 <enqueueByDeadline+0x3a>
    1786:	ec 01       	movw	r28, r24
    1788:	f9 83       	std	Y+1, r31	; 0x01
    178a:	e8 83       	st	Y, r30
    178c:	10 97       	sbiw	r26, 0x00	; 0
    178e:	21 f4       	brne	.+8      	; 0x1798 <enqueueByDeadline+0x6a>
    1790:	f7 01       	movw	r30, r14
    1792:	91 83       	std	Z+1, r25	; 0x01
    1794:	80 83       	st	Z, r24
    1796:	07 c0       	rjmp	.+14     	; 0x17a6 <enqueueByDeadline+0x78>
    1798:	8d 93       	st	X+, r24
    179a:	9c 93       	st	X, r25
    179c:	04 c0       	rjmp	.+8      	; 0x17a6 <enqueueByDeadline+0x78>
    179e:	ec 01       	movw	r28, r24
    17a0:	b9 83       	std	Y+1, r27	; 0x01
    17a2:	a8 83       	st	Y, r26
    17a4:	f5 cf       	rjmp	.-22     	; 0x1790 <enqueueByDeadline+0x62>
    17a6:	df 91       	pop	r29
    17a8:	cf 91       	pop	r28
    17aa:	1f 91       	pop	r17
    17ac:	0f 91       	pop	r16
    17ae:	ff 90       	pop	r15
    17b0:	ef 90       	pop	r14
    17b2:	08 95       	ret

000017b4 <enqueueByBaseline>:
    17b4:	ef 92       	push	r14
    17b6:	ff 92       	push	r15
    17b8:	0f 93       	push	r16
    17ba:	1f 93       	push	r17
    17bc:	cf 93       	push	r28
    17be:	df 93       	push	r29
    17c0:	7b 01       	movw	r14, r22
    17c2:	eb 01       	movw	r28, r22
    17c4:	a8 81       	ld	r26, Y
    17c6:	b9 81       	ldd	r27, Y+1	; 0x01
    17c8:	10 97       	sbiw	r26, 0x00	; 0
    17ca:	61 f1       	breq	.+88     	; 0x1824 <enqueueByBaseline+0x70>
    17cc:	fc 01       	movw	r30, r24
    17ce:	02 81       	ldd	r16, Z+2	; 0x02
    17d0:	13 81       	ldd	r17, Z+3	; 0x03
    17d2:	24 81       	ldd	r18, Z+4	; 0x04
    17d4:	35 81       	ldd	r19, Z+5	; 0x05
    17d6:	12 96       	adiw	r26, 0x02	; 2
    17d8:	4d 91       	ld	r20, X+
    17da:	5d 91       	ld	r21, X+
    17dc:	6d 91       	ld	r22, X+
    17de:	7c 91       	ld	r23, X
    17e0:	15 97       	sbiw	r26, 0x05	; 5
    17e2:	04 17       	cp	r16, r20
    17e4:	15 07       	cpc	r17, r21
    17e6:	26 07       	cpc	r18, r22
    17e8:	37 07       	cpc	r19, r23
    17ea:	14 f4       	brge	.+4      	; 0x17f0 <enqueueByBaseline+0x3c>
    17ec:	1b c0       	rjmp	.+54     	; 0x1824 <enqueueByBaseline+0x70>
    17ee:	df 01       	movw	r26, r30
    17f0:	ed 91       	ld	r30, X+
    17f2:	fc 91       	ld	r31, X
    17f4:	11 97       	sbiw	r26, 0x01	; 1
    17f6:	30 97       	sbiw	r30, 0x00	; 0
    17f8:	49 f0       	breq	.+18     	; 0x180c <enqueueByBaseline+0x58>
    17fa:	42 81       	ldd	r20, Z+2	; 0x02
    17fc:	53 81       	ldd	r21, Z+3	; 0x03
    17fe:	64 81       	ldd	r22, Z+4	; 0x04
    1800:	75 81       	ldd	r23, Z+5	; 0x05
    1802:	04 17       	cp	r16, r20
    1804:	15 07       	cpc	r17, r21
    1806:	26 07       	cpc	r18, r22
    1808:	37 07       	cpc	r19, r23
    180a:	8c f7       	brge	.-30     	; 0x17ee <enqueueByBaseline+0x3a>
    180c:	ec 01       	movw	r28, r24
    180e:	f9 83       	std	Y+1, r31	; 0x01
    1810:	e8 83       	st	Y, r30
    1812:	10 97       	sbiw	r26, 0x00	; 0
    1814:	21 f4       	brne	.+8      	; 0x181e <enqueueByBaseline+0x6a>
    1816:	f7 01       	movw	r30, r14
    1818:	91 83       	std	Z+1, r25	; 0x01
    181a:	80 83       	st	Z, r24
    181c:	07 c0       	rjmp	.+14     	; 0x182c <enqueueByBaseline+0x78>
    181e:	8d 93       	st	X+, r24
    1820:	9c 93       	st	X, r25
    1822:	04 c0       	rjmp	.+8      	; 0x182c <enqueueByBaseline+0x78>
    1824:	ec 01       	movw	r28, r24
    1826:	b9 83       	std	Y+1, r27	; 0x01
    1828:	a8 83       	st	Y, r26
    182a:	f5 cf       	rjmp	.-22     	; 0x1816 <enqueueByBaseline+0x62>
    182c:	df 91       	pop	r29
    182e:	cf 91       	pop	r28
    1830:	1f 91       	pop	r17
    1832:	0f 91       	pop	r16
    1834:	ff 90       	pop	r15
    1836:	ef 90       	pop	r14
    1838:	08 95       	ret

0000183a <dequeue>:
    183a:	dc 01       	movw	r26, r24
    183c:	ed 91       	ld	r30, X+
    183e:	fc 91       	ld	r31, X
    1840:	11 97       	sbiw	r26, 0x01	; 1
    1842:	30 97       	sbiw	r30, 0x00	; 0
    1844:	59 f4       	brne	.+22     	; 0x185c <dequeue+0x22>
    1846:	8f ef       	ldi	r24, 0xFF	; 255
    1848:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
    184c:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
    1850:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	83 bf       	out	0x33, r24	; 51
    1858:	88 95       	sleep
    185a:	fd cf       	rjmp	.-6      	; 0x1856 <dequeue+0x1c>
    185c:	20 81       	ld	r18, Z
    185e:	31 81       	ldd	r19, Z+1	; 0x01
    1860:	2d 93       	st	X+, r18
    1862:	3c 93       	st	X, r19
    1864:	cf 01       	movw	r24, r30
    1866:	08 95       	ret

00001868 <__vector_9>:
    1868:	1f 92       	push	r1
    186a:	0f 92       	push	r0
    186c:	0f b6       	in	r0, 0x3f	; 63
    186e:	0f 92       	push	r0
    1870:	11 24       	eor	r1, r1
    1872:	2f 93       	push	r18
    1874:	3f 93       	push	r19
    1876:	4f 93       	push	r20
    1878:	5f 93       	push	r21
    187a:	6f 93       	push	r22
    187c:	7f 93       	push	r23
    187e:	8f 93       	push	r24
    1880:	9f 93       	push	r25
    1882:	ef 93       	push	r30
    1884:	ff 93       	push	r31
    1886:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <overflows>
    188a:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <overflows+0x1>
    188e:	01 96       	adiw	r24, 0x01	; 1
    1890:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <overflows+0x1>
    1894:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <overflows>
    1898:	e0 91 92 01 	lds	r30, 0x0192	; 0x800192 <timerQ>
    189c:	f0 91 93 01 	lds	r31, 0x0193	; 0x800193 <timerQ+0x1>
    18a0:	30 97       	sbiw	r30, 0x00	; 0
    18a2:	01 f1       	breq	.+64     	; 0x18e4 <__vector_9+0x7c>
    18a4:	42 81       	ldd	r20, Z+2	; 0x02
    18a6:	53 81       	ldd	r21, Z+3	; 0x03
    18a8:	64 81       	ldd	r22, Z+4	; 0x04
    18aa:	75 81       	ldd	r23, Z+5	; 0x05
    18ac:	86 17       	cp	r24, r22
    18ae:	97 07       	cpc	r25, r23
    18b0:	c9 f4       	brne	.+50     	; 0x18e4 <__vector_9+0x7c>
    18b2:	ca 01       	movw	r24, r20
    18b4:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    18b8:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    18bc:	42 1b       	sub	r20, r18
    18be:	53 0b       	sbc	r21, r19
    18c0:	41 30       	cpi	r20, 0x01	; 1
    18c2:	51 05       	cpc	r21, r1
    18c4:	29 f4       	brne	.+10     	; 0x18d0 <__vector_9+0x68>
    18c6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    18ca:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    18ce:	01 96       	adiw	r24, 0x01	; 1
    18d0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    18d4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    18d8:	ef e6       	ldi	r30, 0x6F	; 111
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	80 81       	ld	r24, Z
    18de:	82 60       	ori	r24, 0x02	; 2
    18e0:	80 83       	st	Z, r24
    18e2:	05 c0       	rjmp	.+10     	; 0x18ee <__vector_9+0x86>
    18e4:	ef e6       	ldi	r30, 0x6F	; 111
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	80 81       	ld	r24, Z
    18ea:	8d 7f       	andi	r24, 0xFD	; 253
    18ec:	80 83       	st	Z, r24
    18ee:	ff 91       	pop	r31
    18f0:	ef 91       	pop	r30
    18f2:	9f 91       	pop	r25
    18f4:	8f 91       	pop	r24
    18f6:	7f 91       	pop	r23
    18f8:	6f 91       	pop	r22
    18fa:	5f 91       	pop	r21
    18fc:	4f 91       	pop	r20
    18fe:	3f 91       	pop	r19
    1900:	2f 91       	pop	r18
    1902:	0f 90       	pop	r0
    1904:	0f be       	out	0x3f, r0	; 63
    1906:	0f 90       	pop	r0
    1908:	1f 90       	pop	r1
    190a:	18 95       	reti

0000190c <__vector_7>:
    190c:	1f 92       	push	r1
    190e:	0f 92       	push	r0
    1910:	0f b6       	in	r0, 0x3f	; 63
    1912:	0f 92       	push	r0
    1914:	11 24       	eor	r1, r1
    1916:	cf 92       	push	r12
    1918:	df 92       	push	r13
    191a:	ef 92       	push	r14
    191c:	ff 92       	push	r15
    191e:	2f 93       	push	r18
    1920:	3f 93       	push	r19
    1922:	4f 93       	push	r20
    1924:	5f 93       	push	r21
    1926:	6f 93       	push	r22
    1928:	7f 93       	push	r23
    192a:	8f 93       	push	r24
    192c:	9f 93       	push	r25
    192e:	af 93       	push	r26
    1930:	bf 93       	push	r27
    1932:	ef 93       	push	r30
    1934:	ff 93       	push	r31
    1936:	c0 90 8c 01 	lds	r12, 0x018C	; 0x80018c <overflows>
    193a:	d0 90 8d 01 	lds	r13, 0x018D	; 0x80018d <overflows+0x1>
    193e:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1942:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1946:	b0 99       	sbic	0x16, 0	; 22
    1948:	0f c0       	rjmp	.+30     	; 0x1968 <__vector_7+0x5c>
    194a:	0d 2c       	mov	r0, r13
    194c:	00 0c       	add	r0, r0
    194e:	ee 08       	sbc	r14, r14
    1950:	ff 08       	sbc	r15, r15
    1952:	d6 01       	movw	r26, r12
    1954:	99 27       	eor	r25, r25
    1956:	88 27       	eor	r24, r24
    1958:	69 01       	movw	r12, r18
    195a:	e1 2c       	mov	r14, r1
    195c:	f1 2c       	mov	r15, r1
    195e:	c8 2a       	or	r12, r24
    1960:	d9 2a       	or	r13, r25
    1962:	ea 2a       	or	r14, r26
    1964:	fb 2a       	or	r15, r27
    1966:	15 c0       	rjmp	.+42     	; 0x1992 <__vector_7+0x86>
    1968:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    196c:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1970:	8f ef       	ldi	r24, 0xFF	; 255
    1972:	c8 1a       	sub	r12, r24
    1974:	d8 0a       	sbc	r13, r24
    1976:	0d 2c       	mov	r0, r13
    1978:	00 0c       	add	r0, r0
    197a:	ee 08       	sbc	r14, r14
    197c:	ff 08       	sbc	r15, r15
    197e:	d6 01       	movw	r26, r12
    1980:	99 27       	eor	r25, r25
    1982:	88 27       	eor	r24, r24
    1984:	69 01       	movw	r12, r18
    1986:	e1 2c       	mov	r14, r1
    1988:	f1 2c       	mov	r15, r1
    198a:	c8 2a       	or	r12, r24
    198c:	d9 2a       	or	r13, r25
    198e:	ea 2a       	or	r14, r26
    1990:	fb 2a       	or	r15, r27
    1992:	e0 91 92 01 	lds	r30, 0x0192	; 0x800192 <timerQ>
    1996:	f0 91 93 01 	lds	r31, 0x0193	; 0x800193 <timerQ+0x1>
    199a:	30 97       	sbiw	r30, 0x00	; 0
    199c:	09 f4       	brne	.+2      	; 0x19a0 <__vector_7+0x94>
    199e:	42 c0       	rjmp	.+132    	; 0x1a24 <__vector_7+0x118>
    19a0:	82 81       	ldd	r24, Z+2	; 0x02
    19a2:	93 81       	ldd	r25, Z+3	; 0x03
    19a4:	a4 81       	ldd	r26, Z+4	; 0x04
    19a6:	b5 81       	ldd	r27, Z+5	; 0x05
    19a8:	8c 19       	sub	r24, r12
    19aa:	9d 09       	sbc	r25, r13
    19ac:	ae 09       	sbc	r26, r14
    19ae:	bf 09       	sbc	r27, r15
    19b0:	18 16       	cp	r1, r24
    19b2:	19 06       	cpc	r1, r25
    19b4:	1a 06       	cpc	r1, r26
    19b6:	1b 06       	cpc	r1, r27
    19b8:	ec f1       	brlt	.+122    	; 0x1a34 <__vector_7+0x128>
    19ba:	82 e9       	ldi	r24, 0x92	; 146
    19bc:	91 e0       	ldi	r25, 0x01	; 1
    19be:	0e 94 1d 0c 	call	0x183a	; 0x183a <dequeue>
    19c2:	64 e9       	ldi	r22, 0x94	; 148
    19c4:	71 e0       	ldi	r23, 0x01	; 1
    19c6:	0e 94 97 0b 	call	0x172e	; 0x172e <enqueueByDeadline>
    19ca:	e0 91 92 01 	lds	r30, 0x0192	; 0x800192 <timerQ>
    19ce:	f0 91 93 01 	lds	r31, 0x0193	; 0x800193 <timerQ+0x1>
    19d2:	30 97       	sbiw	r30, 0x00	; 0
    19d4:	39 f1       	breq	.+78     	; 0x1a24 <__vector_7+0x118>
    19d6:	82 81       	ldd	r24, Z+2	; 0x02
    19d8:	93 81       	ldd	r25, Z+3	; 0x03
    19da:	a4 81       	ldd	r26, Z+4	; 0x04
    19dc:	b5 81       	ldd	r27, Z+5	; 0x05
    19de:	8c 19       	sub	r24, r12
    19e0:	9d 09       	sbc	r25, r13
    19e2:	ae 09       	sbc	r26, r14
    19e4:	bf 09       	sbc	r27, r15
    19e6:	18 16       	cp	r1, r24
    19e8:	19 06       	cpc	r1, r25
    19ea:	1a 06       	cpc	r1, r26
    19ec:	1b 06       	cpc	r1, r27
    19ee:	2c f7       	brge	.-54     	; 0x19ba <__vector_7+0xae>
    19f0:	21 c0       	rjmp	.+66     	; 0x1a34 <__vector_7+0x128>
    19f2:	9c 01       	movw	r18, r24
    19f4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    19f8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    19fc:	84 1b       	sub	r24, r20
    19fe:	95 0b       	sbc	r25, r21
    1a00:	01 97       	sbiw	r24, 0x01	; 1
    1a02:	31 f4       	brne	.+12     	; 0x1a10 <__vector_7+0x104>
    1a04:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1a08:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1a0c:	2f 5f       	subi	r18, 0xFF	; 255
    1a0e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a10:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1a14:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1a18:	ef e6       	ldi	r30, 0x6F	; 111
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	80 81       	ld	r24, Z
    1a1e:	82 60       	ori	r24, 0x02	; 2
    1a20:	80 83       	st	Z, r24
    1a22:	05 c0       	rjmp	.+10     	; 0x1a2e <__vector_7+0x122>
    1a24:	ef e6       	ldi	r30, 0x6F	; 111
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	80 81       	ld	r24, Z
    1a2a:	8d 7f       	andi	r24, 0xFD	; 253
    1a2c:	80 83       	st	Z, r24
    1a2e:	0e 94 c4 03 	call	0x788	; 0x788 <schedule>
    1a32:	0c c0       	rjmp	.+24     	; 0x1a4c <__vector_7+0x140>
    1a34:	82 81       	ldd	r24, Z+2	; 0x02
    1a36:	93 81       	ldd	r25, Z+3	; 0x03
    1a38:	a4 81       	ldd	r26, Z+4	; 0x04
    1a3a:	b5 81       	ldd	r27, Z+5	; 0x05
    1a3c:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    1a40:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    1a44:	2a 17       	cp	r18, r26
    1a46:	3b 07       	cpc	r19, r27
    1a48:	69 f7       	brne	.-38     	; 0x1a24 <__vector_7+0x118>
    1a4a:	d3 cf       	rjmp	.-90     	; 0x19f2 <__vector_7+0xe6>
    1a4c:	ff 91       	pop	r31
    1a4e:	ef 91       	pop	r30
    1a50:	bf 91       	pop	r27
    1a52:	af 91       	pop	r26
    1a54:	9f 91       	pop	r25
    1a56:	8f 91       	pop	r24
    1a58:	7f 91       	pop	r23
    1a5a:	6f 91       	pop	r22
    1a5c:	5f 91       	pop	r21
    1a5e:	4f 91       	pop	r20
    1a60:	3f 91       	pop	r19
    1a62:	2f 91       	pop	r18
    1a64:	ff 90       	pop	r15
    1a66:	ef 90       	pop	r14
    1a68:	df 90       	pop	r13
    1a6a:	cf 90       	pop	r12
    1a6c:	0f 90       	pop	r0
    1a6e:	0f be       	out	0x3f, r0	; 63
    1a70:	0f 90       	pop	r0
    1a72:	1f 90       	pop	r1
    1a74:	18 95       	reti

00001a76 <async>:
    1a76:	3f 92       	push	r3
    1a78:	4f 92       	push	r4
    1a7a:	5f 92       	push	r5
    1a7c:	6f 92       	push	r6
    1a7e:	7f 92       	push	r7
    1a80:	8f 92       	push	r8
    1a82:	9f 92       	push	r9
    1a84:	af 92       	push	r10
    1a86:	bf 92       	push	r11
    1a88:	cf 92       	push	r12
    1a8a:	df 92       	push	r13
    1a8c:	ef 92       	push	r14
    1a8e:	ff 92       	push	r15
    1a90:	0f 93       	push	r16
    1a92:	1f 93       	push	r17
    1a94:	cf 93       	push	r28
    1a96:	df 93       	push	r29
    1a98:	2b 01       	movw	r4, r22
    1a9a:	3c 01       	movw	r6, r24
    1a9c:	49 01       	movw	r8, r18
    1a9e:	5a 01       	movw	r10, r20
    1aa0:	8f b7       	in	r24, 0x3f	; 63
    1aa2:	80 78       	andi	r24, 0x80	; 128
    1aa4:	38 2e       	mov	r3, r24
    1aa6:	f8 94       	cli
    1aa8:	82 e8       	ldi	r24, 0x82	; 130
    1aaa:	91 e0       	ldi	r25, 0x01	; 1
    1aac:	0e 94 1d 0c 	call	0x183a	; 0x183a <dequeue>
    1ab0:	ec 01       	movw	r28, r24
    1ab2:	1b 87       	std	Y+11, r17	; 0x0b
    1ab4:	0a 87       	std	Y+10, r16	; 0x0a
    1ab6:	fd 86       	std	Y+13, r15	; 0x0d
    1ab8:	ec 86       	std	Y+12, r14	; 0x0c
    1aba:	df 86       	std	Y+15, r13	; 0x0f
    1abc:	ce 86       	std	Y+14, r12	; 0x0e
    1abe:	33 20       	and	r3, r3
    1ac0:	61 f0       	breq	.+24     	; 0x1ada <async+0x64>
    1ac2:	e0 91 7c 01 	lds	r30, 0x017C	; 0x80017c <current>
    1ac6:	f0 91 7d 01 	lds	r31, 0x017D	; 0x80017d <current+0x1>
    1aca:	02 80       	ldd	r0, Z+2	; 0x02
    1acc:	f3 81       	ldd	r31, Z+3	; 0x03
    1ace:	e0 2d       	mov	r30, r0
    1ad0:	82 81       	ldd	r24, Z+2	; 0x02
    1ad2:	93 81       	ldd	r25, Z+3	; 0x03
    1ad4:	a4 81       	ldd	r26, Z+4	; 0x04
    1ad6:	b5 81       	ldd	r27, Z+5	; 0x05
    1ad8:	08 c0       	rjmp	.+16     	; 0x1aea <async+0x74>
    1ada:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <timestamp>
    1ade:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <timestamp+0x1>
    1ae2:	a0 91 90 01 	lds	r26, 0x0190	; 0x800190 <timestamp+0x2>
    1ae6:	b0 91 91 01 	lds	r27, 0x0191	; 0x800191 <timestamp+0x3>
    1aea:	48 0e       	add	r4, r24
    1aec:	59 1e       	adc	r5, r25
    1aee:	6a 1e       	adc	r6, r26
    1af0:	7b 1e       	adc	r7, r27
    1af2:	4a 82       	std	Y+2, r4	; 0x02
    1af4:	5b 82       	std	Y+3, r5	; 0x03
    1af6:	6c 82       	std	Y+4, r6	; 0x04
    1af8:	7d 82       	std	Y+5, r7	; 0x05
    1afa:	18 14       	cp	r1, r8
    1afc:	19 04       	cpc	r1, r9
    1afe:	1a 04       	cpc	r1, r10
    1b00:	1b 04       	cpc	r1, r11
    1b02:	44 f0       	brlt	.+16     	; 0x1b14 <async+0x9e>
    1b04:	0f 2e       	mov	r0, r31
    1b06:	88 24       	eor	r8, r8
    1b08:	8a 94       	dec	r8
    1b0a:	98 2c       	mov	r9, r8
    1b0c:	a8 2c       	mov	r10, r8
    1b0e:	ff e7       	ldi	r31, 0x7F	; 127
    1b10:	bf 2e       	mov	r11, r31
    1b12:	f0 2d       	mov	r31, r0
    1b14:	84 0c       	add	r8, r4
    1b16:	95 1c       	adc	r9, r5
    1b18:	a6 1c       	adc	r10, r6
    1b1a:	b7 1c       	adc	r11, r7
    1b1c:	8e 82       	std	Y+6, r8	; 0x06
    1b1e:	9f 82       	std	Y+7, r9	; 0x07
    1b20:	a8 86       	std	Y+8, r10	; 0x08
    1b22:	b9 86       	std	Y+9, r11	; 0x09
    1b24:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <overflows>
    1b28:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <overflows+0x1>
    1b2c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1b30:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1b34:	b0 99       	sbic	0x16, 0	; 22
    1b36:	0e c0       	rjmp	.+28     	; 0x1b54 <async+0xde>
    1b38:	09 2e       	mov	r0, r25
    1b3a:	00 0c       	add	r0, r0
    1b3c:	aa 0b       	sbc	r26, r26
    1b3e:	bb 0b       	sbc	r27, r27
    1b40:	dc 01       	movw	r26, r24
    1b42:	99 27       	eor	r25, r25
    1b44:	88 27       	eor	r24, r24
    1b46:	60 e0       	ldi	r22, 0x00	; 0
    1b48:	70 e0       	ldi	r23, 0x00	; 0
    1b4a:	84 2b       	or	r24, r20
    1b4c:	95 2b       	or	r25, r21
    1b4e:	a6 2b       	or	r26, r22
    1b50:	b7 2b       	or	r27, r23
    1b52:	13 c0       	rjmp	.+38     	; 0x1b7a <async+0x104>
    1b54:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1b58:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1b5c:	01 96       	adiw	r24, 0x01	; 1
    1b5e:	09 2e       	mov	r0, r25
    1b60:	00 0c       	add	r0, r0
    1b62:	aa 0b       	sbc	r26, r26
    1b64:	bb 0b       	sbc	r27, r27
    1b66:	dc 01       	movw	r26, r24
    1b68:	99 27       	eor	r25, r25
    1b6a:	88 27       	eor	r24, r24
    1b6c:	a9 01       	movw	r20, r18
    1b6e:	60 e0       	ldi	r22, 0x00	; 0
    1b70:	70 e0       	ldi	r23, 0x00	; 0
    1b72:	84 2b       	or	r24, r20
    1b74:	95 2b       	or	r25, r21
    1b76:	a6 2b       	or	r26, r22
    1b78:	b7 2b       	or	r27, r23
    1b7a:	48 1a       	sub	r4, r24
    1b7c:	59 0a       	sbc	r5, r25
    1b7e:	6a 0a       	sbc	r6, r26
    1b80:	7b 0a       	sbc	r7, r27
    1b82:	14 14       	cp	r1, r4
    1b84:	15 04       	cpc	r1, r5
    1b86:	16 04       	cpc	r1, r6
    1b88:	17 04       	cpc	r1, r7
    1b8a:	ac f5       	brge	.+106    	; 0x1bf6 <async+0x180>
    1b8c:	62 e9       	ldi	r22, 0x92	; 146
    1b8e:	71 e0       	ldi	r23, 0x01	; 1
    1b90:	ce 01       	movw	r24, r28
    1b92:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <enqueueByBaseline>
    1b96:	e0 91 92 01 	lds	r30, 0x0192	; 0x800192 <timerQ>
    1b9a:	f0 91 93 01 	lds	r31, 0x0193	; 0x800193 <timerQ+0x1>
    1b9e:	30 97       	sbiw	r30, 0x00	; 0
    1ba0:	21 f1       	breq	.+72     	; 0x1bea <async+0x174>
    1ba2:	82 81       	ldd	r24, Z+2	; 0x02
    1ba4:	93 81       	ldd	r25, Z+3	; 0x03
    1ba6:	a4 81       	ldd	r26, Z+4	; 0x04
    1ba8:	b5 81       	ldd	r27, Z+5	; 0x05
    1baa:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    1bae:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    1bb2:	2a 17       	cp	r18, r26
    1bb4:	3b 07       	cpc	r19, r27
    1bb6:	c9 f4       	brne	.+50     	; 0x1bea <async+0x174>
    1bb8:	9c 01       	movw	r18, r24
    1bba:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1bbe:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1bc2:	84 1b       	sub	r24, r20
    1bc4:	95 0b       	sbc	r25, r21
    1bc6:	01 97       	sbiw	r24, 0x01	; 1
    1bc8:	31 f4       	brne	.+12     	; 0x1bd6 <async+0x160>
    1bca:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1bce:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1bd2:	2f 5f       	subi	r18, 0xFF	; 255
    1bd4:	3f 4f       	sbci	r19, 0xFF	; 255
    1bd6:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1bda:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1bde:	ef e6       	ldi	r30, 0x6F	; 111
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	80 81       	ld	r24, Z
    1be4:	82 60       	ori	r24, 0x02	; 2
    1be6:	80 83       	st	Z, r24
    1be8:	41 c0       	rjmp	.+130    	; 0x1c6c <async+0x1f6>
    1bea:	ef e6       	ldi	r30, 0x6F	; 111
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	80 81       	ld	r24, Z
    1bf0:	8d 7f       	andi	r24, 0xFD	; 253
    1bf2:	80 83       	st	Z, r24
    1bf4:	3b c0       	rjmp	.+118    	; 0x1c6c <async+0x1f6>
    1bf6:	64 e9       	ldi	r22, 0x94	; 148
    1bf8:	71 e0       	ldi	r23, 0x01	; 1
    1bfa:	ce 01       	movw	r24, r28
    1bfc:	0e 94 97 0b 	call	0x172e	; 0x172e <enqueueByDeadline>
    1c00:	33 20       	and	r3, r3
    1c02:	b9 f1       	breq	.+110    	; 0x1c72 <async+0x1fc>
    1c04:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <threadPool>
    1c08:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <threadPool+0x1>
    1c0c:	00 97       	sbiw	r24, 0x00	; 0
    1c0e:	81 f1       	breq	.+96     	; 0x1c70 <async+0x1fa>
    1c10:	e0 91 7e 01 	lds	r30, 0x017E	; 0x80017e <activeStack>
    1c14:	f0 91 7f 01 	lds	r31, 0x017F	; 0x80017f <activeStack+0x1>
    1c18:	20 91 94 01 	lds	r18, 0x0194	; 0x800194 <msgQ>
    1c1c:	30 91 95 01 	lds	r19, 0x0195	; 0x800195 <msgQ+0x1>
    1c20:	02 81       	ldd	r16, Z+2	; 0x02
    1c22:	13 81       	ldd	r17, Z+3	; 0x03
    1c24:	d9 01       	movw	r26, r18
    1c26:	16 96       	adiw	r26, 0x06	; 6
    1c28:	4d 91       	ld	r20, X+
    1c2a:	5d 91       	ld	r21, X+
    1c2c:	6d 91       	ld	r22, X+
    1c2e:	7c 91       	ld	r23, X
    1c30:	19 97       	sbiw	r26, 0x09	; 9
    1c32:	d8 01       	movw	r26, r16
    1c34:	16 96       	adiw	r26, 0x06	; 6
    1c36:	0d 91       	ld	r16, X+
    1c38:	1d 91       	ld	r17, X+
    1c3a:	2d 91       	ld	r18, X+
    1c3c:	3c 91       	ld	r19, X
    1c3e:	19 97       	sbiw	r26, 0x09	; 9
    1c40:	40 1b       	sub	r20, r16
    1c42:	51 0b       	sbc	r21, r17
    1c44:	62 0b       	sbc	r22, r18
    1c46:	73 0b       	sbc	r23, r19
    1c48:	9a f4       	brpl	.+38     	; 0x1c70 <async+0x1fa>
    1c4a:	dc 01       	movw	r26, r24
    1c4c:	2d 91       	ld	r18, X+
    1c4e:	3c 91       	ld	r19, X
    1c50:	11 97       	sbiw	r26, 0x01	; 1
    1c52:	30 93 81 01 	sts	0x0181, r19	; 0x800181 <threadPool+0x1>
    1c56:	20 93 80 01 	sts	0x0180, r18	; 0x800180 <threadPool>
    1c5a:	ed 93       	st	X+, r30
    1c5c:	fc 93       	st	X, r31
    1c5e:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <activeStack+0x1>
    1c62:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <activeStack>
    1c66:	0e 94 a4 03 	call	0x748	; 0x748 <dispatch>
    1c6a:	02 c0       	rjmp	.+4      	; 0x1c70 <async+0x1fa>
    1c6c:	33 20       	and	r3, r3
    1c6e:	09 f0       	breq	.+2      	; 0x1c72 <async+0x1fc>
    1c70:	78 94       	sei
    1c72:	ce 01       	movw	r24, r28
    1c74:	df 91       	pop	r29
    1c76:	cf 91       	pop	r28
    1c78:	1f 91       	pop	r17
    1c7a:	0f 91       	pop	r16
    1c7c:	ff 90       	pop	r15
    1c7e:	ef 90       	pop	r14
    1c80:	df 90       	pop	r13
    1c82:	cf 90       	pop	r12
    1c84:	bf 90       	pop	r11
    1c86:	af 90       	pop	r10
    1c88:	9f 90       	pop	r9
    1c8a:	8f 90       	pop	r8
    1c8c:	7f 90       	pop	r7
    1c8e:	6f 90       	pop	r6
    1c90:	5f 90       	pop	r5
    1c92:	4f 90       	pop	r4
    1c94:	3f 90       	pop	r3
    1c96:	08 95       	ret

00001c98 <sync>:
    1c98:	cf 92       	push	r12
    1c9a:	df 92       	push	r13
    1c9c:	ef 92       	push	r14
    1c9e:	ff 92       	push	r15
    1ca0:	0f 93       	push	r16
    1ca2:	1f 93       	push	r17
    1ca4:	cf 93       	push	r28
    1ca6:	df 93       	push	r29
    1ca8:	ec 01       	movw	r28, r24
    1caa:	7b 01       	movw	r14, r22
    1cac:	6a 01       	movw	r12, r20
    1cae:	1f b7       	in	r17, 0x3f	; 63
    1cb0:	10 78       	andi	r17, 0x80	; 128
    1cb2:	f8 94       	cli
    1cb4:	a8 81       	ld	r26, Y
    1cb6:	b9 81       	ldd	r27, Y+1	; 0x01
    1cb8:	10 97       	sbiw	r26, 0x00	; 0
    1cba:	61 f1       	breq	.+88     	; 0x1d14 <sync+0x7c>
    1cbc:	14 96       	adiw	r26, 0x04	; 4
    1cbe:	ed 91       	ld	r30, X+
    1cc0:	fc 91       	ld	r31, X
    1cc2:	15 97       	sbiw	r26, 0x05	; 5
    1cc4:	30 97       	sbiw	r30, 0x00	; 0
    1cc6:	41 f0       	breq	.+16     	; 0x1cd8 <sync+0x40>
    1cc8:	a0 81       	ld	r26, Z
    1cca:	b1 81       	ldd	r27, Z+1	; 0x01
    1ccc:	14 96       	adiw	r26, 0x04	; 4
    1cce:	ed 91       	ld	r30, X+
    1cd0:	fc 91       	ld	r31, X
    1cd2:	15 97       	sbiw	r26, 0x05	; 5
    1cd4:	30 97       	sbiw	r30, 0x00	; 0
    1cd6:	c1 f7       	brne	.-16     	; 0x1cc8 <sync+0x30>
    1cd8:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <current>
    1cdc:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <current+0x1>
    1ce0:	2a 17       	cp	r18, r26
    1ce2:	3b 07       	cpc	r19, r27
    1ce4:	21 f0       	breq	.+8      	; 0x1cee <sync+0x56>
    1ce6:	11 23       	and	r17, r17
    1ce8:	09 f4       	brne	.+2      	; 0x1cec <sync+0x54>
    1cea:	3d c0       	rjmp	.+122    	; 0x1d66 <sync+0xce>
    1cec:	07 c0       	rjmp	.+14     	; 0x1cfc <sync+0x64>
    1cee:	11 23       	and	r17, r17
    1cf0:	09 f4       	brne	.+2      	; 0x1cf4 <sync+0x5c>
    1cf2:	3c c0       	rjmp	.+120    	; 0x1d6c <sync+0xd4>
    1cf4:	78 94       	sei
    1cf6:	8f ef       	ldi	r24, 0xFF	; 255
    1cf8:	9f ef       	ldi	r25, 0xFF	; 255
    1cfa:	52 c0       	rjmp	.+164    	; 0x1da0 <sync+0x108>
    1cfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfe:	9b 81       	ldd	r25, Y+3	; 0x03
    1d00:	00 97       	sbiw	r24, 0x00	; 0
    1d02:	d1 f1       	breq	.+116    	; 0x1d78 <sync+0xe0>
    1d04:	fc 01       	movw	r30, r24
    1d06:	15 82       	std	Z+5, r1	; 0x05
    1d08:	14 82       	std	Z+4, r1	; 0x04
    1d0a:	36 c0       	rjmp	.+108    	; 0x1d78 <sync+0xe0>
    1d0c:	78 94       	sei
    1d0e:	80 e0       	ldi	r24, 0x00	; 0
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	46 c0       	rjmp	.+140    	; 0x1da0 <sync+0x108>
    1d14:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <current>
    1d18:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <current+0x1>
    1d1c:	99 83       	std	Y+1, r25	; 0x01
    1d1e:	88 83       	st	Y, r24
    1d20:	11 23       	and	r17, r17
    1d22:	29 f0       	breq	.+10     	; 0x1d2e <sync+0x96>
    1d24:	8a 81       	ldd	r24, Y+2	; 0x02
    1d26:	9b 81       	ldd	r25, Y+3	; 0x03
    1d28:	01 97       	sbiw	r24, 0x01	; 1
    1d2a:	09 f0       	breq	.+2      	; 0x1d2e <sync+0x96>
    1d2c:	78 94       	sei
    1d2e:	b6 01       	movw	r22, r12
    1d30:	ce 01       	movw	r24, r28
    1d32:	f7 01       	movw	r30, r14
    1d34:	09 95       	icall
    1d36:	f8 2e       	mov	r15, r24
    1d38:	09 2f       	mov	r16, r25
    1d3a:	8f b7       	in	r24, 0x3f	; 63
    1d3c:	f8 94       	cli
    1d3e:	19 82       	std	Y+1, r1	; 0x01
    1d40:	18 82       	st	Y, r1
    1d42:	8a 81       	ldd	r24, Y+2	; 0x02
    1d44:	9b 81       	ldd	r25, Y+3	; 0x03
    1d46:	82 30       	cpi	r24, 0x02	; 2
    1d48:	91 05       	cpc	r25, r1
    1d4a:	38 f0       	brcs	.+14     	; 0x1d5a <sync+0xc2>
    1d4c:	1b 82       	std	Y+3, r1	; 0x03
    1d4e:	1a 82       	std	Y+2, r1	; 0x02
    1d50:	fc 01       	movw	r30, r24
    1d52:	15 82       	std	Z+5, r1	; 0x05
    1d54:	14 82       	std	Z+4, r1	; 0x04
    1d56:	0e 94 a4 03 	call	0x748	; 0x748 <dispatch>
    1d5a:	11 23       	and	r17, r17
    1d5c:	51 f0       	breq	.+20     	; 0x1d72 <sync+0xda>
    1d5e:	78 94       	sei
    1d60:	8f 2d       	mov	r24, r15
    1d62:	90 2f       	mov	r25, r16
    1d64:	1d c0       	rjmp	.+58     	; 0x1da0 <sync+0x108>
    1d66:	8f ef       	ldi	r24, 0xFF	; 255
    1d68:	9f ef       	ldi	r25, 0xFF	; 255
    1d6a:	1a c0       	rjmp	.+52     	; 0x1da0 <sync+0x108>
    1d6c:	8f ef       	ldi	r24, 0xFF	; 255
    1d6e:	9f ef       	ldi	r25, 0xFF	; 255
    1d70:	17 c0       	rjmp	.+46     	; 0x1da0 <sync+0x108>
    1d72:	8f 2d       	mov	r24, r15
    1d74:	90 2f       	mov	r25, r16
    1d76:	14 c0       	rjmp	.+40     	; 0x1da0 <sync+0x108>
    1d78:	3b 83       	std	Y+3, r19	; 0x03
    1d7a:	2a 83       	std	Y+2, r18	; 0x02
    1d7c:	f9 01       	movw	r30, r18
    1d7e:	d5 83       	std	Z+5, r29	; 0x05
    1d80:	c4 83       	std	Z+4, r28	; 0x04
    1d82:	cd 01       	movw	r24, r26
    1d84:	0e 94 a4 03 	call	0x748	; 0x748 <dispatch>
    1d88:	e0 91 7c 01 	lds	r30, 0x017C	; 0x80017c <current>
    1d8c:	f0 91 7d 01 	lds	r31, 0x017D	; 0x80017d <current+0x1>
    1d90:	82 81       	ldd	r24, Z+2	; 0x02
    1d92:	93 81       	ldd	r25, Z+3	; 0x03
    1d94:	89 2b       	or	r24, r25
    1d96:	09 f4       	brne	.+2      	; 0x1d9a <sync+0x102>
    1d98:	b9 cf       	rjmp	.-142    	; 0x1d0c <sync+0x74>
    1d9a:	f9 83       	std	Y+1, r31	; 0x01
    1d9c:	e8 83       	st	Y, r30
    1d9e:	c2 cf       	rjmp	.-124    	; 0x1d24 <sync+0x8c>
    1da0:	df 91       	pop	r29
    1da2:	cf 91       	pop	r28
    1da4:	1f 91       	pop	r17
    1da6:	0f 91       	pop	r16
    1da8:	ff 90       	pop	r15
    1daa:	ef 90       	pop	r14
    1dac:	df 90       	pop	r13
    1dae:	cf 90       	pop	r12
    1db0:	08 95       	ret

00001db2 <run>:
    1db2:	00 91 7c 01 	lds	r16, 0x017C	; 0x80017c <current>
    1db6:	10 91 7d 01 	lds	r17, 0x017D	; 0x80017d <current+0x1>
    1dba:	84 e9       	ldi	r24, 0x94	; 148
    1dbc:	91 e0       	ldi	r25, 0x01	; 1
    1dbe:	0e 94 1d 0c 	call	0x183a	; 0x183a <dequeue>
    1dc2:	ec 01       	movw	r28, r24
    1dc4:	d8 01       	movw	r26, r16
    1dc6:	13 96       	adiw	r26, 0x03	; 3
    1dc8:	9c 93       	st	X, r25
    1dca:	8e 93       	st	-X, r24
    1dcc:	12 97       	sbiw	r26, 0x02	; 2
    1dce:	78 94       	sei
    1dd0:	4e 85       	ldd	r20, Y+14	; 0x0e
    1dd2:	5f 85       	ldd	r21, Y+15	; 0x0f
    1dd4:	6c 85       	ldd	r22, Y+12	; 0x0c
    1dd6:	7d 85       	ldd	r23, Y+13	; 0x0d
    1dd8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1dda:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ddc:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <sync>
    1de0:	8f b7       	in	r24, 0x3f	; 63
    1de2:	f8 94       	cli
    1de4:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <msgPool>
    1de8:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <msgPool+0x1>
    1dec:	99 83       	std	Y+1, r25	; 0x01
    1dee:	88 83       	st	Y, r24
    1df0:	d0 93 83 01 	sts	0x0183, r29	; 0x800183 <msgPool+0x1>
    1df4:	c0 93 82 01 	sts	0x0182, r28	; 0x800182 <msgPool>
    1df8:	e0 91 7e 01 	lds	r30, 0x017E	; 0x80017e <activeStack>
    1dfc:	f0 91 7f 01 	lds	r31, 0x017F	; 0x80017f <activeStack+0x1>
    1e00:	00 81       	ld	r16, Z
    1e02:	11 81       	ldd	r17, Z+1	; 0x01
    1e04:	e8 01       	movw	r28, r16
    1e06:	2a 81       	ldd	r18, Y+2	; 0x02
    1e08:	3b 81       	ldd	r19, Y+3	; 0x03
    1e0a:	a0 91 94 01 	lds	r26, 0x0194	; 0x800194 <msgQ>
    1e0e:	b0 91 95 01 	lds	r27, 0x0195	; 0x800195 <msgQ+0x1>
    1e12:	10 97       	sbiw	r26, 0x00	; 0
    1e14:	c1 f0       	breq	.+48     	; 0x1e46 <run+0x94>
    1e16:	21 15       	cp	r18, r1
    1e18:	31 05       	cpc	r19, r1
    1e1a:	59 f2       	breq	.-106    	; 0x1db2 <run>
    1e1c:	16 96       	adiw	r26, 0x06	; 6
    1e1e:	8d 91       	ld	r24, X+
    1e20:	9d 91       	ld	r25, X+
    1e22:	0d 90       	ld	r0, X+
    1e24:	bc 91       	ld	r27, X
    1e26:	a0 2d       	mov	r26, r0
    1e28:	e9 01       	movw	r28, r18
    1e2a:	4e 81       	ldd	r20, Y+6	; 0x06
    1e2c:	5f 81       	ldd	r21, Y+7	; 0x07
    1e2e:	68 85       	ldd	r22, Y+8	; 0x08
    1e30:	79 85       	ldd	r23, Y+9	; 0x09
    1e32:	84 1b       	sub	r24, r20
    1e34:	95 0b       	sbc	r25, r21
    1e36:	a6 0b       	sbc	r26, r22
    1e38:	b7 0b       	sbc	r27, r23
    1e3a:	18 16       	cp	r1, r24
    1e3c:	19 06       	cpc	r1, r25
    1e3e:	1a 06       	cpc	r1, r26
    1e40:	1b 06       	cpc	r1, r27
    1e42:	0c f0       	brlt	.+2      	; 0x1e46 <run+0x94>
    1e44:	b6 cf       	rjmp	.-148    	; 0x1db2 <run>
    1e46:	10 93 7f 01 	sts	0x017F, r17	; 0x80017f <activeStack+0x1>
    1e4a:	00 93 7e 01 	sts	0x017E, r16	; 0x80017e <activeStack>
    1e4e:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <threadPool>
    1e52:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <threadPool+0x1>
    1e56:	91 83       	std	Z+1, r25	; 0x01
    1e58:	80 83       	st	Z, r24
    1e5a:	f0 93 81 01 	sts	0x0181, r31	; 0x800181 <threadPool+0x1>
    1e5e:	e0 93 80 01 	sts	0x0180, r30	; 0x800180 <threadPool>
    1e62:	a0 91 7e 01 	lds	r26, 0x017E	; 0x80017e <activeStack>
    1e66:	b0 91 7f 01 	lds	r27, 0x017F	; 0x80017f <activeStack+0x1>
    1e6a:	14 96       	adiw	r26, 0x04	; 4
    1e6c:	ed 91       	ld	r30, X+
    1e6e:	fc 91       	ld	r31, X
    1e70:	15 97       	sbiw	r26, 0x05	; 5
    1e72:	30 97       	sbiw	r30, 0x00	; 0
    1e74:	41 f0       	breq	.+16     	; 0x1e86 <run+0xd4>
    1e76:	a0 81       	ld	r26, Z
    1e78:	b1 81       	ldd	r27, Z+1	; 0x01
    1e7a:	14 96       	adiw	r26, 0x04	; 4
    1e7c:	ed 91       	ld	r30, X+
    1e7e:	fc 91       	ld	r31, X
    1e80:	15 97       	sbiw	r26, 0x05	; 5
    1e82:	30 97       	sbiw	r30, 0x00	; 0
    1e84:	c1 f7       	brne	.-16     	; 0x1e76 <run+0xc4>
    1e86:	cd 01       	movw	r24, r26
    1e88:	0e 94 a4 03 	call	0x748	; 0x748 <dispatch>
    1e8c:	92 cf       	rjmp	.-220    	; 0x1db2 <run>

00001e8e <install>:
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    if (i >= 0 && i < N_VECTORS) {
    1e8e:	42 31       	cpi	r20, 0x12	; 18
    1e90:	b8 f4       	brcc	.+46     	; 0x1ec0 <install+0x32>
        char status;
        DISABLE(status);
    1e92:	2f b7       	in	r18, 0x3f	; 63
    1e94:	f8 94       	cli
        otable[i] = obj;
    1e96:	50 e0       	ldi	r21, 0x00	; 0
    1e98:	44 0f       	add	r20, r20
    1e9a:	55 1f       	adc	r21, r21
    1e9c:	fa 01       	movw	r30, r20
    1e9e:	ea 56       	subi	r30, 0x6A	; 106
    1ea0:	fe 4f       	sbci	r31, 0xFE	; 254
    1ea2:	91 83       	std	Z+1, r25	; 0x01
    1ea4:	80 83       	st	Z, r24
        mtable[i] = m;
    1ea6:	fa 01       	movw	r30, r20
    1ea8:	e2 5d       	subi	r30, 0xD2	; 210
    1eaa:	fd 4f       	sbci	r31, 0xFD	; 253
    1eac:	71 83       	std	Z+1, r23	; 0x01
    1eae:	60 83       	st	Z, r22
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    1eb0:	41 e0       	ldi	r20, 0x01	; 1
    1eb2:	50 e0       	ldi	r21, 0x00	; 0
    1eb4:	fc 01       	movw	r30, r24
    1eb6:	53 83       	std	Z+3, r21	; 0x03
    1eb8:	42 83       	std	Z+2, r20	; 0x02
        ENABLE(status);
    1eba:	22 23       	and	r18, r18
    1ebc:	0c f4       	brge	.+2      	; 0x1ec0 <install+0x32>
    1ebe:	78 94       	sei
    1ec0:	08 95       	ret

00001ec2 <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    1ec2:	8c 01       	movw	r16, r24
    1ec4:	7b 01       	movw	r14, r22
    1ec6:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    1ec8:	8f b7       	in	r24, 0x3f	; 63
    1eca:	f8 94       	cli
    initialize();
    1ecc:	0e 94 39 03 	call	0x672	; 0x672 <initialize>
    ENABLE(1);
    1ed0:	78 94       	sei
    if (m != NULL)
    1ed2:	e1 14       	cp	r14, r1
    1ed4:	f1 04       	cpc	r15, r1
    1ed6:	41 f0       	breq	.+16     	; 0x1ee8 <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    1ed8:	20 e0       	ldi	r18, 0x00	; 0
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	a9 01       	movw	r20, r18
    1ede:	60 e0       	ldi	r22, 0x00	; 0
    1ee0:	70 e0       	ldi	r23, 0x00	; 0
    1ee2:	cb 01       	movw	r24, r22
    1ee4:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <async>
    DISABLE(status);
    1ee8:	8f b7       	in	r24, 0x3f	; 63
    1eea:	f8 94       	cli
        }
    }
}

static void idle(void) {
    schedule();
    1eec:	0e 94 c4 03 	call	0x788	; 0x788 <schedule>
    ENABLE(1);
    1ef0:	78 94       	sei
    while (1) {
        SLEEP();
    1ef2:	81 e0       	ldi	r24, 0x01	; 1
    1ef4:	83 bf       	out	0x33, r24	; 51
    1ef6:	88 95       	sleep
    1ef8:	fd cf       	rjmp	.-6      	; 0x1ef4 <tinytimber+0x32>

00001efa <__divmodsi4>:
    1efa:	05 2e       	mov	r0, r21
    1efc:	97 fb       	bst	r25, 7
    1efe:	1e f4       	brtc	.+6      	; 0x1f06 <__divmodsi4+0xc>
    1f00:	00 94       	com	r0
    1f02:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <__negsi2>
    1f06:	57 fd       	sbrc	r21, 7
    1f08:	07 d0       	rcall	.+14     	; 0x1f18 <__divmodsi4_neg2>
    1f0a:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <__udivmodsi4>
    1f0e:	07 fc       	sbrc	r0, 7
    1f10:	03 d0       	rcall	.+6      	; 0x1f18 <__divmodsi4_neg2>
    1f12:	4e f4       	brtc	.+18     	; 0x1f26 <__divmodsi4_exit>
    1f14:	0c 94 94 0f 	jmp	0x1f28	; 0x1f28 <__negsi2>

00001f18 <__divmodsi4_neg2>:
    1f18:	50 95       	com	r21
    1f1a:	40 95       	com	r20
    1f1c:	30 95       	com	r19
    1f1e:	21 95       	neg	r18
    1f20:	3f 4f       	sbci	r19, 0xFF	; 255
    1f22:	4f 4f       	sbci	r20, 0xFF	; 255
    1f24:	5f 4f       	sbci	r21, 0xFF	; 255

00001f26 <__divmodsi4_exit>:
    1f26:	08 95       	ret

00001f28 <__negsi2>:
    1f28:	90 95       	com	r25
    1f2a:	80 95       	com	r24
    1f2c:	70 95       	com	r23
    1f2e:	61 95       	neg	r22
    1f30:	7f 4f       	sbci	r23, 0xFF	; 255
    1f32:	8f 4f       	sbci	r24, 0xFF	; 255
    1f34:	9f 4f       	sbci	r25, 0xFF	; 255
    1f36:	08 95       	ret

00001f38 <__tablejump2__>:
    1f38:	ee 0f       	add	r30, r30
    1f3a:	ff 1f       	adc	r31, r31
    1f3c:	05 90       	lpm	r0, Z+
    1f3e:	f4 91       	lpm	r31, Z
    1f40:	e0 2d       	mov	r30, r0
    1f42:	09 94       	ijmp

00001f44 <__udivmodsi4>:
    1f44:	a1 e2       	ldi	r26, 0x21	; 33
    1f46:	1a 2e       	mov	r1, r26
    1f48:	aa 1b       	sub	r26, r26
    1f4a:	bb 1b       	sub	r27, r27
    1f4c:	fd 01       	movw	r30, r26
    1f4e:	0d c0       	rjmp	.+26     	; 0x1f6a <__udivmodsi4_ep>

00001f50 <__udivmodsi4_loop>:
    1f50:	aa 1f       	adc	r26, r26
    1f52:	bb 1f       	adc	r27, r27
    1f54:	ee 1f       	adc	r30, r30
    1f56:	ff 1f       	adc	r31, r31
    1f58:	a2 17       	cp	r26, r18
    1f5a:	b3 07       	cpc	r27, r19
    1f5c:	e4 07       	cpc	r30, r20
    1f5e:	f5 07       	cpc	r31, r21
    1f60:	20 f0       	brcs	.+8      	; 0x1f6a <__udivmodsi4_ep>
    1f62:	a2 1b       	sub	r26, r18
    1f64:	b3 0b       	sbc	r27, r19
    1f66:	e4 0b       	sbc	r30, r20
    1f68:	f5 0b       	sbc	r31, r21

00001f6a <__udivmodsi4_ep>:
    1f6a:	66 1f       	adc	r22, r22
    1f6c:	77 1f       	adc	r23, r23
    1f6e:	88 1f       	adc	r24, r24
    1f70:	99 1f       	adc	r25, r25
    1f72:	1a 94       	dec	r1
    1f74:	69 f7       	brne	.-38     	; 0x1f50 <__udivmodsi4_loop>
    1f76:	60 95       	com	r22
    1f78:	70 95       	com	r23
    1f7a:	80 95       	com	r24
    1f7c:	90 95       	com	r25
    1f7e:	9b 01       	movw	r18, r22
    1f80:	ac 01       	movw	r20, r24
    1f82:	bd 01       	movw	r22, r26
    1f84:	cf 01       	movw	r24, r30
    1f86:	08 95       	ret

00001f88 <setjmp>:
    1f88:	dc 01       	movw	r26, r24
    1f8a:	2d 92       	st	X+, r2
    1f8c:	3d 92       	st	X+, r3
    1f8e:	4d 92       	st	X+, r4
    1f90:	5d 92       	st	X+, r5
    1f92:	6d 92       	st	X+, r6
    1f94:	7d 92       	st	X+, r7
    1f96:	8d 92       	st	X+, r8
    1f98:	9d 92       	st	X+, r9
    1f9a:	ad 92       	st	X+, r10
    1f9c:	bd 92       	st	X+, r11
    1f9e:	cd 92       	st	X+, r12
    1fa0:	dd 92       	st	X+, r13
    1fa2:	ed 92       	st	X+, r14
    1fa4:	fd 92       	st	X+, r15
    1fa6:	0d 93       	st	X+, r16
    1fa8:	1d 93       	st	X+, r17
    1faa:	cd 93       	st	X+, r28
    1fac:	dd 93       	st	X+, r29
    1fae:	ff 91       	pop	r31
    1fb0:	ef 91       	pop	r30
    1fb2:	8d b7       	in	r24, 0x3d	; 61
    1fb4:	8d 93       	st	X+, r24
    1fb6:	8e b7       	in	r24, 0x3e	; 62
    1fb8:	8d 93       	st	X+, r24
    1fba:	8f b7       	in	r24, 0x3f	; 63
    1fbc:	8d 93       	st	X+, r24
    1fbe:	ed 93       	st	X+, r30
    1fc0:	fd 93       	st	X+, r31
    1fc2:	88 27       	eor	r24, r24
    1fc4:	99 27       	eor	r25, r25
    1fc6:	09 94       	ijmp

00001fc8 <longjmp>:
    1fc8:	dc 01       	movw	r26, r24
    1fca:	cb 01       	movw	r24, r22
    1fcc:	81 30       	cpi	r24, 0x01	; 1
    1fce:	91 05       	cpc	r25, r1
    1fd0:	81 1d       	adc	r24, r1
    1fd2:	2d 90       	ld	r2, X+
    1fd4:	3d 90       	ld	r3, X+
    1fd6:	4d 90       	ld	r4, X+
    1fd8:	5d 90       	ld	r5, X+
    1fda:	6d 90       	ld	r6, X+
    1fdc:	7d 90       	ld	r7, X+
    1fde:	8d 90       	ld	r8, X+
    1fe0:	9d 90       	ld	r9, X+
    1fe2:	ad 90       	ld	r10, X+
    1fe4:	bd 90       	ld	r11, X+
    1fe6:	cd 90       	ld	r12, X+
    1fe8:	dd 90       	ld	r13, X+
    1fea:	ed 90       	ld	r14, X+
    1fec:	fd 90       	ld	r15, X+
    1fee:	0d 91       	ld	r16, X+
    1ff0:	1d 91       	ld	r17, X+
    1ff2:	cd 91       	ld	r28, X+
    1ff4:	dd 91       	ld	r29, X+
    1ff6:	ed 91       	ld	r30, X+
    1ff8:	fd 91       	ld	r31, X+
    1ffa:	0d 90       	ld	r0, X+
    1ffc:	f8 94       	cli
    1ffe:	fe bf       	out	0x3e, r31	; 62
    2000:	0f be       	out	0x3f, r0	; 63
    2002:	ed bf       	out	0x3d, r30	; 61
    2004:	ed 91       	ld	r30, X+
    2006:	fd 91       	ld	r31, X+
    2008:	09 94       	ijmp

0000200a <_exit>:
    200a:	f8 94       	cli

0000200c <__stop_program>:
    200c:	ff cf       	rjmp	.-2      	; 0x200c <__stop_program>
