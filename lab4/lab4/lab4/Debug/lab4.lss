
lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000084  00800100  0000201a  000020ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000201a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000035b  00800184  00800184  00002132  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002132  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002164  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000258  00000000  00000000  000021a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002aff  00000000  00000000  000023fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000107c  00000000  00000000  00004efb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015c2  00000000  00000000  00005f77  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c08  00000000  00000000  0000753c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009fa  00000000  00000000  00008144  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000289b  00000000  00000000  00008b3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000208  00000000  00000000  0000b3d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 05 04 	jmp	0x80a	; 0x80a <__vector_1>
       8:	0c 94 71 04 	jmp	0x8e2	; 0x8e2 <__vector_2>
       c:	0c 94 dd 04 	jmp	0x9ba	; 0x9ba <__vector_3>
      10:	0c 94 49 05 	jmp	0xa92	; 0xa92 <__vector_4>
      14:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <__vector_5>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 8c 0c 	jmp	0x1918	; 0x1918 <__vector_7>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 3a 0c 	jmp	0x1874	; 0x1874 <__vector_9>
      28:	0c 94 21 06 	jmp	0xc42	; 0xc42 <__vector_10>
      2c:	0c 94 8d 06 	jmp	0xd1a	; 0xd1a <__vector_11>
      30:	0c 94 f9 06 	jmp	0xdf2	; 0xdf2 <__vector_12>
      34:	0c 94 65 07 	jmp	0xeca	; 0xeca <__vector_13>
      38:	0c 94 d1 07 	jmp	0xfa2	; 0xfa2 <__vector_14>
      3c:	0c 94 3d 08 	jmp	0x107a	; 0x107a <__vector_15>
      40:	0c 94 a9 08 	jmp	0x1152	; 0x1152 <__vector_16>
      44:	0c 94 15 09 	jmp	0x122a	; 0x122a <__vector_17>
      48:	0c 94 81 09 	jmp	0x1302	; 0x1302 <__vector_18>
      4c:	0c 94 ed 09 	jmp	0x13da	; 0x13da <__vector_19>
      50:	0c 94 59 0a 	jmp	0x14b2	; 0x14b2 <__vector_20>
      54:	0c 94 c5 0a 	jmp	0x158a	; 0x158a <__vector_21>
      58:	0c 94 31 0b 	jmp	0x1662	; 0x1662 <__vector_22>
      5c:	a5 00       	.word	0x00a5	; ????
      5e:	87 00       	.word	0x0087	; ????
      60:	8a 00       	.word	0x008a	; ????
      62:	8d 00       	.word	0x008d	; ????
      64:	90 00       	.word	0x0090	; ????
      66:	93 00       	.word	0x0093	; ????
      68:	96 00       	.word	0x0096	; ????
      6a:	99 00       	.word	0x0099	; ????
      6c:	9c 00       	.word	0x009c	; ????
      6e:	9f 00       	.word	0x009f	; ????

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	11 e0       	ldi	r17, 0x01	; 1
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	ea e1       	ldi	r30, 0x1A	; 26
      84:	f0 e2       	ldi	r31, 0x20	; 32
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	a4 38       	cpi	r26, 0x84	; 132
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	24 e0       	ldi	r18, 0x04	; 4
      94:	a4 e8       	ldi	r26, 0x84	; 132
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	af 3d       	cpi	r26, 0xDF	; 223
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 0c 03 	call	0x618	; 0x618 <main>
      a6:	0c 94 0b 10 	jmp	0x2016	; 0x2016 <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <updateOneOrTwo>:
	writeChar((num % 100) / 10 + '0', pos);
	pos++;
	writeChar(num % 10 + '0', pos);
}

void updateOneOrTwo(GUI *self) {
      ae:	fc 01       	movw	r30, r24
	LCDDR0 &= ~(0b01000100);
      b0:	ac ee       	ldi	r26, 0xEC	; 236
      b2:	b0 e0       	ldi	r27, 0x00	; 0
      b4:	9c 91       	ld	r25, X
      b6:	9b 7b       	andi	r25, 0xBB	; 187
      b8:	9c 93       	st	X, r25
	if (self->activeGen == self->gen2) {		
      ba:	20 85       	ldd	r18, Z+8	; 0x08
      bc:	31 85       	ldd	r19, Z+9	; 0x09
      be:	86 81       	ldd	r24, Z+6	; 0x06
      c0:	97 81       	ldd	r25, Z+7	; 0x07
      c2:	28 17       	cp	r18, r24
      c4:	39 07       	cpc	r19, r25
      c6:	31 f4       	brne	.+12     	; 0xd4 <updateOneOrTwo+0x26>
		LCDDR0 |= 0b01000000;
      c8:	ec ee       	ldi	r30, 0xEC	; 236
      ca:	f0 e0       	ldi	r31, 0x00	; 0
      cc:	80 81       	ld	r24, Z
      ce:	80 64       	ori	r24, 0x40	; 64
      d0:	80 83       	st	Z, r24
      d2:	08 95       	ret
	} else {
		LCDDR0 |= 0b00000100;
      d4:	ec ee       	ldi	r30, 0xEC	; 236
      d6:	f0 e0       	ldi	r31, 0x00	; 0
      d8:	80 81       	ld	r24, Z
      da:	84 60       	ori	r24, 0x04	; 4
      dc:	80 83       	st	Z, r24
      de:	08 95       	ret

000000e0 <LCD_init>:
#include "PulseGen.h"
#include "TinyTimber.h"

void LCD_init() {
	// LCD(Contrast Control Register), LCD(Display Configuration)(000): 300 s, LCD(Contrast Control)(1111): 3.35 V
	LCDCCR = (0 << LCDDC0) | (0 << LCDDC1) | (0 << LCDDC2) | (1 << LCDCC0) | (1 << LCDCC1) | (1 << LCDCC2) | (1 << LCDCC3);
      e0:	8f e0       	ldi	r24, 0x0F	; 15
      e2:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__DATA_REGION_ORIGIN__+0x87>
	// LCDCS: asynchronous clock, LCDMUX(11): D=1/4, B=1/3, LCD(Port Mask): 25 segments
	LCDCRB = (1 << LCDCS) | (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM2) | (1 << LCDPM1) | (1 << LCDPM0);
      e6:	87 eb       	ldi	r24, 0xB7	; 183
      e8:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
	// LCD(Clock Divide)(111): (D=8) 32Hz
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);
      ec:	87 e0       	ldi	r24, 0x07	; 7
      ee:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__DATA_REGION_ORIGIN__+0x86>
	// LCD(Control and Status Register A), LCD(Enable): True, LCD(Low Power Waveform): True, (no frame interrupt, no blanking)
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
      f2:	80 ec       	ldi	r24, 0xC0	; 192
      f4:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
      f8:	08 95       	ret

000000fa <getSegmentForChar>:
int none[] = {0b0000, 0b0000, 0b0000, 0b0000};

// Returns wall of data based on char input ('0' = 48 (char))
int* getSegmentForChar(char ch) {

	switch (ch) {
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	fc 01       	movw	r30, r24
      fe:	f0 97       	sbiw	r30, 0x30	; 48
     100:	ea 30       	cpi	r30, 0x0A	; 10
     102:	f1 05       	cpc	r31, r1
     104:	f8 f4       	brcc	.+62     	; 0x144 <getSegmentForChar+0x4a>
     106:	e2 5d       	subi	r30, 0xD2	; 210
     108:	ff 4f       	sbci	r31, 0xFF	; 255
     10a:	0c 94 a2 0f 	jmp	0x1f44	; 0x1f44 <__tablejump2__>
		case '0': return zero;
		case '1': return one;
     10e:	80 e4       	ldi	r24, 0x40	; 64
     110:	91 e0       	ldi	r25, 0x01	; 1
     112:	08 95       	ret
		case '2': return two;
     114:	88 e3       	ldi	r24, 0x38	; 56
     116:	91 e0       	ldi	r25, 0x01	; 1
     118:	08 95       	ret
		case '3': return three;
     11a:	80 e3       	ldi	r24, 0x30	; 48
     11c:	91 e0       	ldi	r25, 0x01	; 1
     11e:	08 95       	ret
		case '4': return four;
     120:	88 e2       	ldi	r24, 0x28	; 40
     122:	91 e0       	ldi	r25, 0x01	; 1
     124:	08 95       	ret
		case '5': return five;
     126:	80 e2       	ldi	r24, 0x20	; 32
     128:	91 e0       	ldi	r25, 0x01	; 1
     12a:	08 95       	ret
		case '6': return six;
     12c:	88 e1       	ldi	r24, 0x18	; 24
     12e:	91 e0       	ldi	r25, 0x01	; 1
     130:	08 95       	ret
		case '7': return seven;
     132:	80 e1       	ldi	r24, 0x10	; 16
     134:	91 e0       	ldi	r25, 0x01	; 1
     136:	08 95       	ret
		case '8': return eight;
     138:	88 e0       	ldi	r24, 0x08	; 8
     13a:	91 e0       	ldi	r25, 0x01	; 1
     13c:	08 95       	ret
		case '9': return nine;
     13e:	80 e0       	ldi	r24, 0x00	; 0
     140:	91 e0       	ldi	r25, 0x01	; 1
     142:	08 95       	ret
		default:  return none;
     144:	84 e8       	ldi	r24, 0x84	; 132
     146:	91 e0       	ldi	r25, 0x01	; 1
     148:	08 95       	ret

// Returns wall of data based on char input ('0' = 48 (char))
int* getSegmentForChar(char ch) {

	switch (ch) {
		case '0': return zero;
     14a:	88 e4       	ldi	r24, 0x48	; 72
     14c:	91 e0       	ldi	r25, 0x01	; 1
		case '7': return seven;
		case '8': return eight;
		case '9': return nine;
		default:  return none;
	}
}
     14e:	08 95       	ret

00000150 <writeChar>:

// Write a char ch at position pos
void writeChar(char ch, uint8_t pos) {
     150:	cf 93       	push	r28
	// Check if outside range
	if (pos > 5 || pos < 0) return;	
     152:	66 30       	cpi	r22, 0x06	; 6
     154:	08 f0       	brcs	.+2      	; 0x158 <writeChar+0x8>
     156:	e4 c0       	rjmp	.+456    	; 0x320 <writeChar+0x1d0>
     158:	c6 2f       	mov	r28, r22

	// Get correct char data
	int* segment = getSegmentForChar(ch);
     15a:	0e 94 7d 00 	call	0xfa	; 0xfa <getSegmentForChar>
     15e:	fc 01       	movw	r30, r24
	
	// Chose position
	switch (pos) {
     160:	c2 30       	cpi	r28, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <writeChar+0x16>
     164:	67 c0       	rjmp	.+206    	; 0x234 <writeChar+0xe4>
     166:	28 f4       	brcc	.+10     	; 0x172 <writeChar+0x22>
     168:	cc 23       	and	r28, r28
     16a:	51 f0       	breq	.+20     	; 0x180 <writeChar+0x30>
     16c:	c1 30       	cpi	r28, 0x01	; 1
     16e:	29 f1       	breq	.+74     	; 0x1ba <writeChar+0x6a>
     170:	d7 c0       	rjmp	.+430    	; 0x320 <writeChar+0x1d0>
     172:	c3 30       	cpi	r28, 0x03	; 3
     174:	09 f4       	brne	.+2      	; 0x178 <writeChar+0x28>
     176:	7b c0       	rjmp	.+246    	; 0x26e <writeChar+0x11e>
     178:	c4 30       	cpi	r28, 0x04	; 4
     17a:	09 f4       	brne	.+2      	; 0x17e <writeChar+0x2e>
     17c:	b5 c0       	rjmp	.+362    	; 0x2e8 <writeChar+0x198>
     17e:	d0 c0       	rjmp	.+416    	; 0x320 <writeChar+0x1d0>
		case 0:
			// Segment start at 0, 5, 10, 15, higher 4 bits.
			// (LCDDR0 & 0xF0) clears the segment before writing 
			LCDDR0 = (LCDDR0 & 0xF0) | segment[0];
     180:	ac ee       	ldi	r26, 0xEC	; 236
     182:	b0 e0       	ldi	r27, 0x00	; 0
     184:	8c 91       	ld	r24, X
     186:	80 7f       	andi	r24, 0xF0	; 240
     188:	90 81       	ld	r25, Z
     18a:	89 2b       	or	r24, r25
     18c:	8c 93       	st	X, r24
			LCDDR5 = (LCDDR5 & 0xF0) | segment[1];
     18e:	a1 ef       	ldi	r26, 0xF1	; 241
     190:	b0 e0       	ldi	r27, 0x00	; 0
     192:	8c 91       	ld	r24, X
     194:	80 7f       	andi	r24, 0xF0	; 240
     196:	92 81       	ldd	r25, Z+2	; 0x02
     198:	89 2b       	or	r24, r25
     19a:	8c 93       	st	X, r24
			LCDDR10 = (LCDDR10 & 0xF0) | segment[2];
     19c:	a6 ef       	ldi	r26, 0xF6	; 246
     19e:	b0 e0       	ldi	r27, 0x00	; 0
     1a0:	8c 91       	ld	r24, X
     1a2:	80 7f       	andi	r24, 0xF0	; 240
     1a4:	94 81       	ldd	r25, Z+4	; 0x04
     1a6:	89 2b       	or	r24, r25
     1a8:	8c 93       	st	X, r24
			LCDDR15 = (LCDDR15 & 0xF0) | segment[3];
     1aa:	ab ef       	ldi	r26, 0xFB	; 251
     1ac:	b0 e0       	ldi	r27, 0x00	; 0
     1ae:	8c 91       	ld	r24, X
     1b0:	80 7f       	andi	r24, 0xF0	; 240
     1b2:	96 81       	ldd	r25, Z+6	; 0x06
     1b4:	89 2b       	or	r24, r25
     1b6:	8c 93       	st	X, r24
			break;
     1b8:	b3 c0       	rjmp	.+358    	; 0x320 <writeChar+0x1d0>
		case 1:
			// Same segment just lower 4 bits
			LCDDR0 = (LCDDR0 & 0x0F) | (segment[0] << 4);
     1ba:	ac ee       	ldi	r26, 0xEC	; 236
     1bc:	b0 e0       	ldi	r27, 0x00	; 0
     1be:	2c 91       	ld	r18, X
     1c0:	80 81       	ld	r24, Z
     1c2:	91 81       	ldd	r25, Z+1	; 0x01
     1c4:	82 95       	swap	r24
     1c6:	92 95       	swap	r25
     1c8:	90 7f       	andi	r25, 0xF0	; 240
     1ca:	98 27       	eor	r25, r24
     1cc:	80 7f       	andi	r24, 0xF0	; 240
     1ce:	98 27       	eor	r25, r24
     1d0:	92 2f       	mov	r25, r18
     1d2:	9f 70       	andi	r25, 0x0F	; 15
     1d4:	89 2b       	or	r24, r25
     1d6:	8c 93       	st	X, r24
			LCDDR5 = (LCDDR5 & 0x0F) | (segment[1] << 4);
     1d8:	a1 ef       	ldi	r26, 0xF1	; 241
     1da:	b0 e0       	ldi	r27, 0x00	; 0
     1dc:	2c 91       	ld	r18, X
     1de:	82 81       	ldd	r24, Z+2	; 0x02
     1e0:	93 81       	ldd	r25, Z+3	; 0x03
     1e2:	82 95       	swap	r24
     1e4:	92 95       	swap	r25
     1e6:	90 7f       	andi	r25, 0xF0	; 240
     1e8:	98 27       	eor	r25, r24
     1ea:	80 7f       	andi	r24, 0xF0	; 240
     1ec:	98 27       	eor	r25, r24
     1ee:	92 2f       	mov	r25, r18
     1f0:	9f 70       	andi	r25, 0x0F	; 15
     1f2:	89 2b       	or	r24, r25
     1f4:	8c 93       	st	X, r24
			LCDDR10 = (LCDDR10 & 0x0F) | (segment[2] << 4);
     1f6:	a6 ef       	ldi	r26, 0xF6	; 246
     1f8:	b0 e0       	ldi	r27, 0x00	; 0
     1fa:	2c 91       	ld	r18, X
     1fc:	84 81       	ldd	r24, Z+4	; 0x04
     1fe:	95 81       	ldd	r25, Z+5	; 0x05
     200:	82 95       	swap	r24
     202:	92 95       	swap	r25
     204:	90 7f       	andi	r25, 0xF0	; 240
     206:	98 27       	eor	r25, r24
     208:	80 7f       	andi	r24, 0xF0	; 240
     20a:	98 27       	eor	r25, r24
     20c:	92 2f       	mov	r25, r18
     20e:	9f 70       	andi	r25, 0x0F	; 15
     210:	89 2b       	or	r24, r25
     212:	8c 93       	st	X, r24
			LCDDR15 = (LCDDR15 & 0x0F) | (segment[3] << 4);
     214:	ab ef       	ldi	r26, 0xFB	; 251
     216:	b0 e0       	ldi	r27, 0x00	; 0
     218:	2c 91       	ld	r18, X
     21a:	86 81       	ldd	r24, Z+6	; 0x06
     21c:	97 81       	ldd	r25, Z+7	; 0x07
     21e:	82 95       	swap	r24
     220:	92 95       	swap	r25
     222:	90 7f       	andi	r25, 0xF0	; 240
     224:	98 27       	eor	r25, r24
     226:	80 7f       	andi	r24, 0xF0	; 240
     228:	98 27       	eor	r25, r24
     22a:	92 2f       	mov	r25, r18
     22c:	9f 70       	andi	r25, 0x0F	; 15
     22e:	89 2b       	or	r24, r25
     230:	8c 93       	st	X, r24
			break;
     232:	76 c0       	rjmp	.+236    	; 0x320 <writeChar+0x1d0>
		case 2:
			LCDDR1 = (LCDDR1 & 0xF0) | segment[0];
     234:	ad ee       	ldi	r26, 0xED	; 237
     236:	b0 e0       	ldi	r27, 0x00	; 0
     238:	8c 91       	ld	r24, X
     23a:	80 7f       	andi	r24, 0xF0	; 240
     23c:	90 81       	ld	r25, Z
     23e:	89 2b       	or	r24, r25
     240:	8c 93       	st	X, r24
			LCDDR6 = (LCDDR6 & 0xF0) | segment[1];
     242:	a2 ef       	ldi	r26, 0xF2	; 242
     244:	b0 e0       	ldi	r27, 0x00	; 0
     246:	8c 91       	ld	r24, X
     248:	80 7f       	andi	r24, 0xF0	; 240
     24a:	92 81       	ldd	r25, Z+2	; 0x02
     24c:	89 2b       	or	r24, r25
     24e:	8c 93       	st	X, r24
			LCDDR11 = (LCDDR11 & 0xF0) | segment[2];
     250:	a7 ef       	ldi	r26, 0xF7	; 247
     252:	b0 e0       	ldi	r27, 0x00	; 0
     254:	8c 91       	ld	r24, X
     256:	80 7f       	andi	r24, 0xF0	; 240
     258:	94 81       	ldd	r25, Z+4	; 0x04
     25a:	89 2b       	or	r24, r25
     25c:	8c 93       	st	X, r24
			LCDDR16 = (LCDDR16 & 0xF0) | segment[3];
     25e:	ac ef       	ldi	r26, 0xFC	; 252
     260:	b0 e0       	ldi	r27, 0x00	; 0
     262:	8c 91       	ld	r24, X
     264:	80 7f       	andi	r24, 0xF0	; 240
     266:	96 81       	ldd	r25, Z+6	; 0x06
     268:	89 2b       	or	r24, r25
     26a:	8c 93       	st	X, r24
			break;
     26c:	59 c0       	rjmp	.+178    	; 0x320 <writeChar+0x1d0>
		case 3:
			LCDDR1 = (LCDDR1 & 0x0F) | (segment[0] << 4);
     26e:	ad ee       	ldi	r26, 0xED	; 237
     270:	b0 e0       	ldi	r27, 0x00	; 0
     272:	2c 91       	ld	r18, X
     274:	80 81       	ld	r24, Z
     276:	91 81       	ldd	r25, Z+1	; 0x01
     278:	82 95       	swap	r24
     27a:	92 95       	swap	r25
     27c:	90 7f       	andi	r25, 0xF0	; 240
     27e:	98 27       	eor	r25, r24
     280:	80 7f       	andi	r24, 0xF0	; 240
     282:	98 27       	eor	r25, r24
     284:	92 2f       	mov	r25, r18
     286:	9f 70       	andi	r25, 0x0F	; 15
     288:	89 2b       	or	r24, r25
     28a:	8c 93       	st	X, r24
			LCDDR6 = (LCDDR6 & 0x0F) | (segment[1] << 4);
     28c:	a2 ef       	ldi	r26, 0xF2	; 242
     28e:	b0 e0       	ldi	r27, 0x00	; 0
     290:	2c 91       	ld	r18, X
     292:	82 81       	ldd	r24, Z+2	; 0x02
     294:	93 81       	ldd	r25, Z+3	; 0x03
     296:	82 95       	swap	r24
     298:	92 95       	swap	r25
     29a:	90 7f       	andi	r25, 0xF0	; 240
     29c:	98 27       	eor	r25, r24
     29e:	80 7f       	andi	r24, 0xF0	; 240
     2a0:	98 27       	eor	r25, r24
     2a2:	92 2f       	mov	r25, r18
     2a4:	9f 70       	andi	r25, 0x0F	; 15
     2a6:	89 2b       	or	r24, r25
     2a8:	8c 93       	st	X, r24
			LCDDR11 = (LCDDR11 & 0x0F) | (segment[2] << 4);
     2aa:	a7 ef       	ldi	r26, 0xF7	; 247
     2ac:	b0 e0       	ldi	r27, 0x00	; 0
     2ae:	2c 91       	ld	r18, X
     2b0:	84 81       	ldd	r24, Z+4	; 0x04
     2b2:	95 81       	ldd	r25, Z+5	; 0x05
     2b4:	82 95       	swap	r24
     2b6:	92 95       	swap	r25
     2b8:	90 7f       	andi	r25, 0xF0	; 240
     2ba:	98 27       	eor	r25, r24
     2bc:	80 7f       	andi	r24, 0xF0	; 240
     2be:	98 27       	eor	r25, r24
     2c0:	92 2f       	mov	r25, r18
     2c2:	9f 70       	andi	r25, 0x0F	; 15
     2c4:	89 2b       	or	r24, r25
     2c6:	8c 93       	st	X, r24
			LCDDR16 = (LCDDR16 & 0x0F) | (segment[3] << 4);
     2c8:	ac ef       	ldi	r26, 0xFC	; 252
     2ca:	b0 e0       	ldi	r27, 0x00	; 0
     2cc:	2c 91       	ld	r18, X
     2ce:	86 81       	ldd	r24, Z+6	; 0x06
     2d0:	97 81       	ldd	r25, Z+7	; 0x07
     2d2:	82 95       	swap	r24
     2d4:	92 95       	swap	r25
     2d6:	90 7f       	andi	r25, 0xF0	; 240
     2d8:	98 27       	eor	r25, r24
     2da:	80 7f       	andi	r24, 0xF0	; 240
     2dc:	98 27       	eor	r25, r24
     2de:	92 2f       	mov	r25, r18
     2e0:	9f 70       	andi	r25, 0x0F	; 15
     2e2:	89 2b       	or	r24, r25
     2e4:	8c 93       	st	X, r24
			break;
     2e6:	1c c0       	rjmp	.+56     	; 0x320 <writeChar+0x1d0>
		case 4:
			LCDDR2 = (LCDDR2 & 0xF0) | segment[0];
     2e8:	ae ee       	ldi	r26, 0xEE	; 238
     2ea:	b0 e0       	ldi	r27, 0x00	; 0
     2ec:	8c 91       	ld	r24, X
     2ee:	80 7f       	andi	r24, 0xF0	; 240
     2f0:	90 81       	ld	r25, Z
     2f2:	89 2b       	or	r24, r25
     2f4:	8c 93       	st	X, r24
			LCDDR7 = (LCDDR7 & 0xF0) | segment[1];
     2f6:	a3 ef       	ldi	r26, 0xF3	; 243
     2f8:	b0 e0       	ldi	r27, 0x00	; 0
     2fa:	8c 91       	ld	r24, X
     2fc:	80 7f       	andi	r24, 0xF0	; 240
     2fe:	92 81       	ldd	r25, Z+2	; 0x02
     300:	89 2b       	or	r24, r25
     302:	8c 93       	st	X, r24
			LCDDR12 = (LCDDR12 & 0xF0) | segment[2];
     304:	a8 ef       	ldi	r26, 0xF8	; 248
     306:	b0 e0       	ldi	r27, 0x00	; 0
     308:	8c 91       	ld	r24, X
     30a:	80 7f       	andi	r24, 0xF0	; 240
     30c:	94 81       	ldd	r25, Z+4	; 0x04
     30e:	89 2b       	or	r24, r25
     310:	8c 93       	st	X, r24
			LCDDR17 = (LCDDR17 & 0xF0) | segment[3];
     312:	ad ef       	ldi	r26, 0xFD	; 253
     314:	b0 e0       	ldi	r27, 0x00	; 0
     316:	8c 91       	ld	r24, X
     318:	80 7f       	andi	r24, 0xF0	; 240
     31a:	96 81       	ldd	r25, Z+6	; 0x06
     31c:	89 2b       	or	r24, r25
     31e:	8c 93       	st	X, r24
			break;
	}
}
     320:	cf 91       	pop	r28
     322:	08 95       	ret

00000324 <printAt>:

void printAt(long num, int pos) {
     324:	8f 92       	push	r8
     326:	9f 92       	push	r9
     328:	af 92       	push	r10
     32a:	bf 92       	push	r11
     32c:	cf 92       	push	r12
     32e:	df 92       	push	r13
     330:	ef 92       	push	r14
     332:	ff 92       	push	r15
     334:	cf 93       	push	r28
     336:	df 93       	push	r29
     338:	4b 01       	movw	r8, r22
     33a:	5c 01       	movw	r10, r24
     33c:	ea 01       	movw	r28, r20
	writeChar((num % 100) / 10 + '0', pos);
     33e:	24 e6       	ldi	r18, 0x64	; 100
     340:	30 e0       	ldi	r19, 0x00	; 0
     342:	40 e0       	ldi	r20, 0x00	; 0
     344:	50 e0       	ldi	r21, 0x00	; 0
     346:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__divmodsi4>
     34a:	0f 2e       	mov	r0, r31
     34c:	fa e0       	ldi	r31, 0x0A	; 10
     34e:	cf 2e       	mov	r12, r31
     350:	d1 2c       	mov	r13, r1
     352:	e1 2c       	mov	r14, r1
     354:	f1 2c       	mov	r15, r1
     356:	f0 2d       	mov	r31, r0
     358:	a7 01       	movw	r20, r14
     35a:	96 01       	movw	r18, r12
     35c:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__divmodsi4>
     360:	6c 2f       	mov	r22, r28
     362:	80 e3       	ldi	r24, 0x30	; 48
     364:	82 0f       	add	r24, r18
     366:	0e 94 a8 00 	call	0x150	; 0x150 <writeChar>
	pos++;
	writeChar(num % 10 + '0', pos);
     36a:	21 96       	adiw	r28, 0x01	; 1
     36c:	c5 01       	movw	r24, r10
     36e:	b4 01       	movw	r22, r8
     370:	a7 01       	movw	r20, r14
     372:	96 01       	movw	r18, r12
     374:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__divmodsi4>
     378:	86 2f       	mov	r24, r22
     37a:	6c 2f       	mov	r22, r28
     37c:	80 5d       	subi	r24, 0xD0	; 208
     37e:	0e 94 a8 00 	call	0x150	; 0x150 <writeChar>
}
     382:	df 91       	pop	r29
     384:	cf 91       	pop	r28
     386:	ff 90       	pop	r15
     388:	ef 90       	pop	r14
     38a:	df 90       	pop	r13
     38c:	cf 90       	pop	r12
     38e:	bf 90       	pop	r11
     390:	af 90       	pop	r10
     392:	9f 90       	pop	r9
     394:	8f 90       	pop	r8
     396:	08 95       	ret

00000398 <updateDisplay>:
		SYNC(self->activeGen, setFrequency, 0);
	}
	ASYNC(self, updateDisplay, 0);
}

void updateDisplay(GUI *self) {
     398:	0f 93       	push	r16
     39a:	1f 93       	push	r17
     39c:	cf 93       	push	r28
     39e:	df 93       	push	r29
     3a0:	ec 01       	movw	r28, r24
	updateOneOrTwo(self);
     3a2:	0e 94 57 00 	call	0xae	; 0xae <updateOneOrTwo>
	int gen1Freq = SYNC(self->gen1, getFrequency, 0);
     3a6:	40 e0       	ldi	r20, 0x00	; 0
     3a8:	50 e0       	ldi	r21, 0x00	; 0
     3aa:	6b e3       	ldi	r22, 0x3B	; 59
     3ac:	73 e0       	ldi	r23, 0x03	; 3
     3ae:	8c 81       	ldd	r24, Y+4	; 0x04
     3b0:	9d 81       	ldd	r25, Y+5	; 0x05
     3b2:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <sync>
     3b6:	8c 01       	movw	r16, r24
	int gen2Freq = SYNC(self->gen2, getFrequency, 0);
     3b8:	40 e0       	ldi	r20, 0x00	; 0
     3ba:	50 e0       	ldi	r21, 0x00	; 0
     3bc:	6b e3       	ldi	r22, 0x3B	; 59
     3be:	73 e0       	ldi	r23, 0x03	; 3
     3c0:	8e 81       	ldd	r24, Y+6	; 0x06
     3c2:	9f 81       	ldd	r25, Y+7	; 0x07
     3c4:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <sync>
     3c8:	ec 01       	movw	r28, r24
    printAt(gen1Freq, 0); //gen1 hz at pos 0-1
     3ca:	b8 01       	movw	r22, r16
     3cc:	11 0f       	add	r17, r17
     3ce:	88 0b       	sbc	r24, r24
     3d0:	99 0b       	sbc	r25, r25
     3d2:	40 e0       	ldi	r20, 0x00	; 0
     3d4:	50 e0       	ldi	r21, 0x00	; 0
     3d6:	0e 94 92 01 	call	0x324	; 0x324 <printAt>
    printAt(gen2Freq, 3); //gen2 hz at pos 3-4	
     3da:	be 01       	movw	r22, r28
     3dc:	dd 0f       	add	r29, r29
     3de:	88 0b       	sbc	r24, r24
     3e0:	99 0b       	sbc	r25, r25
     3e2:	43 e0       	ldi	r20, 0x03	; 3
     3e4:	50 e0       	ldi	r21, 0x00	; 0
     3e6:	0e 94 92 01 	call	0x324	; 0x324 <printAt>
     3ea:	df 91       	pop	r29
     3ec:	cf 91       	pop	r28
     3ee:	1f 91       	pop	r17
     3f0:	0f 91       	pop	r16
     3f2:	08 95       	ret

000003f4 <swithToLeftGen>:
	} else {
		LCDDR0 |= 0b00000100;
	}
}

void swithToLeftGen(GUI *self) {
     3f4:	cf 92       	push	r12
     3f6:	df 92       	push	r13
     3f8:	ef 92       	push	r14
     3fa:	ff 92       	push	r15
     3fc:	0f 93       	push	r16
     3fe:	1f 93       	push	r17
	self->activeGen = self->gen1;
     400:	fc 01       	movw	r30, r24
     402:	24 81       	ldd	r18, Z+4	; 0x04
     404:	35 81       	ldd	r19, Z+5	; 0x05
     406:	31 87       	std	Z+9, r19	; 0x09
     408:	20 87       	std	Z+8, r18	; 0x08
	ASYNC(self, updateOneOrTwo, 0);
     40a:	c1 2c       	mov	r12, r1
     40c:	d1 2c       	mov	r13, r1
     40e:	0f 2e       	mov	r0, r31
     410:	f7 e5       	ldi	r31, 0x57	; 87
     412:	ef 2e       	mov	r14, r31
     414:	f0 e0       	ldi	r31, 0x00	; 0
     416:	ff 2e       	mov	r15, r31
     418:	f0 2d       	mov	r31, r0
     41a:	8c 01       	movw	r16, r24
     41c:	20 e0       	ldi	r18, 0x00	; 0
     41e:	30 e0       	ldi	r19, 0x00	; 0
     420:	a9 01       	movw	r20, r18
     422:	60 e0       	ldi	r22, 0x00	; 0
     424:	70 e0       	ldi	r23, 0x00	; 0
     426:	cb 01       	movw	r24, r22
     428:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <async>
}
     42c:	1f 91       	pop	r17
     42e:	0f 91       	pop	r16
     430:	ff 90       	pop	r15
     432:	ef 90       	pop	r14
     434:	df 90       	pop	r13
     436:	cf 90       	pop	r12
     438:	08 95       	ret

0000043a <swithToRightGen>:

void swithToRightGen(GUI *self) {
     43a:	cf 92       	push	r12
     43c:	df 92       	push	r13
     43e:	ef 92       	push	r14
     440:	ff 92       	push	r15
     442:	0f 93       	push	r16
     444:	1f 93       	push	r17
	self->activeGen = self->gen2;
     446:	fc 01       	movw	r30, r24
     448:	26 81       	ldd	r18, Z+6	; 0x06
     44a:	37 81       	ldd	r19, Z+7	; 0x07
     44c:	31 87       	std	Z+9, r19	; 0x09
     44e:	20 87       	std	Z+8, r18	; 0x08
	ASYNC(self, updateOneOrTwo, 0);
     450:	c1 2c       	mov	r12, r1
     452:	d1 2c       	mov	r13, r1
     454:	0f 2e       	mov	r0, r31
     456:	f7 e5       	ldi	r31, 0x57	; 87
     458:	ef 2e       	mov	r14, r31
     45a:	f0 e0       	ldi	r31, 0x00	; 0
     45c:	ff 2e       	mov	r15, r31
     45e:	f0 2d       	mov	r31, r0
     460:	8c 01       	movw	r16, r24
     462:	20 e0       	ldi	r18, 0x00	; 0
     464:	30 e0       	ldi	r19, 0x00	; 0
     466:	a9 01       	movw	r20, r18
     468:	60 e0       	ldi	r22, 0x00	; 0
     46a:	70 e0       	ldi	r23, 0x00	; 0
     46c:	cb 01       	movw	r24, r22
     46e:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <async>
}
     472:	1f 91       	pop	r17
     474:	0f 91       	pop	r16
     476:	ff 90       	pop	r15
     478:	ef 90       	pop	r14
     47a:	df 90       	pop	r13
     47c:	cf 90       	pop	r12
     47e:	08 95       	ret

00000480 <adjustFrequency>:

void adjustFrequency(GUI *self, int delta) {
     480:	cf 92       	push	r12
     482:	df 92       	push	r13
     484:	ef 92       	push	r14
     486:	ff 92       	push	r15
     488:	0f 93       	push	r16
     48a:	1f 93       	push	r17
     48c:	cf 93       	push	r28
     48e:	df 93       	push	r29
     490:	8c 01       	movw	r16, r24
     492:	eb 01       	movw	r28, r22
	// Get right target gen
	int newFreq = SYNC(self->activeGen, getFrequency, 0) + delta;
     494:	40 e0       	ldi	r20, 0x00	; 0
     496:	50 e0       	ldi	r21, 0x00	; 0
     498:	6b e3       	ldi	r22, 0x3B	; 59
     49a:	73 e0       	ldi	r23, 0x03	; 3
     49c:	fc 01       	movw	r30, r24
     49e:	80 85       	ldd	r24, Z+8	; 0x08
     4a0:	91 85       	ldd	r25, Z+9	; 0x09
     4a2:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <sync>
     4a6:	ac 01       	movw	r20, r24
     4a8:	4c 0f       	add	r20, r28
     4aa:	5d 1f       	adc	r21, r29
	if (newFreq < 0) newFreq = 0;
	// Update everything
	SYNC(self->activeGen, setFrequency, newFreq);
     4ac:	55 23       	and	r21, r21
     4ae:	14 f4       	brge	.+4      	; 0x4b4 <adjustFrequency+0x34>
     4b0:	40 e0       	ldi	r20, 0x00	; 0
     4b2:	50 e0       	ldi	r21, 0x00	; 0
     4b4:	6b e2       	ldi	r22, 0x2B	; 43
     4b6:	73 e0       	ldi	r23, 0x03	; 3
     4b8:	f8 01       	movw	r30, r16
     4ba:	80 85       	ldd	r24, Z+8	; 0x08
     4bc:	91 85       	ldd	r25, Z+9	; 0x09
     4be:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <sync>
	ASYNC(self, updateDisplay, 0);
     4c2:	c1 2c       	mov	r12, r1
     4c4:	d1 2c       	mov	r13, r1
     4c6:	0f 2e       	mov	r0, r31
     4c8:	fc ec       	ldi	r31, 0xCC	; 204
     4ca:	ef 2e       	mov	r14, r31
     4cc:	f1 e0       	ldi	r31, 0x01	; 1
     4ce:	ff 2e       	mov	r15, r31
     4d0:	f0 2d       	mov	r31, r0
     4d2:	20 e0       	ldi	r18, 0x00	; 0
     4d4:	30 e0       	ldi	r19, 0x00	; 0
     4d6:	a9 01       	movw	r20, r18
     4d8:	60 e0       	ldi	r22, 0x00	; 0
     4da:	70 e0       	ldi	r23, 0x00	; 0
     4dc:	cb 01       	movw	r24, r22
     4de:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <async>
}
     4e2:	df 91       	pop	r29
     4e4:	cf 91       	pop	r28
     4e6:	1f 91       	pop	r17
     4e8:	0f 91       	pop	r16
     4ea:	ff 90       	pop	r15
     4ec:	ef 90       	pop	r14
     4ee:	df 90       	pop	r13
     4f0:	cf 90       	pop	r12
     4f2:	08 95       	ret

000004f4 <saveRestore>:

void saveRestore(GUI *self) {
     4f4:	cf 92       	push	r12
     4f6:	df 92       	push	r13
     4f8:	ef 92       	push	r14
     4fa:	ff 92       	push	r15
     4fc:	0f 93       	push	r16
     4fe:	1f 93       	push	r17
     500:	cf 93       	push	r28
     502:	df 93       	push	r29
     504:	ec 01       	movw	r28, r24
	if (SYNC(self->activeGen, getFrequency, 0) == 0) {
     506:	40 e0       	ldi	r20, 0x00	; 0
     508:	50 e0       	ldi	r21, 0x00	; 0
     50a:	6b e3       	ldi	r22, 0x3B	; 59
     50c:	73 e0       	ldi	r23, 0x03	; 3
     50e:	88 85       	ldd	r24, Y+8	; 0x08
     510:	99 85       	ldd	r25, Y+9	; 0x09
     512:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <sync>
     516:	89 2b       	or	r24, r25
     518:	49 f4       	brne	.+18     	; 0x52c <__stack+0x2d>
		SYNC(self->activeGen, restore, 0);
     51a:	40 e0       	ldi	r20, 0x00	; 0
     51c:	50 e0       	ldi	r21, 0x00	; 0
     51e:	65 e3       	ldi	r22, 0x35	; 53
     520:	73 e0       	ldi	r23, 0x03	; 3
     522:	88 85       	ldd	r24, Y+8	; 0x08
     524:	99 85       	ldd	r25, Y+9	; 0x09
     526:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <sync>
     52a:	10 c0       	rjmp	.+32     	; 0x54c <__stack+0x4d>
		} else {
		SYNC(self->activeGen, save, 0);
     52c:	40 e0       	ldi	r20, 0x00	; 0
     52e:	50 e0       	ldi	r21, 0x00	; 0
     530:	6f e2       	ldi	r22, 0x2F	; 47
     532:	73 e0       	ldi	r23, 0x03	; 3
     534:	88 85       	ldd	r24, Y+8	; 0x08
     536:	99 85       	ldd	r25, Y+9	; 0x09
     538:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <sync>
		SYNC(self->activeGen, setFrequency, 0);
     53c:	40 e0       	ldi	r20, 0x00	; 0
     53e:	50 e0       	ldi	r21, 0x00	; 0
     540:	6b e2       	ldi	r22, 0x2B	; 43
     542:	73 e0       	ldi	r23, 0x03	; 3
     544:	88 85       	ldd	r24, Y+8	; 0x08
     546:	99 85       	ldd	r25, Y+9	; 0x09
     548:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <sync>
	}
	ASYNC(self, updateDisplay, 0);
     54c:	c1 2c       	mov	r12, r1
     54e:	d1 2c       	mov	r13, r1
     550:	0f 2e       	mov	r0, r31
     552:	fc ec       	ldi	r31, 0xCC	; 204
     554:	ef 2e       	mov	r14, r31
     556:	f1 e0       	ldi	r31, 0x01	; 1
     558:	ff 2e       	mov	r15, r31
     55a:	f0 2d       	mov	r31, r0
     55c:	8e 01       	movw	r16, r28
     55e:	20 e0       	ldi	r18, 0x00	; 0
     560:	30 e0       	ldi	r19, 0x00	; 0
     562:	a9 01       	movw	r20, r18
     564:	60 e0       	ldi	r22, 0x00	; 0
     566:	70 e0       	ldi	r23, 0x00	; 0
     568:	cb 01       	movw	r24, r22
     56a:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <async>
}
     56e:	df 91       	pop	r29
     570:	cf 91       	pop	r28
     572:	1f 91       	pop	r17
     574:	0f 91       	pop	r16
     576:	ff 90       	pop	r15
     578:	ef 90       	pop	r14
     57a:	df 90       	pop	r13
     57c:	cf 90       	pop	r12
     57e:	08 95       	ret

00000580 <joystickInit>:
#include "PulseGen.h"


void joystickInit() {
    //sätter på upp, ner och inåt som input
    PORTB = PORTB | 0b11010000;
     580:	85 b1       	in	r24, 0x05	; 5
     582:	80 6d       	ori	r24, 0xD0	; 208
     584:	85 b9       	out	0x05, r24	; 5
    //sätter på höger och vänster  som input
    PORTE = PORTE | 0b00001100;
     586:	8e b1       	in	r24, 0x0e	; 14
     588:	8c 60       	ori	r24, 0x0C	; 12
     58a:	8e b9       	out	0x0e, r24	; 14
    //DDRE = 0b01010000;
    //sätter på upp,ner,in (15) hög,ven (14) //sida 53 AVr..169 nånitng
    EIMSK = EIMSK | (1<<PCINT15) | (1<<PCINT14);
     58c:	8d b3       	in	r24, 0x1d	; 29
     58e:	80 6c       	ori	r24, 0xC0	; 192
     590:	8d bb       	out	0x1d, r24	; 29

    //sätter på upp, ner och inåt på joystick (som interrupt)
    PCMSK1 = PCMSK1 | (1<<PCINT15) | (1<<PCINT14) | (1<<PCINT12);
     592:	ec e6       	ldi	r30, 0x6C	; 108
     594:	f0 e0       	ldi	r31, 0x00	; 0
     596:	80 81       	ld	r24, Z
     598:	80 6d       	ori	r24, 0xD0	; 208
     59a:	80 83       	st	Z, r24
    //sätter på höger och vänster på joystick (som interrupt)
    PCMSK0 = PCMSK0 | (1<<PCINT3) | (1<<PCINT2);
     59c:	eb e6       	ldi	r30, 0x6B	; 107
     59e:	f0 e0       	ldi	r31, 0x00	; 0
     5a0:	80 81       	ld	r24, Z
     5a2:	8c 60       	ori	r24, 0x0C	; 12
     5a4:	80 83       	st	Z, r24
     5a6:	08 95       	ret

000005a8 <interruptPinB>:
}


// Joystick input handler
void interruptPinB(JoystickHandler *self) { 
     5a8:	cf 93       	push	r28
     5aa:	df 93       	push	r29
     5ac:	ec 01       	movw	r28, r24
    if((PINB & 0b10000000) >> 7 == 0){ //down press on joystick
     5ae:	1f 99       	sbic	0x03, 7	; 3
     5b0:	06 c0       	rjmp	.+12     	; 0x5be <interruptPinB+0x16>
        adjustFrequency(self->gui, -1);
     5b2:	6f ef       	ldi	r22, 0xFF	; 255
     5b4:	7f ef       	ldi	r23, 0xFF	; 255
     5b6:	8c 81       	ldd	r24, Y+4	; 0x04
     5b8:	9d 81       	ldd	r25, Y+5	; 0x05
     5ba:	0e 94 40 02 	call	0x480	; 0x480 <adjustFrequency>
    }

    if((PINB & 0b01000000) >> 6 == 0){ //up press on joystick
     5be:	1e 99       	sbic	0x03, 6	; 3
     5c0:	06 c0       	rjmp	.+12     	; 0x5ce <interruptPinB+0x26>
        adjustFrequency(self->gui, 1);
     5c2:	61 e0       	ldi	r22, 0x01	; 1
     5c4:	70 e0       	ldi	r23, 0x00	; 0
     5c6:	8c 81       	ldd	r24, Y+4	; 0x04
     5c8:	9d 81       	ldd	r25, Y+5	; 0x05
     5ca:	0e 94 40 02 	call	0x480	; 0x480 <adjustFrequency>
    }

    if((PINB & 0b00010000) >> 4 == 0){ //middle press
     5ce:	1c 99       	sbic	0x03, 4	; 3
     5d0:	04 c0       	rjmp	.+8      	; 0x5da <interruptPinB+0x32>
        saveRestore(self->gui);
     5d2:	8c 81       	ldd	r24, Y+4	; 0x04
     5d4:	9d 81       	ldd	r25, Y+5	; 0x05
     5d6:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <saveRestore>
    }
}
     5da:	df 91       	pop	r29
     5dc:	cf 91       	pop	r28
     5de:	08 95       	ret

000005e0 <interruptPinE>:

void interruptPinE(JoystickHandler *self) {  
     5e0:	cf 93       	push	r28
     5e2:	df 93       	push	r29
     5e4:	ec 01       	movw	r28, r24
    if((PINE & 0b00000100) >> 2 == 0){ //left press
     5e6:	62 99       	sbic	0x0c, 2	; 12
     5e8:	04 c0       	rjmp	.+8      	; 0x5f2 <interruptPinE+0x12>
       swithToLeftGen(self->gui);
     5ea:	8c 81       	ldd	r24, Y+4	; 0x04
     5ec:	9d 81       	ldd	r25, Y+5	; 0x05
     5ee:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <swithToLeftGen>
    }

    if((PINE & 0b00001000) >> 3 == 0){  //right press
     5f2:	63 99       	sbic	0x0c, 3	; 12
     5f4:	04 c0       	rjmp	.+8      	; 0x5fe <interruptPinE+0x1e>
       swithToRightGen(self->gui);
     5f6:	8c 81       	ldd	r24, Y+4	; 0x04
     5f8:	9d 81       	ldd	r25, Y+5	; 0x05
     5fa:	0e 94 1d 02 	call	0x43a	; 0x43a <swithToRightGen>
    }
     5fe:	df 91       	pop	r29
     600:	cf 91       	pop	r28
     602:	08 95       	ret

00000604 <sysInit>:
GUI gui = initGUI(&gen1, &gen2);
JoystickHandler joystick = initJoystickHandler(&gui);

void sysInit(){
    // Clock Prescale Register "maximum speed"
	CLKPR = 0b10000000; // Clock Prescaler Change Enable
     604:	e1 e6       	ldi	r30, 0x61	; 97
     606:	f0 e0       	ldi	r31, 0x00	; 0
     608:	80 e8       	ldi	r24, 0x80	; 128
     60a:	80 83       	st	Z, r24
	CLKPR = 0b00000000; // Set 0 for sysclock
     60c:	10 82       	st	Z, r1
     60e:	08 95       	ret

00000610 <pinOutputInit>:
}

void pinOutputInit(){
    // Initialize Port E as output for PE4 and PE6
	DDRE |= (1 << PE4) | (1 << PE6);
     610:	8d b1       	in	r24, 0x0d	; 13
     612:	80 65       	ori	r24, 0x50	; 80
     614:	8d b9       	out	0x0d, r24	; 13
     616:	08 95       	ret

00000618 <main>:
}


int main() {
    sysInit();
     618:	0e 94 02 03 	call	0x604	; 0x604 <sysInit>
    pinOutputInit();
     61c:	0e 94 08 03 	call	0x610	; 0x610 <pinOutputInit>
    joystickInit();
     620:	0e 94 c0 02 	call	0x580	; 0x580 <joystickInit>
    LCD_init();
     624:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_init>
	//LCDDR0 = 0b01000100;
	//LCDDR0 = 0b01000100;
	
    // Instal interupt handler
    //when the joystick's vertical state changes
    INSTALL(&joystick, interruptPinB, IRQ_PCINT1);
     628:	42 e0       	ldi	r20, 0x02	; 2
     62a:	64 ed       	ldi	r22, 0xD4	; 212
     62c:	72 e0       	ldi	r23, 0x02	; 2
     62e:	80 e5       	ldi	r24, 0x50	; 80
     630:	91 e0       	ldi	r25, 0x01	; 1
     632:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <install>
    //when the joystick's horizontal (minus middle) state changes
    INSTALL(&joystick, interruptPinE, IRQ_PCINT0);
     636:	41 e0       	ldi	r20, 0x01	; 1
     638:	60 ef       	ldi	r22, 0xF0	; 240
     63a:	72 e0       	ldi	r23, 0x02	; 2
     63c:	80 e5       	ldi	r24, 0x50	; 80
     63e:	91 e0       	ldi	r25, 0x01	; 1
     640:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <install>
    
    // Start kernel
    return TINYTIMBER(&gui, NULL, NULL);
     644:	40 e0       	ldi	r20, 0x00	; 0
     646:	50 e0       	ldi	r21, 0x00	; 0
     648:	60 e0       	ldi	r22, 0x00	; 0
     64a:	70 e0       	ldi	r23, 0x00	; 0
     64c:	86 e5       	ldi	r24, 0x56	; 86
     64e:	91 e0       	ldi	r25, 0x01	; 1
     650:	0e 94 67 0f 	call	0x1ece	; 0x1ece <tinytimber>
}
     654:	08 95       	ret

00000656 <setFrequency>:
#include "PortWrite.h"
#include "TinyTimber.h"


void setFrequency(PulseGen *self, int freq) {
	self->frequency = freq;
     656:	fc 01       	movw	r30, r24
     658:	71 87       	std	Z+9, r23	; 0x09
     65a:	60 87       	std	Z+8, r22	; 0x08
     65c:	08 95       	ret

0000065e <save>:
    }
}

// Saves the freq
void save(PulseGen *self) {
	self->saved_freq = self->frequency;
     65e:	fc 01       	movw	r30, r24
     660:	20 85       	ldd	r18, Z+8	; 0x08
     662:	31 85       	ldd	r19, Z+9	; 0x09
     664:	33 87       	std	Z+11, r19	; 0x0b
     666:	22 87       	std	Z+10, r18	; 0x0a
     668:	08 95       	ret

0000066a <restore>:
}

// Restores freq to last saved
void restore(PulseGen *self) {
	self->frequency = self->saved_freq;
     66a:	fc 01       	movw	r30, r24
     66c:	22 85       	ldd	r18, Z+10	; 0x0a
     66e:	33 85       	ldd	r19, Z+11	; 0x0b
     670:	31 87       	std	Z+9, r19	; 0x09
     672:	20 87       	std	Z+8, r18	; 0x08
     674:	08 95       	ret

00000676 <getFrequency>:
}

int getFrequency(PulseGen *self) {
	return self->frequency;
}
     676:	fc 01       	movw	r30, r24
     678:	80 85       	ldd	r24, Z+8	; 0x08
     67a:	91 85       	ldd	r25, Z+9	; 0x09
     67c:	08 95       	ret

0000067e <initialize>:
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
}
     67e:	cf 93       	push	r28
     680:	df 93       	push	r29
     682:	00 d0       	rcall	.+0      	; 0x684 <initialize+0x6>
     684:	00 d0       	rcall	.+0      	; 0x686 <initialize+0x8>
     686:	cd b7       	in	r28, 0x3d	; 61
     688:	de b7       	in	r29, 0x3e	; 62
     68a:	8f e7       	ldi	r24, 0x7F	; 127
     68c:	92 e0       	ldi	r25, 0x02	; 2
     68e:	2f e5       	ldi	r18, 0x5F	; 95
     690:	33 e0       	ldi	r19, 0x03	; 3
     692:	fc 01       	movw	r30, r24
     694:	70 97       	sbiw	r30, 0x10	; 16
     696:	91 83       	std	Z+1, r25	; 0x01
     698:	80 83       	st	Z, r24
     69a:	40 96       	adiw	r24, 0x10	; 16
     69c:	82 17       	cp	r24, r18
     69e:	93 07       	cpc	r25, r19
     6a0:	c1 f7       	brne	.-16     	; 0x692 <initialize+0x14>
     6a2:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <messages+0xe1>
     6a6:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <messages+0xe0>
     6aa:	ea eb       	ldi	r30, 0xBA	; 186
     6ac:	f1 e0       	ldi	r31, 0x01	; 1
     6ae:	87 ed       	ldi	r24, 0xD7	; 215
     6b0:	91 e0       	ldi	r25, 0x01	; 1
     6b2:	91 83       	std	Z+1, r25	; 0x01
     6b4:	80 83       	st	Z, r24
     6b6:	84 ef       	ldi	r24, 0xF4	; 244
     6b8:	91 e0       	ldi	r25, 0x01	; 1
     6ba:	96 8f       	std	Z+30, r25	; 0x1e
     6bc:	85 8f       	std	Z+29, r24	; 0x1d
     6be:	a1 e1       	ldi	r26, 0x11	; 17
     6c0:	b2 e0       	ldi	r27, 0x02	; 2
     6c2:	b3 af       	std	Z+59, r27	; 0x3b
     6c4:	a2 af       	std	Z+58, r26	; 0x3a
     6c6:	1d 92       	st	X+, r1
     6c8:	1c 92       	st	X, r1
     6ca:	fa 83       	std	Y+2, r31	; 0x02
     6cc:	e9 83       	std	Y+1, r30	; 0x01
     6ce:	eb eb       	ldi	r30, 0xBB	; 187
     6d0:	f3 e0       	ldi	r31, 0x03	; 3
     6d2:	fc 83       	std	Y+4, r31	; 0x04
     6d4:	eb 83       	std	Y+3, r30	; 0x03
     6d6:	89 81       	ldd	r24, Y+1	; 0x01
     6d8:	9a 81       	ldd	r25, Y+2	; 0x02
     6da:	06 96       	adiw	r24, 0x06	; 6
     6dc:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <setjmp>
     6e0:	8b 81       	ldd	r24, Y+3	; 0x03
     6e2:	9c 81       	ldd	r25, Y+4	; 0x04
     6e4:	e9 81       	ldd	r30, Y+1	; 0x01
     6e6:	fa 81       	ldd	r31, Y+2	; 0x02
     6e8:	97 8b       	std	Z+23, r25	; 0x17
     6ea:	86 8b       	std	Z+22, r24	; 0x16
     6ec:	91 8f       	std	Z+25, r25	; 0x19
     6ee:	80 8f       	std	Z+24, r24	; 0x18
     6f0:	8f ed       	ldi	r24, 0xDF	; 223
     6f2:	9e e0       	ldi	r25, 0x0E	; 14
     6f4:	94 8f       	std	Z+28, r25	; 0x1c
     6f6:	83 8f       	std	Z+27, r24	; 0x1b
     6f8:	15 82       	std	Z+5, r1	; 0x05
     6fa:	14 82       	std	Z+4, r1	; 0x04
     6fc:	7d 96       	adiw	r30, 0x1d	; 29
     6fe:	fa 83       	std	Y+2, r31	; 0x02
     700:	e9 83       	std	Y+1, r30	; 0x01
     702:	eb 81       	ldd	r30, Y+3	; 0x03
     704:	fc 81       	ldd	r31, Y+4	; 0x04
     706:	e0 5a       	subi	r30, 0xA0	; 160
     708:	ff 4f       	sbci	r31, 0xFF	; 255
     70a:	fc 83       	std	Y+4, r31	; 0x04
     70c:	eb 83       	std	Y+3, r30	; 0x03
     70e:	89 81       	ldd	r24, Y+1	; 0x01
     710:	9a 81       	ldd	r25, Y+2	; 0x02
     712:	8e 52       	subi	r24, 0x2E	; 46
     714:	92 40       	sbci	r25, 0x02	; 2
     716:	f9 f6       	brne	.-66     	; 0x6d6 <initialize+0x58>
     718:	e2 e5       	ldi	r30, 0x52	; 82
     71a:	f2 e0       	ldi	r31, 0x02	; 2
     71c:	11 82       	std	Z+1, r1	; 0x01
     71e:	10 82       	st	Z, r1
     720:	15 82       	std	Z+5, r1	; 0x05
     722:	14 82       	std	Z+4, r1	; 0x04
     724:	13 82       	std	Z+3, r1	; 0x03
     726:	12 82       	std	Z+2, r1	; 0x02
     728:	e1 e6       	ldi	r30, 0x61	; 97
     72a:	f0 e0       	ldi	r31, 0x00	; 0
     72c:	80 e8       	ldi	r24, 0x80	; 128
     72e:	80 83       	st	Z, r24
     730:	10 82       	st	Z, r1
     732:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     736:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     73a:	84 e0       	ldi	r24, 0x04	; 4
     73c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     740:	81 e0       	ldi	r24, 0x01	; 1
     742:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
     746:	0f 90       	pop	r0
     748:	0f 90       	pop	r0
     74a:	0f 90       	pop	r0
     74c:	0f 90       	pop	r0
     74e:	df 91       	pop	r29
     750:	cf 91       	pop	r28
     752:	08 95       	ret

00000754 <dispatch>:
     754:	cf 93       	push	r28
     756:	df 93       	push	r29
     758:	00 d0       	rcall	.+0      	; 0x75a <dispatch+0x6>
     75a:	cd b7       	in	r28, 0x3d	; 61
     75c:	de b7       	in	r29, 0x3e	; 62
     75e:	9a 83       	std	Y+2, r25	; 0x02
     760:	89 83       	std	Y+1, r24	; 0x01
     762:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <current>
     766:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <current+0x1>
     76a:	06 96       	adiw	r24, 0x06	; 6
     76c:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <setjmp>
     770:	89 2b       	or	r24, r25
     772:	59 f4       	brne	.+22     	; 0x78a <dispatch+0x36>
     774:	89 81       	ldd	r24, Y+1	; 0x01
     776:	9a 81       	ldd	r25, Y+2	; 0x02
     778:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <current+0x1>
     77c:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <current>
     780:	61 e0       	ldi	r22, 0x01	; 1
     782:	70 e0       	ldi	r23, 0x00	; 0
     784:	06 96       	adiw	r24, 0x06	; 6
     786:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <longjmp>
     78a:	0f 90       	pop	r0
     78c:	0f 90       	pop	r0
     78e:	df 91       	pop	r29
     790:	cf 91       	pop	r28
     792:	08 95       	ret

00000794 <schedule>:
     794:	0f 93       	push	r16
     796:	1f 93       	push	r17
     798:	cf 93       	push	r28
     79a:	df 93       	push	r29
     79c:	e0 91 94 01 	lds	r30, 0x0194	; 0x800194 <msgQ>
     7a0:	f0 91 95 01 	lds	r31, 0x0195	; 0x800195 <msgQ+0x1>
     7a4:	30 97       	sbiw	r30, 0x00	; 0
     7a6:	61 f1       	breq	.+88     	; 0x800 <schedule+0x6c>
     7a8:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <threadPool>
     7ac:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <threadPool+0x1>
     7b0:	00 97       	sbiw	r24, 0x00	; 0
     7b2:	31 f1       	breq	.+76     	; 0x800 <schedule+0x6c>
     7b4:	c0 91 7e 01 	lds	r28, 0x017E	; 0x80017e <activeStack>
     7b8:	d0 91 7f 01 	lds	r29, 0x017F	; 0x80017f <activeStack+0x1>
     7bc:	aa 81       	ldd	r26, Y+2	; 0x02
     7be:	bb 81       	ldd	r27, Y+3	; 0x03
     7c0:	10 97       	sbiw	r26, 0x00	; 0
     7c2:	79 f0       	breq	.+30     	; 0x7e2 <schedule+0x4e>
     7c4:	46 81       	ldd	r20, Z+6	; 0x06
     7c6:	57 81       	ldd	r21, Z+7	; 0x07
     7c8:	60 85       	ldd	r22, Z+8	; 0x08
     7ca:	71 85       	ldd	r23, Z+9	; 0x09
     7cc:	16 96       	adiw	r26, 0x06	; 6
     7ce:	0d 91       	ld	r16, X+
     7d0:	1d 91       	ld	r17, X+
     7d2:	2d 91       	ld	r18, X+
     7d4:	3c 91       	ld	r19, X
     7d6:	19 97       	sbiw	r26, 0x09	; 9
     7d8:	40 1b       	sub	r20, r16
     7da:	51 0b       	sbc	r21, r17
     7dc:	62 0b       	sbc	r22, r18
     7de:	73 0b       	sbc	r23, r19
     7e0:	7a f4       	brpl	.+30     	; 0x800 <schedule+0x6c>
     7e2:	fc 01       	movw	r30, r24
     7e4:	20 81       	ld	r18, Z
     7e6:	31 81       	ldd	r19, Z+1	; 0x01
     7e8:	30 93 81 01 	sts	0x0181, r19	; 0x800181 <threadPool+0x1>
     7ec:	20 93 80 01 	sts	0x0180, r18	; 0x800180 <threadPool>
     7f0:	d1 83       	std	Z+1, r29	; 0x01
     7f2:	c0 83       	st	Z, r28
     7f4:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <activeStack+0x1>
     7f8:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <activeStack>
     7fc:	0e 94 aa 03 	call	0x754	; 0x754 <dispatch>
     800:	df 91       	pop	r29
     802:	cf 91       	pop	r28
     804:	1f 91       	pop	r17
     806:	0f 91       	pop	r16
     808:	08 95       	ret

0000080a <__vector_1>:
     80a:	1f 92       	push	r1
     80c:	0f 92       	push	r0
     80e:	0f b6       	in	r0, 0x3f	; 63
     810:	0f 92       	push	r0
     812:	11 24       	eor	r1, r1
     814:	2f 93       	push	r18
     816:	3f 93       	push	r19
     818:	4f 93       	push	r20
     81a:	5f 93       	push	r21
     81c:	6f 93       	push	r22
     81e:	7f 93       	push	r23
     820:	8f 93       	push	r24
     822:	9f 93       	push	r25
     824:	af 93       	push	r26
     826:	bf 93       	push	r27
     828:	ef 93       	push	r30
     82a:	ff 93       	push	r31
     82c:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     830:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     834:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     838:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     83c:	c9 01       	movw	r24, r18
     83e:	03 2e       	mov	r0, r19
     840:	00 0c       	add	r0, r0
     842:	aa 0b       	sbc	r26, r26
     844:	bb 0b       	sbc	r27, r27
     846:	dc 01       	movw	r26, r24
     848:	99 27       	eor	r25, r25
     84a:	88 27       	eor	r24, r24
     84c:	60 e0       	ldi	r22, 0x00	; 0
     84e:	70 e0       	ldi	r23, 0x00	; 0
     850:	84 2b       	or	r24, r20
     852:	95 2b       	or	r25, r21
     854:	a6 2b       	or	r26, r22
     856:	b7 2b       	or	r27, r23
     858:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     85c:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     860:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     864:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     868:	b0 9b       	sbis	0x16, 0	; 22
     86a:	1b c0       	rjmp	.+54     	; 0x8a2 <__vector_1+0x98>
     86c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     870:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     874:	c9 01       	movw	r24, r18
     876:	01 96       	adiw	r24, 0x01	; 1
     878:	09 2e       	mov	r0, r25
     87a:	00 0c       	add	r0, r0
     87c:	aa 0b       	sbc	r26, r26
     87e:	bb 0b       	sbc	r27, r27
     880:	dc 01       	movw	r26, r24
     882:	99 27       	eor	r25, r25
     884:	88 27       	eor	r24, r24
     886:	60 e0       	ldi	r22, 0x00	; 0
     888:	70 e0       	ldi	r23, 0x00	; 0
     88a:	84 2b       	or	r24, r20
     88c:	95 2b       	or	r25, r21
     88e:	a6 2b       	or	r26, r22
     890:	b7 2b       	or	r27, r23
     892:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     896:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     89a:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     89e:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     8a2:	e0 91 2e 02 	lds	r30, 0x022E	; 0x80022e <mtable>
     8a6:	f0 91 2f 02 	lds	r31, 0x022F	; 0x80022f <mtable+0x1>
     8aa:	30 97       	sbiw	r30, 0x00	; 0
     8ac:	39 f0       	breq	.+14     	; 0x8bc <__vector_1+0xb2>
     8ae:	60 e0       	ldi	r22, 0x00	; 0
     8b0:	70 e0       	ldi	r23, 0x00	; 0
     8b2:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <otable>
     8b6:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <otable+0x1>
     8ba:	09 95       	icall
     8bc:	0e 94 ca 03 	call	0x794	; 0x794 <schedule>
     8c0:	ff 91       	pop	r31
     8c2:	ef 91       	pop	r30
     8c4:	bf 91       	pop	r27
     8c6:	af 91       	pop	r26
     8c8:	9f 91       	pop	r25
     8ca:	8f 91       	pop	r24
     8cc:	7f 91       	pop	r23
     8ce:	6f 91       	pop	r22
     8d0:	5f 91       	pop	r21
     8d2:	4f 91       	pop	r20
     8d4:	3f 91       	pop	r19
     8d6:	2f 91       	pop	r18
     8d8:	0f 90       	pop	r0
     8da:	0f be       	out	0x3f, r0	; 63
     8dc:	0f 90       	pop	r0
     8de:	1f 90       	pop	r1
     8e0:	18 95       	reti

000008e2 <__vector_2>:
     8e2:	1f 92       	push	r1
     8e4:	0f 92       	push	r0
     8e6:	0f b6       	in	r0, 0x3f	; 63
     8e8:	0f 92       	push	r0
     8ea:	11 24       	eor	r1, r1
     8ec:	2f 93       	push	r18
     8ee:	3f 93       	push	r19
     8f0:	4f 93       	push	r20
     8f2:	5f 93       	push	r21
     8f4:	6f 93       	push	r22
     8f6:	7f 93       	push	r23
     8f8:	8f 93       	push	r24
     8fa:	9f 93       	push	r25
     8fc:	af 93       	push	r26
     8fe:	bf 93       	push	r27
     900:	ef 93       	push	r30
     902:	ff 93       	push	r31
     904:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     908:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     90c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     910:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     914:	c9 01       	movw	r24, r18
     916:	03 2e       	mov	r0, r19
     918:	00 0c       	add	r0, r0
     91a:	aa 0b       	sbc	r26, r26
     91c:	bb 0b       	sbc	r27, r27
     91e:	dc 01       	movw	r26, r24
     920:	99 27       	eor	r25, r25
     922:	88 27       	eor	r24, r24
     924:	60 e0       	ldi	r22, 0x00	; 0
     926:	70 e0       	ldi	r23, 0x00	; 0
     928:	84 2b       	or	r24, r20
     92a:	95 2b       	or	r25, r21
     92c:	a6 2b       	or	r26, r22
     92e:	b7 2b       	or	r27, r23
     930:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     934:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     938:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     93c:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     940:	b0 9b       	sbis	0x16, 0	; 22
     942:	1b c0       	rjmp	.+54     	; 0x97a <__vector_2+0x98>
     944:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     948:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     94c:	c9 01       	movw	r24, r18
     94e:	01 96       	adiw	r24, 0x01	; 1
     950:	09 2e       	mov	r0, r25
     952:	00 0c       	add	r0, r0
     954:	aa 0b       	sbc	r26, r26
     956:	bb 0b       	sbc	r27, r27
     958:	dc 01       	movw	r26, r24
     95a:	99 27       	eor	r25, r25
     95c:	88 27       	eor	r24, r24
     95e:	60 e0       	ldi	r22, 0x00	; 0
     960:	70 e0       	ldi	r23, 0x00	; 0
     962:	84 2b       	or	r24, r20
     964:	95 2b       	or	r25, r21
     966:	a6 2b       	or	r26, r22
     968:	b7 2b       	or	r27, r23
     96a:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     96e:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     972:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     976:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     97a:	e0 91 30 02 	lds	r30, 0x0230	; 0x800230 <mtable+0x2>
     97e:	f0 91 31 02 	lds	r31, 0x0231	; 0x800231 <mtable+0x3>
     982:	30 97       	sbiw	r30, 0x00	; 0
     984:	39 f0       	breq	.+14     	; 0x994 <__vector_2+0xb2>
     986:	61 e0       	ldi	r22, 0x01	; 1
     988:	70 e0       	ldi	r23, 0x00	; 0
     98a:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <otable+0x2>
     98e:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <otable+0x3>
     992:	09 95       	icall
     994:	0e 94 ca 03 	call	0x794	; 0x794 <schedule>
     998:	ff 91       	pop	r31
     99a:	ef 91       	pop	r30
     99c:	bf 91       	pop	r27
     99e:	af 91       	pop	r26
     9a0:	9f 91       	pop	r25
     9a2:	8f 91       	pop	r24
     9a4:	7f 91       	pop	r23
     9a6:	6f 91       	pop	r22
     9a8:	5f 91       	pop	r21
     9aa:	4f 91       	pop	r20
     9ac:	3f 91       	pop	r19
     9ae:	2f 91       	pop	r18
     9b0:	0f 90       	pop	r0
     9b2:	0f be       	out	0x3f, r0	; 63
     9b4:	0f 90       	pop	r0
     9b6:	1f 90       	pop	r1
     9b8:	18 95       	reti

000009ba <__vector_3>:
     9ba:	1f 92       	push	r1
     9bc:	0f 92       	push	r0
     9be:	0f b6       	in	r0, 0x3f	; 63
     9c0:	0f 92       	push	r0
     9c2:	11 24       	eor	r1, r1
     9c4:	2f 93       	push	r18
     9c6:	3f 93       	push	r19
     9c8:	4f 93       	push	r20
     9ca:	5f 93       	push	r21
     9cc:	6f 93       	push	r22
     9ce:	7f 93       	push	r23
     9d0:	8f 93       	push	r24
     9d2:	9f 93       	push	r25
     9d4:	af 93       	push	r26
     9d6:	bf 93       	push	r27
     9d8:	ef 93       	push	r30
     9da:	ff 93       	push	r31
     9dc:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     9e0:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     9e4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     9e8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     9ec:	c9 01       	movw	r24, r18
     9ee:	03 2e       	mov	r0, r19
     9f0:	00 0c       	add	r0, r0
     9f2:	aa 0b       	sbc	r26, r26
     9f4:	bb 0b       	sbc	r27, r27
     9f6:	dc 01       	movw	r26, r24
     9f8:	99 27       	eor	r25, r25
     9fa:	88 27       	eor	r24, r24
     9fc:	60 e0       	ldi	r22, 0x00	; 0
     9fe:	70 e0       	ldi	r23, 0x00	; 0
     a00:	84 2b       	or	r24, r20
     a02:	95 2b       	or	r25, r21
     a04:	a6 2b       	or	r26, r22
     a06:	b7 2b       	or	r27, r23
     a08:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     a0c:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     a10:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     a14:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     a18:	b0 9b       	sbis	0x16, 0	; 22
     a1a:	1b c0       	rjmp	.+54     	; 0xa52 <__vector_3+0x98>
     a1c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     a20:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     a24:	c9 01       	movw	r24, r18
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	09 2e       	mov	r0, r25
     a2a:	00 0c       	add	r0, r0
     a2c:	aa 0b       	sbc	r26, r26
     a2e:	bb 0b       	sbc	r27, r27
     a30:	dc 01       	movw	r26, r24
     a32:	99 27       	eor	r25, r25
     a34:	88 27       	eor	r24, r24
     a36:	60 e0       	ldi	r22, 0x00	; 0
     a38:	70 e0       	ldi	r23, 0x00	; 0
     a3a:	84 2b       	or	r24, r20
     a3c:	95 2b       	or	r25, r21
     a3e:	a6 2b       	or	r26, r22
     a40:	b7 2b       	or	r27, r23
     a42:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     a46:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     a4a:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     a4e:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     a52:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <mtable+0x4>
     a56:	f0 91 33 02 	lds	r31, 0x0233	; 0x800233 <mtable+0x5>
     a5a:	30 97       	sbiw	r30, 0x00	; 0
     a5c:	39 f0       	breq	.+14     	; 0xa6c <__vector_3+0xb2>
     a5e:	62 e0       	ldi	r22, 0x02	; 2
     a60:	70 e0       	ldi	r23, 0x00	; 0
     a62:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <otable+0x4>
     a66:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <otable+0x5>
     a6a:	09 95       	icall
     a6c:	0e 94 ca 03 	call	0x794	; 0x794 <schedule>
     a70:	ff 91       	pop	r31
     a72:	ef 91       	pop	r30
     a74:	bf 91       	pop	r27
     a76:	af 91       	pop	r26
     a78:	9f 91       	pop	r25
     a7a:	8f 91       	pop	r24
     a7c:	7f 91       	pop	r23
     a7e:	6f 91       	pop	r22
     a80:	5f 91       	pop	r21
     a82:	4f 91       	pop	r20
     a84:	3f 91       	pop	r19
     a86:	2f 91       	pop	r18
     a88:	0f 90       	pop	r0
     a8a:	0f be       	out	0x3f, r0	; 63
     a8c:	0f 90       	pop	r0
     a8e:	1f 90       	pop	r1
     a90:	18 95       	reti

00000a92 <__vector_4>:
     a92:	1f 92       	push	r1
     a94:	0f 92       	push	r0
     a96:	0f b6       	in	r0, 0x3f	; 63
     a98:	0f 92       	push	r0
     a9a:	11 24       	eor	r1, r1
     a9c:	2f 93       	push	r18
     a9e:	3f 93       	push	r19
     aa0:	4f 93       	push	r20
     aa2:	5f 93       	push	r21
     aa4:	6f 93       	push	r22
     aa6:	7f 93       	push	r23
     aa8:	8f 93       	push	r24
     aaa:	9f 93       	push	r25
     aac:	af 93       	push	r26
     aae:	bf 93       	push	r27
     ab0:	ef 93       	push	r30
     ab2:	ff 93       	push	r31
     ab4:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     ab8:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     abc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     ac0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     ac4:	c9 01       	movw	r24, r18
     ac6:	03 2e       	mov	r0, r19
     ac8:	00 0c       	add	r0, r0
     aca:	aa 0b       	sbc	r26, r26
     acc:	bb 0b       	sbc	r27, r27
     ace:	dc 01       	movw	r26, r24
     ad0:	99 27       	eor	r25, r25
     ad2:	88 27       	eor	r24, r24
     ad4:	60 e0       	ldi	r22, 0x00	; 0
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	84 2b       	or	r24, r20
     ada:	95 2b       	or	r25, r21
     adc:	a6 2b       	or	r26, r22
     ade:	b7 2b       	or	r27, r23
     ae0:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     ae4:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     ae8:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     aec:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     af0:	b0 9b       	sbis	0x16, 0	; 22
     af2:	1b c0       	rjmp	.+54     	; 0xb2a <__vector_4+0x98>
     af4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     af8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     afc:	c9 01       	movw	r24, r18
     afe:	01 96       	adiw	r24, 0x01	; 1
     b00:	09 2e       	mov	r0, r25
     b02:	00 0c       	add	r0, r0
     b04:	aa 0b       	sbc	r26, r26
     b06:	bb 0b       	sbc	r27, r27
     b08:	dc 01       	movw	r26, r24
     b0a:	99 27       	eor	r25, r25
     b0c:	88 27       	eor	r24, r24
     b0e:	60 e0       	ldi	r22, 0x00	; 0
     b10:	70 e0       	ldi	r23, 0x00	; 0
     b12:	84 2b       	or	r24, r20
     b14:	95 2b       	or	r25, r21
     b16:	a6 2b       	or	r26, r22
     b18:	b7 2b       	or	r27, r23
     b1a:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     b1e:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     b22:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     b26:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     b2a:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <mtable+0x6>
     b2e:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <mtable+0x7>
     b32:	30 97       	sbiw	r30, 0x00	; 0
     b34:	39 f0       	breq	.+14     	; 0xb44 <__vector_4+0xb2>
     b36:	63 e0       	ldi	r22, 0x03	; 3
     b38:	70 e0       	ldi	r23, 0x00	; 0
     b3a:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <otable+0x6>
     b3e:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <otable+0x7>
     b42:	09 95       	icall
     b44:	0e 94 ca 03 	call	0x794	; 0x794 <schedule>
     b48:	ff 91       	pop	r31
     b4a:	ef 91       	pop	r30
     b4c:	bf 91       	pop	r27
     b4e:	af 91       	pop	r26
     b50:	9f 91       	pop	r25
     b52:	8f 91       	pop	r24
     b54:	7f 91       	pop	r23
     b56:	6f 91       	pop	r22
     b58:	5f 91       	pop	r21
     b5a:	4f 91       	pop	r20
     b5c:	3f 91       	pop	r19
     b5e:	2f 91       	pop	r18
     b60:	0f 90       	pop	r0
     b62:	0f be       	out	0x3f, r0	; 63
     b64:	0f 90       	pop	r0
     b66:	1f 90       	pop	r1
     b68:	18 95       	reti

00000b6a <__vector_5>:
     b6a:	1f 92       	push	r1
     b6c:	0f 92       	push	r0
     b6e:	0f b6       	in	r0, 0x3f	; 63
     b70:	0f 92       	push	r0
     b72:	11 24       	eor	r1, r1
     b74:	2f 93       	push	r18
     b76:	3f 93       	push	r19
     b78:	4f 93       	push	r20
     b7a:	5f 93       	push	r21
     b7c:	6f 93       	push	r22
     b7e:	7f 93       	push	r23
     b80:	8f 93       	push	r24
     b82:	9f 93       	push	r25
     b84:	af 93       	push	r26
     b86:	bf 93       	push	r27
     b88:	ef 93       	push	r30
     b8a:	ff 93       	push	r31
     b8c:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     b90:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     b94:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     b98:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     b9c:	c9 01       	movw	r24, r18
     b9e:	03 2e       	mov	r0, r19
     ba0:	00 0c       	add	r0, r0
     ba2:	aa 0b       	sbc	r26, r26
     ba4:	bb 0b       	sbc	r27, r27
     ba6:	dc 01       	movw	r26, r24
     ba8:	99 27       	eor	r25, r25
     baa:	88 27       	eor	r24, r24
     bac:	60 e0       	ldi	r22, 0x00	; 0
     bae:	70 e0       	ldi	r23, 0x00	; 0
     bb0:	84 2b       	or	r24, r20
     bb2:	95 2b       	or	r25, r21
     bb4:	a6 2b       	or	r26, r22
     bb6:	b7 2b       	or	r27, r23
     bb8:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     bbc:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     bc0:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     bc4:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     bc8:	b0 9b       	sbis	0x16, 0	; 22
     bca:	1b c0       	rjmp	.+54     	; 0xc02 <__vector_5+0x98>
     bcc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     bd0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     bd4:	c9 01       	movw	r24, r18
     bd6:	01 96       	adiw	r24, 0x01	; 1
     bd8:	09 2e       	mov	r0, r25
     bda:	00 0c       	add	r0, r0
     bdc:	aa 0b       	sbc	r26, r26
     bde:	bb 0b       	sbc	r27, r27
     be0:	dc 01       	movw	r26, r24
     be2:	99 27       	eor	r25, r25
     be4:	88 27       	eor	r24, r24
     be6:	60 e0       	ldi	r22, 0x00	; 0
     be8:	70 e0       	ldi	r23, 0x00	; 0
     bea:	84 2b       	or	r24, r20
     bec:	95 2b       	or	r25, r21
     bee:	a6 2b       	or	r26, r22
     bf0:	b7 2b       	or	r27, r23
     bf2:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     bf6:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     bfa:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     bfe:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     c02:	e0 91 36 02 	lds	r30, 0x0236	; 0x800236 <mtable+0x8>
     c06:	f0 91 37 02 	lds	r31, 0x0237	; 0x800237 <mtable+0x9>
     c0a:	30 97       	sbiw	r30, 0x00	; 0
     c0c:	39 f0       	breq	.+14     	; 0xc1c <__vector_5+0xb2>
     c0e:	64 e0       	ldi	r22, 0x04	; 4
     c10:	70 e0       	ldi	r23, 0x00	; 0
     c12:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <otable+0x8>
     c16:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <otable+0x9>
     c1a:	09 95       	icall
     c1c:	0e 94 ca 03 	call	0x794	; 0x794 <schedule>
     c20:	ff 91       	pop	r31
     c22:	ef 91       	pop	r30
     c24:	bf 91       	pop	r27
     c26:	af 91       	pop	r26
     c28:	9f 91       	pop	r25
     c2a:	8f 91       	pop	r24
     c2c:	7f 91       	pop	r23
     c2e:	6f 91       	pop	r22
     c30:	5f 91       	pop	r21
     c32:	4f 91       	pop	r20
     c34:	3f 91       	pop	r19
     c36:	2f 91       	pop	r18
     c38:	0f 90       	pop	r0
     c3a:	0f be       	out	0x3f, r0	; 63
     c3c:	0f 90       	pop	r0
     c3e:	1f 90       	pop	r1
     c40:	18 95       	reti

00000c42 <__vector_10>:
     c42:	1f 92       	push	r1
     c44:	0f 92       	push	r0
     c46:	0f b6       	in	r0, 0x3f	; 63
     c48:	0f 92       	push	r0
     c4a:	11 24       	eor	r1, r1
     c4c:	2f 93       	push	r18
     c4e:	3f 93       	push	r19
     c50:	4f 93       	push	r20
     c52:	5f 93       	push	r21
     c54:	6f 93       	push	r22
     c56:	7f 93       	push	r23
     c58:	8f 93       	push	r24
     c5a:	9f 93       	push	r25
     c5c:	af 93       	push	r26
     c5e:	bf 93       	push	r27
     c60:	ef 93       	push	r30
     c62:	ff 93       	push	r31
     c64:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     c68:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     c6c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     c70:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     c74:	c9 01       	movw	r24, r18
     c76:	03 2e       	mov	r0, r19
     c78:	00 0c       	add	r0, r0
     c7a:	aa 0b       	sbc	r26, r26
     c7c:	bb 0b       	sbc	r27, r27
     c7e:	dc 01       	movw	r26, r24
     c80:	99 27       	eor	r25, r25
     c82:	88 27       	eor	r24, r24
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	84 2b       	or	r24, r20
     c8a:	95 2b       	or	r25, r21
     c8c:	a6 2b       	or	r26, r22
     c8e:	b7 2b       	or	r27, r23
     c90:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     c94:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     c98:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     c9c:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     ca0:	b0 9b       	sbis	0x16, 0	; 22
     ca2:	1b c0       	rjmp	.+54     	; 0xcda <__vector_10+0x98>
     ca4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     ca8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     cac:	c9 01       	movw	r24, r18
     cae:	01 96       	adiw	r24, 0x01	; 1
     cb0:	09 2e       	mov	r0, r25
     cb2:	00 0c       	add	r0, r0
     cb4:	aa 0b       	sbc	r26, r26
     cb6:	bb 0b       	sbc	r27, r27
     cb8:	dc 01       	movw	r26, r24
     cba:	99 27       	eor	r25, r25
     cbc:	88 27       	eor	r24, r24
     cbe:	60 e0       	ldi	r22, 0x00	; 0
     cc0:	70 e0       	ldi	r23, 0x00	; 0
     cc2:	84 2b       	or	r24, r20
     cc4:	95 2b       	or	r25, r21
     cc6:	a6 2b       	or	r26, r22
     cc8:	b7 2b       	or	r27, r23
     cca:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     cce:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     cd2:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     cd6:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     cda:	e0 91 38 02 	lds	r30, 0x0238	; 0x800238 <mtable+0xa>
     cde:	f0 91 39 02 	lds	r31, 0x0239	; 0x800239 <mtable+0xb>
     ce2:	30 97       	sbiw	r30, 0x00	; 0
     ce4:	39 f0       	breq	.+14     	; 0xcf4 <__vector_10+0xb2>
     ce6:	65 e0       	ldi	r22, 0x05	; 5
     ce8:	70 e0       	ldi	r23, 0x00	; 0
     cea:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <otable+0xa>
     cee:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <otable+0xb>
     cf2:	09 95       	icall
     cf4:	0e 94 ca 03 	call	0x794	; 0x794 <schedule>
     cf8:	ff 91       	pop	r31
     cfa:	ef 91       	pop	r30
     cfc:	bf 91       	pop	r27
     cfe:	af 91       	pop	r26
     d00:	9f 91       	pop	r25
     d02:	8f 91       	pop	r24
     d04:	7f 91       	pop	r23
     d06:	6f 91       	pop	r22
     d08:	5f 91       	pop	r21
     d0a:	4f 91       	pop	r20
     d0c:	3f 91       	pop	r19
     d0e:	2f 91       	pop	r18
     d10:	0f 90       	pop	r0
     d12:	0f be       	out	0x3f, r0	; 63
     d14:	0f 90       	pop	r0
     d16:	1f 90       	pop	r1
     d18:	18 95       	reti

00000d1a <__vector_11>:
     d1a:	1f 92       	push	r1
     d1c:	0f 92       	push	r0
     d1e:	0f b6       	in	r0, 0x3f	; 63
     d20:	0f 92       	push	r0
     d22:	11 24       	eor	r1, r1
     d24:	2f 93       	push	r18
     d26:	3f 93       	push	r19
     d28:	4f 93       	push	r20
     d2a:	5f 93       	push	r21
     d2c:	6f 93       	push	r22
     d2e:	7f 93       	push	r23
     d30:	8f 93       	push	r24
     d32:	9f 93       	push	r25
     d34:	af 93       	push	r26
     d36:	bf 93       	push	r27
     d38:	ef 93       	push	r30
     d3a:	ff 93       	push	r31
     d3c:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     d40:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     d44:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     d48:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     d4c:	c9 01       	movw	r24, r18
     d4e:	03 2e       	mov	r0, r19
     d50:	00 0c       	add	r0, r0
     d52:	aa 0b       	sbc	r26, r26
     d54:	bb 0b       	sbc	r27, r27
     d56:	dc 01       	movw	r26, r24
     d58:	99 27       	eor	r25, r25
     d5a:	88 27       	eor	r24, r24
     d5c:	60 e0       	ldi	r22, 0x00	; 0
     d5e:	70 e0       	ldi	r23, 0x00	; 0
     d60:	84 2b       	or	r24, r20
     d62:	95 2b       	or	r25, r21
     d64:	a6 2b       	or	r26, r22
     d66:	b7 2b       	or	r27, r23
     d68:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     d6c:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     d70:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     d74:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     d78:	b0 9b       	sbis	0x16, 0	; 22
     d7a:	1b c0       	rjmp	.+54     	; 0xdb2 <__vector_11+0x98>
     d7c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     d80:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     d84:	c9 01       	movw	r24, r18
     d86:	01 96       	adiw	r24, 0x01	; 1
     d88:	09 2e       	mov	r0, r25
     d8a:	00 0c       	add	r0, r0
     d8c:	aa 0b       	sbc	r26, r26
     d8e:	bb 0b       	sbc	r27, r27
     d90:	dc 01       	movw	r26, r24
     d92:	99 27       	eor	r25, r25
     d94:	88 27       	eor	r24, r24
     d96:	60 e0       	ldi	r22, 0x00	; 0
     d98:	70 e0       	ldi	r23, 0x00	; 0
     d9a:	84 2b       	or	r24, r20
     d9c:	95 2b       	or	r25, r21
     d9e:	a6 2b       	or	r26, r22
     da0:	b7 2b       	or	r27, r23
     da2:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     da6:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     daa:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     dae:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     db2:	e0 91 3a 02 	lds	r30, 0x023A	; 0x80023a <mtable+0xc>
     db6:	f0 91 3b 02 	lds	r31, 0x023B	; 0x80023b <mtable+0xd>
     dba:	30 97       	sbiw	r30, 0x00	; 0
     dbc:	39 f0       	breq	.+14     	; 0xdcc <__vector_11+0xb2>
     dbe:	66 e0       	ldi	r22, 0x06	; 6
     dc0:	70 e0       	ldi	r23, 0x00	; 0
     dc2:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <otable+0xc>
     dc6:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <otable+0xd>
     dca:	09 95       	icall
     dcc:	0e 94 ca 03 	call	0x794	; 0x794 <schedule>
     dd0:	ff 91       	pop	r31
     dd2:	ef 91       	pop	r30
     dd4:	bf 91       	pop	r27
     dd6:	af 91       	pop	r26
     dd8:	9f 91       	pop	r25
     dda:	8f 91       	pop	r24
     ddc:	7f 91       	pop	r23
     dde:	6f 91       	pop	r22
     de0:	5f 91       	pop	r21
     de2:	4f 91       	pop	r20
     de4:	3f 91       	pop	r19
     de6:	2f 91       	pop	r18
     de8:	0f 90       	pop	r0
     dea:	0f be       	out	0x3f, r0	; 63
     dec:	0f 90       	pop	r0
     dee:	1f 90       	pop	r1
     df0:	18 95       	reti

00000df2 <__vector_12>:
     df2:	1f 92       	push	r1
     df4:	0f 92       	push	r0
     df6:	0f b6       	in	r0, 0x3f	; 63
     df8:	0f 92       	push	r0
     dfa:	11 24       	eor	r1, r1
     dfc:	2f 93       	push	r18
     dfe:	3f 93       	push	r19
     e00:	4f 93       	push	r20
     e02:	5f 93       	push	r21
     e04:	6f 93       	push	r22
     e06:	7f 93       	push	r23
     e08:	8f 93       	push	r24
     e0a:	9f 93       	push	r25
     e0c:	af 93       	push	r26
     e0e:	bf 93       	push	r27
     e10:	ef 93       	push	r30
     e12:	ff 93       	push	r31
     e14:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     e18:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     e1c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     e20:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     e24:	c9 01       	movw	r24, r18
     e26:	03 2e       	mov	r0, r19
     e28:	00 0c       	add	r0, r0
     e2a:	aa 0b       	sbc	r26, r26
     e2c:	bb 0b       	sbc	r27, r27
     e2e:	dc 01       	movw	r26, r24
     e30:	99 27       	eor	r25, r25
     e32:	88 27       	eor	r24, r24
     e34:	60 e0       	ldi	r22, 0x00	; 0
     e36:	70 e0       	ldi	r23, 0x00	; 0
     e38:	84 2b       	or	r24, r20
     e3a:	95 2b       	or	r25, r21
     e3c:	a6 2b       	or	r26, r22
     e3e:	b7 2b       	or	r27, r23
     e40:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     e44:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     e48:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     e4c:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     e50:	b0 9b       	sbis	0x16, 0	; 22
     e52:	1b c0       	rjmp	.+54     	; 0xe8a <__vector_12+0x98>
     e54:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     e58:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     e5c:	c9 01       	movw	r24, r18
     e5e:	01 96       	adiw	r24, 0x01	; 1
     e60:	09 2e       	mov	r0, r25
     e62:	00 0c       	add	r0, r0
     e64:	aa 0b       	sbc	r26, r26
     e66:	bb 0b       	sbc	r27, r27
     e68:	dc 01       	movw	r26, r24
     e6a:	99 27       	eor	r25, r25
     e6c:	88 27       	eor	r24, r24
     e6e:	60 e0       	ldi	r22, 0x00	; 0
     e70:	70 e0       	ldi	r23, 0x00	; 0
     e72:	84 2b       	or	r24, r20
     e74:	95 2b       	or	r25, r21
     e76:	a6 2b       	or	r26, r22
     e78:	b7 2b       	or	r27, r23
     e7a:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     e7e:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     e82:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     e86:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     e8a:	e0 91 3c 02 	lds	r30, 0x023C	; 0x80023c <mtable+0xe>
     e8e:	f0 91 3d 02 	lds	r31, 0x023D	; 0x80023d <mtable+0xf>
     e92:	30 97       	sbiw	r30, 0x00	; 0
     e94:	39 f0       	breq	.+14     	; 0xea4 <__vector_12+0xb2>
     e96:	67 e0       	ldi	r22, 0x07	; 7
     e98:	70 e0       	ldi	r23, 0x00	; 0
     e9a:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <otable+0xe>
     e9e:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <otable+0xf>
     ea2:	09 95       	icall
     ea4:	0e 94 ca 03 	call	0x794	; 0x794 <schedule>
     ea8:	ff 91       	pop	r31
     eaa:	ef 91       	pop	r30
     eac:	bf 91       	pop	r27
     eae:	af 91       	pop	r26
     eb0:	9f 91       	pop	r25
     eb2:	8f 91       	pop	r24
     eb4:	7f 91       	pop	r23
     eb6:	6f 91       	pop	r22
     eb8:	5f 91       	pop	r21
     eba:	4f 91       	pop	r20
     ebc:	3f 91       	pop	r19
     ebe:	2f 91       	pop	r18
     ec0:	0f 90       	pop	r0
     ec2:	0f be       	out	0x3f, r0	; 63
     ec4:	0f 90       	pop	r0
     ec6:	1f 90       	pop	r1
     ec8:	18 95       	reti

00000eca <__vector_13>:
     eca:	1f 92       	push	r1
     ecc:	0f 92       	push	r0
     ece:	0f b6       	in	r0, 0x3f	; 63
     ed0:	0f 92       	push	r0
     ed2:	11 24       	eor	r1, r1
     ed4:	2f 93       	push	r18
     ed6:	3f 93       	push	r19
     ed8:	4f 93       	push	r20
     eda:	5f 93       	push	r21
     edc:	6f 93       	push	r22
     ede:	7f 93       	push	r23
     ee0:	8f 93       	push	r24
     ee2:	9f 93       	push	r25
     ee4:	af 93       	push	r26
     ee6:	bf 93       	push	r27
     ee8:	ef 93       	push	r30
     eea:	ff 93       	push	r31
     eec:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     ef0:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     ef4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     ef8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     efc:	c9 01       	movw	r24, r18
     efe:	03 2e       	mov	r0, r19
     f00:	00 0c       	add	r0, r0
     f02:	aa 0b       	sbc	r26, r26
     f04:	bb 0b       	sbc	r27, r27
     f06:	dc 01       	movw	r26, r24
     f08:	99 27       	eor	r25, r25
     f0a:	88 27       	eor	r24, r24
     f0c:	60 e0       	ldi	r22, 0x00	; 0
     f0e:	70 e0       	ldi	r23, 0x00	; 0
     f10:	84 2b       	or	r24, r20
     f12:	95 2b       	or	r25, r21
     f14:	a6 2b       	or	r26, r22
     f16:	b7 2b       	or	r27, r23
     f18:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     f1c:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     f20:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     f24:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     f28:	b0 9b       	sbis	0x16, 0	; 22
     f2a:	1b c0       	rjmp	.+54     	; 0xf62 <__vector_13+0x98>
     f2c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     f30:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     f34:	c9 01       	movw	r24, r18
     f36:	01 96       	adiw	r24, 0x01	; 1
     f38:	09 2e       	mov	r0, r25
     f3a:	00 0c       	add	r0, r0
     f3c:	aa 0b       	sbc	r26, r26
     f3e:	bb 0b       	sbc	r27, r27
     f40:	dc 01       	movw	r26, r24
     f42:	99 27       	eor	r25, r25
     f44:	88 27       	eor	r24, r24
     f46:	60 e0       	ldi	r22, 0x00	; 0
     f48:	70 e0       	ldi	r23, 0x00	; 0
     f4a:	84 2b       	or	r24, r20
     f4c:	95 2b       	or	r25, r21
     f4e:	a6 2b       	or	r26, r22
     f50:	b7 2b       	or	r27, r23
     f52:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     f56:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     f5a:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     f5e:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     f62:	e0 91 3e 02 	lds	r30, 0x023E	; 0x80023e <mtable+0x10>
     f66:	f0 91 3f 02 	lds	r31, 0x023F	; 0x80023f <mtable+0x11>
     f6a:	30 97       	sbiw	r30, 0x00	; 0
     f6c:	39 f0       	breq	.+14     	; 0xf7c <__vector_13+0xb2>
     f6e:	68 e0       	ldi	r22, 0x08	; 8
     f70:	70 e0       	ldi	r23, 0x00	; 0
     f72:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <otable+0x10>
     f76:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <otable+0x11>
     f7a:	09 95       	icall
     f7c:	0e 94 ca 03 	call	0x794	; 0x794 <schedule>
     f80:	ff 91       	pop	r31
     f82:	ef 91       	pop	r30
     f84:	bf 91       	pop	r27
     f86:	af 91       	pop	r26
     f88:	9f 91       	pop	r25
     f8a:	8f 91       	pop	r24
     f8c:	7f 91       	pop	r23
     f8e:	6f 91       	pop	r22
     f90:	5f 91       	pop	r21
     f92:	4f 91       	pop	r20
     f94:	3f 91       	pop	r19
     f96:	2f 91       	pop	r18
     f98:	0f 90       	pop	r0
     f9a:	0f be       	out	0x3f, r0	; 63
     f9c:	0f 90       	pop	r0
     f9e:	1f 90       	pop	r1
     fa0:	18 95       	reti

00000fa2 <__vector_14>:
     fa2:	1f 92       	push	r1
     fa4:	0f 92       	push	r0
     fa6:	0f b6       	in	r0, 0x3f	; 63
     fa8:	0f 92       	push	r0
     faa:	11 24       	eor	r1, r1
     fac:	2f 93       	push	r18
     fae:	3f 93       	push	r19
     fb0:	4f 93       	push	r20
     fb2:	5f 93       	push	r21
     fb4:	6f 93       	push	r22
     fb6:	7f 93       	push	r23
     fb8:	8f 93       	push	r24
     fba:	9f 93       	push	r25
     fbc:	af 93       	push	r26
     fbe:	bf 93       	push	r27
     fc0:	ef 93       	push	r30
     fc2:	ff 93       	push	r31
     fc4:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     fc8:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     fcc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     fd0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     fd4:	c9 01       	movw	r24, r18
     fd6:	03 2e       	mov	r0, r19
     fd8:	00 0c       	add	r0, r0
     fda:	aa 0b       	sbc	r26, r26
     fdc:	bb 0b       	sbc	r27, r27
     fde:	dc 01       	movw	r26, r24
     fe0:	99 27       	eor	r25, r25
     fe2:	88 27       	eor	r24, r24
     fe4:	60 e0       	ldi	r22, 0x00	; 0
     fe6:	70 e0       	ldi	r23, 0x00	; 0
     fe8:	84 2b       	or	r24, r20
     fea:	95 2b       	or	r25, r21
     fec:	a6 2b       	or	r26, r22
     fee:	b7 2b       	or	r27, r23
     ff0:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     ff4:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     ff8:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     ffc:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    1000:	b0 9b       	sbis	0x16, 0	; 22
    1002:	1b c0       	rjmp	.+54     	; 0x103a <__vector_14+0x98>
    1004:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1008:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    100c:	c9 01       	movw	r24, r18
    100e:	01 96       	adiw	r24, 0x01	; 1
    1010:	09 2e       	mov	r0, r25
    1012:	00 0c       	add	r0, r0
    1014:	aa 0b       	sbc	r26, r26
    1016:	bb 0b       	sbc	r27, r27
    1018:	dc 01       	movw	r26, r24
    101a:	99 27       	eor	r25, r25
    101c:	88 27       	eor	r24, r24
    101e:	60 e0       	ldi	r22, 0x00	; 0
    1020:	70 e0       	ldi	r23, 0x00	; 0
    1022:	84 2b       	or	r24, r20
    1024:	95 2b       	or	r25, r21
    1026:	a6 2b       	or	r26, r22
    1028:	b7 2b       	or	r27, r23
    102a:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    102e:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    1032:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    1036:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    103a:	e0 91 40 02 	lds	r30, 0x0240	; 0x800240 <mtable+0x12>
    103e:	f0 91 41 02 	lds	r31, 0x0241	; 0x800241 <mtable+0x13>
    1042:	30 97       	sbiw	r30, 0x00	; 0
    1044:	39 f0       	breq	.+14     	; 0x1054 <__vector_14+0xb2>
    1046:	69 e0       	ldi	r22, 0x09	; 9
    1048:	70 e0       	ldi	r23, 0x00	; 0
    104a:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <otable+0x12>
    104e:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <otable+0x13>
    1052:	09 95       	icall
    1054:	0e 94 ca 03 	call	0x794	; 0x794 <schedule>
    1058:	ff 91       	pop	r31
    105a:	ef 91       	pop	r30
    105c:	bf 91       	pop	r27
    105e:	af 91       	pop	r26
    1060:	9f 91       	pop	r25
    1062:	8f 91       	pop	r24
    1064:	7f 91       	pop	r23
    1066:	6f 91       	pop	r22
    1068:	5f 91       	pop	r21
    106a:	4f 91       	pop	r20
    106c:	3f 91       	pop	r19
    106e:	2f 91       	pop	r18
    1070:	0f 90       	pop	r0
    1072:	0f be       	out	0x3f, r0	; 63
    1074:	0f 90       	pop	r0
    1076:	1f 90       	pop	r1
    1078:	18 95       	reti

0000107a <__vector_15>:
    107a:	1f 92       	push	r1
    107c:	0f 92       	push	r0
    107e:	0f b6       	in	r0, 0x3f	; 63
    1080:	0f 92       	push	r0
    1082:	11 24       	eor	r1, r1
    1084:	2f 93       	push	r18
    1086:	3f 93       	push	r19
    1088:	4f 93       	push	r20
    108a:	5f 93       	push	r21
    108c:	6f 93       	push	r22
    108e:	7f 93       	push	r23
    1090:	8f 93       	push	r24
    1092:	9f 93       	push	r25
    1094:	af 93       	push	r26
    1096:	bf 93       	push	r27
    1098:	ef 93       	push	r30
    109a:	ff 93       	push	r31
    109c:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    10a0:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    10a4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    10a8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    10ac:	c9 01       	movw	r24, r18
    10ae:	03 2e       	mov	r0, r19
    10b0:	00 0c       	add	r0, r0
    10b2:	aa 0b       	sbc	r26, r26
    10b4:	bb 0b       	sbc	r27, r27
    10b6:	dc 01       	movw	r26, r24
    10b8:	99 27       	eor	r25, r25
    10ba:	88 27       	eor	r24, r24
    10bc:	60 e0       	ldi	r22, 0x00	; 0
    10be:	70 e0       	ldi	r23, 0x00	; 0
    10c0:	84 2b       	or	r24, r20
    10c2:	95 2b       	or	r25, r21
    10c4:	a6 2b       	or	r26, r22
    10c6:	b7 2b       	or	r27, r23
    10c8:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    10cc:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    10d0:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    10d4:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    10d8:	b0 9b       	sbis	0x16, 0	; 22
    10da:	1b c0       	rjmp	.+54     	; 0x1112 <__vector_15+0x98>
    10dc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    10e0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    10e4:	c9 01       	movw	r24, r18
    10e6:	01 96       	adiw	r24, 0x01	; 1
    10e8:	09 2e       	mov	r0, r25
    10ea:	00 0c       	add	r0, r0
    10ec:	aa 0b       	sbc	r26, r26
    10ee:	bb 0b       	sbc	r27, r27
    10f0:	dc 01       	movw	r26, r24
    10f2:	99 27       	eor	r25, r25
    10f4:	88 27       	eor	r24, r24
    10f6:	60 e0       	ldi	r22, 0x00	; 0
    10f8:	70 e0       	ldi	r23, 0x00	; 0
    10fa:	84 2b       	or	r24, r20
    10fc:	95 2b       	or	r25, r21
    10fe:	a6 2b       	or	r26, r22
    1100:	b7 2b       	or	r27, r23
    1102:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    1106:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    110a:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    110e:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    1112:	e0 91 42 02 	lds	r30, 0x0242	; 0x800242 <mtable+0x14>
    1116:	f0 91 43 02 	lds	r31, 0x0243	; 0x800243 <mtable+0x15>
    111a:	30 97       	sbiw	r30, 0x00	; 0
    111c:	39 f0       	breq	.+14     	; 0x112c <__vector_15+0xb2>
    111e:	6a e0       	ldi	r22, 0x0A	; 10
    1120:	70 e0       	ldi	r23, 0x00	; 0
    1122:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <otable+0x14>
    1126:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <otable+0x15>
    112a:	09 95       	icall
    112c:	0e 94 ca 03 	call	0x794	; 0x794 <schedule>
    1130:	ff 91       	pop	r31
    1132:	ef 91       	pop	r30
    1134:	bf 91       	pop	r27
    1136:	af 91       	pop	r26
    1138:	9f 91       	pop	r25
    113a:	8f 91       	pop	r24
    113c:	7f 91       	pop	r23
    113e:	6f 91       	pop	r22
    1140:	5f 91       	pop	r21
    1142:	4f 91       	pop	r20
    1144:	3f 91       	pop	r19
    1146:	2f 91       	pop	r18
    1148:	0f 90       	pop	r0
    114a:	0f be       	out	0x3f, r0	; 63
    114c:	0f 90       	pop	r0
    114e:	1f 90       	pop	r1
    1150:	18 95       	reti

00001152 <__vector_16>:
    1152:	1f 92       	push	r1
    1154:	0f 92       	push	r0
    1156:	0f b6       	in	r0, 0x3f	; 63
    1158:	0f 92       	push	r0
    115a:	11 24       	eor	r1, r1
    115c:	2f 93       	push	r18
    115e:	3f 93       	push	r19
    1160:	4f 93       	push	r20
    1162:	5f 93       	push	r21
    1164:	6f 93       	push	r22
    1166:	7f 93       	push	r23
    1168:	8f 93       	push	r24
    116a:	9f 93       	push	r25
    116c:	af 93       	push	r26
    116e:	bf 93       	push	r27
    1170:	ef 93       	push	r30
    1172:	ff 93       	push	r31
    1174:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    1178:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    117c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1180:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1184:	c9 01       	movw	r24, r18
    1186:	03 2e       	mov	r0, r19
    1188:	00 0c       	add	r0, r0
    118a:	aa 0b       	sbc	r26, r26
    118c:	bb 0b       	sbc	r27, r27
    118e:	dc 01       	movw	r26, r24
    1190:	99 27       	eor	r25, r25
    1192:	88 27       	eor	r24, r24
    1194:	60 e0       	ldi	r22, 0x00	; 0
    1196:	70 e0       	ldi	r23, 0x00	; 0
    1198:	84 2b       	or	r24, r20
    119a:	95 2b       	or	r25, r21
    119c:	a6 2b       	or	r26, r22
    119e:	b7 2b       	or	r27, r23
    11a0:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    11a4:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    11a8:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    11ac:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    11b0:	b0 9b       	sbis	0x16, 0	; 22
    11b2:	1b c0       	rjmp	.+54     	; 0x11ea <__vector_16+0x98>
    11b4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    11b8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    11bc:	c9 01       	movw	r24, r18
    11be:	01 96       	adiw	r24, 0x01	; 1
    11c0:	09 2e       	mov	r0, r25
    11c2:	00 0c       	add	r0, r0
    11c4:	aa 0b       	sbc	r26, r26
    11c6:	bb 0b       	sbc	r27, r27
    11c8:	dc 01       	movw	r26, r24
    11ca:	99 27       	eor	r25, r25
    11cc:	88 27       	eor	r24, r24
    11ce:	60 e0       	ldi	r22, 0x00	; 0
    11d0:	70 e0       	ldi	r23, 0x00	; 0
    11d2:	84 2b       	or	r24, r20
    11d4:	95 2b       	or	r25, r21
    11d6:	a6 2b       	or	r26, r22
    11d8:	b7 2b       	or	r27, r23
    11da:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    11de:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    11e2:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    11e6:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    11ea:	e0 91 44 02 	lds	r30, 0x0244	; 0x800244 <mtable+0x16>
    11ee:	f0 91 45 02 	lds	r31, 0x0245	; 0x800245 <mtable+0x17>
    11f2:	30 97       	sbiw	r30, 0x00	; 0
    11f4:	39 f0       	breq	.+14     	; 0x1204 <__vector_16+0xb2>
    11f6:	6b e0       	ldi	r22, 0x0B	; 11
    11f8:	70 e0       	ldi	r23, 0x00	; 0
    11fa:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <otable+0x16>
    11fe:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <otable+0x17>
    1202:	09 95       	icall
    1204:	0e 94 ca 03 	call	0x794	; 0x794 <schedule>
    1208:	ff 91       	pop	r31
    120a:	ef 91       	pop	r30
    120c:	bf 91       	pop	r27
    120e:	af 91       	pop	r26
    1210:	9f 91       	pop	r25
    1212:	8f 91       	pop	r24
    1214:	7f 91       	pop	r23
    1216:	6f 91       	pop	r22
    1218:	5f 91       	pop	r21
    121a:	4f 91       	pop	r20
    121c:	3f 91       	pop	r19
    121e:	2f 91       	pop	r18
    1220:	0f 90       	pop	r0
    1222:	0f be       	out	0x3f, r0	; 63
    1224:	0f 90       	pop	r0
    1226:	1f 90       	pop	r1
    1228:	18 95       	reti

0000122a <__vector_17>:
    122a:	1f 92       	push	r1
    122c:	0f 92       	push	r0
    122e:	0f b6       	in	r0, 0x3f	; 63
    1230:	0f 92       	push	r0
    1232:	11 24       	eor	r1, r1
    1234:	2f 93       	push	r18
    1236:	3f 93       	push	r19
    1238:	4f 93       	push	r20
    123a:	5f 93       	push	r21
    123c:	6f 93       	push	r22
    123e:	7f 93       	push	r23
    1240:	8f 93       	push	r24
    1242:	9f 93       	push	r25
    1244:	af 93       	push	r26
    1246:	bf 93       	push	r27
    1248:	ef 93       	push	r30
    124a:	ff 93       	push	r31
    124c:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    1250:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    1254:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1258:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    125c:	c9 01       	movw	r24, r18
    125e:	03 2e       	mov	r0, r19
    1260:	00 0c       	add	r0, r0
    1262:	aa 0b       	sbc	r26, r26
    1264:	bb 0b       	sbc	r27, r27
    1266:	dc 01       	movw	r26, r24
    1268:	99 27       	eor	r25, r25
    126a:	88 27       	eor	r24, r24
    126c:	60 e0       	ldi	r22, 0x00	; 0
    126e:	70 e0       	ldi	r23, 0x00	; 0
    1270:	84 2b       	or	r24, r20
    1272:	95 2b       	or	r25, r21
    1274:	a6 2b       	or	r26, r22
    1276:	b7 2b       	or	r27, r23
    1278:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    127c:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    1280:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    1284:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    1288:	b0 9b       	sbis	0x16, 0	; 22
    128a:	1b c0       	rjmp	.+54     	; 0x12c2 <__vector_17+0x98>
    128c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1290:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1294:	c9 01       	movw	r24, r18
    1296:	01 96       	adiw	r24, 0x01	; 1
    1298:	09 2e       	mov	r0, r25
    129a:	00 0c       	add	r0, r0
    129c:	aa 0b       	sbc	r26, r26
    129e:	bb 0b       	sbc	r27, r27
    12a0:	dc 01       	movw	r26, r24
    12a2:	99 27       	eor	r25, r25
    12a4:	88 27       	eor	r24, r24
    12a6:	60 e0       	ldi	r22, 0x00	; 0
    12a8:	70 e0       	ldi	r23, 0x00	; 0
    12aa:	84 2b       	or	r24, r20
    12ac:	95 2b       	or	r25, r21
    12ae:	a6 2b       	or	r26, r22
    12b0:	b7 2b       	or	r27, r23
    12b2:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    12b6:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    12ba:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    12be:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    12c2:	e0 91 46 02 	lds	r30, 0x0246	; 0x800246 <mtable+0x18>
    12c6:	f0 91 47 02 	lds	r31, 0x0247	; 0x800247 <mtable+0x19>
    12ca:	30 97       	sbiw	r30, 0x00	; 0
    12cc:	39 f0       	breq	.+14     	; 0x12dc <__vector_17+0xb2>
    12ce:	6c e0       	ldi	r22, 0x0C	; 12
    12d0:	70 e0       	ldi	r23, 0x00	; 0
    12d2:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <otable+0x18>
    12d6:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <otable+0x19>
    12da:	09 95       	icall
    12dc:	0e 94 ca 03 	call	0x794	; 0x794 <schedule>
    12e0:	ff 91       	pop	r31
    12e2:	ef 91       	pop	r30
    12e4:	bf 91       	pop	r27
    12e6:	af 91       	pop	r26
    12e8:	9f 91       	pop	r25
    12ea:	8f 91       	pop	r24
    12ec:	7f 91       	pop	r23
    12ee:	6f 91       	pop	r22
    12f0:	5f 91       	pop	r21
    12f2:	4f 91       	pop	r20
    12f4:	3f 91       	pop	r19
    12f6:	2f 91       	pop	r18
    12f8:	0f 90       	pop	r0
    12fa:	0f be       	out	0x3f, r0	; 63
    12fc:	0f 90       	pop	r0
    12fe:	1f 90       	pop	r1
    1300:	18 95       	reti

00001302 <__vector_18>:
    1302:	1f 92       	push	r1
    1304:	0f 92       	push	r0
    1306:	0f b6       	in	r0, 0x3f	; 63
    1308:	0f 92       	push	r0
    130a:	11 24       	eor	r1, r1
    130c:	2f 93       	push	r18
    130e:	3f 93       	push	r19
    1310:	4f 93       	push	r20
    1312:	5f 93       	push	r21
    1314:	6f 93       	push	r22
    1316:	7f 93       	push	r23
    1318:	8f 93       	push	r24
    131a:	9f 93       	push	r25
    131c:	af 93       	push	r26
    131e:	bf 93       	push	r27
    1320:	ef 93       	push	r30
    1322:	ff 93       	push	r31
    1324:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    1328:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    132c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1330:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1334:	c9 01       	movw	r24, r18
    1336:	03 2e       	mov	r0, r19
    1338:	00 0c       	add	r0, r0
    133a:	aa 0b       	sbc	r26, r26
    133c:	bb 0b       	sbc	r27, r27
    133e:	dc 01       	movw	r26, r24
    1340:	99 27       	eor	r25, r25
    1342:	88 27       	eor	r24, r24
    1344:	60 e0       	ldi	r22, 0x00	; 0
    1346:	70 e0       	ldi	r23, 0x00	; 0
    1348:	84 2b       	or	r24, r20
    134a:	95 2b       	or	r25, r21
    134c:	a6 2b       	or	r26, r22
    134e:	b7 2b       	or	r27, r23
    1350:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    1354:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    1358:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    135c:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    1360:	b0 9b       	sbis	0x16, 0	; 22
    1362:	1b c0       	rjmp	.+54     	; 0x139a <__vector_18+0x98>
    1364:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1368:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    136c:	c9 01       	movw	r24, r18
    136e:	01 96       	adiw	r24, 0x01	; 1
    1370:	09 2e       	mov	r0, r25
    1372:	00 0c       	add	r0, r0
    1374:	aa 0b       	sbc	r26, r26
    1376:	bb 0b       	sbc	r27, r27
    1378:	dc 01       	movw	r26, r24
    137a:	99 27       	eor	r25, r25
    137c:	88 27       	eor	r24, r24
    137e:	60 e0       	ldi	r22, 0x00	; 0
    1380:	70 e0       	ldi	r23, 0x00	; 0
    1382:	84 2b       	or	r24, r20
    1384:	95 2b       	or	r25, r21
    1386:	a6 2b       	or	r26, r22
    1388:	b7 2b       	or	r27, r23
    138a:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    138e:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    1392:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    1396:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    139a:	e0 91 48 02 	lds	r30, 0x0248	; 0x800248 <mtable+0x1a>
    139e:	f0 91 49 02 	lds	r31, 0x0249	; 0x800249 <mtable+0x1b>
    13a2:	30 97       	sbiw	r30, 0x00	; 0
    13a4:	39 f0       	breq	.+14     	; 0x13b4 <__vector_18+0xb2>
    13a6:	6d e0       	ldi	r22, 0x0D	; 13
    13a8:	70 e0       	ldi	r23, 0x00	; 0
    13aa:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <otable+0x1a>
    13ae:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <otable+0x1b>
    13b2:	09 95       	icall
    13b4:	0e 94 ca 03 	call	0x794	; 0x794 <schedule>
    13b8:	ff 91       	pop	r31
    13ba:	ef 91       	pop	r30
    13bc:	bf 91       	pop	r27
    13be:	af 91       	pop	r26
    13c0:	9f 91       	pop	r25
    13c2:	8f 91       	pop	r24
    13c4:	7f 91       	pop	r23
    13c6:	6f 91       	pop	r22
    13c8:	5f 91       	pop	r21
    13ca:	4f 91       	pop	r20
    13cc:	3f 91       	pop	r19
    13ce:	2f 91       	pop	r18
    13d0:	0f 90       	pop	r0
    13d2:	0f be       	out	0x3f, r0	; 63
    13d4:	0f 90       	pop	r0
    13d6:	1f 90       	pop	r1
    13d8:	18 95       	reti

000013da <__vector_19>:
    13da:	1f 92       	push	r1
    13dc:	0f 92       	push	r0
    13de:	0f b6       	in	r0, 0x3f	; 63
    13e0:	0f 92       	push	r0
    13e2:	11 24       	eor	r1, r1
    13e4:	2f 93       	push	r18
    13e6:	3f 93       	push	r19
    13e8:	4f 93       	push	r20
    13ea:	5f 93       	push	r21
    13ec:	6f 93       	push	r22
    13ee:	7f 93       	push	r23
    13f0:	8f 93       	push	r24
    13f2:	9f 93       	push	r25
    13f4:	af 93       	push	r26
    13f6:	bf 93       	push	r27
    13f8:	ef 93       	push	r30
    13fa:	ff 93       	push	r31
    13fc:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    1400:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    1404:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1408:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    140c:	c9 01       	movw	r24, r18
    140e:	03 2e       	mov	r0, r19
    1410:	00 0c       	add	r0, r0
    1412:	aa 0b       	sbc	r26, r26
    1414:	bb 0b       	sbc	r27, r27
    1416:	dc 01       	movw	r26, r24
    1418:	99 27       	eor	r25, r25
    141a:	88 27       	eor	r24, r24
    141c:	60 e0       	ldi	r22, 0x00	; 0
    141e:	70 e0       	ldi	r23, 0x00	; 0
    1420:	84 2b       	or	r24, r20
    1422:	95 2b       	or	r25, r21
    1424:	a6 2b       	or	r26, r22
    1426:	b7 2b       	or	r27, r23
    1428:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    142c:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    1430:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    1434:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    1438:	b0 9b       	sbis	0x16, 0	; 22
    143a:	1b c0       	rjmp	.+54     	; 0x1472 <__vector_19+0x98>
    143c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1440:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1444:	c9 01       	movw	r24, r18
    1446:	01 96       	adiw	r24, 0x01	; 1
    1448:	09 2e       	mov	r0, r25
    144a:	00 0c       	add	r0, r0
    144c:	aa 0b       	sbc	r26, r26
    144e:	bb 0b       	sbc	r27, r27
    1450:	dc 01       	movw	r26, r24
    1452:	99 27       	eor	r25, r25
    1454:	88 27       	eor	r24, r24
    1456:	60 e0       	ldi	r22, 0x00	; 0
    1458:	70 e0       	ldi	r23, 0x00	; 0
    145a:	84 2b       	or	r24, r20
    145c:	95 2b       	or	r25, r21
    145e:	a6 2b       	or	r26, r22
    1460:	b7 2b       	or	r27, r23
    1462:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    1466:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    146a:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    146e:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    1472:	e0 91 4a 02 	lds	r30, 0x024A	; 0x80024a <mtable+0x1c>
    1476:	f0 91 4b 02 	lds	r31, 0x024B	; 0x80024b <mtable+0x1d>
    147a:	30 97       	sbiw	r30, 0x00	; 0
    147c:	39 f0       	breq	.+14     	; 0x148c <__vector_19+0xb2>
    147e:	6e e0       	ldi	r22, 0x0E	; 14
    1480:	70 e0       	ldi	r23, 0x00	; 0
    1482:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <otable+0x1c>
    1486:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <otable+0x1d>
    148a:	09 95       	icall
    148c:	0e 94 ca 03 	call	0x794	; 0x794 <schedule>
    1490:	ff 91       	pop	r31
    1492:	ef 91       	pop	r30
    1494:	bf 91       	pop	r27
    1496:	af 91       	pop	r26
    1498:	9f 91       	pop	r25
    149a:	8f 91       	pop	r24
    149c:	7f 91       	pop	r23
    149e:	6f 91       	pop	r22
    14a0:	5f 91       	pop	r21
    14a2:	4f 91       	pop	r20
    14a4:	3f 91       	pop	r19
    14a6:	2f 91       	pop	r18
    14a8:	0f 90       	pop	r0
    14aa:	0f be       	out	0x3f, r0	; 63
    14ac:	0f 90       	pop	r0
    14ae:	1f 90       	pop	r1
    14b0:	18 95       	reti

000014b2 <__vector_20>:
    14b2:	1f 92       	push	r1
    14b4:	0f 92       	push	r0
    14b6:	0f b6       	in	r0, 0x3f	; 63
    14b8:	0f 92       	push	r0
    14ba:	11 24       	eor	r1, r1
    14bc:	2f 93       	push	r18
    14be:	3f 93       	push	r19
    14c0:	4f 93       	push	r20
    14c2:	5f 93       	push	r21
    14c4:	6f 93       	push	r22
    14c6:	7f 93       	push	r23
    14c8:	8f 93       	push	r24
    14ca:	9f 93       	push	r25
    14cc:	af 93       	push	r26
    14ce:	bf 93       	push	r27
    14d0:	ef 93       	push	r30
    14d2:	ff 93       	push	r31
    14d4:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    14d8:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    14dc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    14e0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    14e4:	c9 01       	movw	r24, r18
    14e6:	03 2e       	mov	r0, r19
    14e8:	00 0c       	add	r0, r0
    14ea:	aa 0b       	sbc	r26, r26
    14ec:	bb 0b       	sbc	r27, r27
    14ee:	dc 01       	movw	r26, r24
    14f0:	99 27       	eor	r25, r25
    14f2:	88 27       	eor	r24, r24
    14f4:	60 e0       	ldi	r22, 0x00	; 0
    14f6:	70 e0       	ldi	r23, 0x00	; 0
    14f8:	84 2b       	or	r24, r20
    14fa:	95 2b       	or	r25, r21
    14fc:	a6 2b       	or	r26, r22
    14fe:	b7 2b       	or	r27, r23
    1500:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    1504:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    1508:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    150c:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    1510:	b0 9b       	sbis	0x16, 0	; 22
    1512:	1b c0       	rjmp	.+54     	; 0x154a <__vector_20+0x98>
    1514:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1518:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    151c:	c9 01       	movw	r24, r18
    151e:	01 96       	adiw	r24, 0x01	; 1
    1520:	09 2e       	mov	r0, r25
    1522:	00 0c       	add	r0, r0
    1524:	aa 0b       	sbc	r26, r26
    1526:	bb 0b       	sbc	r27, r27
    1528:	dc 01       	movw	r26, r24
    152a:	99 27       	eor	r25, r25
    152c:	88 27       	eor	r24, r24
    152e:	60 e0       	ldi	r22, 0x00	; 0
    1530:	70 e0       	ldi	r23, 0x00	; 0
    1532:	84 2b       	or	r24, r20
    1534:	95 2b       	or	r25, r21
    1536:	a6 2b       	or	r26, r22
    1538:	b7 2b       	or	r27, r23
    153a:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    153e:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    1542:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    1546:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    154a:	e0 91 4c 02 	lds	r30, 0x024C	; 0x80024c <mtable+0x1e>
    154e:	f0 91 4d 02 	lds	r31, 0x024D	; 0x80024d <mtable+0x1f>
    1552:	30 97       	sbiw	r30, 0x00	; 0
    1554:	39 f0       	breq	.+14     	; 0x1564 <__vector_20+0xb2>
    1556:	6f e0       	ldi	r22, 0x0F	; 15
    1558:	70 e0       	ldi	r23, 0x00	; 0
    155a:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <otable+0x1e>
    155e:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <otable+0x1f>
    1562:	09 95       	icall
    1564:	0e 94 ca 03 	call	0x794	; 0x794 <schedule>
    1568:	ff 91       	pop	r31
    156a:	ef 91       	pop	r30
    156c:	bf 91       	pop	r27
    156e:	af 91       	pop	r26
    1570:	9f 91       	pop	r25
    1572:	8f 91       	pop	r24
    1574:	7f 91       	pop	r23
    1576:	6f 91       	pop	r22
    1578:	5f 91       	pop	r21
    157a:	4f 91       	pop	r20
    157c:	3f 91       	pop	r19
    157e:	2f 91       	pop	r18
    1580:	0f 90       	pop	r0
    1582:	0f be       	out	0x3f, r0	; 63
    1584:	0f 90       	pop	r0
    1586:	1f 90       	pop	r1
    1588:	18 95       	reti

0000158a <__vector_21>:
    158a:	1f 92       	push	r1
    158c:	0f 92       	push	r0
    158e:	0f b6       	in	r0, 0x3f	; 63
    1590:	0f 92       	push	r0
    1592:	11 24       	eor	r1, r1
    1594:	2f 93       	push	r18
    1596:	3f 93       	push	r19
    1598:	4f 93       	push	r20
    159a:	5f 93       	push	r21
    159c:	6f 93       	push	r22
    159e:	7f 93       	push	r23
    15a0:	8f 93       	push	r24
    15a2:	9f 93       	push	r25
    15a4:	af 93       	push	r26
    15a6:	bf 93       	push	r27
    15a8:	ef 93       	push	r30
    15aa:	ff 93       	push	r31
    15ac:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    15b0:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    15b4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    15b8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    15bc:	c9 01       	movw	r24, r18
    15be:	03 2e       	mov	r0, r19
    15c0:	00 0c       	add	r0, r0
    15c2:	aa 0b       	sbc	r26, r26
    15c4:	bb 0b       	sbc	r27, r27
    15c6:	dc 01       	movw	r26, r24
    15c8:	99 27       	eor	r25, r25
    15ca:	88 27       	eor	r24, r24
    15cc:	60 e0       	ldi	r22, 0x00	; 0
    15ce:	70 e0       	ldi	r23, 0x00	; 0
    15d0:	84 2b       	or	r24, r20
    15d2:	95 2b       	or	r25, r21
    15d4:	a6 2b       	or	r26, r22
    15d6:	b7 2b       	or	r27, r23
    15d8:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    15dc:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    15e0:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    15e4:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    15e8:	b0 9b       	sbis	0x16, 0	; 22
    15ea:	1b c0       	rjmp	.+54     	; 0x1622 <__vector_21+0x98>
    15ec:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    15f0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    15f4:	c9 01       	movw	r24, r18
    15f6:	01 96       	adiw	r24, 0x01	; 1
    15f8:	09 2e       	mov	r0, r25
    15fa:	00 0c       	add	r0, r0
    15fc:	aa 0b       	sbc	r26, r26
    15fe:	bb 0b       	sbc	r27, r27
    1600:	dc 01       	movw	r26, r24
    1602:	99 27       	eor	r25, r25
    1604:	88 27       	eor	r24, r24
    1606:	60 e0       	ldi	r22, 0x00	; 0
    1608:	70 e0       	ldi	r23, 0x00	; 0
    160a:	84 2b       	or	r24, r20
    160c:	95 2b       	or	r25, r21
    160e:	a6 2b       	or	r26, r22
    1610:	b7 2b       	or	r27, r23
    1612:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    1616:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    161a:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    161e:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    1622:	e0 91 4e 02 	lds	r30, 0x024E	; 0x80024e <mtable+0x20>
    1626:	f0 91 4f 02 	lds	r31, 0x024F	; 0x80024f <mtable+0x21>
    162a:	30 97       	sbiw	r30, 0x00	; 0
    162c:	39 f0       	breq	.+14     	; 0x163c <__vector_21+0xb2>
    162e:	60 e1       	ldi	r22, 0x10	; 16
    1630:	70 e0       	ldi	r23, 0x00	; 0
    1632:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <otable+0x20>
    1636:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <otable+0x21>
    163a:	09 95       	icall
    163c:	0e 94 ca 03 	call	0x794	; 0x794 <schedule>
    1640:	ff 91       	pop	r31
    1642:	ef 91       	pop	r30
    1644:	bf 91       	pop	r27
    1646:	af 91       	pop	r26
    1648:	9f 91       	pop	r25
    164a:	8f 91       	pop	r24
    164c:	7f 91       	pop	r23
    164e:	6f 91       	pop	r22
    1650:	5f 91       	pop	r21
    1652:	4f 91       	pop	r20
    1654:	3f 91       	pop	r19
    1656:	2f 91       	pop	r18
    1658:	0f 90       	pop	r0
    165a:	0f be       	out	0x3f, r0	; 63
    165c:	0f 90       	pop	r0
    165e:	1f 90       	pop	r1
    1660:	18 95       	reti

00001662 <__vector_22>:
    1662:	1f 92       	push	r1
    1664:	0f 92       	push	r0
    1666:	0f b6       	in	r0, 0x3f	; 63
    1668:	0f 92       	push	r0
    166a:	11 24       	eor	r1, r1
    166c:	2f 93       	push	r18
    166e:	3f 93       	push	r19
    1670:	4f 93       	push	r20
    1672:	5f 93       	push	r21
    1674:	6f 93       	push	r22
    1676:	7f 93       	push	r23
    1678:	8f 93       	push	r24
    167a:	9f 93       	push	r25
    167c:	af 93       	push	r26
    167e:	bf 93       	push	r27
    1680:	ef 93       	push	r30
    1682:	ff 93       	push	r31
    1684:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    1688:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    168c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1690:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1694:	c9 01       	movw	r24, r18
    1696:	03 2e       	mov	r0, r19
    1698:	00 0c       	add	r0, r0
    169a:	aa 0b       	sbc	r26, r26
    169c:	bb 0b       	sbc	r27, r27
    169e:	dc 01       	movw	r26, r24
    16a0:	99 27       	eor	r25, r25
    16a2:	88 27       	eor	r24, r24
    16a4:	60 e0       	ldi	r22, 0x00	; 0
    16a6:	70 e0       	ldi	r23, 0x00	; 0
    16a8:	84 2b       	or	r24, r20
    16aa:	95 2b       	or	r25, r21
    16ac:	a6 2b       	or	r26, r22
    16ae:	b7 2b       	or	r27, r23
    16b0:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    16b4:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    16b8:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    16bc:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    16c0:	b0 9b       	sbis	0x16, 0	; 22
    16c2:	1b c0       	rjmp	.+54     	; 0x16fa <__vector_22+0x98>
    16c4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    16c8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    16cc:	c9 01       	movw	r24, r18
    16ce:	01 96       	adiw	r24, 0x01	; 1
    16d0:	09 2e       	mov	r0, r25
    16d2:	00 0c       	add	r0, r0
    16d4:	aa 0b       	sbc	r26, r26
    16d6:	bb 0b       	sbc	r27, r27
    16d8:	dc 01       	movw	r26, r24
    16da:	99 27       	eor	r25, r25
    16dc:	88 27       	eor	r24, r24
    16de:	60 e0       	ldi	r22, 0x00	; 0
    16e0:	70 e0       	ldi	r23, 0x00	; 0
    16e2:	84 2b       	or	r24, r20
    16e4:	95 2b       	or	r25, r21
    16e6:	a6 2b       	or	r26, r22
    16e8:	b7 2b       	or	r27, r23
    16ea:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    16ee:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    16f2:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    16f6:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    16fa:	e0 91 50 02 	lds	r30, 0x0250	; 0x800250 <mtable+0x22>
    16fe:	f0 91 51 02 	lds	r31, 0x0251	; 0x800251 <mtable+0x23>
    1702:	30 97       	sbiw	r30, 0x00	; 0
    1704:	39 f0       	breq	.+14     	; 0x1714 <__vector_22+0xb2>
    1706:	61 e1       	ldi	r22, 0x11	; 17
    1708:	70 e0       	ldi	r23, 0x00	; 0
    170a:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <otable+0x22>
    170e:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <otable+0x23>
    1712:	09 95       	icall
    1714:	0e 94 ca 03 	call	0x794	; 0x794 <schedule>
    1718:	ff 91       	pop	r31
    171a:	ef 91       	pop	r30
    171c:	bf 91       	pop	r27
    171e:	af 91       	pop	r26
    1720:	9f 91       	pop	r25
    1722:	8f 91       	pop	r24
    1724:	7f 91       	pop	r23
    1726:	6f 91       	pop	r22
    1728:	5f 91       	pop	r21
    172a:	4f 91       	pop	r20
    172c:	3f 91       	pop	r19
    172e:	2f 91       	pop	r18
    1730:	0f 90       	pop	r0
    1732:	0f be       	out	0x3f, r0	; 63
    1734:	0f 90       	pop	r0
    1736:	1f 90       	pop	r1
    1738:	18 95       	reti

0000173a <enqueueByDeadline>:
    173a:	ef 92       	push	r14
    173c:	ff 92       	push	r15
    173e:	0f 93       	push	r16
    1740:	1f 93       	push	r17
    1742:	cf 93       	push	r28
    1744:	df 93       	push	r29
    1746:	7b 01       	movw	r14, r22
    1748:	eb 01       	movw	r28, r22
    174a:	a8 81       	ld	r26, Y
    174c:	b9 81       	ldd	r27, Y+1	; 0x01
    174e:	10 97       	sbiw	r26, 0x00	; 0
    1750:	61 f1       	breq	.+88     	; 0x17aa <enqueueByDeadline+0x70>
    1752:	fc 01       	movw	r30, r24
    1754:	06 81       	ldd	r16, Z+6	; 0x06
    1756:	17 81       	ldd	r17, Z+7	; 0x07
    1758:	20 85       	ldd	r18, Z+8	; 0x08
    175a:	31 85       	ldd	r19, Z+9	; 0x09
    175c:	16 96       	adiw	r26, 0x06	; 6
    175e:	4d 91       	ld	r20, X+
    1760:	5d 91       	ld	r21, X+
    1762:	6d 91       	ld	r22, X+
    1764:	7c 91       	ld	r23, X
    1766:	19 97       	sbiw	r26, 0x09	; 9
    1768:	04 17       	cp	r16, r20
    176a:	15 07       	cpc	r17, r21
    176c:	26 07       	cpc	r18, r22
    176e:	37 07       	cpc	r19, r23
    1770:	14 f4       	brge	.+4      	; 0x1776 <enqueueByDeadline+0x3c>
    1772:	1b c0       	rjmp	.+54     	; 0x17aa <enqueueByDeadline+0x70>
    1774:	df 01       	movw	r26, r30
    1776:	ed 91       	ld	r30, X+
    1778:	fc 91       	ld	r31, X
    177a:	11 97       	sbiw	r26, 0x01	; 1
    177c:	30 97       	sbiw	r30, 0x00	; 0
    177e:	49 f0       	breq	.+18     	; 0x1792 <enqueueByDeadline+0x58>
    1780:	46 81       	ldd	r20, Z+6	; 0x06
    1782:	57 81       	ldd	r21, Z+7	; 0x07
    1784:	60 85       	ldd	r22, Z+8	; 0x08
    1786:	71 85       	ldd	r23, Z+9	; 0x09
    1788:	04 17       	cp	r16, r20
    178a:	15 07       	cpc	r17, r21
    178c:	26 07       	cpc	r18, r22
    178e:	37 07       	cpc	r19, r23
    1790:	8c f7       	brge	.-30     	; 0x1774 <enqueueByDeadline+0x3a>
    1792:	ec 01       	movw	r28, r24
    1794:	f9 83       	std	Y+1, r31	; 0x01
    1796:	e8 83       	st	Y, r30
    1798:	10 97       	sbiw	r26, 0x00	; 0
    179a:	21 f4       	brne	.+8      	; 0x17a4 <enqueueByDeadline+0x6a>
    179c:	f7 01       	movw	r30, r14
    179e:	91 83       	std	Z+1, r25	; 0x01
    17a0:	80 83       	st	Z, r24
    17a2:	07 c0       	rjmp	.+14     	; 0x17b2 <enqueueByDeadline+0x78>
    17a4:	8d 93       	st	X+, r24
    17a6:	9c 93       	st	X, r25
    17a8:	04 c0       	rjmp	.+8      	; 0x17b2 <enqueueByDeadline+0x78>
    17aa:	ec 01       	movw	r28, r24
    17ac:	b9 83       	std	Y+1, r27	; 0x01
    17ae:	a8 83       	st	Y, r26
    17b0:	f5 cf       	rjmp	.-22     	; 0x179c <enqueueByDeadline+0x62>
    17b2:	df 91       	pop	r29
    17b4:	cf 91       	pop	r28
    17b6:	1f 91       	pop	r17
    17b8:	0f 91       	pop	r16
    17ba:	ff 90       	pop	r15
    17bc:	ef 90       	pop	r14
    17be:	08 95       	ret

000017c0 <enqueueByBaseline>:
    17c0:	ef 92       	push	r14
    17c2:	ff 92       	push	r15
    17c4:	0f 93       	push	r16
    17c6:	1f 93       	push	r17
    17c8:	cf 93       	push	r28
    17ca:	df 93       	push	r29
    17cc:	7b 01       	movw	r14, r22
    17ce:	eb 01       	movw	r28, r22
    17d0:	a8 81       	ld	r26, Y
    17d2:	b9 81       	ldd	r27, Y+1	; 0x01
    17d4:	10 97       	sbiw	r26, 0x00	; 0
    17d6:	61 f1       	breq	.+88     	; 0x1830 <enqueueByBaseline+0x70>
    17d8:	fc 01       	movw	r30, r24
    17da:	02 81       	ldd	r16, Z+2	; 0x02
    17dc:	13 81       	ldd	r17, Z+3	; 0x03
    17de:	24 81       	ldd	r18, Z+4	; 0x04
    17e0:	35 81       	ldd	r19, Z+5	; 0x05
    17e2:	12 96       	adiw	r26, 0x02	; 2
    17e4:	4d 91       	ld	r20, X+
    17e6:	5d 91       	ld	r21, X+
    17e8:	6d 91       	ld	r22, X+
    17ea:	7c 91       	ld	r23, X
    17ec:	15 97       	sbiw	r26, 0x05	; 5
    17ee:	04 17       	cp	r16, r20
    17f0:	15 07       	cpc	r17, r21
    17f2:	26 07       	cpc	r18, r22
    17f4:	37 07       	cpc	r19, r23
    17f6:	14 f4       	brge	.+4      	; 0x17fc <enqueueByBaseline+0x3c>
    17f8:	1b c0       	rjmp	.+54     	; 0x1830 <enqueueByBaseline+0x70>
    17fa:	df 01       	movw	r26, r30
    17fc:	ed 91       	ld	r30, X+
    17fe:	fc 91       	ld	r31, X
    1800:	11 97       	sbiw	r26, 0x01	; 1
    1802:	30 97       	sbiw	r30, 0x00	; 0
    1804:	49 f0       	breq	.+18     	; 0x1818 <enqueueByBaseline+0x58>
    1806:	42 81       	ldd	r20, Z+2	; 0x02
    1808:	53 81       	ldd	r21, Z+3	; 0x03
    180a:	64 81       	ldd	r22, Z+4	; 0x04
    180c:	75 81       	ldd	r23, Z+5	; 0x05
    180e:	04 17       	cp	r16, r20
    1810:	15 07       	cpc	r17, r21
    1812:	26 07       	cpc	r18, r22
    1814:	37 07       	cpc	r19, r23
    1816:	8c f7       	brge	.-30     	; 0x17fa <enqueueByBaseline+0x3a>
    1818:	ec 01       	movw	r28, r24
    181a:	f9 83       	std	Y+1, r31	; 0x01
    181c:	e8 83       	st	Y, r30
    181e:	10 97       	sbiw	r26, 0x00	; 0
    1820:	21 f4       	brne	.+8      	; 0x182a <enqueueByBaseline+0x6a>
    1822:	f7 01       	movw	r30, r14
    1824:	91 83       	std	Z+1, r25	; 0x01
    1826:	80 83       	st	Z, r24
    1828:	07 c0       	rjmp	.+14     	; 0x1838 <enqueueByBaseline+0x78>
    182a:	8d 93       	st	X+, r24
    182c:	9c 93       	st	X, r25
    182e:	04 c0       	rjmp	.+8      	; 0x1838 <enqueueByBaseline+0x78>
    1830:	ec 01       	movw	r28, r24
    1832:	b9 83       	std	Y+1, r27	; 0x01
    1834:	a8 83       	st	Y, r26
    1836:	f5 cf       	rjmp	.-22     	; 0x1822 <enqueueByBaseline+0x62>
    1838:	df 91       	pop	r29
    183a:	cf 91       	pop	r28
    183c:	1f 91       	pop	r17
    183e:	0f 91       	pop	r16
    1840:	ff 90       	pop	r15
    1842:	ef 90       	pop	r14
    1844:	08 95       	ret

00001846 <dequeue>:
    1846:	dc 01       	movw	r26, r24
    1848:	ed 91       	ld	r30, X+
    184a:	fc 91       	ld	r31, X
    184c:	11 97       	sbiw	r26, 0x01	; 1
    184e:	30 97       	sbiw	r30, 0x00	; 0
    1850:	59 f4       	brne	.+22     	; 0x1868 <dequeue+0x22>
    1852:	8f ef       	ldi	r24, 0xFF	; 255
    1854:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
    1858:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
    185c:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
    1860:	81 e0       	ldi	r24, 0x01	; 1
    1862:	83 bf       	out	0x33, r24	; 51
    1864:	88 95       	sleep
    1866:	fd cf       	rjmp	.-6      	; 0x1862 <dequeue+0x1c>
    1868:	20 81       	ld	r18, Z
    186a:	31 81       	ldd	r19, Z+1	; 0x01
    186c:	2d 93       	st	X+, r18
    186e:	3c 93       	st	X, r19
    1870:	cf 01       	movw	r24, r30
    1872:	08 95       	ret

00001874 <__vector_9>:
    1874:	1f 92       	push	r1
    1876:	0f 92       	push	r0
    1878:	0f b6       	in	r0, 0x3f	; 63
    187a:	0f 92       	push	r0
    187c:	11 24       	eor	r1, r1
    187e:	2f 93       	push	r18
    1880:	3f 93       	push	r19
    1882:	4f 93       	push	r20
    1884:	5f 93       	push	r21
    1886:	6f 93       	push	r22
    1888:	7f 93       	push	r23
    188a:	8f 93       	push	r24
    188c:	9f 93       	push	r25
    188e:	ef 93       	push	r30
    1890:	ff 93       	push	r31
    1892:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <overflows>
    1896:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <overflows+0x1>
    189a:	01 96       	adiw	r24, 0x01	; 1
    189c:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <overflows+0x1>
    18a0:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <overflows>
    18a4:	e0 91 92 01 	lds	r30, 0x0192	; 0x800192 <timerQ>
    18a8:	f0 91 93 01 	lds	r31, 0x0193	; 0x800193 <timerQ+0x1>
    18ac:	30 97       	sbiw	r30, 0x00	; 0
    18ae:	01 f1       	breq	.+64     	; 0x18f0 <__vector_9+0x7c>
    18b0:	42 81       	ldd	r20, Z+2	; 0x02
    18b2:	53 81       	ldd	r21, Z+3	; 0x03
    18b4:	64 81       	ldd	r22, Z+4	; 0x04
    18b6:	75 81       	ldd	r23, Z+5	; 0x05
    18b8:	86 17       	cp	r24, r22
    18ba:	97 07       	cpc	r25, r23
    18bc:	c9 f4       	brne	.+50     	; 0x18f0 <__vector_9+0x7c>
    18be:	ca 01       	movw	r24, r20
    18c0:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    18c4:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    18c8:	42 1b       	sub	r20, r18
    18ca:	53 0b       	sbc	r21, r19
    18cc:	41 30       	cpi	r20, 0x01	; 1
    18ce:	51 05       	cpc	r21, r1
    18d0:	29 f4       	brne	.+10     	; 0x18dc <__vector_9+0x68>
    18d2:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    18d6:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    18da:	01 96       	adiw	r24, 0x01	; 1
    18dc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    18e0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    18e4:	ef e6       	ldi	r30, 0x6F	; 111
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	80 81       	ld	r24, Z
    18ea:	82 60       	ori	r24, 0x02	; 2
    18ec:	80 83       	st	Z, r24
    18ee:	05 c0       	rjmp	.+10     	; 0x18fa <__vector_9+0x86>
    18f0:	ef e6       	ldi	r30, 0x6F	; 111
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	80 81       	ld	r24, Z
    18f6:	8d 7f       	andi	r24, 0xFD	; 253
    18f8:	80 83       	st	Z, r24
    18fa:	ff 91       	pop	r31
    18fc:	ef 91       	pop	r30
    18fe:	9f 91       	pop	r25
    1900:	8f 91       	pop	r24
    1902:	7f 91       	pop	r23
    1904:	6f 91       	pop	r22
    1906:	5f 91       	pop	r21
    1908:	4f 91       	pop	r20
    190a:	3f 91       	pop	r19
    190c:	2f 91       	pop	r18
    190e:	0f 90       	pop	r0
    1910:	0f be       	out	0x3f, r0	; 63
    1912:	0f 90       	pop	r0
    1914:	1f 90       	pop	r1
    1916:	18 95       	reti

00001918 <__vector_7>:
    1918:	1f 92       	push	r1
    191a:	0f 92       	push	r0
    191c:	0f b6       	in	r0, 0x3f	; 63
    191e:	0f 92       	push	r0
    1920:	11 24       	eor	r1, r1
    1922:	cf 92       	push	r12
    1924:	df 92       	push	r13
    1926:	ef 92       	push	r14
    1928:	ff 92       	push	r15
    192a:	2f 93       	push	r18
    192c:	3f 93       	push	r19
    192e:	4f 93       	push	r20
    1930:	5f 93       	push	r21
    1932:	6f 93       	push	r22
    1934:	7f 93       	push	r23
    1936:	8f 93       	push	r24
    1938:	9f 93       	push	r25
    193a:	af 93       	push	r26
    193c:	bf 93       	push	r27
    193e:	ef 93       	push	r30
    1940:	ff 93       	push	r31
    1942:	c0 90 8c 01 	lds	r12, 0x018C	; 0x80018c <overflows>
    1946:	d0 90 8d 01 	lds	r13, 0x018D	; 0x80018d <overflows+0x1>
    194a:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    194e:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1952:	b0 99       	sbic	0x16, 0	; 22
    1954:	0f c0       	rjmp	.+30     	; 0x1974 <__vector_7+0x5c>
    1956:	0d 2c       	mov	r0, r13
    1958:	00 0c       	add	r0, r0
    195a:	ee 08       	sbc	r14, r14
    195c:	ff 08       	sbc	r15, r15
    195e:	d6 01       	movw	r26, r12
    1960:	99 27       	eor	r25, r25
    1962:	88 27       	eor	r24, r24
    1964:	69 01       	movw	r12, r18
    1966:	e1 2c       	mov	r14, r1
    1968:	f1 2c       	mov	r15, r1
    196a:	c8 2a       	or	r12, r24
    196c:	d9 2a       	or	r13, r25
    196e:	ea 2a       	or	r14, r26
    1970:	fb 2a       	or	r15, r27
    1972:	15 c0       	rjmp	.+42     	; 0x199e <__vector_7+0x86>
    1974:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1978:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    197c:	8f ef       	ldi	r24, 0xFF	; 255
    197e:	c8 1a       	sub	r12, r24
    1980:	d8 0a       	sbc	r13, r24
    1982:	0d 2c       	mov	r0, r13
    1984:	00 0c       	add	r0, r0
    1986:	ee 08       	sbc	r14, r14
    1988:	ff 08       	sbc	r15, r15
    198a:	d6 01       	movw	r26, r12
    198c:	99 27       	eor	r25, r25
    198e:	88 27       	eor	r24, r24
    1990:	69 01       	movw	r12, r18
    1992:	e1 2c       	mov	r14, r1
    1994:	f1 2c       	mov	r15, r1
    1996:	c8 2a       	or	r12, r24
    1998:	d9 2a       	or	r13, r25
    199a:	ea 2a       	or	r14, r26
    199c:	fb 2a       	or	r15, r27
    199e:	e0 91 92 01 	lds	r30, 0x0192	; 0x800192 <timerQ>
    19a2:	f0 91 93 01 	lds	r31, 0x0193	; 0x800193 <timerQ+0x1>
    19a6:	30 97       	sbiw	r30, 0x00	; 0
    19a8:	09 f4       	brne	.+2      	; 0x19ac <__vector_7+0x94>
    19aa:	42 c0       	rjmp	.+132    	; 0x1a30 <__vector_7+0x118>
    19ac:	82 81       	ldd	r24, Z+2	; 0x02
    19ae:	93 81       	ldd	r25, Z+3	; 0x03
    19b0:	a4 81       	ldd	r26, Z+4	; 0x04
    19b2:	b5 81       	ldd	r27, Z+5	; 0x05
    19b4:	8c 19       	sub	r24, r12
    19b6:	9d 09       	sbc	r25, r13
    19b8:	ae 09       	sbc	r26, r14
    19ba:	bf 09       	sbc	r27, r15
    19bc:	18 16       	cp	r1, r24
    19be:	19 06       	cpc	r1, r25
    19c0:	1a 06       	cpc	r1, r26
    19c2:	1b 06       	cpc	r1, r27
    19c4:	ec f1       	brlt	.+122    	; 0x1a40 <__vector_7+0x128>
    19c6:	82 e9       	ldi	r24, 0x92	; 146
    19c8:	91 e0       	ldi	r25, 0x01	; 1
    19ca:	0e 94 23 0c 	call	0x1846	; 0x1846 <dequeue>
    19ce:	64 e9       	ldi	r22, 0x94	; 148
    19d0:	71 e0       	ldi	r23, 0x01	; 1
    19d2:	0e 94 9d 0b 	call	0x173a	; 0x173a <enqueueByDeadline>
    19d6:	e0 91 92 01 	lds	r30, 0x0192	; 0x800192 <timerQ>
    19da:	f0 91 93 01 	lds	r31, 0x0193	; 0x800193 <timerQ+0x1>
    19de:	30 97       	sbiw	r30, 0x00	; 0
    19e0:	39 f1       	breq	.+78     	; 0x1a30 <__vector_7+0x118>
    19e2:	82 81       	ldd	r24, Z+2	; 0x02
    19e4:	93 81       	ldd	r25, Z+3	; 0x03
    19e6:	a4 81       	ldd	r26, Z+4	; 0x04
    19e8:	b5 81       	ldd	r27, Z+5	; 0x05
    19ea:	8c 19       	sub	r24, r12
    19ec:	9d 09       	sbc	r25, r13
    19ee:	ae 09       	sbc	r26, r14
    19f0:	bf 09       	sbc	r27, r15
    19f2:	18 16       	cp	r1, r24
    19f4:	19 06       	cpc	r1, r25
    19f6:	1a 06       	cpc	r1, r26
    19f8:	1b 06       	cpc	r1, r27
    19fa:	2c f7       	brge	.-54     	; 0x19c6 <__vector_7+0xae>
    19fc:	21 c0       	rjmp	.+66     	; 0x1a40 <__vector_7+0x128>
    19fe:	9c 01       	movw	r18, r24
    1a00:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1a04:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1a08:	84 1b       	sub	r24, r20
    1a0a:	95 0b       	sbc	r25, r21
    1a0c:	01 97       	sbiw	r24, 0x01	; 1
    1a0e:	31 f4       	brne	.+12     	; 0x1a1c <__vector_7+0x104>
    1a10:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1a14:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1a18:	2f 5f       	subi	r18, 0xFF	; 255
    1a1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a1c:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1a20:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1a24:	ef e6       	ldi	r30, 0x6F	; 111
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	80 81       	ld	r24, Z
    1a2a:	82 60       	ori	r24, 0x02	; 2
    1a2c:	80 83       	st	Z, r24
    1a2e:	05 c0       	rjmp	.+10     	; 0x1a3a <__vector_7+0x122>
    1a30:	ef e6       	ldi	r30, 0x6F	; 111
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	80 81       	ld	r24, Z
    1a36:	8d 7f       	andi	r24, 0xFD	; 253
    1a38:	80 83       	st	Z, r24
    1a3a:	0e 94 ca 03 	call	0x794	; 0x794 <schedule>
    1a3e:	0c c0       	rjmp	.+24     	; 0x1a58 <__vector_7+0x140>
    1a40:	82 81       	ldd	r24, Z+2	; 0x02
    1a42:	93 81       	ldd	r25, Z+3	; 0x03
    1a44:	a4 81       	ldd	r26, Z+4	; 0x04
    1a46:	b5 81       	ldd	r27, Z+5	; 0x05
    1a48:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    1a4c:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    1a50:	2a 17       	cp	r18, r26
    1a52:	3b 07       	cpc	r19, r27
    1a54:	69 f7       	brne	.-38     	; 0x1a30 <__vector_7+0x118>
    1a56:	d3 cf       	rjmp	.-90     	; 0x19fe <__vector_7+0xe6>
    1a58:	ff 91       	pop	r31
    1a5a:	ef 91       	pop	r30
    1a5c:	bf 91       	pop	r27
    1a5e:	af 91       	pop	r26
    1a60:	9f 91       	pop	r25
    1a62:	8f 91       	pop	r24
    1a64:	7f 91       	pop	r23
    1a66:	6f 91       	pop	r22
    1a68:	5f 91       	pop	r21
    1a6a:	4f 91       	pop	r20
    1a6c:	3f 91       	pop	r19
    1a6e:	2f 91       	pop	r18
    1a70:	ff 90       	pop	r15
    1a72:	ef 90       	pop	r14
    1a74:	df 90       	pop	r13
    1a76:	cf 90       	pop	r12
    1a78:	0f 90       	pop	r0
    1a7a:	0f be       	out	0x3f, r0	; 63
    1a7c:	0f 90       	pop	r0
    1a7e:	1f 90       	pop	r1
    1a80:	18 95       	reti

00001a82 <async>:
    1a82:	3f 92       	push	r3
    1a84:	4f 92       	push	r4
    1a86:	5f 92       	push	r5
    1a88:	6f 92       	push	r6
    1a8a:	7f 92       	push	r7
    1a8c:	8f 92       	push	r8
    1a8e:	9f 92       	push	r9
    1a90:	af 92       	push	r10
    1a92:	bf 92       	push	r11
    1a94:	cf 92       	push	r12
    1a96:	df 92       	push	r13
    1a98:	ef 92       	push	r14
    1a9a:	ff 92       	push	r15
    1a9c:	0f 93       	push	r16
    1a9e:	1f 93       	push	r17
    1aa0:	cf 93       	push	r28
    1aa2:	df 93       	push	r29
    1aa4:	2b 01       	movw	r4, r22
    1aa6:	3c 01       	movw	r6, r24
    1aa8:	49 01       	movw	r8, r18
    1aaa:	5a 01       	movw	r10, r20
    1aac:	8f b7       	in	r24, 0x3f	; 63
    1aae:	80 78       	andi	r24, 0x80	; 128
    1ab0:	38 2e       	mov	r3, r24
    1ab2:	f8 94       	cli
    1ab4:	82 e8       	ldi	r24, 0x82	; 130
    1ab6:	91 e0       	ldi	r25, 0x01	; 1
    1ab8:	0e 94 23 0c 	call	0x1846	; 0x1846 <dequeue>
    1abc:	ec 01       	movw	r28, r24
    1abe:	1b 87       	std	Y+11, r17	; 0x0b
    1ac0:	0a 87       	std	Y+10, r16	; 0x0a
    1ac2:	fd 86       	std	Y+13, r15	; 0x0d
    1ac4:	ec 86       	std	Y+12, r14	; 0x0c
    1ac6:	df 86       	std	Y+15, r13	; 0x0f
    1ac8:	ce 86       	std	Y+14, r12	; 0x0e
    1aca:	33 20       	and	r3, r3
    1acc:	61 f0       	breq	.+24     	; 0x1ae6 <async+0x64>
    1ace:	e0 91 7c 01 	lds	r30, 0x017C	; 0x80017c <current>
    1ad2:	f0 91 7d 01 	lds	r31, 0x017D	; 0x80017d <current+0x1>
    1ad6:	02 80       	ldd	r0, Z+2	; 0x02
    1ad8:	f3 81       	ldd	r31, Z+3	; 0x03
    1ada:	e0 2d       	mov	r30, r0
    1adc:	82 81       	ldd	r24, Z+2	; 0x02
    1ade:	93 81       	ldd	r25, Z+3	; 0x03
    1ae0:	a4 81       	ldd	r26, Z+4	; 0x04
    1ae2:	b5 81       	ldd	r27, Z+5	; 0x05
    1ae4:	08 c0       	rjmp	.+16     	; 0x1af6 <async+0x74>
    1ae6:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <timestamp>
    1aea:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <timestamp+0x1>
    1aee:	a0 91 90 01 	lds	r26, 0x0190	; 0x800190 <timestamp+0x2>
    1af2:	b0 91 91 01 	lds	r27, 0x0191	; 0x800191 <timestamp+0x3>
    1af6:	48 0e       	add	r4, r24
    1af8:	59 1e       	adc	r5, r25
    1afa:	6a 1e       	adc	r6, r26
    1afc:	7b 1e       	adc	r7, r27
    1afe:	4a 82       	std	Y+2, r4	; 0x02
    1b00:	5b 82       	std	Y+3, r5	; 0x03
    1b02:	6c 82       	std	Y+4, r6	; 0x04
    1b04:	7d 82       	std	Y+5, r7	; 0x05
    1b06:	18 14       	cp	r1, r8
    1b08:	19 04       	cpc	r1, r9
    1b0a:	1a 04       	cpc	r1, r10
    1b0c:	1b 04       	cpc	r1, r11
    1b0e:	44 f0       	brlt	.+16     	; 0x1b20 <async+0x9e>
    1b10:	0f 2e       	mov	r0, r31
    1b12:	88 24       	eor	r8, r8
    1b14:	8a 94       	dec	r8
    1b16:	98 2c       	mov	r9, r8
    1b18:	a8 2c       	mov	r10, r8
    1b1a:	ff e7       	ldi	r31, 0x7F	; 127
    1b1c:	bf 2e       	mov	r11, r31
    1b1e:	f0 2d       	mov	r31, r0
    1b20:	84 0c       	add	r8, r4
    1b22:	95 1c       	adc	r9, r5
    1b24:	a6 1c       	adc	r10, r6
    1b26:	b7 1c       	adc	r11, r7
    1b28:	8e 82       	std	Y+6, r8	; 0x06
    1b2a:	9f 82       	std	Y+7, r9	; 0x07
    1b2c:	a8 86       	std	Y+8, r10	; 0x08
    1b2e:	b9 86       	std	Y+9, r11	; 0x09
    1b30:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <overflows>
    1b34:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <overflows+0x1>
    1b38:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1b3c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1b40:	b0 99       	sbic	0x16, 0	; 22
    1b42:	0e c0       	rjmp	.+28     	; 0x1b60 <async+0xde>
    1b44:	09 2e       	mov	r0, r25
    1b46:	00 0c       	add	r0, r0
    1b48:	aa 0b       	sbc	r26, r26
    1b4a:	bb 0b       	sbc	r27, r27
    1b4c:	dc 01       	movw	r26, r24
    1b4e:	99 27       	eor	r25, r25
    1b50:	88 27       	eor	r24, r24
    1b52:	60 e0       	ldi	r22, 0x00	; 0
    1b54:	70 e0       	ldi	r23, 0x00	; 0
    1b56:	84 2b       	or	r24, r20
    1b58:	95 2b       	or	r25, r21
    1b5a:	a6 2b       	or	r26, r22
    1b5c:	b7 2b       	or	r27, r23
    1b5e:	13 c0       	rjmp	.+38     	; 0x1b86 <async+0x104>
    1b60:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1b64:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1b68:	01 96       	adiw	r24, 0x01	; 1
    1b6a:	09 2e       	mov	r0, r25
    1b6c:	00 0c       	add	r0, r0
    1b6e:	aa 0b       	sbc	r26, r26
    1b70:	bb 0b       	sbc	r27, r27
    1b72:	dc 01       	movw	r26, r24
    1b74:	99 27       	eor	r25, r25
    1b76:	88 27       	eor	r24, r24
    1b78:	a9 01       	movw	r20, r18
    1b7a:	60 e0       	ldi	r22, 0x00	; 0
    1b7c:	70 e0       	ldi	r23, 0x00	; 0
    1b7e:	84 2b       	or	r24, r20
    1b80:	95 2b       	or	r25, r21
    1b82:	a6 2b       	or	r26, r22
    1b84:	b7 2b       	or	r27, r23
    1b86:	48 1a       	sub	r4, r24
    1b88:	59 0a       	sbc	r5, r25
    1b8a:	6a 0a       	sbc	r6, r26
    1b8c:	7b 0a       	sbc	r7, r27
    1b8e:	14 14       	cp	r1, r4
    1b90:	15 04       	cpc	r1, r5
    1b92:	16 04       	cpc	r1, r6
    1b94:	17 04       	cpc	r1, r7
    1b96:	ac f5       	brge	.+106    	; 0x1c02 <async+0x180>
    1b98:	62 e9       	ldi	r22, 0x92	; 146
    1b9a:	71 e0       	ldi	r23, 0x01	; 1
    1b9c:	ce 01       	movw	r24, r28
    1b9e:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <enqueueByBaseline>
    1ba2:	e0 91 92 01 	lds	r30, 0x0192	; 0x800192 <timerQ>
    1ba6:	f0 91 93 01 	lds	r31, 0x0193	; 0x800193 <timerQ+0x1>
    1baa:	30 97       	sbiw	r30, 0x00	; 0
    1bac:	21 f1       	breq	.+72     	; 0x1bf6 <async+0x174>
    1bae:	82 81       	ldd	r24, Z+2	; 0x02
    1bb0:	93 81       	ldd	r25, Z+3	; 0x03
    1bb2:	a4 81       	ldd	r26, Z+4	; 0x04
    1bb4:	b5 81       	ldd	r27, Z+5	; 0x05
    1bb6:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    1bba:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    1bbe:	2a 17       	cp	r18, r26
    1bc0:	3b 07       	cpc	r19, r27
    1bc2:	c9 f4       	brne	.+50     	; 0x1bf6 <async+0x174>
    1bc4:	9c 01       	movw	r18, r24
    1bc6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1bca:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1bce:	84 1b       	sub	r24, r20
    1bd0:	95 0b       	sbc	r25, r21
    1bd2:	01 97       	sbiw	r24, 0x01	; 1
    1bd4:	31 f4       	brne	.+12     	; 0x1be2 <async+0x160>
    1bd6:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1bda:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1bde:	2f 5f       	subi	r18, 0xFF	; 255
    1be0:	3f 4f       	sbci	r19, 0xFF	; 255
    1be2:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1be6:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1bea:	ef e6       	ldi	r30, 0x6F	; 111
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	80 81       	ld	r24, Z
    1bf0:	82 60       	ori	r24, 0x02	; 2
    1bf2:	80 83       	st	Z, r24
    1bf4:	41 c0       	rjmp	.+130    	; 0x1c78 <async+0x1f6>
    1bf6:	ef e6       	ldi	r30, 0x6F	; 111
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	80 81       	ld	r24, Z
    1bfc:	8d 7f       	andi	r24, 0xFD	; 253
    1bfe:	80 83       	st	Z, r24
    1c00:	3b c0       	rjmp	.+118    	; 0x1c78 <async+0x1f6>
    1c02:	64 e9       	ldi	r22, 0x94	; 148
    1c04:	71 e0       	ldi	r23, 0x01	; 1
    1c06:	ce 01       	movw	r24, r28
    1c08:	0e 94 9d 0b 	call	0x173a	; 0x173a <enqueueByDeadline>
    1c0c:	33 20       	and	r3, r3
    1c0e:	b9 f1       	breq	.+110    	; 0x1c7e <async+0x1fc>
    1c10:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <threadPool>
    1c14:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <threadPool+0x1>
    1c18:	00 97       	sbiw	r24, 0x00	; 0
    1c1a:	81 f1       	breq	.+96     	; 0x1c7c <async+0x1fa>
    1c1c:	e0 91 7e 01 	lds	r30, 0x017E	; 0x80017e <activeStack>
    1c20:	f0 91 7f 01 	lds	r31, 0x017F	; 0x80017f <activeStack+0x1>
    1c24:	20 91 94 01 	lds	r18, 0x0194	; 0x800194 <msgQ>
    1c28:	30 91 95 01 	lds	r19, 0x0195	; 0x800195 <msgQ+0x1>
    1c2c:	02 81       	ldd	r16, Z+2	; 0x02
    1c2e:	13 81       	ldd	r17, Z+3	; 0x03
    1c30:	d9 01       	movw	r26, r18
    1c32:	16 96       	adiw	r26, 0x06	; 6
    1c34:	4d 91       	ld	r20, X+
    1c36:	5d 91       	ld	r21, X+
    1c38:	6d 91       	ld	r22, X+
    1c3a:	7c 91       	ld	r23, X
    1c3c:	19 97       	sbiw	r26, 0x09	; 9
    1c3e:	d8 01       	movw	r26, r16
    1c40:	16 96       	adiw	r26, 0x06	; 6
    1c42:	0d 91       	ld	r16, X+
    1c44:	1d 91       	ld	r17, X+
    1c46:	2d 91       	ld	r18, X+
    1c48:	3c 91       	ld	r19, X
    1c4a:	19 97       	sbiw	r26, 0x09	; 9
    1c4c:	40 1b       	sub	r20, r16
    1c4e:	51 0b       	sbc	r21, r17
    1c50:	62 0b       	sbc	r22, r18
    1c52:	73 0b       	sbc	r23, r19
    1c54:	9a f4       	brpl	.+38     	; 0x1c7c <async+0x1fa>
    1c56:	dc 01       	movw	r26, r24
    1c58:	2d 91       	ld	r18, X+
    1c5a:	3c 91       	ld	r19, X
    1c5c:	11 97       	sbiw	r26, 0x01	; 1
    1c5e:	30 93 81 01 	sts	0x0181, r19	; 0x800181 <threadPool+0x1>
    1c62:	20 93 80 01 	sts	0x0180, r18	; 0x800180 <threadPool>
    1c66:	ed 93       	st	X+, r30
    1c68:	fc 93       	st	X, r31
    1c6a:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <activeStack+0x1>
    1c6e:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <activeStack>
    1c72:	0e 94 aa 03 	call	0x754	; 0x754 <dispatch>
    1c76:	02 c0       	rjmp	.+4      	; 0x1c7c <async+0x1fa>
    1c78:	33 20       	and	r3, r3
    1c7a:	09 f0       	breq	.+2      	; 0x1c7e <async+0x1fc>
    1c7c:	78 94       	sei
    1c7e:	ce 01       	movw	r24, r28
    1c80:	df 91       	pop	r29
    1c82:	cf 91       	pop	r28
    1c84:	1f 91       	pop	r17
    1c86:	0f 91       	pop	r16
    1c88:	ff 90       	pop	r15
    1c8a:	ef 90       	pop	r14
    1c8c:	df 90       	pop	r13
    1c8e:	cf 90       	pop	r12
    1c90:	bf 90       	pop	r11
    1c92:	af 90       	pop	r10
    1c94:	9f 90       	pop	r9
    1c96:	8f 90       	pop	r8
    1c98:	7f 90       	pop	r7
    1c9a:	6f 90       	pop	r6
    1c9c:	5f 90       	pop	r5
    1c9e:	4f 90       	pop	r4
    1ca0:	3f 90       	pop	r3
    1ca2:	08 95       	ret

00001ca4 <sync>:
    1ca4:	cf 92       	push	r12
    1ca6:	df 92       	push	r13
    1ca8:	ef 92       	push	r14
    1caa:	ff 92       	push	r15
    1cac:	0f 93       	push	r16
    1cae:	1f 93       	push	r17
    1cb0:	cf 93       	push	r28
    1cb2:	df 93       	push	r29
    1cb4:	ec 01       	movw	r28, r24
    1cb6:	7b 01       	movw	r14, r22
    1cb8:	6a 01       	movw	r12, r20
    1cba:	1f b7       	in	r17, 0x3f	; 63
    1cbc:	10 78       	andi	r17, 0x80	; 128
    1cbe:	f8 94       	cli
    1cc0:	a8 81       	ld	r26, Y
    1cc2:	b9 81       	ldd	r27, Y+1	; 0x01
    1cc4:	10 97       	sbiw	r26, 0x00	; 0
    1cc6:	61 f1       	breq	.+88     	; 0x1d20 <sync+0x7c>
    1cc8:	14 96       	adiw	r26, 0x04	; 4
    1cca:	ed 91       	ld	r30, X+
    1ccc:	fc 91       	ld	r31, X
    1cce:	15 97       	sbiw	r26, 0x05	; 5
    1cd0:	30 97       	sbiw	r30, 0x00	; 0
    1cd2:	41 f0       	breq	.+16     	; 0x1ce4 <sync+0x40>
    1cd4:	a0 81       	ld	r26, Z
    1cd6:	b1 81       	ldd	r27, Z+1	; 0x01
    1cd8:	14 96       	adiw	r26, 0x04	; 4
    1cda:	ed 91       	ld	r30, X+
    1cdc:	fc 91       	ld	r31, X
    1cde:	15 97       	sbiw	r26, 0x05	; 5
    1ce0:	30 97       	sbiw	r30, 0x00	; 0
    1ce2:	c1 f7       	brne	.-16     	; 0x1cd4 <sync+0x30>
    1ce4:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <current>
    1ce8:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <current+0x1>
    1cec:	2a 17       	cp	r18, r26
    1cee:	3b 07       	cpc	r19, r27
    1cf0:	21 f0       	breq	.+8      	; 0x1cfa <sync+0x56>
    1cf2:	11 23       	and	r17, r17
    1cf4:	09 f4       	brne	.+2      	; 0x1cf8 <sync+0x54>
    1cf6:	3d c0       	rjmp	.+122    	; 0x1d72 <sync+0xce>
    1cf8:	07 c0       	rjmp	.+14     	; 0x1d08 <sync+0x64>
    1cfa:	11 23       	and	r17, r17
    1cfc:	09 f4       	brne	.+2      	; 0x1d00 <sync+0x5c>
    1cfe:	3c c0       	rjmp	.+120    	; 0x1d78 <sync+0xd4>
    1d00:	78 94       	sei
    1d02:	8f ef       	ldi	r24, 0xFF	; 255
    1d04:	9f ef       	ldi	r25, 0xFF	; 255
    1d06:	52 c0       	rjmp	.+164    	; 0x1dac <sync+0x108>
    1d08:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d0c:	00 97       	sbiw	r24, 0x00	; 0
    1d0e:	d1 f1       	breq	.+116    	; 0x1d84 <sync+0xe0>
    1d10:	fc 01       	movw	r30, r24
    1d12:	15 82       	std	Z+5, r1	; 0x05
    1d14:	14 82       	std	Z+4, r1	; 0x04
    1d16:	36 c0       	rjmp	.+108    	; 0x1d84 <sync+0xe0>
    1d18:	78 94       	sei
    1d1a:	80 e0       	ldi	r24, 0x00	; 0
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	46 c0       	rjmp	.+140    	; 0x1dac <sync+0x108>
    1d20:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <current>
    1d24:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <current+0x1>
    1d28:	99 83       	std	Y+1, r25	; 0x01
    1d2a:	88 83       	st	Y, r24
    1d2c:	11 23       	and	r17, r17
    1d2e:	29 f0       	breq	.+10     	; 0x1d3a <sync+0x96>
    1d30:	8a 81       	ldd	r24, Y+2	; 0x02
    1d32:	9b 81       	ldd	r25, Y+3	; 0x03
    1d34:	01 97       	sbiw	r24, 0x01	; 1
    1d36:	09 f0       	breq	.+2      	; 0x1d3a <sync+0x96>
    1d38:	78 94       	sei
    1d3a:	b6 01       	movw	r22, r12
    1d3c:	ce 01       	movw	r24, r28
    1d3e:	f7 01       	movw	r30, r14
    1d40:	09 95       	icall
    1d42:	f8 2e       	mov	r15, r24
    1d44:	09 2f       	mov	r16, r25
    1d46:	8f b7       	in	r24, 0x3f	; 63
    1d48:	f8 94       	cli
    1d4a:	19 82       	std	Y+1, r1	; 0x01
    1d4c:	18 82       	st	Y, r1
    1d4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d50:	9b 81       	ldd	r25, Y+3	; 0x03
    1d52:	82 30       	cpi	r24, 0x02	; 2
    1d54:	91 05       	cpc	r25, r1
    1d56:	38 f0       	brcs	.+14     	; 0x1d66 <sync+0xc2>
    1d58:	1b 82       	std	Y+3, r1	; 0x03
    1d5a:	1a 82       	std	Y+2, r1	; 0x02
    1d5c:	fc 01       	movw	r30, r24
    1d5e:	15 82       	std	Z+5, r1	; 0x05
    1d60:	14 82       	std	Z+4, r1	; 0x04
    1d62:	0e 94 aa 03 	call	0x754	; 0x754 <dispatch>
    1d66:	11 23       	and	r17, r17
    1d68:	51 f0       	breq	.+20     	; 0x1d7e <sync+0xda>
    1d6a:	78 94       	sei
    1d6c:	8f 2d       	mov	r24, r15
    1d6e:	90 2f       	mov	r25, r16
    1d70:	1d c0       	rjmp	.+58     	; 0x1dac <sync+0x108>
    1d72:	8f ef       	ldi	r24, 0xFF	; 255
    1d74:	9f ef       	ldi	r25, 0xFF	; 255
    1d76:	1a c0       	rjmp	.+52     	; 0x1dac <sync+0x108>
    1d78:	8f ef       	ldi	r24, 0xFF	; 255
    1d7a:	9f ef       	ldi	r25, 0xFF	; 255
    1d7c:	17 c0       	rjmp	.+46     	; 0x1dac <sync+0x108>
    1d7e:	8f 2d       	mov	r24, r15
    1d80:	90 2f       	mov	r25, r16
    1d82:	14 c0       	rjmp	.+40     	; 0x1dac <sync+0x108>
    1d84:	3b 83       	std	Y+3, r19	; 0x03
    1d86:	2a 83       	std	Y+2, r18	; 0x02
    1d88:	f9 01       	movw	r30, r18
    1d8a:	d5 83       	std	Z+5, r29	; 0x05
    1d8c:	c4 83       	std	Z+4, r28	; 0x04
    1d8e:	cd 01       	movw	r24, r26
    1d90:	0e 94 aa 03 	call	0x754	; 0x754 <dispatch>
    1d94:	e0 91 7c 01 	lds	r30, 0x017C	; 0x80017c <current>
    1d98:	f0 91 7d 01 	lds	r31, 0x017D	; 0x80017d <current+0x1>
    1d9c:	82 81       	ldd	r24, Z+2	; 0x02
    1d9e:	93 81       	ldd	r25, Z+3	; 0x03
    1da0:	89 2b       	or	r24, r25
    1da2:	09 f4       	brne	.+2      	; 0x1da6 <sync+0x102>
    1da4:	b9 cf       	rjmp	.-142    	; 0x1d18 <sync+0x74>
    1da6:	f9 83       	std	Y+1, r31	; 0x01
    1da8:	e8 83       	st	Y, r30
    1daa:	c2 cf       	rjmp	.-124    	; 0x1d30 <sync+0x8c>
    1dac:	df 91       	pop	r29
    1dae:	cf 91       	pop	r28
    1db0:	1f 91       	pop	r17
    1db2:	0f 91       	pop	r16
    1db4:	ff 90       	pop	r15
    1db6:	ef 90       	pop	r14
    1db8:	df 90       	pop	r13
    1dba:	cf 90       	pop	r12
    1dbc:	08 95       	ret

00001dbe <run>:
    1dbe:	00 91 7c 01 	lds	r16, 0x017C	; 0x80017c <current>
    1dc2:	10 91 7d 01 	lds	r17, 0x017D	; 0x80017d <current+0x1>
    1dc6:	84 e9       	ldi	r24, 0x94	; 148
    1dc8:	91 e0       	ldi	r25, 0x01	; 1
    1dca:	0e 94 23 0c 	call	0x1846	; 0x1846 <dequeue>
    1dce:	ec 01       	movw	r28, r24
    1dd0:	d8 01       	movw	r26, r16
    1dd2:	13 96       	adiw	r26, 0x03	; 3
    1dd4:	9c 93       	st	X, r25
    1dd6:	8e 93       	st	-X, r24
    1dd8:	12 97       	sbiw	r26, 0x02	; 2
    1dda:	78 94       	sei
    1ddc:	4e 85       	ldd	r20, Y+14	; 0x0e
    1dde:	5f 85       	ldd	r21, Y+15	; 0x0f
    1de0:	6c 85       	ldd	r22, Y+12	; 0x0c
    1de2:	7d 85       	ldd	r23, Y+13	; 0x0d
    1de4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1de6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1de8:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <sync>
    1dec:	8f b7       	in	r24, 0x3f	; 63
    1dee:	f8 94       	cli
    1df0:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <msgPool>
    1df4:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <msgPool+0x1>
    1df8:	99 83       	std	Y+1, r25	; 0x01
    1dfa:	88 83       	st	Y, r24
    1dfc:	d0 93 83 01 	sts	0x0183, r29	; 0x800183 <msgPool+0x1>
    1e00:	c0 93 82 01 	sts	0x0182, r28	; 0x800182 <msgPool>
    1e04:	e0 91 7e 01 	lds	r30, 0x017E	; 0x80017e <activeStack>
    1e08:	f0 91 7f 01 	lds	r31, 0x017F	; 0x80017f <activeStack+0x1>
    1e0c:	00 81       	ld	r16, Z
    1e0e:	11 81       	ldd	r17, Z+1	; 0x01
    1e10:	e8 01       	movw	r28, r16
    1e12:	2a 81       	ldd	r18, Y+2	; 0x02
    1e14:	3b 81       	ldd	r19, Y+3	; 0x03
    1e16:	a0 91 94 01 	lds	r26, 0x0194	; 0x800194 <msgQ>
    1e1a:	b0 91 95 01 	lds	r27, 0x0195	; 0x800195 <msgQ+0x1>
    1e1e:	10 97       	sbiw	r26, 0x00	; 0
    1e20:	c1 f0       	breq	.+48     	; 0x1e52 <run+0x94>
    1e22:	21 15       	cp	r18, r1
    1e24:	31 05       	cpc	r19, r1
    1e26:	59 f2       	breq	.-106    	; 0x1dbe <run>
    1e28:	16 96       	adiw	r26, 0x06	; 6
    1e2a:	8d 91       	ld	r24, X+
    1e2c:	9d 91       	ld	r25, X+
    1e2e:	0d 90       	ld	r0, X+
    1e30:	bc 91       	ld	r27, X
    1e32:	a0 2d       	mov	r26, r0
    1e34:	e9 01       	movw	r28, r18
    1e36:	4e 81       	ldd	r20, Y+6	; 0x06
    1e38:	5f 81       	ldd	r21, Y+7	; 0x07
    1e3a:	68 85       	ldd	r22, Y+8	; 0x08
    1e3c:	79 85       	ldd	r23, Y+9	; 0x09
    1e3e:	84 1b       	sub	r24, r20
    1e40:	95 0b       	sbc	r25, r21
    1e42:	a6 0b       	sbc	r26, r22
    1e44:	b7 0b       	sbc	r27, r23
    1e46:	18 16       	cp	r1, r24
    1e48:	19 06       	cpc	r1, r25
    1e4a:	1a 06       	cpc	r1, r26
    1e4c:	1b 06       	cpc	r1, r27
    1e4e:	0c f0       	brlt	.+2      	; 0x1e52 <run+0x94>
    1e50:	b6 cf       	rjmp	.-148    	; 0x1dbe <run>
    1e52:	10 93 7f 01 	sts	0x017F, r17	; 0x80017f <activeStack+0x1>
    1e56:	00 93 7e 01 	sts	0x017E, r16	; 0x80017e <activeStack>
    1e5a:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <threadPool>
    1e5e:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <threadPool+0x1>
    1e62:	91 83       	std	Z+1, r25	; 0x01
    1e64:	80 83       	st	Z, r24
    1e66:	f0 93 81 01 	sts	0x0181, r31	; 0x800181 <threadPool+0x1>
    1e6a:	e0 93 80 01 	sts	0x0180, r30	; 0x800180 <threadPool>
    1e6e:	a0 91 7e 01 	lds	r26, 0x017E	; 0x80017e <activeStack>
    1e72:	b0 91 7f 01 	lds	r27, 0x017F	; 0x80017f <activeStack+0x1>
    1e76:	14 96       	adiw	r26, 0x04	; 4
    1e78:	ed 91       	ld	r30, X+
    1e7a:	fc 91       	ld	r31, X
    1e7c:	15 97       	sbiw	r26, 0x05	; 5
    1e7e:	30 97       	sbiw	r30, 0x00	; 0
    1e80:	41 f0       	breq	.+16     	; 0x1e92 <run+0xd4>
    1e82:	a0 81       	ld	r26, Z
    1e84:	b1 81       	ldd	r27, Z+1	; 0x01
    1e86:	14 96       	adiw	r26, 0x04	; 4
    1e88:	ed 91       	ld	r30, X+
    1e8a:	fc 91       	ld	r31, X
    1e8c:	15 97       	sbiw	r26, 0x05	; 5
    1e8e:	30 97       	sbiw	r30, 0x00	; 0
    1e90:	c1 f7       	brne	.-16     	; 0x1e82 <run+0xc4>
    1e92:	cd 01       	movw	r24, r26
    1e94:	0e 94 aa 03 	call	0x754	; 0x754 <dispatch>
    1e98:	92 cf       	rjmp	.-220    	; 0x1dbe <run>

00001e9a <install>:
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    if (i >= 0 && i < N_VECTORS) {
    1e9a:	42 31       	cpi	r20, 0x12	; 18
    1e9c:	b8 f4       	brcc	.+46     	; 0x1ecc <install+0x32>
        char status;
        DISABLE(status);
    1e9e:	2f b7       	in	r18, 0x3f	; 63
    1ea0:	f8 94       	cli
        otable[i] = obj;
    1ea2:	50 e0       	ldi	r21, 0x00	; 0
    1ea4:	44 0f       	add	r20, r20
    1ea6:	55 1f       	adc	r21, r21
    1ea8:	fa 01       	movw	r30, r20
    1eaa:	ea 56       	subi	r30, 0x6A	; 106
    1eac:	fe 4f       	sbci	r31, 0xFE	; 254
    1eae:	91 83       	std	Z+1, r25	; 0x01
    1eb0:	80 83       	st	Z, r24
        mtable[i] = m;
    1eb2:	fa 01       	movw	r30, r20
    1eb4:	e2 5d       	subi	r30, 0xD2	; 210
    1eb6:	fd 4f       	sbci	r31, 0xFD	; 253
    1eb8:	71 83       	std	Z+1, r23	; 0x01
    1eba:	60 83       	st	Z, r22
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    1ebc:	41 e0       	ldi	r20, 0x01	; 1
    1ebe:	50 e0       	ldi	r21, 0x00	; 0
    1ec0:	fc 01       	movw	r30, r24
    1ec2:	53 83       	std	Z+3, r21	; 0x03
    1ec4:	42 83       	std	Z+2, r20	; 0x02
        ENABLE(status);
    1ec6:	22 23       	and	r18, r18
    1ec8:	0c f4       	brge	.+2      	; 0x1ecc <install+0x32>
    1eca:	78 94       	sei
    1ecc:	08 95       	ret

00001ece <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    1ece:	8c 01       	movw	r16, r24
    1ed0:	7b 01       	movw	r14, r22
    1ed2:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    1ed4:	8f b7       	in	r24, 0x3f	; 63
    1ed6:	f8 94       	cli
    initialize();
    1ed8:	0e 94 3f 03 	call	0x67e	; 0x67e <initialize>
    ENABLE(1);
    1edc:	78 94       	sei
    if (m != NULL)
    1ede:	e1 14       	cp	r14, r1
    1ee0:	f1 04       	cpc	r15, r1
    1ee2:	41 f0       	breq	.+16     	; 0x1ef4 <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	a9 01       	movw	r20, r18
    1eea:	60 e0       	ldi	r22, 0x00	; 0
    1eec:	70 e0       	ldi	r23, 0x00	; 0
    1eee:	cb 01       	movw	r24, r22
    1ef0:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <async>
    DISABLE(status);
    1ef4:	8f b7       	in	r24, 0x3f	; 63
    1ef6:	f8 94       	cli
        }
    }
}

static void idle(void) {
    schedule();
    1ef8:	0e 94 ca 03 	call	0x794	; 0x794 <schedule>
    ENABLE(1);
    1efc:	78 94       	sei
    while (1) {
        SLEEP();
    1efe:	81 e0       	ldi	r24, 0x01	; 1
    1f00:	83 bf       	out	0x33, r24	; 51
    1f02:	88 95       	sleep
    1f04:	fd cf       	rjmp	.-6      	; 0x1f00 <tinytimber+0x32>

00001f06 <__divmodsi4>:
    1f06:	05 2e       	mov	r0, r21
    1f08:	97 fb       	bst	r25, 7
    1f0a:	1e f4       	brtc	.+6      	; 0x1f12 <__divmodsi4+0xc>
    1f0c:	00 94       	com	r0
    1f0e:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <__negsi2>
    1f12:	57 fd       	sbrc	r21, 7
    1f14:	07 d0       	rcall	.+14     	; 0x1f24 <__divmodsi4_neg2>
    1f16:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <__udivmodsi4>
    1f1a:	07 fc       	sbrc	r0, 7
    1f1c:	03 d0       	rcall	.+6      	; 0x1f24 <__divmodsi4_neg2>
    1f1e:	4e f4       	brtc	.+18     	; 0x1f32 <__divmodsi4_exit>
    1f20:	0c 94 9a 0f 	jmp	0x1f34	; 0x1f34 <__negsi2>

00001f24 <__divmodsi4_neg2>:
    1f24:	50 95       	com	r21
    1f26:	40 95       	com	r20
    1f28:	30 95       	com	r19
    1f2a:	21 95       	neg	r18
    1f2c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f2e:	4f 4f       	sbci	r20, 0xFF	; 255
    1f30:	5f 4f       	sbci	r21, 0xFF	; 255

00001f32 <__divmodsi4_exit>:
    1f32:	08 95       	ret

00001f34 <__negsi2>:
    1f34:	90 95       	com	r25
    1f36:	80 95       	com	r24
    1f38:	70 95       	com	r23
    1f3a:	61 95       	neg	r22
    1f3c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f3e:	8f 4f       	sbci	r24, 0xFF	; 255
    1f40:	9f 4f       	sbci	r25, 0xFF	; 255
    1f42:	08 95       	ret

00001f44 <__tablejump2__>:
    1f44:	ee 0f       	add	r30, r30
    1f46:	ff 1f       	adc	r31, r31
    1f48:	05 90       	lpm	r0, Z+
    1f4a:	f4 91       	lpm	r31, Z
    1f4c:	e0 2d       	mov	r30, r0
    1f4e:	09 94       	ijmp

00001f50 <__udivmodsi4>:
    1f50:	a1 e2       	ldi	r26, 0x21	; 33
    1f52:	1a 2e       	mov	r1, r26
    1f54:	aa 1b       	sub	r26, r26
    1f56:	bb 1b       	sub	r27, r27
    1f58:	fd 01       	movw	r30, r26
    1f5a:	0d c0       	rjmp	.+26     	; 0x1f76 <__udivmodsi4_ep>

00001f5c <__udivmodsi4_loop>:
    1f5c:	aa 1f       	adc	r26, r26
    1f5e:	bb 1f       	adc	r27, r27
    1f60:	ee 1f       	adc	r30, r30
    1f62:	ff 1f       	adc	r31, r31
    1f64:	a2 17       	cp	r26, r18
    1f66:	b3 07       	cpc	r27, r19
    1f68:	e4 07       	cpc	r30, r20
    1f6a:	f5 07       	cpc	r31, r21
    1f6c:	20 f0       	brcs	.+8      	; 0x1f76 <__udivmodsi4_ep>
    1f6e:	a2 1b       	sub	r26, r18
    1f70:	b3 0b       	sbc	r27, r19
    1f72:	e4 0b       	sbc	r30, r20
    1f74:	f5 0b       	sbc	r31, r21

00001f76 <__udivmodsi4_ep>:
    1f76:	66 1f       	adc	r22, r22
    1f78:	77 1f       	adc	r23, r23
    1f7a:	88 1f       	adc	r24, r24
    1f7c:	99 1f       	adc	r25, r25
    1f7e:	1a 94       	dec	r1
    1f80:	69 f7       	brne	.-38     	; 0x1f5c <__udivmodsi4_loop>
    1f82:	60 95       	com	r22
    1f84:	70 95       	com	r23
    1f86:	80 95       	com	r24
    1f88:	90 95       	com	r25
    1f8a:	9b 01       	movw	r18, r22
    1f8c:	ac 01       	movw	r20, r24
    1f8e:	bd 01       	movw	r22, r26
    1f90:	cf 01       	movw	r24, r30
    1f92:	08 95       	ret

00001f94 <setjmp>:
    1f94:	dc 01       	movw	r26, r24
    1f96:	2d 92       	st	X+, r2
    1f98:	3d 92       	st	X+, r3
    1f9a:	4d 92       	st	X+, r4
    1f9c:	5d 92       	st	X+, r5
    1f9e:	6d 92       	st	X+, r6
    1fa0:	7d 92       	st	X+, r7
    1fa2:	8d 92       	st	X+, r8
    1fa4:	9d 92       	st	X+, r9
    1fa6:	ad 92       	st	X+, r10
    1fa8:	bd 92       	st	X+, r11
    1faa:	cd 92       	st	X+, r12
    1fac:	dd 92       	st	X+, r13
    1fae:	ed 92       	st	X+, r14
    1fb0:	fd 92       	st	X+, r15
    1fb2:	0d 93       	st	X+, r16
    1fb4:	1d 93       	st	X+, r17
    1fb6:	cd 93       	st	X+, r28
    1fb8:	dd 93       	st	X+, r29
    1fba:	ff 91       	pop	r31
    1fbc:	ef 91       	pop	r30
    1fbe:	8d b7       	in	r24, 0x3d	; 61
    1fc0:	8d 93       	st	X+, r24
    1fc2:	8e b7       	in	r24, 0x3e	; 62
    1fc4:	8d 93       	st	X+, r24
    1fc6:	8f b7       	in	r24, 0x3f	; 63
    1fc8:	8d 93       	st	X+, r24
    1fca:	ed 93       	st	X+, r30
    1fcc:	fd 93       	st	X+, r31
    1fce:	88 27       	eor	r24, r24
    1fd0:	99 27       	eor	r25, r25
    1fd2:	09 94       	ijmp

00001fd4 <longjmp>:
    1fd4:	dc 01       	movw	r26, r24
    1fd6:	cb 01       	movw	r24, r22
    1fd8:	81 30       	cpi	r24, 0x01	; 1
    1fda:	91 05       	cpc	r25, r1
    1fdc:	81 1d       	adc	r24, r1
    1fde:	2d 90       	ld	r2, X+
    1fe0:	3d 90       	ld	r3, X+
    1fe2:	4d 90       	ld	r4, X+
    1fe4:	5d 90       	ld	r5, X+
    1fe6:	6d 90       	ld	r6, X+
    1fe8:	7d 90       	ld	r7, X+
    1fea:	8d 90       	ld	r8, X+
    1fec:	9d 90       	ld	r9, X+
    1fee:	ad 90       	ld	r10, X+
    1ff0:	bd 90       	ld	r11, X+
    1ff2:	cd 90       	ld	r12, X+
    1ff4:	dd 90       	ld	r13, X+
    1ff6:	ed 90       	ld	r14, X+
    1ff8:	fd 90       	ld	r15, X+
    1ffa:	0d 91       	ld	r16, X+
    1ffc:	1d 91       	ld	r17, X+
    1ffe:	cd 91       	ld	r28, X+
    2000:	dd 91       	ld	r29, X+
    2002:	ed 91       	ld	r30, X+
    2004:	fd 91       	ld	r31, X+
    2006:	0d 90       	ld	r0, X+
    2008:	f8 94       	cli
    200a:	fe bf       	out	0x3e, r31	; 62
    200c:	0f be       	out	0x3f, r0	; 63
    200e:	ed bf       	out	0x3d, r30	; 61
    2010:	ed 91       	ld	r30, X+
    2012:	fd 91       	ld	r31, X+
    2014:	09 94       	ijmp

00002016 <_exit>:
    2016:	f8 94       	cli

00002018 <__stop_program>:
    2018:	ff cf       	rjmp	.-2      	; 0x2018 <__stop_program>
