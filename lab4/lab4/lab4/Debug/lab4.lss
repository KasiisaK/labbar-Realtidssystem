
lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000084  00800100  000020a6  0000213a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000020a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000035b  00800184  00800184  000021be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000021be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000021f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000250  00000000  00000000  00002230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002c2e  00000000  00000000  00002480  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010a8  00000000  00000000  000050ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015df  00000000  00000000  00006156  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c08  00000000  00000000  00007738  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a3f  00000000  00000000  00008340  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000028a6  00000000  00000000  00008d7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000200  00000000  00000000  0000b625  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 4b 04 	jmp	0x896	; 0x896 <__vector_1>
       8:	0c 94 b7 04 	jmp	0x96e	; 0x96e <__vector_2>
       c:	0c 94 23 05 	jmp	0xa46	; 0xa46 <__vector_3>
      10:	0c 94 8f 05 	jmp	0xb1e	; 0xb1e <__vector_4>
      14:	0c 94 fb 05 	jmp	0xbf6	; 0xbf6 <__vector_5>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 d2 0c 	jmp	0x19a4	; 0x19a4 <__vector_7>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 80 0c 	jmp	0x1900	; 0x1900 <__vector_9>
      28:	0c 94 67 06 	jmp	0xcce	; 0xcce <__vector_10>
      2c:	0c 94 d3 06 	jmp	0xda6	; 0xda6 <__vector_11>
      30:	0c 94 3f 07 	jmp	0xe7e	; 0xe7e <__vector_12>
      34:	0c 94 ab 07 	jmp	0xf56	; 0xf56 <__vector_13>
      38:	0c 94 17 08 	jmp	0x102e	; 0x102e <__vector_14>
      3c:	0c 94 83 08 	jmp	0x1106	; 0x1106 <__vector_15>
      40:	0c 94 ef 08 	jmp	0x11de	; 0x11de <__vector_16>
      44:	0c 94 5b 09 	jmp	0x12b6	; 0x12b6 <__vector_17>
      48:	0c 94 c7 09 	jmp	0x138e	; 0x138e <__vector_18>
      4c:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__vector_19>
      50:	0c 94 9f 0a 	jmp	0x153e	; 0x153e <__vector_20>
      54:	0c 94 0b 0b 	jmp	0x1616	; 0x1616 <__vector_21>
      58:	0c 94 77 0b 	jmp	0x16ee	; 0x16ee <__vector_22>
      5c:	8c 00       	.word	0x008c	; ????
      5e:	6e 00       	.word	0x006e	; ????
      60:	71 00       	.word	0x0071	; ????
      62:	74 00       	.word	0x0074	; ????
      64:	77 00       	.word	0x0077	; ????
      66:	7a 00       	.word	0x007a	; ????
      68:	7d 00       	.word	0x007d	; ????
      6a:	80 00       	.word	0x0080	; ????
      6c:	83 00       	.word	0x0083	; ????
      6e:	86 00       	.word	0x0086	; ????

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	11 e0       	ldi	r17, 0x01	; 1
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	e6 ea       	ldi	r30, 0xA6	; 166
      84:	f0 e2       	ldi	r31, 0x20	; 32
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	a4 38       	cpi	r26, 0x84	; 132
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	24 e0       	ldi	r18, 0x04	; 4
      94:	a4 e8       	ldi	r26, 0x84	; 132
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	af 3d       	cpi	r26, 0xDF	; 223
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 52 03 	call	0x6a4	; 0x6a4 <main>
      a6:	0c 94 51 10 	jmp	0x20a2	; 0x20a2 <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <LCD_init>:
#include "PulseGen.h"
#include "TinyTimber.h"

void LCD_init() {
	// LCD(Contrast Control Register), LCD(Display Configuration)(000): 300 s, LCD(Contrast Control)(1111): 3.35 V
	LCDCCR = (0 << LCDDC0) | (0 << LCDDC1) | (0 << LCDDC2) | (1 << LCDCC0) | (1 << LCDCC1) | (1 << LCDCC2) | (1 << LCDCC3);
      ae:	8f e0       	ldi	r24, 0x0F	; 15
      b0:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__DATA_REGION_ORIGIN__+0x87>
	// LCDCS: asynchronous clock, LCDMUX(11): D=1/4, B=1/3, LCD(Port Mask): 25 segments
	LCDCRB = (1 << LCDCS) | (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM2) | (1 << LCDPM1) | (1 << LCDPM0);
      b4:	87 eb       	ldi	r24, 0xB7	; 183
      b6:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
	// LCD(Clock Divide)(111): (D=8) 32Hz
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);
      ba:	87 e0       	ldi	r24, 0x07	; 7
      bc:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__DATA_REGION_ORIGIN__+0x86>
	// LCD(Control and Status Register A), LCD(Enable): True, LCD(Low Power Waveform): True, (no frame interrupt, no blanking)
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
      c0:	80 ec       	ldi	r24, 0xC0	; 192
      c2:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
      c6:	08 95       	ret

000000c8 <getSegmentForChar>:
int none[] = {0b0000, 0b0000, 0b0000, 0b0000};

// Returns wall of data based on char input ('0' = 48 (char))
int* getSegmentForChar(char ch) {

	switch (ch) {
      c8:	90 e0       	ldi	r25, 0x00	; 0
      ca:	fc 01       	movw	r30, r24
      cc:	f0 97       	sbiw	r30, 0x30	; 48
      ce:	ea 30       	cpi	r30, 0x0A	; 10
      d0:	f1 05       	cpc	r31, r1
      d2:	f8 f4       	brcc	.+62     	; 0x112 <getSegmentForChar+0x4a>
      d4:	e2 5d       	subi	r30, 0xD2	; 210
      d6:	ff 4f       	sbci	r31, 0xFF	; 255
      d8:	0c 94 e8 0f 	jmp	0x1fd0	; 0x1fd0 <__tablejump2__>
		case '0': return zero;
		case '1': return one;
      dc:	80 e4       	ldi	r24, 0x40	; 64
      de:	91 e0       	ldi	r25, 0x01	; 1
      e0:	08 95       	ret
		case '2': return two;
      e2:	88 e3       	ldi	r24, 0x38	; 56
      e4:	91 e0       	ldi	r25, 0x01	; 1
      e6:	08 95       	ret
		case '3': return three;
      e8:	80 e3       	ldi	r24, 0x30	; 48
      ea:	91 e0       	ldi	r25, 0x01	; 1
      ec:	08 95       	ret
		case '4': return four;
      ee:	88 e2       	ldi	r24, 0x28	; 40
      f0:	91 e0       	ldi	r25, 0x01	; 1
      f2:	08 95       	ret
		case '5': return five;
      f4:	80 e2       	ldi	r24, 0x20	; 32
      f6:	91 e0       	ldi	r25, 0x01	; 1
      f8:	08 95       	ret
		case '6': return six;
      fa:	88 e1       	ldi	r24, 0x18	; 24
      fc:	91 e0       	ldi	r25, 0x01	; 1
      fe:	08 95       	ret
		case '7': return seven;
     100:	80 e1       	ldi	r24, 0x10	; 16
     102:	91 e0       	ldi	r25, 0x01	; 1
     104:	08 95       	ret
		case '8': return eight;
     106:	88 e0       	ldi	r24, 0x08	; 8
     108:	91 e0       	ldi	r25, 0x01	; 1
     10a:	08 95       	ret
		case '9': return nine;
     10c:	80 e0       	ldi	r24, 0x00	; 0
     10e:	91 e0       	ldi	r25, 0x01	; 1
     110:	08 95       	ret
		default:  return none;
     112:	84 e8       	ldi	r24, 0x84	; 132
     114:	91 e0       	ldi	r25, 0x01	; 1
     116:	08 95       	ret

// Returns wall of data based on char input ('0' = 48 (char))
int* getSegmentForChar(char ch) {

	switch (ch) {
		case '0': return zero;
     118:	88 e4       	ldi	r24, 0x48	; 72
     11a:	91 e0       	ldi	r25, 0x01	; 1
		case '7': return seven;
		case '8': return eight;
		case '9': return nine;
		default:  return none;
	}
}
     11c:	08 95       	ret

0000011e <writeChar>:

// Write a char ch at position pos
void writeChar(char ch, uint8_t pos) {
     11e:	cf 93       	push	r28
	// Check if outside range
	if (pos > 4 || pos < 0) return;	
     120:	65 30       	cpi	r22, 0x05	; 5
     122:	08 f0       	brcs	.+2      	; 0x126 <writeChar+0x8>
     124:	e4 c0       	rjmp	.+456    	; 0x2ee <writeChar+0x1d0>
     126:	c6 2f       	mov	r28, r22

	// Get correct char data
	int* segment = getSegmentForChar(ch);
     128:	0e 94 64 00 	call	0xc8	; 0xc8 <getSegmentForChar>
     12c:	fc 01       	movw	r30, r24
	
	// Chose position
	switch (pos) {
     12e:	c2 30       	cpi	r28, 0x02	; 2
     130:	09 f4       	brne	.+2      	; 0x134 <writeChar+0x16>
     132:	67 c0       	rjmp	.+206    	; 0x202 <writeChar+0xe4>
     134:	28 f4       	brcc	.+10     	; 0x140 <writeChar+0x22>
     136:	cc 23       	and	r28, r28
     138:	51 f0       	breq	.+20     	; 0x14e <writeChar+0x30>
     13a:	c1 30       	cpi	r28, 0x01	; 1
     13c:	29 f1       	breq	.+74     	; 0x188 <writeChar+0x6a>
     13e:	d7 c0       	rjmp	.+430    	; 0x2ee <writeChar+0x1d0>
     140:	c3 30       	cpi	r28, 0x03	; 3
     142:	09 f4       	brne	.+2      	; 0x146 <writeChar+0x28>
     144:	7b c0       	rjmp	.+246    	; 0x23c <writeChar+0x11e>
     146:	c4 30       	cpi	r28, 0x04	; 4
     148:	09 f4       	brne	.+2      	; 0x14c <writeChar+0x2e>
     14a:	b5 c0       	rjmp	.+362    	; 0x2b6 <writeChar+0x198>
     14c:	d0 c0       	rjmp	.+416    	; 0x2ee <writeChar+0x1d0>
		case 0:
			// Segment start at 0, 5, 10, 15, higher 4 bits.
			// (LCDDR0 & 0xF0) clears the segment before writing 
			LCDDR0 = (LCDDR0 & 0xF0) | segment[0];
     14e:	ac ee       	ldi	r26, 0xEC	; 236
     150:	b0 e0       	ldi	r27, 0x00	; 0
     152:	8c 91       	ld	r24, X
     154:	80 7f       	andi	r24, 0xF0	; 240
     156:	90 81       	ld	r25, Z
     158:	89 2b       	or	r24, r25
     15a:	8c 93       	st	X, r24
			LCDDR5 = (LCDDR5 & 0xF0) | segment[1];
     15c:	a1 ef       	ldi	r26, 0xF1	; 241
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	8c 91       	ld	r24, X
     162:	80 7f       	andi	r24, 0xF0	; 240
     164:	92 81       	ldd	r25, Z+2	; 0x02
     166:	89 2b       	or	r24, r25
     168:	8c 93       	st	X, r24
			LCDDR10 = (LCDDR10 & 0xF0) | segment[2];
     16a:	a6 ef       	ldi	r26, 0xF6	; 246
     16c:	b0 e0       	ldi	r27, 0x00	; 0
     16e:	8c 91       	ld	r24, X
     170:	80 7f       	andi	r24, 0xF0	; 240
     172:	94 81       	ldd	r25, Z+4	; 0x04
     174:	89 2b       	or	r24, r25
     176:	8c 93       	st	X, r24
			LCDDR15 = (LCDDR15 & 0xF0) | segment[3];
     178:	ab ef       	ldi	r26, 0xFB	; 251
     17a:	b0 e0       	ldi	r27, 0x00	; 0
     17c:	8c 91       	ld	r24, X
     17e:	80 7f       	andi	r24, 0xF0	; 240
     180:	96 81       	ldd	r25, Z+6	; 0x06
     182:	89 2b       	or	r24, r25
     184:	8c 93       	st	X, r24
			break;
     186:	b3 c0       	rjmp	.+358    	; 0x2ee <writeChar+0x1d0>
		case 1:
			// Same segment just lower 4 bits
			LCDDR0 = (LCDDR0 & 0x0F) | (segment[0] << 4);
     188:	ac ee       	ldi	r26, 0xEC	; 236
     18a:	b0 e0       	ldi	r27, 0x00	; 0
     18c:	2c 91       	ld	r18, X
     18e:	80 81       	ld	r24, Z
     190:	91 81       	ldd	r25, Z+1	; 0x01
     192:	82 95       	swap	r24
     194:	92 95       	swap	r25
     196:	90 7f       	andi	r25, 0xF0	; 240
     198:	98 27       	eor	r25, r24
     19a:	80 7f       	andi	r24, 0xF0	; 240
     19c:	98 27       	eor	r25, r24
     19e:	92 2f       	mov	r25, r18
     1a0:	9f 70       	andi	r25, 0x0F	; 15
     1a2:	89 2b       	or	r24, r25
     1a4:	8c 93       	st	X, r24
			LCDDR5 = (LCDDR5 & 0x0F) | (segment[1] << 4);
     1a6:	a1 ef       	ldi	r26, 0xF1	; 241
     1a8:	b0 e0       	ldi	r27, 0x00	; 0
     1aa:	2c 91       	ld	r18, X
     1ac:	82 81       	ldd	r24, Z+2	; 0x02
     1ae:	93 81       	ldd	r25, Z+3	; 0x03
     1b0:	82 95       	swap	r24
     1b2:	92 95       	swap	r25
     1b4:	90 7f       	andi	r25, 0xF0	; 240
     1b6:	98 27       	eor	r25, r24
     1b8:	80 7f       	andi	r24, 0xF0	; 240
     1ba:	98 27       	eor	r25, r24
     1bc:	92 2f       	mov	r25, r18
     1be:	9f 70       	andi	r25, 0x0F	; 15
     1c0:	89 2b       	or	r24, r25
     1c2:	8c 93       	st	X, r24
			LCDDR10 = (LCDDR10 & 0x0F) | (segment[2] << 4);
     1c4:	a6 ef       	ldi	r26, 0xF6	; 246
     1c6:	b0 e0       	ldi	r27, 0x00	; 0
     1c8:	2c 91       	ld	r18, X
     1ca:	84 81       	ldd	r24, Z+4	; 0x04
     1cc:	95 81       	ldd	r25, Z+5	; 0x05
     1ce:	82 95       	swap	r24
     1d0:	92 95       	swap	r25
     1d2:	90 7f       	andi	r25, 0xF0	; 240
     1d4:	98 27       	eor	r25, r24
     1d6:	80 7f       	andi	r24, 0xF0	; 240
     1d8:	98 27       	eor	r25, r24
     1da:	92 2f       	mov	r25, r18
     1dc:	9f 70       	andi	r25, 0x0F	; 15
     1de:	89 2b       	or	r24, r25
     1e0:	8c 93       	st	X, r24
			LCDDR15 = (LCDDR15 & 0x0F) | (segment[3] << 4);
     1e2:	ab ef       	ldi	r26, 0xFB	; 251
     1e4:	b0 e0       	ldi	r27, 0x00	; 0
     1e6:	2c 91       	ld	r18, X
     1e8:	86 81       	ldd	r24, Z+6	; 0x06
     1ea:	97 81       	ldd	r25, Z+7	; 0x07
     1ec:	82 95       	swap	r24
     1ee:	92 95       	swap	r25
     1f0:	90 7f       	andi	r25, 0xF0	; 240
     1f2:	98 27       	eor	r25, r24
     1f4:	80 7f       	andi	r24, 0xF0	; 240
     1f6:	98 27       	eor	r25, r24
     1f8:	92 2f       	mov	r25, r18
     1fa:	9f 70       	andi	r25, 0x0F	; 15
     1fc:	89 2b       	or	r24, r25
     1fe:	8c 93       	st	X, r24
			break;
     200:	76 c0       	rjmp	.+236    	; 0x2ee <writeChar+0x1d0>
		case 2:
			LCDDR1 = (LCDDR1 & 0xF0) | segment[0];
     202:	ad ee       	ldi	r26, 0xED	; 237
     204:	b0 e0       	ldi	r27, 0x00	; 0
     206:	8c 91       	ld	r24, X
     208:	80 7f       	andi	r24, 0xF0	; 240
     20a:	90 81       	ld	r25, Z
     20c:	89 2b       	or	r24, r25
     20e:	8c 93       	st	X, r24
			LCDDR6 = (LCDDR6 & 0xF0) | segment[1];
     210:	a2 ef       	ldi	r26, 0xF2	; 242
     212:	b0 e0       	ldi	r27, 0x00	; 0
     214:	8c 91       	ld	r24, X
     216:	80 7f       	andi	r24, 0xF0	; 240
     218:	92 81       	ldd	r25, Z+2	; 0x02
     21a:	89 2b       	or	r24, r25
     21c:	8c 93       	st	X, r24
			LCDDR11 = (LCDDR11 & 0xF0) | segment[2];
     21e:	a7 ef       	ldi	r26, 0xF7	; 247
     220:	b0 e0       	ldi	r27, 0x00	; 0
     222:	8c 91       	ld	r24, X
     224:	80 7f       	andi	r24, 0xF0	; 240
     226:	94 81       	ldd	r25, Z+4	; 0x04
     228:	89 2b       	or	r24, r25
     22a:	8c 93       	st	X, r24
			LCDDR16 = (LCDDR16 & 0xF0) | segment[3];
     22c:	ac ef       	ldi	r26, 0xFC	; 252
     22e:	b0 e0       	ldi	r27, 0x00	; 0
     230:	8c 91       	ld	r24, X
     232:	80 7f       	andi	r24, 0xF0	; 240
     234:	96 81       	ldd	r25, Z+6	; 0x06
     236:	89 2b       	or	r24, r25
     238:	8c 93       	st	X, r24
			break;
     23a:	59 c0       	rjmp	.+178    	; 0x2ee <writeChar+0x1d0>
		case 3:
			LCDDR1 = (LCDDR1 & 0x0F) | (segment[0] << 4);
     23c:	ad ee       	ldi	r26, 0xED	; 237
     23e:	b0 e0       	ldi	r27, 0x00	; 0
     240:	2c 91       	ld	r18, X
     242:	80 81       	ld	r24, Z
     244:	91 81       	ldd	r25, Z+1	; 0x01
     246:	82 95       	swap	r24
     248:	92 95       	swap	r25
     24a:	90 7f       	andi	r25, 0xF0	; 240
     24c:	98 27       	eor	r25, r24
     24e:	80 7f       	andi	r24, 0xF0	; 240
     250:	98 27       	eor	r25, r24
     252:	92 2f       	mov	r25, r18
     254:	9f 70       	andi	r25, 0x0F	; 15
     256:	89 2b       	or	r24, r25
     258:	8c 93       	st	X, r24
			LCDDR6 = (LCDDR6 & 0x0F) | (segment[1] << 4);
     25a:	a2 ef       	ldi	r26, 0xF2	; 242
     25c:	b0 e0       	ldi	r27, 0x00	; 0
     25e:	2c 91       	ld	r18, X
     260:	82 81       	ldd	r24, Z+2	; 0x02
     262:	93 81       	ldd	r25, Z+3	; 0x03
     264:	82 95       	swap	r24
     266:	92 95       	swap	r25
     268:	90 7f       	andi	r25, 0xF0	; 240
     26a:	98 27       	eor	r25, r24
     26c:	80 7f       	andi	r24, 0xF0	; 240
     26e:	98 27       	eor	r25, r24
     270:	92 2f       	mov	r25, r18
     272:	9f 70       	andi	r25, 0x0F	; 15
     274:	89 2b       	or	r24, r25
     276:	8c 93       	st	X, r24
			LCDDR11 = (LCDDR11 & 0x0F) | (segment[2] << 4);
     278:	a7 ef       	ldi	r26, 0xF7	; 247
     27a:	b0 e0       	ldi	r27, 0x00	; 0
     27c:	2c 91       	ld	r18, X
     27e:	84 81       	ldd	r24, Z+4	; 0x04
     280:	95 81       	ldd	r25, Z+5	; 0x05
     282:	82 95       	swap	r24
     284:	92 95       	swap	r25
     286:	90 7f       	andi	r25, 0xF0	; 240
     288:	98 27       	eor	r25, r24
     28a:	80 7f       	andi	r24, 0xF0	; 240
     28c:	98 27       	eor	r25, r24
     28e:	92 2f       	mov	r25, r18
     290:	9f 70       	andi	r25, 0x0F	; 15
     292:	89 2b       	or	r24, r25
     294:	8c 93       	st	X, r24
			LCDDR16 = (LCDDR16 & 0x0F) | (segment[3] << 4);
     296:	ac ef       	ldi	r26, 0xFC	; 252
     298:	b0 e0       	ldi	r27, 0x00	; 0
     29a:	2c 91       	ld	r18, X
     29c:	86 81       	ldd	r24, Z+6	; 0x06
     29e:	97 81       	ldd	r25, Z+7	; 0x07
     2a0:	82 95       	swap	r24
     2a2:	92 95       	swap	r25
     2a4:	90 7f       	andi	r25, 0xF0	; 240
     2a6:	98 27       	eor	r25, r24
     2a8:	80 7f       	andi	r24, 0xF0	; 240
     2aa:	98 27       	eor	r25, r24
     2ac:	92 2f       	mov	r25, r18
     2ae:	9f 70       	andi	r25, 0x0F	; 15
     2b0:	89 2b       	or	r24, r25
     2b2:	8c 93       	st	X, r24
			break;
     2b4:	1c c0       	rjmp	.+56     	; 0x2ee <writeChar+0x1d0>
		case 4:
			LCDDR2 = (LCDDR2 & 0xF0) | segment[0];
     2b6:	ae ee       	ldi	r26, 0xEE	; 238
     2b8:	b0 e0       	ldi	r27, 0x00	; 0
     2ba:	8c 91       	ld	r24, X
     2bc:	80 7f       	andi	r24, 0xF0	; 240
     2be:	90 81       	ld	r25, Z
     2c0:	89 2b       	or	r24, r25
     2c2:	8c 93       	st	X, r24
			LCDDR7 = (LCDDR7 & 0xF0) | segment[1];
     2c4:	a3 ef       	ldi	r26, 0xF3	; 243
     2c6:	b0 e0       	ldi	r27, 0x00	; 0
     2c8:	8c 91       	ld	r24, X
     2ca:	80 7f       	andi	r24, 0xF0	; 240
     2cc:	92 81       	ldd	r25, Z+2	; 0x02
     2ce:	89 2b       	or	r24, r25
     2d0:	8c 93       	st	X, r24
			LCDDR12 = (LCDDR12 & 0xF0) | segment[2];
     2d2:	a8 ef       	ldi	r26, 0xF8	; 248
     2d4:	b0 e0       	ldi	r27, 0x00	; 0
     2d6:	8c 91       	ld	r24, X
     2d8:	80 7f       	andi	r24, 0xF0	; 240
     2da:	94 81       	ldd	r25, Z+4	; 0x04
     2dc:	89 2b       	or	r24, r25
     2de:	8c 93       	st	X, r24
			LCDDR17 = (LCDDR17 & 0xF0) | segment[3];
     2e0:	ad ef       	ldi	r26, 0xFD	; 253
     2e2:	b0 e0       	ldi	r27, 0x00	; 0
     2e4:	8c 91       	ld	r24, X
     2e6:	80 7f       	andi	r24, 0xF0	; 240
     2e8:	96 81       	ldd	r25, Z+6	; 0x06
     2ea:	89 2b       	or	r24, r25
     2ec:	8c 93       	st	X, r24
			break;
	}
}
     2ee:	cf 91       	pop	r28
     2f0:	08 95       	ret

000002f2 <printAt>:

void printAt(long num, int pos) {
     2f2:	8f 92       	push	r8
     2f4:	9f 92       	push	r9
     2f6:	af 92       	push	r10
     2f8:	bf 92       	push	r11
     2fa:	cf 92       	push	r12
     2fc:	df 92       	push	r13
     2fe:	ef 92       	push	r14
     300:	ff 92       	push	r15
     302:	cf 93       	push	r28
     304:	df 93       	push	r29
     306:	4b 01       	movw	r8, r22
     308:	5c 01       	movw	r10, r24
     30a:	ea 01       	movw	r28, r20
	writeChar((num % 100) / 10 + '0', pos);
     30c:	24 e6       	ldi	r18, 0x64	; 100
     30e:	30 e0       	ldi	r19, 0x00	; 0
     310:	40 e0       	ldi	r20, 0x00	; 0
     312:	50 e0       	ldi	r21, 0x00	; 0
     314:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <__divmodsi4>
     318:	0f 2e       	mov	r0, r31
     31a:	fa e0       	ldi	r31, 0x0A	; 10
     31c:	cf 2e       	mov	r12, r31
     31e:	d1 2c       	mov	r13, r1
     320:	e1 2c       	mov	r14, r1
     322:	f1 2c       	mov	r15, r1
     324:	f0 2d       	mov	r31, r0
     326:	a7 01       	movw	r20, r14
     328:	96 01       	movw	r18, r12
     32a:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <__divmodsi4>
     32e:	6c 2f       	mov	r22, r28
     330:	80 e3       	ldi	r24, 0x30	; 48
     332:	82 0f       	add	r24, r18
     334:	0e 94 8f 00 	call	0x11e	; 0x11e <writeChar>
	pos++;
	writeChar(num % 10 + '0', pos);
     338:	21 96       	adiw	r28, 0x01	; 1
     33a:	c5 01       	movw	r24, r10
     33c:	b4 01       	movw	r22, r8
     33e:	a7 01       	movw	r20, r14
     340:	96 01       	movw	r18, r12
     342:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <__divmodsi4>
     346:	86 2f       	mov	r24, r22
     348:	6c 2f       	mov	r22, r28
     34a:	80 5d       	subi	r24, 0xD0	; 208
     34c:	0e 94 8f 00 	call	0x11e	; 0x11e <writeChar>
}
     350:	df 91       	pop	r29
     352:	cf 91       	pop	r28
     354:	ff 90       	pop	r15
     356:	ef 90       	pop	r14
     358:	df 90       	pop	r13
     35a:	cf 90       	pop	r12
     35c:	bf 90       	pop	r11
     35e:	af 90       	pop	r10
     360:	9f 90       	pop	r9
     362:	8f 90       	pop	r8
     364:	08 95       	ret

00000366 <switchFocus>:

void switchFocus(GUI *self, int newActive) {
     366:	cf 92       	push	r12
     368:	df 92       	push	r13
     36a:	ef 92       	push	r14
     36c:	ff 92       	push	r15
     36e:	0f 93       	push	r16
     370:	1f 93       	push	r17
    self->activeGen = newActive;
     372:	fc 01       	movw	r30, r24
     374:	71 87       	std	Z+9, r23	; 0x09
     376:	60 87       	std	Z+8, r22	; 0x08
	//SYNC(self, toggle, 0);
    ASYNC(self, updateDisplay, 0);
     378:	c1 2c       	mov	r12, r1
     37a:	d1 2c       	mov	r13, r1
     37c:	0f 2e       	mov	r0, r31
     37e:	fb e7       	ldi	r31, 0x7B	; 123
     380:	ef 2e       	mov	r14, r31
     382:	f2 e0       	ldi	r31, 0x02	; 2
     384:	ff 2e       	mov	r15, r31
     386:	f0 2d       	mov	r31, r0
     388:	8c 01       	movw	r16, r24
     38a:	20 e0       	ldi	r18, 0x00	; 0
     38c:	30 e0       	ldi	r19, 0x00	; 0
     38e:	a9 01       	movw	r20, r18
     390:	60 e0       	ldi	r22, 0x00	; 0
     392:	70 e0       	ldi	r23, 0x00	; 0
     394:	cb 01       	movw	r24, r22
     396:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <async>
}
     39a:	1f 91       	pop	r17
     39c:	0f 91       	pop	r16
     39e:	ff 90       	pop	r15
     3a0:	ef 90       	pop	r14
     3a2:	df 90       	pop	r13
     3a4:	cf 90       	pop	r12
     3a6:	08 95       	ret

000003a8 <adjustFrequency>:

void adjustFrequency(GUI *self, int delta) {
     3a8:	cf 92       	push	r12
     3aa:	df 92       	push	r13
     3ac:	ef 92       	push	r14
     3ae:	ff 92       	push	r15
     3b0:	0f 93       	push	r16
     3b2:	1f 93       	push	r17
     3b4:	cf 93       	push	r28
     3b6:	df 93       	push	r29
     3b8:	8c 01       	movw	r16, r24
     3ba:	eb 01       	movw	r28, r22
	// Get right target gen
    PulseGen *target = self->activeGen ? self->gen2 : self->gen1;
     3bc:	fc 01       	movw	r30, r24
     3be:	80 85       	ldd	r24, Z+8	; 0x08
     3c0:	91 85       	ldd	r25, Z+9	; 0x09
     3c2:	89 2b       	or	r24, r25
     3c4:	19 f0       	breq	.+6      	; 0x3cc <adjustFrequency+0x24>
     3c6:	e6 80       	ldd	r14, Z+6	; 0x06
     3c8:	f7 80       	ldd	r15, Z+7	; 0x07
     3ca:	03 c0       	rjmp	.+6      	; 0x3d2 <adjustFrequency+0x2a>
     3cc:	f8 01       	movw	r30, r16
     3ce:	e4 80       	ldd	r14, Z+4	; 0x04
     3d0:	f5 80       	ldd	r15, Z+5	; 0x05
    int newFreq = SYNC(target, getFrequency, 0) + delta;
     3d2:	40 e0       	ldi	r20, 0x00	; 0
     3d4:	50 e0       	ldi	r21, 0x00	; 0
     3d6:	61 e8       	ldi	r22, 0x81	; 129
     3d8:	73 e0       	ldi	r23, 0x03	; 3
     3da:	c7 01       	movw	r24, r14
     3dc:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <sync>
     3e0:	ac 01       	movw	r20, r24
     3e2:	4c 0f       	add	r20, r28
     3e4:	5d 1f       	adc	r21, r29
    if (newFreq < 0) newFreq = 0;
	// Update everything
    SYNC(target, setFrequency, newFreq);
     3e6:	55 23       	and	r21, r21
     3e8:	14 f4       	brge	.+4      	; 0x3ee <adjustFrequency+0x46>
     3ea:	40 e0       	ldi	r20, 0x00	; 0
     3ec:	50 e0       	ldi	r21, 0x00	; 0
     3ee:	61 e7       	ldi	r22, 0x71	; 113
     3f0:	73 e0       	ldi	r23, 0x03	; 3
     3f2:	c7 01       	movw	r24, r14
     3f4:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <sync>
    ASYNC(self, updateDisplay, 0);
     3f8:	c1 2c       	mov	r12, r1
     3fa:	d1 2c       	mov	r13, r1
     3fc:	0f 2e       	mov	r0, r31
     3fe:	fb e7       	ldi	r31, 0x7B	; 123
     400:	ef 2e       	mov	r14, r31
     402:	f2 e0       	ldi	r31, 0x02	; 2
     404:	ff 2e       	mov	r15, r31
     406:	f0 2d       	mov	r31, r0
     408:	20 e0       	ldi	r18, 0x00	; 0
     40a:	30 e0       	ldi	r19, 0x00	; 0
     40c:	a9 01       	movw	r20, r18
     40e:	60 e0       	ldi	r22, 0x00	; 0
     410:	70 e0       	ldi	r23, 0x00	; 0
     412:	cb 01       	movw	r24, r22
     414:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <async>
}
     418:	df 91       	pop	r29
     41a:	cf 91       	pop	r28
     41c:	1f 91       	pop	r17
     41e:	0f 91       	pop	r16
     420:	ff 90       	pop	r15
     422:	ef 90       	pop	r14
     424:	df 90       	pop	r13
     426:	cf 90       	pop	r12
     428:	08 95       	ret

0000042a <saveRestore>:

void saveRestore(GUI *self) {
     42a:	cf 92       	push	r12
     42c:	df 92       	push	r13
     42e:	ef 92       	push	r14
     430:	ff 92       	push	r15
     432:	0f 93       	push	r16
     434:	1f 93       	push	r17
     436:	cf 93       	push	r28
     438:	df 93       	push	r29
     43a:	ec 01       	movw	r28, r24
    PulseGen *target = self->activeGen ? self->gen2 : self->gen1;
     43c:	88 85       	ldd	r24, Y+8	; 0x08
     43e:	99 85       	ldd	r25, Y+9	; 0x09
     440:	89 2b       	or	r24, r25
     442:	19 f0       	breq	.+6      	; 0x44a <saveRestore+0x20>
     444:	0e 81       	ldd	r16, Y+6	; 0x06
     446:	1f 81       	ldd	r17, Y+7	; 0x07
     448:	02 c0       	rjmp	.+4      	; 0x44e <saveRestore+0x24>
     44a:	0c 81       	ldd	r16, Y+4	; 0x04
     44c:	1d 81       	ldd	r17, Y+5	; 0x05
    if (target->frequency == 0) {
     44e:	f8 01       	movw	r30, r16
     450:	80 85       	ldd	r24, Z+8	; 0x08
     452:	91 85       	ldd	r25, Z+9	; 0x09
     454:	89 2b       	or	r24, r25
     456:	89 f4       	brne	.+34     	; 0x47a <saveRestore+0x50>
        ASYNC(target, restore, 0);
     458:	c1 2c       	mov	r12, r1
     45a:	d1 2c       	mov	r13, r1
     45c:	0f 2e       	mov	r0, r31
     45e:	fb e7       	ldi	r31, 0x7B	; 123
     460:	ef 2e       	mov	r14, r31
     462:	f3 e0       	ldi	r31, 0x03	; 3
     464:	ff 2e       	mov	r15, r31
     466:	f0 2d       	mov	r31, r0
     468:	20 e0       	ldi	r18, 0x00	; 0
     46a:	30 e0       	ldi	r19, 0x00	; 0
     46c:	a9 01       	movw	r20, r18
     46e:	60 e0       	ldi	r22, 0x00	; 0
     470:	70 e0       	ldi	r23, 0x00	; 0
     472:	cb 01       	movw	r24, r22
     474:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <async>
     478:	0e c0       	rjmp	.+28     	; 0x496 <saveRestore+0x6c>
    } else {
        SYNC(target, save, 0);
     47a:	40 e0       	ldi	r20, 0x00	; 0
     47c:	50 e0       	ldi	r21, 0x00	; 0
     47e:	65 e7       	ldi	r22, 0x75	; 117
     480:	73 e0       	ldi	r23, 0x03	; 3
     482:	c8 01       	movw	r24, r16
     484:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <sync>
        SYNC(target, setFrequency, 0);
     488:	40 e0       	ldi	r20, 0x00	; 0
     48a:	50 e0       	ldi	r21, 0x00	; 0
     48c:	61 e7       	ldi	r22, 0x71	; 113
     48e:	73 e0       	ldi	r23, 0x03	; 3
     490:	c8 01       	movw	r24, r16
     492:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <sync>
    }
    ASYNC(self, updateDisplay, 0);
     496:	c1 2c       	mov	r12, r1
     498:	d1 2c       	mov	r13, r1
     49a:	0f 2e       	mov	r0, r31
     49c:	fb e7       	ldi	r31, 0x7B	; 123
     49e:	ef 2e       	mov	r14, r31
     4a0:	f2 e0       	ldi	r31, 0x02	; 2
     4a2:	ff 2e       	mov	r15, r31
     4a4:	f0 2d       	mov	r31, r0
     4a6:	8e 01       	movw	r16, r28
     4a8:	20 e0       	ldi	r18, 0x00	; 0
     4aa:	30 e0       	ldi	r19, 0x00	; 0
     4ac:	a9 01       	movw	r20, r18
     4ae:	60 e0       	ldi	r22, 0x00	; 0
     4b0:	70 e0       	ldi	r23, 0x00	; 0
     4b2:	cb 01       	movw	r24, r22
     4b4:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <async>
}
     4b8:	df 91       	pop	r29
     4ba:	cf 91       	pop	r28
     4bc:	1f 91       	pop	r17
     4be:	0f 91       	pop	r16
     4c0:	ff 90       	pop	r15
     4c2:	ef 90       	pop	r14
     4c4:	df 90       	pop	r13
     4c6:	cf 90       	pop	r12
     4c8:	08 95       	ret

000004ca <updateOneOrTwo>:
    printAt(SYNC(self->gen1, getFrequency(self->gen1), 0), 0); //gen1 hz at pos 0-1
    printAt(SYNC(self->gen2, getFrequency(self->gen2), 0), 3); //gen2 hz at pos 3-4	
}

void updateOneOrTwo(GUI *self) {
	LCDDR0 &= ~(0b01000100);
     4ca:	ec ee       	ldi	r30, 0xEC	; 236
     4cc:	f0 e0       	ldi	r31, 0x00	; 0
     4ce:	20 81       	ld	r18, Z
     4d0:	2b 7b       	andi	r18, 0xBB	; 187
     4d2:	20 83       	st	Z, r18
	if (self->activeGen) {		
     4d4:	fc 01       	movw	r30, r24
     4d6:	80 85       	ldd	r24, Z+8	; 0x08
     4d8:	91 85       	ldd	r25, Z+9	; 0x09
     4da:	89 2b       	or	r24, r25
     4dc:	31 f0       	breq	.+12     	; 0x4ea <updateOneOrTwo+0x20>
		LCDDR0 |= 0b01000000;
     4de:	ec ee       	ldi	r30, 0xEC	; 236
     4e0:	f0 e0       	ldi	r31, 0x00	; 0
     4e2:	80 81       	ld	r24, Z
     4e4:	80 64       	ori	r24, 0x40	; 64
     4e6:	80 83       	st	Z, r24
     4e8:	08 95       	ret
	} else {
		LCDDR0 |= 0b00000100;
     4ea:	ec ee       	ldi	r30, 0xEC	; 236
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	80 81       	ld	r24, Z
     4f0:	84 60       	ori	r24, 0x04	; 4
     4f2:	80 83       	st	Z, r24
     4f4:	08 95       	ret

000004f6 <updateDisplay>:
        SYNC(target, setFrequency, 0);
    }
    ASYNC(self, updateDisplay, 0);
}

void updateDisplay(GUI *self) {
     4f6:	cf 93       	push	r28
     4f8:	df 93       	push	r29
     4fa:	ec 01       	movw	r28, r24
	updateOneOrTwo(self);
     4fc:	0e 94 65 02 	call	0x4ca	; 0x4ca <updateOneOrTwo>
    printAt(SYNC(self->gen1, getFrequency(self->gen1), 0), 0); //gen1 hz at pos 0-1
     500:	8c 81       	ldd	r24, Y+4	; 0x04
     502:	9d 81       	ldd	r25, Y+5	; 0x05
     504:	0e 94 81 03 	call	0x702	; 0x702 <getFrequency>
     508:	40 e0       	ldi	r20, 0x00	; 0
     50a:	50 e0       	ldi	r21, 0x00	; 0
     50c:	bc 01       	movw	r22, r24
     50e:	8c 81       	ldd	r24, Y+4	; 0x04
     510:	9d 81       	ldd	r25, Y+5	; 0x05
     512:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <sync>
     516:	bc 01       	movw	r22, r24
     518:	99 0f       	add	r25, r25
     51a:	88 0b       	sbc	r24, r24
     51c:	99 0b       	sbc	r25, r25
     51e:	40 e0       	ldi	r20, 0x00	; 0
     520:	50 e0       	ldi	r21, 0x00	; 0
     522:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printAt>
    printAt(SYNC(self->gen2, getFrequency(self->gen2), 0), 3); //gen2 hz at pos 3-4	
     526:	8e 81       	ldd	r24, Y+6	; 0x06
     528:	9f 81       	ldd	r25, Y+7	; 0x07
     52a:	0e 94 81 03 	call	0x702	; 0x702 <getFrequency>
     52e:	40 e0       	ldi	r20, 0x00	; 0
     530:	50 e0       	ldi	r21, 0x00	; 0
     532:	bc 01       	movw	r22, r24
     534:	8e 81       	ldd	r24, Y+6	; 0x06
     536:	9f 81       	ldd	r25, Y+7	; 0x07
     538:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <sync>
     53c:	bc 01       	movw	r22, r24
     53e:	99 0f       	add	r25, r25
     540:	88 0b       	sbc	r24, r24
     542:	99 0b       	sbc	r25, r25
     544:	43 e0       	ldi	r20, 0x03	; 3
     546:	50 e0       	ldi	r21, 0x00	; 0
     548:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printAt>
}
     54c:	df 91       	pop	r29
     54e:	cf 91       	pop	r28
     550:	08 95       	ret

00000552 <joystickInit>:
#include "PulseGen.h"


void joystickInit() {
    //sätter på upp, ner och inåt som input
    PORTB = PORTB | 0b11010000;
     552:	85 b1       	in	r24, 0x05	; 5
     554:	80 6d       	ori	r24, 0xD0	; 208
     556:	85 b9       	out	0x05, r24	; 5
    //sätter på höger och vänster  som input
    PORTE = PORTE | 0b00001100;
     558:	8e b1       	in	r24, 0x0e	; 14
     55a:	8c 60       	ori	r24, 0x0C	; 12
     55c:	8e b9       	out	0x0e, r24	; 14
    //DDRE = 0b01010000;
    //sätter på upp,ner,in (15) hög,ven (14) //sida 53 AVr..169 nånitng
    EIMSK = EIMSK | (1<<PCINT15) | (1<<PCINT14);
     55e:	8d b3       	in	r24, 0x1d	; 29
     560:	80 6c       	ori	r24, 0xC0	; 192
     562:	8d bb       	out	0x1d, r24	; 29

    //sätter på upp, ner och inåt på joystick (som interrupt)
    PCMSK1 = PCMSK1 | (1<<PCINT15) | (1<<PCINT14) | (1<<PCINT12);
     564:	ec e6       	ldi	r30, 0x6C	; 108
     566:	f0 e0       	ldi	r31, 0x00	; 0
     568:	80 81       	ld	r24, Z
     56a:	80 6d       	ori	r24, 0xD0	; 208
     56c:	80 83       	st	Z, r24
    //sätter på höger och vänster på joystick (som interrupt)
    PCMSK0 = PCMSK0 | (1<<PCINT3) | (1<<PCINT2);
     56e:	eb e6       	ldi	r30, 0x6B	; 107
     570:	f0 e0       	ldi	r31, 0x00	; 0
     572:	80 81       	ld	r24, Z
     574:	8c 60       	ori	r24, 0x0C	; 12
     576:	80 83       	st	Z, r24
     578:	08 95       	ret

0000057a <interruptPinB>:
}


// Joystick input handler
void interruptPinB(JoystickHandler *self) { 
     57a:	cf 92       	push	r12
     57c:	df 92       	push	r13
     57e:	ef 92       	push	r14
     580:	ff 92       	push	r15
     582:	0f 93       	push	r16
     584:	1f 93       	push	r17
     586:	cf 93       	push	r28
     588:	df 93       	push	r29
     58a:	ec 01       	movw	r28, r24
    if((PINB & 0b10000000) >> 7 == 0){ //down press on joystick
     58c:	1f 99       	sbic	0x03, 7	; 3
     58e:	13 c0       	rjmp	.+38     	; 0x5b6 <interruptPinB+0x3c>
        ASYNC(self->gui, adjustFrequency, -1);
     590:	0c 81       	ldd	r16, Y+4	; 0x04
     592:	1d 81       	ldd	r17, Y+5	; 0x05
     594:	cc 24       	eor	r12, r12
     596:	ca 94       	dec	r12
     598:	dc 2c       	mov	r13, r12
     59a:	0f 2e       	mov	r0, r31
     59c:	f4 ed       	ldi	r31, 0xD4	; 212
     59e:	ef 2e       	mov	r14, r31
     5a0:	f1 e0       	ldi	r31, 0x01	; 1
     5a2:	ff 2e       	mov	r15, r31
     5a4:	f0 2d       	mov	r31, r0
     5a6:	20 e0       	ldi	r18, 0x00	; 0
     5a8:	30 e0       	ldi	r19, 0x00	; 0
     5aa:	a9 01       	movw	r20, r18
     5ac:	60 e0       	ldi	r22, 0x00	; 0
     5ae:	70 e0       	ldi	r23, 0x00	; 0
     5b0:	cb 01       	movw	r24, r22
     5b2:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <async>
    }

    if((PINB & 0b01000000) >> 6 == 0){ //up press on joystick
     5b6:	1e 99       	sbic	0x03, 6	; 3
     5b8:	13 c0       	rjmp	.+38     	; 0x5e0 <interruptPinB+0x66>
        ASYNC(self->gui, adjustFrequency, 1);
     5ba:	0c 81       	ldd	r16, Y+4	; 0x04
     5bc:	1d 81       	ldd	r17, Y+5	; 0x05
     5be:	cc 24       	eor	r12, r12
     5c0:	c3 94       	inc	r12
     5c2:	d1 2c       	mov	r13, r1
     5c4:	0f 2e       	mov	r0, r31
     5c6:	f4 ed       	ldi	r31, 0xD4	; 212
     5c8:	ef 2e       	mov	r14, r31
     5ca:	f1 e0       	ldi	r31, 0x01	; 1
     5cc:	ff 2e       	mov	r15, r31
     5ce:	f0 2d       	mov	r31, r0
     5d0:	20 e0       	ldi	r18, 0x00	; 0
     5d2:	30 e0       	ldi	r19, 0x00	; 0
     5d4:	a9 01       	movw	r20, r18
     5d6:	60 e0       	ldi	r22, 0x00	; 0
     5d8:	70 e0       	ldi	r23, 0x00	; 0
     5da:	cb 01       	movw	r24, r22
     5dc:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <async>
    }

    if((PINB & 0b00010000) >> 4 == 0){ //middle press
     5e0:	1c 99       	sbic	0x03, 4	; 3
     5e2:	12 c0       	rjmp	.+36     	; 0x608 <interruptPinB+0x8e>
        ASYNC(self->gui, saveRestore, 0);
     5e4:	0c 81       	ldd	r16, Y+4	; 0x04
     5e6:	1d 81       	ldd	r17, Y+5	; 0x05
     5e8:	c1 2c       	mov	r12, r1
     5ea:	d1 2c       	mov	r13, r1
     5ec:	0f 2e       	mov	r0, r31
     5ee:	f5 e1       	ldi	r31, 0x15	; 21
     5f0:	ef 2e       	mov	r14, r31
     5f2:	f2 e0       	ldi	r31, 0x02	; 2
     5f4:	ff 2e       	mov	r15, r31
     5f6:	f0 2d       	mov	r31, r0
     5f8:	20 e0       	ldi	r18, 0x00	; 0
     5fa:	30 e0       	ldi	r19, 0x00	; 0
     5fc:	a9 01       	movw	r20, r18
     5fe:	60 e0       	ldi	r22, 0x00	; 0
     600:	70 e0       	ldi	r23, 0x00	; 0
     602:	cb 01       	movw	r24, r22
     604:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <async>
    }
}
     608:	df 91       	pop	r29
     60a:	cf 91       	pop	r28
     60c:	1f 91       	pop	r17
     60e:	0f 91       	pop	r16
     610:	ff 90       	pop	r15
     612:	ef 90       	pop	r14
     614:	df 90       	pop	r13
     616:	cf 90       	pop	r12
     618:	08 95       	ret

0000061a <interruptPinE>:

void interruptPinE(JoystickHandler *self) {  
     61a:	cf 92       	push	r12
     61c:	df 92       	push	r13
     61e:	ef 92       	push	r14
     620:	ff 92       	push	r15
     622:	0f 93       	push	r16
     624:	1f 93       	push	r17
     626:	cf 93       	push	r28
     628:	df 93       	push	r29
     62a:	ec 01       	movw	r28, r24
    if((PINE & 0b00000100) >> 2 == 0){ //left press
     62c:	62 99       	sbic	0x0c, 2	; 12
     62e:	12 c0       	rjmp	.+36     	; 0x654 <interruptPinE+0x3a>
        ASYNC(self->gui, switchFocus, 0);
     630:	0c 81       	ldd	r16, Y+4	; 0x04
     632:	1d 81       	ldd	r17, Y+5	; 0x05
     634:	c1 2c       	mov	r12, r1
     636:	d1 2c       	mov	r13, r1
     638:	0f 2e       	mov	r0, r31
     63a:	f3 eb       	ldi	r31, 0xB3	; 179
     63c:	ef 2e       	mov	r14, r31
     63e:	f1 e0       	ldi	r31, 0x01	; 1
     640:	ff 2e       	mov	r15, r31
     642:	f0 2d       	mov	r31, r0
     644:	20 e0       	ldi	r18, 0x00	; 0
     646:	30 e0       	ldi	r19, 0x00	; 0
     648:	a9 01       	movw	r20, r18
     64a:	60 e0       	ldi	r22, 0x00	; 0
     64c:	70 e0       	ldi	r23, 0x00	; 0
     64e:	cb 01       	movw	r24, r22
     650:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <async>
    }

    if((PINE & 0b00001000) >> 3 == 0){  //right press
     654:	63 99       	sbic	0x0c, 3	; 12
     656:	13 c0       	rjmp	.+38     	; 0x67e <interruptPinE+0x64>
        ASYNC(self->gui, switchFocus, 1);
     658:	0c 81       	ldd	r16, Y+4	; 0x04
     65a:	1d 81       	ldd	r17, Y+5	; 0x05
     65c:	cc 24       	eor	r12, r12
     65e:	c3 94       	inc	r12
     660:	d1 2c       	mov	r13, r1
     662:	0f 2e       	mov	r0, r31
     664:	f3 eb       	ldi	r31, 0xB3	; 179
     666:	ef 2e       	mov	r14, r31
     668:	f1 e0       	ldi	r31, 0x01	; 1
     66a:	ff 2e       	mov	r15, r31
     66c:	f0 2d       	mov	r31, r0
     66e:	20 e0       	ldi	r18, 0x00	; 0
     670:	30 e0       	ldi	r19, 0x00	; 0
     672:	a9 01       	movw	r20, r18
     674:	60 e0       	ldi	r22, 0x00	; 0
     676:	70 e0       	ldi	r23, 0x00	; 0
     678:	cb 01       	movw	r24, r22
     67a:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <async>
    }
     67e:	df 91       	pop	r29
     680:	cf 91       	pop	r28
     682:	1f 91       	pop	r17
     684:	0f 91       	pop	r16
     686:	ff 90       	pop	r15
     688:	ef 90       	pop	r14
     68a:	df 90       	pop	r13
     68c:	cf 90       	pop	r12
     68e:	08 95       	ret

00000690 <sysInit>:
GUI gui = initGUI(&gen1, &gen2);
JoystickHandler joystick = initJoystickHandler(&gui);

void sysInit(){
    // Clock Prescale Register "maximum speed"
	CLKPR = 0b10000000; // Clock Prescaler Change Enable
     690:	e1 e6       	ldi	r30, 0x61	; 97
     692:	f0 e0       	ldi	r31, 0x00	; 0
     694:	80 e8       	ldi	r24, 0x80	; 128
     696:	80 83       	st	Z, r24
	CLKPR = 0b00000000; // Set 0 for sysclock
     698:	10 82       	st	Z, r1
     69a:	08 95       	ret

0000069c <pinOutputInit>:
}

void pinOutputInit(){
    // Initialize Port E as output for PE4 and PE6
	DDRE |= (1 << PE4) | (1 << PE6);
     69c:	8d b1       	in	r24, 0x0d	; 13
     69e:	80 65       	ori	r24, 0x50	; 80
     6a0:	8d b9       	out	0x0d, r24	; 13
     6a2:	08 95       	ret

000006a4 <main>:
}


int main() {
    sysInit();
     6a4:	0e 94 48 03 	call	0x690	; 0x690 <sysInit>
    pinOutputInit();
     6a8:	0e 94 4e 03 	call	0x69c	; 0x69c <pinOutputInit>
    joystickInit();
     6ac:	0e 94 a9 02 	call	0x552	; 0x552 <joystickInit>
    LCD_init();
     6b0:	0e 94 57 00 	call	0xae	; 0xae <LCD_init>
	//LCDDR0 = 0b01000100;
	//LCDDR0 = 0b01000100;
	
    // Instal interupt handler
    //when the joystick's vertical state changes
    INSTALL(&joystick, interruptPinB, IRQ_PCINT1);
     6b4:	42 e0       	ldi	r20, 0x02	; 2
     6b6:	6d eb       	ldi	r22, 0xBD	; 189
     6b8:	72 e0       	ldi	r23, 0x02	; 2
     6ba:	80 e5       	ldi	r24, 0x50	; 80
     6bc:	91 e0       	ldi	r25, 0x01	; 1
     6be:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <install>
    //when the joystick's horizontal (minus middle) state changes
    INSTALL(&joystick, interruptPinE, IRQ_PCINT0);
     6c2:	41 e0       	ldi	r20, 0x01	; 1
     6c4:	6d e0       	ldi	r22, 0x0D	; 13
     6c6:	73 e0       	ldi	r23, 0x03	; 3
     6c8:	80 e5       	ldi	r24, 0x50	; 80
     6ca:	91 e0       	ldi	r25, 0x01	; 1
     6cc:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <install>
    
    // Start kernel
    return TINYTIMBER(&gui, NULL, NULL);
     6d0:	40 e0       	ldi	r20, 0x00	; 0
     6d2:	50 e0       	ldi	r21, 0x00	; 0
     6d4:	60 e0       	ldi	r22, 0x00	; 0
     6d6:	70 e0       	ldi	r23, 0x00	; 0
     6d8:	86 e5       	ldi	r24, 0x56	; 86
     6da:	91 e0       	ldi	r25, 0x01	; 1
     6dc:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <tinytimber>
}
     6e0:	08 95       	ret

000006e2 <setFrequency>:
#include "PortWrite.h"
#include "TinyTimber.h"


void setFrequency(PulseGen *self, int freq) {
	self->frequency = freq;
     6e2:	fc 01       	movw	r30, r24
     6e4:	71 87       	std	Z+9, r23	; 0x09
     6e6:	60 87       	std	Z+8, r22	; 0x08
     6e8:	08 95       	ret

000006ea <save>:
    }
}

// Saves the freq
void save(PulseGen *self) {
	self->saved_freq = self->frequency;
     6ea:	fc 01       	movw	r30, r24
     6ec:	20 85       	ldd	r18, Z+8	; 0x08
     6ee:	31 85       	ldd	r19, Z+9	; 0x09
     6f0:	33 87       	std	Z+11, r19	; 0x0b
     6f2:	22 87       	std	Z+10, r18	; 0x0a
     6f4:	08 95       	ret

000006f6 <restore>:
}

// Restores freq to last saved
void restore(PulseGen *self) {
	self->frequency = self->saved_freq;
     6f6:	fc 01       	movw	r30, r24
     6f8:	22 85       	ldd	r18, Z+10	; 0x0a
     6fa:	33 85       	ldd	r19, Z+11	; 0x0b
     6fc:	31 87       	std	Z+9, r19	; 0x09
     6fe:	20 87       	std	Z+8, r18	; 0x08
     700:	08 95       	ret

00000702 <getFrequency>:
	//ASYNC(self, setFrequency(self, self->saved_freq), 0);
}

int getFrequency(PulseGen *self) {
	return self->frequency;
     702:	fc 01       	movw	r30, r24
     704:	80 85       	ldd	r24, Z+8	; 0x08
     706:	91 85       	ldd	r25, Z+9	; 0x09
     708:	08 95       	ret

0000070a <initialize>:
     70a:	cf 93       	push	r28
     70c:	df 93       	push	r29
     70e:	00 d0       	rcall	.+0      	; 0x710 <initialize+0x6>
     710:	00 d0       	rcall	.+0      	; 0x712 <initialize+0x8>
     712:	cd b7       	in	r28, 0x3d	; 61
     714:	de b7       	in	r29, 0x3e	; 62
     716:	8f e7       	ldi	r24, 0x7F	; 127
     718:	92 e0       	ldi	r25, 0x02	; 2
     71a:	2f e5       	ldi	r18, 0x5F	; 95
     71c:	33 e0       	ldi	r19, 0x03	; 3
     71e:	fc 01       	movw	r30, r24
     720:	70 97       	sbiw	r30, 0x10	; 16
     722:	91 83       	std	Z+1, r25	; 0x01
     724:	80 83       	st	Z, r24
     726:	40 96       	adiw	r24, 0x10	; 16
     728:	82 17       	cp	r24, r18
     72a:	93 07       	cpc	r25, r19
     72c:	c1 f7       	brne	.-16     	; 0x71e <initialize+0x14>
     72e:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <messages+0xe1>
     732:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <messages+0xe0>
     736:	ea eb       	ldi	r30, 0xBA	; 186
     738:	f1 e0       	ldi	r31, 0x01	; 1
     73a:	87 ed       	ldi	r24, 0xD7	; 215
     73c:	91 e0       	ldi	r25, 0x01	; 1
     73e:	91 83       	std	Z+1, r25	; 0x01
     740:	80 83       	st	Z, r24
     742:	84 ef       	ldi	r24, 0xF4	; 244
     744:	91 e0       	ldi	r25, 0x01	; 1
     746:	96 8f       	std	Z+30, r25	; 0x1e
     748:	85 8f       	std	Z+29, r24	; 0x1d
     74a:	a1 e1       	ldi	r26, 0x11	; 17
     74c:	b2 e0       	ldi	r27, 0x02	; 2
     74e:	b3 af       	std	Z+59, r27	; 0x3b
     750:	a2 af       	std	Z+58, r26	; 0x3a
     752:	1d 92       	st	X+, r1
     754:	1c 92       	st	X, r1
     756:	fa 83       	std	Y+2, r31	; 0x02
     758:	e9 83       	std	Y+1, r30	; 0x01
     75a:	eb eb       	ldi	r30, 0xBB	; 187
     75c:	f3 e0       	ldi	r31, 0x03	; 3
     75e:	fc 83       	std	Y+4, r31	; 0x04
     760:	eb 83       	std	Y+3, r30	; 0x03
     762:	89 81       	ldd	r24, Y+1	; 0x01
     764:	9a 81       	ldd	r25, Y+2	; 0x02
     766:	06 96       	adiw	r24, 0x06	; 6
     768:	0e 94 10 10 	call	0x2020	; 0x2020 <setjmp>
     76c:	8b 81       	ldd	r24, Y+3	; 0x03
     76e:	9c 81       	ldd	r25, Y+4	; 0x04
     770:	e9 81       	ldd	r30, Y+1	; 0x01
     772:	fa 81       	ldd	r31, Y+2	; 0x02
     774:	97 8b       	std	Z+23, r25	; 0x17
     776:	86 8b       	std	Z+22, r24	; 0x16
     778:	91 8f       	std	Z+25, r25	; 0x19
     77a:	80 8f       	std	Z+24, r24	; 0x18
     77c:	85 e2       	ldi	r24, 0x25	; 37
     77e:	9f e0       	ldi	r25, 0x0F	; 15
     780:	94 8f       	std	Z+28, r25	; 0x1c
     782:	83 8f       	std	Z+27, r24	; 0x1b
     784:	15 82       	std	Z+5, r1	; 0x05
     786:	14 82       	std	Z+4, r1	; 0x04
     788:	7d 96       	adiw	r30, 0x1d	; 29
     78a:	fa 83       	std	Y+2, r31	; 0x02
     78c:	e9 83       	std	Y+1, r30	; 0x01
     78e:	eb 81       	ldd	r30, Y+3	; 0x03
     790:	fc 81       	ldd	r31, Y+4	; 0x04
     792:	e0 5a       	subi	r30, 0xA0	; 160
     794:	ff 4f       	sbci	r31, 0xFF	; 255
     796:	fc 83       	std	Y+4, r31	; 0x04
     798:	eb 83       	std	Y+3, r30	; 0x03
     79a:	89 81       	ldd	r24, Y+1	; 0x01
     79c:	9a 81       	ldd	r25, Y+2	; 0x02
     79e:	8e 52       	subi	r24, 0x2E	; 46
     7a0:	92 40       	sbci	r25, 0x02	; 2
     7a2:	f9 f6       	brne	.-66     	; 0x762 <initialize+0x58>
     7a4:	e2 e5       	ldi	r30, 0x52	; 82
     7a6:	f2 e0       	ldi	r31, 0x02	; 2
     7a8:	11 82       	std	Z+1, r1	; 0x01
     7aa:	10 82       	st	Z, r1
     7ac:	15 82       	std	Z+5, r1	; 0x05
     7ae:	14 82       	std	Z+4, r1	; 0x04
     7b0:	13 82       	std	Z+3, r1	; 0x03
     7b2:	12 82       	std	Z+2, r1	; 0x02
     7b4:	e1 e6       	ldi	r30, 0x61	; 97
     7b6:	f0 e0       	ldi	r31, 0x00	; 0
     7b8:	80 e8       	ldi	r24, 0x80	; 128
     7ba:	80 83       	st	Z, r24
     7bc:	10 82       	st	Z, r1
     7be:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     7c2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     7c6:	84 e0       	ldi	r24, 0x04	; 4
     7c8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     7cc:	81 e0       	ldi	r24, 0x01	; 1
     7ce:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
     7d2:	0f 90       	pop	r0
     7d4:	0f 90       	pop	r0
     7d6:	0f 90       	pop	r0
     7d8:	0f 90       	pop	r0
     7da:	df 91       	pop	r29
     7dc:	cf 91       	pop	r28
     7de:	08 95       	ret

000007e0 <dispatch>:
     7e0:	cf 93       	push	r28
     7e2:	df 93       	push	r29
     7e4:	00 d0       	rcall	.+0      	; 0x7e6 <dispatch+0x6>
     7e6:	cd b7       	in	r28, 0x3d	; 61
     7e8:	de b7       	in	r29, 0x3e	; 62
     7ea:	9a 83       	std	Y+2, r25	; 0x02
     7ec:	89 83       	std	Y+1, r24	; 0x01
     7ee:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <current>
     7f2:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <current+0x1>
     7f6:	06 96       	adiw	r24, 0x06	; 6
     7f8:	0e 94 10 10 	call	0x2020	; 0x2020 <setjmp>
     7fc:	89 2b       	or	r24, r25
     7fe:	59 f4       	brne	.+22     	; 0x816 <dispatch+0x36>
     800:	89 81       	ldd	r24, Y+1	; 0x01
     802:	9a 81       	ldd	r25, Y+2	; 0x02
     804:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <current+0x1>
     808:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <current>
     80c:	61 e0       	ldi	r22, 0x01	; 1
     80e:	70 e0       	ldi	r23, 0x00	; 0
     810:	06 96       	adiw	r24, 0x06	; 6
     812:	0e 94 30 10 	call	0x2060	; 0x2060 <longjmp>
     816:	0f 90       	pop	r0
     818:	0f 90       	pop	r0
     81a:	df 91       	pop	r29
     81c:	cf 91       	pop	r28
     81e:	08 95       	ret

00000820 <schedule>:
     820:	0f 93       	push	r16
     822:	1f 93       	push	r17
     824:	cf 93       	push	r28
     826:	df 93       	push	r29
     828:	e0 91 94 01 	lds	r30, 0x0194	; 0x800194 <msgQ>
     82c:	f0 91 95 01 	lds	r31, 0x0195	; 0x800195 <msgQ+0x1>
     830:	30 97       	sbiw	r30, 0x00	; 0
     832:	61 f1       	breq	.+88     	; 0x88c <schedule+0x6c>
     834:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <threadPool>
     838:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <threadPool+0x1>
     83c:	00 97       	sbiw	r24, 0x00	; 0
     83e:	31 f1       	breq	.+76     	; 0x88c <schedule+0x6c>
     840:	c0 91 7e 01 	lds	r28, 0x017E	; 0x80017e <activeStack>
     844:	d0 91 7f 01 	lds	r29, 0x017F	; 0x80017f <activeStack+0x1>
     848:	aa 81       	ldd	r26, Y+2	; 0x02
     84a:	bb 81       	ldd	r27, Y+3	; 0x03
     84c:	10 97       	sbiw	r26, 0x00	; 0
     84e:	79 f0       	breq	.+30     	; 0x86e <schedule+0x4e>
     850:	46 81       	ldd	r20, Z+6	; 0x06
     852:	57 81       	ldd	r21, Z+7	; 0x07
     854:	60 85       	ldd	r22, Z+8	; 0x08
     856:	71 85       	ldd	r23, Z+9	; 0x09
     858:	16 96       	adiw	r26, 0x06	; 6
     85a:	0d 91       	ld	r16, X+
     85c:	1d 91       	ld	r17, X+
     85e:	2d 91       	ld	r18, X+
     860:	3c 91       	ld	r19, X
     862:	19 97       	sbiw	r26, 0x09	; 9
     864:	40 1b       	sub	r20, r16
     866:	51 0b       	sbc	r21, r17
     868:	62 0b       	sbc	r22, r18
     86a:	73 0b       	sbc	r23, r19
     86c:	7a f4       	brpl	.+30     	; 0x88c <schedule+0x6c>
     86e:	fc 01       	movw	r30, r24
     870:	20 81       	ld	r18, Z
     872:	31 81       	ldd	r19, Z+1	; 0x01
     874:	30 93 81 01 	sts	0x0181, r19	; 0x800181 <threadPool+0x1>
     878:	20 93 80 01 	sts	0x0180, r18	; 0x800180 <threadPool>
     87c:	d1 83       	std	Z+1, r29	; 0x01
     87e:	c0 83       	st	Z, r28
     880:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <activeStack+0x1>
     884:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <activeStack>
     888:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <dispatch>
     88c:	df 91       	pop	r29
     88e:	cf 91       	pop	r28
     890:	1f 91       	pop	r17
     892:	0f 91       	pop	r16
     894:	08 95       	ret

00000896 <__vector_1>:
     896:	1f 92       	push	r1
     898:	0f 92       	push	r0
     89a:	0f b6       	in	r0, 0x3f	; 63
     89c:	0f 92       	push	r0
     89e:	11 24       	eor	r1, r1
     8a0:	2f 93       	push	r18
     8a2:	3f 93       	push	r19
     8a4:	4f 93       	push	r20
     8a6:	5f 93       	push	r21
     8a8:	6f 93       	push	r22
     8aa:	7f 93       	push	r23
     8ac:	8f 93       	push	r24
     8ae:	9f 93       	push	r25
     8b0:	af 93       	push	r26
     8b2:	bf 93       	push	r27
     8b4:	ef 93       	push	r30
     8b6:	ff 93       	push	r31
     8b8:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     8bc:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     8c0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     8c4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     8c8:	c9 01       	movw	r24, r18
     8ca:	03 2e       	mov	r0, r19
     8cc:	00 0c       	add	r0, r0
     8ce:	aa 0b       	sbc	r26, r26
     8d0:	bb 0b       	sbc	r27, r27
     8d2:	dc 01       	movw	r26, r24
     8d4:	99 27       	eor	r25, r25
     8d6:	88 27       	eor	r24, r24
     8d8:	60 e0       	ldi	r22, 0x00	; 0
     8da:	70 e0       	ldi	r23, 0x00	; 0
     8dc:	84 2b       	or	r24, r20
     8de:	95 2b       	or	r25, r21
     8e0:	a6 2b       	or	r26, r22
     8e2:	b7 2b       	or	r27, r23
     8e4:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     8e8:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     8ec:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     8f0:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     8f4:	b0 9b       	sbis	0x16, 0	; 22
     8f6:	1b c0       	rjmp	.+54     	; 0x92e <__vector_1+0x98>
     8f8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     8fc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     900:	c9 01       	movw	r24, r18
     902:	01 96       	adiw	r24, 0x01	; 1
     904:	09 2e       	mov	r0, r25
     906:	00 0c       	add	r0, r0
     908:	aa 0b       	sbc	r26, r26
     90a:	bb 0b       	sbc	r27, r27
     90c:	dc 01       	movw	r26, r24
     90e:	99 27       	eor	r25, r25
     910:	88 27       	eor	r24, r24
     912:	60 e0       	ldi	r22, 0x00	; 0
     914:	70 e0       	ldi	r23, 0x00	; 0
     916:	84 2b       	or	r24, r20
     918:	95 2b       	or	r25, r21
     91a:	a6 2b       	or	r26, r22
     91c:	b7 2b       	or	r27, r23
     91e:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     922:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     926:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     92a:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     92e:	e0 91 2e 02 	lds	r30, 0x022E	; 0x80022e <mtable>
     932:	f0 91 2f 02 	lds	r31, 0x022F	; 0x80022f <mtable+0x1>
     936:	30 97       	sbiw	r30, 0x00	; 0
     938:	39 f0       	breq	.+14     	; 0x948 <__vector_1+0xb2>
     93a:	60 e0       	ldi	r22, 0x00	; 0
     93c:	70 e0       	ldi	r23, 0x00	; 0
     93e:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <otable>
     942:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <otable+0x1>
     946:	09 95       	icall
     948:	0e 94 10 04 	call	0x820	; 0x820 <schedule>
     94c:	ff 91       	pop	r31
     94e:	ef 91       	pop	r30
     950:	bf 91       	pop	r27
     952:	af 91       	pop	r26
     954:	9f 91       	pop	r25
     956:	8f 91       	pop	r24
     958:	7f 91       	pop	r23
     95a:	6f 91       	pop	r22
     95c:	5f 91       	pop	r21
     95e:	4f 91       	pop	r20
     960:	3f 91       	pop	r19
     962:	2f 91       	pop	r18
     964:	0f 90       	pop	r0
     966:	0f be       	out	0x3f, r0	; 63
     968:	0f 90       	pop	r0
     96a:	1f 90       	pop	r1
     96c:	18 95       	reti

0000096e <__vector_2>:
     96e:	1f 92       	push	r1
     970:	0f 92       	push	r0
     972:	0f b6       	in	r0, 0x3f	; 63
     974:	0f 92       	push	r0
     976:	11 24       	eor	r1, r1
     978:	2f 93       	push	r18
     97a:	3f 93       	push	r19
     97c:	4f 93       	push	r20
     97e:	5f 93       	push	r21
     980:	6f 93       	push	r22
     982:	7f 93       	push	r23
     984:	8f 93       	push	r24
     986:	9f 93       	push	r25
     988:	af 93       	push	r26
     98a:	bf 93       	push	r27
     98c:	ef 93       	push	r30
     98e:	ff 93       	push	r31
     990:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     994:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     998:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     99c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     9a0:	c9 01       	movw	r24, r18
     9a2:	03 2e       	mov	r0, r19
     9a4:	00 0c       	add	r0, r0
     9a6:	aa 0b       	sbc	r26, r26
     9a8:	bb 0b       	sbc	r27, r27
     9aa:	dc 01       	movw	r26, r24
     9ac:	99 27       	eor	r25, r25
     9ae:	88 27       	eor	r24, r24
     9b0:	60 e0       	ldi	r22, 0x00	; 0
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	84 2b       	or	r24, r20
     9b6:	95 2b       	or	r25, r21
     9b8:	a6 2b       	or	r26, r22
     9ba:	b7 2b       	or	r27, r23
     9bc:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     9c0:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     9c4:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     9c8:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     9cc:	b0 9b       	sbis	0x16, 0	; 22
     9ce:	1b c0       	rjmp	.+54     	; 0xa06 <__vector_2+0x98>
     9d0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     9d4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     9d8:	c9 01       	movw	r24, r18
     9da:	01 96       	adiw	r24, 0x01	; 1
     9dc:	09 2e       	mov	r0, r25
     9de:	00 0c       	add	r0, r0
     9e0:	aa 0b       	sbc	r26, r26
     9e2:	bb 0b       	sbc	r27, r27
     9e4:	dc 01       	movw	r26, r24
     9e6:	99 27       	eor	r25, r25
     9e8:	88 27       	eor	r24, r24
     9ea:	60 e0       	ldi	r22, 0x00	; 0
     9ec:	70 e0       	ldi	r23, 0x00	; 0
     9ee:	84 2b       	or	r24, r20
     9f0:	95 2b       	or	r25, r21
     9f2:	a6 2b       	or	r26, r22
     9f4:	b7 2b       	or	r27, r23
     9f6:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     9fa:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     9fe:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     a02:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     a06:	e0 91 30 02 	lds	r30, 0x0230	; 0x800230 <mtable+0x2>
     a0a:	f0 91 31 02 	lds	r31, 0x0231	; 0x800231 <mtable+0x3>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	39 f0       	breq	.+14     	; 0xa20 <__vector_2+0xb2>
     a12:	61 e0       	ldi	r22, 0x01	; 1
     a14:	70 e0       	ldi	r23, 0x00	; 0
     a16:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <otable+0x2>
     a1a:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <otable+0x3>
     a1e:	09 95       	icall
     a20:	0e 94 10 04 	call	0x820	; 0x820 <schedule>
     a24:	ff 91       	pop	r31
     a26:	ef 91       	pop	r30
     a28:	bf 91       	pop	r27
     a2a:	af 91       	pop	r26
     a2c:	9f 91       	pop	r25
     a2e:	8f 91       	pop	r24
     a30:	7f 91       	pop	r23
     a32:	6f 91       	pop	r22
     a34:	5f 91       	pop	r21
     a36:	4f 91       	pop	r20
     a38:	3f 91       	pop	r19
     a3a:	2f 91       	pop	r18
     a3c:	0f 90       	pop	r0
     a3e:	0f be       	out	0x3f, r0	; 63
     a40:	0f 90       	pop	r0
     a42:	1f 90       	pop	r1
     a44:	18 95       	reti

00000a46 <__vector_3>:
     a46:	1f 92       	push	r1
     a48:	0f 92       	push	r0
     a4a:	0f b6       	in	r0, 0x3f	; 63
     a4c:	0f 92       	push	r0
     a4e:	11 24       	eor	r1, r1
     a50:	2f 93       	push	r18
     a52:	3f 93       	push	r19
     a54:	4f 93       	push	r20
     a56:	5f 93       	push	r21
     a58:	6f 93       	push	r22
     a5a:	7f 93       	push	r23
     a5c:	8f 93       	push	r24
     a5e:	9f 93       	push	r25
     a60:	af 93       	push	r26
     a62:	bf 93       	push	r27
     a64:	ef 93       	push	r30
     a66:	ff 93       	push	r31
     a68:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     a6c:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     a70:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     a74:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     a78:	c9 01       	movw	r24, r18
     a7a:	03 2e       	mov	r0, r19
     a7c:	00 0c       	add	r0, r0
     a7e:	aa 0b       	sbc	r26, r26
     a80:	bb 0b       	sbc	r27, r27
     a82:	dc 01       	movw	r26, r24
     a84:	99 27       	eor	r25, r25
     a86:	88 27       	eor	r24, r24
     a88:	60 e0       	ldi	r22, 0x00	; 0
     a8a:	70 e0       	ldi	r23, 0x00	; 0
     a8c:	84 2b       	or	r24, r20
     a8e:	95 2b       	or	r25, r21
     a90:	a6 2b       	or	r26, r22
     a92:	b7 2b       	or	r27, r23
     a94:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     a98:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     a9c:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     aa0:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     aa4:	b0 9b       	sbis	0x16, 0	; 22
     aa6:	1b c0       	rjmp	.+54     	; 0xade <__vector_3+0x98>
     aa8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     aac:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     ab0:	c9 01       	movw	r24, r18
     ab2:	01 96       	adiw	r24, 0x01	; 1
     ab4:	09 2e       	mov	r0, r25
     ab6:	00 0c       	add	r0, r0
     ab8:	aa 0b       	sbc	r26, r26
     aba:	bb 0b       	sbc	r27, r27
     abc:	dc 01       	movw	r26, r24
     abe:	99 27       	eor	r25, r25
     ac0:	88 27       	eor	r24, r24
     ac2:	60 e0       	ldi	r22, 0x00	; 0
     ac4:	70 e0       	ldi	r23, 0x00	; 0
     ac6:	84 2b       	or	r24, r20
     ac8:	95 2b       	or	r25, r21
     aca:	a6 2b       	or	r26, r22
     acc:	b7 2b       	or	r27, r23
     ace:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     ad2:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     ad6:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     ada:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     ade:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <mtable+0x4>
     ae2:	f0 91 33 02 	lds	r31, 0x0233	; 0x800233 <mtable+0x5>
     ae6:	30 97       	sbiw	r30, 0x00	; 0
     ae8:	39 f0       	breq	.+14     	; 0xaf8 <__vector_3+0xb2>
     aea:	62 e0       	ldi	r22, 0x02	; 2
     aec:	70 e0       	ldi	r23, 0x00	; 0
     aee:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <otable+0x4>
     af2:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <otable+0x5>
     af6:	09 95       	icall
     af8:	0e 94 10 04 	call	0x820	; 0x820 <schedule>
     afc:	ff 91       	pop	r31
     afe:	ef 91       	pop	r30
     b00:	bf 91       	pop	r27
     b02:	af 91       	pop	r26
     b04:	9f 91       	pop	r25
     b06:	8f 91       	pop	r24
     b08:	7f 91       	pop	r23
     b0a:	6f 91       	pop	r22
     b0c:	5f 91       	pop	r21
     b0e:	4f 91       	pop	r20
     b10:	3f 91       	pop	r19
     b12:	2f 91       	pop	r18
     b14:	0f 90       	pop	r0
     b16:	0f be       	out	0x3f, r0	; 63
     b18:	0f 90       	pop	r0
     b1a:	1f 90       	pop	r1
     b1c:	18 95       	reti

00000b1e <__vector_4>:
     b1e:	1f 92       	push	r1
     b20:	0f 92       	push	r0
     b22:	0f b6       	in	r0, 0x3f	; 63
     b24:	0f 92       	push	r0
     b26:	11 24       	eor	r1, r1
     b28:	2f 93       	push	r18
     b2a:	3f 93       	push	r19
     b2c:	4f 93       	push	r20
     b2e:	5f 93       	push	r21
     b30:	6f 93       	push	r22
     b32:	7f 93       	push	r23
     b34:	8f 93       	push	r24
     b36:	9f 93       	push	r25
     b38:	af 93       	push	r26
     b3a:	bf 93       	push	r27
     b3c:	ef 93       	push	r30
     b3e:	ff 93       	push	r31
     b40:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     b44:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     b48:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     b4c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     b50:	c9 01       	movw	r24, r18
     b52:	03 2e       	mov	r0, r19
     b54:	00 0c       	add	r0, r0
     b56:	aa 0b       	sbc	r26, r26
     b58:	bb 0b       	sbc	r27, r27
     b5a:	dc 01       	movw	r26, r24
     b5c:	99 27       	eor	r25, r25
     b5e:	88 27       	eor	r24, r24
     b60:	60 e0       	ldi	r22, 0x00	; 0
     b62:	70 e0       	ldi	r23, 0x00	; 0
     b64:	84 2b       	or	r24, r20
     b66:	95 2b       	or	r25, r21
     b68:	a6 2b       	or	r26, r22
     b6a:	b7 2b       	or	r27, r23
     b6c:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     b70:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     b74:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     b78:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     b7c:	b0 9b       	sbis	0x16, 0	; 22
     b7e:	1b c0       	rjmp	.+54     	; 0xbb6 <__vector_4+0x98>
     b80:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     b84:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     b88:	c9 01       	movw	r24, r18
     b8a:	01 96       	adiw	r24, 0x01	; 1
     b8c:	09 2e       	mov	r0, r25
     b8e:	00 0c       	add	r0, r0
     b90:	aa 0b       	sbc	r26, r26
     b92:	bb 0b       	sbc	r27, r27
     b94:	dc 01       	movw	r26, r24
     b96:	99 27       	eor	r25, r25
     b98:	88 27       	eor	r24, r24
     b9a:	60 e0       	ldi	r22, 0x00	; 0
     b9c:	70 e0       	ldi	r23, 0x00	; 0
     b9e:	84 2b       	or	r24, r20
     ba0:	95 2b       	or	r25, r21
     ba2:	a6 2b       	or	r26, r22
     ba4:	b7 2b       	or	r27, r23
     ba6:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     baa:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     bae:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     bb2:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     bb6:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <mtable+0x6>
     bba:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <mtable+0x7>
     bbe:	30 97       	sbiw	r30, 0x00	; 0
     bc0:	39 f0       	breq	.+14     	; 0xbd0 <__vector_4+0xb2>
     bc2:	63 e0       	ldi	r22, 0x03	; 3
     bc4:	70 e0       	ldi	r23, 0x00	; 0
     bc6:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <otable+0x6>
     bca:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <otable+0x7>
     bce:	09 95       	icall
     bd0:	0e 94 10 04 	call	0x820	; 0x820 <schedule>
     bd4:	ff 91       	pop	r31
     bd6:	ef 91       	pop	r30
     bd8:	bf 91       	pop	r27
     bda:	af 91       	pop	r26
     bdc:	9f 91       	pop	r25
     bde:	8f 91       	pop	r24
     be0:	7f 91       	pop	r23
     be2:	6f 91       	pop	r22
     be4:	5f 91       	pop	r21
     be6:	4f 91       	pop	r20
     be8:	3f 91       	pop	r19
     bea:	2f 91       	pop	r18
     bec:	0f 90       	pop	r0
     bee:	0f be       	out	0x3f, r0	; 63
     bf0:	0f 90       	pop	r0
     bf2:	1f 90       	pop	r1
     bf4:	18 95       	reti

00000bf6 <__vector_5>:
     bf6:	1f 92       	push	r1
     bf8:	0f 92       	push	r0
     bfa:	0f b6       	in	r0, 0x3f	; 63
     bfc:	0f 92       	push	r0
     bfe:	11 24       	eor	r1, r1
     c00:	2f 93       	push	r18
     c02:	3f 93       	push	r19
     c04:	4f 93       	push	r20
     c06:	5f 93       	push	r21
     c08:	6f 93       	push	r22
     c0a:	7f 93       	push	r23
     c0c:	8f 93       	push	r24
     c0e:	9f 93       	push	r25
     c10:	af 93       	push	r26
     c12:	bf 93       	push	r27
     c14:	ef 93       	push	r30
     c16:	ff 93       	push	r31
     c18:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     c1c:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     c20:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     c24:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     c28:	c9 01       	movw	r24, r18
     c2a:	03 2e       	mov	r0, r19
     c2c:	00 0c       	add	r0, r0
     c2e:	aa 0b       	sbc	r26, r26
     c30:	bb 0b       	sbc	r27, r27
     c32:	dc 01       	movw	r26, r24
     c34:	99 27       	eor	r25, r25
     c36:	88 27       	eor	r24, r24
     c38:	60 e0       	ldi	r22, 0x00	; 0
     c3a:	70 e0       	ldi	r23, 0x00	; 0
     c3c:	84 2b       	or	r24, r20
     c3e:	95 2b       	or	r25, r21
     c40:	a6 2b       	or	r26, r22
     c42:	b7 2b       	or	r27, r23
     c44:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     c48:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     c4c:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     c50:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     c54:	b0 9b       	sbis	0x16, 0	; 22
     c56:	1b c0       	rjmp	.+54     	; 0xc8e <__vector_5+0x98>
     c58:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     c5c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     c60:	c9 01       	movw	r24, r18
     c62:	01 96       	adiw	r24, 0x01	; 1
     c64:	09 2e       	mov	r0, r25
     c66:	00 0c       	add	r0, r0
     c68:	aa 0b       	sbc	r26, r26
     c6a:	bb 0b       	sbc	r27, r27
     c6c:	dc 01       	movw	r26, r24
     c6e:	99 27       	eor	r25, r25
     c70:	88 27       	eor	r24, r24
     c72:	60 e0       	ldi	r22, 0x00	; 0
     c74:	70 e0       	ldi	r23, 0x00	; 0
     c76:	84 2b       	or	r24, r20
     c78:	95 2b       	or	r25, r21
     c7a:	a6 2b       	or	r26, r22
     c7c:	b7 2b       	or	r27, r23
     c7e:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     c82:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     c86:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     c8a:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     c8e:	e0 91 36 02 	lds	r30, 0x0236	; 0x800236 <mtable+0x8>
     c92:	f0 91 37 02 	lds	r31, 0x0237	; 0x800237 <mtable+0x9>
     c96:	30 97       	sbiw	r30, 0x00	; 0
     c98:	39 f0       	breq	.+14     	; 0xca8 <__vector_5+0xb2>
     c9a:	64 e0       	ldi	r22, 0x04	; 4
     c9c:	70 e0       	ldi	r23, 0x00	; 0
     c9e:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <otable+0x8>
     ca2:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <otable+0x9>
     ca6:	09 95       	icall
     ca8:	0e 94 10 04 	call	0x820	; 0x820 <schedule>
     cac:	ff 91       	pop	r31
     cae:	ef 91       	pop	r30
     cb0:	bf 91       	pop	r27
     cb2:	af 91       	pop	r26
     cb4:	9f 91       	pop	r25
     cb6:	8f 91       	pop	r24
     cb8:	7f 91       	pop	r23
     cba:	6f 91       	pop	r22
     cbc:	5f 91       	pop	r21
     cbe:	4f 91       	pop	r20
     cc0:	3f 91       	pop	r19
     cc2:	2f 91       	pop	r18
     cc4:	0f 90       	pop	r0
     cc6:	0f be       	out	0x3f, r0	; 63
     cc8:	0f 90       	pop	r0
     cca:	1f 90       	pop	r1
     ccc:	18 95       	reti

00000cce <__vector_10>:
     cce:	1f 92       	push	r1
     cd0:	0f 92       	push	r0
     cd2:	0f b6       	in	r0, 0x3f	; 63
     cd4:	0f 92       	push	r0
     cd6:	11 24       	eor	r1, r1
     cd8:	2f 93       	push	r18
     cda:	3f 93       	push	r19
     cdc:	4f 93       	push	r20
     cde:	5f 93       	push	r21
     ce0:	6f 93       	push	r22
     ce2:	7f 93       	push	r23
     ce4:	8f 93       	push	r24
     ce6:	9f 93       	push	r25
     ce8:	af 93       	push	r26
     cea:	bf 93       	push	r27
     cec:	ef 93       	push	r30
     cee:	ff 93       	push	r31
     cf0:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     cf4:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     cf8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     cfc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     d00:	c9 01       	movw	r24, r18
     d02:	03 2e       	mov	r0, r19
     d04:	00 0c       	add	r0, r0
     d06:	aa 0b       	sbc	r26, r26
     d08:	bb 0b       	sbc	r27, r27
     d0a:	dc 01       	movw	r26, r24
     d0c:	99 27       	eor	r25, r25
     d0e:	88 27       	eor	r24, r24
     d10:	60 e0       	ldi	r22, 0x00	; 0
     d12:	70 e0       	ldi	r23, 0x00	; 0
     d14:	84 2b       	or	r24, r20
     d16:	95 2b       	or	r25, r21
     d18:	a6 2b       	or	r26, r22
     d1a:	b7 2b       	or	r27, r23
     d1c:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     d20:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     d24:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     d28:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     d2c:	b0 9b       	sbis	0x16, 0	; 22
     d2e:	1b c0       	rjmp	.+54     	; 0xd66 <__vector_10+0x98>
     d30:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     d34:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     d38:	c9 01       	movw	r24, r18
     d3a:	01 96       	adiw	r24, 0x01	; 1
     d3c:	09 2e       	mov	r0, r25
     d3e:	00 0c       	add	r0, r0
     d40:	aa 0b       	sbc	r26, r26
     d42:	bb 0b       	sbc	r27, r27
     d44:	dc 01       	movw	r26, r24
     d46:	99 27       	eor	r25, r25
     d48:	88 27       	eor	r24, r24
     d4a:	60 e0       	ldi	r22, 0x00	; 0
     d4c:	70 e0       	ldi	r23, 0x00	; 0
     d4e:	84 2b       	or	r24, r20
     d50:	95 2b       	or	r25, r21
     d52:	a6 2b       	or	r26, r22
     d54:	b7 2b       	or	r27, r23
     d56:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     d5a:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     d5e:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     d62:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     d66:	e0 91 38 02 	lds	r30, 0x0238	; 0x800238 <mtable+0xa>
     d6a:	f0 91 39 02 	lds	r31, 0x0239	; 0x800239 <mtable+0xb>
     d6e:	30 97       	sbiw	r30, 0x00	; 0
     d70:	39 f0       	breq	.+14     	; 0xd80 <__vector_10+0xb2>
     d72:	65 e0       	ldi	r22, 0x05	; 5
     d74:	70 e0       	ldi	r23, 0x00	; 0
     d76:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <otable+0xa>
     d7a:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <otable+0xb>
     d7e:	09 95       	icall
     d80:	0e 94 10 04 	call	0x820	; 0x820 <schedule>
     d84:	ff 91       	pop	r31
     d86:	ef 91       	pop	r30
     d88:	bf 91       	pop	r27
     d8a:	af 91       	pop	r26
     d8c:	9f 91       	pop	r25
     d8e:	8f 91       	pop	r24
     d90:	7f 91       	pop	r23
     d92:	6f 91       	pop	r22
     d94:	5f 91       	pop	r21
     d96:	4f 91       	pop	r20
     d98:	3f 91       	pop	r19
     d9a:	2f 91       	pop	r18
     d9c:	0f 90       	pop	r0
     d9e:	0f be       	out	0x3f, r0	; 63
     da0:	0f 90       	pop	r0
     da2:	1f 90       	pop	r1
     da4:	18 95       	reti

00000da6 <__vector_11>:
     da6:	1f 92       	push	r1
     da8:	0f 92       	push	r0
     daa:	0f b6       	in	r0, 0x3f	; 63
     dac:	0f 92       	push	r0
     dae:	11 24       	eor	r1, r1
     db0:	2f 93       	push	r18
     db2:	3f 93       	push	r19
     db4:	4f 93       	push	r20
     db6:	5f 93       	push	r21
     db8:	6f 93       	push	r22
     dba:	7f 93       	push	r23
     dbc:	8f 93       	push	r24
     dbe:	9f 93       	push	r25
     dc0:	af 93       	push	r26
     dc2:	bf 93       	push	r27
     dc4:	ef 93       	push	r30
     dc6:	ff 93       	push	r31
     dc8:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     dcc:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     dd0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     dd4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     dd8:	c9 01       	movw	r24, r18
     dda:	03 2e       	mov	r0, r19
     ddc:	00 0c       	add	r0, r0
     dde:	aa 0b       	sbc	r26, r26
     de0:	bb 0b       	sbc	r27, r27
     de2:	dc 01       	movw	r26, r24
     de4:	99 27       	eor	r25, r25
     de6:	88 27       	eor	r24, r24
     de8:	60 e0       	ldi	r22, 0x00	; 0
     dea:	70 e0       	ldi	r23, 0x00	; 0
     dec:	84 2b       	or	r24, r20
     dee:	95 2b       	or	r25, r21
     df0:	a6 2b       	or	r26, r22
     df2:	b7 2b       	or	r27, r23
     df4:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     df8:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     dfc:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     e00:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     e04:	b0 9b       	sbis	0x16, 0	; 22
     e06:	1b c0       	rjmp	.+54     	; 0xe3e <__vector_11+0x98>
     e08:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     e0c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     e10:	c9 01       	movw	r24, r18
     e12:	01 96       	adiw	r24, 0x01	; 1
     e14:	09 2e       	mov	r0, r25
     e16:	00 0c       	add	r0, r0
     e18:	aa 0b       	sbc	r26, r26
     e1a:	bb 0b       	sbc	r27, r27
     e1c:	dc 01       	movw	r26, r24
     e1e:	99 27       	eor	r25, r25
     e20:	88 27       	eor	r24, r24
     e22:	60 e0       	ldi	r22, 0x00	; 0
     e24:	70 e0       	ldi	r23, 0x00	; 0
     e26:	84 2b       	or	r24, r20
     e28:	95 2b       	or	r25, r21
     e2a:	a6 2b       	or	r26, r22
     e2c:	b7 2b       	or	r27, r23
     e2e:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     e32:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     e36:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     e3a:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     e3e:	e0 91 3a 02 	lds	r30, 0x023A	; 0x80023a <mtable+0xc>
     e42:	f0 91 3b 02 	lds	r31, 0x023B	; 0x80023b <mtable+0xd>
     e46:	30 97       	sbiw	r30, 0x00	; 0
     e48:	39 f0       	breq	.+14     	; 0xe58 <__vector_11+0xb2>
     e4a:	66 e0       	ldi	r22, 0x06	; 6
     e4c:	70 e0       	ldi	r23, 0x00	; 0
     e4e:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <otable+0xc>
     e52:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <otable+0xd>
     e56:	09 95       	icall
     e58:	0e 94 10 04 	call	0x820	; 0x820 <schedule>
     e5c:	ff 91       	pop	r31
     e5e:	ef 91       	pop	r30
     e60:	bf 91       	pop	r27
     e62:	af 91       	pop	r26
     e64:	9f 91       	pop	r25
     e66:	8f 91       	pop	r24
     e68:	7f 91       	pop	r23
     e6a:	6f 91       	pop	r22
     e6c:	5f 91       	pop	r21
     e6e:	4f 91       	pop	r20
     e70:	3f 91       	pop	r19
     e72:	2f 91       	pop	r18
     e74:	0f 90       	pop	r0
     e76:	0f be       	out	0x3f, r0	; 63
     e78:	0f 90       	pop	r0
     e7a:	1f 90       	pop	r1
     e7c:	18 95       	reti

00000e7e <__vector_12>:
     e7e:	1f 92       	push	r1
     e80:	0f 92       	push	r0
     e82:	0f b6       	in	r0, 0x3f	; 63
     e84:	0f 92       	push	r0
     e86:	11 24       	eor	r1, r1
     e88:	2f 93       	push	r18
     e8a:	3f 93       	push	r19
     e8c:	4f 93       	push	r20
     e8e:	5f 93       	push	r21
     e90:	6f 93       	push	r22
     e92:	7f 93       	push	r23
     e94:	8f 93       	push	r24
     e96:	9f 93       	push	r25
     e98:	af 93       	push	r26
     e9a:	bf 93       	push	r27
     e9c:	ef 93       	push	r30
     e9e:	ff 93       	push	r31
     ea0:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     ea4:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     ea8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     eac:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     eb0:	c9 01       	movw	r24, r18
     eb2:	03 2e       	mov	r0, r19
     eb4:	00 0c       	add	r0, r0
     eb6:	aa 0b       	sbc	r26, r26
     eb8:	bb 0b       	sbc	r27, r27
     eba:	dc 01       	movw	r26, r24
     ebc:	99 27       	eor	r25, r25
     ebe:	88 27       	eor	r24, r24
     ec0:	60 e0       	ldi	r22, 0x00	; 0
     ec2:	70 e0       	ldi	r23, 0x00	; 0
     ec4:	84 2b       	or	r24, r20
     ec6:	95 2b       	or	r25, r21
     ec8:	a6 2b       	or	r26, r22
     eca:	b7 2b       	or	r27, r23
     ecc:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     ed0:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     ed4:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     ed8:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     edc:	b0 9b       	sbis	0x16, 0	; 22
     ede:	1b c0       	rjmp	.+54     	; 0xf16 <__vector_12+0x98>
     ee0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     ee4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     ee8:	c9 01       	movw	r24, r18
     eea:	01 96       	adiw	r24, 0x01	; 1
     eec:	09 2e       	mov	r0, r25
     eee:	00 0c       	add	r0, r0
     ef0:	aa 0b       	sbc	r26, r26
     ef2:	bb 0b       	sbc	r27, r27
     ef4:	dc 01       	movw	r26, r24
     ef6:	99 27       	eor	r25, r25
     ef8:	88 27       	eor	r24, r24
     efa:	60 e0       	ldi	r22, 0x00	; 0
     efc:	70 e0       	ldi	r23, 0x00	; 0
     efe:	84 2b       	or	r24, r20
     f00:	95 2b       	or	r25, r21
     f02:	a6 2b       	or	r26, r22
     f04:	b7 2b       	or	r27, r23
     f06:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     f0a:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     f0e:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     f12:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     f16:	e0 91 3c 02 	lds	r30, 0x023C	; 0x80023c <mtable+0xe>
     f1a:	f0 91 3d 02 	lds	r31, 0x023D	; 0x80023d <mtable+0xf>
     f1e:	30 97       	sbiw	r30, 0x00	; 0
     f20:	39 f0       	breq	.+14     	; 0xf30 <__vector_12+0xb2>
     f22:	67 e0       	ldi	r22, 0x07	; 7
     f24:	70 e0       	ldi	r23, 0x00	; 0
     f26:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <otable+0xe>
     f2a:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <otable+0xf>
     f2e:	09 95       	icall
     f30:	0e 94 10 04 	call	0x820	; 0x820 <schedule>
     f34:	ff 91       	pop	r31
     f36:	ef 91       	pop	r30
     f38:	bf 91       	pop	r27
     f3a:	af 91       	pop	r26
     f3c:	9f 91       	pop	r25
     f3e:	8f 91       	pop	r24
     f40:	7f 91       	pop	r23
     f42:	6f 91       	pop	r22
     f44:	5f 91       	pop	r21
     f46:	4f 91       	pop	r20
     f48:	3f 91       	pop	r19
     f4a:	2f 91       	pop	r18
     f4c:	0f 90       	pop	r0
     f4e:	0f be       	out	0x3f, r0	; 63
     f50:	0f 90       	pop	r0
     f52:	1f 90       	pop	r1
     f54:	18 95       	reti

00000f56 <__vector_13>:
     f56:	1f 92       	push	r1
     f58:	0f 92       	push	r0
     f5a:	0f b6       	in	r0, 0x3f	; 63
     f5c:	0f 92       	push	r0
     f5e:	11 24       	eor	r1, r1
     f60:	2f 93       	push	r18
     f62:	3f 93       	push	r19
     f64:	4f 93       	push	r20
     f66:	5f 93       	push	r21
     f68:	6f 93       	push	r22
     f6a:	7f 93       	push	r23
     f6c:	8f 93       	push	r24
     f6e:	9f 93       	push	r25
     f70:	af 93       	push	r26
     f72:	bf 93       	push	r27
     f74:	ef 93       	push	r30
     f76:	ff 93       	push	r31
     f78:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     f7c:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     f80:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     f84:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     f88:	c9 01       	movw	r24, r18
     f8a:	03 2e       	mov	r0, r19
     f8c:	00 0c       	add	r0, r0
     f8e:	aa 0b       	sbc	r26, r26
     f90:	bb 0b       	sbc	r27, r27
     f92:	dc 01       	movw	r26, r24
     f94:	99 27       	eor	r25, r25
     f96:	88 27       	eor	r24, r24
     f98:	60 e0       	ldi	r22, 0x00	; 0
     f9a:	70 e0       	ldi	r23, 0x00	; 0
     f9c:	84 2b       	or	r24, r20
     f9e:	95 2b       	or	r25, r21
     fa0:	a6 2b       	or	r26, r22
     fa2:	b7 2b       	or	r27, r23
     fa4:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     fa8:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     fac:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     fb0:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     fb4:	b0 9b       	sbis	0x16, 0	; 22
     fb6:	1b c0       	rjmp	.+54     	; 0xfee <__vector_13+0x98>
     fb8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     fbc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     fc0:	c9 01       	movw	r24, r18
     fc2:	01 96       	adiw	r24, 0x01	; 1
     fc4:	09 2e       	mov	r0, r25
     fc6:	00 0c       	add	r0, r0
     fc8:	aa 0b       	sbc	r26, r26
     fca:	bb 0b       	sbc	r27, r27
     fcc:	dc 01       	movw	r26, r24
     fce:	99 27       	eor	r25, r25
     fd0:	88 27       	eor	r24, r24
     fd2:	60 e0       	ldi	r22, 0x00	; 0
     fd4:	70 e0       	ldi	r23, 0x00	; 0
     fd6:	84 2b       	or	r24, r20
     fd8:	95 2b       	or	r25, r21
     fda:	a6 2b       	or	r26, r22
     fdc:	b7 2b       	or	r27, r23
     fde:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     fe2:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     fe6:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     fea:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     fee:	e0 91 3e 02 	lds	r30, 0x023E	; 0x80023e <mtable+0x10>
     ff2:	f0 91 3f 02 	lds	r31, 0x023F	; 0x80023f <mtable+0x11>
     ff6:	30 97       	sbiw	r30, 0x00	; 0
     ff8:	39 f0       	breq	.+14     	; 0x1008 <__vector_13+0xb2>
     ffa:	68 e0       	ldi	r22, 0x08	; 8
     ffc:	70 e0       	ldi	r23, 0x00	; 0
     ffe:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <otable+0x10>
    1002:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <otable+0x11>
    1006:	09 95       	icall
    1008:	0e 94 10 04 	call	0x820	; 0x820 <schedule>
    100c:	ff 91       	pop	r31
    100e:	ef 91       	pop	r30
    1010:	bf 91       	pop	r27
    1012:	af 91       	pop	r26
    1014:	9f 91       	pop	r25
    1016:	8f 91       	pop	r24
    1018:	7f 91       	pop	r23
    101a:	6f 91       	pop	r22
    101c:	5f 91       	pop	r21
    101e:	4f 91       	pop	r20
    1020:	3f 91       	pop	r19
    1022:	2f 91       	pop	r18
    1024:	0f 90       	pop	r0
    1026:	0f be       	out	0x3f, r0	; 63
    1028:	0f 90       	pop	r0
    102a:	1f 90       	pop	r1
    102c:	18 95       	reti

0000102e <__vector_14>:
    102e:	1f 92       	push	r1
    1030:	0f 92       	push	r0
    1032:	0f b6       	in	r0, 0x3f	; 63
    1034:	0f 92       	push	r0
    1036:	11 24       	eor	r1, r1
    1038:	2f 93       	push	r18
    103a:	3f 93       	push	r19
    103c:	4f 93       	push	r20
    103e:	5f 93       	push	r21
    1040:	6f 93       	push	r22
    1042:	7f 93       	push	r23
    1044:	8f 93       	push	r24
    1046:	9f 93       	push	r25
    1048:	af 93       	push	r26
    104a:	bf 93       	push	r27
    104c:	ef 93       	push	r30
    104e:	ff 93       	push	r31
    1050:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    1054:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    1058:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    105c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1060:	c9 01       	movw	r24, r18
    1062:	03 2e       	mov	r0, r19
    1064:	00 0c       	add	r0, r0
    1066:	aa 0b       	sbc	r26, r26
    1068:	bb 0b       	sbc	r27, r27
    106a:	dc 01       	movw	r26, r24
    106c:	99 27       	eor	r25, r25
    106e:	88 27       	eor	r24, r24
    1070:	60 e0       	ldi	r22, 0x00	; 0
    1072:	70 e0       	ldi	r23, 0x00	; 0
    1074:	84 2b       	or	r24, r20
    1076:	95 2b       	or	r25, r21
    1078:	a6 2b       	or	r26, r22
    107a:	b7 2b       	or	r27, r23
    107c:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    1080:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    1084:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    1088:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    108c:	b0 9b       	sbis	0x16, 0	; 22
    108e:	1b c0       	rjmp	.+54     	; 0x10c6 <__vector_14+0x98>
    1090:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1094:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1098:	c9 01       	movw	r24, r18
    109a:	01 96       	adiw	r24, 0x01	; 1
    109c:	09 2e       	mov	r0, r25
    109e:	00 0c       	add	r0, r0
    10a0:	aa 0b       	sbc	r26, r26
    10a2:	bb 0b       	sbc	r27, r27
    10a4:	dc 01       	movw	r26, r24
    10a6:	99 27       	eor	r25, r25
    10a8:	88 27       	eor	r24, r24
    10aa:	60 e0       	ldi	r22, 0x00	; 0
    10ac:	70 e0       	ldi	r23, 0x00	; 0
    10ae:	84 2b       	or	r24, r20
    10b0:	95 2b       	or	r25, r21
    10b2:	a6 2b       	or	r26, r22
    10b4:	b7 2b       	or	r27, r23
    10b6:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    10ba:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    10be:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    10c2:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    10c6:	e0 91 40 02 	lds	r30, 0x0240	; 0x800240 <mtable+0x12>
    10ca:	f0 91 41 02 	lds	r31, 0x0241	; 0x800241 <mtable+0x13>
    10ce:	30 97       	sbiw	r30, 0x00	; 0
    10d0:	39 f0       	breq	.+14     	; 0x10e0 <__vector_14+0xb2>
    10d2:	69 e0       	ldi	r22, 0x09	; 9
    10d4:	70 e0       	ldi	r23, 0x00	; 0
    10d6:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <otable+0x12>
    10da:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <otable+0x13>
    10de:	09 95       	icall
    10e0:	0e 94 10 04 	call	0x820	; 0x820 <schedule>
    10e4:	ff 91       	pop	r31
    10e6:	ef 91       	pop	r30
    10e8:	bf 91       	pop	r27
    10ea:	af 91       	pop	r26
    10ec:	9f 91       	pop	r25
    10ee:	8f 91       	pop	r24
    10f0:	7f 91       	pop	r23
    10f2:	6f 91       	pop	r22
    10f4:	5f 91       	pop	r21
    10f6:	4f 91       	pop	r20
    10f8:	3f 91       	pop	r19
    10fa:	2f 91       	pop	r18
    10fc:	0f 90       	pop	r0
    10fe:	0f be       	out	0x3f, r0	; 63
    1100:	0f 90       	pop	r0
    1102:	1f 90       	pop	r1
    1104:	18 95       	reti

00001106 <__vector_15>:
    1106:	1f 92       	push	r1
    1108:	0f 92       	push	r0
    110a:	0f b6       	in	r0, 0x3f	; 63
    110c:	0f 92       	push	r0
    110e:	11 24       	eor	r1, r1
    1110:	2f 93       	push	r18
    1112:	3f 93       	push	r19
    1114:	4f 93       	push	r20
    1116:	5f 93       	push	r21
    1118:	6f 93       	push	r22
    111a:	7f 93       	push	r23
    111c:	8f 93       	push	r24
    111e:	9f 93       	push	r25
    1120:	af 93       	push	r26
    1122:	bf 93       	push	r27
    1124:	ef 93       	push	r30
    1126:	ff 93       	push	r31
    1128:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    112c:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    1130:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1134:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1138:	c9 01       	movw	r24, r18
    113a:	03 2e       	mov	r0, r19
    113c:	00 0c       	add	r0, r0
    113e:	aa 0b       	sbc	r26, r26
    1140:	bb 0b       	sbc	r27, r27
    1142:	dc 01       	movw	r26, r24
    1144:	99 27       	eor	r25, r25
    1146:	88 27       	eor	r24, r24
    1148:	60 e0       	ldi	r22, 0x00	; 0
    114a:	70 e0       	ldi	r23, 0x00	; 0
    114c:	84 2b       	or	r24, r20
    114e:	95 2b       	or	r25, r21
    1150:	a6 2b       	or	r26, r22
    1152:	b7 2b       	or	r27, r23
    1154:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    1158:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    115c:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    1160:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    1164:	b0 9b       	sbis	0x16, 0	; 22
    1166:	1b c0       	rjmp	.+54     	; 0x119e <__vector_15+0x98>
    1168:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    116c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1170:	c9 01       	movw	r24, r18
    1172:	01 96       	adiw	r24, 0x01	; 1
    1174:	09 2e       	mov	r0, r25
    1176:	00 0c       	add	r0, r0
    1178:	aa 0b       	sbc	r26, r26
    117a:	bb 0b       	sbc	r27, r27
    117c:	dc 01       	movw	r26, r24
    117e:	99 27       	eor	r25, r25
    1180:	88 27       	eor	r24, r24
    1182:	60 e0       	ldi	r22, 0x00	; 0
    1184:	70 e0       	ldi	r23, 0x00	; 0
    1186:	84 2b       	or	r24, r20
    1188:	95 2b       	or	r25, r21
    118a:	a6 2b       	or	r26, r22
    118c:	b7 2b       	or	r27, r23
    118e:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    1192:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    1196:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    119a:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    119e:	e0 91 42 02 	lds	r30, 0x0242	; 0x800242 <mtable+0x14>
    11a2:	f0 91 43 02 	lds	r31, 0x0243	; 0x800243 <mtable+0x15>
    11a6:	30 97       	sbiw	r30, 0x00	; 0
    11a8:	39 f0       	breq	.+14     	; 0x11b8 <__vector_15+0xb2>
    11aa:	6a e0       	ldi	r22, 0x0A	; 10
    11ac:	70 e0       	ldi	r23, 0x00	; 0
    11ae:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <otable+0x14>
    11b2:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <otable+0x15>
    11b6:	09 95       	icall
    11b8:	0e 94 10 04 	call	0x820	; 0x820 <schedule>
    11bc:	ff 91       	pop	r31
    11be:	ef 91       	pop	r30
    11c0:	bf 91       	pop	r27
    11c2:	af 91       	pop	r26
    11c4:	9f 91       	pop	r25
    11c6:	8f 91       	pop	r24
    11c8:	7f 91       	pop	r23
    11ca:	6f 91       	pop	r22
    11cc:	5f 91       	pop	r21
    11ce:	4f 91       	pop	r20
    11d0:	3f 91       	pop	r19
    11d2:	2f 91       	pop	r18
    11d4:	0f 90       	pop	r0
    11d6:	0f be       	out	0x3f, r0	; 63
    11d8:	0f 90       	pop	r0
    11da:	1f 90       	pop	r1
    11dc:	18 95       	reti

000011de <__vector_16>:
    11de:	1f 92       	push	r1
    11e0:	0f 92       	push	r0
    11e2:	0f b6       	in	r0, 0x3f	; 63
    11e4:	0f 92       	push	r0
    11e6:	11 24       	eor	r1, r1
    11e8:	2f 93       	push	r18
    11ea:	3f 93       	push	r19
    11ec:	4f 93       	push	r20
    11ee:	5f 93       	push	r21
    11f0:	6f 93       	push	r22
    11f2:	7f 93       	push	r23
    11f4:	8f 93       	push	r24
    11f6:	9f 93       	push	r25
    11f8:	af 93       	push	r26
    11fa:	bf 93       	push	r27
    11fc:	ef 93       	push	r30
    11fe:	ff 93       	push	r31
    1200:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    1204:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    1208:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    120c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1210:	c9 01       	movw	r24, r18
    1212:	03 2e       	mov	r0, r19
    1214:	00 0c       	add	r0, r0
    1216:	aa 0b       	sbc	r26, r26
    1218:	bb 0b       	sbc	r27, r27
    121a:	dc 01       	movw	r26, r24
    121c:	99 27       	eor	r25, r25
    121e:	88 27       	eor	r24, r24
    1220:	60 e0       	ldi	r22, 0x00	; 0
    1222:	70 e0       	ldi	r23, 0x00	; 0
    1224:	84 2b       	or	r24, r20
    1226:	95 2b       	or	r25, r21
    1228:	a6 2b       	or	r26, r22
    122a:	b7 2b       	or	r27, r23
    122c:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    1230:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    1234:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    1238:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    123c:	b0 9b       	sbis	0x16, 0	; 22
    123e:	1b c0       	rjmp	.+54     	; 0x1276 <__vector_16+0x98>
    1240:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1244:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1248:	c9 01       	movw	r24, r18
    124a:	01 96       	adiw	r24, 0x01	; 1
    124c:	09 2e       	mov	r0, r25
    124e:	00 0c       	add	r0, r0
    1250:	aa 0b       	sbc	r26, r26
    1252:	bb 0b       	sbc	r27, r27
    1254:	dc 01       	movw	r26, r24
    1256:	99 27       	eor	r25, r25
    1258:	88 27       	eor	r24, r24
    125a:	60 e0       	ldi	r22, 0x00	; 0
    125c:	70 e0       	ldi	r23, 0x00	; 0
    125e:	84 2b       	or	r24, r20
    1260:	95 2b       	or	r25, r21
    1262:	a6 2b       	or	r26, r22
    1264:	b7 2b       	or	r27, r23
    1266:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    126a:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    126e:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    1272:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    1276:	e0 91 44 02 	lds	r30, 0x0244	; 0x800244 <mtable+0x16>
    127a:	f0 91 45 02 	lds	r31, 0x0245	; 0x800245 <mtable+0x17>
    127e:	30 97       	sbiw	r30, 0x00	; 0
    1280:	39 f0       	breq	.+14     	; 0x1290 <__vector_16+0xb2>
    1282:	6b e0       	ldi	r22, 0x0B	; 11
    1284:	70 e0       	ldi	r23, 0x00	; 0
    1286:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <otable+0x16>
    128a:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <otable+0x17>
    128e:	09 95       	icall
    1290:	0e 94 10 04 	call	0x820	; 0x820 <schedule>
    1294:	ff 91       	pop	r31
    1296:	ef 91       	pop	r30
    1298:	bf 91       	pop	r27
    129a:	af 91       	pop	r26
    129c:	9f 91       	pop	r25
    129e:	8f 91       	pop	r24
    12a0:	7f 91       	pop	r23
    12a2:	6f 91       	pop	r22
    12a4:	5f 91       	pop	r21
    12a6:	4f 91       	pop	r20
    12a8:	3f 91       	pop	r19
    12aa:	2f 91       	pop	r18
    12ac:	0f 90       	pop	r0
    12ae:	0f be       	out	0x3f, r0	; 63
    12b0:	0f 90       	pop	r0
    12b2:	1f 90       	pop	r1
    12b4:	18 95       	reti

000012b6 <__vector_17>:
    12b6:	1f 92       	push	r1
    12b8:	0f 92       	push	r0
    12ba:	0f b6       	in	r0, 0x3f	; 63
    12bc:	0f 92       	push	r0
    12be:	11 24       	eor	r1, r1
    12c0:	2f 93       	push	r18
    12c2:	3f 93       	push	r19
    12c4:	4f 93       	push	r20
    12c6:	5f 93       	push	r21
    12c8:	6f 93       	push	r22
    12ca:	7f 93       	push	r23
    12cc:	8f 93       	push	r24
    12ce:	9f 93       	push	r25
    12d0:	af 93       	push	r26
    12d2:	bf 93       	push	r27
    12d4:	ef 93       	push	r30
    12d6:	ff 93       	push	r31
    12d8:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    12dc:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    12e0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    12e4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    12e8:	c9 01       	movw	r24, r18
    12ea:	03 2e       	mov	r0, r19
    12ec:	00 0c       	add	r0, r0
    12ee:	aa 0b       	sbc	r26, r26
    12f0:	bb 0b       	sbc	r27, r27
    12f2:	dc 01       	movw	r26, r24
    12f4:	99 27       	eor	r25, r25
    12f6:	88 27       	eor	r24, r24
    12f8:	60 e0       	ldi	r22, 0x00	; 0
    12fa:	70 e0       	ldi	r23, 0x00	; 0
    12fc:	84 2b       	or	r24, r20
    12fe:	95 2b       	or	r25, r21
    1300:	a6 2b       	or	r26, r22
    1302:	b7 2b       	or	r27, r23
    1304:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    1308:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    130c:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    1310:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    1314:	b0 9b       	sbis	0x16, 0	; 22
    1316:	1b c0       	rjmp	.+54     	; 0x134e <__vector_17+0x98>
    1318:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    131c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1320:	c9 01       	movw	r24, r18
    1322:	01 96       	adiw	r24, 0x01	; 1
    1324:	09 2e       	mov	r0, r25
    1326:	00 0c       	add	r0, r0
    1328:	aa 0b       	sbc	r26, r26
    132a:	bb 0b       	sbc	r27, r27
    132c:	dc 01       	movw	r26, r24
    132e:	99 27       	eor	r25, r25
    1330:	88 27       	eor	r24, r24
    1332:	60 e0       	ldi	r22, 0x00	; 0
    1334:	70 e0       	ldi	r23, 0x00	; 0
    1336:	84 2b       	or	r24, r20
    1338:	95 2b       	or	r25, r21
    133a:	a6 2b       	or	r26, r22
    133c:	b7 2b       	or	r27, r23
    133e:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    1342:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    1346:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    134a:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    134e:	e0 91 46 02 	lds	r30, 0x0246	; 0x800246 <mtable+0x18>
    1352:	f0 91 47 02 	lds	r31, 0x0247	; 0x800247 <mtable+0x19>
    1356:	30 97       	sbiw	r30, 0x00	; 0
    1358:	39 f0       	breq	.+14     	; 0x1368 <__vector_17+0xb2>
    135a:	6c e0       	ldi	r22, 0x0C	; 12
    135c:	70 e0       	ldi	r23, 0x00	; 0
    135e:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <otable+0x18>
    1362:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <otable+0x19>
    1366:	09 95       	icall
    1368:	0e 94 10 04 	call	0x820	; 0x820 <schedule>
    136c:	ff 91       	pop	r31
    136e:	ef 91       	pop	r30
    1370:	bf 91       	pop	r27
    1372:	af 91       	pop	r26
    1374:	9f 91       	pop	r25
    1376:	8f 91       	pop	r24
    1378:	7f 91       	pop	r23
    137a:	6f 91       	pop	r22
    137c:	5f 91       	pop	r21
    137e:	4f 91       	pop	r20
    1380:	3f 91       	pop	r19
    1382:	2f 91       	pop	r18
    1384:	0f 90       	pop	r0
    1386:	0f be       	out	0x3f, r0	; 63
    1388:	0f 90       	pop	r0
    138a:	1f 90       	pop	r1
    138c:	18 95       	reti

0000138e <__vector_18>:
    138e:	1f 92       	push	r1
    1390:	0f 92       	push	r0
    1392:	0f b6       	in	r0, 0x3f	; 63
    1394:	0f 92       	push	r0
    1396:	11 24       	eor	r1, r1
    1398:	2f 93       	push	r18
    139a:	3f 93       	push	r19
    139c:	4f 93       	push	r20
    139e:	5f 93       	push	r21
    13a0:	6f 93       	push	r22
    13a2:	7f 93       	push	r23
    13a4:	8f 93       	push	r24
    13a6:	9f 93       	push	r25
    13a8:	af 93       	push	r26
    13aa:	bf 93       	push	r27
    13ac:	ef 93       	push	r30
    13ae:	ff 93       	push	r31
    13b0:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    13b4:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    13b8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    13bc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    13c0:	c9 01       	movw	r24, r18
    13c2:	03 2e       	mov	r0, r19
    13c4:	00 0c       	add	r0, r0
    13c6:	aa 0b       	sbc	r26, r26
    13c8:	bb 0b       	sbc	r27, r27
    13ca:	dc 01       	movw	r26, r24
    13cc:	99 27       	eor	r25, r25
    13ce:	88 27       	eor	r24, r24
    13d0:	60 e0       	ldi	r22, 0x00	; 0
    13d2:	70 e0       	ldi	r23, 0x00	; 0
    13d4:	84 2b       	or	r24, r20
    13d6:	95 2b       	or	r25, r21
    13d8:	a6 2b       	or	r26, r22
    13da:	b7 2b       	or	r27, r23
    13dc:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    13e0:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    13e4:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    13e8:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    13ec:	b0 9b       	sbis	0x16, 0	; 22
    13ee:	1b c0       	rjmp	.+54     	; 0x1426 <__vector_18+0x98>
    13f0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    13f4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    13f8:	c9 01       	movw	r24, r18
    13fa:	01 96       	adiw	r24, 0x01	; 1
    13fc:	09 2e       	mov	r0, r25
    13fe:	00 0c       	add	r0, r0
    1400:	aa 0b       	sbc	r26, r26
    1402:	bb 0b       	sbc	r27, r27
    1404:	dc 01       	movw	r26, r24
    1406:	99 27       	eor	r25, r25
    1408:	88 27       	eor	r24, r24
    140a:	60 e0       	ldi	r22, 0x00	; 0
    140c:	70 e0       	ldi	r23, 0x00	; 0
    140e:	84 2b       	or	r24, r20
    1410:	95 2b       	or	r25, r21
    1412:	a6 2b       	or	r26, r22
    1414:	b7 2b       	or	r27, r23
    1416:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    141a:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    141e:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    1422:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    1426:	e0 91 48 02 	lds	r30, 0x0248	; 0x800248 <mtable+0x1a>
    142a:	f0 91 49 02 	lds	r31, 0x0249	; 0x800249 <mtable+0x1b>
    142e:	30 97       	sbiw	r30, 0x00	; 0
    1430:	39 f0       	breq	.+14     	; 0x1440 <__vector_18+0xb2>
    1432:	6d e0       	ldi	r22, 0x0D	; 13
    1434:	70 e0       	ldi	r23, 0x00	; 0
    1436:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <otable+0x1a>
    143a:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <otable+0x1b>
    143e:	09 95       	icall
    1440:	0e 94 10 04 	call	0x820	; 0x820 <schedule>
    1444:	ff 91       	pop	r31
    1446:	ef 91       	pop	r30
    1448:	bf 91       	pop	r27
    144a:	af 91       	pop	r26
    144c:	9f 91       	pop	r25
    144e:	8f 91       	pop	r24
    1450:	7f 91       	pop	r23
    1452:	6f 91       	pop	r22
    1454:	5f 91       	pop	r21
    1456:	4f 91       	pop	r20
    1458:	3f 91       	pop	r19
    145a:	2f 91       	pop	r18
    145c:	0f 90       	pop	r0
    145e:	0f be       	out	0x3f, r0	; 63
    1460:	0f 90       	pop	r0
    1462:	1f 90       	pop	r1
    1464:	18 95       	reti

00001466 <__vector_19>:
    1466:	1f 92       	push	r1
    1468:	0f 92       	push	r0
    146a:	0f b6       	in	r0, 0x3f	; 63
    146c:	0f 92       	push	r0
    146e:	11 24       	eor	r1, r1
    1470:	2f 93       	push	r18
    1472:	3f 93       	push	r19
    1474:	4f 93       	push	r20
    1476:	5f 93       	push	r21
    1478:	6f 93       	push	r22
    147a:	7f 93       	push	r23
    147c:	8f 93       	push	r24
    147e:	9f 93       	push	r25
    1480:	af 93       	push	r26
    1482:	bf 93       	push	r27
    1484:	ef 93       	push	r30
    1486:	ff 93       	push	r31
    1488:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    148c:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    1490:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1494:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1498:	c9 01       	movw	r24, r18
    149a:	03 2e       	mov	r0, r19
    149c:	00 0c       	add	r0, r0
    149e:	aa 0b       	sbc	r26, r26
    14a0:	bb 0b       	sbc	r27, r27
    14a2:	dc 01       	movw	r26, r24
    14a4:	99 27       	eor	r25, r25
    14a6:	88 27       	eor	r24, r24
    14a8:	60 e0       	ldi	r22, 0x00	; 0
    14aa:	70 e0       	ldi	r23, 0x00	; 0
    14ac:	84 2b       	or	r24, r20
    14ae:	95 2b       	or	r25, r21
    14b0:	a6 2b       	or	r26, r22
    14b2:	b7 2b       	or	r27, r23
    14b4:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    14b8:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    14bc:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    14c0:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    14c4:	b0 9b       	sbis	0x16, 0	; 22
    14c6:	1b c0       	rjmp	.+54     	; 0x14fe <__vector_19+0x98>
    14c8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    14cc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    14d0:	c9 01       	movw	r24, r18
    14d2:	01 96       	adiw	r24, 0x01	; 1
    14d4:	09 2e       	mov	r0, r25
    14d6:	00 0c       	add	r0, r0
    14d8:	aa 0b       	sbc	r26, r26
    14da:	bb 0b       	sbc	r27, r27
    14dc:	dc 01       	movw	r26, r24
    14de:	99 27       	eor	r25, r25
    14e0:	88 27       	eor	r24, r24
    14e2:	60 e0       	ldi	r22, 0x00	; 0
    14e4:	70 e0       	ldi	r23, 0x00	; 0
    14e6:	84 2b       	or	r24, r20
    14e8:	95 2b       	or	r25, r21
    14ea:	a6 2b       	or	r26, r22
    14ec:	b7 2b       	or	r27, r23
    14ee:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    14f2:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    14f6:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    14fa:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    14fe:	e0 91 4a 02 	lds	r30, 0x024A	; 0x80024a <mtable+0x1c>
    1502:	f0 91 4b 02 	lds	r31, 0x024B	; 0x80024b <mtable+0x1d>
    1506:	30 97       	sbiw	r30, 0x00	; 0
    1508:	39 f0       	breq	.+14     	; 0x1518 <__vector_19+0xb2>
    150a:	6e e0       	ldi	r22, 0x0E	; 14
    150c:	70 e0       	ldi	r23, 0x00	; 0
    150e:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <otable+0x1c>
    1512:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <otable+0x1d>
    1516:	09 95       	icall
    1518:	0e 94 10 04 	call	0x820	; 0x820 <schedule>
    151c:	ff 91       	pop	r31
    151e:	ef 91       	pop	r30
    1520:	bf 91       	pop	r27
    1522:	af 91       	pop	r26
    1524:	9f 91       	pop	r25
    1526:	8f 91       	pop	r24
    1528:	7f 91       	pop	r23
    152a:	6f 91       	pop	r22
    152c:	5f 91       	pop	r21
    152e:	4f 91       	pop	r20
    1530:	3f 91       	pop	r19
    1532:	2f 91       	pop	r18
    1534:	0f 90       	pop	r0
    1536:	0f be       	out	0x3f, r0	; 63
    1538:	0f 90       	pop	r0
    153a:	1f 90       	pop	r1
    153c:	18 95       	reti

0000153e <__vector_20>:
    153e:	1f 92       	push	r1
    1540:	0f 92       	push	r0
    1542:	0f b6       	in	r0, 0x3f	; 63
    1544:	0f 92       	push	r0
    1546:	11 24       	eor	r1, r1
    1548:	2f 93       	push	r18
    154a:	3f 93       	push	r19
    154c:	4f 93       	push	r20
    154e:	5f 93       	push	r21
    1550:	6f 93       	push	r22
    1552:	7f 93       	push	r23
    1554:	8f 93       	push	r24
    1556:	9f 93       	push	r25
    1558:	af 93       	push	r26
    155a:	bf 93       	push	r27
    155c:	ef 93       	push	r30
    155e:	ff 93       	push	r31
    1560:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    1564:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    1568:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    156c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1570:	c9 01       	movw	r24, r18
    1572:	03 2e       	mov	r0, r19
    1574:	00 0c       	add	r0, r0
    1576:	aa 0b       	sbc	r26, r26
    1578:	bb 0b       	sbc	r27, r27
    157a:	dc 01       	movw	r26, r24
    157c:	99 27       	eor	r25, r25
    157e:	88 27       	eor	r24, r24
    1580:	60 e0       	ldi	r22, 0x00	; 0
    1582:	70 e0       	ldi	r23, 0x00	; 0
    1584:	84 2b       	or	r24, r20
    1586:	95 2b       	or	r25, r21
    1588:	a6 2b       	or	r26, r22
    158a:	b7 2b       	or	r27, r23
    158c:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    1590:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    1594:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    1598:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    159c:	b0 9b       	sbis	0x16, 0	; 22
    159e:	1b c0       	rjmp	.+54     	; 0x15d6 <__vector_20+0x98>
    15a0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    15a4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    15a8:	c9 01       	movw	r24, r18
    15aa:	01 96       	adiw	r24, 0x01	; 1
    15ac:	09 2e       	mov	r0, r25
    15ae:	00 0c       	add	r0, r0
    15b0:	aa 0b       	sbc	r26, r26
    15b2:	bb 0b       	sbc	r27, r27
    15b4:	dc 01       	movw	r26, r24
    15b6:	99 27       	eor	r25, r25
    15b8:	88 27       	eor	r24, r24
    15ba:	60 e0       	ldi	r22, 0x00	; 0
    15bc:	70 e0       	ldi	r23, 0x00	; 0
    15be:	84 2b       	or	r24, r20
    15c0:	95 2b       	or	r25, r21
    15c2:	a6 2b       	or	r26, r22
    15c4:	b7 2b       	or	r27, r23
    15c6:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    15ca:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    15ce:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    15d2:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    15d6:	e0 91 4c 02 	lds	r30, 0x024C	; 0x80024c <mtable+0x1e>
    15da:	f0 91 4d 02 	lds	r31, 0x024D	; 0x80024d <mtable+0x1f>
    15de:	30 97       	sbiw	r30, 0x00	; 0
    15e0:	39 f0       	breq	.+14     	; 0x15f0 <__vector_20+0xb2>
    15e2:	6f e0       	ldi	r22, 0x0F	; 15
    15e4:	70 e0       	ldi	r23, 0x00	; 0
    15e6:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <otable+0x1e>
    15ea:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <otable+0x1f>
    15ee:	09 95       	icall
    15f0:	0e 94 10 04 	call	0x820	; 0x820 <schedule>
    15f4:	ff 91       	pop	r31
    15f6:	ef 91       	pop	r30
    15f8:	bf 91       	pop	r27
    15fa:	af 91       	pop	r26
    15fc:	9f 91       	pop	r25
    15fe:	8f 91       	pop	r24
    1600:	7f 91       	pop	r23
    1602:	6f 91       	pop	r22
    1604:	5f 91       	pop	r21
    1606:	4f 91       	pop	r20
    1608:	3f 91       	pop	r19
    160a:	2f 91       	pop	r18
    160c:	0f 90       	pop	r0
    160e:	0f be       	out	0x3f, r0	; 63
    1610:	0f 90       	pop	r0
    1612:	1f 90       	pop	r1
    1614:	18 95       	reti

00001616 <__vector_21>:
    1616:	1f 92       	push	r1
    1618:	0f 92       	push	r0
    161a:	0f b6       	in	r0, 0x3f	; 63
    161c:	0f 92       	push	r0
    161e:	11 24       	eor	r1, r1
    1620:	2f 93       	push	r18
    1622:	3f 93       	push	r19
    1624:	4f 93       	push	r20
    1626:	5f 93       	push	r21
    1628:	6f 93       	push	r22
    162a:	7f 93       	push	r23
    162c:	8f 93       	push	r24
    162e:	9f 93       	push	r25
    1630:	af 93       	push	r26
    1632:	bf 93       	push	r27
    1634:	ef 93       	push	r30
    1636:	ff 93       	push	r31
    1638:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    163c:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    1640:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1644:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1648:	c9 01       	movw	r24, r18
    164a:	03 2e       	mov	r0, r19
    164c:	00 0c       	add	r0, r0
    164e:	aa 0b       	sbc	r26, r26
    1650:	bb 0b       	sbc	r27, r27
    1652:	dc 01       	movw	r26, r24
    1654:	99 27       	eor	r25, r25
    1656:	88 27       	eor	r24, r24
    1658:	60 e0       	ldi	r22, 0x00	; 0
    165a:	70 e0       	ldi	r23, 0x00	; 0
    165c:	84 2b       	or	r24, r20
    165e:	95 2b       	or	r25, r21
    1660:	a6 2b       	or	r26, r22
    1662:	b7 2b       	or	r27, r23
    1664:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    1668:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    166c:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    1670:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    1674:	b0 9b       	sbis	0x16, 0	; 22
    1676:	1b c0       	rjmp	.+54     	; 0x16ae <__vector_21+0x98>
    1678:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    167c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1680:	c9 01       	movw	r24, r18
    1682:	01 96       	adiw	r24, 0x01	; 1
    1684:	09 2e       	mov	r0, r25
    1686:	00 0c       	add	r0, r0
    1688:	aa 0b       	sbc	r26, r26
    168a:	bb 0b       	sbc	r27, r27
    168c:	dc 01       	movw	r26, r24
    168e:	99 27       	eor	r25, r25
    1690:	88 27       	eor	r24, r24
    1692:	60 e0       	ldi	r22, 0x00	; 0
    1694:	70 e0       	ldi	r23, 0x00	; 0
    1696:	84 2b       	or	r24, r20
    1698:	95 2b       	or	r25, r21
    169a:	a6 2b       	or	r26, r22
    169c:	b7 2b       	or	r27, r23
    169e:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    16a2:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    16a6:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    16aa:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    16ae:	e0 91 4e 02 	lds	r30, 0x024E	; 0x80024e <mtable+0x20>
    16b2:	f0 91 4f 02 	lds	r31, 0x024F	; 0x80024f <mtable+0x21>
    16b6:	30 97       	sbiw	r30, 0x00	; 0
    16b8:	39 f0       	breq	.+14     	; 0x16c8 <__vector_21+0xb2>
    16ba:	60 e1       	ldi	r22, 0x10	; 16
    16bc:	70 e0       	ldi	r23, 0x00	; 0
    16be:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <otable+0x20>
    16c2:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <otable+0x21>
    16c6:	09 95       	icall
    16c8:	0e 94 10 04 	call	0x820	; 0x820 <schedule>
    16cc:	ff 91       	pop	r31
    16ce:	ef 91       	pop	r30
    16d0:	bf 91       	pop	r27
    16d2:	af 91       	pop	r26
    16d4:	9f 91       	pop	r25
    16d6:	8f 91       	pop	r24
    16d8:	7f 91       	pop	r23
    16da:	6f 91       	pop	r22
    16dc:	5f 91       	pop	r21
    16de:	4f 91       	pop	r20
    16e0:	3f 91       	pop	r19
    16e2:	2f 91       	pop	r18
    16e4:	0f 90       	pop	r0
    16e6:	0f be       	out	0x3f, r0	; 63
    16e8:	0f 90       	pop	r0
    16ea:	1f 90       	pop	r1
    16ec:	18 95       	reti

000016ee <__vector_22>:
    16ee:	1f 92       	push	r1
    16f0:	0f 92       	push	r0
    16f2:	0f b6       	in	r0, 0x3f	; 63
    16f4:	0f 92       	push	r0
    16f6:	11 24       	eor	r1, r1
    16f8:	2f 93       	push	r18
    16fa:	3f 93       	push	r19
    16fc:	4f 93       	push	r20
    16fe:	5f 93       	push	r21
    1700:	6f 93       	push	r22
    1702:	7f 93       	push	r23
    1704:	8f 93       	push	r24
    1706:	9f 93       	push	r25
    1708:	af 93       	push	r26
    170a:	bf 93       	push	r27
    170c:	ef 93       	push	r30
    170e:	ff 93       	push	r31
    1710:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    1714:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    1718:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    171c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1720:	c9 01       	movw	r24, r18
    1722:	03 2e       	mov	r0, r19
    1724:	00 0c       	add	r0, r0
    1726:	aa 0b       	sbc	r26, r26
    1728:	bb 0b       	sbc	r27, r27
    172a:	dc 01       	movw	r26, r24
    172c:	99 27       	eor	r25, r25
    172e:	88 27       	eor	r24, r24
    1730:	60 e0       	ldi	r22, 0x00	; 0
    1732:	70 e0       	ldi	r23, 0x00	; 0
    1734:	84 2b       	or	r24, r20
    1736:	95 2b       	or	r25, r21
    1738:	a6 2b       	or	r26, r22
    173a:	b7 2b       	or	r27, r23
    173c:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    1740:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    1744:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    1748:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    174c:	b0 9b       	sbis	0x16, 0	; 22
    174e:	1b c0       	rjmp	.+54     	; 0x1786 <__vector_22+0x98>
    1750:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1754:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1758:	c9 01       	movw	r24, r18
    175a:	01 96       	adiw	r24, 0x01	; 1
    175c:	09 2e       	mov	r0, r25
    175e:	00 0c       	add	r0, r0
    1760:	aa 0b       	sbc	r26, r26
    1762:	bb 0b       	sbc	r27, r27
    1764:	dc 01       	movw	r26, r24
    1766:	99 27       	eor	r25, r25
    1768:	88 27       	eor	r24, r24
    176a:	60 e0       	ldi	r22, 0x00	; 0
    176c:	70 e0       	ldi	r23, 0x00	; 0
    176e:	84 2b       	or	r24, r20
    1770:	95 2b       	or	r25, r21
    1772:	a6 2b       	or	r26, r22
    1774:	b7 2b       	or	r27, r23
    1776:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    177a:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    177e:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    1782:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    1786:	e0 91 50 02 	lds	r30, 0x0250	; 0x800250 <mtable+0x22>
    178a:	f0 91 51 02 	lds	r31, 0x0251	; 0x800251 <mtable+0x23>
    178e:	30 97       	sbiw	r30, 0x00	; 0
    1790:	39 f0       	breq	.+14     	; 0x17a0 <__vector_22+0xb2>
    1792:	61 e1       	ldi	r22, 0x11	; 17
    1794:	70 e0       	ldi	r23, 0x00	; 0
    1796:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <otable+0x22>
    179a:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <otable+0x23>
    179e:	09 95       	icall
    17a0:	0e 94 10 04 	call	0x820	; 0x820 <schedule>
    17a4:	ff 91       	pop	r31
    17a6:	ef 91       	pop	r30
    17a8:	bf 91       	pop	r27
    17aa:	af 91       	pop	r26
    17ac:	9f 91       	pop	r25
    17ae:	8f 91       	pop	r24
    17b0:	7f 91       	pop	r23
    17b2:	6f 91       	pop	r22
    17b4:	5f 91       	pop	r21
    17b6:	4f 91       	pop	r20
    17b8:	3f 91       	pop	r19
    17ba:	2f 91       	pop	r18
    17bc:	0f 90       	pop	r0
    17be:	0f be       	out	0x3f, r0	; 63
    17c0:	0f 90       	pop	r0
    17c2:	1f 90       	pop	r1
    17c4:	18 95       	reti

000017c6 <enqueueByDeadline>:
    17c6:	ef 92       	push	r14
    17c8:	ff 92       	push	r15
    17ca:	0f 93       	push	r16
    17cc:	1f 93       	push	r17
    17ce:	cf 93       	push	r28
    17d0:	df 93       	push	r29
    17d2:	7b 01       	movw	r14, r22
    17d4:	eb 01       	movw	r28, r22
    17d6:	a8 81       	ld	r26, Y
    17d8:	b9 81       	ldd	r27, Y+1	; 0x01
    17da:	10 97       	sbiw	r26, 0x00	; 0
    17dc:	61 f1       	breq	.+88     	; 0x1836 <enqueueByDeadline+0x70>
    17de:	fc 01       	movw	r30, r24
    17e0:	06 81       	ldd	r16, Z+6	; 0x06
    17e2:	17 81       	ldd	r17, Z+7	; 0x07
    17e4:	20 85       	ldd	r18, Z+8	; 0x08
    17e6:	31 85       	ldd	r19, Z+9	; 0x09
    17e8:	16 96       	adiw	r26, 0x06	; 6
    17ea:	4d 91       	ld	r20, X+
    17ec:	5d 91       	ld	r21, X+
    17ee:	6d 91       	ld	r22, X+
    17f0:	7c 91       	ld	r23, X
    17f2:	19 97       	sbiw	r26, 0x09	; 9
    17f4:	04 17       	cp	r16, r20
    17f6:	15 07       	cpc	r17, r21
    17f8:	26 07       	cpc	r18, r22
    17fa:	37 07       	cpc	r19, r23
    17fc:	14 f4       	brge	.+4      	; 0x1802 <enqueueByDeadline+0x3c>
    17fe:	1b c0       	rjmp	.+54     	; 0x1836 <enqueueByDeadline+0x70>
    1800:	df 01       	movw	r26, r30
    1802:	ed 91       	ld	r30, X+
    1804:	fc 91       	ld	r31, X
    1806:	11 97       	sbiw	r26, 0x01	; 1
    1808:	30 97       	sbiw	r30, 0x00	; 0
    180a:	49 f0       	breq	.+18     	; 0x181e <enqueueByDeadline+0x58>
    180c:	46 81       	ldd	r20, Z+6	; 0x06
    180e:	57 81       	ldd	r21, Z+7	; 0x07
    1810:	60 85       	ldd	r22, Z+8	; 0x08
    1812:	71 85       	ldd	r23, Z+9	; 0x09
    1814:	04 17       	cp	r16, r20
    1816:	15 07       	cpc	r17, r21
    1818:	26 07       	cpc	r18, r22
    181a:	37 07       	cpc	r19, r23
    181c:	8c f7       	brge	.-30     	; 0x1800 <enqueueByDeadline+0x3a>
    181e:	ec 01       	movw	r28, r24
    1820:	f9 83       	std	Y+1, r31	; 0x01
    1822:	e8 83       	st	Y, r30
    1824:	10 97       	sbiw	r26, 0x00	; 0
    1826:	21 f4       	brne	.+8      	; 0x1830 <enqueueByDeadline+0x6a>
    1828:	f7 01       	movw	r30, r14
    182a:	91 83       	std	Z+1, r25	; 0x01
    182c:	80 83       	st	Z, r24
    182e:	07 c0       	rjmp	.+14     	; 0x183e <enqueueByDeadline+0x78>
    1830:	8d 93       	st	X+, r24
    1832:	9c 93       	st	X, r25
    1834:	04 c0       	rjmp	.+8      	; 0x183e <enqueueByDeadline+0x78>
    1836:	ec 01       	movw	r28, r24
    1838:	b9 83       	std	Y+1, r27	; 0x01
    183a:	a8 83       	st	Y, r26
    183c:	f5 cf       	rjmp	.-22     	; 0x1828 <enqueueByDeadline+0x62>
    183e:	df 91       	pop	r29
    1840:	cf 91       	pop	r28
    1842:	1f 91       	pop	r17
    1844:	0f 91       	pop	r16
    1846:	ff 90       	pop	r15
    1848:	ef 90       	pop	r14
    184a:	08 95       	ret

0000184c <enqueueByBaseline>:
    184c:	ef 92       	push	r14
    184e:	ff 92       	push	r15
    1850:	0f 93       	push	r16
    1852:	1f 93       	push	r17
    1854:	cf 93       	push	r28
    1856:	df 93       	push	r29
    1858:	7b 01       	movw	r14, r22
    185a:	eb 01       	movw	r28, r22
    185c:	a8 81       	ld	r26, Y
    185e:	b9 81       	ldd	r27, Y+1	; 0x01
    1860:	10 97       	sbiw	r26, 0x00	; 0
    1862:	61 f1       	breq	.+88     	; 0x18bc <enqueueByBaseline+0x70>
    1864:	fc 01       	movw	r30, r24
    1866:	02 81       	ldd	r16, Z+2	; 0x02
    1868:	13 81       	ldd	r17, Z+3	; 0x03
    186a:	24 81       	ldd	r18, Z+4	; 0x04
    186c:	35 81       	ldd	r19, Z+5	; 0x05
    186e:	12 96       	adiw	r26, 0x02	; 2
    1870:	4d 91       	ld	r20, X+
    1872:	5d 91       	ld	r21, X+
    1874:	6d 91       	ld	r22, X+
    1876:	7c 91       	ld	r23, X
    1878:	15 97       	sbiw	r26, 0x05	; 5
    187a:	04 17       	cp	r16, r20
    187c:	15 07       	cpc	r17, r21
    187e:	26 07       	cpc	r18, r22
    1880:	37 07       	cpc	r19, r23
    1882:	14 f4       	brge	.+4      	; 0x1888 <enqueueByBaseline+0x3c>
    1884:	1b c0       	rjmp	.+54     	; 0x18bc <enqueueByBaseline+0x70>
    1886:	df 01       	movw	r26, r30
    1888:	ed 91       	ld	r30, X+
    188a:	fc 91       	ld	r31, X
    188c:	11 97       	sbiw	r26, 0x01	; 1
    188e:	30 97       	sbiw	r30, 0x00	; 0
    1890:	49 f0       	breq	.+18     	; 0x18a4 <enqueueByBaseline+0x58>
    1892:	42 81       	ldd	r20, Z+2	; 0x02
    1894:	53 81       	ldd	r21, Z+3	; 0x03
    1896:	64 81       	ldd	r22, Z+4	; 0x04
    1898:	75 81       	ldd	r23, Z+5	; 0x05
    189a:	04 17       	cp	r16, r20
    189c:	15 07       	cpc	r17, r21
    189e:	26 07       	cpc	r18, r22
    18a0:	37 07       	cpc	r19, r23
    18a2:	8c f7       	brge	.-30     	; 0x1886 <enqueueByBaseline+0x3a>
    18a4:	ec 01       	movw	r28, r24
    18a6:	f9 83       	std	Y+1, r31	; 0x01
    18a8:	e8 83       	st	Y, r30
    18aa:	10 97       	sbiw	r26, 0x00	; 0
    18ac:	21 f4       	brne	.+8      	; 0x18b6 <enqueueByBaseline+0x6a>
    18ae:	f7 01       	movw	r30, r14
    18b0:	91 83       	std	Z+1, r25	; 0x01
    18b2:	80 83       	st	Z, r24
    18b4:	07 c0       	rjmp	.+14     	; 0x18c4 <enqueueByBaseline+0x78>
    18b6:	8d 93       	st	X+, r24
    18b8:	9c 93       	st	X, r25
    18ba:	04 c0       	rjmp	.+8      	; 0x18c4 <enqueueByBaseline+0x78>
    18bc:	ec 01       	movw	r28, r24
    18be:	b9 83       	std	Y+1, r27	; 0x01
    18c0:	a8 83       	st	Y, r26
    18c2:	f5 cf       	rjmp	.-22     	; 0x18ae <enqueueByBaseline+0x62>
    18c4:	df 91       	pop	r29
    18c6:	cf 91       	pop	r28
    18c8:	1f 91       	pop	r17
    18ca:	0f 91       	pop	r16
    18cc:	ff 90       	pop	r15
    18ce:	ef 90       	pop	r14
    18d0:	08 95       	ret

000018d2 <dequeue>:
    18d2:	dc 01       	movw	r26, r24
    18d4:	ed 91       	ld	r30, X+
    18d6:	fc 91       	ld	r31, X
    18d8:	11 97       	sbiw	r26, 0x01	; 1
    18da:	30 97       	sbiw	r30, 0x00	; 0
    18dc:	59 f4       	brne	.+22     	; 0x18f4 <dequeue+0x22>
    18de:	8f ef       	ldi	r24, 0xFF	; 255
    18e0:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
    18e4:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
    18e8:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	83 bf       	out	0x33, r24	; 51
    18f0:	88 95       	sleep
    18f2:	fd cf       	rjmp	.-6      	; 0x18ee <dequeue+0x1c>
    18f4:	20 81       	ld	r18, Z
    18f6:	31 81       	ldd	r19, Z+1	; 0x01
    18f8:	2d 93       	st	X+, r18
    18fa:	3c 93       	st	X, r19
    18fc:	cf 01       	movw	r24, r30
    18fe:	08 95       	ret

00001900 <__vector_9>:
    1900:	1f 92       	push	r1
    1902:	0f 92       	push	r0
    1904:	0f b6       	in	r0, 0x3f	; 63
    1906:	0f 92       	push	r0
    1908:	11 24       	eor	r1, r1
    190a:	2f 93       	push	r18
    190c:	3f 93       	push	r19
    190e:	4f 93       	push	r20
    1910:	5f 93       	push	r21
    1912:	6f 93       	push	r22
    1914:	7f 93       	push	r23
    1916:	8f 93       	push	r24
    1918:	9f 93       	push	r25
    191a:	ef 93       	push	r30
    191c:	ff 93       	push	r31
    191e:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <overflows>
    1922:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <overflows+0x1>
    1926:	01 96       	adiw	r24, 0x01	; 1
    1928:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <overflows+0x1>
    192c:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <overflows>
    1930:	e0 91 92 01 	lds	r30, 0x0192	; 0x800192 <timerQ>
    1934:	f0 91 93 01 	lds	r31, 0x0193	; 0x800193 <timerQ+0x1>
    1938:	30 97       	sbiw	r30, 0x00	; 0
    193a:	01 f1       	breq	.+64     	; 0x197c <__vector_9+0x7c>
    193c:	42 81       	ldd	r20, Z+2	; 0x02
    193e:	53 81       	ldd	r21, Z+3	; 0x03
    1940:	64 81       	ldd	r22, Z+4	; 0x04
    1942:	75 81       	ldd	r23, Z+5	; 0x05
    1944:	86 17       	cp	r24, r22
    1946:	97 07       	cpc	r25, r23
    1948:	c9 f4       	brne	.+50     	; 0x197c <__vector_9+0x7c>
    194a:	ca 01       	movw	r24, r20
    194c:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1950:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1954:	42 1b       	sub	r20, r18
    1956:	53 0b       	sbc	r21, r19
    1958:	41 30       	cpi	r20, 0x01	; 1
    195a:	51 05       	cpc	r21, r1
    195c:	29 f4       	brne	.+10     	; 0x1968 <__vector_9+0x68>
    195e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1962:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1966:	01 96       	adiw	r24, 0x01	; 1
    1968:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    196c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1970:	ef e6       	ldi	r30, 0x6F	; 111
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
    1976:	82 60       	ori	r24, 0x02	; 2
    1978:	80 83       	st	Z, r24
    197a:	05 c0       	rjmp	.+10     	; 0x1986 <__vector_9+0x86>
    197c:	ef e6       	ldi	r30, 0x6F	; 111
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	80 81       	ld	r24, Z
    1982:	8d 7f       	andi	r24, 0xFD	; 253
    1984:	80 83       	st	Z, r24
    1986:	ff 91       	pop	r31
    1988:	ef 91       	pop	r30
    198a:	9f 91       	pop	r25
    198c:	8f 91       	pop	r24
    198e:	7f 91       	pop	r23
    1990:	6f 91       	pop	r22
    1992:	5f 91       	pop	r21
    1994:	4f 91       	pop	r20
    1996:	3f 91       	pop	r19
    1998:	2f 91       	pop	r18
    199a:	0f 90       	pop	r0
    199c:	0f be       	out	0x3f, r0	; 63
    199e:	0f 90       	pop	r0
    19a0:	1f 90       	pop	r1
    19a2:	18 95       	reti

000019a4 <__vector_7>:
    19a4:	1f 92       	push	r1
    19a6:	0f 92       	push	r0
    19a8:	0f b6       	in	r0, 0x3f	; 63
    19aa:	0f 92       	push	r0
    19ac:	11 24       	eor	r1, r1
    19ae:	cf 92       	push	r12
    19b0:	df 92       	push	r13
    19b2:	ef 92       	push	r14
    19b4:	ff 92       	push	r15
    19b6:	2f 93       	push	r18
    19b8:	3f 93       	push	r19
    19ba:	4f 93       	push	r20
    19bc:	5f 93       	push	r21
    19be:	6f 93       	push	r22
    19c0:	7f 93       	push	r23
    19c2:	8f 93       	push	r24
    19c4:	9f 93       	push	r25
    19c6:	af 93       	push	r26
    19c8:	bf 93       	push	r27
    19ca:	ef 93       	push	r30
    19cc:	ff 93       	push	r31
    19ce:	c0 90 8c 01 	lds	r12, 0x018C	; 0x80018c <overflows>
    19d2:	d0 90 8d 01 	lds	r13, 0x018D	; 0x80018d <overflows+0x1>
    19d6:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    19da:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    19de:	b0 99       	sbic	0x16, 0	; 22
    19e0:	0f c0       	rjmp	.+30     	; 0x1a00 <__vector_7+0x5c>
    19e2:	0d 2c       	mov	r0, r13
    19e4:	00 0c       	add	r0, r0
    19e6:	ee 08       	sbc	r14, r14
    19e8:	ff 08       	sbc	r15, r15
    19ea:	d6 01       	movw	r26, r12
    19ec:	99 27       	eor	r25, r25
    19ee:	88 27       	eor	r24, r24
    19f0:	69 01       	movw	r12, r18
    19f2:	e1 2c       	mov	r14, r1
    19f4:	f1 2c       	mov	r15, r1
    19f6:	c8 2a       	or	r12, r24
    19f8:	d9 2a       	or	r13, r25
    19fa:	ea 2a       	or	r14, r26
    19fc:	fb 2a       	or	r15, r27
    19fe:	15 c0       	rjmp	.+42     	; 0x1a2a <__vector_7+0x86>
    1a00:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1a04:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1a08:	8f ef       	ldi	r24, 0xFF	; 255
    1a0a:	c8 1a       	sub	r12, r24
    1a0c:	d8 0a       	sbc	r13, r24
    1a0e:	0d 2c       	mov	r0, r13
    1a10:	00 0c       	add	r0, r0
    1a12:	ee 08       	sbc	r14, r14
    1a14:	ff 08       	sbc	r15, r15
    1a16:	d6 01       	movw	r26, r12
    1a18:	99 27       	eor	r25, r25
    1a1a:	88 27       	eor	r24, r24
    1a1c:	69 01       	movw	r12, r18
    1a1e:	e1 2c       	mov	r14, r1
    1a20:	f1 2c       	mov	r15, r1
    1a22:	c8 2a       	or	r12, r24
    1a24:	d9 2a       	or	r13, r25
    1a26:	ea 2a       	or	r14, r26
    1a28:	fb 2a       	or	r15, r27
    1a2a:	e0 91 92 01 	lds	r30, 0x0192	; 0x800192 <timerQ>
    1a2e:	f0 91 93 01 	lds	r31, 0x0193	; 0x800193 <timerQ+0x1>
    1a32:	30 97       	sbiw	r30, 0x00	; 0
    1a34:	09 f4       	brne	.+2      	; 0x1a38 <__vector_7+0x94>
    1a36:	42 c0       	rjmp	.+132    	; 0x1abc <__vector_7+0x118>
    1a38:	82 81       	ldd	r24, Z+2	; 0x02
    1a3a:	93 81       	ldd	r25, Z+3	; 0x03
    1a3c:	a4 81       	ldd	r26, Z+4	; 0x04
    1a3e:	b5 81       	ldd	r27, Z+5	; 0x05
    1a40:	8c 19       	sub	r24, r12
    1a42:	9d 09       	sbc	r25, r13
    1a44:	ae 09       	sbc	r26, r14
    1a46:	bf 09       	sbc	r27, r15
    1a48:	18 16       	cp	r1, r24
    1a4a:	19 06       	cpc	r1, r25
    1a4c:	1a 06       	cpc	r1, r26
    1a4e:	1b 06       	cpc	r1, r27
    1a50:	ec f1       	brlt	.+122    	; 0x1acc <__vector_7+0x128>
    1a52:	82 e9       	ldi	r24, 0x92	; 146
    1a54:	91 e0       	ldi	r25, 0x01	; 1
    1a56:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <dequeue>
    1a5a:	64 e9       	ldi	r22, 0x94	; 148
    1a5c:	71 e0       	ldi	r23, 0x01	; 1
    1a5e:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <enqueueByDeadline>
    1a62:	e0 91 92 01 	lds	r30, 0x0192	; 0x800192 <timerQ>
    1a66:	f0 91 93 01 	lds	r31, 0x0193	; 0x800193 <timerQ+0x1>
    1a6a:	30 97       	sbiw	r30, 0x00	; 0
    1a6c:	39 f1       	breq	.+78     	; 0x1abc <__vector_7+0x118>
    1a6e:	82 81       	ldd	r24, Z+2	; 0x02
    1a70:	93 81       	ldd	r25, Z+3	; 0x03
    1a72:	a4 81       	ldd	r26, Z+4	; 0x04
    1a74:	b5 81       	ldd	r27, Z+5	; 0x05
    1a76:	8c 19       	sub	r24, r12
    1a78:	9d 09       	sbc	r25, r13
    1a7a:	ae 09       	sbc	r26, r14
    1a7c:	bf 09       	sbc	r27, r15
    1a7e:	18 16       	cp	r1, r24
    1a80:	19 06       	cpc	r1, r25
    1a82:	1a 06       	cpc	r1, r26
    1a84:	1b 06       	cpc	r1, r27
    1a86:	2c f7       	brge	.-54     	; 0x1a52 <__vector_7+0xae>
    1a88:	21 c0       	rjmp	.+66     	; 0x1acc <__vector_7+0x128>
    1a8a:	9c 01       	movw	r18, r24
    1a8c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1a90:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1a94:	84 1b       	sub	r24, r20
    1a96:	95 0b       	sbc	r25, r21
    1a98:	01 97       	sbiw	r24, 0x01	; 1
    1a9a:	31 f4       	brne	.+12     	; 0x1aa8 <__vector_7+0x104>
    1a9c:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1aa0:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1aa4:	2f 5f       	subi	r18, 0xFF	; 255
    1aa6:	3f 4f       	sbci	r19, 0xFF	; 255
    1aa8:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1aac:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1ab0:	ef e6       	ldi	r30, 0x6F	; 111
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	80 81       	ld	r24, Z
    1ab6:	82 60       	ori	r24, 0x02	; 2
    1ab8:	80 83       	st	Z, r24
    1aba:	05 c0       	rjmp	.+10     	; 0x1ac6 <__vector_7+0x122>
    1abc:	ef e6       	ldi	r30, 0x6F	; 111
    1abe:	f0 e0       	ldi	r31, 0x00	; 0
    1ac0:	80 81       	ld	r24, Z
    1ac2:	8d 7f       	andi	r24, 0xFD	; 253
    1ac4:	80 83       	st	Z, r24
    1ac6:	0e 94 10 04 	call	0x820	; 0x820 <schedule>
    1aca:	0c c0       	rjmp	.+24     	; 0x1ae4 <__vector_7+0x140>
    1acc:	82 81       	ldd	r24, Z+2	; 0x02
    1ace:	93 81       	ldd	r25, Z+3	; 0x03
    1ad0:	a4 81       	ldd	r26, Z+4	; 0x04
    1ad2:	b5 81       	ldd	r27, Z+5	; 0x05
    1ad4:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    1ad8:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    1adc:	2a 17       	cp	r18, r26
    1ade:	3b 07       	cpc	r19, r27
    1ae0:	69 f7       	brne	.-38     	; 0x1abc <__vector_7+0x118>
    1ae2:	d3 cf       	rjmp	.-90     	; 0x1a8a <__vector_7+0xe6>
    1ae4:	ff 91       	pop	r31
    1ae6:	ef 91       	pop	r30
    1ae8:	bf 91       	pop	r27
    1aea:	af 91       	pop	r26
    1aec:	9f 91       	pop	r25
    1aee:	8f 91       	pop	r24
    1af0:	7f 91       	pop	r23
    1af2:	6f 91       	pop	r22
    1af4:	5f 91       	pop	r21
    1af6:	4f 91       	pop	r20
    1af8:	3f 91       	pop	r19
    1afa:	2f 91       	pop	r18
    1afc:	ff 90       	pop	r15
    1afe:	ef 90       	pop	r14
    1b00:	df 90       	pop	r13
    1b02:	cf 90       	pop	r12
    1b04:	0f 90       	pop	r0
    1b06:	0f be       	out	0x3f, r0	; 63
    1b08:	0f 90       	pop	r0
    1b0a:	1f 90       	pop	r1
    1b0c:	18 95       	reti

00001b0e <async>:
    1b0e:	3f 92       	push	r3
    1b10:	4f 92       	push	r4
    1b12:	5f 92       	push	r5
    1b14:	6f 92       	push	r6
    1b16:	7f 92       	push	r7
    1b18:	8f 92       	push	r8
    1b1a:	9f 92       	push	r9
    1b1c:	af 92       	push	r10
    1b1e:	bf 92       	push	r11
    1b20:	cf 92       	push	r12
    1b22:	df 92       	push	r13
    1b24:	ef 92       	push	r14
    1b26:	ff 92       	push	r15
    1b28:	0f 93       	push	r16
    1b2a:	1f 93       	push	r17
    1b2c:	cf 93       	push	r28
    1b2e:	df 93       	push	r29
    1b30:	2b 01       	movw	r4, r22
    1b32:	3c 01       	movw	r6, r24
    1b34:	49 01       	movw	r8, r18
    1b36:	5a 01       	movw	r10, r20
    1b38:	8f b7       	in	r24, 0x3f	; 63
    1b3a:	80 78       	andi	r24, 0x80	; 128
    1b3c:	38 2e       	mov	r3, r24
    1b3e:	f8 94       	cli
    1b40:	82 e8       	ldi	r24, 0x82	; 130
    1b42:	91 e0       	ldi	r25, 0x01	; 1
    1b44:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <dequeue>
    1b48:	ec 01       	movw	r28, r24
    1b4a:	1b 87       	std	Y+11, r17	; 0x0b
    1b4c:	0a 87       	std	Y+10, r16	; 0x0a
    1b4e:	fd 86       	std	Y+13, r15	; 0x0d
    1b50:	ec 86       	std	Y+12, r14	; 0x0c
    1b52:	df 86       	std	Y+15, r13	; 0x0f
    1b54:	ce 86       	std	Y+14, r12	; 0x0e
    1b56:	33 20       	and	r3, r3
    1b58:	61 f0       	breq	.+24     	; 0x1b72 <async+0x64>
    1b5a:	e0 91 7c 01 	lds	r30, 0x017C	; 0x80017c <current>
    1b5e:	f0 91 7d 01 	lds	r31, 0x017D	; 0x80017d <current+0x1>
    1b62:	02 80       	ldd	r0, Z+2	; 0x02
    1b64:	f3 81       	ldd	r31, Z+3	; 0x03
    1b66:	e0 2d       	mov	r30, r0
    1b68:	82 81       	ldd	r24, Z+2	; 0x02
    1b6a:	93 81       	ldd	r25, Z+3	; 0x03
    1b6c:	a4 81       	ldd	r26, Z+4	; 0x04
    1b6e:	b5 81       	ldd	r27, Z+5	; 0x05
    1b70:	08 c0       	rjmp	.+16     	; 0x1b82 <async+0x74>
    1b72:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <timestamp>
    1b76:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <timestamp+0x1>
    1b7a:	a0 91 90 01 	lds	r26, 0x0190	; 0x800190 <timestamp+0x2>
    1b7e:	b0 91 91 01 	lds	r27, 0x0191	; 0x800191 <timestamp+0x3>
    1b82:	48 0e       	add	r4, r24
    1b84:	59 1e       	adc	r5, r25
    1b86:	6a 1e       	adc	r6, r26
    1b88:	7b 1e       	adc	r7, r27
    1b8a:	4a 82       	std	Y+2, r4	; 0x02
    1b8c:	5b 82       	std	Y+3, r5	; 0x03
    1b8e:	6c 82       	std	Y+4, r6	; 0x04
    1b90:	7d 82       	std	Y+5, r7	; 0x05
    1b92:	18 14       	cp	r1, r8
    1b94:	19 04       	cpc	r1, r9
    1b96:	1a 04       	cpc	r1, r10
    1b98:	1b 04       	cpc	r1, r11
    1b9a:	44 f0       	brlt	.+16     	; 0x1bac <async+0x9e>
    1b9c:	0f 2e       	mov	r0, r31
    1b9e:	88 24       	eor	r8, r8
    1ba0:	8a 94       	dec	r8
    1ba2:	98 2c       	mov	r9, r8
    1ba4:	a8 2c       	mov	r10, r8
    1ba6:	ff e7       	ldi	r31, 0x7F	; 127
    1ba8:	bf 2e       	mov	r11, r31
    1baa:	f0 2d       	mov	r31, r0
    1bac:	84 0c       	add	r8, r4
    1bae:	95 1c       	adc	r9, r5
    1bb0:	a6 1c       	adc	r10, r6
    1bb2:	b7 1c       	adc	r11, r7
    1bb4:	8e 82       	std	Y+6, r8	; 0x06
    1bb6:	9f 82       	std	Y+7, r9	; 0x07
    1bb8:	a8 86       	std	Y+8, r10	; 0x08
    1bba:	b9 86       	std	Y+9, r11	; 0x09
    1bbc:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <overflows>
    1bc0:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <overflows+0x1>
    1bc4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1bc8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1bcc:	b0 99       	sbic	0x16, 0	; 22
    1bce:	0e c0       	rjmp	.+28     	; 0x1bec <async+0xde>
    1bd0:	09 2e       	mov	r0, r25
    1bd2:	00 0c       	add	r0, r0
    1bd4:	aa 0b       	sbc	r26, r26
    1bd6:	bb 0b       	sbc	r27, r27
    1bd8:	dc 01       	movw	r26, r24
    1bda:	99 27       	eor	r25, r25
    1bdc:	88 27       	eor	r24, r24
    1bde:	60 e0       	ldi	r22, 0x00	; 0
    1be0:	70 e0       	ldi	r23, 0x00	; 0
    1be2:	84 2b       	or	r24, r20
    1be4:	95 2b       	or	r25, r21
    1be6:	a6 2b       	or	r26, r22
    1be8:	b7 2b       	or	r27, r23
    1bea:	13 c0       	rjmp	.+38     	; 0x1c12 <async+0x104>
    1bec:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1bf0:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1bf4:	01 96       	adiw	r24, 0x01	; 1
    1bf6:	09 2e       	mov	r0, r25
    1bf8:	00 0c       	add	r0, r0
    1bfa:	aa 0b       	sbc	r26, r26
    1bfc:	bb 0b       	sbc	r27, r27
    1bfe:	dc 01       	movw	r26, r24
    1c00:	99 27       	eor	r25, r25
    1c02:	88 27       	eor	r24, r24
    1c04:	a9 01       	movw	r20, r18
    1c06:	60 e0       	ldi	r22, 0x00	; 0
    1c08:	70 e0       	ldi	r23, 0x00	; 0
    1c0a:	84 2b       	or	r24, r20
    1c0c:	95 2b       	or	r25, r21
    1c0e:	a6 2b       	or	r26, r22
    1c10:	b7 2b       	or	r27, r23
    1c12:	48 1a       	sub	r4, r24
    1c14:	59 0a       	sbc	r5, r25
    1c16:	6a 0a       	sbc	r6, r26
    1c18:	7b 0a       	sbc	r7, r27
    1c1a:	14 14       	cp	r1, r4
    1c1c:	15 04       	cpc	r1, r5
    1c1e:	16 04       	cpc	r1, r6
    1c20:	17 04       	cpc	r1, r7
    1c22:	ac f5       	brge	.+106    	; 0x1c8e <async+0x180>
    1c24:	62 e9       	ldi	r22, 0x92	; 146
    1c26:	71 e0       	ldi	r23, 0x01	; 1
    1c28:	ce 01       	movw	r24, r28
    1c2a:	0e 94 26 0c 	call	0x184c	; 0x184c <enqueueByBaseline>
    1c2e:	e0 91 92 01 	lds	r30, 0x0192	; 0x800192 <timerQ>
    1c32:	f0 91 93 01 	lds	r31, 0x0193	; 0x800193 <timerQ+0x1>
    1c36:	30 97       	sbiw	r30, 0x00	; 0
    1c38:	21 f1       	breq	.+72     	; 0x1c82 <async+0x174>
    1c3a:	82 81       	ldd	r24, Z+2	; 0x02
    1c3c:	93 81       	ldd	r25, Z+3	; 0x03
    1c3e:	a4 81       	ldd	r26, Z+4	; 0x04
    1c40:	b5 81       	ldd	r27, Z+5	; 0x05
    1c42:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    1c46:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    1c4a:	2a 17       	cp	r18, r26
    1c4c:	3b 07       	cpc	r19, r27
    1c4e:	c9 f4       	brne	.+50     	; 0x1c82 <async+0x174>
    1c50:	9c 01       	movw	r18, r24
    1c52:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1c56:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1c5a:	84 1b       	sub	r24, r20
    1c5c:	95 0b       	sbc	r25, r21
    1c5e:	01 97       	sbiw	r24, 0x01	; 1
    1c60:	31 f4       	brne	.+12     	; 0x1c6e <async+0x160>
    1c62:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1c66:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1c6a:	2f 5f       	subi	r18, 0xFF	; 255
    1c6c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c6e:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1c72:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1c76:	ef e6       	ldi	r30, 0x6F	; 111
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	80 81       	ld	r24, Z
    1c7c:	82 60       	ori	r24, 0x02	; 2
    1c7e:	80 83       	st	Z, r24
    1c80:	41 c0       	rjmp	.+130    	; 0x1d04 <async+0x1f6>
    1c82:	ef e6       	ldi	r30, 0x6F	; 111
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	80 81       	ld	r24, Z
    1c88:	8d 7f       	andi	r24, 0xFD	; 253
    1c8a:	80 83       	st	Z, r24
    1c8c:	3b c0       	rjmp	.+118    	; 0x1d04 <async+0x1f6>
    1c8e:	64 e9       	ldi	r22, 0x94	; 148
    1c90:	71 e0       	ldi	r23, 0x01	; 1
    1c92:	ce 01       	movw	r24, r28
    1c94:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <enqueueByDeadline>
    1c98:	33 20       	and	r3, r3
    1c9a:	b9 f1       	breq	.+110    	; 0x1d0a <async+0x1fc>
    1c9c:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <threadPool>
    1ca0:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <threadPool+0x1>
    1ca4:	00 97       	sbiw	r24, 0x00	; 0
    1ca6:	81 f1       	breq	.+96     	; 0x1d08 <async+0x1fa>
    1ca8:	e0 91 7e 01 	lds	r30, 0x017E	; 0x80017e <activeStack>
    1cac:	f0 91 7f 01 	lds	r31, 0x017F	; 0x80017f <activeStack+0x1>
    1cb0:	20 91 94 01 	lds	r18, 0x0194	; 0x800194 <msgQ>
    1cb4:	30 91 95 01 	lds	r19, 0x0195	; 0x800195 <msgQ+0x1>
    1cb8:	02 81       	ldd	r16, Z+2	; 0x02
    1cba:	13 81       	ldd	r17, Z+3	; 0x03
    1cbc:	d9 01       	movw	r26, r18
    1cbe:	16 96       	adiw	r26, 0x06	; 6
    1cc0:	4d 91       	ld	r20, X+
    1cc2:	5d 91       	ld	r21, X+
    1cc4:	6d 91       	ld	r22, X+
    1cc6:	7c 91       	ld	r23, X
    1cc8:	19 97       	sbiw	r26, 0x09	; 9
    1cca:	d8 01       	movw	r26, r16
    1ccc:	16 96       	adiw	r26, 0x06	; 6
    1cce:	0d 91       	ld	r16, X+
    1cd0:	1d 91       	ld	r17, X+
    1cd2:	2d 91       	ld	r18, X+
    1cd4:	3c 91       	ld	r19, X
    1cd6:	19 97       	sbiw	r26, 0x09	; 9
    1cd8:	40 1b       	sub	r20, r16
    1cda:	51 0b       	sbc	r21, r17
    1cdc:	62 0b       	sbc	r22, r18
    1cde:	73 0b       	sbc	r23, r19
    1ce0:	9a f4       	brpl	.+38     	; 0x1d08 <async+0x1fa>
    1ce2:	dc 01       	movw	r26, r24
    1ce4:	2d 91       	ld	r18, X+
    1ce6:	3c 91       	ld	r19, X
    1ce8:	11 97       	sbiw	r26, 0x01	; 1
    1cea:	30 93 81 01 	sts	0x0181, r19	; 0x800181 <threadPool+0x1>
    1cee:	20 93 80 01 	sts	0x0180, r18	; 0x800180 <threadPool>
    1cf2:	ed 93       	st	X+, r30
    1cf4:	fc 93       	st	X, r31
    1cf6:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <activeStack+0x1>
    1cfa:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <activeStack>
    1cfe:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <dispatch>
    1d02:	02 c0       	rjmp	.+4      	; 0x1d08 <async+0x1fa>
    1d04:	33 20       	and	r3, r3
    1d06:	09 f0       	breq	.+2      	; 0x1d0a <async+0x1fc>
    1d08:	78 94       	sei
    1d0a:	ce 01       	movw	r24, r28
    1d0c:	df 91       	pop	r29
    1d0e:	cf 91       	pop	r28
    1d10:	1f 91       	pop	r17
    1d12:	0f 91       	pop	r16
    1d14:	ff 90       	pop	r15
    1d16:	ef 90       	pop	r14
    1d18:	df 90       	pop	r13
    1d1a:	cf 90       	pop	r12
    1d1c:	bf 90       	pop	r11
    1d1e:	af 90       	pop	r10
    1d20:	9f 90       	pop	r9
    1d22:	8f 90       	pop	r8
    1d24:	7f 90       	pop	r7
    1d26:	6f 90       	pop	r6
    1d28:	5f 90       	pop	r5
    1d2a:	4f 90       	pop	r4
    1d2c:	3f 90       	pop	r3
    1d2e:	08 95       	ret

00001d30 <sync>:
    1d30:	cf 92       	push	r12
    1d32:	df 92       	push	r13
    1d34:	ef 92       	push	r14
    1d36:	ff 92       	push	r15
    1d38:	0f 93       	push	r16
    1d3a:	1f 93       	push	r17
    1d3c:	cf 93       	push	r28
    1d3e:	df 93       	push	r29
    1d40:	ec 01       	movw	r28, r24
    1d42:	7b 01       	movw	r14, r22
    1d44:	6a 01       	movw	r12, r20
    1d46:	1f b7       	in	r17, 0x3f	; 63
    1d48:	10 78       	andi	r17, 0x80	; 128
    1d4a:	f8 94       	cli
    1d4c:	a8 81       	ld	r26, Y
    1d4e:	b9 81       	ldd	r27, Y+1	; 0x01
    1d50:	10 97       	sbiw	r26, 0x00	; 0
    1d52:	61 f1       	breq	.+88     	; 0x1dac <sync+0x7c>
    1d54:	14 96       	adiw	r26, 0x04	; 4
    1d56:	ed 91       	ld	r30, X+
    1d58:	fc 91       	ld	r31, X
    1d5a:	15 97       	sbiw	r26, 0x05	; 5
    1d5c:	30 97       	sbiw	r30, 0x00	; 0
    1d5e:	41 f0       	breq	.+16     	; 0x1d70 <sync+0x40>
    1d60:	a0 81       	ld	r26, Z
    1d62:	b1 81       	ldd	r27, Z+1	; 0x01
    1d64:	14 96       	adiw	r26, 0x04	; 4
    1d66:	ed 91       	ld	r30, X+
    1d68:	fc 91       	ld	r31, X
    1d6a:	15 97       	sbiw	r26, 0x05	; 5
    1d6c:	30 97       	sbiw	r30, 0x00	; 0
    1d6e:	c1 f7       	brne	.-16     	; 0x1d60 <sync+0x30>
    1d70:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <current>
    1d74:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <current+0x1>
    1d78:	2a 17       	cp	r18, r26
    1d7a:	3b 07       	cpc	r19, r27
    1d7c:	21 f0       	breq	.+8      	; 0x1d86 <sync+0x56>
    1d7e:	11 23       	and	r17, r17
    1d80:	09 f4       	brne	.+2      	; 0x1d84 <sync+0x54>
    1d82:	3d c0       	rjmp	.+122    	; 0x1dfe <sync+0xce>
    1d84:	07 c0       	rjmp	.+14     	; 0x1d94 <sync+0x64>
    1d86:	11 23       	and	r17, r17
    1d88:	09 f4       	brne	.+2      	; 0x1d8c <sync+0x5c>
    1d8a:	3c c0       	rjmp	.+120    	; 0x1e04 <sync+0xd4>
    1d8c:	78 94       	sei
    1d8e:	8f ef       	ldi	r24, 0xFF	; 255
    1d90:	9f ef       	ldi	r25, 0xFF	; 255
    1d92:	52 c0       	rjmp	.+164    	; 0x1e38 <sync+0x108>
    1d94:	8a 81       	ldd	r24, Y+2	; 0x02
    1d96:	9b 81       	ldd	r25, Y+3	; 0x03
    1d98:	00 97       	sbiw	r24, 0x00	; 0
    1d9a:	d1 f1       	breq	.+116    	; 0x1e10 <sync+0xe0>
    1d9c:	fc 01       	movw	r30, r24
    1d9e:	15 82       	std	Z+5, r1	; 0x05
    1da0:	14 82       	std	Z+4, r1	; 0x04
    1da2:	36 c0       	rjmp	.+108    	; 0x1e10 <sync+0xe0>
    1da4:	78 94       	sei
    1da6:	80 e0       	ldi	r24, 0x00	; 0
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	46 c0       	rjmp	.+140    	; 0x1e38 <sync+0x108>
    1dac:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <current>
    1db0:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <current+0x1>
    1db4:	99 83       	std	Y+1, r25	; 0x01
    1db6:	88 83       	st	Y, r24
    1db8:	11 23       	and	r17, r17
    1dba:	29 f0       	breq	.+10     	; 0x1dc6 <sync+0x96>
    1dbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dbe:	9b 81       	ldd	r25, Y+3	; 0x03
    1dc0:	01 97       	sbiw	r24, 0x01	; 1
    1dc2:	09 f0       	breq	.+2      	; 0x1dc6 <sync+0x96>
    1dc4:	78 94       	sei
    1dc6:	b6 01       	movw	r22, r12
    1dc8:	ce 01       	movw	r24, r28
    1dca:	f7 01       	movw	r30, r14
    1dcc:	09 95       	icall
    1dce:	f8 2e       	mov	r15, r24
    1dd0:	09 2f       	mov	r16, r25
    1dd2:	8f b7       	in	r24, 0x3f	; 63
    1dd4:	f8 94       	cli
    1dd6:	19 82       	std	Y+1, r1	; 0x01
    1dd8:	18 82       	st	Y, r1
    1dda:	8a 81       	ldd	r24, Y+2	; 0x02
    1ddc:	9b 81       	ldd	r25, Y+3	; 0x03
    1dde:	82 30       	cpi	r24, 0x02	; 2
    1de0:	91 05       	cpc	r25, r1
    1de2:	38 f0       	brcs	.+14     	; 0x1df2 <sync+0xc2>
    1de4:	1b 82       	std	Y+3, r1	; 0x03
    1de6:	1a 82       	std	Y+2, r1	; 0x02
    1de8:	fc 01       	movw	r30, r24
    1dea:	15 82       	std	Z+5, r1	; 0x05
    1dec:	14 82       	std	Z+4, r1	; 0x04
    1dee:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <dispatch>
    1df2:	11 23       	and	r17, r17
    1df4:	51 f0       	breq	.+20     	; 0x1e0a <sync+0xda>
    1df6:	78 94       	sei
    1df8:	8f 2d       	mov	r24, r15
    1dfa:	90 2f       	mov	r25, r16
    1dfc:	1d c0       	rjmp	.+58     	; 0x1e38 <sync+0x108>
    1dfe:	8f ef       	ldi	r24, 0xFF	; 255
    1e00:	9f ef       	ldi	r25, 0xFF	; 255
    1e02:	1a c0       	rjmp	.+52     	; 0x1e38 <sync+0x108>
    1e04:	8f ef       	ldi	r24, 0xFF	; 255
    1e06:	9f ef       	ldi	r25, 0xFF	; 255
    1e08:	17 c0       	rjmp	.+46     	; 0x1e38 <sync+0x108>
    1e0a:	8f 2d       	mov	r24, r15
    1e0c:	90 2f       	mov	r25, r16
    1e0e:	14 c0       	rjmp	.+40     	; 0x1e38 <sync+0x108>
    1e10:	3b 83       	std	Y+3, r19	; 0x03
    1e12:	2a 83       	std	Y+2, r18	; 0x02
    1e14:	f9 01       	movw	r30, r18
    1e16:	d5 83       	std	Z+5, r29	; 0x05
    1e18:	c4 83       	std	Z+4, r28	; 0x04
    1e1a:	cd 01       	movw	r24, r26
    1e1c:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <dispatch>
    1e20:	e0 91 7c 01 	lds	r30, 0x017C	; 0x80017c <current>
    1e24:	f0 91 7d 01 	lds	r31, 0x017D	; 0x80017d <current+0x1>
    1e28:	82 81       	ldd	r24, Z+2	; 0x02
    1e2a:	93 81       	ldd	r25, Z+3	; 0x03
    1e2c:	89 2b       	or	r24, r25
    1e2e:	09 f4       	brne	.+2      	; 0x1e32 <sync+0x102>
    1e30:	b9 cf       	rjmp	.-142    	; 0x1da4 <sync+0x74>
    1e32:	f9 83       	std	Y+1, r31	; 0x01
    1e34:	e8 83       	st	Y, r30
    1e36:	c2 cf       	rjmp	.-124    	; 0x1dbc <sync+0x8c>
    1e38:	df 91       	pop	r29
    1e3a:	cf 91       	pop	r28
    1e3c:	1f 91       	pop	r17
    1e3e:	0f 91       	pop	r16
    1e40:	ff 90       	pop	r15
    1e42:	ef 90       	pop	r14
    1e44:	df 90       	pop	r13
    1e46:	cf 90       	pop	r12
    1e48:	08 95       	ret

00001e4a <run>:
    1e4a:	00 91 7c 01 	lds	r16, 0x017C	; 0x80017c <current>
    1e4e:	10 91 7d 01 	lds	r17, 0x017D	; 0x80017d <current+0x1>
    1e52:	84 e9       	ldi	r24, 0x94	; 148
    1e54:	91 e0       	ldi	r25, 0x01	; 1
    1e56:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <dequeue>
    1e5a:	ec 01       	movw	r28, r24
    1e5c:	d8 01       	movw	r26, r16
    1e5e:	13 96       	adiw	r26, 0x03	; 3
    1e60:	9c 93       	st	X, r25
    1e62:	8e 93       	st	-X, r24
    1e64:	12 97       	sbiw	r26, 0x02	; 2
    1e66:	78 94       	sei
    1e68:	4e 85       	ldd	r20, Y+14	; 0x0e
    1e6a:	5f 85       	ldd	r21, Y+15	; 0x0f
    1e6c:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e6e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e70:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e72:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e74:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <sync>
    1e78:	8f b7       	in	r24, 0x3f	; 63
    1e7a:	f8 94       	cli
    1e7c:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <msgPool>
    1e80:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <msgPool+0x1>
    1e84:	99 83       	std	Y+1, r25	; 0x01
    1e86:	88 83       	st	Y, r24
    1e88:	d0 93 83 01 	sts	0x0183, r29	; 0x800183 <msgPool+0x1>
    1e8c:	c0 93 82 01 	sts	0x0182, r28	; 0x800182 <msgPool>
    1e90:	e0 91 7e 01 	lds	r30, 0x017E	; 0x80017e <activeStack>
    1e94:	f0 91 7f 01 	lds	r31, 0x017F	; 0x80017f <activeStack+0x1>
    1e98:	00 81       	ld	r16, Z
    1e9a:	11 81       	ldd	r17, Z+1	; 0x01
    1e9c:	e8 01       	movw	r28, r16
    1e9e:	2a 81       	ldd	r18, Y+2	; 0x02
    1ea0:	3b 81       	ldd	r19, Y+3	; 0x03
    1ea2:	a0 91 94 01 	lds	r26, 0x0194	; 0x800194 <msgQ>
    1ea6:	b0 91 95 01 	lds	r27, 0x0195	; 0x800195 <msgQ+0x1>
    1eaa:	10 97       	sbiw	r26, 0x00	; 0
    1eac:	c1 f0       	breq	.+48     	; 0x1ede <run+0x94>
    1eae:	21 15       	cp	r18, r1
    1eb0:	31 05       	cpc	r19, r1
    1eb2:	59 f2       	breq	.-106    	; 0x1e4a <run>
    1eb4:	16 96       	adiw	r26, 0x06	; 6
    1eb6:	8d 91       	ld	r24, X+
    1eb8:	9d 91       	ld	r25, X+
    1eba:	0d 90       	ld	r0, X+
    1ebc:	bc 91       	ld	r27, X
    1ebe:	a0 2d       	mov	r26, r0
    1ec0:	e9 01       	movw	r28, r18
    1ec2:	4e 81       	ldd	r20, Y+6	; 0x06
    1ec4:	5f 81       	ldd	r21, Y+7	; 0x07
    1ec6:	68 85       	ldd	r22, Y+8	; 0x08
    1ec8:	79 85       	ldd	r23, Y+9	; 0x09
    1eca:	84 1b       	sub	r24, r20
    1ecc:	95 0b       	sbc	r25, r21
    1ece:	a6 0b       	sbc	r26, r22
    1ed0:	b7 0b       	sbc	r27, r23
    1ed2:	18 16       	cp	r1, r24
    1ed4:	19 06       	cpc	r1, r25
    1ed6:	1a 06       	cpc	r1, r26
    1ed8:	1b 06       	cpc	r1, r27
    1eda:	0c f0       	brlt	.+2      	; 0x1ede <run+0x94>
    1edc:	b6 cf       	rjmp	.-148    	; 0x1e4a <run>
    1ede:	10 93 7f 01 	sts	0x017F, r17	; 0x80017f <activeStack+0x1>
    1ee2:	00 93 7e 01 	sts	0x017E, r16	; 0x80017e <activeStack>
    1ee6:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <threadPool>
    1eea:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <threadPool+0x1>
    1eee:	91 83       	std	Z+1, r25	; 0x01
    1ef0:	80 83       	st	Z, r24
    1ef2:	f0 93 81 01 	sts	0x0181, r31	; 0x800181 <threadPool+0x1>
    1ef6:	e0 93 80 01 	sts	0x0180, r30	; 0x800180 <threadPool>
    1efa:	a0 91 7e 01 	lds	r26, 0x017E	; 0x80017e <activeStack>
    1efe:	b0 91 7f 01 	lds	r27, 0x017F	; 0x80017f <activeStack+0x1>
    1f02:	14 96       	adiw	r26, 0x04	; 4
    1f04:	ed 91       	ld	r30, X+
    1f06:	fc 91       	ld	r31, X
    1f08:	15 97       	sbiw	r26, 0x05	; 5
    1f0a:	30 97       	sbiw	r30, 0x00	; 0
    1f0c:	41 f0       	breq	.+16     	; 0x1f1e <run+0xd4>
    1f0e:	a0 81       	ld	r26, Z
    1f10:	b1 81       	ldd	r27, Z+1	; 0x01
    1f12:	14 96       	adiw	r26, 0x04	; 4
    1f14:	ed 91       	ld	r30, X+
    1f16:	fc 91       	ld	r31, X
    1f18:	15 97       	sbiw	r26, 0x05	; 5
    1f1a:	30 97       	sbiw	r30, 0x00	; 0
    1f1c:	c1 f7       	brne	.-16     	; 0x1f0e <run+0xc4>
    1f1e:	cd 01       	movw	r24, r26
    1f20:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <dispatch>
    1f24:	92 cf       	rjmp	.-220    	; 0x1e4a <run>

00001f26 <install>:
    1f26:	42 31       	cpi	r20, 0x12	; 18
    1f28:	b8 f4       	brcc	.+46     	; 0x1f58 <install+0x32>
    1f2a:	2f b7       	in	r18, 0x3f	; 63
    1f2c:	f8 94       	cli
    1f2e:	50 e0       	ldi	r21, 0x00	; 0
    1f30:	44 0f       	add	r20, r20
    1f32:	55 1f       	adc	r21, r21
    1f34:	fa 01       	movw	r30, r20
    1f36:	ea 56       	subi	r30, 0x6A	; 106
    1f38:	fe 4f       	sbci	r31, 0xFE	; 254
    1f3a:	91 83       	std	Z+1, r25	; 0x01
    1f3c:	80 83       	st	Z, r24
    1f3e:	fa 01       	movw	r30, r20
    1f40:	e2 5d       	subi	r30, 0xD2	; 210
    1f42:	fd 4f       	sbci	r31, 0xFD	; 253
    1f44:	71 83       	std	Z+1, r23	; 0x01
    1f46:	60 83       	st	Z, r22
    1f48:	41 e0       	ldi	r20, 0x01	; 1
    1f4a:	50 e0       	ldi	r21, 0x00	; 0
    1f4c:	fc 01       	movw	r30, r24
    1f4e:	53 83       	std	Z+3, r21	; 0x03
    1f50:	42 83       	std	Z+2, r20	; 0x02
    1f52:	22 23       	and	r18, r18
    1f54:	0c f4       	brge	.+2      	; 0x1f58 <install+0x32>
    1f56:	78 94       	sei
    1f58:	08 95       	ret

00001f5a <tinytimber>:
    1f5a:	8c 01       	movw	r16, r24
    1f5c:	7b 01       	movw	r14, r22
    1f5e:	6a 01       	movw	r12, r20
    1f60:	8f b7       	in	r24, 0x3f	; 63
    1f62:	f8 94       	cli
    1f64:	0e 94 85 03 	call	0x70a	; 0x70a <initialize>
    1f68:	78 94       	sei
    1f6a:	e1 14       	cp	r14, r1
    1f6c:	f1 04       	cpc	r15, r1
    1f6e:	41 f0       	breq	.+16     	; 0x1f80 <tinytimber+0x26>
    1f70:	20 e0       	ldi	r18, 0x00	; 0
    1f72:	30 e0       	ldi	r19, 0x00	; 0
    1f74:	a9 01       	movw	r20, r18
    1f76:	60 e0       	ldi	r22, 0x00	; 0
    1f78:	70 e0       	ldi	r23, 0x00	; 0
    1f7a:	cb 01       	movw	r24, r22
    1f7c:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <async>
    1f80:	8f b7       	in	r24, 0x3f	; 63
    1f82:	f8 94       	cli
    1f84:	0e 94 10 04 	call	0x820	; 0x820 <schedule>
    1f88:	78 94       	sei
    1f8a:	81 e0       	ldi	r24, 0x01	; 1
    1f8c:	83 bf       	out	0x33, r24	; 51
    1f8e:	88 95       	sleep
    1f90:	fd cf       	rjmp	.-6      	; 0x1f8c <tinytimber+0x32>

00001f92 <__divmodsi4>:
    1f92:	05 2e       	mov	r0, r21
    1f94:	97 fb       	bst	r25, 7
    1f96:	1e f4       	brtc	.+6      	; 0x1f9e <__divmodsi4+0xc>
    1f98:	00 94       	com	r0
    1f9a:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <__negsi2>
    1f9e:	57 fd       	sbrc	r21, 7
    1fa0:	07 d0       	rcall	.+14     	; 0x1fb0 <__divmodsi4_neg2>
    1fa2:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__udivmodsi4>
    1fa6:	07 fc       	sbrc	r0, 7
    1fa8:	03 d0       	rcall	.+6      	; 0x1fb0 <__divmodsi4_neg2>
    1faa:	4e f4       	brtc	.+18     	; 0x1fbe <__divmodsi4_exit>
    1fac:	0c 94 e0 0f 	jmp	0x1fc0	; 0x1fc0 <__negsi2>

00001fb0 <__divmodsi4_neg2>:
    1fb0:	50 95       	com	r21
    1fb2:	40 95       	com	r20
    1fb4:	30 95       	com	r19
    1fb6:	21 95       	neg	r18
    1fb8:	3f 4f       	sbci	r19, 0xFF	; 255
    1fba:	4f 4f       	sbci	r20, 0xFF	; 255
    1fbc:	5f 4f       	sbci	r21, 0xFF	; 255

00001fbe <__divmodsi4_exit>:
    1fbe:	08 95       	ret

00001fc0 <__negsi2>:
    1fc0:	90 95       	com	r25
    1fc2:	80 95       	com	r24
    1fc4:	70 95       	com	r23
    1fc6:	61 95       	neg	r22
    1fc8:	7f 4f       	sbci	r23, 0xFF	; 255
    1fca:	8f 4f       	sbci	r24, 0xFF	; 255
    1fcc:	9f 4f       	sbci	r25, 0xFF	; 255
    1fce:	08 95       	ret

00001fd0 <__tablejump2__>:
    1fd0:	ee 0f       	add	r30, r30
    1fd2:	ff 1f       	adc	r31, r31
    1fd4:	05 90       	lpm	r0, Z+
    1fd6:	f4 91       	lpm	r31, Z
    1fd8:	e0 2d       	mov	r30, r0
    1fda:	09 94       	ijmp

00001fdc <__udivmodsi4>:
    1fdc:	a1 e2       	ldi	r26, 0x21	; 33
    1fde:	1a 2e       	mov	r1, r26
    1fe0:	aa 1b       	sub	r26, r26
    1fe2:	bb 1b       	sub	r27, r27
    1fe4:	fd 01       	movw	r30, r26
    1fe6:	0d c0       	rjmp	.+26     	; 0x2002 <__udivmodsi4_ep>

00001fe8 <__udivmodsi4_loop>:
    1fe8:	aa 1f       	adc	r26, r26
    1fea:	bb 1f       	adc	r27, r27
    1fec:	ee 1f       	adc	r30, r30
    1fee:	ff 1f       	adc	r31, r31
    1ff0:	a2 17       	cp	r26, r18
    1ff2:	b3 07       	cpc	r27, r19
    1ff4:	e4 07       	cpc	r30, r20
    1ff6:	f5 07       	cpc	r31, r21
    1ff8:	20 f0       	brcs	.+8      	; 0x2002 <__udivmodsi4_ep>
    1ffa:	a2 1b       	sub	r26, r18
    1ffc:	b3 0b       	sbc	r27, r19
    1ffe:	e4 0b       	sbc	r30, r20
    2000:	f5 0b       	sbc	r31, r21

00002002 <__udivmodsi4_ep>:
    2002:	66 1f       	adc	r22, r22
    2004:	77 1f       	adc	r23, r23
    2006:	88 1f       	adc	r24, r24
    2008:	99 1f       	adc	r25, r25
    200a:	1a 94       	dec	r1
    200c:	69 f7       	brne	.-38     	; 0x1fe8 <__udivmodsi4_loop>
    200e:	60 95       	com	r22
    2010:	70 95       	com	r23
    2012:	80 95       	com	r24
    2014:	90 95       	com	r25
    2016:	9b 01       	movw	r18, r22
    2018:	ac 01       	movw	r20, r24
    201a:	bd 01       	movw	r22, r26
    201c:	cf 01       	movw	r24, r30
    201e:	08 95       	ret

00002020 <setjmp>:
    2020:	dc 01       	movw	r26, r24
    2022:	2d 92       	st	X+, r2
    2024:	3d 92       	st	X+, r3
    2026:	4d 92       	st	X+, r4
    2028:	5d 92       	st	X+, r5
    202a:	6d 92       	st	X+, r6
    202c:	7d 92       	st	X+, r7
    202e:	8d 92       	st	X+, r8
    2030:	9d 92       	st	X+, r9
    2032:	ad 92       	st	X+, r10
    2034:	bd 92       	st	X+, r11
    2036:	cd 92       	st	X+, r12
    2038:	dd 92       	st	X+, r13
    203a:	ed 92       	st	X+, r14
    203c:	fd 92       	st	X+, r15
    203e:	0d 93       	st	X+, r16
    2040:	1d 93       	st	X+, r17
    2042:	cd 93       	st	X+, r28
    2044:	dd 93       	st	X+, r29
    2046:	ff 91       	pop	r31
    2048:	ef 91       	pop	r30
    204a:	8d b7       	in	r24, 0x3d	; 61
    204c:	8d 93       	st	X+, r24
    204e:	8e b7       	in	r24, 0x3e	; 62
    2050:	8d 93       	st	X+, r24
    2052:	8f b7       	in	r24, 0x3f	; 63
    2054:	8d 93       	st	X+, r24
    2056:	ed 93       	st	X+, r30
    2058:	fd 93       	st	X+, r31
    205a:	88 27       	eor	r24, r24
    205c:	99 27       	eor	r25, r25
    205e:	09 94       	ijmp

00002060 <longjmp>:
    2060:	dc 01       	movw	r26, r24
    2062:	cb 01       	movw	r24, r22
    2064:	81 30       	cpi	r24, 0x01	; 1
    2066:	91 05       	cpc	r25, r1
    2068:	81 1d       	adc	r24, r1
    206a:	2d 90       	ld	r2, X+
    206c:	3d 90       	ld	r3, X+
    206e:	4d 90       	ld	r4, X+
    2070:	5d 90       	ld	r5, X+
    2072:	6d 90       	ld	r6, X+
    2074:	7d 90       	ld	r7, X+
    2076:	8d 90       	ld	r8, X+
    2078:	9d 90       	ld	r9, X+
    207a:	ad 90       	ld	r10, X+
    207c:	bd 90       	ld	r11, X+
    207e:	cd 90       	ld	r12, X+
    2080:	dd 90       	ld	r13, X+
    2082:	ed 90       	ld	r14, X+
    2084:	fd 90       	ld	r15, X+
    2086:	0d 91       	ld	r16, X+
    2088:	1d 91       	ld	r17, X+
    208a:	cd 91       	ld	r28, X+
    208c:	dd 91       	ld	r29, X+
    208e:	ed 91       	ld	r30, X+
    2090:	fd 91       	ld	r31, X+
    2092:	0d 90       	ld	r0, X+
    2094:	f8 94       	cli
    2096:	fe bf       	out	0x3e, r31	; 62
    2098:	0f be       	out	0x3f, r0	; 63
    209a:	ed bf       	out	0x3d, r30	; 61
    209c:	ed 91       	ld	r30, X+
    209e:	fd 91       	ld	r31, X+
    20a0:	09 94       	ijmp

000020a2 <_exit>:
    20a2:	f8 94       	cli

000020a4 <__stop_program>:
    20a4:	ff cf       	rjmp	.-2      	; 0x20a4 <__stop_program>
