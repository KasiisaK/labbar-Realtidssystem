
lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  0000231a  000023ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000231a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000357  00800134  00800134  000023e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000023e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002414  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000268  00000000  00000000  00002454  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002dd4  00000000  00000000  000026bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001174  00000000  00000000  00005490  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001667  00000000  00000000  00006604  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c54  00000000  00000000  00007c6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a4b  00000000  00000000  000088c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000285f  00000000  00000000  0000930b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000208  00000000  00000000  0000bb6a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
       4:	0c 94 12 05 	jmp	0xa24	; 0xa24 <__vector_1>
       8:	0c 94 7e 05 	jmp	0xafc	; 0xafc <__vector_2>
       c:	0c 94 ea 05 	jmp	0xbd4	; 0xbd4 <__vector_3>
      10:	0c 94 56 06 	jmp	0xcac	; 0xcac <__vector_4>
      14:	0c 94 c2 06 	jmp	0xd84	; 0xd84 <__vector_5>
      18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      1c:	0c 94 99 0d 	jmp	0x1b32	; 0x1b32 <__vector_7>
      20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      24:	0c 94 47 0d 	jmp	0x1a8e	; 0x1a8e <__vector_9>
      28:	0c 94 2e 07 	jmp	0xe5c	; 0xe5c <__vector_10>
      2c:	0c 94 9a 07 	jmp	0xf34	; 0xf34 <__vector_11>
      30:	0c 94 06 08 	jmp	0x100c	; 0x100c <__vector_12>
      34:	0c 94 72 08 	jmp	0x10e4	; 0x10e4 <__vector_13>
      38:	0c 94 de 08 	jmp	0x11bc	; 0x11bc <__vector_14>
      3c:	0c 94 4a 09 	jmp	0x1294	; 0x1294 <__vector_15>
      40:	0c 94 b6 09 	jmp	0x136c	; 0x136c <__vector_16>
      44:	0c 94 22 0a 	jmp	0x1444	; 0x1444 <__vector_17>
      48:	0c 94 8e 0a 	jmp	0x151c	; 0x151c <__vector_18>
      4c:	0c 94 fa 0a 	jmp	0x15f4	; 0x15f4 <__vector_19>
      50:	0c 94 66 0b 	jmp	0x16cc	; 0x16cc <__vector_20>
      54:	0c 94 d2 0b 	jmp	0x17a4	; 0x17a4 <__vector_21>
      58:	0c 94 3e 0c 	jmp	0x187c	; 0x187c <__vector_22>

0000005c <__ctors_end>:
      5c:	11 24       	eor	r1, r1
      5e:	1f be       	out	0x3f, r1	; 63
      60:	cf ef       	ldi	r28, 0xFF	; 255
      62:	d4 e0       	ldi	r29, 0x04	; 4
      64:	de bf       	out	0x3e, r29	; 62
      66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
      68:	11 e0       	ldi	r17, 0x01	; 1
      6a:	a0 e0       	ldi	r26, 0x00	; 0
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	ea e1       	ldi	r30, 0x1A	; 26
      70:	f3 e2       	ldi	r31, 0x23	; 35
      72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
      74:	05 90       	lpm	r0, Z+
      76:	0d 92       	st	X+, r0
      78:	a4 33       	cpi	r26, 0x34	; 52
      7a:	b1 07       	cpc	r27, r17
      7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
      7e:	24 e0       	ldi	r18, 0x04	; 4
      80:	a4 e3       	ldi	r26, 0x34	; 52
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
      86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
      88:	ab 38       	cpi	r26, 0x8B	; 139
      8a:	b2 07       	cpc	r27, r18
      8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
      8e:	0e 94 10 03 	call	0x620	; 0x620 <main>
      92:	0c 94 8b 11 	jmp	0x2316	; 0x2316 <_exit>

00000096 <__bad_interrupt>:
      96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <LCD_init>:
		case '7': return seven;
		case '8': return eight;
		case '9': return nine;
		default:  return none;
	}
}
      9a:	8f e0       	ldi	r24, 0x0F	; 15
      9c:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__DATA_REGION_ORIGIN__+0x87>
      a0:	87 eb       	ldi	r24, 0xB7	; 183
      a2:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
      a6:	87 e0       	ldi	r24, 0x07	; 7
      a8:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__DATA_REGION_ORIGIN__+0x86>
      ac:	80 ec       	ldi	r24, 0xC0	; 192
      ae:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
      b2:	08 95       	ret

000000b4 <writeChar>:

// Write a char ch at position pos
void writeChar(char ch, uint8_t pos) {
	// Check if outside range
	if (pos > 4 || pos < 0) return;	
      b4:	65 30       	cpi	r22, 0x05	; 5
      b6:	08 f0       	brcs	.+2      	; 0xba <writeChar+0x6>
      b8:	ea c0       	rjmp	.+468    	; 0x28e <writeChar+0x1da>

	// Get correct char data
	int* segment = getSegmentForChar(ch);
	
	// Chose position
	switch (pos) {
      ba:	62 30       	cpi	r22, 0x02	; 2
      bc:	09 f4       	brne	.+2      	; 0xc0 <writeChar+0xc>
      be:	6b c0       	rjmp	.+214    	; 0x196 <writeChar+0xe2>
      c0:	28 f4       	brcc	.+10     	; 0xcc <writeChar+0x18>
      c2:	66 23       	and	r22, r22
      c4:	51 f0       	breq	.+20     	; 0xda <writeChar+0x26>
      c6:	61 30       	cpi	r22, 0x01	; 1
      c8:	39 f1       	breq	.+78     	; 0x118 <writeChar+0x64>
      ca:	08 95       	ret
      cc:	63 30       	cpi	r22, 0x03	; 3
      ce:	09 f4       	brne	.+2      	; 0xd2 <writeChar+0x1e>
      d0:	81 c0       	rjmp	.+258    	; 0x1d4 <writeChar+0x120>
      d2:	64 30       	cpi	r22, 0x04	; 4
      d4:	09 f4       	brne	.+2      	; 0xd8 <writeChar+0x24>
      d6:	bd c0       	rjmp	.+378    	; 0x252 <writeChar+0x19e>
      d8:	08 95       	ret
		case 0:
			// Segment start at 0, 5, 10, 15, higher 4 bits.
			// (LCDDR0 & 0xF0) clears the segment before writing 
			LCDDR0 = (LCDDR0 & 0xF0) | segment[0];
      da:	ac ee       	ldi	r26, 0xEC	; 236
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	8c 91       	ld	r24, X
      e0:	80 7f       	andi	r24, 0xF0	; 240
      e2:	e0 e0       	ldi	r30, 0x00	; 0
      e4:	f0 e0       	ldi	r31, 0x00	; 0
      e6:	90 81       	ld	r25, Z
      e8:	89 2b       	or	r24, r25
      ea:	8c 93       	st	X, r24
			LCDDR5 = (LCDDR5 & 0xF0) | segment[1];
      ec:	a1 ef       	ldi	r26, 0xF1	; 241
      ee:	b0 e0       	ldi	r27, 0x00	; 0
      f0:	8c 91       	ld	r24, X
      f2:	80 7f       	andi	r24, 0xF0	; 240
      f4:	92 81       	ldd	r25, Z+2	; 0x02
      f6:	89 2b       	or	r24, r25
      f8:	8c 93       	st	X, r24
			LCDDR10 = (LCDDR10 & 0xF0) | segment[2];
      fa:	a6 ef       	ldi	r26, 0xF6	; 246
      fc:	b0 e0       	ldi	r27, 0x00	; 0
      fe:	8c 91       	ld	r24, X
     100:	80 7f       	andi	r24, 0xF0	; 240
     102:	94 81       	ldd	r25, Z+4	; 0x04
     104:	89 2b       	or	r24, r25
     106:	8c 93       	st	X, r24
			LCDDR15 = (LCDDR15 & 0xF0) | segment[3];
     108:	ab ef       	ldi	r26, 0xFB	; 251
     10a:	b0 e0       	ldi	r27, 0x00	; 0
     10c:	8c 91       	ld	r24, X
     10e:	80 7f       	andi	r24, 0xF0	; 240
     110:	96 81       	ldd	r25, Z+6	; 0x06
     112:	89 2b       	or	r24, r25
     114:	8c 93       	st	X, r24
			break;
     116:	08 95       	ret
		case 1:
			// Same segment just lower 4 bits
			LCDDR0 = (LCDDR0 & 0x0F) | (segment[0] << 4);
     118:	ac ee       	ldi	r26, 0xEC	; 236
     11a:	b0 e0       	ldi	r27, 0x00	; 0
     11c:	2c 91       	ld	r18, X
     11e:	e0 e0       	ldi	r30, 0x00	; 0
     120:	f0 e0       	ldi	r31, 0x00	; 0
     122:	80 81       	ld	r24, Z
     124:	91 81       	ldd	r25, Z+1	; 0x01
     126:	82 95       	swap	r24
     128:	92 95       	swap	r25
     12a:	90 7f       	andi	r25, 0xF0	; 240
     12c:	98 27       	eor	r25, r24
     12e:	80 7f       	andi	r24, 0xF0	; 240
     130:	98 27       	eor	r25, r24
     132:	92 2f       	mov	r25, r18
     134:	9f 70       	andi	r25, 0x0F	; 15
     136:	89 2b       	or	r24, r25
     138:	8c 93       	st	X, r24
			LCDDR5 = (LCDDR5 & 0x0F) | (segment[1] << 4);
     13a:	a1 ef       	ldi	r26, 0xF1	; 241
     13c:	b0 e0       	ldi	r27, 0x00	; 0
     13e:	2c 91       	ld	r18, X
     140:	82 81       	ldd	r24, Z+2	; 0x02
     142:	93 81       	ldd	r25, Z+3	; 0x03
     144:	82 95       	swap	r24
     146:	92 95       	swap	r25
     148:	90 7f       	andi	r25, 0xF0	; 240
     14a:	98 27       	eor	r25, r24
     14c:	80 7f       	andi	r24, 0xF0	; 240
     14e:	98 27       	eor	r25, r24
     150:	92 2f       	mov	r25, r18
     152:	9f 70       	andi	r25, 0x0F	; 15
     154:	89 2b       	or	r24, r25
     156:	8c 93       	st	X, r24
			LCDDR10 = (LCDDR10 & 0x0F) | (segment[2] << 4);
     158:	a6 ef       	ldi	r26, 0xF6	; 246
     15a:	b0 e0       	ldi	r27, 0x00	; 0
     15c:	2c 91       	ld	r18, X
     15e:	84 81       	ldd	r24, Z+4	; 0x04
     160:	95 81       	ldd	r25, Z+5	; 0x05
     162:	82 95       	swap	r24
     164:	92 95       	swap	r25
     166:	90 7f       	andi	r25, 0xF0	; 240
     168:	98 27       	eor	r25, r24
     16a:	80 7f       	andi	r24, 0xF0	; 240
     16c:	98 27       	eor	r25, r24
     16e:	92 2f       	mov	r25, r18
     170:	9f 70       	andi	r25, 0x0F	; 15
     172:	89 2b       	or	r24, r25
     174:	8c 93       	st	X, r24
			LCDDR15 = (LCDDR15 & 0x0F) | (segment[3] << 4);
     176:	ab ef       	ldi	r26, 0xFB	; 251
     178:	b0 e0       	ldi	r27, 0x00	; 0
     17a:	2c 91       	ld	r18, X
     17c:	86 81       	ldd	r24, Z+6	; 0x06
     17e:	97 81       	ldd	r25, Z+7	; 0x07
     180:	82 95       	swap	r24
     182:	92 95       	swap	r25
     184:	90 7f       	andi	r25, 0xF0	; 240
     186:	98 27       	eor	r25, r24
     188:	80 7f       	andi	r24, 0xF0	; 240
     18a:	98 27       	eor	r25, r24
     18c:	92 2f       	mov	r25, r18
     18e:	9f 70       	andi	r25, 0x0F	; 15
     190:	89 2b       	or	r24, r25
     192:	8c 93       	st	X, r24
			break;
     194:	08 95       	ret
		case 2:
			LCDDR1 = (LCDDR1 & 0xF0) | segment[0];
     196:	ad ee       	ldi	r26, 0xED	; 237
     198:	b0 e0       	ldi	r27, 0x00	; 0
     19a:	8c 91       	ld	r24, X
     19c:	80 7f       	andi	r24, 0xF0	; 240
     19e:	e0 e0       	ldi	r30, 0x00	; 0
     1a0:	f0 e0       	ldi	r31, 0x00	; 0
     1a2:	90 81       	ld	r25, Z
     1a4:	89 2b       	or	r24, r25
     1a6:	8c 93       	st	X, r24
			LCDDR6 = (LCDDR6 & 0xF0) | segment[1];
     1a8:	a2 ef       	ldi	r26, 0xF2	; 242
     1aa:	b0 e0       	ldi	r27, 0x00	; 0
     1ac:	8c 91       	ld	r24, X
     1ae:	80 7f       	andi	r24, 0xF0	; 240
     1b0:	92 81       	ldd	r25, Z+2	; 0x02
     1b2:	89 2b       	or	r24, r25
     1b4:	8c 93       	st	X, r24
			LCDDR11 = (LCDDR11 & 0xF0) | segment[2];
     1b6:	a7 ef       	ldi	r26, 0xF7	; 247
     1b8:	b0 e0       	ldi	r27, 0x00	; 0
     1ba:	8c 91       	ld	r24, X
     1bc:	80 7f       	andi	r24, 0xF0	; 240
     1be:	94 81       	ldd	r25, Z+4	; 0x04
     1c0:	89 2b       	or	r24, r25
     1c2:	8c 93       	st	X, r24
			LCDDR16 = (LCDDR16 & 0xF0) | segment[3];
     1c4:	ac ef       	ldi	r26, 0xFC	; 252
     1c6:	b0 e0       	ldi	r27, 0x00	; 0
     1c8:	8c 91       	ld	r24, X
     1ca:	80 7f       	andi	r24, 0xF0	; 240
     1cc:	96 81       	ldd	r25, Z+6	; 0x06
     1ce:	89 2b       	or	r24, r25
     1d0:	8c 93       	st	X, r24
			break;
     1d2:	08 95       	ret
		case 3:
			LCDDR1 = (LCDDR1 & 0x0F) | (segment[0] << 4);
     1d4:	ad ee       	ldi	r26, 0xED	; 237
     1d6:	b0 e0       	ldi	r27, 0x00	; 0
     1d8:	2c 91       	ld	r18, X
     1da:	e0 e0       	ldi	r30, 0x00	; 0
     1dc:	f0 e0       	ldi	r31, 0x00	; 0
     1de:	80 81       	ld	r24, Z
     1e0:	91 81       	ldd	r25, Z+1	; 0x01
     1e2:	82 95       	swap	r24
     1e4:	92 95       	swap	r25
     1e6:	90 7f       	andi	r25, 0xF0	; 240
     1e8:	98 27       	eor	r25, r24
     1ea:	80 7f       	andi	r24, 0xF0	; 240
     1ec:	98 27       	eor	r25, r24
     1ee:	92 2f       	mov	r25, r18
     1f0:	9f 70       	andi	r25, 0x0F	; 15
     1f2:	89 2b       	or	r24, r25
     1f4:	8c 93       	st	X, r24
			LCDDR6 = (LCDDR6 & 0x0F) | (segment[1] << 4);
     1f6:	a2 ef       	ldi	r26, 0xF2	; 242
     1f8:	b0 e0       	ldi	r27, 0x00	; 0
     1fa:	2c 91       	ld	r18, X
     1fc:	82 81       	ldd	r24, Z+2	; 0x02
     1fe:	93 81       	ldd	r25, Z+3	; 0x03
     200:	82 95       	swap	r24
     202:	92 95       	swap	r25
     204:	90 7f       	andi	r25, 0xF0	; 240
     206:	98 27       	eor	r25, r24
     208:	80 7f       	andi	r24, 0xF0	; 240
     20a:	98 27       	eor	r25, r24
     20c:	92 2f       	mov	r25, r18
     20e:	9f 70       	andi	r25, 0x0F	; 15
     210:	89 2b       	or	r24, r25
     212:	8c 93       	st	X, r24
			LCDDR11 = (LCDDR11 & 0x0F) | (segment[2] << 4);
     214:	a7 ef       	ldi	r26, 0xF7	; 247
     216:	b0 e0       	ldi	r27, 0x00	; 0
     218:	2c 91       	ld	r18, X
     21a:	84 81       	ldd	r24, Z+4	; 0x04
     21c:	95 81       	ldd	r25, Z+5	; 0x05
     21e:	82 95       	swap	r24
     220:	92 95       	swap	r25
     222:	90 7f       	andi	r25, 0xF0	; 240
     224:	98 27       	eor	r25, r24
     226:	80 7f       	andi	r24, 0xF0	; 240
     228:	98 27       	eor	r25, r24
     22a:	92 2f       	mov	r25, r18
     22c:	9f 70       	andi	r25, 0x0F	; 15
     22e:	89 2b       	or	r24, r25
     230:	8c 93       	st	X, r24
			LCDDR16 = (LCDDR16 & 0x0F) | (segment[3] << 4);
     232:	ac ef       	ldi	r26, 0xFC	; 252
     234:	b0 e0       	ldi	r27, 0x00	; 0
     236:	2c 91       	ld	r18, X
     238:	86 81       	ldd	r24, Z+6	; 0x06
     23a:	97 81       	ldd	r25, Z+7	; 0x07
     23c:	82 95       	swap	r24
     23e:	92 95       	swap	r25
     240:	90 7f       	andi	r25, 0xF0	; 240
     242:	98 27       	eor	r25, r24
     244:	80 7f       	andi	r24, 0xF0	; 240
     246:	98 27       	eor	r25, r24
     248:	92 2f       	mov	r25, r18
     24a:	9f 70       	andi	r25, 0x0F	; 15
     24c:	89 2b       	or	r24, r25
     24e:	8c 93       	st	X, r24
			break;
     250:	08 95       	ret
		case 4:
			LCDDR2 = (LCDDR2 & 0xF0) | segment[0];
     252:	ae ee       	ldi	r26, 0xEE	; 238
     254:	b0 e0       	ldi	r27, 0x00	; 0
     256:	8c 91       	ld	r24, X
     258:	80 7f       	andi	r24, 0xF0	; 240
     25a:	e0 e0       	ldi	r30, 0x00	; 0
     25c:	f0 e0       	ldi	r31, 0x00	; 0
     25e:	90 81       	ld	r25, Z
     260:	89 2b       	or	r24, r25
     262:	8c 93       	st	X, r24
			LCDDR7 = (LCDDR7 & 0xF0) | segment[1];
     264:	a3 ef       	ldi	r26, 0xF3	; 243
     266:	b0 e0       	ldi	r27, 0x00	; 0
     268:	8c 91       	ld	r24, X
     26a:	80 7f       	andi	r24, 0xF0	; 240
     26c:	92 81       	ldd	r25, Z+2	; 0x02
     26e:	89 2b       	or	r24, r25
     270:	8c 93       	st	X, r24
			LCDDR12 = (LCDDR12 & 0xF0) | segment[2];
     272:	a8 ef       	ldi	r26, 0xF8	; 248
     274:	b0 e0       	ldi	r27, 0x00	; 0
     276:	8c 91       	ld	r24, X
     278:	80 7f       	andi	r24, 0xF0	; 240
     27a:	94 81       	ldd	r25, Z+4	; 0x04
     27c:	89 2b       	or	r24, r25
     27e:	8c 93       	st	X, r24
			LCDDR17 = (LCDDR17 & 0xF0) | segment[3];
     280:	ad ef       	ldi	r26, 0xFD	; 253
     282:	b0 e0       	ldi	r27, 0x00	; 0
     284:	8c 91       	ld	r24, X
     286:	80 7f       	andi	r24, 0xF0	; 240
     288:	96 81       	ldd	r25, Z+6	; 0x06
     28a:	89 2b       	or	r24, r25
     28c:	8c 93       	st	X, r24
     28e:	08 95       	ret

00000290 <printAt>:
			break;
	}
}

void printAt(long num, int pos) {
     290:	8f 92       	push	r8
     292:	9f 92       	push	r9
     294:	af 92       	push	r10
     296:	bf 92       	push	r11
     298:	cf 92       	push	r12
     29a:	df 92       	push	r13
     29c:	ef 92       	push	r14
     29e:	ff 92       	push	r15
     2a0:	cf 93       	push	r28
     2a2:	df 93       	push	r29
     2a4:	4b 01       	movw	r8, r22
     2a6:	5c 01       	movw	r10, r24
     2a8:	ea 01       	movw	r28, r20
	writeChar((num % 100) / 10 + '0', pos);
     2aa:	24 e6       	ldi	r18, 0x64	; 100
     2ac:	30 e0       	ldi	r19, 0x00	; 0
     2ae:	40 e0       	ldi	r20, 0x00	; 0
     2b0:	50 e0       	ldi	r21, 0x00	; 0
     2b2:	0e 94 f5 10 	call	0x21ea	; 0x21ea <__divmodsi4>
     2b6:	0f 2e       	mov	r0, r31
     2b8:	fa e0       	ldi	r31, 0x0A	; 10
     2ba:	cf 2e       	mov	r12, r31
     2bc:	d1 2c       	mov	r13, r1
     2be:	e1 2c       	mov	r14, r1
     2c0:	f1 2c       	mov	r15, r1
     2c2:	f0 2d       	mov	r31, r0
     2c4:	a7 01       	movw	r20, r14
     2c6:	96 01       	movw	r18, r12
     2c8:	0e 94 f5 10 	call	0x21ea	; 0x21ea <__divmodsi4>
     2cc:	6c 2f       	mov	r22, r28
     2ce:	80 e3       	ldi	r24, 0x30	; 48
     2d0:	82 0f       	add	r24, r18
     2d2:	0e 94 5a 00 	call	0xb4	; 0xb4 <writeChar>
	pos++;
	writeChar(num % 10 + '0', pos);
     2d6:	21 96       	adiw	r28, 0x01	; 1
     2d8:	c5 01       	movw	r24, r10
     2da:	b4 01       	movw	r22, r8
     2dc:	a7 01       	movw	r20, r14
     2de:	96 01       	movw	r18, r12
     2e0:	0e 94 f5 10 	call	0x21ea	; 0x21ea <__divmodsi4>
     2e4:	86 2f       	mov	r24, r22
     2e6:	6c 2f       	mov	r22, r28
     2e8:	80 5d       	subi	r24, 0xD0	; 208
     2ea:	0e 94 5a 00 	call	0xb4	; 0xb4 <writeChar>
}
     2ee:	df 91       	pop	r29
     2f0:	cf 91       	pop	r28
     2f2:	ff 90       	pop	r15
     2f4:	ef 90       	pop	r14
     2f6:	df 90       	pop	r13
     2f8:	cf 90       	pop	r12
     2fa:	bf 90       	pop	r11
     2fc:	af 90       	pop	r10
     2fe:	9f 90       	pop	r9
     300:	8f 90       	pop	r8
     302:	08 95       	ret

00000304 <updateDisplay>:
        ASYNC(target, setFrequency, 0);
    }
    ASYNC(self, updateDisplay, 0);
}

void updateDisplay(GUI *self) {
     304:	cf 93       	push	r28
     306:	df 93       	push	r29
     308:	ec 01       	movw	r28, r24
    printAt(self->gen1->frequency, 0); //gen1 hz at pos 0-1
     30a:	ec 81       	ldd	r30, Y+4	; 0x04
     30c:	fd 81       	ldd	r31, Y+5	; 0x05
     30e:	60 85       	ldd	r22, Z+8	; 0x08
     310:	71 85       	ldd	r23, Z+9	; 0x09
     312:	07 2e       	mov	r0, r23
     314:	00 0c       	add	r0, r0
     316:	88 0b       	sbc	r24, r24
     318:	99 0b       	sbc	r25, r25
     31a:	40 e0       	ldi	r20, 0x00	; 0
     31c:	50 e0       	ldi	r21, 0x00	; 0
     31e:	0e 94 48 01 	call	0x290	; 0x290 <printAt>
    printAt(self->gen2->frequency, 3); //gen2 hz at pos 3-4
     322:	ee 81       	ldd	r30, Y+6	; 0x06
     324:	ff 81       	ldd	r31, Y+7	; 0x07
     326:	60 85       	ldd	r22, Z+8	; 0x08
     328:	71 85       	ldd	r23, Z+9	; 0x09
     32a:	07 2e       	mov	r0, r23
     32c:	00 0c       	add	r0, r0
     32e:	88 0b       	sbc	r24, r24
     330:	99 0b       	sbc	r25, r25
     332:	43 e0       	ldi	r20, 0x03	; 3
     334:	50 e0       	ldi	r21, 0x00	; 0
     336:	0e 94 48 01 	call	0x290	; 0x290 <printAt>
     33a:	df 91       	pop	r29
     33c:	cf 91       	pop	r28
     33e:	08 95       	ret

00000340 <switchFocus>:
	writeChar((num % 100) / 10 + '0', pos);
	pos++;
	writeChar(num % 10 + '0', pos);
}

void switchFocus(GUI *self, int newActive) {
     340:	cf 92       	push	r12
     342:	df 92       	push	r13
     344:	ef 92       	push	r14
     346:	ff 92       	push	r15
     348:	0f 93       	push	r16
     34a:	1f 93       	push	r17
     34c:	8c 01       	movw	r16, r24
    self->activeGen = newActive;
     34e:	fc 01       	movw	r30, r24
     350:	71 87       	std	Z+9, r23	; 0x09
     352:	60 87       	std	Z+8, r22	; 0x08
	SYNC(self, toggle, 0);
     354:	40 e0       	ldi	r20, 0x00	; 0
     356:	50 e0       	ldi	r21, 0x00	; 0
     358:	68 e4       	ldi	r22, 0x48	; 72
     35a:	73 e0       	ldi	r23, 0x03	; 3
     35c:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <sync>
    ASYNC(self, updateDisplay, 0);
     360:	c1 2c       	mov	r12, r1
     362:	d1 2c       	mov	r13, r1
     364:	0f 2e       	mov	r0, r31
     366:	f2 e8       	ldi	r31, 0x82	; 130
     368:	ef 2e       	mov	r14, r31
     36a:	f1 e0       	ldi	r31, 0x01	; 1
     36c:	ff 2e       	mov	r15, r31
     36e:	f0 2d       	mov	r31, r0
     370:	20 e0       	ldi	r18, 0x00	; 0
     372:	30 e0       	ldi	r19, 0x00	; 0
     374:	a9 01       	movw	r20, r18
     376:	60 e0       	ldi	r22, 0x00	; 0
     378:	70 e0       	ldi	r23, 0x00	; 0
     37a:	cb 01       	movw	r24, r22
     37c:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <async>
}
     380:	1f 91       	pop	r17
     382:	0f 91       	pop	r16
     384:	ff 90       	pop	r15
     386:	ef 90       	pop	r14
     388:	df 90       	pop	r13
     38a:	cf 90       	pop	r12
     38c:	08 95       	ret

0000038e <adjustFrequency>:

void adjustFrequency(GUI *self, int delta) {
     38e:	cf 92       	push	r12
     390:	df 92       	push	r13
     392:	ef 92       	push	r14
     394:	ff 92       	push	r15
     396:	0f 93       	push	r16
     398:	1f 93       	push	r17
     39a:	cf 93       	push	r28
     39c:	df 93       	push	r29
     39e:	ec 01       	movw	r28, r24
	// Get right target gen
    PulseGen *target = self->activeGen ? self->gen2 : self->gen1;
     3a0:	88 85       	ldd	r24, Y+8	; 0x08
     3a2:	99 85       	ldd	r25, Y+9	; 0x09
     3a4:	89 2b       	or	r24, r25
     3a6:	19 f0       	breq	.+6      	; 0x3ae <adjustFrequency+0x20>
     3a8:	8e 81       	ldd	r24, Y+6	; 0x06
     3aa:	9f 81       	ldd	r25, Y+7	; 0x07
     3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <adjustFrequency+0x24>
     3ae:	8c 81       	ldd	r24, Y+4	; 0x04
     3b0:	9d 81       	ldd	r25, Y+5	; 0x05
    int newFreq = target->frequency + delta;
     3b2:	fc 01       	movw	r30, r24
     3b4:	20 85       	ldd	r18, Z+8	; 0x08
     3b6:	31 85       	ldd	r19, Z+9	; 0x09
     3b8:	ab 01       	movw	r20, r22
     3ba:	42 0f       	add	r20, r18
     3bc:	53 1f       	adc	r21, r19
    if (newFreq < 0) newFreq = 0;
	// Update everything
    SYNC(target, setFrequency, newFreq);
     3be:	55 23       	and	r21, r21
     3c0:	14 f4       	brge	.+4      	; 0x3c6 <adjustFrequency+0x38>
     3c2:	40 e0       	ldi	r20, 0x00	; 0
     3c4:	50 e0       	ldi	r21, 0x00	; 0
     3c6:	6c e9       	ldi	r22, 0x9C	; 156
     3c8:	73 e0       	ldi	r23, 0x03	; 3
     3ca:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <sync>
    ASYNC(self, updateDisplay, 0);
     3ce:	c1 2c       	mov	r12, r1
     3d0:	d1 2c       	mov	r13, r1
     3d2:	0f 2e       	mov	r0, r31
     3d4:	f2 e8       	ldi	r31, 0x82	; 130
     3d6:	ef 2e       	mov	r14, r31
     3d8:	f1 e0       	ldi	r31, 0x01	; 1
     3da:	ff 2e       	mov	r15, r31
     3dc:	f0 2d       	mov	r31, r0
     3de:	8e 01       	movw	r16, r28
     3e0:	20 e0       	ldi	r18, 0x00	; 0
     3e2:	30 e0       	ldi	r19, 0x00	; 0
     3e4:	a9 01       	movw	r20, r18
     3e6:	60 e0       	ldi	r22, 0x00	; 0
     3e8:	70 e0       	ldi	r23, 0x00	; 0
     3ea:	cb 01       	movw	r24, r22
     3ec:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <async>
}
     3f0:	df 91       	pop	r29
     3f2:	cf 91       	pop	r28
     3f4:	1f 91       	pop	r17
     3f6:	0f 91       	pop	r16
     3f8:	ff 90       	pop	r15
     3fa:	ef 90       	pop	r14
     3fc:	df 90       	pop	r13
     3fe:	cf 90       	pop	r12
     400:	08 95       	ret

00000402 <saveRestore>:

void saveRestore(GUI *self) {
     402:	af 92       	push	r10
     404:	bf 92       	push	r11
     406:	cf 92       	push	r12
     408:	df 92       	push	r13
     40a:	ef 92       	push	r14
     40c:	ff 92       	push	r15
     40e:	0f 93       	push	r16
     410:	1f 93       	push	r17
     412:	cf 93       	push	r28
     414:	df 93       	push	r29
     416:	ec 01       	movw	r28, r24
    PulseGen *target = self->activeGen ? self->gen2 : self->gen1;
     418:	88 85       	ldd	r24, Y+8	; 0x08
     41a:	99 85       	ldd	r25, Y+9	; 0x09
     41c:	89 2b       	or	r24, r25
     41e:	19 f0       	breq	.+6      	; 0x426 <saveRestore+0x24>
     420:	ae 80       	ldd	r10, Y+6	; 0x06
     422:	bf 80       	ldd	r11, Y+7	; 0x07
     424:	02 c0       	rjmp	.+4      	; 0x42a <saveRestore+0x28>
     426:	ac 80       	ldd	r10, Y+4	; 0x04
     428:	bd 80       	ldd	r11, Y+5	; 0x05
    if (target->frequency == 0) {
     42a:	f5 01       	movw	r30, r10
     42c:	80 85       	ldd	r24, Z+8	; 0x08
     42e:	91 85       	ldd	r25, Z+9	; 0x09
     430:	89 2b       	or	r24, r25
     432:	91 f4       	brne	.+36     	; 0x458 <saveRestore+0x56>
        ASYNC(target, restore, 0);
     434:	c1 2c       	mov	r12, r1
     436:	d1 2c       	mov	r13, r1
     438:	0f 2e       	mov	r0, r31
     43a:	fa e1       	ldi	r31, 0x1A	; 26
     43c:	ef 2e       	mov	r14, r31
     43e:	f4 e0       	ldi	r31, 0x04	; 4
     440:	ff 2e       	mov	r15, r31
     442:	f0 2d       	mov	r31, r0
     444:	85 01       	movw	r16, r10
     446:	20 e0       	ldi	r18, 0x00	; 0
     448:	30 e0       	ldi	r19, 0x00	; 0
     44a:	a9 01       	movw	r20, r18
     44c:	60 e0       	ldi	r22, 0x00	; 0
     44e:	70 e0       	ldi	r23, 0x00	; 0
     450:	cb 01       	movw	r24, r22
     452:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <async>
     456:	1f c0       	rjmp	.+62     	; 0x496 <saveRestore+0x94>
    } else {
        ASYNC(target, save, 0);
     458:	c1 2c       	mov	r12, r1
     45a:	d1 2c       	mov	r13, r1
     45c:	0f 2e       	mov	r0, r31
     45e:	f4 e1       	ldi	r31, 0x14	; 20
     460:	ef 2e       	mov	r14, r31
     462:	f4 e0       	ldi	r31, 0x04	; 4
     464:	ff 2e       	mov	r15, r31
     466:	f0 2d       	mov	r31, r0
     468:	85 01       	movw	r16, r10
     46a:	20 e0       	ldi	r18, 0x00	; 0
     46c:	30 e0       	ldi	r19, 0x00	; 0
     46e:	a9 01       	movw	r20, r18
     470:	60 e0       	ldi	r22, 0x00	; 0
     472:	70 e0       	ldi	r23, 0x00	; 0
     474:	cb 01       	movw	r24, r22
     476:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <async>
        ASYNC(target, setFrequency, 0);
     47a:	0f 2e       	mov	r0, r31
     47c:	fc e9       	ldi	r31, 0x9C	; 156
     47e:	ef 2e       	mov	r14, r31
     480:	f3 e0       	ldi	r31, 0x03	; 3
     482:	ff 2e       	mov	r15, r31
     484:	f0 2d       	mov	r31, r0
     486:	20 e0       	ldi	r18, 0x00	; 0
     488:	30 e0       	ldi	r19, 0x00	; 0
     48a:	a9 01       	movw	r20, r18
     48c:	60 e0       	ldi	r22, 0x00	; 0
     48e:	70 e0       	ldi	r23, 0x00	; 0
     490:	cb 01       	movw	r24, r22
     492:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <async>
    }
    ASYNC(self, updateDisplay, 0);
     496:	c1 2c       	mov	r12, r1
     498:	d1 2c       	mov	r13, r1
     49a:	0f 2e       	mov	r0, r31
     49c:	f2 e8       	ldi	r31, 0x82	; 130
     49e:	ef 2e       	mov	r14, r31
     4a0:	f1 e0       	ldi	r31, 0x01	; 1
     4a2:	ff 2e       	mov	r15, r31
     4a4:	f0 2d       	mov	r31, r0
     4a6:	8e 01       	movw	r16, r28
     4a8:	20 e0       	ldi	r18, 0x00	; 0
     4aa:	30 e0       	ldi	r19, 0x00	; 0
     4ac:	a9 01       	movw	r20, r18
     4ae:	60 e0       	ldi	r22, 0x00	; 0
     4b0:	70 e0       	ldi	r23, 0x00	; 0
     4b2:	cb 01       	movw	r24, r22
     4b4:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <async>
}
     4b8:	df 91       	pop	r29
     4ba:	cf 91       	pop	r28
     4bc:	1f 91       	pop	r17
     4be:	0f 91       	pop	r16
     4c0:	ff 90       	pop	r15
     4c2:	ef 90       	pop	r14
     4c4:	df 90       	pop	r13
     4c6:	cf 90       	pop	r12
     4c8:	bf 90       	pop	r11
     4ca:	af 90       	pop	r10
     4cc:	08 95       	ret

000004ce <joystickInit>:
#include "PulseGen.h"


void joystickInit() {
    //sätter på upp, ner och inåt som input
    PORTB = PORTB | 0b11010000;
     4ce:	85 b1       	in	r24, 0x05	; 5
     4d0:	80 6d       	ori	r24, 0xD0	; 208
     4d2:	85 b9       	out	0x05, r24	; 5
    //sätter på höger och vänster  som input
    PORTE = PORTE | 0b00001100;
     4d4:	8e b1       	in	r24, 0x0e	; 14
     4d6:	8c 60       	ori	r24, 0x0C	; 12
     4d8:	8e b9       	out	0x0e, r24	; 14
    //DDRE = 0b01010000;
    //sätter på upp,ner,in (15) hög,ven (14) //sida 53 AVr..169 nånitng
    EIMSK = EIMSK | (1<<PCINT15) | (1<<PCINT14);
     4da:	8d b3       	in	r24, 0x1d	; 29
     4dc:	80 6c       	ori	r24, 0xC0	; 192
     4de:	8d bb       	out	0x1d, r24	; 29

    //sätter på upp, ner och inåt på joystick (som interrupt)
    PCMSK1 = PCMSK1 | (1<<PCINT15) | (1<<PCINT14) | (1<<PCINT12);
     4e0:	ec e6       	ldi	r30, 0x6C	; 108
     4e2:	f0 e0       	ldi	r31, 0x00	; 0
     4e4:	80 81       	ld	r24, Z
     4e6:	80 6d       	ori	r24, 0xD0	; 208
     4e8:	80 83       	st	Z, r24
    //sätter på höger och vänster på joystick (som interrupt)
    PCMSK0 = PCMSK0 | (1<<PCINT3) | (1<<PCINT2);
     4ea:	eb e6       	ldi	r30, 0x6B	; 107
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	80 81       	ld	r24, Z
     4f0:	8c 60       	ori	r24, 0x0C	; 12
     4f2:	80 83       	st	Z, r24
     4f4:	08 95       	ret

000004f6 <interruptPinB>:
}


// Joystick input handler
void interruptPinB(JoystickHandler *self) { 
     4f6:	cf 92       	push	r12
     4f8:	df 92       	push	r13
     4fa:	ef 92       	push	r14
     4fc:	ff 92       	push	r15
     4fe:	0f 93       	push	r16
     500:	1f 93       	push	r17
     502:	cf 93       	push	r28
     504:	df 93       	push	r29
     506:	ec 01       	movw	r28, r24
    if((PINB & 0b10000000) >> 7 == 0){ //down press on joystick
     508:	1f 99       	sbic	0x03, 7	; 3
     50a:	13 c0       	rjmp	.+38     	; 0x532 <__stack+0x33>
        ASYNC(self->gui, adjustFrequency, -1);
     50c:	0c 81       	ldd	r16, Y+4	; 0x04
     50e:	1d 81       	ldd	r17, Y+5	; 0x05
     510:	cc 24       	eor	r12, r12
     512:	ca 94       	dec	r12
     514:	dc 2c       	mov	r13, r12
     516:	0f 2e       	mov	r0, r31
     518:	f7 ec       	ldi	r31, 0xC7	; 199
     51a:	ef 2e       	mov	r14, r31
     51c:	f1 e0       	ldi	r31, 0x01	; 1
     51e:	ff 2e       	mov	r15, r31
     520:	f0 2d       	mov	r31, r0
     522:	20 e0       	ldi	r18, 0x00	; 0
     524:	30 e0       	ldi	r19, 0x00	; 0
     526:	a9 01       	movw	r20, r18
     528:	60 e0       	ldi	r22, 0x00	; 0
     52a:	70 e0       	ldi	r23, 0x00	; 0
     52c:	cb 01       	movw	r24, r22
     52e:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <async>
    }

    if((PINB & 0b01000000) >> 6 == 0){ //up press on joystick
     532:	1e 99       	sbic	0x03, 6	; 3
     534:	13 c0       	rjmp	.+38     	; 0x55c <__stack+0x5d>
        ASYNC(self->gui, adjustFrequency, 1);
     536:	0c 81       	ldd	r16, Y+4	; 0x04
     538:	1d 81       	ldd	r17, Y+5	; 0x05
     53a:	cc 24       	eor	r12, r12
     53c:	c3 94       	inc	r12
     53e:	d1 2c       	mov	r13, r1
     540:	0f 2e       	mov	r0, r31
     542:	f7 ec       	ldi	r31, 0xC7	; 199
     544:	ef 2e       	mov	r14, r31
     546:	f1 e0       	ldi	r31, 0x01	; 1
     548:	ff 2e       	mov	r15, r31
     54a:	f0 2d       	mov	r31, r0
     54c:	20 e0       	ldi	r18, 0x00	; 0
     54e:	30 e0       	ldi	r19, 0x00	; 0
     550:	a9 01       	movw	r20, r18
     552:	60 e0       	ldi	r22, 0x00	; 0
     554:	70 e0       	ldi	r23, 0x00	; 0
     556:	cb 01       	movw	r24, r22
     558:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <async>
    }

    if((PINB & 0b00010000) >> 4 == 0){ //middle press
     55c:	1c 99       	sbic	0x03, 4	; 3
     55e:	12 c0       	rjmp	.+36     	; 0x584 <__stack+0x85>
        ASYNC(self->gui, saveRestore, 0);
     560:	0c 81       	ldd	r16, Y+4	; 0x04
     562:	1d 81       	ldd	r17, Y+5	; 0x05
     564:	c1 2c       	mov	r12, r1
     566:	d1 2c       	mov	r13, r1
     568:	0f 2e       	mov	r0, r31
     56a:	f1 e0       	ldi	r31, 0x01	; 1
     56c:	ef 2e       	mov	r14, r31
     56e:	f2 e0       	ldi	r31, 0x02	; 2
     570:	ff 2e       	mov	r15, r31
     572:	f0 2d       	mov	r31, r0
     574:	20 e0       	ldi	r18, 0x00	; 0
     576:	30 e0       	ldi	r19, 0x00	; 0
     578:	a9 01       	movw	r20, r18
     57a:	60 e0       	ldi	r22, 0x00	; 0
     57c:	70 e0       	ldi	r23, 0x00	; 0
     57e:	cb 01       	movw	r24, r22
     580:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <async>
    }
}
     584:	df 91       	pop	r29
     586:	cf 91       	pop	r28
     588:	1f 91       	pop	r17
     58a:	0f 91       	pop	r16
     58c:	ff 90       	pop	r15
     58e:	ef 90       	pop	r14
     590:	df 90       	pop	r13
     592:	cf 90       	pop	r12
     594:	08 95       	ret

00000596 <interruptPinE>:

void interruptPinE(JoystickHandler *self) {  
     596:	cf 92       	push	r12
     598:	df 92       	push	r13
     59a:	ef 92       	push	r14
     59c:	ff 92       	push	r15
     59e:	0f 93       	push	r16
     5a0:	1f 93       	push	r17
     5a2:	cf 93       	push	r28
     5a4:	df 93       	push	r29
     5a6:	ec 01       	movw	r28, r24
    if((PINE & 0b00000100) >> 2 == 0){ //left press
     5a8:	62 99       	sbic	0x0c, 2	; 12
     5aa:	12 c0       	rjmp	.+36     	; 0x5d0 <interruptPinE+0x3a>
        ASYNC(self->gui, switchFocus, 0);
     5ac:	0c 81       	ldd	r16, Y+4	; 0x04
     5ae:	1d 81       	ldd	r17, Y+5	; 0x05
     5b0:	c1 2c       	mov	r12, r1
     5b2:	d1 2c       	mov	r13, r1
     5b4:	0f 2e       	mov	r0, r31
     5b6:	f0 ea       	ldi	r31, 0xA0	; 160
     5b8:	ef 2e       	mov	r14, r31
     5ba:	f1 e0       	ldi	r31, 0x01	; 1
     5bc:	ff 2e       	mov	r15, r31
     5be:	f0 2d       	mov	r31, r0
     5c0:	20 e0       	ldi	r18, 0x00	; 0
     5c2:	30 e0       	ldi	r19, 0x00	; 0
     5c4:	a9 01       	movw	r20, r18
     5c6:	60 e0       	ldi	r22, 0x00	; 0
     5c8:	70 e0       	ldi	r23, 0x00	; 0
     5ca:	cb 01       	movw	r24, r22
     5cc:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <async>
    }

    if((PINE & 0b00001000) >> 3 == 0){  //right press
     5d0:	63 99       	sbic	0x0c, 3	; 12
     5d2:	13 c0       	rjmp	.+38     	; 0x5fa <interruptPinE+0x64>
        ASYNC(self->gui, switchFocus, 1);
     5d4:	0c 81       	ldd	r16, Y+4	; 0x04
     5d6:	1d 81       	ldd	r17, Y+5	; 0x05
     5d8:	cc 24       	eor	r12, r12
     5da:	c3 94       	inc	r12
     5dc:	d1 2c       	mov	r13, r1
     5de:	0f 2e       	mov	r0, r31
     5e0:	f0 ea       	ldi	r31, 0xA0	; 160
     5e2:	ef 2e       	mov	r14, r31
     5e4:	f1 e0       	ldi	r31, 0x01	; 1
     5e6:	ff 2e       	mov	r15, r31
     5e8:	f0 2d       	mov	r31, r0
     5ea:	20 e0       	ldi	r18, 0x00	; 0
     5ec:	30 e0       	ldi	r19, 0x00	; 0
     5ee:	a9 01       	movw	r20, r18
     5f0:	60 e0       	ldi	r22, 0x00	; 0
     5f2:	70 e0       	ldi	r23, 0x00	; 0
     5f4:	cb 01       	movw	r24, r22
     5f6:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <async>
    }
     5fa:	df 91       	pop	r29
     5fc:	cf 91       	pop	r28
     5fe:	1f 91       	pop	r17
     600:	0f 91       	pop	r16
     602:	ff 90       	pop	r15
     604:	ef 90       	pop	r14
     606:	df 90       	pop	r13
     608:	cf 90       	pop	r12
     60a:	08 95       	ret

0000060c <sysInit>:
GUI gui = initGUI(&gen1, &gen2);
JoystickHandler joystick = initJoystickHandler(&gui);

void sysInit(){
    // Clock Prescale Register "maximum speed"
	CLKPR = 0b10000000; // Clock Prescaler Change Enable
     60c:	e1 e6       	ldi	r30, 0x61	; 97
     60e:	f0 e0       	ldi	r31, 0x00	; 0
     610:	80 e8       	ldi	r24, 0x80	; 128
     612:	80 83       	st	Z, r24
	CLKPR = 0b00000000; // Set 0 for sysclock
     614:	10 82       	st	Z, r1
     616:	08 95       	ret

00000618 <pinOutputInit>:
}

void pinOutputInit(){
    // Initialize Port E as output for PE4 and PE6
	DDRE |= (1 << PE4) | (1 << PE6);
     618:	8d b1       	in	r24, 0x0d	; 13
     61a:	80 65       	ori	r24, 0x50	; 80
     61c:	8d b9       	out	0x0d, r24	; 13
     61e:	08 95       	ret

00000620 <main>:
}


int main() {
    sysInit();
     620:	0e 94 06 03 	call	0x60c	; 0x60c <sysInit>
    pinOutputInit();
     624:	0e 94 0c 03 	call	0x618	; 0x618 <pinOutputInit>
    joystickInit();
     628:	0e 94 67 02 	call	0x4ce	; 0x4ce <joystickInit>
    LCD_init();
     62c:	0e 94 4d 00 	call	0x9a	; 0x9a <LCD_init>
    
    // Instal interupt handler
    //when the joystick's vertical state changes
    INSTALL(&joystick, interruptPinB, IRQ_PCINT1);
     630:	42 e0       	ldi	r20, 0x02	; 2
     632:	6b e7       	ldi	r22, 0x7B	; 123
     634:	72 e0       	ldi	r23, 0x02	; 2
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	91 e0       	ldi	r25, 0x01	; 1
     63a:	0e 94 ab 10 	call	0x2156	; 0x2156 <install>
    //when the joystick's horizontal (minus middle) state changes
    INSTALL(&joystick, interruptPinE, IRQ_PCINT0);
     63e:	41 e0       	ldi	r20, 0x01	; 1
     640:	6b ec       	ldi	r22, 0xCB	; 203
     642:	72 e0       	ldi	r23, 0x02	; 2
     644:	80 e0       	ldi	r24, 0x00	; 0
     646:	91 e0       	ldi	r25, 0x01	; 1
     648:	0e 94 ab 10 	call	0x2156	; 0x2156 <install>
    
    // Start kernel
    return TINYTIMBER(&gui, NULL, NULL);
     64c:	40 e0       	ldi	r20, 0x00	; 0
     64e:	50 e0       	ldi	r21, 0x00	; 0
     650:	60 e0       	ldi	r22, 0x00	; 0
     652:	70 e0       	ldi	r23, 0x00	; 0
     654:	86 e0       	ldi	r24, 0x06	; 6
     656:	91 e0       	ldi	r25, 0x01	; 1
     658:	0e 94 c5 10 	call	0x218a	; 0x218a <tinytimber>
}
     65c:	08 95       	ret

0000065e <setPin>:
     65e:	45 2b       	or	r20, r21
     660:	59 f0       	breq	.+22     	; 0x678 <setPin+0x1a>
     662:	2e b1       	in	r18, 0x0e	; 14
     664:	81 e0       	ldi	r24, 0x01	; 1
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	02 c0       	rjmp	.+4      	; 0x66e <setPin+0x10>
     66a:	88 0f       	add	r24, r24
     66c:	99 1f       	adc	r25, r25
     66e:	6a 95       	dec	r22
     670:	e2 f7       	brpl	.-8      	; 0x66a <setPin+0xc>
     672:	82 2b       	or	r24, r18
     674:	8e b9       	out	0x0e, r24	; 14
     676:	08 95       	ret
     678:	2e b1       	in	r18, 0x0e	; 14
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	02 c0       	rjmp	.+4      	; 0x684 <setPin+0x26>
     680:	88 0f       	add	r24, r24
     682:	99 1f       	adc	r25, r25
     684:	6a 95       	dec	r22
     686:	e2 f7       	brpl	.-8      	; 0x680 <setPin+0x22>
     688:	80 95       	com	r24
     68a:	82 23       	and	r24, r18
     68c:	8e b9       	out	0x0e, r24	; 14
     68e:	08 95       	ret

00000690 <toggle>:
        ASYNC(self->write, setPin, self->bit | 0);
    }
}

// Toggle output and schedule next toggle
void toggle(PulseGen *self) {
     690:	cf 92       	push	r12
     692:	df 92       	push	r13
     694:	ef 92       	push	r14
     696:	ff 92       	push	r15
     698:	0f 93       	push	r16
     69a:	1f 93       	push	r17
     69c:	cf 93       	push	r28
     69e:	df 93       	push	r29
     6a0:	ec 01       	movw	r28, r24
    self->state = !self->state;
     6a2:	81 e0       	ldi	r24, 0x01	; 1
     6a4:	9d 81       	ldd	r25, Y+5	; 0x05
     6a6:	91 11       	cpse	r25, r1
     6a8:	80 e0       	ldi	r24, 0x00	; 0
     6aa:	8d 83       	std	Y+5, r24	; 0x05
    ASYNC(self->write, setPin, self->bit | (self->state << self->bit));
     6ac:	9c 81       	ldd	r25, Y+4	; 0x04
     6ae:	c8 2e       	mov	r12, r24
     6b0:	d1 2c       	mov	r13, r1
     6b2:	09 2e       	mov	r0, r25
     6b4:	02 c0       	rjmp	.+4      	; 0x6ba <toggle+0x2a>
     6b6:	cc 0c       	add	r12, r12
     6b8:	dd 1c       	adc	r13, r13
     6ba:	0a 94       	dec	r0
     6bc:	e2 f7       	brpl	.-8      	; 0x6b6 <toggle+0x26>
     6be:	c9 2a       	or	r12, r25
     6c0:	0c 85       	ldd	r16, Y+12	; 0x0c
     6c2:	1d 85       	ldd	r17, Y+13	; 0x0d
     6c4:	0f 2e       	mov	r0, r31
     6c6:	ff e2       	ldi	r31, 0x2F	; 47
     6c8:	ef 2e       	mov	r14, r31
     6ca:	f3 e0       	ldi	r31, 0x03	; 3
     6cc:	ff 2e       	mov	r15, r31
     6ce:	f0 2d       	mov	r31, r0
     6d0:	20 e0       	ldi	r18, 0x00	; 0
     6d2:	30 e0       	ldi	r19, 0x00	; 0
     6d4:	a9 01       	movw	r20, r18
     6d6:	60 e0       	ldi	r22, 0x00	; 0
     6d8:	70 e0       	ldi	r23, 0x00	; 0
     6da:	cb 01       	movw	r24, r22
     6dc:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <async>
    
    if (self->frequency > 0) {
     6e0:	68 85       	ldd	r22, Y+8	; 0x08
     6e2:	79 85       	ldd	r23, Y+9	; 0x09
     6e4:	16 16       	cp	r1, r22
     6e6:	17 06       	cpc	r1, r23
     6e8:	f4 f4       	brge	.+60     	; 0x726 <toggle+0x96>
        int period = 1000 / self->frequency;
        self->pending_msg = AFTER(period/2, self, toggle, 0);
     6ea:	88 ee       	ldi	r24, 0xE8	; 232
     6ec:	93 e0       	ldi	r25, 0x03	; 3
     6ee:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <__divmodhi4>
     6f2:	77 23       	and	r23, r23
     6f4:	14 f4       	brge	.+4      	; 0x6fa <toggle+0x6a>
     6f6:	6f 5f       	subi	r22, 0xFF	; 255
     6f8:	7f 4f       	sbci	r23, 0xFF	; 255
     6fa:	75 95       	asr	r23
     6fc:	67 95       	ror	r22
     6fe:	07 2e       	mov	r0, r23
     700:	00 0c       	add	r0, r0
     702:	88 0b       	sbc	r24, r24
     704:	99 0b       	sbc	r25, r25
     706:	c1 2c       	mov	r12, r1
     708:	d1 2c       	mov	r13, r1
     70a:	0f 2e       	mov	r0, r31
     70c:	f8 e4       	ldi	r31, 0x48	; 72
     70e:	ef 2e       	mov	r14, r31
     710:	f3 e0       	ldi	r31, 0x03	; 3
     712:	ff 2e       	mov	r15, r31
     714:	f0 2d       	mov	r31, r0
     716:	8e 01       	movw	r16, r28
     718:	20 e0       	ldi	r18, 0x00	; 0
     71a:	30 e0       	ldi	r19, 0x00	; 0
     71c:	a9 01       	movw	r20, r18
     71e:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <async>
     722:	9f 83       	std	Y+7, r25	; 0x07
     724:	8e 83       	std	Y+6, r24	; 0x06
    }
}
     726:	df 91       	pop	r29
     728:	cf 91       	pop	r28
     72a:	1f 91       	pop	r17
     72c:	0f 91       	pop	r16
     72e:	ff 90       	pop	r15
     730:	ef 90       	pop	r14
     732:	df 90       	pop	r13
     734:	cf 90       	pop	r12
     736:	08 95       	ret

00000738 <setFrequency>:
#include "PulseGen.h"
#include "PortWrite.h"
#include "TinyTimber.h"


void setFrequency(PulseGen *self, int freq) {
     738:	af 92       	push	r10
     73a:	bf 92       	push	r11
     73c:	cf 92       	push	r12
     73e:	df 92       	push	r13
     740:	ef 92       	push	r14
     742:	ff 92       	push	r15
     744:	0f 93       	push	r16
     746:	1f 93       	push	r17
     748:	cf 93       	push	r28
     74a:	df 93       	push	r29
    if (freq == self->frequency) return;
     74c:	fc 01       	movw	r30, r24
     74e:	20 85       	ldd	r18, Z+8	; 0x08
     750:	31 85       	ldd	r19, Z+9	; 0x09
     752:	26 17       	cp	r18, r22
     754:	37 07       	cpc	r19, r23
     756:	09 f4       	brne	.+2      	; 0x75a <setFrequency+0x22>
     758:	5c c0       	rjmp	.+184    	; 0x812 <setFrequency+0xda>
     75a:	5b 01       	movw	r10, r22
     75c:	ec 01       	movw	r28, r24
    
    // Cancel pending events
    if (self->pending_msg) {
     75e:	86 81       	ldd	r24, Z+6	; 0x06
     760:	97 81       	ldd	r25, Z+7	; 0x07
     762:	00 97       	sbiw	r24, 0x00	; 0
     764:	11 f0       	breq	.+4      	; 0x76a <setFrequency+0x32>
        ABORT(self->pending_msg);
     766:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <ABORT>
    }
    
    self->frequency = freq;
     76a:	b9 86       	std	Y+9, r11	; 0x09
     76c:	a8 86       	std	Y+8, r10	; 0x08
    
    if (freq > 0) {
     76e:	1a 14       	cp	r1, r10
     770:	1b 04       	cpc	r1, r11
     772:	ec f5       	brge	.+122    	; 0x7ee <setFrequency+0xb6>
        // Start new toggle cycle
        int period = 1000 / freq;  // Full period in ms
        self->state = 1;
     774:	81 e0       	ldi	r24, 0x01	; 1
     776:	8d 83       	std	Y+5, r24	; 0x05
        ASYNC(self->write, setPin, self->bit | (self->state << self->bit));
     778:	8c 81       	ldd	r24, Y+4	; 0x04
     77a:	21 e0       	ldi	r18, 0x01	; 1
     77c:	30 e0       	ldi	r19, 0x00	; 0
     77e:	69 01       	movw	r12, r18
     780:	08 2e       	mov	r0, r24
     782:	02 c0       	rjmp	.+4      	; 0x788 <setFrequency+0x50>
     784:	cc 0c       	add	r12, r12
     786:	dd 1c       	adc	r13, r13
     788:	0a 94       	dec	r0
     78a:	e2 f7       	brpl	.-8      	; 0x784 <setFrequency+0x4c>
     78c:	c8 2a       	or	r12, r24
     78e:	0c 85       	ldd	r16, Y+12	; 0x0c
     790:	1d 85       	ldd	r17, Y+13	; 0x0d
     792:	0f 2e       	mov	r0, r31
     794:	ff e2       	ldi	r31, 0x2F	; 47
     796:	ef 2e       	mov	r14, r31
     798:	f3 e0       	ldi	r31, 0x03	; 3
     79a:	ff 2e       	mov	r15, r31
     79c:	f0 2d       	mov	r31, r0
     79e:	20 e0       	ldi	r18, 0x00	; 0
     7a0:	30 e0       	ldi	r19, 0x00	; 0
     7a2:	a9 01       	movw	r20, r18
     7a4:	60 e0       	ldi	r22, 0x00	; 0
     7a6:	70 e0       	ldi	r23, 0x00	; 0
     7a8:	cb 01       	movw	r24, r22
     7aa:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <async>
        self->pending_msg = AFTER(period/2, self, toggle, 0);
     7ae:	88 ee       	ldi	r24, 0xE8	; 232
     7b0:	93 e0       	ldi	r25, 0x03	; 3
     7b2:	b5 01       	movw	r22, r10
     7b4:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <__divmodhi4>
     7b8:	77 23       	and	r23, r23
     7ba:	14 f4       	brge	.+4      	; 0x7c0 <setFrequency+0x88>
     7bc:	6f 5f       	subi	r22, 0xFF	; 255
     7be:	7f 4f       	sbci	r23, 0xFF	; 255
     7c0:	75 95       	asr	r23
     7c2:	67 95       	ror	r22
     7c4:	07 2e       	mov	r0, r23
     7c6:	00 0c       	add	r0, r0
     7c8:	88 0b       	sbc	r24, r24
     7ca:	99 0b       	sbc	r25, r25
     7cc:	c1 2c       	mov	r12, r1
     7ce:	d1 2c       	mov	r13, r1
     7d0:	0f 2e       	mov	r0, r31
     7d2:	f8 e4       	ldi	r31, 0x48	; 72
     7d4:	ef 2e       	mov	r14, r31
     7d6:	f3 e0       	ldi	r31, 0x03	; 3
     7d8:	ff 2e       	mov	r15, r31
     7da:	f0 2d       	mov	r31, r0
     7dc:	8e 01       	movw	r16, r28
     7de:	20 e0       	ldi	r18, 0x00	; 0
     7e0:	30 e0       	ldi	r19, 0x00	; 0
     7e2:	a9 01       	movw	r20, r18
     7e4:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <async>
     7e8:	9f 83       	std	Y+7, r25	; 0x07
     7ea:	8e 83       	std	Y+6, r24	; 0x06
     7ec:	12 c0       	rjmp	.+36     	; 0x812 <setFrequency+0xda>
    } else {
        // Set output low
        ASYNC(self->write, setPin, self->bit | 0);
     7ee:	cc 80       	ldd	r12, Y+4	; 0x04
     7f0:	d1 2c       	mov	r13, r1
     7f2:	0c 85       	ldd	r16, Y+12	; 0x0c
     7f4:	1d 85       	ldd	r17, Y+13	; 0x0d
     7f6:	0f 2e       	mov	r0, r31
     7f8:	ff e2       	ldi	r31, 0x2F	; 47
     7fa:	ef 2e       	mov	r14, r31
     7fc:	f3 e0       	ldi	r31, 0x03	; 3
     7fe:	ff 2e       	mov	r15, r31
     800:	f0 2d       	mov	r31, r0
     802:	20 e0       	ldi	r18, 0x00	; 0
     804:	30 e0       	ldi	r19, 0x00	; 0
     806:	a9 01       	movw	r20, r18
     808:	60 e0       	ldi	r22, 0x00	; 0
     80a:	70 e0       	ldi	r23, 0x00	; 0
     80c:	cb 01       	movw	r24, r22
     80e:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <async>
    }
}
     812:	df 91       	pop	r29
     814:	cf 91       	pop	r28
     816:	1f 91       	pop	r17
     818:	0f 91       	pop	r16
     81a:	ff 90       	pop	r15
     81c:	ef 90       	pop	r14
     81e:	df 90       	pop	r13
     820:	cf 90       	pop	r12
     822:	bf 90       	pop	r11
     824:	af 90       	pop	r10
     826:	08 95       	ret

00000828 <save>:
    }
}

// Saves the freq
void save(PulseGen *self) {
	self->saved_freq = self->frequency;
     828:	fc 01       	movw	r30, r24
     82a:	20 85       	ldd	r18, Z+8	; 0x08
     82c:	31 85       	ldd	r19, Z+9	; 0x09
     82e:	33 87       	std	Z+11, r19	; 0x0b
     830:	22 87       	std	Z+10, r18	; 0x0a
     832:	08 95       	ret

00000834 <restore>:
}

// Restores freq to last saved
void restore(PulseGen *self) {
	self->frequency = self->saved_freq;
     834:	fc 01       	movw	r30, r24
     836:	22 85       	ldd	r18, Z+10	; 0x0a
     838:	33 85       	ldd	r19, Z+11	; 0x0b
     83a:	31 87       	std	Z+9, r19	; 0x09
     83c:	20 87       	std	Z+8, r18	; 0x08
     83e:	08 95       	ret

00000840 <remove>:
     840:	fb 01       	movw	r30, r22
     842:	a0 81       	ld	r26, Z
     844:	b1 81       	ldd	r27, Z+1	; 0x01
     846:	10 97       	sbiw	r26, 0x00	; 0
     848:	f1 f0       	breq	.+60     	; 0x886 <remove+0x46>
     84a:	a8 17       	cp	r26, r24
     84c:	b9 07       	cpc	r27, r25
     84e:	11 f4       	brne	.+4      	; 0x854 <remove+0x14>
     850:	11 c0       	rjmp	.+34     	; 0x874 <remove+0x34>
     852:	df 01       	movw	r26, r30
     854:	ed 91       	ld	r30, X+
     856:	fc 91       	ld	r31, X
     858:	11 97       	sbiw	r26, 0x01	; 1
     85a:	30 97       	sbiw	r30, 0x00	; 0
     85c:	b9 f0       	breq	.+46     	; 0x88c <remove+0x4c>
     85e:	8e 17       	cp	r24, r30
     860:	9f 07       	cpc	r25, r31
     862:	b9 f7       	brne	.-18     	; 0x852 <remove+0x12>
     864:	16 c0       	rjmp	.+44     	; 0x892 <remove+0x52>
     866:	80 81       	ld	r24, Z
     868:	91 81       	ldd	r25, Z+1	; 0x01
     86a:	8d 93       	st	X+, r24
     86c:	9c 93       	st	X, r25
     86e:	81 e0       	ldi	r24, 0x01	; 1
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	08 95       	ret
     874:	fd 01       	movw	r30, r26
     876:	80 81       	ld	r24, Z
     878:	91 81       	ldd	r25, Z+1	; 0x01
     87a:	fb 01       	movw	r30, r22
     87c:	91 83       	std	Z+1, r25	; 0x01
     87e:	80 83       	st	Z, r24
     880:	81 e0       	ldi	r24, 0x01	; 1
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	08 95       	ret
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	08 95       	ret
     88c:	80 e0       	ldi	r24, 0x00	; 0
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	08 95       	ret
     892:	10 97       	sbiw	r26, 0x00	; 0
     894:	41 f7       	brne	.-48     	; 0x866 <remove+0x26>
     896:	ef cf       	rjmp	.-34     	; 0x876 <remove+0x36>

00000898 <initialize>:
     898:	cf 93       	push	r28
     89a:	df 93       	push	r29
     89c:	00 d0       	rcall	.+0      	; 0x89e <initialize+0x6>
     89e:	00 d0       	rcall	.+0      	; 0x8a0 <initialize+0x8>
     8a0:	cd b7       	in	r28, 0x3d	; 61
     8a2:	de b7       	in	r29, 0x3e	; 62
     8a4:	8b e2       	ldi	r24, 0x2B	; 43
     8a6:	92 e0       	ldi	r25, 0x02	; 2
     8a8:	2b e0       	ldi	r18, 0x0B	; 11
     8aa:	33 e0       	ldi	r19, 0x03	; 3
     8ac:	fc 01       	movw	r30, r24
     8ae:	70 97       	sbiw	r30, 0x10	; 16
     8b0:	91 83       	std	Z+1, r25	; 0x01
     8b2:	80 83       	st	Z, r24
     8b4:	40 96       	adiw	r24, 0x10	; 16
     8b6:	82 17       	cp	r24, r18
     8b8:	93 07       	cpc	r25, r19
     8ba:	c1 f7       	brne	.-16     	; 0x8ac <initialize+0x14>
     8bc:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <messages+0xe1>
     8c0:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <messages+0xe0>
     8c4:	e6 e6       	ldi	r30, 0x66	; 102
     8c6:	f1 e0       	ldi	r31, 0x01	; 1
     8c8:	83 e8       	ldi	r24, 0x83	; 131
     8ca:	91 e0       	ldi	r25, 0x01	; 1
     8cc:	91 83       	std	Z+1, r25	; 0x01
     8ce:	80 83       	st	Z, r24
     8d0:	80 ea       	ldi	r24, 0xA0	; 160
     8d2:	91 e0       	ldi	r25, 0x01	; 1
     8d4:	96 8f       	std	Z+30, r25	; 0x1e
     8d6:	85 8f       	std	Z+29, r24	; 0x1d
     8d8:	ad eb       	ldi	r26, 0xBD	; 189
     8da:	b1 e0       	ldi	r27, 0x01	; 1
     8dc:	b3 af       	std	Z+59, r27	; 0x3b
     8de:	a2 af       	std	Z+58, r26	; 0x3a
     8e0:	1d 92       	st	X+, r1
     8e2:	1c 92       	st	X, r1
     8e4:	fa 83       	std	Y+2, r31	; 0x02
     8e6:	e9 83       	std	Y+1, r30	; 0x01
     8e8:	e7 e6       	ldi	r30, 0x67	; 103
     8ea:	f3 e0       	ldi	r31, 0x03	; 3
     8ec:	fc 83       	std	Y+4, r31	; 0x04
     8ee:	eb 83       	std	Y+3, r30	; 0x03
     8f0:	89 81       	ldd	r24, Y+1	; 0x01
     8f2:	9a 81       	ldd	r25, Y+2	; 0x02
     8f4:	06 96       	adiw	r24, 0x06	; 6
     8f6:	0e 94 4a 11 	call	0x2294	; 0x2294 <setjmp>
     8fa:	8b 81       	ldd	r24, Y+3	; 0x03
     8fc:	9c 81       	ldd	r25, Y+4	; 0x04
     8fe:	e9 81       	ldd	r30, Y+1	; 0x01
     900:	fa 81       	ldd	r31, Y+2	; 0x02
     902:	97 8b       	std	Z+23, r25	; 0x17
     904:	86 8b       	std	Z+22, r24	; 0x16
     906:	91 8f       	std	Z+25, r25	; 0x19
     908:	80 8f       	std	Z+24, r24	; 0x18
     90a:	8c ee       	ldi	r24, 0xEC	; 236
     90c:	9f e0       	ldi	r25, 0x0F	; 15
     90e:	94 8f       	std	Z+28, r25	; 0x1c
     910:	83 8f       	std	Z+27, r24	; 0x1b
     912:	15 82       	std	Z+5, r1	; 0x05
     914:	14 82       	std	Z+4, r1	; 0x04
     916:	7d 96       	adiw	r30, 0x1d	; 29
     918:	fa 83       	std	Y+2, r31	; 0x02
     91a:	e9 83       	std	Y+1, r30	; 0x01
     91c:	eb 81       	ldd	r30, Y+3	; 0x03
     91e:	fc 81       	ldd	r31, Y+4	; 0x04
     920:	e0 5a       	subi	r30, 0xA0	; 160
     922:	ff 4f       	sbci	r31, 0xFF	; 255
     924:	fc 83       	std	Y+4, r31	; 0x04
     926:	eb 83       	std	Y+3, r30	; 0x03
     928:	89 81       	ldd	r24, Y+1	; 0x01
     92a:	9a 81       	ldd	r25, Y+2	; 0x02
     92c:	8a 5d       	subi	r24, 0xDA	; 218
     92e:	91 40       	sbci	r25, 0x01	; 1
     930:	f9 f6       	brne	.-66     	; 0x8f0 <initialize+0x58>
     932:	ee ef       	ldi	r30, 0xFE	; 254
     934:	f1 e0       	ldi	r31, 0x01	; 1
     936:	11 82       	std	Z+1, r1	; 0x01
     938:	10 82       	st	Z, r1
     93a:	15 82       	std	Z+5, r1	; 0x05
     93c:	14 82       	std	Z+4, r1	; 0x04
     93e:	13 82       	std	Z+3, r1	; 0x03
     940:	12 82       	std	Z+2, r1	; 0x02
     942:	e1 e6       	ldi	r30, 0x61	; 97
     944:	f0 e0       	ldi	r31, 0x00	; 0
     946:	80 e8       	ldi	r24, 0x80	; 128
     948:	80 83       	st	Z, r24
     94a:	10 82       	st	Z, r1
     94c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     950:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     954:	84 e0       	ldi	r24, 0x04	; 4
     956:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     95a:	81 e0       	ldi	r24, 0x01	; 1
     95c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
     960:	0f 90       	pop	r0
     962:	0f 90       	pop	r0
     964:	0f 90       	pop	r0
     966:	0f 90       	pop	r0
     968:	df 91       	pop	r29
     96a:	cf 91       	pop	r28
     96c:	08 95       	ret

0000096e <dispatch>:
     96e:	cf 93       	push	r28
     970:	df 93       	push	r29
     972:	00 d0       	rcall	.+0      	; 0x974 <dispatch+0x6>
     974:	cd b7       	in	r28, 0x3d	; 61
     976:	de b7       	in	r29, 0x3e	; 62
     978:	9a 83       	std	Y+2, r25	; 0x02
     97a:	89 83       	std	Y+1, r24	; 0x01
     97c:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <current>
     980:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <current+0x1>
     984:	06 96       	adiw	r24, 0x06	; 6
     986:	0e 94 4a 11 	call	0x2294	; 0x2294 <setjmp>
     98a:	89 2b       	or	r24, r25
     98c:	59 f4       	brne	.+22     	; 0x9a4 <dispatch+0x36>
     98e:	89 81       	ldd	r24, Y+1	; 0x01
     990:	9a 81       	ldd	r25, Y+2	; 0x02
     992:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <current+0x1>
     996:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <current>
     99a:	61 e0       	ldi	r22, 0x01	; 1
     99c:	70 e0       	ldi	r23, 0x00	; 0
     99e:	06 96       	adiw	r24, 0x06	; 6
     9a0:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <longjmp>
     9a4:	0f 90       	pop	r0
     9a6:	0f 90       	pop	r0
     9a8:	df 91       	pop	r29
     9aa:	cf 91       	pop	r28
     9ac:	08 95       	ret

000009ae <schedule>:
     9ae:	0f 93       	push	r16
     9b0:	1f 93       	push	r17
     9b2:	cf 93       	push	r28
     9b4:	df 93       	push	r29
     9b6:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <msgQ>
     9ba:	f0 91 41 01 	lds	r31, 0x0141	; 0x800141 <msgQ+0x1>
     9be:	30 97       	sbiw	r30, 0x00	; 0
     9c0:	61 f1       	breq	.+88     	; 0xa1a <schedule+0x6c>
     9c2:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <threadPool>
     9c6:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <threadPool+0x1>
     9ca:	00 97       	sbiw	r24, 0x00	; 0
     9cc:	31 f1       	breq	.+76     	; 0xa1a <schedule+0x6c>
     9ce:	c0 91 2e 01 	lds	r28, 0x012E	; 0x80012e <activeStack>
     9d2:	d0 91 2f 01 	lds	r29, 0x012F	; 0x80012f <activeStack+0x1>
     9d6:	aa 81       	ldd	r26, Y+2	; 0x02
     9d8:	bb 81       	ldd	r27, Y+3	; 0x03
     9da:	10 97       	sbiw	r26, 0x00	; 0
     9dc:	79 f0       	breq	.+30     	; 0x9fc <schedule+0x4e>
     9de:	46 81       	ldd	r20, Z+6	; 0x06
     9e0:	57 81       	ldd	r21, Z+7	; 0x07
     9e2:	60 85       	ldd	r22, Z+8	; 0x08
     9e4:	71 85       	ldd	r23, Z+9	; 0x09
     9e6:	16 96       	adiw	r26, 0x06	; 6
     9e8:	0d 91       	ld	r16, X+
     9ea:	1d 91       	ld	r17, X+
     9ec:	2d 91       	ld	r18, X+
     9ee:	3c 91       	ld	r19, X
     9f0:	19 97       	sbiw	r26, 0x09	; 9
     9f2:	40 1b       	sub	r20, r16
     9f4:	51 0b       	sbc	r21, r17
     9f6:	62 0b       	sbc	r22, r18
     9f8:	73 0b       	sbc	r23, r19
     9fa:	7a f4       	brpl	.+30     	; 0xa1a <schedule+0x6c>
     9fc:	fc 01       	movw	r30, r24
     9fe:	20 81       	ld	r18, Z
     a00:	31 81       	ldd	r19, Z+1	; 0x01
     a02:	30 93 31 01 	sts	0x0131, r19	; 0x800131 <threadPool+0x1>
     a06:	20 93 30 01 	sts	0x0130, r18	; 0x800130 <threadPool>
     a0a:	d1 83       	std	Z+1, r29	; 0x01
     a0c:	c0 83       	st	Z, r28
     a0e:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <activeStack+0x1>
     a12:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <activeStack>
     a16:	0e 94 b7 04 	call	0x96e	; 0x96e <dispatch>
     a1a:	df 91       	pop	r29
     a1c:	cf 91       	pop	r28
     a1e:	1f 91       	pop	r17
     a20:	0f 91       	pop	r16
     a22:	08 95       	ret

00000a24 <__vector_1>:
     a24:	1f 92       	push	r1
     a26:	0f 92       	push	r0
     a28:	0f b6       	in	r0, 0x3f	; 63
     a2a:	0f 92       	push	r0
     a2c:	11 24       	eor	r1, r1
     a2e:	2f 93       	push	r18
     a30:	3f 93       	push	r19
     a32:	4f 93       	push	r20
     a34:	5f 93       	push	r21
     a36:	6f 93       	push	r22
     a38:	7f 93       	push	r23
     a3a:	8f 93       	push	r24
     a3c:	9f 93       	push	r25
     a3e:	af 93       	push	r26
     a40:	bf 93       	push	r27
     a42:	ef 93       	push	r30
     a44:	ff 93       	push	r31
     a46:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <overflows>
     a4a:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <overflows+0x1>
     a4e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     a52:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     a56:	c9 01       	movw	r24, r18
     a58:	03 2e       	mov	r0, r19
     a5a:	00 0c       	add	r0, r0
     a5c:	aa 0b       	sbc	r26, r26
     a5e:	bb 0b       	sbc	r27, r27
     a60:	dc 01       	movw	r26, r24
     a62:	99 27       	eor	r25, r25
     a64:	88 27       	eor	r24, r24
     a66:	60 e0       	ldi	r22, 0x00	; 0
     a68:	70 e0       	ldi	r23, 0x00	; 0
     a6a:	84 2b       	or	r24, r20
     a6c:	95 2b       	or	r25, r21
     a6e:	a6 2b       	or	r26, r22
     a70:	b7 2b       	or	r27, r23
     a72:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
     a76:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
     a7a:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
     a7e:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
     a82:	b0 9b       	sbis	0x16, 0	; 22
     a84:	1b c0       	rjmp	.+54     	; 0xabc <__vector_1+0x98>
     a86:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     a8a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     a8e:	c9 01       	movw	r24, r18
     a90:	01 96       	adiw	r24, 0x01	; 1
     a92:	09 2e       	mov	r0, r25
     a94:	00 0c       	add	r0, r0
     a96:	aa 0b       	sbc	r26, r26
     a98:	bb 0b       	sbc	r27, r27
     a9a:	dc 01       	movw	r26, r24
     a9c:	99 27       	eor	r25, r25
     a9e:	88 27       	eor	r24, r24
     aa0:	60 e0       	ldi	r22, 0x00	; 0
     aa2:	70 e0       	ldi	r23, 0x00	; 0
     aa4:	84 2b       	or	r24, r20
     aa6:	95 2b       	or	r25, r21
     aa8:	a6 2b       	or	r26, r22
     aaa:	b7 2b       	or	r27, r23
     aac:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
     ab0:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
     ab4:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
     ab8:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
     abc:	e0 91 da 01 	lds	r30, 0x01DA	; 0x8001da <mtable>
     ac0:	f0 91 db 01 	lds	r31, 0x01DB	; 0x8001db <mtable+0x1>
     ac4:	30 97       	sbiw	r30, 0x00	; 0
     ac6:	39 f0       	breq	.+14     	; 0xad6 <__vector_1+0xb2>
     ac8:	60 e0       	ldi	r22, 0x00	; 0
     aca:	70 e0       	ldi	r23, 0x00	; 0
     acc:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <otable>
     ad0:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <otable+0x1>
     ad4:	09 95       	icall
     ad6:	0e 94 d7 04 	call	0x9ae	; 0x9ae <schedule>
     ada:	ff 91       	pop	r31
     adc:	ef 91       	pop	r30
     ade:	bf 91       	pop	r27
     ae0:	af 91       	pop	r26
     ae2:	9f 91       	pop	r25
     ae4:	8f 91       	pop	r24
     ae6:	7f 91       	pop	r23
     ae8:	6f 91       	pop	r22
     aea:	5f 91       	pop	r21
     aec:	4f 91       	pop	r20
     aee:	3f 91       	pop	r19
     af0:	2f 91       	pop	r18
     af2:	0f 90       	pop	r0
     af4:	0f be       	out	0x3f, r0	; 63
     af6:	0f 90       	pop	r0
     af8:	1f 90       	pop	r1
     afa:	18 95       	reti

00000afc <__vector_2>:
     afc:	1f 92       	push	r1
     afe:	0f 92       	push	r0
     b00:	0f b6       	in	r0, 0x3f	; 63
     b02:	0f 92       	push	r0
     b04:	11 24       	eor	r1, r1
     b06:	2f 93       	push	r18
     b08:	3f 93       	push	r19
     b0a:	4f 93       	push	r20
     b0c:	5f 93       	push	r21
     b0e:	6f 93       	push	r22
     b10:	7f 93       	push	r23
     b12:	8f 93       	push	r24
     b14:	9f 93       	push	r25
     b16:	af 93       	push	r26
     b18:	bf 93       	push	r27
     b1a:	ef 93       	push	r30
     b1c:	ff 93       	push	r31
     b1e:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <overflows>
     b22:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <overflows+0x1>
     b26:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     b2a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     b2e:	c9 01       	movw	r24, r18
     b30:	03 2e       	mov	r0, r19
     b32:	00 0c       	add	r0, r0
     b34:	aa 0b       	sbc	r26, r26
     b36:	bb 0b       	sbc	r27, r27
     b38:	dc 01       	movw	r26, r24
     b3a:	99 27       	eor	r25, r25
     b3c:	88 27       	eor	r24, r24
     b3e:	60 e0       	ldi	r22, 0x00	; 0
     b40:	70 e0       	ldi	r23, 0x00	; 0
     b42:	84 2b       	or	r24, r20
     b44:	95 2b       	or	r25, r21
     b46:	a6 2b       	or	r26, r22
     b48:	b7 2b       	or	r27, r23
     b4a:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
     b4e:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
     b52:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
     b56:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
     b5a:	b0 9b       	sbis	0x16, 0	; 22
     b5c:	1b c0       	rjmp	.+54     	; 0xb94 <__vector_2+0x98>
     b5e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     b62:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     b66:	c9 01       	movw	r24, r18
     b68:	01 96       	adiw	r24, 0x01	; 1
     b6a:	09 2e       	mov	r0, r25
     b6c:	00 0c       	add	r0, r0
     b6e:	aa 0b       	sbc	r26, r26
     b70:	bb 0b       	sbc	r27, r27
     b72:	dc 01       	movw	r26, r24
     b74:	99 27       	eor	r25, r25
     b76:	88 27       	eor	r24, r24
     b78:	60 e0       	ldi	r22, 0x00	; 0
     b7a:	70 e0       	ldi	r23, 0x00	; 0
     b7c:	84 2b       	or	r24, r20
     b7e:	95 2b       	or	r25, r21
     b80:	a6 2b       	or	r26, r22
     b82:	b7 2b       	or	r27, r23
     b84:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
     b88:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
     b8c:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
     b90:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
     b94:	e0 91 dc 01 	lds	r30, 0x01DC	; 0x8001dc <mtable+0x2>
     b98:	f0 91 dd 01 	lds	r31, 0x01DD	; 0x8001dd <mtable+0x3>
     b9c:	30 97       	sbiw	r30, 0x00	; 0
     b9e:	39 f0       	breq	.+14     	; 0xbae <__vector_2+0xb2>
     ba0:	61 e0       	ldi	r22, 0x01	; 1
     ba2:	70 e0       	ldi	r23, 0x00	; 0
     ba4:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <otable+0x2>
     ba8:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <otable+0x3>
     bac:	09 95       	icall
     bae:	0e 94 d7 04 	call	0x9ae	; 0x9ae <schedule>
     bb2:	ff 91       	pop	r31
     bb4:	ef 91       	pop	r30
     bb6:	bf 91       	pop	r27
     bb8:	af 91       	pop	r26
     bba:	9f 91       	pop	r25
     bbc:	8f 91       	pop	r24
     bbe:	7f 91       	pop	r23
     bc0:	6f 91       	pop	r22
     bc2:	5f 91       	pop	r21
     bc4:	4f 91       	pop	r20
     bc6:	3f 91       	pop	r19
     bc8:	2f 91       	pop	r18
     bca:	0f 90       	pop	r0
     bcc:	0f be       	out	0x3f, r0	; 63
     bce:	0f 90       	pop	r0
     bd0:	1f 90       	pop	r1
     bd2:	18 95       	reti

00000bd4 <__vector_3>:
     bd4:	1f 92       	push	r1
     bd6:	0f 92       	push	r0
     bd8:	0f b6       	in	r0, 0x3f	; 63
     bda:	0f 92       	push	r0
     bdc:	11 24       	eor	r1, r1
     bde:	2f 93       	push	r18
     be0:	3f 93       	push	r19
     be2:	4f 93       	push	r20
     be4:	5f 93       	push	r21
     be6:	6f 93       	push	r22
     be8:	7f 93       	push	r23
     bea:	8f 93       	push	r24
     bec:	9f 93       	push	r25
     bee:	af 93       	push	r26
     bf0:	bf 93       	push	r27
     bf2:	ef 93       	push	r30
     bf4:	ff 93       	push	r31
     bf6:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <overflows>
     bfa:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <overflows+0x1>
     bfe:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     c02:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     c06:	c9 01       	movw	r24, r18
     c08:	03 2e       	mov	r0, r19
     c0a:	00 0c       	add	r0, r0
     c0c:	aa 0b       	sbc	r26, r26
     c0e:	bb 0b       	sbc	r27, r27
     c10:	dc 01       	movw	r26, r24
     c12:	99 27       	eor	r25, r25
     c14:	88 27       	eor	r24, r24
     c16:	60 e0       	ldi	r22, 0x00	; 0
     c18:	70 e0       	ldi	r23, 0x00	; 0
     c1a:	84 2b       	or	r24, r20
     c1c:	95 2b       	or	r25, r21
     c1e:	a6 2b       	or	r26, r22
     c20:	b7 2b       	or	r27, r23
     c22:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
     c26:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
     c2a:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
     c2e:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
     c32:	b0 9b       	sbis	0x16, 0	; 22
     c34:	1b c0       	rjmp	.+54     	; 0xc6c <__vector_3+0x98>
     c36:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     c3a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     c3e:	c9 01       	movw	r24, r18
     c40:	01 96       	adiw	r24, 0x01	; 1
     c42:	09 2e       	mov	r0, r25
     c44:	00 0c       	add	r0, r0
     c46:	aa 0b       	sbc	r26, r26
     c48:	bb 0b       	sbc	r27, r27
     c4a:	dc 01       	movw	r26, r24
     c4c:	99 27       	eor	r25, r25
     c4e:	88 27       	eor	r24, r24
     c50:	60 e0       	ldi	r22, 0x00	; 0
     c52:	70 e0       	ldi	r23, 0x00	; 0
     c54:	84 2b       	or	r24, r20
     c56:	95 2b       	or	r25, r21
     c58:	a6 2b       	or	r26, r22
     c5a:	b7 2b       	or	r27, r23
     c5c:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
     c60:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
     c64:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
     c68:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
     c6c:	e0 91 de 01 	lds	r30, 0x01DE	; 0x8001de <mtable+0x4>
     c70:	f0 91 df 01 	lds	r31, 0x01DF	; 0x8001df <mtable+0x5>
     c74:	30 97       	sbiw	r30, 0x00	; 0
     c76:	39 f0       	breq	.+14     	; 0xc86 <__vector_3+0xb2>
     c78:	62 e0       	ldi	r22, 0x02	; 2
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <otable+0x4>
     c80:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <otable+0x5>
     c84:	09 95       	icall
     c86:	0e 94 d7 04 	call	0x9ae	; 0x9ae <schedule>
     c8a:	ff 91       	pop	r31
     c8c:	ef 91       	pop	r30
     c8e:	bf 91       	pop	r27
     c90:	af 91       	pop	r26
     c92:	9f 91       	pop	r25
     c94:	8f 91       	pop	r24
     c96:	7f 91       	pop	r23
     c98:	6f 91       	pop	r22
     c9a:	5f 91       	pop	r21
     c9c:	4f 91       	pop	r20
     c9e:	3f 91       	pop	r19
     ca0:	2f 91       	pop	r18
     ca2:	0f 90       	pop	r0
     ca4:	0f be       	out	0x3f, r0	; 63
     ca6:	0f 90       	pop	r0
     ca8:	1f 90       	pop	r1
     caa:	18 95       	reti

00000cac <__vector_4>:
     cac:	1f 92       	push	r1
     cae:	0f 92       	push	r0
     cb0:	0f b6       	in	r0, 0x3f	; 63
     cb2:	0f 92       	push	r0
     cb4:	11 24       	eor	r1, r1
     cb6:	2f 93       	push	r18
     cb8:	3f 93       	push	r19
     cba:	4f 93       	push	r20
     cbc:	5f 93       	push	r21
     cbe:	6f 93       	push	r22
     cc0:	7f 93       	push	r23
     cc2:	8f 93       	push	r24
     cc4:	9f 93       	push	r25
     cc6:	af 93       	push	r26
     cc8:	bf 93       	push	r27
     cca:	ef 93       	push	r30
     ccc:	ff 93       	push	r31
     cce:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <overflows>
     cd2:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <overflows+0x1>
     cd6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     cda:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     cde:	c9 01       	movw	r24, r18
     ce0:	03 2e       	mov	r0, r19
     ce2:	00 0c       	add	r0, r0
     ce4:	aa 0b       	sbc	r26, r26
     ce6:	bb 0b       	sbc	r27, r27
     ce8:	dc 01       	movw	r26, r24
     cea:	99 27       	eor	r25, r25
     cec:	88 27       	eor	r24, r24
     cee:	60 e0       	ldi	r22, 0x00	; 0
     cf0:	70 e0       	ldi	r23, 0x00	; 0
     cf2:	84 2b       	or	r24, r20
     cf4:	95 2b       	or	r25, r21
     cf6:	a6 2b       	or	r26, r22
     cf8:	b7 2b       	or	r27, r23
     cfa:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
     cfe:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
     d02:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
     d06:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
     d0a:	b0 9b       	sbis	0x16, 0	; 22
     d0c:	1b c0       	rjmp	.+54     	; 0xd44 <__vector_4+0x98>
     d0e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     d12:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     d16:	c9 01       	movw	r24, r18
     d18:	01 96       	adiw	r24, 0x01	; 1
     d1a:	09 2e       	mov	r0, r25
     d1c:	00 0c       	add	r0, r0
     d1e:	aa 0b       	sbc	r26, r26
     d20:	bb 0b       	sbc	r27, r27
     d22:	dc 01       	movw	r26, r24
     d24:	99 27       	eor	r25, r25
     d26:	88 27       	eor	r24, r24
     d28:	60 e0       	ldi	r22, 0x00	; 0
     d2a:	70 e0       	ldi	r23, 0x00	; 0
     d2c:	84 2b       	or	r24, r20
     d2e:	95 2b       	or	r25, r21
     d30:	a6 2b       	or	r26, r22
     d32:	b7 2b       	or	r27, r23
     d34:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
     d38:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
     d3c:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
     d40:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
     d44:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <mtable+0x6>
     d48:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <mtable+0x7>
     d4c:	30 97       	sbiw	r30, 0x00	; 0
     d4e:	39 f0       	breq	.+14     	; 0xd5e <__vector_4+0xb2>
     d50:	63 e0       	ldi	r22, 0x03	; 3
     d52:	70 e0       	ldi	r23, 0x00	; 0
     d54:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <otable+0x6>
     d58:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <otable+0x7>
     d5c:	09 95       	icall
     d5e:	0e 94 d7 04 	call	0x9ae	; 0x9ae <schedule>
     d62:	ff 91       	pop	r31
     d64:	ef 91       	pop	r30
     d66:	bf 91       	pop	r27
     d68:	af 91       	pop	r26
     d6a:	9f 91       	pop	r25
     d6c:	8f 91       	pop	r24
     d6e:	7f 91       	pop	r23
     d70:	6f 91       	pop	r22
     d72:	5f 91       	pop	r21
     d74:	4f 91       	pop	r20
     d76:	3f 91       	pop	r19
     d78:	2f 91       	pop	r18
     d7a:	0f 90       	pop	r0
     d7c:	0f be       	out	0x3f, r0	; 63
     d7e:	0f 90       	pop	r0
     d80:	1f 90       	pop	r1
     d82:	18 95       	reti

00000d84 <__vector_5>:
     d84:	1f 92       	push	r1
     d86:	0f 92       	push	r0
     d88:	0f b6       	in	r0, 0x3f	; 63
     d8a:	0f 92       	push	r0
     d8c:	11 24       	eor	r1, r1
     d8e:	2f 93       	push	r18
     d90:	3f 93       	push	r19
     d92:	4f 93       	push	r20
     d94:	5f 93       	push	r21
     d96:	6f 93       	push	r22
     d98:	7f 93       	push	r23
     d9a:	8f 93       	push	r24
     d9c:	9f 93       	push	r25
     d9e:	af 93       	push	r26
     da0:	bf 93       	push	r27
     da2:	ef 93       	push	r30
     da4:	ff 93       	push	r31
     da6:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <overflows>
     daa:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <overflows+0x1>
     dae:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     db2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     db6:	c9 01       	movw	r24, r18
     db8:	03 2e       	mov	r0, r19
     dba:	00 0c       	add	r0, r0
     dbc:	aa 0b       	sbc	r26, r26
     dbe:	bb 0b       	sbc	r27, r27
     dc0:	dc 01       	movw	r26, r24
     dc2:	99 27       	eor	r25, r25
     dc4:	88 27       	eor	r24, r24
     dc6:	60 e0       	ldi	r22, 0x00	; 0
     dc8:	70 e0       	ldi	r23, 0x00	; 0
     dca:	84 2b       	or	r24, r20
     dcc:	95 2b       	or	r25, r21
     dce:	a6 2b       	or	r26, r22
     dd0:	b7 2b       	or	r27, r23
     dd2:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
     dd6:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
     dda:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
     dde:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
     de2:	b0 9b       	sbis	0x16, 0	; 22
     de4:	1b c0       	rjmp	.+54     	; 0xe1c <__vector_5+0x98>
     de6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     dea:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     dee:	c9 01       	movw	r24, r18
     df0:	01 96       	adiw	r24, 0x01	; 1
     df2:	09 2e       	mov	r0, r25
     df4:	00 0c       	add	r0, r0
     df6:	aa 0b       	sbc	r26, r26
     df8:	bb 0b       	sbc	r27, r27
     dfa:	dc 01       	movw	r26, r24
     dfc:	99 27       	eor	r25, r25
     dfe:	88 27       	eor	r24, r24
     e00:	60 e0       	ldi	r22, 0x00	; 0
     e02:	70 e0       	ldi	r23, 0x00	; 0
     e04:	84 2b       	or	r24, r20
     e06:	95 2b       	or	r25, r21
     e08:	a6 2b       	or	r26, r22
     e0a:	b7 2b       	or	r27, r23
     e0c:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
     e10:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
     e14:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
     e18:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
     e1c:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <mtable+0x8>
     e20:	f0 91 e3 01 	lds	r31, 0x01E3	; 0x8001e3 <mtable+0x9>
     e24:	30 97       	sbiw	r30, 0x00	; 0
     e26:	39 f0       	breq	.+14     	; 0xe36 <__vector_5+0xb2>
     e28:	64 e0       	ldi	r22, 0x04	; 4
     e2a:	70 e0       	ldi	r23, 0x00	; 0
     e2c:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <otable+0x8>
     e30:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <otable+0x9>
     e34:	09 95       	icall
     e36:	0e 94 d7 04 	call	0x9ae	; 0x9ae <schedule>
     e3a:	ff 91       	pop	r31
     e3c:	ef 91       	pop	r30
     e3e:	bf 91       	pop	r27
     e40:	af 91       	pop	r26
     e42:	9f 91       	pop	r25
     e44:	8f 91       	pop	r24
     e46:	7f 91       	pop	r23
     e48:	6f 91       	pop	r22
     e4a:	5f 91       	pop	r21
     e4c:	4f 91       	pop	r20
     e4e:	3f 91       	pop	r19
     e50:	2f 91       	pop	r18
     e52:	0f 90       	pop	r0
     e54:	0f be       	out	0x3f, r0	; 63
     e56:	0f 90       	pop	r0
     e58:	1f 90       	pop	r1
     e5a:	18 95       	reti

00000e5c <__vector_10>:
     e5c:	1f 92       	push	r1
     e5e:	0f 92       	push	r0
     e60:	0f b6       	in	r0, 0x3f	; 63
     e62:	0f 92       	push	r0
     e64:	11 24       	eor	r1, r1
     e66:	2f 93       	push	r18
     e68:	3f 93       	push	r19
     e6a:	4f 93       	push	r20
     e6c:	5f 93       	push	r21
     e6e:	6f 93       	push	r22
     e70:	7f 93       	push	r23
     e72:	8f 93       	push	r24
     e74:	9f 93       	push	r25
     e76:	af 93       	push	r26
     e78:	bf 93       	push	r27
     e7a:	ef 93       	push	r30
     e7c:	ff 93       	push	r31
     e7e:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <overflows>
     e82:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <overflows+0x1>
     e86:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     e8a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     e8e:	c9 01       	movw	r24, r18
     e90:	03 2e       	mov	r0, r19
     e92:	00 0c       	add	r0, r0
     e94:	aa 0b       	sbc	r26, r26
     e96:	bb 0b       	sbc	r27, r27
     e98:	dc 01       	movw	r26, r24
     e9a:	99 27       	eor	r25, r25
     e9c:	88 27       	eor	r24, r24
     e9e:	60 e0       	ldi	r22, 0x00	; 0
     ea0:	70 e0       	ldi	r23, 0x00	; 0
     ea2:	84 2b       	or	r24, r20
     ea4:	95 2b       	or	r25, r21
     ea6:	a6 2b       	or	r26, r22
     ea8:	b7 2b       	or	r27, r23
     eaa:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
     eae:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
     eb2:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
     eb6:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
     eba:	b0 9b       	sbis	0x16, 0	; 22
     ebc:	1b c0       	rjmp	.+54     	; 0xef4 <__vector_10+0x98>
     ebe:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     ec2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     ec6:	c9 01       	movw	r24, r18
     ec8:	01 96       	adiw	r24, 0x01	; 1
     eca:	09 2e       	mov	r0, r25
     ecc:	00 0c       	add	r0, r0
     ece:	aa 0b       	sbc	r26, r26
     ed0:	bb 0b       	sbc	r27, r27
     ed2:	dc 01       	movw	r26, r24
     ed4:	99 27       	eor	r25, r25
     ed6:	88 27       	eor	r24, r24
     ed8:	60 e0       	ldi	r22, 0x00	; 0
     eda:	70 e0       	ldi	r23, 0x00	; 0
     edc:	84 2b       	or	r24, r20
     ede:	95 2b       	or	r25, r21
     ee0:	a6 2b       	or	r26, r22
     ee2:	b7 2b       	or	r27, r23
     ee4:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
     ee8:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
     eec:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
     ef0:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
     ef4:	e0 91 e4 01 	lds	r30, 0x01E4	; 0x8001e4 <mtable+0xa>
     ef8:	f0 91 e5 01 	lds	r31, 0x01E5	; 0x8001e5 <mtable+0xb>
     efc:	30 97       	sbiw	r30, 0x00	; 0
     efe:	39 f0       	breq	.+14     	; 0xf0e <__vector_10+0xb2>
     f00:	65 e0       	ldi	r22, 0x05	; 5
     f02:	70 e0       	ldi	r23, 0x00	; 0
     f04:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <otable+0xa>
     f08:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <otable+0xb>
     f0c:	09 95       	icall
     f0e:	0e 94 d7 04 	call	0x9ae	; 0x9ae <schedule>
     f12:	ff 91       	pop	r31
     f14:	ef 91       	pop	r30
     f16:	bf 91       	pop	r27
     f18:	af 91       	pop	r26
     f1a:	9f 91       	pop	r25
     f1c:	8f 91       	pop	r24
     f1e:	7f 91       	pop	r23
     f20:	6f 91       	pop	r22
     f22:	5f 91       	pop	r21
     f24:	4f 91       	pop	r20
     f26:	3f 91       	pop	r19
     f28:	2f 91       	pop	r18
     f2a:	0f 90       	pop	r0
     f2c:	0f be       	out	0x3f, r0	; 63
     f2e:	0f 90       	pop	r0
     f30:	1f 90       	pop	r1
     f32:	18 95       	reti

00000f34 <__vector_11>:
     f34:	1f 92       	push	r1
     f36:	0f 92       	push	r0
     f38:	0f b6       	in	r0, 0x3f	; 63
     f3a:	0f 92       	push	r0
     f3c:	11 24       	eor	r1, r1
     f3e:	2f 93       	push	r18
     f40:	3f 93       	push	r19
     f42:	4f 93       	push	r20
     f44:	5f 93       	push	r21
     f46:	6f 93       	push	r22
     f48:	7f 93       	push	r23
     f4a:	8f 93       	push	r24
     f4c:	9f 93       	push	r25
     f4e:	af 93       	push	r26
     f50:	bf 93       	push	r27
     f52:	ef 93       	push	r30
     f54:	ff 93       	push	r31
     f56:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <overflows>
     f5a:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <overflows+0x1>
     f5e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     f62:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     f66:	c9 01       	movw	r24, r18
     f68:	03 2e       	mov	r0, r19
     f6a:	00 0c       	add	r0, r0
     f6c:	aa 0b       	sbc	r26, r26
     f6e:	bb 0b       	sbc	r27, r27
     f70:	dc 01       	movw	r26, r24
     f72:	99 27       	eor	r25, r25
     f74:	88 27       	eor	r24, r24
     f76:	60 e0       	ldi	r22, 0x00	; 0
     f78:	70 e0       	ldi	r23, 0x00	; 0
     f7a:	84 2b       	or	r24, r20
     f7c:	95 2b       	or	r25, r21
     f7e:	a6 2b       	or	r26, r22
     f80:	b7 2b       	or	r27, r23
     f82:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
     f86:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
     f8a:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
     f8e:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
     f92:	b0 9b       	sbis	0x16, 0	; 22
     f94:	1b c0       	rjmp	.+54     	; 0xfcc <__vector_11+0x98>
     f96:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     f9a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     f9e:	c9 01       	movw	r24, r18
     fa0:	01 96       	adiw	r24, 0x01	; 1
     fa2:	09 2e       	mov	r0, r25
     fa4:	00 0c       	add	r0, r0
     fa6:	aa 0b       	sbc	r26, r26
     fa8:	bb 0b       	sbc	r27, r27
     faa:	dc 01       	movw	r26, r24
     fac:	99 27       	eor	r25, r25
     fae:	88 27       	eor	r24, r24
     fb0:	60 e0       	ldi	r22, 0x00	; 0
     fb2:	70 e0       	ldi	r23, 0x00	; 0
     fb4:	84 2b       	or	r24, r20
     fb6:	95 2b       	or	r25, r21
     fb8:	a6 2b       	or	r26, r22
     fba:	b7 2b       	or	r27, r23
     fbc:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
     fc0:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
     fc4:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
     fc8:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
     fcc:	e0 91 e6 01 	lds	r30, 0x01E6	; 0x8001e6 <mtable+0xc>
     fd0:	f0 91 e7 01 	lds	r31, 0x01E7	; 0x8001e7 <mtable+0xd>
     fd4:	30 97       	sbiw	r30, 0x00	; 0
     fd6:	39 f0       	breq	.+14     	; 0xfe6 <__vector_11+0xb2>
     fd8:	66 e0       	ldi	r22, 0x06	; 6
     fda:	70 e0       	ldi	r23, 0x00	; 0
     fdc:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <otable+0xc>
     fe0:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <otable+0xd>
     fe4:	09 95       	icall
     fe6:	0e 94 d7 04 	call	0x9ae	; 0x9ae <schedule>
     fea:	ff 91       	pop	r31
     fec:	ef 91       	pop	r30
     fee:	bf 91       	pop	r27
     ff0:	af 91       	pop	r26
     ff2:	9f 91       	pop	r25
     ff4:	8f 91       	pop	r24
     ff6:	7f 91       	pop	r23
     ff8:	6f 91       	pop	r22
     ffa:	5f 91       	pop	r21
     ffc:	4f 91       	pop	r20
     ffe:	3f 91       	pop	r19
    1000:	2f 91       	pop	r18
    1002:	0f 90       	pop	r0
    1004:	0f be       	out	0x3f, r0	; 63
    1006:	0f 90       	pop	r0
    1008:	1f 90       	pop	r1
    100a:	18 95       	reti

0000100c <__vector_12>:
    100c:	1f 92       	push	r1
    100e:	0f 92       	push	r0
    1010:	0f b6       	in	r0, 0x3f	; 63
    1012:	0f 92       	push	r0
    1014:	11 24       	eor	r1, r1
    1016:	2f 93       	push	r18
    1018:	3f 93       	push	r19
    101a:	4f 93       	push	r20
    101c:	5f 93       	push	r21
    101e:	6f 93       	push	r22
    1020:	7f 93       	push	r23
    1022:	8f 93       	push	r24
    1024:	9f 93       	push	r25
    1026:	af 93       	push	r26
    1028:	bf 93       	push	r27
    102a:	ef 93       	push	r30
    102c:	ff 93       	push	r31
    102e:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <overflows>
    1032:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <overflows+0x1>
    1036:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    103a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    103e:	c9 01       	movw	r24, r18
    1040:	03 2e       	mov	r0, r19
    1042:	00 0c       	add	r0, r0
    1044:	aa 0b       	sbc	r26, r26
    1046:	bb 0b       	sbc	r27, r27
    1048:	dc 01       	movw	r26, r24
    104a:	99 27       	eor	r25, r25
    104c:	88 27       	eor	r24, r24
    104e:	60 e0       	ldi	r22, 0x00	; 0
    1050:	70 e0       	ldi	r23, 0x00	; 0
    1052:	84 2b       	or	r24, r20
    1054:	95 2b       	or	r25, r21
    1056:	a6 2b       	or	r26, r22
    1058:	b7 2b       	or	r27, r23
    105a:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    105e:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    1062:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    1066:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    106a:	b0 9b       	sbis	0x16, 0	; 22
    106c:	1b c0       	rjmp	.+54     	; 0x10a4 <__vector_12+0x98>
    106e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1072:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1076:	c9 01       	movw	r24, r18
    1078:	01 96       	adiw	r24, 0x01	; 1
    107a:	09 2e       	mov	r0, r25
    107c:	00 0c       	add	r0, r0
    107e:	aa 0b       	sbc	r26, r26
    1080:	bb 0b       	sbc	r27, r27
    1082:	dc 01       	movw	r26, r24
    1084:	99 27       	eor	r25, r25
    1086:	88 27       	eor	r24, r24
    1088:	60 e0       	ldi	r22, 0x00	; 0
    108a:	70 e0       	ldi	r23, 0x00	; 0
    108c:	84 2b       	or	r24, r20
    108e:	95 2b       	or	r25, r21
    1090:	a6 2b       	or	r26, r22
    1092:	b7 2b       	or	r27, r23
    1094:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    1098:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    109c:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    10a0:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    10a4:	e0 91 e8 01 	lds	r30, 0x01E8	; 0x8001e8 <mtable+0xe>
    10a8:	f0 91 e9 01 	lds	r31, 0x01E9	; 0x8001e9 <mtable+0xf>
    10ac:	30 97       	sbiw	r30, 0x00	; 0
    10ae:	39 f0       	breq	.+14     	; 0x10be <__vector_12+0xb2>
    10b0:	67 e0       	ldi	r22, 0x07	; 7
    10b2:	70 e0       	ldi	r23, 0x00	; 0
    10b4:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <otable+0xe>
    10b8:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <otable+0xf>
    10bc:	09 95       	icall
    10be:	0e 94 d7 04 	call	0x9ae	; 0x9ae <schedule>
    10c2:	ff 91       	pop	r31
    10c4:	ef 91       	pop	r30
    10c6:	bf 91       	pop	r27
    10c8:	af 91       	pop	r26
    10ca:	9f 91       	pop	r25
    10cc:	8f 91       	pop	r24
    10ce:	7f 91       	pop	r23
    10d0:	6f 91       	pop	r22
    10d2:	5f 91       	pop	r21
    10d4:	4f 91       	pop	r20
    10d6:	3f 91       	pop	r19
    10d8:	2f 91       	pop	r18
    10da:	0f 90       	pop	r0
    10dc:	0f be       	out	0x3f, r0	; 63
    10de:	0f 90       	pop	r0
    10e0:	1f 90       	pop	r1
    10e2:	18 95       	reti

000010e4 <__vector_13>:
    10e4:	1f 92       	push	r1
    10e6:	0f 92       	push	r0
    10e8:	0f b6       	in	r0, 0x3f	; 63
    10ea:	0f 92       	push	r0
    10ec:	11 24       	eor	r1, r1
    10ee:	2f 93       	push	r18
    10f0:	3f 93       	push	r19
    10f2:	4f 93       	push	r20
    10f4:	5f 93       	push	r21
    10f6:	6f 93       	push	r22
    10f8:	7f 93       	push	r23
    10fa:	8f 93       	push	r24
    10fc:	9f 93       	push	r25
    10fe:	af 93       	push	r26
    1100:	bf 93       	push	r27
    1102:	ef 93       	push	r30
    1104:	ff 93       	push	r31
    1106:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <overflows>
    110a:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <overflows+0x1>
    110e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1112:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1116:	c9 01       	movw	r24, r18
    1118:	03 2e       	mov	r0, r19
    111a:	00 0c       	add	r0, r0
    111c:	aa 0b       	sbc	r26, r26
    111e:	bb 0b       	sbc	r27, r27
    1120:	dc 01       	movw	r26, r24
    1122:	99 27       	eor	r25, r25
    1124:	88 27       	eor	r24, r24
    1126:	60 e0       	ldi	r22, 0x00	; 0
    1128:	70 e0       	ldi	r23, 0x00	; 0
    112a:	84 2b       	or	r24, r20
    112c:	95 2b       	or	r25, r21
    112e:	a6 2b       	or	r26, r22
    1130:	b7 2b       	or	r27, r23
    1132:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    1136:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    113a:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    113e:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    1142:	b0 9b       	sbis	0x16, 0	; 22
    1144:	1b c0       	rjmp	.+54     	; 0x117c <__vector_13+0x98>
    1146:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    114a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    114e:	c9 01       	movw	r24, r18
    1150:	01 96       	adiw	r24, 0x01	; 1
    1152:	09 2e       	mov	r0, r25
    1154:	00 0c       	add	r0, r0
    1156:	aa 0b       	sbc	r26, r26
    1158:	bb 0b       	sbc	r27, r27
    115a:	dc 01       	movw	r26, r24
    115c:	99 27       	eor	r25, r25
    115e:	88 27       	eor	r24, r24
    1160:	60 e0       	ldi	r22, 0x00	; 0
    1162:	70 e0       	ldi	r23, 0x00	; 0
    1164:	84 2b       	or	r24, r20
    1166:	95 2b       	or	r25, r21
    1168:	a6 2b       	or	r26, r22
    116a:	b7 2b       	or	r27, r23
    116c:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    1170:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    1174:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    1178:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    117c:	e0 91 ea 01 	lds	r30, 0x01EA	; 0x8001ea <mtable+0x10>
    1180:	f0 91 eb 01 	lds	r31, 0x01EB	; 0x8001eb <mtable+0x11>
    1184:	30 97       	sbiw	r30, 0x00	; 0
    1186:	39 f0       	breq	.+14     	; 0x1196 <__vector_13+0xb2>
    1188:	68 e0       	ldi	r22, 0x08	; 8
    118a:	70 e0       	ldi	r23, 0x00	; 0
    118c:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <otable+0x10>
    1190:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <otable+0x11>
    1194:	09 95       	icall
    1196:	0e 94 d7 04 	call	0x9ae	; 0x9ae <schedule>
    119a:	ff 91       	pop	r31
    119c:	ef 91       	pop	r30
    119e:	bf 91       	pop	r27
    11a0:	af 91       	pop	r26
    11a2:	9f 91       	pop	r25
    11a4:	8f 91       	pop	r24
    11a6:	7f 91       	pop	r23
    11a8:	6f 91       	pop	r22
    11aa:	5f 91       	pop	r21
    11ac:	4f 91       	pop	r20
    11ae:	3f 91       	pop	r19
    11b0:	2f 91       	pop	r18
    11b2:	0f 90       	pop	r0
    11b4:	0f be       	out	0x3f, r0	; 63
    11b6:	0f 90       	pop	r0
    11b8:	1f 90       	pop	r1
    11ba:	18 95       	reti

000011bc <__vector_14>:
    11bc:	1f 92       	push	r1
    11be:	0f 92       	push	r0
    11c0:	0f b6       	in	r0, 0x3f	; 63
    11c2:	0f 92       	push	r0
    11c4:	11 24       	eor	r1, r1
    11c6:	2f 93       	push	r18
    11c8:	3f 93       	push	r19
    11ca:	4f 93       	push	r20
    11cc:	5f 93       	push	r21
    11ce:	6f 93       	push	r22
    11d0:	7f 93       	push	r23
    11d2:	8f 93       	push	r24
    11d4:	9f 93       	push	r25
    11d6:	af 93       	push	r26
    11d8:	bf 93       	push	r27
    11da:	ef 93       	push	r30
    11dc:	ff 93       	push	r31
    11de:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <overflows>
    11e2:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <overflows+0x1>
    11e6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    11ea:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    11ee:	c9 01       	movw	r24, r18
    11f0:	03 2e       	mov	r0, r19
    11f2:	00 0c       	add	r0, r0
    11f4:	aa 0b       	sbc	r26, r26
    11f6:	bb 0b       	sbc	r27, r27
    11f8:	dc 01       	movw	r26, r24
    11fa:	99 27       	eor	r25, r25
    11fc:	88 27       	eor	r24, r24
    11fe:	60 e0       	ldi	r22, 0x00	; 0
    1200:	70 e0       	ldi	r23, 0x00	; 0
    1202:	84 2b       	or	r24, r20
    1204:	95 2b       	or	r25, r21
    1206:	a6 2b       	or	r26, r22
    1208:	b7 2b       	or	r27, r23
    120a:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    120e:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    1212:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    1216:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    121a:	b0 9b       	sbis	0x16, 0	; 22
    121c:	1b c0       	rjmp	.+54     	; 0x1254 <__vector_14+0x98>
    121e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1222:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1226:	c9 01       	movw	r24, r18
    1228:	01 96       	adiw	r24, 0x01	; 1
    122a:	09 2e       	mov	r0, r25
    122c:	00 0c       	add	r0, r0
    122e:	aa 0b       	sbc	r26, r26
    1230:	bb 0b       	sbc	r27, r27
    1232:	dc 01       	movw	r26, r24
    1234:	99 27       	eor	r25, r25
    1236:	88 27       	eor	r24, r24
    1238:	60 e0       	ldi	r22, 0x00	; 0
    123a:	70 e0       	ldi	r23, 0x00	; 0
    123c:	84 2b       	or	r24, r20
    123e:	95 2b       	or	r25, r21
    1240:	a6 2b       	or	r26, r22
    1242:	b7 2b       	or	r27, r23
    1244:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    1248:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    124c:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    1250:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    1254:	e0 91 ec 01 	lds	r30, 0x01EC	; 0x8001ec <mtable+0x12>
    1258:	f0 91 ed 01 	lds	r31, 0x01ED	; 0x8001ed <mtable+0x13>
    125c:	30 97       	sbiw	r30, 0x00	; 0
    125e:	39 f0       	breq	.+14     	; 0x126e <__vector_14+0xb2>
    1260:	69 e0       	ldi	r22, 0x09	; 9
    1262:	70 e0       	ldi	r23, 0x00	; 0
    1264:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <otable+0x12>
    1268:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <otable+0x13>
    126c:	09 95       	icall
    126e:	0e 94 d7 04 	call	0x9ae	; 0x9ae <schedule>
    1272:	ff 91       	pop	r31
    1274:	ef 91       	pop	r30
    1276:	bf 91       	pop	r27
    1278:	af 91       	pop	r26
    127a:	9f 91       	pop	r25
    127c:	8f 91       	pop	r24
    127e:	7f 91       	pop	r23
    1280:	6f 91       	pop	r22
    1282:	5f 91       	pop	r21
    1284:	4f 91       	pop	r20
    1286:	3f 91       	pop	r19
    1288:	2f 91       	pop	r18
    128a:	0f 90       	pop	r0
    128c:	0f be       	out	0x3f, r0	; 63
    128e:	0f 90       	pop	r0
    1290:	1f 90       	pop	r1
    1292:	18 95       	reti

00001294 <__vector_15>:
    1294:	1f 92       	push	r1
    1296:	0f 92       	push	r0
    1298:	0f b6       	in	r0, 0x3f	; 63
    129a:	0f 92       	push	r0
    129c:	11 24       	eor	r1, r1
    129e:	2f 93       	push	r18
    12a0:	3f 93       	push	r19
    12a2:	4f 93       	push	r20
    12a4:	5f 93       	push	r21
    12a6:	6f 93       	push	r22
    12a8:	7f 93       	push	r23
    12aa:	8f 93       	push	r24
    12ac:	9f 93       	push	r25
    12ae:	af 93       	push	r26
    12b0:	bf 93       	push	r27
    12b2:	ef 93       	push	r30
    12b4:	ff 93       	push	r31
    12b6:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <overflows>
    12ba:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <overflows+0x1>
    12be:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    12c2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    12c6:	c9 01       	movw	r24, r18
    12c8:	03 2e       	mov	r0, r19
    12ca:	00 0c       	add	r0, r0
    12cc:	aa 0b       	sbc	r26, r26
    12ce:	bb 0b       	sbc	r27, r27
    12d0:	dc 01       	movw	r26, r24
    12d2:	99 27       	eor	r25, r25
    12d4:	88 27       	eor	r24, r24
    12d6:	60 e0       	ldi	r22, 0x00	; 0
    12d8:	70 e0       	ldi	r23, 0x00	; 0
    12da:	84 2b       	or	r24, r20
    12dc:	95 2b       	or	r25, r21
    12de:	a6 2b       	or	r26, r22
    12e0:	b7 2b       	or	r27, r23
    12e2:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    12e6:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    12ea:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    12ee:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    12f2:	b0 9b       	sbis	0x16, 0	; 22
    12f4:	1b c0       	rjmp	.+54     	; 0x132c <__vector_15+0x98>
    12f6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    12fa:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    12fe:	c9 01       	movw	r24, r18
    1300:	01 96       	adiw	r24, 0x01	; 1
    1302:	09 2e       	mov	r0, r25
    1304:	00 0c       	add	r0, r0
    1306:	aa 0b       	sbc	r26, r26
    1308:	bb 0b       	sbc	r27, r27
    130a:	dc 01       	movw	r26, r24
    130c:	99 27       	eor	r25, r25
    130e:	88 27       	eor	r24, r24
    1310:	60 e0       	ldi	r22, 0x00	; 0
    1312:	70 e0       	ldi	r23, 0x00	; 0
    1314:	84 2b       	or	r24, r20
    1316:	95 2b       	or	r25, r21
    1318:	a6 2b       	or	r26, r22
    131a:	b7 2b       	or	r27, r23
    131c:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    1320:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    1324:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    1328:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    132c:	e0 91 ee 01 	lds	r30, 0x01EE	; 0x8001ee <mtable+0x14>
    1330:	f0 91 ef 01 	lds	r31, 0x01EF	; 0x8001ef <mtable+0x15>
    1334:	30 97       	sbiw	r30, 0x00	; 0
    1336:	39 f0       	breq	.+14     	; 0x1346 <__vector_15+0xb2>
    1338:	6a e0       	ldi	r22, 0x0A	; 10
    133a:	70 e0       	ldi	r23, 0x00	; 0
    133c:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <otable+0x14>
    1340:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <otable+0x15>
    1344:	09 95       	icall
    1346:	0e 94 d7 04 	call	0x9ae	; 0x9ae <schedule>
    134a:	ff 91       	pop	r31
    134c:	ef 91       	pop	r30
    134e:	bf 91       	pop	r27
    1350:	af 91       	pop	r26
    1352:	9f 91       	pop	r25
    1354:	8f 91       	pop	r24
    1356:	7f 91       	pop	r23
    1358:	6f 91       	pop	r22
    135a:	5f 91       	pop	r21
    135c:	4f 91       	pop	r20
    135e:	3f 91       	pop	r19
    1360:	2f 91       	pop	r18
    1362:	0f 90       	pop	r0
    1364:	0f be       	out	0x3f, r0	; 63
    1366:	0f 90       	pop	r0
    1368:	1f 90       	pop	r1
    136a:	18 95       	reti

0000136c <__vector_16>:
    136c:	1f 92       	push	r1
    136e:	0f 92       	push	r0
    1370:	0f b6       	in	r0, 0x3f	; 63
    1372:	0f 92       	push	r0
    1374:	11 24       	eor	r1, r1
    1376:	2f 93       	push	r18
    1378:	3f 93       	push	r19
    137a:	4f 93       	push	r20
    137c:	5f 93       	push	r21
    137e:	6f 93       	push	r22
    1380:	7f 93       	push	r23
    1382:	8f 93       	push	r24
    1384:	9f 93       	push	r25
    1386:	af 93       	push	r26
    1388:	bf 93       	push	r27
    138a:	ef 93       	push	r30
    138c:	ff 93       	push	r31
    138e:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <overflows>
    1392:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <overflows+0x1>
    1396:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    139a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    139e:	c9 01       	movw	r24, r18
    13a0:	03 2e       	mov	r0, r19
    13a2:	00 0c       	add	r0, r0
    13a4:	aa 0b       	sbc	r26, r26
    13a6:	bb 0b       	sbc	r27, r27
    13a8:	dc 01       	movw	r26, r24
    13aa:	99 27       	eor	r25, r25
    13ac:	88 27       	eor	r24, r24
    13ae:	60 e0       	ldi	r22, 0x00	; 0
    13b0:	70 e0       	ldi	r23, 0x00	; 0
    13b2:	84 2b       	or	r24, r20
    13b4:	95 2b       	or	r25, r21
    13b6:	a6 2b       	or	r26, r22
    13b8:	b7 2b       	or	r27, r23
    13ba:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    13be:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    13c2:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    13c6:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    13ca:	b0 9b       	sbis	0x16, 0	; 22
    13cc:	1b c0       	rjmp	.+54     	; 0x1404 <__vector_16+0x98>
    13ce:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    13d2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    13d6:	c9 01       	movw	r24, r18
    13d8:	01 96       	adiw	r24, 0x01	; 1
    13da:	09 2e       	mov	r0, r25
    13dc:	00 0c       	add	r0, r0
    13de:	aa 0b       	sbc	r26, r26
    13e0:	bb 0b       	sbc	r27, r27
    13e2:	dc 01       	movw	r26, r24
    13e4:	99 27       	eor	r25, r25
    13e6:	88 27       	eor	r24, r24
    13e8:	60 e0       	ldi	r22, 0x00	; 0
    13ea:	70 e0       	ldi	r23, 0x00	; 0
    13ec:	84 2b       	or	r24, r20
    13ee:	95 2b       	or	r25, r21
    13f0:	a6 2b       	or	r26, r22
    13f2:	b7 2b       	or	r27, r23
    13f4:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    13f8:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    13fc:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    1400:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    1404:	e0 91 f0 01 	lds	r30, 0x01F0	; 0x8001f0 <mtable+0x16>
    1408:	f0 91 f1 01 	lds	r31, 0x01F1	; 0x8001f1 <mtable+0x17>
    140c:	30 97       	sbiw	r30, 0x00	; 0
    140e:	39 f0       	breq	.+14     	; 0x141e <__vector_16+0xb2>
    1410:	6b e0       	ldi	r22, 0x0B	; 11
    1412:	70 e0       	ldi	r23, 0x00	; 0
    1414:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <otable+0x16>
    1418:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <otable+0x17>
    141c:	09 95       	icall
    141e:	0e 94 d7 04 	call	0x9ae	; 0x9ae <schedule>
    1422:	ff 91       	pop	r31
    1424:	ef 91       	pop	r30
    1426:	bf 91       	pop	r27
    1428:	af 91       	pop	r26
    142a:	9f 91       	pop	r25
    142c:	8f 91       	pop	r24
    142e:	7f 91       	pop	r23
    1430:	6f 91       	pop	r22
    1432:	5f 91       	pop	r21
    1434:	4f 91       	pop	r20
    1436:	3f 91       	pop	r19
    1438:	2f 91       	pop	r18
    143a:	0f 90       	pop	r0
    143c:	0f be       	out	0x3f, r0	; 63
    143e:	0f 90       	pop	r0
    1440:	1f 90       	pop	r1
    1442:	18 95       	reti

00001444 <__vector_17>:
    1444:	1f 92       	push	r1
    1446:	0f 92       	push	r0
    1448:	0f b6       	in	r0, 0x3f	; 63
    144a:	0f 92       	push	r0
    144c:	11 24       	eor	r1, r1
    144e:	2f 93       	push	r18
    1450:	3f 93       	push	r19
    1452:	4f 93       	push	r20
    1454:	5f 93       	push	r21
    1456:	6f 93       	push	r22
    1458:	7f 93       	push	r23
    145a:	8f 93       	push	r24
    145c:	9f 93       	push	r25
    145e:	af 93       	push	r26
    1460:	bf 93       	push	r27
    1462:	ef 93       	push	r30
    1464:	ff 93       	push	r31
    1466:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <overflows>
    146a:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <overflows+0x1>
    146e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1472:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1476:	c9 01       	movw	r24, r18
    1478:	03 2e       	mov	r0, r19
    147a:	00 0c       	add	r0, r0
    147c:	aa 0b       	sbc	r26, r26
    147e:	bb 0b       	sbc	r27, r27
    1480:	dc 01       	movw	r26, r24
    1482:	99 27       	eor	r25, r25
    1484:	88 27       	eor	r24, r24
    1486:	60 e0       	ldi	r22, 0x00	; 0
    1488:	70 e0       	ldi	r23, 0x00	; 0
    148a:	84 2b       	or	r24, r20
    148c:	95 2b       	or	r25, r21
    148e:	a6 2b       	or	r26, r22
    1490:	b7 2b       	or	r27, r23
    1492:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    1496:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    149a:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    149e:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    14a2:	b0 9b       	sbis	0x16, 0	; 22
    14a4:	1b c0       	rjmp	.+54     	; 0x14dc <__vector_17+0x98>
    14a6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    14aa:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    14ae:	c9 01       	movw	r24, r18
    14b0:	01 96       	adiw	r24, 0x01	; 1
    14b2:	09 2e       	mov	r0, r25
    14b4:	00 0c       	add	r0, r0
    14b6:	aa 0b       	sbc	r26, r26
    14b8:	bb 0b       	sbc	r27, r27
    14ba:	dc 01       	movw	r26, r24
    14bc:	99 27       	eor	r25, r25
    14be:	88 27       	eor	r24, r24
    14c0:	60 e0       	ldi	r22, 0x00	; 0
    14c2:	70 e0       	ldi	r23, 0x00	; 0
    14c4:	84 2b       	or	r24, r20
    14c6:	95 2b       	or	r25, r21
    14c8:	a6 2b       	or	r26, r22
    14ca:	b7 2b       	or	r27, r23
    14cc:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    14d0:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    14d4:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    14d8:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    14dc:	e0 91 f2 01 	lds	r30, 0x01F2	; 0x8001f2 <mtable+0x18>
    14e0:	f0 91 f3 01 	lds	r31, 0x01F3	; 0x8001f3 <mtable+0x19>
    14e4:	30 97       	sbiw	r30, 0x00	; 0
    14e6:	39 f0       	breq	.+14     	; 0x14f6 <__vector_17+0xb2>
    14e8:	6c e0       	ldi	r22, 0x0C	; 12
    14ea:	70 e0       	ldi	r23, 0x00	; 0
    14ec:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <otable+0x18>
    14f0:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <otable+0x19>
    14f4:	09 95       	icall
    14f6:	0e 94 d7 04 	call	0x9ae	; 0x9ae <schedule>
    14fa:	ff 91       	pop	r31
    14fc:	ef 91       	pop	r30
    14fe:	bf 91       	pop	r27
    1500:	af 91       	pop	r26
    1502:	9f 91       	pop	r25
    1504:	8f 91       	pop	r24
    1506:	7f 91       	pop	r23
    1508:	6f 91       	pop	r22
    150a:	5f 91       	pop	r21
    150c:	4f 91       	pop	r20
    150e:	3f 91       	pop	r19
    1510:	2f 91       	pop	r18
    1512:	0f 90       	pop	r0
    1514:	0f be       	out	0x3f, r0	; 63
    1516:	0f 90       	pop	r0
    1518:	1f 90       	pop	r1
    151a:	18 95       	reti

0000151c <__vector_18>:
    151c:	1f 92       	push	r1
    151e:	0f 92       	push	r0
    1520:	0f b6       	in	r0, 0x3f	; 63
    1522:	0f 92       	push	r0
    1524:	11 24       	eor	r1, r1
    1526:	2f 93       	push	r18
    1528:	3f 93       	push	r19
    152a:	4f 93       	push	r20
    152c:	5f 93       	push	r21
    152e:	6f 93       	push	r22
    1530:	7f 93       	push	r23
    1532:	8f 93       	push	r24
    1534:	9f 93       	push	r25
    1536:	af 93       	push	r26
    1538:	bf 93       	push	r27
    153a:	ef 93       	push	r30
    153c:	ff 93       	push	r31
    153e:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <overflows>
    1542:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <overflows+0x1>
    1546:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    154a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    154e:	c9 01       	movw	r24, r18
    1550:	03 2e       	mov	r0, r19
    1552:	00 0c       	add	r0, r0
    1554:	aa 0b       	sbc	r26, r26
    1556:	bb 0b       	sbc	r27, r27
    1558:	dc 01       	movw	r26, r24
    155a:	99 27       	eor	r25, r25
    155c:	88 27       	eor	r24, r24
    155e:	60 e0       	ldi	r22, 0x00	; 0
    1560:	70 e0       	ldi	r23, 0x00	; 0
    1562:	84 2b       	or	r24, r20
    1564:	95 2b       	or	r25, r21
    1566:	a6 2b       	or	r26, r22
    1568:	b7 2b       	or	r27, r23
    156a:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    156e:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    1572:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    1576:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    157a:	b0 9b       	sbis	0x16, 0	; 22
    157c:	1b c0       	rjmp	.+54     	; 0x15b4 <__vector_18+0x98>
    157e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1582:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1586:	c9 01       	movw	r24, r18
    1588:	01 96       	adiw	r24, 0x01	; 1
    158a:	09 2e       	mov	r0, r25
    158c:	00 0c       	add	r0, r0
    158e:	aa 0b       	sbc	r26, r26
    1590:	bb 0b       	sbc	r27, r27
    1592:	dc 01       	movw	r26, r24
    1594:	99 27       	eor	r25, r25
    1596:	88 27       	eor	r24, r24
    1598:	60 e0       	ldi	r22, 0x00	; 0
    159a:	70 e0       	ldi	r23, 0x00	; 0
    159c:	84 2b       	or	r24, r20
    159e:	95 2b       	or	r25, r21
    15a0:	a6 2b       	or	r26, r22
    15a2:	b7 2b       	or	r27, r23
    15a4:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    15a8:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    15ac:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    15b0:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    15b4:	e0 91 f4 01 	lds	r30, 0x01F4	; 0x8001f4 <mtable+0x1a>
    15b8:	f0 91 f5 01 	lds	r31, 0x01F5	; 0x8001f5 <mtable+0x1b>
    15bc:	30 97       	sbiw	r30, 0x00	; 0
    15be:	39 f0       	breq	.+14     	; 0x15ce <__vector_18+0xb2>
    15c0:	6d e0       	ldi	r22, 0x0D	; 13
    15c2:	70 e0       	ldi	r23, 0x00	; 0
    15c4:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <otable+0x1a>
    15c8:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <otable+0x1b>
    15cc:	09 95       	icall
    15ce:	0e 94 d7 04 	call	0x9ae	; 0x9ae <schedule>
    15d2:	ff 91       	pop	r31
    15d4:	ef 91       	pop	r30
    15d6:	bf 91       	pop	r27
    15d8:	af 91       	pop	r26
    15da:	9f 91       	pop	r25
    15dc:	8f 91       	pop	r24
    15de:	7f 91       	pop	r23
    15e0:	6f 91       	pop	r22
    15e2:	5f 91       	pop	r21
    15e4:	4f 91       	pop	r20
    15e6:	3f 91       	pop	r19
    15e8:	2f 91       	pop	r18
    15ea:	0f 90       	pop	r0
    15ec:	0f be       	out	0x3f, r0	; 63
    15ee:	0f 90       	pop	r0
    15f0:	1f 90       	pop	r1
    15f2:	18 95       	reti

000015f4 <__vector_19>:
    15f4:	1f 92       	push	r1
    15f6:	0f 92       	push	r0
    15f8:	0f b6       	in	r0, 0x3f	; 63
    15fa:	0f 92       	push	r0
    15fc:	11 24       	eor	r1, r1
    15fe:	2f 93       	push	r18
    1600:	3f 93       	push	r19
    1602:	4f 93       	push	r20
    1604:	5f 93       	push	r21
    1606:	6f 93       	push	r22
    1608:	7f 93       	push	r23
    160a:	8f 93       	push	r24
    160c:	9f 93       	push	r25
    160e:	af 93       	push	r26
    1610:	bf 93       	push	r27
    1612:	ef 93       	push	r30
    1614:	ff 93       	push	r31
    1616:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <overflows>
    161a:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <overflows+0x1>
    161e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1622:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1626:	c9 01       	movw	r24, r18
    1628:	03 2e       	mov	r0, r19
    162a:	00 0c       	add	r0, r0
    162c:	aa 0b       	sbc	r26, r26
    162e:	bb 0b       	sbc	r27, r27
    1630:	dc 01       	movw	r26, r24
    1632:	99 27       	eor	r25, r25
    1634:	88 27       	eor	r24, r24
    1636:	60 e0       	ldi	r22, 0x00	; 0
    1638:	70 e0       	ldi	r23, 0x00	; 0
    163a:	84 2b       	or	r24, r20
    163c:	95 2b       	or	r25, r21
    163e:	a6 2b       	or	r26, r22
    1640:	b7 2b       	or	r27, r23
    1642:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    1646:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    164a:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    164e:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    1652:	b0 9b       	sbis	0x16, 0	; 22
    1654:	1b c0       	rjmp	.+54     	; 0x168c <__vector_19+0x98>
    1656:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    165a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    165e:	c9 01       	movw	r24, r18
    1660:	01 96       	adiw	r24, 0x01	; 1
    1662:	09 2e       	mov	r0, r25
    1664:	00 0c       	add	r0, r0
    1666:	aa 0b       	sbc	r26, r26
    1668:	bb 0b       	sbc	r27, r27
    166a:	dc 01       	movw	r26, r24
    166c:	99 27       	eor	r25, r25
    166e:	88 27       	eor	r24, r24
    1670:	60 e0       	ldi	r22, 0x00	; 0
    1672:	70 e0       	ldi	r23, 0x00	; 0
    1674:	84 2b       	or	r24, r20
    1676:	95 2b       	or	r25, r21
    1678:	a6 2b       	or	r26, r22
    167a:	b7 2b       	or	r27, r23
    167c:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    1680:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    1684:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    1688:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    168c:	e0 91 f6 01 	lds	r30, 0x01F6	; 0x8001f6 <mtable+0x1c>
    1690:	f0 91 f7 01 	lds	r31, 0x01F7	; 0x8001f7 <mtable+0x1d>
    1694:	30 97       	sbiw	r30, 0x00	; 0
    1696:	39 f0       	breq	.+14     	; 0x16a6 <__vector_19+0xb2>
    1698:	6e e0       	ldi	r22, 0x0E	; 14
    169a:	70 e0       	ldi	r23, 0x00	; 0
    169c:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <otable+0x1c>
    16a0:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <otable+0x1d>
    16a4:	09 95       	icall
    16a6:	0e 94 d7 04 	call	0x9ae	; 0x9ae <schedule>
    16aa:	ff 91       	pop	r31
    16ac:	ef 91       	pop	r30
    16ae:	bf 91       	pop	r27
    16b0:	af 91       	pop	r26
    16b2:	9f 91       	pop	r25
    16b4:	8f 91       	pop	r24
    16b6:	7f 91       	pop	r23
    16b8:	6f 91       	pop	r22
    16ba:	5f 91       	pop	r21
    16bc:	4f 91       	pop	r20
    16be:	3f 91       	pop	r19
    16c0:	2f 91       	pop	r18
    16c2:	0f 90       	pop	r0
    16c4:	0f be       	out	0x3f, r0	; 63
    16c6:	0f 90       	pop	r0
    16c8:	1f 90       	pop	r1
    16ca:	18 95       	reti

000016cc <__vector_20>:
    16cc:	1f 92       	push	r1
    16ce:	0f 92       	push	r0
    16d0:	0f b6       	in	r0, 0x3f	; 63
    16d2:	0f 92       	push	r0
    16d4:	11 24       	eor	r1, r1
    16d6:	2f 93       	push	r18
    16d8:	3f 93       	push	r19
    16da:	4f 93       	push	r20
    16dc:	5f 93       	push	r21
    16de:	6f 93       	push	r22
    16e0:	7f 93       	push	r23
    16e2:	8f 93       	push	r24
    16e4:	9f 93       	push	r25
    16e6:	af 93       	push	r26
    16e8:	bf 93       	push	r27
    16ea:	ef 93       	push	r30
    16ec:	ff 93       	push	r31
    16ee:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <overflows>
    16f2:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <overflows+0x1>
    16f6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    16fa:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    16fe:	c9 01       	movw	r24, r18
    1700:	03 2e       	mov	r0, r19
    1702:	00 0c       	add	r0, r0
    1704:	aa 0b       	sbc	r26, r26
    1706:	bb 0b       	sbc	r27, r27
    1708:	dc 01       	movw	r26, r24
    170a:	99 27       	eor	r25, r25
    170c:	88 27       	eor	r24, r24
    170e:	60 e0       	ldi	r22, 0x00	; 0
    1710:	70 e0       	ldi	r23, 0x00	; 0
    1712:	84 2b       	or	r24, r20
    1714:	95 2b       	or	r25, r21
    1716:	a6 2b       	or	r26, r22
    1718:	b7 2b       	or	r27, r23
    171a:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    171e:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    1722:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    1726:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    172a:	b0 9b       	sbis	0x16, 0	; 22
    172c:	1b c0       	rjmp	.+54     	; 0x1764 <__vector_20+0x98>
    172e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1732:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1736:	c9 01       	movw	r24, r18
    1738:	01 96       	adiw	r24, 0x01	; 1
    173a:	09 2e       	mov	r0, r25
    173c:	00 0c       	add	r0, r0
    173e:	aa 0b       	sbc	r26, r26
    1740:	bb 0b       	sbc	r27, r27
    1742:	dc 01       	movw	r26, r24
    1744:	99 27       	eor	r25, r25
    1746:	88 27       	eor	r24, r24
    1748:	60 e0       	ldi	r22, 0x00	; 0
    174a:	70 e0       	ldi	r23, 0x00	; 0
    174c:	84 2b       	or	r24, r20
    174e:	95 2b       	or	r25, r21
    1750:	a6 2b       	or	r26, r22
    1752:	b7 2b       	or	r27, r23
    1754:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    1758:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    175c:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    1760:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    1764:	e0 91 f8 01 	lds	r30, 0x01F8	; 0x8001f8 <mtable+0x1e>
    1768:	f0 91 f9 01 	lds	r31, 0x01F9	; 0x8001f9 <mtable+0x1f>
    176c:	30 97       	sbiw	r30, 0x00	; 0
    176e:	39 f0       	breq	.+14     	; 0x177e <__vector_20+0xb2>
    1770:	6f e0       	ldi	r22, 0x0F	; 15
    1772:	70 e0       	ldi	r23, 0x00	; 0
    1774:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <otable+0x1e>
    1778:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <otable+0x1f>
    177c:	09 95       	icall
    177e:	0e 94 d7 04 	call	0x9ae	; 0x9ae <schedule>
    1782:	ff 91       	pop	r31
    1784:	ef 91       	pop	r30
    1786:	bf 91       	pop	r27
    1788:	af 91       	pop	r26
    178a:	9f 91       	pop	r25
    178c:	8f 91       	pop	r24
    178e:	7f 91       	pop	r23
    1790:	6f 91       	pop	r22
    1792:	5f 91       	pop	r21
    1794:	4f 91       	pop	r20
    1796:	3f 91       	pop	r19
    1798:	2f 91       	pop	r18
    179a:	0f 90       	pop	r0
    179c:	0f be       	out	0x3f, r0	; 63
    179e:	0f 90       	pop	r0
    17a0:	1f 90       	pop	r1
    17a2:	18 95       	reti

000017a4 <__vector_21>:
    17a4:	1f 92       	push	r1
    17a6:	0f 92       	push	r0
    17a8:	0f b6       	in	r0, 0x3f	; 63
    17aa:	0f 92       	push	r0
    17ac:	11 24       	eor	r1, r1
    17ae:	2f 93       	push	r18
    17b0:	3f 93       	push	r19
    17b2:	4f 93       	push	r20
    17b4:	5f 93       	push	r21
    17b6:	6f 93       	push	r22
    17b8:	7f 93       	push	r23
    17ba:	8f 93       	push	r24
    17bc:	9f 93       	push	r25
    17be:	af 93       	push	r26
    17c0:	bf 93       	push	r27
    17c2:	ef 93       	push	r30
    17c4:	ff 93       	push	r31
    17c6:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <overflows>
    17ca:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <overflows+0x1>
    17ce:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    17d2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    17d6:	c9 01       	movw	r24, r18
    17d8:	03 2e       	mov	r0, r19
    17da:	00 0c       	add	r0, r0
    17dc:	aa 0b       	sbc	r26, r26
    17de:	bb 0b       	sbc	r27, r27
    17e0:	dc 01       	movw	r26, r24
    17e2:	99 27       	eor	r25, r25
    17e4:	88 27       	eor	r24, r24
    17e6:	60 e0       	ldi	r22, 0x00	; 0
    17e8:	70 e0       	ldi	r23, 0x00	; 0
    17ea:	84 2b       	or	r24, r20
    17ec:	95 2b       	or	r25, r21
    17ee:	a6 2b       	or	r26, r22
    17f0:	b7 2b       	or	r27, r23
    17f2:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    17f6:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    17fa:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    17fe:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    1802:	b0 9b       	sbis	0x16, 0	; 22
    1804:	1b c0       	rjmp	.+54     	; 0x183c <__vector_21+0x98>
    1806:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    180a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    180e:	c9 01       	movw	r24, r18
    1810:	01 96       	adiw	r24, 0x01	; 1
    1812:	09 2e       	mov	r0, r25
    1814:	00 0c       	add	r0, r0
    1816:	aa 0b       	sbc	r26, r26
    1818:	bb 0b       	sbc	r27, r27
    181a:	dc 01       	movw	r26, r24
    181c:	99 27       	eor	r25, r25
    181e:	88 27       	eor	r24, r24
    1820:	60 e0       	ldi	r22, 0x00	; 0
    1822:	70 e0       	ldi	r23, 0x00	; 0
    1824:	84 2b       	or	r24, r20
    1826:	95 2b       	or	r25, r21
    1828:	a6 2b       	or	r26, r22
    182a:	b7 2b       	or	r27, r23
    182c:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    1830:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    1834:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    1838:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    183c:	e0 91 fa 01 	lds	r30, 0x01FA	; 0x8001fa <mtable+0x20>
    1840:	f0 91 fb 01 	lds	r31, 0x01FB	; 0x8001fb <mtable+0x21>
    1844:	30 97       	sbiw	r30, 0x00	; 0
    1846:	39 f0       	breq	.+14     	; 0x1856 <__vector_21+0xb2>
    1848:	60 e1       	ldi	r22, 0x10	; 16
    184a:	70 e0       	ldi	r23, 0x00	; 0
    184c:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <otable+0x20>
    1850:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <otable+0x21>
    1854:	09 95       	icall
    1856:	0e 94 d7 04 	call	0x9ae	; 0x9ae <schedule>
    185a:	ff 91       	pop	r31
    185c:	ef 91       	pop	r30
    185e:	bf 91       	pop	r27
    1860:	af 91       	pop	r26
    1862:	9f 91       	pop	r25
    1864:	8f 91       	pop	r24
    1866:	7f 91       	pop	r23
    1868:	6f 91       	pop	r22
    186a:	5f 91       	pop	r21
    186c:	4f 91       	pop	r20
    186e:	3f 91       	pop	r19
    1870:	2f 91       	pop	r18
    1872:	0f 90       	pop	r0
    1874:	0f be       	out	0x3f, r0	; 63
    1876:	0f 90       	pop	r0
    1878:	1f 90       	pop	r1
    187a:	18 95       	reti

0000187c <__vector_22>:
    187c:	1f 92       	push	r1
    187e:	0f 92       	push	r0
    1880:	0f b6       	in	r0, 0x3f	; 63
    1882:	0f 92       	push	r0
    1884:	11 24       	eor	r1, r1
    1886:	2f 93       	push	r18
    1888:	3f 93       	push	r19
    188a:	4f 93       	push	r20
    188c:	5f 93       	push	r21
    188e:	6f 93       	push	r22
    1890:	7f 93       	push	r23
    1892:	8f 93       	push	r24
    1894:	9f 93       	push	r25
    1896:	af 93       	push	r26
    1898:	bf 93       	push	r27
    189a:	ef 93       	push	r30
    189c:	ff 93       	push	r31
    189e:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <overflows>
    18a2:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <overflows+0x1>
    18a6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    18aa:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    18ae:	c9 01       	movw	r24, r18
    18b0:	03 2e       	mov	r0, r19
    18b2:	00 0c       	add	r0, r0
    18b4:	aa 0b       	sbc	r26, r26
    18b6:	bb 0b       	sbc	r27, r27
    18b8:	dc 01       	movw	r26, r24
    18ba:	99 27       	eor	r25, r25
    18bc:	88 27       	eor	r24, r24
    18be:	60 e0       	ldi	r22, 0x00	; 0
    18c0:	70 e0       	ldi	r23, 0x00	; 0
    18c2:	84 2b       	or	r24, r20
    18c4:	95 2b       	or	r25, r21
    18c6:	a6 2b       	or	r26, r22
    18c8:	b7 2b       	or	r27, r23
    18ca:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    18ce:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    18d2:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    18d6:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    18da:	b0 9b       	sbis	0x16, 0	; 22
    18dc:	1b c0       	rjmp	.+54     	; 0x1914 <__vector_22+0x98>
    18de:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    18e2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    18e6:	c9 01       	movw	r24, r18
    18e8:	01 96       	adiw	r24, 0x01	; 1
    18ea:	09 2e       	mov	r0, r25
    18ec:	00 0c       	add	r0, r0
    18ee:	aa 0b       	sbc	r26, r26
    18f0:	bb 0b       	sbc	r27, r27
    18f2:	dc 01       	movw	r26, r24
    18f4:	99 27       	eor	r25, r25
    18f6:	88 27       	eor	r24, r24
    18f8:	60 e0       	ldi	r22, 0x00	; 0
    18fa:	70 e0       	ldi	r23, 0x00	; 0
    18fc:	84 2b       	or	r24, r20
    18fe:	95 2b       	or	r25, r21
    1900:	a6 2b       	or	r26, r22
    1902:	b7 2b       	or	r27, r23
    1904:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timestamp>
    1908:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timestamp+0x1>
    190c:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timestamp+0x2>
    1910:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timestamp+0x3>
    1914:	e0 91 fc 01 	lds	r30, 0x01FC	; 0x8001fc <mtable+0x22>
    1918:	f0 91 fd 01 	lds	r31, 0x01FD	; 0x8001fd <mtable+0x23>
    191c:	30 97       	sbiw	r30, 0x00	; 0
    191e:	39 f0       	breq	.+14     	; 0x192e <__vector_22+0xb2>
    1920:	61 e1       	ldi	r22, 0x11	; 17
    1922:	70 e0       	ldi	r23, 0x00	; 0
    1924:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <otable+0x22>
    1928:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <otable+0x23>
    192c:	09 95       	icall
    192e:	0e 94 d7 04 	call	0x9ae	; 0x9ae <schedule>
    1932:	ff 91       	pop	r31
    1934:	ef 91       	pop	r30
    1936:	bf 91       	pop	r27
    1938:	af 91       	pop	r26
    193a:	9f 91       	pop	r25
    193c:	8f 91       	pop	r24
    193e:	7f 91       	pop	r23
    1940:	6f 91       	pop	r22
    1942:	5f 91       	pop	r21
    1944:	4f 91       	pop	r20
    1946:	3f 91       	pop	r19
    1948:	2f 91       	pop	r18
    194a:	0f 90       	pop	r0
    194c:	0f be       	out	0x3f, r0	; 63
    194e:	0f 90       	pop	r0
    1950:	1f 90       	pop	r1
    1952:	18 95       	reti

00001954 <enqueueByDeadline>:
    1954:	ef 92       	push	r14
    1956:	ff 92       	push	r15
    1958:	0f 93       	push	r16
    195a:	1f 93       	push	r17
    195c:	cf 93       	push	r28
    195e:	df 93       	push	r29
    1960:	7b 01       	movw	r14, r22
    1962:	eb 01       	movw	r28, r22
    1964:	a8 81       	ld	r26, Y
    1966:	b9 81       	ldd	r27, Y+1	; 0x01
    1968:	10 97       	sbiw	r26, 0x00	; 0
    196a:	61 f1       	breq	.+88     	; 0x19c4 <enqueueByDeadline+0x70>
    196c:	fc 01       	movw	r30, r24
    196e:	06 81       	ldd	r16, Z+6	; 0x06
    1970:	17 81       	ldd	r17, Z+7	; 0x07
    1972:	20 85       	ldd	r18, Z+8	; 0x08
    1974:	31 85       	ldd	r19, Z+9	; 0x09
    1976:	16 96       	adiw	r26, 0x06	; 6
    1978:	4d 91       	ld	r20, X+
    197a:	5d 91       	ld	r21, X+
    197c:	6d 91       	ld	r22, X+
    197e:	7c 91       	ld	r23, X
    1980:	19 97       	sbiw	r26, 0x09	; 9
    1982:	04 17       	cp	r16, r20
    1984:	15 07       	cpc	r17, r21
    1986:	26 07       	cpc	r18, r22
    1988:	37 07       	cpc	r19, r23
    198a:	14 f4       	brge	.+4      	; 0x1990 <enqueueByDeadline+0x3c>
    198c:	1b c0       	rjmp	.+54     	; 0x19c4 <enqueueByDeadline+0x70>
    198e:	df 01       	movw	r26, r30
    1990:	ed 91       	ld	r30, X+
    1992:	fc 91       	ld	r31, X
    1994:	11 97       	sbiw	r26, 0x01	; 1
    1996:	30 97       	sbiw	r30, 0x00	; 0
    1998:	49 f0       	breq	.+18     	; 0x19ac <enqueueByDeadline+0x58>
    199a:	46 81       	ldd	r20, Z+6	; 0x06
    199c:	57 81       	ldd	r21, Z+7	; 0x07
    199e:	60 85       	ldd	r22, Z+8	; 0x08
    19a0:	71 85       	ldd	r23, Z+9	; 0x09
    19a2:	04 17       	cp	r16, r20
    19a4:	15 07       	cpc	r17, r21
    19a6:	26 07       	cpc	r18, r22
    19a8:	37 07       	cpc	r19, r23
    19aa:	8c f7       	brge	.-30     	; 0x198e <enqueueByDeadline+0x3a>
    19ac:	ec 01       	movw	r28, r24
    19ae:	f9 83       	std	Y+1, r31	; 0x01
    19b0:	e8 83       	st	Y, r30
    19b2:	10 97       	sbiw	r26, 0x00	; 0
    19b4:	21 f4       	brne	.+8      	; 0x19be <enqueueByDeadline+0x6a>
    19b6:	f7 01       	movw	r30, r14
    19b8:	91 83       	std	Z+1, r25	; 0x01
    19ba:	80 83       	st	Z, r24
    19bc:	07 c0       	rjmp	.+14     	; 0x19cc <enqueueByDeadline+0x78>
    19be:	8d 93       	st	X+, r24
    19c0:	9c 93       	st	X, r25
    19c2:	04 c0       	rjmp	.+8      	; 0x19cc <enqueueByDeadline+0x78>
    19c4:	ec 01       	movw	r28, r24
    19c6:	b9 83       	std	Y+1, r27	; 0x01
    19c8:	a8 83       	st	Y, r26
    19ca:	f5 cf       	rjmp	.-22     	; 0x19b6 <enqueueByDeadline+0x62>
    19cc:	df 91       	pop	r29
    19ce:	cf 91       	pop	r28
    19d0:	1f 91       	pop	r17
    19d2:	0f 91       	pop	r16
    19d4:	ff 90       	pop	r15
    19d6:	ef 90       	pop	r14
    19d8:	08 95       	ret

000019da <enqueueByBaseline>:
    19da:	ef 92       	push	r14
    19dc:	ff 92       	push	r15
    19de:	0f 93       	push	r16
    19e0:	1f 93       	push	r17
    19e2:	cf 93       	push	r28
    19e4:	df 93       	push	r29
    19e6:	7b 01       	movw	r14, r22
    19e8:	eb 01       	movw	r28, r22
    19ea:	a8 81       	ld	r26, Y
    19ec:	b9 81       	ldd	r27, Y+1	; 0x01
    19ee:	10 97       	sbiw	r26, 0x00	; 0
    19f0:	61 f1       	breq	.+88     	; 0x1a4a <enqueueByBaseline+0x70>
    19f2:	fc 01       	movw	r30, r24
    19f4:	02 81       	ldd	r16, Z+2	; 0x02
    19f6:	13 81       	ldd	r17, Z+3	; 0x03
    19f8:	24 81       	ldd	r18, Z+4	; 0x04
    19fa:	35 81       	ldd	r19, Z+5	; 0x05
    19fc:	12 96       	adiw	r26, 0x02	; 2
    19fe:	4d 91       	ld	r20, X+
    1a00:	5d 91       	ld	r21, X+
    1a02:	6d 91       	ld	r22, X+
    1a04:	7c 91       	ld	r23, X
    1a06:	15 97       	sbiw	r26, 0x05	; 5
    1a08:	04 17       	cp	r16, r20
    1a0a:	15 07       	cpc	r17, r21
    1a0c:	26 07       	cpc	r18, r22
    1a0e:	37 07       	cpc	r19, r23
    1a10:	14 f4       	brge	.+4      	; 0x1a16 <enqueueByBaseline+0x3c>
    1a12:	1b c0       	rjmp	.+54     	; 0x1a4a <enqueueByBaseline+0x70>
    1a14:	df 01       	movw	r26, r30
    1a16:	ed 91       	ld	r30, X+
    1a18:	fc 91       	ld	r31, X
    1a1a:	11 97       	sbiw	r26, 0x01	; 1
    1a1c:	30 97       	sbiw	r30, 0x00	; 0
    1a1e:	49 f0       	breq	.+18     	; 0x1a32 <enqueueByBaseline+0x58>
    1a20:	42 81       	ldd	r20, Z+2	; 0x02
    1a22:	53 81       	ldd	r21, Z+3	; 0x03
    1a24:	64 81       	ldd	r22, Z+4	; 0x04
    1a26:	75 81       	ldd	r23, Z+5	; 0x05
    1a28:	04 17       	cp	r16, r20
    1a2a:	15 07       	cpc	r17, r21
    1a2c:	26 07       	cpc	r18, r22
    1a2e:	37 07       	cpc	r19, r23
    1a30:	8c f7       	brge	.-30     	; 0x1a14 <enqueueByBaseline+0x3a>
    1a32:	ec 01       	movw	r28, r24
    1a34:	f9 83       	std	Y+1, r31	; 0x01
    1a36:	e8 83       	st	Y, r30
    1a38:	10 97       	sbiw	r26, 0x00	; 0
    1a3a:	21 f4       	brne	.+8      	; 0x1a44 <enqueueByBaseline+0x6a>
    1a3c:	f7 01       	movw	r30, r14
    1a3e:	91 83       	std	Z+1, r25	; 0x01
    1a40:	80 83       	st	Z, r24
    1a42:	07 c0       	rjmp	.+14     	; 0x1a52 <enqueueByBaseline+0x78>
    1a44:	8d 93       	st	X+, r24
    1a46:	9c 93       	st	X, r25
    1a48:	04 c0       	rjmp	.+8      	; 0x1a52 <enqueueByBaseline+0x78>
    1a4a:	ec 01       	movw	r28, r24
    1a4c:	b9 83       	std	Y+1, r27	; 0x01
    1a4e:	a8 83       	st	Y, r26
    1a50:	f5 cf       	rjmp	.-22     	; 0x1a3c <enqueueByBaseline+0x62>
    1a52:	df 91       	pop	r29
    1a54:	cf 91       	pop	r28
    1a56:	1f 91       	pop	r17
    1a58:	0f 91       	pop	r16
    1a5a:	ff 90       	pop	r15
    1a5c:	ef 90       	pop	r14
    1a5e:	08 95       	ret

00001a60 <dequeue>:
    1a60:	dc 01       	movw	r26, r24
    1a62:	ed 91       	ld	r30, X+
    1a64:	fc 91       	ld	r31, X
    1a66:	11 97       	sbiw	r26, 0x01	; 1
    1a68:	30 97       	sbiw	r30, 0x00	; 0
    1a6a:	59 f4       	brne	.+22     	; 0x1a82 <dequeue+0x22>
    1a6c:	8f ef       	ldi	r24, 0xFF	; 255
    1a6e:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
    1a72:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
    1a76:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	83 bf       	out	0x33, r24	; 51
    1a7e:	88 95       	sleep
    1a80:	fd cf       	rjmp	.-6      	; 0x1a7c <dequeue+0x1c>
    1a82:	20 81       	ld	r18, Z
    1a84:	31 81       	ldd	r19, Z+1	; 0x01
    1a86:	2d 93       	st	X+, r18
    1a88:	3c 93       	st	X, r19
    1a8a:	cf 01       	movw	r24, r30
    1a8c:	08 95       	ret

00001a8e <__vector_9>:
    1a8e:	1f 92       	push	r1
    1a90:	0f 92       	push	r0
    1a92:	0f b6       	in	r0, 0x3f	; 63
    1a94:	0f 92       	push	r0
    1a96:	11 24       	eor	r1, r1
    1a98:	2f 93       	push	r18
    1a9a:	3f 93       	push	r19
    1a9c:	4f 93       	push	r20
    1a9e:	5f 93       	push	r21
    1aa0:	6f 93       	push	r22
    1aa2:	7f 93       	push	r23
    1aa4:	8f 93       	push	r24
    1aa6:	9f 93       	push	r25
    1aa8:	ef 93       	push	r30
    1aaa:	ff 93       	push	r31
    1aac:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <overflows>
    1ab0:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <overflows+0x1>
    1ab4:	01 96       	adiw	r24, 0x01	; 1
    1ab6:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <overflows+0x1>
    1aba:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <overflows>
    1abe:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <timerQ>
    1ac2:	f0 91 3f 01 	lds	r31, 0x013F	; 0x80013f <timerQ+0x1>
    1ac6:	30 97       	sbiw	r30, 0x00	; 0
    1ac8:	01 f1       	breq	.+64     	; 0x1b0a <__vector_9+0x7c>
    1aca:	42 81       	ldd	r20, Z+2	; 0x02
    1acc:	53 81       	ldd	r21, Z+3	; 0x03
    1ace:	64 81       	ldd	r22, Z+4	; 0x04
    1ad0:	75 81       	ldd	r23, Z+5	; 0x05
    1ad2:	86 17       	cp	r24, r22
    1ad4:	97 07       	cpc	r25, r23
    1ad6:	c9 f4       	brne	.+50     	; 0x1b0a <__vector_9+0x7c>
    1ad8:	ca 01       	movw	r24, r20
    1ada:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1ade:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1ae2:	42 1b       	sub	r20, r18
    1ae4:	53 0b       	sbc	r21, r19
    1ae6:	41 30       	cpi	r20, 0x01	; 1
    1ae8:	51 05       	cpc	r21, r1
    1aea:	29 f4       	brne	.+10     	; 0x1af6 <__vector_9+0x68>
    1aec:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1af0:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1af4:	01 96       	adiw	r24, 0x01	; 1
    1af6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1afa:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1afe:	ef e6       	ldi	r30, 0x6F	; 111
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	80 81       	ld	r24, Z
    1b04:	82 60       	ori	r24, 0x02	; 2
    1b06:	80 83       	st	Z, r24
    1b08:	05 c0       	rjmp	.+10     	; 0x1b14 <__vector_9+0x86>
    1b0a:	ef e6       	ldi	r30, 0x6F	; 111
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	80 81       	ld	r24, Z
    1b10:	8d 7f       	andi	r24, 0xFD	; 253
    1b12:	80 83       	st	Z, r24
    1b14:	ff 91       	pop	r31
    1b16:	ef 91       	pop	r30
    1b18:	9f 91       	pop	r25
    1b1a:	8f 91       	pop	r24
    1b1c:	7f 91       	pop	r23
    1b1e:	6f 91       	pop	r22
    1b20:	5f 91       	pop	r21
    1b22:	4f 91       	pop	r20
    1b24:	3f 91       	pop	r19
    1b26:	2f 91       	pop	r18
    1b28:	0f 90       	pop	r0
    1b2a:	0f be       	out	0x3f, r0	; 63
    1b2c:	0f 90       	pop	r0
    1b2e:	1f 90       	pop	r1
    1b30:	18 95       	reti

00001b32 <__vector_7>:
    1b32:	1f 92       	push	r1
    1b34:	0f 92       	push	r0
    1b36:	0f b6       	in	r0, 0x3f	; 63
    1b38:	0f 92       	push	r0
    1b3a:	11 24       	eor	r1, r1
    1b3c:	cf 92       	push	r12
    1b3e:	df 92       	push	r13
    1b40:	ef 92       	push	r14
    1b42:	ff 92       	push	r15
    1b44:	2f 93       	push	r18
    1b46:	3f 93       	push	r19
    1b48:	4f 93       	push	r20
    1b4a:	5f 93       	push	r21
    1b4c:	6f 93       	push	r22
    1b4e:	7f 93       	push	r23
    1b50:	8f 93       	push	r24
    1b52:	9f 93       	push	r25
    1b54:	af 93       	push	r26
    1b56:	bf 93       	push	r27
    1b58:	ef 93       	push	r30
    1b5a:	ff 93       	push	r31
    1b5c:	c0 90 38 01 	lds	r12, 0x0138	; 0x800138 <overflows>
    1b60:	d0 90 39 01 	lds	r13, 0x0139	; 0x800139 <overflows+0x1>
    1b64:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1b68:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1b6c:	b0 99       	sbic	0x16, 0	; 22
    1b6e:	0f c0       	rjmp	.+30     	; 0x1b8e <__vector_7+0x5c>
    1b70:	0d 2c       	mov	r0, r13
    1b72:	00 0c       	add	r0, r0
    1b74:	ee 08       	sbc	r14, r14
    1b76:	ff 08       	sbc	r15, r15
    1b78:	d6 01       	movw	r26, r12
    1b7a:	99 27       	eor	r25, r25
    1b7c:	88 27       	eor	r24, r24
    1b7e:	69 01       	movw	r12, r18
    1b80:	e1 2c       	mov	r14, r1
    1b82:	f1 2c       	mov	r15, r1
    1b84:	c8 2a       	or	r12, r24
    1b86:	d9 2a       	or	r13, r25
    1b88:	ea 2a       	or	r14, r26
    1b8a:	fb 2a       	or	r15, r27
    1b8c:	15 c0       	rjmp	.+42     	; 0x1bb8 <__vector_7+0x86>
    1b8e:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1b92:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1b96:	8f ef       	ldi	r24, 0xFF	; 255
    1b98:	c8 1a       	sub	r12, r24
    1b9a:	d8 0a       	sbc	r13, r24
    1b9c:	0d 2c       	mov	r0, r13
    1b9e:	00 0c       	add	r0, r0
    1ba0:	ee 08       	sbc	r14, r14
    1ba2:	ff 08       	sbc	r15, r15
    1ba4:	d6 01       	movw	r26, r12
    1ba6:	99 27       	eor	r25, r25
    1ba8:	88 27       	eor	r24, r24
    1baa:	69 01       	movw	r12, r18
    1bac:	e1 2c       	mov	r14, r1
    1bae:	f1 2c       	mov	r15, r1
    1bb0:	c8 2a       	or	r12, r24
    1bb2:	d9 2a       	or	r13, r25
    1bb4:	ea 2a       	or	r14, r26
    1bb6:	fb 2a       	or	r15, r27
    1bb8:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <timerQ>
    1bbc:	f0 91 3f 01 	lds	r31, 0x013F	; 0x80013f <timerQ+0x1>
    1bc0:	30 97       	sbiw	r30, 0x00	; 0
    1bc2:	09 f4       	brne	.+2      	; 0x1bc6 <__vector_7+0x94>
    1bc4:	42 c0       	rjmp	.+132    	; 0x1c4a <__vector_7+0x118>
    1bc6:	82 81       	ldd	r24, Z+2	; 0x02
    1bc8:	93 81       	ldd	r25, Z+3	; 0x03
    1bca:	a4 81       	ldd	r26, Z+4	; 0x04
    1bcc:	b5 81       	ldd	r27, Z+5	; 0x05
    1bce:	8c 19       	sub	r24, r12
    1bd0:	9d 09       	sbc	r25, r13
    1bd2:	ae 09       	sbc	r26, r14
    1bd4:	bf 09       	sbc	r27, r15
    1bd6:	18 16       	cp	r1, r24
    1bd8:	19 06       	cpc	r1, r25
    1bda:	1a 06       	cpc	r1, r26
    1bdc:	1b 06       	cpc	r1, r27
    1bde:	ec f1       	brlt	.+122    	; 0x1c5a <__vector_7+0x128>
    1be0:	8e e3       	ldi	r24, 0x3E	; 62
    1be2:	91 e0       	ldi	r25, 0x01	; 1
    1be4:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <dequeue>
    1be8:	60 e4       	ldi	r22, 0x40	; 64
    1bea:	71 e0       	ldi	r23, 0x01	; 1
    1bec:	0e 94 aa 0c 	call	0x1954	; 0x1954 <enqueueByDeadline>
    1bf0:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <timerQ>
    1bf4:	f0 91 3f 01 	lds	r31, 0x013F	; 0x80013f <timerQ+0x1>
    1bf8:	30 97       	sbiw	r30, 0x00	; 0
    1bfa:	39 f1       	breq	.+78     	; 0x1c4a <__vector_7+0x118>
    1bfc:	82 81       	ldd	r24, Z+2	; 0x02
    1bfe:	93 81       	ldd	r25, Z+3	; 0x03
    1c00:	a4 81       	ldd	r26, Z+4	; 0x04
    1c02:	b5 81       	ldd	r27, Z+5	; 0x05
    1c04:	8c 19       	sub	r24, r12
    1c06:	9d 09       	sbc	r25, r13
    1c08:	ae 09       	sbc	r26, r14
    1c0a:	bf 09       	sbc	r27, r15
    1c0c:	18 16       	cp	r1, r24
    1c0e:	19 06       	cpc	r1, r25
    1c10:	1a 06       	cpc	r1, r26
    1c12:	1b 06       	cpc	r1, r27
    1c14:	2c f7       	brge	.-54     	; 0x1be0 <__vector_7+0xae>
    1c16:	21 c0       	rjmp	.+66     	; 0x1c5a <__vector_7+0x128>
    1c18:	9c 01       	movw	r18, r24
    1c1a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1c1e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1c22:	84 1b       	sub	r24, r20
    1c24:	95 0b       	sbc	r25, r21
    1c26:	01 97       	sbiw	r24, 0x01	; 1
    1c28:	31 f4       	brne	.+12     	; 0x1c36 <__vector_7+0x104>
    1c2a:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1c2e:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1c32:	2f 5f       	subi	r18, 0xFF	; 255
    1c34:	3f 4f       	sbci	r19, 0xFF	; 255
    1c36:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1c3a:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1c3e:	ef e6       	ldi	r30, 0x6F	; 111
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	80 81       	ld	r24, Z
    1c44:	82 60       	ori	r24, 0x02	; 2
    1c46:	80 83       	st	Z, r24
    1c48:	05 c0       	rjmp	.+10     	; 0x1c54 <__vector_7+0x122>
    1c4a:	ef e6       	ldi	r30, 0x6F	; 111
    1c4c:	f0 e0       	ldi	r31, 0x00	; 0
    1c4e:	80 81       	ld	r24, Z
    1c50:	8d 7f       	andi	r24, 0xFD	; 253
    1c52:	80 83       	st	Z, r24
    1c54:	0e 94 d7 04 	call	0x9ae	; 0x9ae <schedule>
    1c58:	0c c0       	rjmp	.+24     	; 0x1c72 <__vector_7+0x140>
    1c5a:	82 81       	ldd	r24, Z+2	; 0x02
    1c5c:	93 81       	ldd	r25, Z+3	; 0x03
    1c5e:	a4 81       	ldd	r26, Z+4	; 0x04
    1c60:	b5 81       	ldd	r27, Z+5	; 0x05
    1c62:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <overflows>
    1c66:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <overflows+0x1>
    1c6a:	2a 17       	cp	r18, r26
    1c6c:	3b 07       	cpc	r19, r27
    1c6e:	69 f7       	brne	.-38     	; 0x1c4a <__vector_7+0x118>
    1c70:	d3 cf       	rjmp	.-90     	; 0x1c18 <__vector_7+0xe6>
    1c72:	ff 91       	pop	r31
    1c74:	ef 91       	pop	r30
    1c76:	bf 91       	pop	r27
    1c78:	af 91       	pop	r26
    1c7a:	9f 91       	pop	r25
    1c7c:	8f 91       	pop	r24
    1c7e:	7f 91       	pop	r23
    1c80:	6f 91       	pop	r22
    1c82:	5f 91       	pop	r21
    1c84:	4f 91       	pop	r20
    1c86:	3f 91       	pop	r19
    1c88:	2f 91       	pop	r18
    1c8a:	ff 90       	pop	r15
    1c8c:	ef 90       	pop	r14
    1c8e:	df 90       	pop	r13
    1c90:	cf 90       	pop	r12
    1c92:	0f 90       	pop	r0
    1c94:	0f be       	out	0x3f, r0	; 63
    1c96:	0f 90       	pop	r0
    1c98:	1f 90       	pop	r1
    1c9a:	18 95       	reti

00001c9c <async>:
    1c9c:	3f 92       	push	r3
    1c9e:	4f 92       	push	r4
    1ca0:	5f 92       	push	r5
    1ca2:	6f 92       	push	r6
    1ca4:	7f 92       	push	r7
    1ca6:	8f 92       	push	r8
    1ca8:	9f 92       	push	r9
    1caa:	af 92       	push	r10
    1cac:	bf 92       	push	r11
    1cae:	cf 92       	push	r12
    1cb0:	df 92       	push	r13
    1cb2:	ef 92       	push	r14
    1cb4:	ff 92       	push	r15
    1cb6:	0f 93       	push	r16
    1cb8:	1f 93       	push	r17
    1cba:	cf 93       	push	r28
    1cbc:	df 93       	push	r29
    1cbe:	2b 01       	movw	r4, r22
    1cc0:	3c 01       	movw	r6, r24
    1cc2:	49 01       	movw	r8, r18
    1cc4:	5a 01       	movw	r10, r20
    1cc6:	8f b7       	in	r24, 0x3f	; 63
    1cc8:	80 78       	andi	r24, 0x80	; 128
    1cca:	38 2e       	mov	r3, r24
    1ccc:	f8 94       	cli
    1cce:	82 e3       	ldi	r24, 0x32	; 50
    1cd0:	91 e0       	ldi	r25, 0x01	; 1
    1cd2:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <dequeue>
    1cd6:	ec 01       	movw	r28, r24
    1cd8:	1b 87       	std	Y+11, r17	; 0x0b
    1cda:	0a 87       	std	Y+10, r16	; 0x0a
    1cdc:	fd 86       	std	Y+13, r15	; 0x0d
    1cde:	ec 86       	std	Y+12, r14	; 0x0c
    1ce0:	df 86       	std	Y+15, r13	; 0x0f
    1ce2:	ce 86       	std	Y+14, r12	; 0x0e
    1ce4:	33 20       	and	r3, r3
    1ce6:	61 f0       	breq	.+24     	; 0x1d00 <async+0x64>
    1ce8:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <current>
    1cec:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <current+0x1>
    1cf0:	02 80       	ldd	r0, Z+2	; 0x02
    1cf2:	f3 81       	ldd	r31, Z+3	; 0x03
    1cf4:	e0 2d       	mov	r30, r0
    1cf6:	82 81       	ldd	r24, Z+2	; 0x02
    1cf8:	93 81       	ldd	r25, Z+3	; 0x03
    1cfa:	a4 81       	ldd	r26, Z+4	; 0x04
    1cfc:	b5 81       	ldd	r27, Z+5	; 0x05
    1cfe:	08 c0       	rjmp	.+16     	; 0x1d10 <async+0x74>
    1d00:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <timestamp>
    1d04:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <timestamp+0x1>
    1d08:	a0 91 3c 01 	lds	r26, 0x013C	; 0x80013c <timestamp+0x2>
    1d0c:	b0 91 3d 01 	lds	r27, 0x013D	; 0x80013d <timestamp+0x3>
    1d10:	48 0e       	add	r4, r24
    1d12:	59 1e       	adc	r5, r25
    1d14:	6a 1e       	adc	r6, r26
    1d16:	7b 1e       	adc	r7, r27
    1d18:	4a 82       	std	Y+2, r4	; 0x02
    1d1a:	5b 82       	std	Y+3, r5	; 0x03
    1d1c:	6c 82       	std	Y+4, r6	; 0x04
    1d1e:	7d 82       	std	Y+5, r7	; 0x05
    1d20:	18 14       	cp	r1, r8
    1d22:	19 04       	cpc	r1, r9
    1d24:	1a 04       	cpc	r1, r10
    1d26:	1b 04       	cpc	r1, r11
    1d28:	44 f0       	brlt	.+16     	; 0x1d3a <async+0x9e>
    1d2a:	0f 2e       	mov	r0, r31
    1d2c:	88 24       	eor	r8, r8
    1d2e:	8a 94       	dec	r8
    1d30:	98 2c       	mov	r9, r8
    1d32:	a8 2c       	mov	r10, r8
    1d34:	ff e7       	ldi	r31, 0x7F	; 127
    1d36:	bf 2e       	mov	r11, r31
    1d38:	f0 2d       	mov	r31, r0
    1d3a:	84 0c       	add	r8, r4
    1d3c:	95 1c       	adc	r9, r5
    1d3e:	a6 1c       	adc	r10, r6
    1d40:	b7 1c       	adc	r11, r7
    1d42:	8e 82       	std	Y+6, r8	; 0x06
    1d44:	9f 82       	std	Y+7, r9	; 0x07
    1d46:	a8 86       	std	Y+8, r10	; 0x08
    1d48:	b9 86       	std	Y+9, r11	; 0x09
    1d4a:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <overflows>
    1d4e:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <overflows+0x1>
    1d52:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1d56:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1d5a:	b0 99       	sbic	0x16, 0	; 22
    1d5c:	0e c0       	rjmp	.+28     	; 0x1d7a <async+0xde>
    1d5e:	09 2e       	mov	r0, r25
    1d60:	00 0c       	add	r0, r0
    1d62:	aa 0b       	sbc	r26, r26
    1d64:	bb 0b       	sbc	r27, r27
    1d66:	dc 01       	movw	r26, r24
    1d68:	99 27       	eor	r25, r25
    1d6a:	88 27       	eor	r24, r24
    1d6c:	60 e0       	ldi	r22, 0x00	; 0
    1d6e:	70 e0       	ldi	r23, 0x00	; 0
    1d70:	84 2b       	or	r24, r20
    1d72:	95 2b       	or	r25, r21
    1d74:	a6 2b       	or	r26, r22
    1d76:	b7 2b       	or	r27, r23
    1d78:	13 c0       	rjmp	.+38     	; 0x1da0 <async+0x104>
    1d7a:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1d7e:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1d82:	01 96       	adiw	r24, 0x01	; 1
    1d84:	09 2e       	mov	r0, r25
    1d86:	00 0c       	add	r0, r0
    1d88:	aa 0b       	sbc	r26, r26
    1d8a:	bb 0b       	sbc	r27, r27
    1d8c:	dc 01       	movw	r26, r24
    1d8e:	99 27       	eor	r25, r25
    1d90:	88 27       	eor	r24, r24
    1d92:	a9 01       	movw	r20, r18
    1d94:	60 e0       	ldi	r22, 0x00	; 0
    1d96:	70 e0       	ldi	r23, 0x00	; 0
    1d98:	84 2b       	or	r24, r20
    1d9a:	95 2b       	or	r25, r21
    1d9c:	a6 2b       	or	r26, r22
    1d9e:	b7 2b       	or	r27, r23
    1da0:	48 1a       	sub	r4, r24
    1da2:	59 0a       	sbc	r5, r25
    1da4:	6a 0a       	sbc	r6, r26
    1da6:	7b 0a       	sbc	r7, r27
    1da8:	14 14       	cp	r1, r4
    1daa:	15 04       	cpc	r1, r5
    1dac:	16 04       	cpc	r1, r6
    1dae:	17 04       	cpc	r1, r7
    1db0:	ac f5       	brge	.+106    	; 0x1e1c <async+0x180>
    1db2:	6e e3       	ldi	r22, 0x3E	; 62
    1db4:	71 e0       	ldi	r23, 0x01	; 1
    1db6:	ce 01       	movw	r24, r28
    1db8:	0e 94 ed 0c 	call	0x19da	; 0x19da <enqueueByBaseline>
    1dbc:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <timerQ>
    1dc0:	f0 91 3f 01 	lds	r31, 0x013F	; 0x80013f <timerQ+0x1>
    1dc4:	30 97       	sbiw	r30, 0x00	; 0
    1dc6:	21 f1       	breq	.+72     	; 0x1e10 <async+0x174>
    1dc8:	82 81       	ldd	r24, Z+2	; 0x02
    1dca:	93 81       	ldd	r25, Z+3	; 0x03
    1dcc:	a4 81       	ldd	r26, Z+4	; 0x04
    1dce:	b5 81       	ldd	r27, Z+5	; 0x05
    1dd0:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <overflows>
    1dd4:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <overflows+0x1>
    1dd8:	2a 17       	cp	r18, r26
    1dda:	3b 07       	cpc	r19, r27
    1ddc:	c9 f4       	brne	.+50     	; 0x1e10 <async+0x174>
    1dde:	9c 01       	movw	r18, r24
    1de0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1de4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1de8:	84 1b       	sub	r24, r20
    1dea:	95 0b       	sbc	r25, r21
    1dec:	01 97       	sbiw	r24, 0x01	; 1
    1dee:	31 f4       	brne	.+12     	; 0x1dfc <async+0x160>
    1df0:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1df4:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1df8:	2f 5f       	subi	r18, 0xFF	; 255
    1dfa:	3f 4f       	sbci	r19, 0xFF	; 255
    1dfc:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1e00:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1e04:	ef e6       	ldi	r30, 0x6F	; 111
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	80 81       	ld	r24, Z
    1e0a:	82 60       	ori	r24, 0x02	; 2
    1e0c:	80 83       	st	Z, r24
    1e0e:	41 c0       	rjmp	.+130    	; 0x1e92 <async+0x1f6>
    1e10:	ef e6       	ldi	r30, 0x6F	; 111
    1e12:	f0 e0       	ldi	r31, 0x00	; 0
    1e14:	80 81       	ld	r24, Z
    1e16:	8d 7f       	andi	r24, 0xFD	; 253
    1e18:	80 83       	st	Z, r24
    1e1a:	3b c0       	rjmp	.+118    	; 0x1e92 <async+0x1f6>
    1e1c:	60 e4       	ldi	r22, 0x40	; 64
    1e1e:	71 e0       	ldi	r23, 0x01	; 1
    1e20:	ce 01       	movw	r24, r28
    1e22:	0e 94 aa 0c 	call	0x1954	; 0x1954 <enqueueByDeadline>
    1e26:	33 20       	and	r3, r3
    1e28:	b9 f1       	breq	.+110    	; 0x1e98 <async+0x1fc>
    1e2a:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <threadPool>
    1e2e:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <threadPool+0x1>
    1e32:	00 97       	sbiw	r24, 0x00	; 0
    1e34:	81 f1       	breq	.+96     	; 0x1e96 <async+0x1fa>
    1e36:	e0 91 2e 01 	lds	r30, 0x012E	; 0x80012e <activeStack>
    1e3a:	f0 91 2f 01 	lds	r31, 0x012F	; 0x80012f <activeStack+0x1>
    1e3e:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <msgQ>
    1e42:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <msgQ+0x1>
    1e46:	02 81       	ldd	r16, Z+2	; 0x02
    1e48:	13 81       	ldd	r17, Z+3	; 0x03
    1e4a:	d9 01       	movw	r26, r18
    1e4c:	16 96       	adiw	r26, 0x06	; 6
    1e4e:	4d 91       	ld	r20, X+
    1e50:	5d 91       	ld	r21, X+
    1e52:	6d 91       	ld	r22, X+
    1e54:	7c 91       	ld	r23, X
    1e56:	19 97       	sbiw	r26, 0x09	; 9
    1e58:	d8 01       	movw	r26, r16
    1e5a:	16 96       	adiw	r26, 0x06	; 6
    1e5c:	0d 91       	ld	r16, X+
    1e5e:	1d 91       	ld	r17, X+
    1e60:	2d 91       	ld	r18, X+
    1e62:	3c 91       	ld	r19, X
    1e64:	19 97       	sbiw	r26, 0x09	; 9
    1e66:	40 1b       	sub	r20, r16
    1e68:	51 0b       	sbc	r21, r17
    1e6a:	62 0b       	sbc	r22, r18
    1e6c:	73 0b       	sbc	r23, r19
    1e6e:	9a f4       	brpl	.+38     	; 0x1e96 <async+0x1fa>
    1e70:	dc 01       	movw	r26, r24
    1e72:	2d 91       	ld	r18, X+
    1e74:	3c 91       	ld	r19, X
    1e76:	11 97       	sbiw	r26, 0x01	; 1
    1e78:	30 93 31 01 	sts	0x0131, r19	; 0x800131 <threadPool+0x1>
    1e7c:	20 93 30 01 	sts	0x0130, r18	; 0x800130 <threadPool>
    1e80:	ed 93       	st	X+, r30
    1e82:	fc 93       	st	X, r31
    1e84:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <activeStack+0x1>
    1e88:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <activeStack>
    1e8c:	0e 94 b7 04 	call	0x96e	; 0x96e <dispatch>
    1e90:	02 c0       	rjmp	.+4      	; 0x1e96 <async+0x1fa>
    1e92:	33 20       	and	r3, r3
    1e94:	09 f0       	breq	.+2      	; 0x1e98 <async+0x1fc>
    1e96:	78 94       	sei
    1e98:	ce 01       	movw	r24, r28
    1e9a:	df 91       	pop	r29
    1e9c:	cf 91       	pop	r28
    1e9e:	1f 91       	pop	r17
    1ea0:	0f 91       	pop	r16
    1ea2:	ff 90       	pop	r15
    1ea4:	ef 90       	pop	r14
    1ea6:	df 90       	pop	r13
    1ea8:	cf 90       	pop	r12
    1eaa:	bf 90       	pop	r11
    1eac:	af 90       	pop	r10
    1eae:	9f 90       	pop	r9
    1eb0:	8f 90       	pop	r8
    1eb2:	7f 90       	pop	r7
    1eb4:	6f 90       	pop	r6
    1eb6:	5f 90       	pop	r5
    1eb8:	4f 90       	pop	r4
    1eba:	3f 90       	pop	r3
    1ebc:	08 95       	ret

00001ebe <sync>:
    1ebe:	cf 92       	push	r12
    1ec0:	df 92       	push	r13
    1ec2:	ef 92       	push	r14
    1ec4:	ff 92       	push	r15
    1ec6:	0f 93       	push	r16
    1ec8:	1f 93       	push	r17
    1eca:	cf 93       	push	r28
    1ecc:	df 93       	push	r29
    1ece:	ec 01       	movw	r28, r24
    1ed0:	7b 01       	movw	r14, r22
    1ed2:	6a 01       	movw	r12, r20
    1ed4:	1f b7       	in	r17, 0x3f	; 63
    1ed6:	10 78       	andi	r17, 0x80	; 128
    1ed8:	f8 94       	cli
    1eda:	a8 81       	ld	r26, Y
    1edc:	b9 81       	ldd	r27, Y+1	; 0x01
    1ede:	10 97       	sbiw	r26, 0x00	; 0
    1ee0:	61 f1       	breq	.+88     	; 0x1f3a <sync+0x7c>
    1ee2:	14 96       	adiw	r26, 0x04	; 4
    1ee4:	ed 91       	ld	r30, X+
    1ee6:	fc 91       	ld	r31, X
    1ee8:	15 97       	sbiw	r26, 0x05	; 5
    1eea:	30 97       	sbiw	r30, 0x00	; 0
    1eec:	41 f0       	breq	.+16     	; 0x1efe <sync+0x40>
    1eee:	a0 81       	ld	r26, Z
    1ef0:	b1 81       	ldd	r27, Z+1	; 0x01
    1ef2:	14 96       	adiw	r26, 0x04	; 4
    1ef4:	ed 91       	ld	r30, X+
    1ef6:	fc 91       	ld	r31, X
    1ef8:	15 97       	sbiw	r26, 0x05	; 5
    1efa:	30 97       	sbiw	r30, 0x00	; 0
    1efc:	c1 f7       	brne	.-16     	; 0x1eee <sync+0x30>
    1efe:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <current>
    1f02:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <current+0x1>
    1f06:	2a 17       	cp	r18, r26
    1f08:	3b 07       	cpc	r19, r27
    1f0a:	21 f0       	breq	.+8      	; 0x1f14 <sync+0x56>
    1f0c:	11 23       	and	r17, r17
    1f0e:	09 f4       	brne	.+2      	; 0x1f12 <sync+0x54>
    1f10:	3d c0       	rjmp	.+122    	; 0x1f8c <sync+0xce>
    1f12:	07 c0       	rjmp	.+14     	; 0x1f22 <sync+0x64>
    1f14:	11 23       	and	r17, r17
    1f16:	09 f4       	brne	.+2      	; 0x1f1a <sync+0x5c>
    1f18:	3c c0       	rjmp	.+120    	; 0x1f92 <sync+0xd4>
    1f1a:	78 94       	sei
    1f1c:	8f ef       	ldi	r24, 0xFF	; 255
    1f1e:	9f ef       	ldi	r25, 0xFF	; 255
    1f20:	52 c0       	rjmp	.+164    	; 0x1fc6 <sync+0x108>
    1f22:	8a 81       	ldd	r24, Y+2	; 0x02
    1f24:	9b 81       	ldd	r25, Y+3	; 0x03
    1f26:	00 97       	sbiw	r24, 0x00	; 0
    1f28:	d1 f1       	breq	.+116    	; 0x1f9e <sync+0xe0>
    1f2a:	fc 01       	movw	r30, r24
    1f2c:	15 82       	std	Z+5, r1	; 0x05
    1f2e:	14 82       	std	Z+4, r1	; 0x04
    1f30:	36 c0       	rjmp	.+108    	; 0x1f9e <sync+0xe0>
    1f32:	78 94       	sei
    1f34:	80 e0       	ldi	r24, 0x00	; 0
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	46 c0       	rjmp	.+140    	; 0x1fc6 <sync+0x108>
    1f3a:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <current>
    1f3e:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <current+0x1>
    1f42:	99 83       	std	Y+1, r25	; 0x01
    1f44:	88 83       	st	Y, r24
    1f46:	11 23       	and	r17, r17
    1f48:	29 f0       	breq	.+10     	; 0x1f54 <sync+0x96>
    1f4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f4e:	01 97       	sbiw	r24, 0x01	; 1
    1f50:	09 f0       	breq	.+2      	; 0x1f54 <sync+0x96>
    1f52:	78 94       	sei
    1f54:	b6 01       	movw	r22, r12
    1f56:	ce 01       	movw	r24, r28
    1f58:	f7 01       	movw	r30, r14
    1f5a:	09 95       	icall
    1f5c:	f8 2e       	mov	r15, r24
    1f5e:	09 2f       	mov	r16, r25
    1f60:	8f b7       	in	r24, 0x3f	; 63
    1f62:	f8 94       	cli
    1f64:	19 82       	std	Y+1, r1	; 0x01
    1f66:	18 82       	st	Y, r1
    1f68:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f6c:	82 30       	cpi	r24, 0x02	; 2
    1f6e:	91 05       	cpc	r25, r1
    1f70:	38 f0       	brcs	.+14     	; 0x1f80 <sync+0xc2>
    1f72:	1b 82       	std	Y+3, r1	; 0x03
    1f74:	1a 82       	std	Y+2, r1	; 0x02
    1f76:	fc 01       	movw	r30, r24
    1f78:	15 82       	std	Z+5, r1	; 0x05
    1f7a:	14 82       	std	Z+4, r1	; 0x04
    1f7c:	0e 94 b7 04 	call	0x96e	; 0x96e <dispatch>
    1f80:	11 23       	and	r17, r17
    1f82:	51 f0       	breq	.+20     	; 0x1f98 <sync+0xda>
    1f84:	78 94       	sei
    1f86:	8f 2d       	mov	r24, r15
    1f88:	90 2f       	mov	r25, r16
    1f8a:	1d c0       	rjmp	.+58     	; 0x1fc6 <sync+0x108>
    1f8c:	8f ef       	ldi	r24, 0xFF	; 255
    1f8e:	9f ef       	ldi	r25, 0xFF	; 255
    1f90:	1a c0       	rjmp	.+52     	; 0x1fc6 <sync+0x108>
    1f92:	8f ef       	ldi	r24, 0xFF	; 255
    1f94:	9f ef       	ldi	r25, 0xFF	; 255
    1f96:	17 c0       	rjmp	.+46     	; 0x1fc6 <sync+0x108>
    1f98:	8f 2d       	mov	r24, r15
    1f9a:	90 2f       	mov	r25, r16
    1f9c:	14 c0       	rjmp	.+40     	; 0x1fc6 <sync+0x108>
    1f9e:	3b 83       	std	Y+3, r19	; 0x03
    1fa0:	2a 83       	std	Y+2, r18	; 0x02
    1fa2:	f9 01       	movw	r30, r18
    1fa4:	d5 83       	std	Z+5, r29	; 0x05
    1fa6:	c4 83       	std	Z+4, r28	; 0x04
    1fa8:	cd 01       	movw	r24, r26
    1faa:	0e 94 b7 04 	call	0x96e	; 0x96e <dispatch>
    1fae:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <current>
    1fb2:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <current+0x1>
    1fb6:	82 81       	ldd	r24, Z+2	; 0x02
    1fb8:	93 81       	ldd	r25, Z+3	; 0x03
    1fba:	89 2b       	or	r24, r25
    1fbc:	09 f4       	brne	.+2      	; 0x1fc0 <sync+0x102>
    1fbe:	b9 cf       	rjmp	.-142    	; 0x1f32 <sync+0x74>
    1fc0:	f9 83       	std	Y+1, r31	; 0x01
    1fc2:	e8 83       	st	Y, r30
    1fc4:	c2 cf       	rjmp	.-124    	; 0x1f4a <sync+0x8c>
    1fc6:	df 91       	pop	r29
    1fc8:	cf 91       	pop	r28
    1fca:	1f 91       	pop	r17
    1fcc:	0f 91       	pop	r16
    1fce:	ff 90       	pop	r15
    1fd0:	ef 90       	pop	r14
    1fd2:	df 90       	pop	r13
    1fd4:	cf 90       	pop	r12
    1fd6:	08 95       	ret

00001fd8 <run>:
    1fd8:	00 91 2c 01 	lds	r16, 0x012C	; 0x80012c <current>
    1fdc:	10 91 2d 01 	lds	r17, 0x012D	; 0x80012d <current+0x1>
    1fe0:	80 e4       	ldi	r24, 0x40	; 64
    1fe2:	91 e0       	ldi	r25, 0x01	; 1
    1fe4:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <dequeue>
    1fe8:	ec 01       	movw	r28, r24
    1fea:	d8 01       	movw	r26, r16
    1fec:	13 96       	adiw	r26, 0x03	; 3
    1fee:	9c 93       	st	X, r25
    1ff0:	8e 93       	st	-X, r24
    1ff2:	12 97       	sbiw	r26, 0x02	; 2
    1ff4:	78 94       	sei
    1ff6:	4e 85       	ldd	r20, Y+14	; 0x0e
    1ff8:	5f 85       	ldd	r21, Y+15	; 0x0f
    1ffa:	6c 85       	ldd	r22, Y+12	; 0x0c
    1ffc:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ffe:	8a 85       	ldd	r24, Y+10	; 0x0a
    2000:	9b 85       	ldd	r25, Y+11	; 0x0b
    2002:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <sync>
    2006:	8f b7       	in	r24, 0x3f	; 63
    2008:	f8 94       	cli
    200a:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <msgPool>
    200e:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <msgPool+0x1>
    2012:	99 83       	std	Y+1, r25	; 0x01
    2014:	88 83       	st	Y, r24
    2016:	d0 93 33 01 	sts	0x0133, r29	; 0x800133 <msgPool+0x1>
    201a:	c0 93 32 01 	sts	0x0132, r28	; 0x800132 <msgPool>
    201e:	e0 91 2e 01 	lds	r30, 0x012E	; 0x80012e <activeStack>
    2022:	f0 91 2f 01 	lds	r31, 0x012F	; 0x80012f <activeStack+0x1>
    2026:	00 81       	ld	r16, Z
    2028:	11 81       	ldd	r17, Z+1	; 0x01
    202a:	e8 01       	movw	r28, r16
    202c:	2a 81       	ldd	r18, Y+2	; 0x02
    202e:	3b 81       	ldd	r19, Y+3	; 0x03
    2030:	a0 91 40 01 	lds	r26, 0x0140	; 0x800140 <msgQ>
    2034:	b0 91 41 01 	lds	r27, 0x0141	; 0x800141 <msgQ+0x1>
    2038:	10 97       	sbiw	r26, 0x00	; 0
    203a:	c1 f0       	breq	.+48     	; 0x206c <run+0x94>
    203c:	21 15       	cp	r18, r1
    203e:	31 05       	cpc	r19, r1
    2040:	59 f2       	breq	.-106    	; 0x1fd8 <run>
    2042:	16 96       	adiw	r26, 0x06	; 6
    2044:	8d 91       	ld	r24, X+
    2046:	9d 91       	ld	r25, X+
    2048:	0d 90       	ld	r0, X+
    204a:	bc 91       	ld	r27, X
    204c:	a0 2d       	mov	r26, r0
    204e:	e9 01       	movw	r28, r18
    2050:	4e 81       	ldd	r20, Y+6	; 0x06
    2052:	5f 81       	ldd	r21, Y+7	; 0x07
    2054:	68 85       	ldd	r22, Y+8	; 0x08
    2056:	79 85       	ldd	r23, Y+9	; 0x09
    2058:	84 1b       	sub	r24, r20
    205a:	95 0b       	sbc	r25, r21
    205c:	a6 0b       	sbc	r26, r22
    205e:	b7 0b       	sbc	r27, r23
    2060:	18 16       	cp	r1, r24
    2062:	19 06       	cpc	r1, r25
    2064:	1a 06       	cpc	r1, r26
    2066:	1b 06       	cpc	r1, r27
    2068:	0c f0       	brlt	.+2      	; 0x206c <run+0x94>
    206a:	b6 cf       	rjmp	.-148    	; 0x1fd8 <run>
    206c:	10 93 2f 01 	sts	0x012F, r17	; 0x80012f <activeStack+0x1>
    2070:	00 93 2e 01 	sts	0x012E, r16	; 0x80012e <activeStack>
    2074:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <threadPool>
    2078:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <threadPool+0x1>
    207c:	91 83       	std	Z+1, r25	; 0x01
    207e:	80 83       	st	Z, r24
    2080:	f0 93 31 01 	sts	0x0131, r31	; 0x800131 <threadPool+0x1>
    2084:	e0 93 30 01 	sts	0x0130, r30	; 0x800130 <threadPool>
    2088:	a0 91 2e 01 	lds	r26, 0x012E	; 0x80012e <activeStack>
    208c:	b0 91 2f 01 	lds	r27, 0x012F	; 0x80012f <activeStack+0x1>
    2090:	14 96       	adiw	r26, 0x04	; 4
    2092:	ed 91       	ld	r30, X+
    2094:	fc 91       	ld	r31, X
    2096:	15 97       	sbiw	r26, 0x05	; 5
    2098:	30 97       	sbiw	r30, 0x00	; 0
    209a:	41 f0       	breq	.+16     	; 0x20ac <run+0xd4>
    209c:	a0 81       	ld	r26, Z
    209e:	b1 81       	ldd	r27, Z+1	; 0x01
    20a0:	14 96       	adiw	r26, 0x04	; 4
    20a2:	ed 91       	ld	r30, X+
    20a4:	fc 91       	ld	r31, X
    20a6:	15 97       	sbiw	r26, 0x05	; 5
    20a8:	30 97       	sbiw	r30, 0x00	; 0
    20aa:	c1 f7       	brne	.-16     	; 0x209c <run+0xc4>
    20ac:	cd 01       	movw	r24, r26
    20ae:	0e 94 b7 04 	call	0x96e	; 0x96e <dispatch>
    20b2:	92 cf       	rjmp	.-220    	; 0x1fd8 <run>

000020b4 <ABORT>:
    20b4:	1f 93       	push	r17
    20b6:	cf 93       	push	r28
    20b8:	df 93       	push	r29
    20ba:	ec 01       	movw	r28, r24
    20bc:	1f b7       	in	r17, 0x3f	; 63
    20be:	10 78       	andi	r17, 0x80	; 128
    20c0:	f8 94       	cli
    20c2:	6e e3       	ldi	r22, 0x3E	; 62
    20c4:	71 e0       	ldi	r23, 0x01	; 1
    20c6:	0e 94 20 04 	call	0x840	; 0x840 <remove>
    20ca:	89 2b       	or	r24, r25
    20cc:	39 f4       	brne	.+14     	; 0x20dc <ABORT+0x28>
    20ce:	60 e4       	ldi	r22, 0x40	; 64
    20d0:	71 e0       	ldi	r23, 0x01	; 1
    20d2:	ce 01       	movw	r24, r28
    20d4:	0e 94 20 04 	call	0x840	; 0x840 <remove>
    20d8:	89 2b       	or	r24, r25
    20da:	59 f0       	breq	.+22     	; 0x20f2 <ABORT+0x3e>
    20dc:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <msgPool>
    20e0:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <msgPool+0x1>
    20e4:	99 83       	std	Y+1, r25	; 0x01
    20e6:	88 83       	st	Y, r24
    20e8:	d0 93 33 01 	sts	0x0133, r29	; 0x800133 <msgPool+0x1>
    20ec:	c0 93 32 01 	sts	0x0132, r28	; 0x800132 <msgPool>
    20f0:	2b c0       	rjmp	.+86     	; 0x2148 <ABORT+0x94>
    20f2:	e0 91 2e 01 	lds	r30, 0x012E	; 0x80012e <activeStack>
    20f6:	f0 91 2f 01 	lds	r31, 0x012F	; 0x80012f <activeStack+0x1>
    20fa:	30 97       	sbiw	r30, 0x00	; 0
    20fc:	29 f1       	breq	.+74     	; 0x2148 <ABORT+0x94>
    20fe:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <current>
    2102:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <current+0x1>
    2106:	2e 17       	cp	r18, r30
    2108:	3f 07       	cpc	r19, r31
    210a:	c9 f0       	breq	.+50     	; 0x213e <ABORT+0x8a>
    210c:	82 81       	ldd	r24, Z+2	; 0x02
    210e:	93 81       	ldd	r25, Z+3	; 0x03
    2110:	c8 17       	cp	r28, r24
    2112:	d9 07       	cpc	r29, r25
    2114:	a1 f4       	brne	.+40     	; 0x213e <ABORT+0x8a>
    2116:	44 81       	ldd	r20, Z+4	; 0x04
    2118:	55 81       	ldd	r21, Z+5	; 0x05
    211a:	8a 85       	ldd	r24, Y+10	; 0x0a
    211c:	9b 85       	ldd	r25, Y+11	; 0x0b
    211e:	48 17       	cp	r20, r24
    2120:	59 07       	cpc	r21, r25
    2122:	69 f4       	brne	.+26     	; 0x213e <ABORT+0x8a>
    2124:	13 82       	std	Z+3, r1	; 0x03
    2126:	12 82       	std	Z+2, r1	; 0x02
    2128:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <msgPool>
    212c:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <msgPool+0x1>
    2130:	99 83       	std	Y+1, r25	; 0x01
    2132:	88 83       	st	Y, r24
    2134:	d0 93 33 01 	sts	0x0133, r29	; 0x800133 <msgPool+0x1>
    2138:	c0 93 32 01 	sts	0x0132, r28	; 0x800132 <msgPool>
    213c:	05 c0       	rjmp	.+10     	; 0x2148 <ABORT+0x94>
    213e:	01 90       	ld	r0, Z+
    2140:	f0 81       	ld	r31, Z
    2142:	e0 2d       	mov	r30, r0
    2144:	30 97       	sbiw	r30, 0x00	; 0
    2146:	f9 f6       	brne	.-66     	; 0x2106 <ABORT+0x52>
    2148:	11 23       	and	r17, r17
    214a:	09 f0       	breq	.+2      	; 0x214e <ABORT+0x9a>
    214c:	78 94       	sei
    214e:	df 91       	pop	r29
    2150:	cf 91       	pop	r28
    2152:	1f 91       	pop	r17
    2154:	08 95       	ret

00002156 <install>:
    2156:	42 31       	cpi	r20, 0x12	; 18
    2158:	b8 f4       	brcc	.+46     	; 0x2188 <install+0x32>
    215a:	2f b7       	in	r18, 0x3f	; 63
    215c:	f8 94       	cli
    215e:	50 e0       	ldi	r21, 0x00	; 0
    2160:	44 0f       	add	r20, r20
    2162:	55 1f       	adc	r21, r21
    2164:	fa 01       	movw	r30, r20
    2166:	ee 5b       	subi	r30, 0xBE	; 190
    2168:	fe 4f       	sbci	r31, 0xFE	; 254
    216a:	91 83       	std	Z+1, r25	; 0x01
    216c:	80 83       	st	Z, r24
    216e:	fa 01       	movw	r30, r20
    2170:	e6 52       	subi	r30, 0x26	; 38
    2172:	fe 4f       	sbci	r31, 0xFE	; 254
    2174:	71 83       	std	Z+1, r23	; 0x01
    2176:	60 83       	st	Z, r22
    2178:	41 e0       	ldi	r20, 0x01	; 1
    217a:	50 e0       	ldi	r21, 0x00	; 0
    217c:	fc 01       	movw	r30, r24
    217e:	53 83       	std	Z+3, r21	; 0x03
    2180:	42 83       	std	Z+2, r20	; 0x02
    2182:	22 23       	and	r18, r18
    2184:	0c f4       	brge	.+2      	; 0x2188 <install+0x32>
    2186:	78 94       	sei
    2188:	08 95       	ret

0000218a <tinytimber>:
    218a:	8c 01       	movw	r16, r24
    218c:	7b 01       	movw	r14, r22
    218e:	6a 01       	movw	r12, r20
    2190:	8f b7       	in	r24, 0x3f	; 63
    2192:	f8 94       	cli
    2194:	0e 94 4c 04 	call	0x898	; 0x898 <initialize>
    2198:	78 94       	sei
    219a:	e1 14       	cp	r14, r1
    219c:	f1 04       	cpc	r15, r1
    219e:	41 f0       	breq	.+16     	; 0x21b0 <tinytimber+0x26>
    21a0:	20 e0       	ldi	r18, 0x00	; 0
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	a9 01       	movw	r20, r18
    21a6:	60 e0       	ldi	r22, 0x00	; 0
    21a8:	70 e0       	ldi	r23, 0x00	; 0
    21aa:	cb 01       	movw	r24, r22
    21ac:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <async>
    21b0:	8f b7       	in	r24, 0x3f	; 63
    21b2:	f8 94       	cli
    21b4:	0e 94 d7 04 	call	0x9ae	; 0x9ae <schedule>
    21b8:	78 94       	sei
    21ba:	81 e0       	ldi	r24, 0x01	; 1
    21bc:	83 bf       	out	0x33, r24	; 51
    21be:	88 95       	sleep
    21c0:	fd cf       	rjmp	.-6      	; 0x21bc <tinytimber+0x32>

000021c2 <__divmodhi4>:
    21c2:	97 fb       	bst	r25, 7
    21c4:	07 2e       	mov	r0, r23
    21c6:	16 f4       	brtc	.+4      	; 0x21cc <__divmodhi4+0xa>
    21c8:	00 94       	com	r0
    21ca:	07 d0       	rcall	.+14     	; 0x21da <__divmodhi4_neg1>
    21cc:	77 fd       	sbrc	r23, 7
    21ce:	09 d0       	rcall	.+18     	; 0x21e2 <__divmodhi4_neg2>
    21d0:	0e 94 14 11 	call	0x2228	; 0x2228 <__udivmodhi4>
    21d4:	07 fc       	sbrc	r0, 7
    21d6:	05 d0       	rcall	.+10     	; 0x21e2 <__divmodhi4_neg2>
    21d8:	3e f4       	brtc	.+14     	; 0x21e8 <__divmodhi4_exit>

000021da <__divmodhi4_neg1>:
    21da:	90 95       	com	r25
    21dc:	81 95       	neg	r24
    21de:	9f 4f       	sbci	r25, 0xFF	; 255
    21e0:	08 95       	ret

000021e2 <__divmodhi4_neg2>:
    21e2:	70 95       	com	r23
    21e4:	61 95       	neg	r22
    21e6:	7f 4f       	sbci	r23, 0xFF	; 255

000021e8 <__divmodhi4_exit>:
    21e8:	08 95       	ret

000021ea <__divmodsi4>:
    21ea:	05 2e       	mov	r0, r21
    21ec:	97 fb       	bst	r25, 7
    21ee:	1e f4       	brtc	.+6      	; 0x21f6 <__divmodsi4+0xc>
    21f0:	00 94       	com	r0
    21f2:	0e 94 0c 11 	call	0x2218	; 0x2218 <__negsi2>
    21f6:	57 fd       	sbrc	r21, 7
    21f8:	07 d0       	rcall	.+14     	; 0x2208 <__divmodsi4_neg2>
    21fa:	0e 94 28 11 	call	0x2250	; 0x2250 <__udivmodsi4>
    21fe:	07 fc       	sbrc	r0, 7
    2200:	03 d0       	rcall	.+6      	; 0x2208 <__divmodsi4_neg2>
    2202:	4e f4       	brtc	.+18     	; 0x2216 <__divmodsi4_exit>
    2204:	0c 94 0c 11 	jmp	0x2218	; 0x2218 <__negsi2>

00002208 <__divmodsi4_neg2>:
    2208:	50 95       	com	r21
    220a:	40 95       	com	r20
    220c:	30 95       	com	r19
    220e:	21 95       	neg	r18
    2210:	3f 4f       	sbci	r19, 0xFF	; 255
    2212:	4f 4f       	sbci	r20, 0xFF	; 255
    2214:	5f 4f       	sbci	r21, 0xFF	; 255

00002216 <__divmodsi4_exit>:
    2216:	08 95       	ret

00002218 <__negsi2>:
    2218:	90 95       	com	r25
    221a:	80 95       	com	r24
    221c:	70 95       	com	r23
    221e:	61 95       	neg	r22
    2220:	7f 4f       	sbci	r23, 0xFF	; 255
    2222:	8f 4f       	sbci	r24, 0xFF	; 255
    2224:	9f 4f       	sbci	r25, 0xFF	; 255
    2226:	08 95       	ret

00002228 <__udivmodhi4>:
    2228:	aa 1b       	sub	r26, r26
    222a:	bb 1b       	sub	r27, r27
    222c:	51 e1       	ldi	r21, 0x11	; 17
    222e:	07 c0       	rjmp	.+14     	; 0x223e <__udivmodhi4_ep>

00002230 <__udivmodhi4_loop>:
    2230:	aa 1f       	adc	r26, r26
    2232:	bb 1f       	adc	r27, r27
    2234:	a6 17       	cp	r26, r22
    2236:	b7 07       	cpc	r27, r23
    2238:	10 f0       	brcs	.+4      	; 0x223e <__udivmodhi4_ep>
    223a:	a6 1b       	sub	r26, r22
    223c:	b7 0b       	sbc	r27, r23

0000223e <__udivmodhi4_ep>:
    223e:	88 1f       	adc	r24, r24
    2240:	99 1f       	adc	r25, r25
    2242:	5a 95       	dec	r21
    2244:	a9 f7       	brne	.-22     	; 0x2230 <__udivmodhi4_loop>
    2246:	80 95       	com	r24
    2248:	90 95       	com	r25
    224a:	bc 01       	movw	r22, r24
    224c:	cd 01       	movw	r24, r26
    224e:	08 95       	ret

00002250 <__udivmodsi4>:
    2250:	a1 e2       	ldi	r26, 0x21	; 33
    2252:	1a 2e       	mov	r1, r26
    2254:	aa 1b       	sub	r26, r26
    2256:	bb 1b       	sub	r27, r27
    2258:	fd 01       	movw	r30, r26
    225a:	0d c0       	rjmp	.+26     	; 0x2276 <__udivmodsi4_ep>

0000225c <__udivmodsi4_loop>:
    225c:	aa 1f       	adc	r26, r26
    225e:	bb 1f       	adc	r27, r27
    2260:	ee 1f       	adc	r30, r30
    2262:	ff 1f       	adc	r31, r31
    2264:	a2 17       	cp	r26, r18
    2266:	b3 07       	cpc	r27, r19
    2268:	e4 07       	cpc	r30, r20
    226a:	f5 07       	cpc	r31, r21
    226c:	20 f0       	brcs	.+8      	; 0x2276 <__udivmodsi4_ep>
    226e:	a2 1b       	sub	r26, r18
    2270:	b3 0b       	sbc	r27, r19
    2272:	e4 0b       	sbc	r30, r20
    2274:	f5 0b       	sbc	r31, r21

00002276 <__udivmodsi4_ep>:
    2276:	66 1f       	adc	r22, r22
    2278:	77 1f       	adc	r23, r23
    227a:	88 1f       	adc	r24, r24
    227c:	99 1f       	adc	r25, r25
    227e:	1a 94       	dec	r1
    2280:	69 f7       	brne	.-38     	; 0x225c <__udivmodsi4_loop>
    2282:	60 95       	com	r22
    2284:	70 95       	com	r23
    2286:	80 95       	com	r24
    2288:	90 95       	com	r25
    228a:	9b 01       	movw	r18, r22
    228c:	ac 01       	movw	r20, r24
    228e:	bd 01       	movw	r22, r26
    2290:	cf 01       	movw	r24, r30
    2292:	08 95       	ret

00002294 <setjmp>:
    2294:	dc 01       	movw	r26, r24
    2296:	2d 92       	st	X+, r2
    2298:	3d 92       	st	X+, r3
    229a:	4d 92       	st	X+, r4
    229c:	5d 92       	st	X+, r5
    229e:	6d 92       	st	X+, r6
    22a0:	7d 92       	st	X+, r7
    22a2:	8d 92       	st	X+, r8
    22a4:	9d 92       	st	X+, r9
    22a6:	ad 92       	st	X+, r10
    22a8:	bd 92       	st	X+, r11
    22aa:	cd 92       	st	X+, r12
    22ac:	dd 92       	st	X+, r13
    22ae:	ed 92       	st	X+, r14
    22b0:	fd 92       	st	X+, r15
    22b2:	0d 93       	st	X+, r16
    22b4:	1d 93       	st	X+, r17
    22b6:	cd 93       	st	X+, r28
    22b8:	dd 93       	st	X+, r29
    22ba:	ff 91       	pop	r31
    22bc:	ef 91       	pop	r30
    22be:	8d b7       	in	r24, 0x3d	; 61
    22c0:	8d 93       	st	X+, r24
    22c2:	8e b7       	in	r24, 0x3e	; 62
    22c4:	8d 93       	st	X+, r24
    22c6:	8f b7       	in	r24, 0x3f	; 63
    22c8:	8d 93       	st	X+, r24
    22ca:	ed 93       	st	X+, r30
    22cc:	fd 93       	st	X+, r31
    22ce:	88 27       	eor	r24, r24
    22d0:	99 27       	eor	r25, r25
    22d2:	09 94       	ijmp

000022d4 <longjmp>:
    22d4:	dc 01       	movw	r26, r24
    22d6:	cb 01       	movw	r24, r22
    22d8:	81 30       	cpi	r24, 0x01	; 1
    22da:	91 05       	cpc	r25, r1
    22dc:	81 1d       	adc	r24, r1
    22de:	2d 90       	ld	r2, X+
    22e0:	3d 90       	ld	r3, X+
    22e2:	4d 90       	ld	r4, X+
    22e4:	5d 90       	ld	r5, X+
    22e6:	6d 90       	ld	r6, X+
    22e8:	7d 90       	ld	r7, X+
    22ea:	8d 90       	ld	r8, X+
    22ec:	9d 90       	ld	r9, X+
    22ee:	ad 90       	ld	r10, X+
    22f0:	bd 90       	ld	r11, X+
    22f2:	cd 90       	ld	r12, X+
    22f4:	dd 90       	ld	r13, X+
    22f6:	ed 90       	ld	r14, X+
    22f8:	fd 90       	ld	r15, X+
    22fa:	0d 91       	ld	r16, X+
    22fc:	1d 91       	ld	r17, X+
    22fe:	cd 91       	ld	r28, X+
    2300:	dd 91       	ld	r29, X+
    2302:	ed 91       	ld	r30, X+
    2304:	fd 91       	ld	r31, X+
    2306:	0d 90       	ld	r0, X+
    2308:	f8 94       	cli
    230a:	fe bf       	out	0x3e, r31	; 62
    230c:	0f be       	out	0x3f, r0	; 63
    230e:	ed bf       	out	0x3d, r30	; 61
    2310:	ed 91       	ld	r30, X+
    2312:	fd 91       	ld	r31, X+
    2314:	09 94       	ijmp

00002316 <_exit>:
    2316:	f8 94       	cli

00002318 <__stop_program>:
    2318:	ff cf       	rjmp	.-2      	; 0x2318 <__stop_program>
