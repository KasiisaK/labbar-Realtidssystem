
lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000084  00800100  00001f90  00002024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f90  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000035b  00800184  00800184  000020a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000020a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000020d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000250  00000000  00000000  00002118  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a26  00000000  00000000  00002368  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000107c  00000000  00000000  00004d8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001593  00000000  00000000  00005e0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bb8  00000000  00000000  000073a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009eb  00000000  00000000  00007f58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002761  00000000  00000000  00008943  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000200  00000000  00000000  0000b0a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 c0 03 	jmp	0x780	; 0x780 <__vector_1>
       8:	0c 94 2c 04 	jmp	0x858	; 0x858 <__vector_2>
       c:	0c 94 98 04 	jmp	0x930	; 0x930 <__vector_3>
      10:	0c 94 04 05 	jmp	0xa08	; 0xa08 <__vector_4>
      14:	0c 94 70 05 	jmp	0xae0	; 0xae0 <__vector_5>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 47 0c 	jmp	0x188e	; 0x188e <__vector_7>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 f5 0b 	jmp	0x17ea	; 0x17ea <__vector_9>
      28:	0c 94 dc 05 	jmp	0xbb8	; 0xbb8 <__vector_10>
      2c:	0c 94 48 06 	jmp	0xc90	; 0xc90 <__vector_11>
      30:	0c 94 b4 06 	jmp	0xd68	; 0xd68 <__vector_12>
      34:	0c 94 20 07 	jmp	0xe40	; 0xe40 <__vector_13>
      38:	0c 94 8c 07 	jmp	0xf18	; 0xf18 <__vector_14>
      3c:	0c 94 f8 07 	jmp	0xff0	; 0xff0 <__vector_15>
      40:	0c 94 64 08 	jmp	0x10c8	; 0x10c8 <__vector_16>
      44:	0c 94 d0 08 	jmp	0x11a0	; 0x11a0 <__vector_17>
      48:	0c 94 3c 09 	jmp	0x1278	; 0x1278 <__vector_18>
      4c:	0c 94 a8 09 	jmp	0x1350	; 0x1350 <__vector_19>
      50:	0c 94 14 0a 	jmp	0x1428	; 0x1428 <__vector_20>
      54:	0c 94 80 0a 	jmp	0x1500	; 0x1500 <__vector_21>
      58:	0c 94 ec 0a 	jmp	0x15d8	; 0x15d8 <__vector_22>
      5c:	8c 00       	.word	0x008c	; ????
      5e:	6e 00       	.word	0x006e	; ????
      60:	71 00       	.word	0x0071	; ????
      62:	74 00       	.word	0x0074	; ????
      64:	77 00       	.word	0x0077	; ????
      66:	7a 00       	.word	0x007a	; ????
      68:	7d 00       	.word	0x007d	; ????
      6a:	80 00       	.word	0x0080	; ????
      6c:	83 00       	.word	0x0083	; ????
      6e:	86 00       	.word	0x0086	; ????

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	11 e0       	ldi	r17, 0x01	; 1
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	e0 e9       	ldi	r30, 0x90	; 144
      84:	ff e1       	ldi	r31, 0x1F	; 31
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	a4 38       	cpi	r26, 0x84	; 132
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	24 e0       	ldi	r18, 0x04	; 4
      94:	a4 e8       	ldi	r26, 0x84	; 132
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	af 3d       	cpi	r26, 0xDF	; 223
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 c7 02 	call	0x58e	; 0x58e <main>
      a6:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <LCD_init>:
#include "PulseGen.h"
#include "TinyTimber.h"

void LCD_init() {
	// LCD(Contrast Control Register), LCD(Display Configuration)(000): 300 s, LCD(Contrast Control)(1111): 3.35 V
	LCDCCR = (0 << LCDDC0) | (0 << LCDDC1) | (0 << LCDDC2) | (1 << LCDCC0) | (1 << LCDCC1) | (1 << LCDCC2) | (1 << LCDCC3);
      ae:	8f e0       	ldi	r24, 0x0F	; 15
      b0:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__DATA_REGION_ORIGIN__+0x87>
	// LCDCS: asynchronous clock, LCDMUX(11): D=1/4, B=1/3, LCD(Port Mask): 25 segments
	LCDCRB = (1 << LCDCS) | (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM2) | (1 << LCDPM1) | (1 << LCDPM0);
      b4:	87 eb       	ldi	r24, 0xB7	; 183
      b6:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
	// LCD(Clock Divide)(111): (D=8) 32Hz
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);
      ba:	87 e0       	ldi	r24, 0x07	; 7
      bc:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__DATA_REGION_ORIGIN__+0x86>
	// LCD(Control and Status Register A), LCD(Enable): True, LCD(Low Power Waveform): True, (no frame interrupt, no blanking)
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
      c0:	80 ec       	ldi	r24, 0xC0	; 192
      c2:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
      c6:	08 95       	ret

000000c8 <getSegmentForChar>:
int none[] = {0b0000, 0b0000, 0b0000, 0b0000};

// Returns wall of data based on char input ('0' = 48 (char))
int* getSegmentForChar(char ch) {

	switch (ch) {
      c8:	90 e0       	ldi	r25, 0x00	; 0
      ca:	fc 01       	movw	r30, r24
      cc:	f0 97       	sbiw	r30, 0x30	; 48
      ce:	ea 30       	cpi	r30, 0x0A	; 10
      d0:	f1 05       	cpc	r31, r1
      d2:	f8 f4       	brcc	.+62     	; 0x112 <getSegmentForChar+0x4a>
      d4:	e2 5d       	subi	r30, 0xD2	; 210
      d6:	ff 4f       	sbci	r31, 0xFF	; 255
      d8:	0c 94 5d 0f 	jmp	0x1eba	; 0x1eba <__tablejump2__>
		case '0': return zero;
		case '1': return one;
      dc:	80 e4       	ldi	r24, 0x40	; 64
      de:	91 e0       	ldi	r25, 0x01	; 1
      e0:	08 95       	ret
		case '2': return two;
      e2:	88 e3       	ldi	r24, 0x38	; 56
      e4:	91 e0       	ldi	r25, 0x01	; 1
      e6:	08 95       	ret
		case '3': return three;
      e8:	80 e3       	ldi	r24, 0x30	; 48
      ea:	91 e0       	ldi	r25, 0x01	; 1
      ec:	08 95       	ret
		case '4': return four;
      ee:	88 e2       	ldi	r24, 0x28	; 40
      f0:	91 e0       	ldi	r25, 0x01	; 1
      f2:	08 95       	ret
		case '5': return five;
      f4:	80 e2       	ldi	r24, 0x20	; 32
      f6:	91 e0       	ldi	r25, 0x01	; 1
      f8:	08 95       	ret
		case '6': return six;
      fa:	88 e1       	ldi	r24, 0x18	; 24
      fc:	91 e0       	ldi	r25, 0x01	; 1
      fe:	08 95       	ret
		case '7': return seven;
     100:	80 e1       	ldi	r24, 0x10	; 16
     102:	91 e0       	ldi	r25, 0x01	; 1
     104:	08 95       	ret
		case '8': return eight;
     106:	88 e0       	ldi	r24, 0x08	; 8
     108:	91 e0       	ldi	r25, 0x01	; 1
     10a:	08 95       	ret
		case '9': return nine;
     10c:	80 e0       	ldi	r24, 0x00	; 0
     10e:	91 e0       	ldi	r25, 0x01	; 1
     110:	08 95       	ret
		default:  return none;
     112:	84 e8       	ldi	r24, 0x84	; 132
     114:	91 e0       	ldi	r25, 0x01	; 1
     116:	08 95       	ret

// Returns wall of data based on char input ('0' = 48 (char))
int* getSegmentForChar(char ch) {

	switch (ch) {
		case '0': return zero;
     118:	88 e4       	ldi	r24, 0x48	; 72
     11a:	91 e0       	ldi	r25, 0x01	; 1
		case '7': return seven;
		case '8': return eight;
		case '9': return nine;
		default:  return none;
	}
}
     11c:	08 95       	ret

0000011e <writeChar>:

// Write a char ch at position pos
void writeChar(char ch, uint8_t pos) {
     11e:	cf 93       	push	r28
	// Check if outside range
	if (pos > 5 || pos < 0) return;	
     120:	66 30       	cpi	r22, 0x06	; 6
     122:	08 f0       	brcs	.+2      	; 0x126 <writeChar+0x8>
     124:	e4 c0       	rjmp	.+456    	; 0x2ee <writeChar+0x1d0>
     126:	c6 2f       	mov	r28, r22

	// Get correct char data
	int* segment = getSegmentForChar(ch);
     128:	0e 94 64 00 	call	0xc8	; 0xc8 <getSegmentForChar>
     12c:	fc 01       	movw	r30, r24
	
	// Chose position
	switch (pos) {
     12e:	c2 30       	cpi	r28, 0x02	; 2
     130:	09 f4       	brne	.+2      	; 0x134 <writeChar+0x16>
     132:	67 c0       	rjmp	.+206    	; 0x202 <writeChar+0xe4>
     134:	28 f4       	brcc	.+10     	; 0x140 <writeChar+0x22>
     136:	cc 23       	and	r28, r28
     138:	51 f0       	breq	.+20     	; 0x14e <writeChar+0x30>
     13a:	c1 30       	cpi	r28, 0x01	; 1
     13c:	29 f1       	breq	.+74     	; 0x188 <writeChar+0x6a>
     13e:	d7 c0       	rjmp	.+430    	; 0x2ee <writeChar+0x1d0>
     140:	c3 30       	cpi	r28, 0x03	; 3
     142:	09 f4       	brne	.+2      	; 0x146 <writeChar+0x28>
     144:	7b c0       	rjmp	.+246    	; 0x23c <writeChar+0x11e>
     146:	c4 30       	cpi	r28, 0x04	; 4
     148:	09 f4       	brne	.+2      	; 0x14c <writeChar+0x2e>
     14a:	b5 c0       	rjmp	.+362    	; 0x2b6 <writeChar+0x198>
     14c:	d0 c0       	rjmp	.+416    	; 0x2ee <writeChar+0x1d0>
		case 0:
			// Segment start at 0, 5, 10, 15, higher 4 bits.
			// (LCDDR0 & 0xF0) clears the segment before writing 
			LCDDR0 = (LCDDR0 & 0xF0) | segment[0];
     14e:	ac ee       	ldi	r26, 0xEC	; 236
     150:	b0 e0       	ldi	r27, 0x00	; 0
     152:	8c 91       	ld	r24, X
     154:	80 7f       	andi	r24, 0xF0	; 240
     156:	90 81       	ld	r25, Z
     158:	89 2b       	or	r24, r25
     15a:	8c 93       	st	X, r24
			LCDDR5 = (LCDDR5 & 0xF0) | segment[1];
     15c:	a1 ef       	ldi	r26, 0xF1	; 241
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	8c 91       	ld	r24, X
     162:	80 7f       	andi	r24, 0xF0	; 240
     164:	92 81       	ldd	r25, Z+2	; 0x02
     166:	89 2b       	or	r24, r25
     168:	8c 93       	st	X, r24
			LCDDR10 = (LCDDR10 & 0xF0) | segment[2];
     16a:	a6 ef       	ldi	r26, 0xF6	; 246
     16c:	b0 e0       	ldi	r27, 0x00	; 0
     16e:	8c 91       	ld	r24, X
     170:	80 7f       	andi	r24, 0xF0	; 240
     172:	94 81       	ldd	r25, Z+4	; 0x04
     174:	89 2b       	or	r24, r25
     176:	8c 93       	st	X, r24
			LCDDR15 = (LCDDR15 & 0xF0) | segment[3];
     178:	ab ef       	ldi	r26, 0xFB	; 251
     17a:	b0 e0       	ldi	r27, 0x00	; 0
     17c:	8c 91       	ld	r24, X
     17e:	80 7f       	andi	r24, 0xF0	; 240
     180:	96 81       	ldd	r25, Z+6	; 0x06
     182:	89 2b       	or	r24, r25
     184:	8c 93       	st	X, r24
			break;
     186:	b3 c0       	rjmp	.+358    	; 0x2ee <writeChar+0x1d0>
		case 1:
			// Same segment just lower 4 bits
			LCDDR0 = (LCDDR0 & 0x0F) | (segment[0] << 4);
     188:	ac ee       	ldi	r26, 0xEC	; 236
     18a:	b0 e0       	ldi	r27, 0x00	; 0
     18c:	2c 91       	ld	r18, X
     18e:	80 81       	ld	r24, Z
     190:	91 81       	ldd	r25, Z+1	; 0x01
     192:	82 95       	swap	r24
     194:	92 95       	swap	r25
     196:	90 7f       	andi	r25, 0xF0	; 240
     198:	98 27       	eor	r25, r24
     19a:	80 7f       	andi	r24, 0xF0	; 240
     19c:	98 27       	eor	r25, r24
     19e:	92 2f       	mov	r25, r18
     1a0:	9f 70       	andi	r25, 0x0F	; 15
     1a2:	89 2b       	or	r24, r25
     1a4:	8c 93       	st	X, r24
			LCDDR5 = (LCDDR5 & 0x0F) | (segment[1] << 4);
     1a6:	a1 ef       	ldi	r26, 0xF1	; 241
     1a8:	b0 e0       	ldi	r27, 0x00	; 0
     1aa:	2c 91       	ld	r18, X
     1ac:	82 81       	ldd	r24, Z+2	; 0x02
     1ae:	93 81       	ldd	r25, Z+3	; 0x03
     1b0:	82 95       	swap	r24
     1b2:	92 95       	swap	r25
     1b4:	90 7f       	andi	r25, 0xF0	; 240
     1b6:	98 27       	eor	r25, r24
     1b8:	80 7f       	andi	r24, 0xF0	; 240
     1ba:	98 27       	eor	r25, r24
     1bc:	92 2f       	mov	r25, r18
     1be:	9f 70       	andi	r25, 0x0F	; 15
     1c0:	89 2b       	or	r24, r25
     1c2:	8c 93       	st	X, r24
			LCDDR10 = (LCDDR10 & 0x0F) | (segment[2] << 4);
     1c4:	a6 ef       	ldi	r26, 0xF6	; 246
     1c6:	b0 e0       	ldi	r27, 0x00	; 0
     1c8:	2c 91       	ld	r18, X
     1ca:	84 81       	ldd	r24, Z+4	; 0x04
     1cc:	95 81       	ldd	r25, Z+5	; 0x05
     1ce:	82 95       	swap	r24
     1d0:	92 95       	swap	r25
     1d2:	90 7f       	andi	r25, 0xF0	; 240
     1d4:	98 27       	eor	r25, r24
     1d6:	80 7f       	andi	r24, 0xF0	; 240
     1d8:	98 27       	eor	r25, r24
     1da:	92 2f       	mov	r25, r18
     1dc:	9f 70       	andi	r25, 0x0F	; 15
     1de:	89 2b       	or	r24, r25
     1e0:	8c 93       	st	X, r24
			LCDDR15 = (LCDDR15 & 0x0F) | (segment[3] << 4);
     1e2:	ab ef       	ldi	r26, 0xFB	; 251
     1e4:	b0 e0       	ldi	r27, 0x00	; 0
     1e6:	2c 91       	ld	r18, X
     1e8:	86 81       	ldd	r24, Z+6	; 0x06
     1ea:	97 81       	ldd	r25, Z+7	; 0x07
     1ec:	82 95       	swap	r24
     1ee:	92 95       	swap	r25
     1f0:	90 7f       	andi	r25, 0xF0	; 240
     1f2:	98 27       	eor	r25, r24
     1f4:	80 7f       	andi	r24, 0xF0	; 240
     1f6:	98 27       	eor	r25, r24
     1f8:	92 2f       	mov	r25, r18
     1fa:	9f 70       	andi	r25, 0x0F	; 15
     1fc:	89 2b       	or	r24, r25
     1fe:	8c 93       	st	X, r24
			break;
     200:	76 c0       	rjmp	.+236    	; 0x2ee <writeChar+0x1d0>
		case 2:
			LCDDR1 = (LCDDR1 & 0xF0) | segment[0];
     202:	ad ee       	ldi	r26, 0xED	; 237
     204:	b0 e0       	ldi	r27, 0x00	; 0
     206:	8c 91       	ld	r24, X
     208:	80 7f       	andi	r24, 0xF0	; 240
     20a:	90 81       	ld	r25, Z
     20c:	89 2b       	or	r24, r25
     20e:	8c 93       	st	X, r24
			LCDDR6 = (LCDDR6 & 0xF0) | segment[1];
     210:	a2 ef       	ldi	r26, 0xF2	; 242
     212:	b0 e0       	ldi	r27, 0x00	; 0
     214:	8c 91       	ld	r24, X
     216:	80 7f       	andi	r24, 0xF0	; 240
     218:	92 81       	ldd	r25, Z+2	; 0x02
     21a:	89 2b       	or	r24, r25
     21c:	8c 93       	st	X, r24
			LCDDR11 = (LCDDR11 & 0xF0) | segment[2];
     21e:	a7 ef       	ldi	r26, 0xF7	; 247
     220:	b0 e0       	ldi	r27, 0x00	; 0
     222:	8c 91       	ld	r24, X
     224:	80 7f       	andi	r24, 0xF0	; 240
     226:	94 81       	ldd	r25, Z+4	; 0x04
     228:	89 2b       	or	r24, r25
     22a:	8c 93       	st	X, r24
			LCDDR16 = (LCDDR16 & 0xF0) | segment[3];
     22c:	ac ef       	ldi	r26, 0xFC	; 252
     22e:	b0 e0       	ldi	r27, 0x00	; 0
     230:	8c 91       	ld	r24, X
     232:	80 7f       	andi	r24, 0xF0	; 240
     234:	96 81       	ldd	r25, Z+6	; 0x06
     236:	89 2b       	or	r24, r25
     238:	8c 93       	st	X, r24
			break;
     23a:	59 c0       	rjmp	.+178    	; 0x2ee <writeChar+0x1d0>
		case 3:
			LCDDR1 = (LCDDR1 & 0x0F) | (segment[0] << 4);
     23c:	ad ee       	ldi	r26, 0xED	; 237
     23e:	b0 e0       	ldi	r27, 0x00	; 0
     240:	2c 91       	ld	r18, X
     242:	80 81       	ld	r24, Z
     244:	91 81       	ldd	r25, Z+1	; 0x01
     246:	82 95       	swap	r24
     248:	92 95       	swap	r25
     24a:	90 7f       	andi	r25, 0xF0	; 240
     24c:	98 27       	eor	r25, r24
     24e:	80 7f       	andi	r24, 0xF0	; 240
     250:	98 27       	eor	r25, r24
     252:	92 2f       	mov	r25, r18
     254:	9f 70       	andi	r25, 0x0F	; 15
     256:	89 2b       	or	r24, r25
     258:	8c 93       	st	X, r24
			LCDDR6 = (LCDDR6 & 0x0F) | (segment[1] << 4);
     25a:	a2 ef       	ldi	r26, 0xF2	; 242
     25c:	b0 e0       	ldi	r27, 0x00	; 0
     25e:	2c 91       	ld	r18, X
     260:	82 81       	ldd	r24, Z+2	; 0x02
     262:	93 81       	ldd	r25, Z+3	; 0x03
     264:	82 95       	swap	r24
     266:	92 95       	swap	r25
     268:	90 7f       	andi	r25, 0xF0	; 240
     26a:	98 27       	eor	r25, r24
     26c:	80 7f       	andi	r24, 0xF0	; 240
     26e:	98 27       	eor	r25, r24
     270:	92 2f       	mov	r25, r18
     272:	9f 70       	andi	r25, 0x0F	; 15
     274:	89 2b       	or	r24, r25
     276:	8c 93       	st	X, r24
			LCDDR11 = (LCDDR11 & 0x0F) | (segment[2] << 4);
     278:	a7 ef       	ldi	r26, 0xF7	; 247
     27a:	b0 e0       	ldi	r27, 0x00	; 0
     27c:	2c 91       	ld	r18, X
     27e:	84 81       	ldd	r24, Z+4	; 0x04
     280:	95 81       	ldd	r25, Z+5	; 0x05
     282:	82 95       	swap	r24
     284:	92 95       	swap	r25
     286:	90 7f       	andi	r25, 0xF0	; 240
     288:	98 27       	eor	r25, r24
     28a:	80 7f       	andi	r24, 0xF0	; 240
     28c:	98 27       	eor	r25, r24
     28e:	92 2f       	mov	r25, r18
     290:	9f 70       	andi	r25, 0x0F	; 15
     292:	89 2b       	or	r24, r25
     294:	8c 93       	st	X, r24
			LCDDR16 = (LCDDR16 & 0x0F) | (segment[3] << 4);
     296:	ac ef       	ldi	r26, 0xFC	; 252
     298:	b0 e0       	ldi	r27, 0x00	; 0
     29a:	2c 91       	ld	r18, X
     29c:	86 81       	ldd	r24, Z+6	; 0x06
     29e:	97 81       	ldd	r25, Z+7	; 0x07
     2a0:	82 95       	swap	r24
     2a2:	92 95       	swap	r25
     2a4:	90 7f       	andi	r25, 0xF0	; 240
     2a6:	98 27       	eor	r25, r24
     2a8:	80 7f       	andi	r24, 0xF0	; 240
     2aa:	98 27       	eor	r25, r24
     2ac:	92 2f       	mov	r25, r18
     2ae:	9f 70       	andi	r25, 0x0F	; 15
     2b0:	89 2b       	or	r24, r25
     2b2:	8c 93       	st	X, r24
			break;
     2b4:	1c c0       	rjmp	.+56     	; 0x2ee <writeChar+0x1d0>
		case 4:
			LCDDR2 = (LCDDR2 & 0xF0) | segment[0];
     2b6:	ae ee       	ldi	r26, 0xEE	; 238
     2b8:	b0 e0       	ldi	r27, 0x00	; 0
     2ba:	8c 91       	ld	r24, X
     2bc:	80 7f       	andi	r24, 0xF0	; 240
     2be:	90 81       	ld	r25, Z
     2c0:	89 2b       	or	r24, r25
     2c2:	8c 93       	st	X, r24
			LCDDR7 = (LCDDR7 & 0xF0) | segment[1];
     2c4:	a3 ef       	ldi	r26, 0xF3	; 243
     2c6:	b0 e0       	ldi	r27, 0x00	; 0
     2c8:	8c 91       	ld	r24, X
     2ca:	80 7f       	andi	r24, 0xF0	; 240
     2cc:	92 81       	ldd	r25, Z+2	; 0x02
     2ce:	89 2b       	or	r24, r25
     2d0:	8c 93       	st	X, r24
			LCDDR12 = (LCDDR12 & 0xF0) | segment[2];
     2d2:	a8 ef       	ldi	r26, 0xF8	; 248
     2d4:	b0 e0       	ldi	r27, 0x00	; 0
     2d6:	8c 91       	ld	r24, X
     2d8:	80 7f       	andi	r24, 0xF0	; 240
     2da:	94 81       	ldd	r25, Z+4	; 0x04
     2dc:	89 2b       	or	r24, r25
     2de:	8c 93       	st	X, r24
			LCDDR17 = (LCDDR17 & 0xF0) | segment[3];
     2e0:	ad ef       	ldi	r26, 0xFD	; 253
     2e2:	b0 e0       	ldi	r27, 0x00	; 0
     2e4:	8c 91       	ld	r24, X
     2e6:	80 7f       	andi	r24, 0xF0	; 240
     2e8:	96 81       	ldd	r25, Z+6	; 0x06
     2ea:	89 2b       	or	r24, r25
     2ec:	8c 93       	st	X, r24
			break;
	}
}
     2ee:	cf 91       	pop	r28
     2f0:	08 95       	ret

000002f2 <printAt>:

void printAt(long num, int pos) {
     2f2:	8f 92       	push	r8
     2f4:	9f 92       	push	r9
     2f6:	af 92       	push	r10
     2f8:	bf 92       	push	r11
     2fa:	cf 92       	push	r12
     2fc:	df 92       	push	r13
     2fe:	ef 92       	push	r14
     300:	ff 92       	push	r15
     302:	cf 93       	push	r28
     304:	df 93       	push	r29
     306:	4b 01       	movw	r8, r22
     308:	5c 01       	movw	r10, r24
     30a:	ea 01       	movw	r28, r20
	writeChar((num % 100) / 10 + '0', pos);
     30c:	24 e6       	ldi	r18, 0x64	; 100
     30e:	30 e0       	ldi	r19, 0x00	; 0
     310:	40 e0       	ldi	r20, 0x00	; 0
     312:	50 e0       	ldi	r21, 0x00	; 0
     314:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <__divmodsi4>
     318:	0f 2e       	mov	r0, r31
     31a:	fa e0       	ldi	r31, 0x0A	; 10
     31c:	cf 2e       	mov	r12, r31
     31e:	d1 2c       	mov	r13, r1
     320:	e1 2c       	mov	r14, r1
     322:	f1 2c       	mov	r15, r1
     324:	f0 2d       	mov	r31, r0
     326:	a7 01       	movw	r20, r14
     328:	96 01       	movw	r18, r12
     32a:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <__divmodsi4>
     32e:	6c 2f       	mov	r22, r28
     330:	80 e3       	ldi	r24, 0x30	; 48
     332:	82 0f       	add	r24, r18
     334:	0e 94 8f 00 	call	0x11e	; 0x11e <writeChar>
	pos++;
	writeChar(num % 10 + '0', pos);
     338:	21 96       	adiw	r28, 0x01	; 1
     33a:	c5 01       	movw	r24, r10
     33c:	b4 01       	movw	r22, r8
     33e:	a7 01       	movw	r20, r14
     340:	96 01       	movw	r18, r12
     342:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <__divmodsi4>
     346:	86 2f       	mov	r24, r22
     348:	6c 2f       	mov	r22, r28
     34a:	80 5d       	subi	r24, 0xD0	; 208
     34c:	0e 94 8f 00 	call	0x11e	; 0x11e <writeChar>
}
     350:	df 91       	pop	r29
     352:	cf 91       	pop	r28
     354:	ff 90       	pop	r15
     356:	ef 90       	pop	r14
     358:	df 90       	pop	r13
     35a:	cf 90       	pop	r12
     35c:	bf 90       	pop	r11
     35e:	af 90       	pop	r10
     360:	9f 90       	pop	r9
     362:	8f 90       	pop	r8
     364:	08 95       	ret

00000366 <updateDisplay>:
		SYNC(self->activeGen, setFrequency, 0);
	}
	ASYNC(self, updateDisplay, 0);
}

void updateDisplay(GUI *self) {
     366:	0f 93       	push	r16
     368:	1f 93       	push	r17
     36a:	cf 93       	push	r28
     36c:	df 93       	push	r29
     36e:	ec 01       	movw	r28, r24
	int gen1Freq = SYNC(self->gen1, getFrequency, 0);
     370:	40 e0       	ldi	r20, 0x00	; 0
     372:	50 e0       	ldi	r21, 0x00	; 0
     374:	66 ef       	ldi	r22, 0xF6	; 246
     376:	72 e0       	ldi	r23, 0x02	; 2
     378:	8c 81       	ldd	r24, Y+4	; 0x04
     37a:	9d 81       	ldd	r25, Y+5	; 0x05
     37c:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <sync>
     380:	8c 01       	movw	r16, r24
	int gen2Freq = SYNC(self->gen2, getFrequency, 0);
     382:	40 e0       	ldi	r20, 0x00	; 0
     384:	50 e0       	ldi	r21, 0x00	; 0
     386:	66 ef       	ldi	r22, 0xF6	; 246
     388:	72 e0       	ldi	r23, 0x02	; 2
     38a:	8e 81       	ldd	r24, Y+6	; 0x06
     38c:	9f 81       	ldd	r25, Y+7	; 0x07
     38e:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <sync>
     392:	ec 01       	movw	r28, r24
    printAt(gen1Freq, 0); //gen1 hz at pos 0-1
     394:	b8 01       	movw	r22, r16
     396:	11 0f       	add	r17, r17
     398:	88 0b       	sbc	r24, r24
     39a:	99 0b       	sbc	r25, r25
     39c:	40 e0       	ldi	r20, 0x00	; 0
     39e:	50 e0       	ldi	r21, 0x00	; 0
     3a0:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printAt>
    printAt(gen2Freq, 3); //gen2 hz at pos 3-4	
     3a4:	be 01       	movw	r22, r28
     3a6:	dd 0f       	add	r29, r29
     3a8:	88 0b       	sbc	r24, r24
     3aa:	99 0b       	sbc	r25, r25
     3ac:	43 e0       	ldi	r20, 0x03	; 3
     3ae:	50 e0       	ldi	r21, 0x00	; 0
     3b0:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printAt>
     3b4:	df 91       	pop	r29
     3b6:	cf 91       	pop	r28
     3b8:	1f 91       	pop	r17
     3ba:	0f 91       	pop	r16
     3bc:	08 95       	ret

000003be <swithToLeftGen>:
	pos++;
	writeChar(num % 10 + '0', pos);
}

void swithToLeftGen(GUI *self) {
	self->activeGen = self->gen1;
     3be:	fc 01       	movw	r30, r24
     3c0:	24 81       	ldd	r18, Z+4	; 0x04
     3c2:	35 81       	ldd	r19, Z+5	; 0x05
     3c4:	31 87       	std	Z+9, r19	; 0x09
     3c6:	20 87       	std	Z+8, r18	; 0x08
	// Clear 1 and 2
	LCDDR0 &= ~(0b01000100);
     3c8:	ec ee       	ldi	r30, 0xEC	; 236
     3ca:	f0 e0       	ldi	r31, 0x00	; 0
     3cc:	80 81       	ld	r24, Z
     3ce:	8b 7b       	andi	r24, 0xBB	; 187
     3d0:	80 83       	st	Z, r24
	// Set 1 for left (gen1)
	LCDDR0 |= 0b00000100;
     3d2:	80 81       	ld	r24, Z
     3d4:	84 60       	ori	r24, 0x04	; 4
     3d6:	80 83       	st	Z, r24
     3d8:	08 95       	ret

000003da <swithToRightGen>:
}

void swithToRightGen(GUI *self) {
	self->activeGen = self->gen2;
     3da:	fc 01       	movw	r30, r24
     3dc:	26 81       	ldd	r18, Z+6	; 0x06
     3de:	37 81       	ldd	r19, Z+7	; 0x07
     3e0:	31 87       	std	Z+9, r19	; 0x09
     3e2:	20 87       	std	Z+8, r18	; 0x08
	// Clear 1 and 2
	LCDDR0 &= ~(0b01000100);
     3e4:	ec ee       	ldi	r30, 0xEC	; 236
     3e6:	f0 e0       	ldi	r31, 0x00	; 0
     3e8:	80 81       	ld	r24, Z
     3ea:	8b 7b       	andi	r24, 0xBB	; 187
     3ec:	80 83       	st	Z, r24
	// Set 1 for right (gen2)
	LCDDR0 |= 0b01000000;
     3ee:	80 81       	ld	r24, Z
     3f0:	80 64       	ori	r24, 0x40	; 64
     3f2:	80 83       	st	Z, r24
     3f4:	08 95       	ret

000003f6 <adjustFrequency>:
}

void adjustFrequency(GUI *self, int delta) {
     3f6:	cf 92       	push	r12
     3f8:	df 92       	push	r13
     3fa:	ef 92       	push	r14
     3fc:	ff 92       	push	r15
     3fe:	0f 93       	push	r16
     400:	1f 93       	push	r17
     402:	cf 93       	push	r28
     404:	df 93       	push	r29
     406:	8c 01       	movw	r16, r24
     408:	eb 01       	movw	r28, r22
	// Get right target gen
	int newFreq = SYNC(self->activeGen, getFrequency, 0) + delta;
     40a:	40 e0       	ldi	r20, 0x00	; 0
     40c:	50 e0       	ldi	r21, 0x00	; 0
     40e:	66 ef       	ldi	r22, 0xF6	; 246
     410:	72 e0       	ldi	r23, 0x02	; 2
     412:	fc 01       	movw	r30, r24
     414:	80 85       	ldd	r24, Z+8	; 0x08
     416:	91 85       	ldd	r25, Z+9	; 0x09
     418:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <sync>
     41c:	ac 01       	movw	r20, r24
     41e:	4c 0f       	add	r20, r28
     420:	5d 1f       	adc	r21, r29
	if (newFreq < 0) newFreq = 0;
	// Update everything
	SYNC(self->activeGen, setFrequency, newFreq);
     422:	55 23       	and	r21, r21
     424:	14 f4       	brge	.+4      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     426:	40 e0       	ldi	r20, 0x00	; 0
     428:	50 e0       	ldi	r21, 0x00	; 0
     42a:	66 ee       	ldi	r22, 0xE6	; 230
     42c:	72 e0       	ldi	r23, 0x02	; 2
     42e:	f8 01       	movw	r30, r16
     430:	80 85       	ldd	r24, Z+8	; 0x08
     432:	91 85       	ldd	r25, Z+9	; 0x09
     434:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <sync>
	ASYNC(self, updateDisplay, 0);
     438:	c1 2c       	mov	r12, r1
     43a:	d1 2c       	mov	r13, r1
     43c:	0f 2e       	mov	r0, r31
     43e:	f3 eb       	ldi	r31, 0xB3	; 179
     440:	ef 2e       	mov	r14, r31
     442:	f1 e0       	ldi	r31, 0x01	; 1
     444:	ff 2e       	mov	r15, r31
     446:	f0 2d       	mov	r31, r0
     448:	20 e0       	ldi	r18, 0x00	; 0
     44a:	30 e0       	ldi	r19, 0x00	; 0
     44c:	a9 01       	movw	r20, r18
     44e:	60 e0       	ldi	r22, 0x00	; 0
     450:	70 e0       	ldi	r23, 0x00	; 0
     452:	cb 01       	movw	r24, r22
     454:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <async>
}
     458:	df 91       	pop	r29
     45a:	cf 91       	pop	r28
     45c:	1f 91       	pop	r17
     45e:	0f 91       	pop	r16
     460:	ff 90       	pop	r15
     462:	ef 90       	pop	r14
     464:	df 90       	pop	r13
     466:	cf 90       	pop	r12
     468:	08 95       	ret

0000046a <saveRestore>:

void saveRestore(GUI *self) {
     46a:	cf 92       	push	r12
     46c:	df 92       	push	r13
     46e:	ef 92       	push	r14
     470:	ff 92       	push	r15
     472:	0f 93       	push	r16
     474:	1f 93       	push	r17
     476:	cf 93       	push	r28
     478:	df 93       	push	r29
     47a:	ec 01       	movw	r28, r24
	if (SYNC(self->activeGen, getFrequency, 0) == 0) {
     47c:	40 e0       	ldi	r20, 0x00	; 0
     47e:	50 e0       	ldi	r21, 0x00	; 0
     480:	66 ef       	ldi	r22, 0xF6	; 246
     482:	72 e0       	ldi	r23, 0x02	; 2
     484:	88 85       	ldd	r24, Y+8	; 0x08
     486:	99 85       	ldd	r25, Y+9	; 0x09
     488:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <sync>
     48c:	89 2b       	or	r24, r25
     48e:	49 f4       	brne	.+18     	; 0x4a2 <saveRestore+0x38>
		SYNC(self->activeGen, restore, 0);
     490:	40 e0       	ldi	r20, 0x00	; 0
     492:	50 e0       	ldi	r21, 0x00	; 0
     494:	60 ef       	ldi	r22, 0xF0	; 240
     496:	72 e0       	ldi	r23, 0x02	; 2
     498:	88 85       	ldd	r24, Y+8	; 0x08
     49a:	99 85       	ldd	r25, Y+9	; 0x09
     49c:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <sync>
     4a0:	10 c0       	rjmp	.+32     	; 0x4c2 <saveRestore+0x58>
		} else {
		SYNC(self->activeGen, save, 0);
     4a2:	40 e0       	ldi	r20, 0x00	; 0
     4a4:	50 e0       	ldi	r21, 0x00	; 0
     4a6:	6a ee       	ldi	r22, 0xEA	; 234
     4a8:	72 e0       	ldi	r23, 0x02	; 2
     4aa:	88 85       	ldd	r24, Y+8	; 0x08
     4ac:	99 85       	ldd	r25, Y+9	; 0x09
     4ae:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <sync>
		SYNC(self->activeGen, setFrequency, 0);
     4b2:	40 e0       	ldi	r20, 0x00	; 0
     4b4:	50 e0       	ldi	r21, 0x00	; 0
     4b6:	66 ee       	ldi	r22, 0xE6	; 230
     4b8:	72 e0       	ldi	r23, 0x02	; 2
     4ba:	88 85       	ldd	r24, Y+8	; 0x08
     4bc:	99 85       	ldd	r25, Y+9	; 0x09
     4be:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <sync>
	}
	ASYNC(self, updateDisplay, 0);
     4c2:	c1 2c       	mov	r12, r1
     4c4:	d1 2c       	mov	r13, r1
     4c6:	0f 2e       	mov	r0, r31
     4c8:	f3 eb       	ldi	r31, 0xB3	; 179
     4ca:	ef 2e       	mov	r14, r31
     4cc:	f1 e0       	ldi	r31, 0x01	; 1
     4ce:	ff 2e       	mov	r15, r31
     4d0:	f0 2d       	mov	r31, r0
     4d2:	8e 01       	movw	r16, r28
     4d4:	20 e0       	ldi	r18, 0x00	; 0
     4d6:	30 e0       	ldi	r19, 0x00	; 0
     4d8:	a9 01       	movw	r20, r18
     4da:	60 e0       	ldi	r22, 0x00	; 0
     4dc:	70 e0       	ldi	r23, 0x00	; 0
     4de:	cb 01       	movw	r24, r22
     4e0:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <async>
}
     4e4:	df 91       	pop	r29
     4e6:	cf 91       	pop	r28
     4e8:	1f 91       	pop	r17
     4ea:	0f 91       	pop	r16
     4ec:	ff 90       	pop	r15
     4ee:	ef 90       	pop	r14
     4f0:	df 90       	pop	r13
     4f2:	cf 90       	pop	r12
     4f4:	08 95       	ret

000004f6 <joystickInit>:
#include "PulseGen.h"


void joystickInit() {
    //sätter på upp, ner och inåt som input
    PORTB = PORTB | 0b11010000;
     4f6:	85 b1       	in	r24, 0x05	; 5
     4f8:	80 6d       	ori	r24, 0xD0	; 208
     4fa:	85 b9       	out	0x05, r24	; 5
    //sätter på höger och vänster  som input
    PORTE = PORTE | 0b00001100;
     4fc:	8e b1       	in	r24, 0x0e	; 14
     4fe:	8c 60       	ori	r24, 0x0C	; 12
     500:	8e b9       	out	0x0e, r24	; 14
    //DDRE = 0b01010000;
    //sätter på upp,ner,in (15) hög,ven (14) //sida 53 AVr..169 nånitng
    EIMSK = EIMSK | (1<<PCINT15) | (1<<PCINT14);
     502:	8d b3       	in	r24, 0x1d	; 29
     504:	80 6c       	ori	r24, 0xC0	; 192
     506:	8d bb       	out	0x1d, r24	; 29

    //sätter på upp, ner och inåt på joystick (som interrupt)
    PCMSK1 = PCMSK1 | (1<<PCINT15) | (1<<PCINT14) | (1<<PCINT12);
     508:	ec e6       	ldi	r30, 0x6C	; 108
     50a:	f0 e0       	ldi	r31, 0x00	; 0
     50c:	80 81       	ld	r24, Z
     50e:	80 6d       	ori	r24, 0xD0	; 208
     510:	80 83       	st	Z, r24
    //sätter på höger och vänster på joystick (som interrupt)
    PCMSK0 = PCMSK0 | (1<<PCINT3) | (1<<PCINT2);
     512:	eb e6       	ldi	r30, 0x6B	; 107
     514:	f0 e0       	ldi	r31, 0x00	; 0
     516:	80 81       	ld	r24, Z
     518:	8c 60       	ori	r24, 0x0C	; 12
     51a:	80 83       	st	Z, r24
     51c:	08 95       	ret

0000051e <interruptPinB>:
}


// Joystick input handler
void interruptPinB(JoystickHandler *self) { 
     51e:	cf 93       	push	r28
     520:	df 93       	push	r29
     522:	ec 01       	movw	r28, r24
    if((PINB & 0b10000000) >> 7 == 0){ //down press on joystick
     524:	1f 99       	sbic	0x03, 7	; 3
     526:	06 c0       	rjmp	.+12     	; 0x534 <interruptPinB+0x16>
        adjustFrequency(self->gui, -1);
     528:	6f ef       	ldi	r22, 0xFF	; 255
     52a:	7f ef       	ldi	r23, 0xFF	; 255
     52c:	8c 81       	ldd	r24, Y+4	; 0x04
     52e:	9d 81       	ldd	r25, Y+5	; 0x05
     530:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <adjustFrequency>
    }

    if((PINB & 0b01000000) >> 6 == 0){ //up press on joystick
     534:	1e 99       	sbic	0x03, 6	; 3
     536:	06 c0       	rjmp	.+12     	; 0x544 <interruptPinB+0x26>
        adjustFrequency(self->gui, 1);
     538:	61 e0       	ldi	r22, 0x01	; 1
     53a:	70 e0       	ldi	r23, 0x00	; 0
     53c:	8c 81       	ldd	r24, Y+4	; 0x04
     53e:	9d 81       	ldd	r25, Y+5	; 0x05
     540:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <adjustFrequency>
    }

    if((PINB & 0b00010000) >> 4 == 0){ //middle press
     544:	1c 99       	sbic	0x03, 4	; 3
     546:	04 c0       	rjmp	.+8      	; 0x550 <interruptPinB+0x32>
        saveRestore(self->gui);
     548:	8c 81       	ldd	r24, Y+4	; 0x04
     54a:	9d 81       	ldd	r25, Y+5	; 0x05
     54c:	0e 94 35 02 	call	0x46a	; 0x46a <saveRestore>
    }
}
     550:	df 91       	pop	r29
     552:	cf 91       	pop	r28
     554:	08 95       	ret

00000556 <interruptPinE>:

void interruptPinE(JoystickHandler *self) {  
     556:	cf 93       	push	r28
     558:	df 93       	push	r29
     55a:	ec 01       	movw	r28, r24
    if((PINE & 0b00000100) >> 2 == 0){ //left press
     55c:	62 99       	sbic	0x0c, 2	; 12
     55e:	04 c0       	rjmp	.+8      	; 0x568 <interruptPinE+0x12>
       swithToLeftGen(self->gui);
     560:	8c 81       	ldd	r24, Y+4	; 0x04
     562:	9d 81       	ldd	r25, Y+5	; 0x05
     564:	0e 94 df 01 	call	0x3be	; 0x3be <swithToLeftGen>
    }

    if((PINE & 0b00001000) >> 3 == 0){  //right press
     568:	63 99       	sbic	0x0c, 3	; 12
     56a:	04 c0       	rjmp	.+8      	; 0x574 <interruptPinE+0x1e>
       swithToRightGen(self->gui);
     56c:	8c 81       	ldd	r24, Y+4	; 0x04
     56e:	9d 81       	ldd	r25, Y+5	; 0x05
     570:	0e 94 ed 01 	call	0x3da	; 0x3da <swithToRightGen>
    }
     574:	df 91       	pop	r29
     576:	cf 91       	pop	r28
     578:	08 95       	ret

0000057a <sysInit>:
GUI gui = initGUI(&gen1, &gen2);
JoystickHandler joystick = initJoystickHandler(&gui);

void sysInit(){
    // Clock Prescale Register "maximum speed"
	CLKPR = 0b10000000; // Clock Prescaler Change Enable
     57a:	e1 e6       	ldi	r30, 0x61	; 97
     57c:	f0 e0       	ldi	r31, 0x00	; 0
     57e:	80 e8       	ldi	r24, 0x80	; 128
     580:	80 83       	st	Z, r24
	CLKPR = 0b00000000; // Set 0 for sysclock
     582:	10 82       	st	Z, r1
     584:	08 95       	ret

00000586 <pinOutputInit>:
}

void pinOutputInit(){
    // Initialize Port E as output for PE4 and PE6
	DDRE |= (1 << PE4) | (1 << PE6);
     586:	8d b1       	in	r24, 0x0d	; 13
     588:	80 65       	ori	r24, 0x50	; 80
     58a:	8d b9       	out	0x0d, r24	; 13
     58c:	08 95       	ret

0000058e <main>:
}


int main() {
    sysInit();
     58e:	0e 94 bd 02 	call	0x57a	; 0x57a <sysInit>
    pinOutputInit();
     592:	0e 94 c3 02 	call	0x586	; 0x586 <pinOutputInit>
    joystickInit();
     596:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <joystickInit>
    LCD_init();
     59a:	0e 94 57 00 	call	0xae	; 0xae <LCD_init>
	//LCDDR0 = 0b01000100;
	//LCDDR0 = 0b01000100;
	
    // Instal interupt handler
    //when the joystick's vertical state changes
    INSTALL(&joystick, interruptPinB, IRQ_PCINT1);
     59e:	42 e0       	ldi	r20, 0x02	; 2
     5a0:	6f e8       	ldi	r22, 0x8F	; 143
     5a2:	72 e0       	ldi	r23, 0x02	; 2
     5a4:	80 e5       	ldi	r24, 0x50	; 80
     5a6:	91 e0       	ldi	r25, 0x01	; 1
     5a8:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <install>
    //when the joystick's horizontal (minus middle) state changes
    INSTALL(&joystick, interruptPinE, IRQ_PCINT0);
     5ac:	41 e0       	ldi	r20, 0x01	; 1
     5ae:	6b ea       	ldi	r22, 0xAB	; 171
     5b0:	72 e0       	ldi	r23, 0x02	; 2
     5b2:	80 e5       	ldi	r24, 0x50	; 80
     5b4:	91 e0       	ldi	r25, 0x01	; 1
     5b6:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <install>
    
    // Start kernel
    return TINYTIMBER(&gui, NULL, NULL);
     5ba:	40 e0       	ldi	r20, 0x00	; 0
     5bc:	50 e0       	ldi	r21, 0x00	; 0
     5be:	60 e0       	ldi	r22, 0x00	; 0
     5c0:	70 e0       	ldi	r23, 0x00	; 0
     5c2:	86 e5       	ldi	r24, 0x56	; 86
     5c4:	91 e0       	ldi	r25, 0x01	; 1
     5c6:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <tinytimber>
}
     5ca:	08 95       	ret

000005cc <setFrequency>:
#include "PortWrite.h"
#include "TinyTimber.h"


void setFrequency(PulseGen *self, int freq) {
	self->frequency = freq;
     5cc:	fc 01       	movw	r30, r24
     5ce:	71 87       	std	Z+9, r23	; 0x09
     5d0:	60 87       	std	Z+8, r22	; 0x08
     5d2:	08 95       	ret

000005d4 <save>:
    }
}

// Saves the freq
void save(PulseGen *self) {
	self->saved_freq = self->frequency;
     5d4:	fc 01       	movw	r30, r24
     5d6:	20 85       	ldd	r18, Z+8	; 0x08
     5d8:	31 85       	ldd	r19, Z+9	; 0x09
     5da:	33 87       	std	Z+11, r19	; 0x0b
     5dc:	22 87       	std	Z+10, r18	; 0x0a
     5de:	08 95       	ret

000005e0 <restore>:
}

// Restores freq to last saved
void restore(PulseGen *self) {
	self->frequency = self->saved_freq;
     5e0:	fc 01       	movw	r30, r24
     5e2:	22 85       	ldd	r18, Z+10	; 0x0a
     5e4:	33 85       	ldd	r19, Z+11	; 0x0b
     5e6:	31 87       	std	Z+9, r19	; 0x09
     5e8:	20 87       	std	Z+8, r18	; 0x08
     5ea:	08 95       	ret

000005ec <getFrequency>:
}

int getFrequency(PulseGen *self) {
	return self->frequency;
}
     5ec:	fc 01       	movw	r30, r24
     5ee:	80 85       	ldd	r24, Z+8	; 0x08
     5f0:	91 85       	ldd	r25, Z+9	; 0x09
     5f2:	08 95       	ret

000005f4 <initialize>:
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
}
     5f4:	cf 93       	push	r28
     5f6:	df 93       	push	r29
     5f8:	00 d0       	rcall	.+0      	; 0x5fa <initialize+0x6>
     5fa:	00 d0       	rcall	.+0      	; 0x5fc <initialize+0x8>
     5fc:	cd b7       	in	r28, 0x3d	; 61
     5fe:	de b7       	in	r29, 0x3e	; 62
     600:	8f e7       	ldi	r24, 0x7F	; 127
     602:	92 e0       	ldi	r25, 0x02	; 2
     604:	2f e5       	ldi	r18, 0x5F	; 95
     606:	33 e0       	ldi	r19, 0x03	; 3
     608:	fc 01       	movw	r30, r24
     60a:	70 97       	sbiw	r30, 0x10	; 16
     60c:	91 83       	std	Z+1, r25	; 0x01
     60e:	80 83       	st	Z, r24
     610:	40 96       	adiw	r24, 0x10	; 16
     612:	82 17       	cp	r24, r18
     614:	93 07       	cpc	r25, r19
     616:	c1 f7       	brne	.-16     	; 0x608 <initialize+0x14>
     618:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <messages+0xe1>
     61c:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <messages+0xe0>
     620:	ea eb       	ldi	r30, 0xBA	; 186
     622:	f1 e0       	ldi	r31, 0x01	; 1
     624:	87 ed       	ldi	r24, 0xD7	; 215
     626:	91 e0       	ldi	r25, 0x01	; 1
     628:	91 83       	std	Z+1, r25	; 0x01
     62a:	80 83       	st	Z, r24
     62c:	84 ef       	ldi	r24, 0xF4	; 244
     62e:	91 e0       	ldi	r25, 0x01	; 1
     630:	96 8f       	std	Z+30, r25	; 0x1e
     632:	85 8f       	std	Z+29, r24	; 0x1d
     634:	a1 e1       	ldi	r26, 0x11	; 17
     636:	b2 e0       	ldi	r27, 0x02	; 2
     638:	b3 af       	std	Z+59, r27	; 0x3b
     63a:	a2 af       	std	Z+58, r26	; 0x3a
     63c:	1d 92       	st	X+, r1
     63e:	1c 92       	st	X, r1
     640:	fa 83       	std	Y+2, r31	; 0x02
     642:	e9 83       	std	Y+1, r30	; 0x01
     644:	eb eb       	ldi	r30, 0xBB	; 187
     646:	f3 e0       	ldi	r31, 0x03	; 3
     648:	fc 83       	std	Y+4, r31	; 0x04
     64a:	eb 83       	std	Y+3, r30	; 0x03
     64c:	89 81       	ldd	r24, Y+1	; 0x01
     64e:	9a 81       	ldd	r25, Y+2	; 0x02
     650:	06 96       	adiw	r24, 0x06	; 6
     652:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <setjmp>
     656:	8b 81       	ldd	r24, Y+3	; 0x03
     658:	9c 81       	ldd	r25, Y+4	; 0x04
     65a:	e9 81       	ldd	r30, Y+1	; 0x01
     65c:	fa 81       	ldd	r31, Y+2	; 0x02
     65e:	97 8b       	std	Z+23, r25	; 0x17
     660:	86 8b       	std	Z+22, r24	; 0x16
     662:	91 8f       	std	Z+25, r25	; 0x19
     664:	80 8f       	std	Z+24, r24	; 0x18
     666:	8a e9       	ldi	r24, 0x9A	; 154
     668:	9e e0       	ldi	r25, 0x0E	; 14
     66a:	94 8f       	std	Z+28, r25	; 0x1c
     66c:	83 8f       	std	Z+27, r24	; 0x1b
     66e:	15 82       	std	Z+5, r1	; 0x05
     670:	14 82       	std	Z+4, r1	; 0x04
     672:	7d 96       	adiw	r30, 0x1d	; 29
     674:	fa 83       	std	Y+2, r31	; 0x02
     676:	e9 83       	std	Y+1, r30	; 0x01
     678:	eb 81       	ldd	r30, Y+3	; 0x03
     67a:	fc 81       	ldd	r31, Y+4	; 0x04
     67c:	e0 5a       	subi	r30, 0xA0	; 160
     67e:	ff 4f       	sbci	r31, 0xFF	; 255
     680:	fc 83       	std	Y+4, r31	; 0x04
     682:	eb 83       	std	Y+3, r30	; 0x03
     684:	89 81       	ldd	r24, Y+1	; 0x01
     686:	9a 81       	ldd	r25, Y+2	; 0x02
     688:	8e 52       	subi	r24, 0x2E	; 46
     68a:	92 40       	sbci	r25, 0x02	; 2
     68c:	f9 f6       	brne	.-66     	; 0x64c <initialize+0x58>
     68e:	e2 e5       	ldi	r30, 0x52	; 82
     690:	f2 e0       	ldi	r31, 0x02	; 2
     692:	11 82       	std	Z+1, r1	; 0x01
     694:	10 82       	st	Z, r1
     696:	15 82       	std	Z+5, r1	; 0x05
     698:	14 82       	std	Z+4, r1	; 0x04
     69a:	13 82       	std	Z+3, r1	; 0x03
     69c:	12 82       	std	Z+2, r1	; 0x02
     69e:	e1 e6       	ldi	r30, 0x61	; 97
     6a0:	f0 e0       	ldi	r31, 0x00	; 0
     6a2:	80 e8       	ldi	r24, 0x80	; 128
     6a4:	80 83       	st	Z, r24
     6a6:	10 82       	st	Z, r1
     6a8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     6ac:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     6b0:	84 e0       	ldi	r24, 0x04	; 4
     6b2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
     6bc:	0f 90       	pop	r0
     6be:	0f 90       	pop	r0
     6c0:	0f 90       	pop	r0
     6c2:	0f 90       	pop	r0
     6c4:	df 91       	pop	r29
     6c6:	cf 91       	pop	r28
     6c8:	08 95       	ret

000006ca <dispatch>:
     6ca:	cf 93       	push	r28
     6cc:	df 93       	push	r29
     6ce:	00 d0       	rcall	.+0      	; 0x6d0 <dispatch+0x6>
     6d0:	cd b7       	in	r28, 0x3d	; 61
     6d2:	de b7       	in	r29, 0x3e	; 62
     6d4:	9a 83       	std	Y+2, r25	; 0x02
     6d6:	89 83       	std	Y+1, r24	; 0x01
     6d8:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <current>
     6dc:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <current+0x1>
     6e0:	06 96       	adiw	r24, 0x06	; 6
     6e2:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <setjmp>
     6e6:	89 2b       	or	r24, r25
     6e8:	59 f4       	brne	.+22     	; 0x700 <dispatch+0x36>
     6ea:	89 81       	ldd	r24, Y+1	; 0x01
     6ec:	9a 81       	ldd	r25, Y+2	; 0x02
     6ee:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <current+0x1>
     6f2:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <current>
     6f6:	61 e0       	ldi	r22, 0x01	; 1
     6f8:	70 e0       	ldi	r23, 0x00	; 0
     6fa:	06 96       	adiw	r24, 0x06	; 6
     6fc:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <longjmp>
     700:	0f 90       	pop	r0
     702:	0f 90       	pop	r0
     704:	df 91       	pop	r29
     706:	cf 91       	pop	r28
     708:	08 95       	ret

0000070a <schedule>:
     70a:	0f 93       	push	r16
     70c:	1f 93       	push	r17
     70e:	cf 93       	push	r28
     710:	df 93       	push	r29
     712:	e0 91 94 01 	lds	r30, 0x0194	; 0x800194 <msgQ>
     716:	f0 91 95 01 	lds	r31, 0x0195	; 0x800195 <msgQ+0x1>
     71a:	30 97       	sbiw	r30, 0x00	; 0
     71c:	61 f1       	breq	.+88     	; 0x776 <schedule+0x6c>
     71e:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <threadPool>
     722:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <threadPool+0x1>
     726:	00 97       	sbiw	r24, 0x00	; 0
     728:	31 f1       	breq	.+76     	; 0x776 <schedule+0x6c>
     72a:	c0 91 7e 01 	lds	r28, 0x017E	; 0x80017e <activeStack>
     72e:	d0 91 7f 01 	lds	r29, 0x017F	; 0x80017f <activeStack+0x1>
     732:	aa 81       	ldd	r26, Y+2	; 0x02
     734:	bb 81       	ldd	r27, Y+3	; 0x03
     736:	10 97       	sbiw	r26, 0x00	; 0
     738:	79 f0       	breq	.+30     	; 0x758 <schedule+0x4e>
     73a:	46 81       	ldd	r20, Z+6	; 0x06
     73c:	57 81       	ldd	r21, Z+7	; 0x07
     73e:	60 85       	ldd	r22, Z+8	; 0x08
     740:	71 85       	ldd	r23, Z+9	; 0x09
     742:	16 96       	adiw	r26, 0x06	; 6
     744:	0d 91       	ld	r16, X+
     746:	1d 91       	ld	r17, X+
     748:	2d 91       	ld	r18, X+
     74a:	3c 91       	ld	r19, X
     74c:	19 97       	sbiw	r26, 0x09	; 9
     74e:	40 1b       	sub	r20, r16
     750:	51 0b       	sbc	r21, r17
     752:	62 0b       	sbc	r22, r18
     754:	73 0b       	sbc	r23, r19
     756:	7a f4       	brpl	.+30     	; 0x776 <schedule+0x6c>
     758:	fc 01       	movw	r30, r24
     75a:	20 81       	ld	r18, Z
     75c:	31 81       	ldd	r19, Z+1	; 0x01
     75e:	30 93 81 01 	sts	0x0181, r19	; 0x800181 <threadPool+0x1>
     762:	20 93 80 01 	sts	0x0180, r18	; 0x800180 <threadPool>
     766:	d1 83       	std	Z+1, r29	; 0x01
     768:	c0 83       	st	Z, r28
     76a:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <activeStack+0x1>
     76e:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <activeStack>
     772:	0e 94 65 03 	call	0x6ca	; 0x6ca <dispatch>
     776:	df 91       	pop	r29
     778:	cf 91       	pop	r28
     77a:	1f 91       	pop	r17
     77c:	0f 91       	pop	r16
     77e:	08 95       	ret

00000780 <__vector_1>:
     780:	1f 92       	push	r1
     782:	0f 92       	push	r0
     784:	0f b6       	in	r0, 0x3f	; 63
     786:	0f 92       	push	r0
     788:	11 24       	eor	r1, r1
     78a:	2f 93       	push	r18
     78c:	3f 93       	push	r19
     78e:	4f 93       	push	r20
     790:	5f 93       	push	r21
     792:	6f 93       	push	r22
     794:	7f 93       	push	r23
     796:	8f 93       	push	r24
     798:	9f 93       	push	r25
     79a:	af 93       	push	r26
     79c:	bf 93       	push	r27
     79e:	ef 93       	push	r30
     7a0:	ff 93       	push	r31
     7a2:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     7a6:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     7aa:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     7ae:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     7b2:	c9 01       	movw	r24, r18
     7b4:	03 2e       	mov	r0, r19
     7b6:	00 0c       	add	r0, r0
     7b8:	aa 0b       	sbc	r26, r26
     7ba:	bb 0b       	sbc	r27, r27
     7bc:	dc 01       	movw	r26, r24
     7be:	99 27       	eor	r25, r25
     7c0:	88 27       	eor	r24, r24
     7c2:	60 e0       	ldi	r22, 0x00	; 0
     7c4:	70 e0       	ldi	r23, 0x00	; 0
     7c6:	84 2b       	or	r24, r20
     7c8:	95 2b       	or	r25, r21
     7ca:	a6 2b       	or	r26, r22
     7cc:	b7 2b       	or	r27, r23
     7ce:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     7d2:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     7d6:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     7da:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     7de:	b0 9b       	sbis	0x16, 0	; 22
     7e0:	1b c0       	rjmp	.+54     	; 0x818 <__vector_1+0x98>
     7e2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     7e6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     7ea:	c9 01       	movw	r24, r18
     7ec:	01 96       	adiw	r24, 0x01	; 1
     7ee:	09 2e       	mov	r0, r25
     7f0:	00 0c       	add	r0, r0
     7f2:	aa 0b       	sbc	r26, r26
     7f4:	bb 0b       	sbc	r27, r27
     7f6:	dc 01       	movw	r26, r24
     7f8:	99 27       	eor	r25, r25
     7fa:	88 27       	eor	r24, r24
     7fc:	60 e0       	ldi	r22, 0x00	; 0
     7fe:	70 e0       	ldi	r23, 0x00	; 0
     800:	84 2b       	or	r24, r20
     802:	95 2b       	or	r25, r21
     804:	a6 2b       	or	r26, r22
     806:	b7 2b       	or	r27, r23
     808:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     80c:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     810:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     814:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     818:	e0 91 2e 02 	lds	r30, 0x022E	; 0x80022e <mtable>
     81c:	f0 91 2f 02 	lds	r31, 0x022F	; 0x80022f <mtable+0x1>
     820:	30 97       	sbiw	r30, 0x00	; 0
     822:	39 f0       	breq	.+14     	; 0x832 <__vector_1+0xb2>
     824:	60 e0       	ldi	r22, 0x00	; 0
     826:	70 e0       	ldi	r23, 0x00	; 0
     828:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <otable>
     82c:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <otable+0x1>
     830:	09 95       	icall
     832:	0e 94 85 03 	call	0x70a	; 0x70a <schedule>
     836:	ff 91       	pop	r31
     838:	ef 91       	pop	r30
     83a:	bf 91       	pop	r27
     83c:	af 91       	pop	r26
     83e:	9f 91       	pop	r25
     840:	8f 91       	pop	r24
     842:	7f 91       	pop	r23
     844:	6f 91       	pop	r22
     846:	5f 91       	pop	r21
     848:	4f 91       	pop	r20
     84a:	3f 91       	pop	r19
     84c:	2f 91       	pop	r18
     84e:	0f 90       	pop	r0
     850:	0f be       	out	0x3f, r0	; 63
     852:	0f 90       	pop	r0
     854:	1f 90       	pop	r1
     856:	18 95       	reti

00000858 <__vector_2>:
     858:	1f 92       	push	r1
     85a:	0f 92       	push	r0
     85c:	0f b6       	in	r0, 0x3f	; 63
     85e:	0f 92       	push	r0
     860:	11 24       	eor	r1, r1
     862:	2f 93       	push	r18
     864:	3f 93       	push	r19
     866:	4f 93       	push	r20
     868:	5f 93       	push	r21
     86a:	6f 93       	push	r22
     86c:	7f 93       	push	r23
     86e:	8f 93       	push	r24
     870:	9f 93       	push	r25
     872:	af 93       	push	r26
     874:	bf 93       	push	r27
     876:	ef 93       	push	r30
     878:	ff 93       	push	r31
     87a:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     87e:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     882:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     886:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     88a:	c9 01       	movw	r24, r18
     88c:	03 2e       	mov	r0, r19
     88e:	00 0c       	add	r0, r0
     890:	aa 0b       	sbc	r26, r26
     892:	bb 0b       	sbc	r27, r27
     894:	dc 01       	movw	r26, r24
     896:	99 27       	eor	r25, r25
     898:	88 27       	eor	r24, r24
     89a:	60 e0       	ldi	r22, 0x00	; 0
     89c:	70 e0       	ldi	r23, 0x00	; 0
     89e:	84 2b       	or	r24, r20
     8a0:	95 2b       	or	r25, r21
     8a2:	a6 2b       	or	r26, r22
     8a4:	b7 2b       	or	r27, r23
     8a6:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     8aa:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     8ae:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     8b2:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     8b6:	b0 9b       	sbis	0x16, 0	; 22
     8b8:	1b c0       	rjmp	.+54     	; 0x8f0 <__vector_2+0x98>
     8ba:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     8be:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     8c2:	c9 01       	movw	r24, r18
     8c4:	01 96       	adiw	r24, 0x01	; 1
     8c6:	09 2e       	mov	r0, r25
     8c8:	00 0c       	add	r0, r0
     8ca:	aa 0b       	sbc	r26, r26
     8cc:	bb 0b       	sbc	r27, r27
     8ce:	dc 01       	movw	r26, r24
     8d0:	99 27       	eor	r25, r25
     8d2:	88 27       	eor	r24, r24
     8d4:	60 e0       	ldi	r22, 0x00	; 0
     8d6:	70 e0       	ldi	r23, 0x00	; 0
     8d8:	84 2b       	or	r24, r20
     8da:	95 2b       	or	r25, r21
     8dc:	a6 2b       	or	r26, r22
     8de:	b7 2b       	or	r27, r23
     8e0:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     8e4:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     8e8:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     8ec:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     8f0:	e0 91 30 02 	lds	r30, 0x0230	; 0x800230 <mtable+0x2>
     8f4:	f0 91 31 02 	lds	r31, 0x0231	; 0x800231 <mtable+0x3>
     8f8:	30 97       	sbiw	r30, 0x00	; 0
     8fa:	39 f0       	breq	.+14     	; 0x90a <__vector_2+0xb2>
     8fc:	61 e0       	ldi	r22, 0x01	; 1
     8fe:	70 e0       	ldi	r23, 0x00	; 0
     900:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <otable+0x2>
     904:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <otable+0x3>
     908:	09 95       	icall
     90a:	0e 94 85 03 	call	0x70a	; 0x70a <schedule>
     90e:	ff 91       	pop	r31
     910:	ef 91       	pop	r30
     912:	bf 91       	pop	r27
     914:	af 91       	pop	r26
     916:	9f 91       	pop	r25
     918:	8f 91       	pop	r24
     91a:	7f 91       	pop	r23
     91c:	6f 91       	pop	r22
     91e:	5f 91       	pop	r21
     920:	4f 91       	pop	r20
     922:	3f 91       	pop	r19
     924:	2f 91       	pop	r18
     926:	0f 90       	pop	r0
     928:	0f be       	out	0x3f, r0	; 63
     92a:	0f 90       	pop	r0
     92c:	1f 90       	pop	r1
     92e:	18 95       	reti

00000930 <__vector_3>:
     930:	1f 92       	push	r1
     932:	0f 92       	push	r0
     934:	0f b6       	in	r0, 0x3f	; 63
     936:	0f 92       	push	r0
     938:	11 24       	eor	r1, r1
     93a:	2f 93       	push	r18
     93c:	3f 93       	push	r19
     93e:	4f 93       	push	r20
     940:	5f 93       	push	r21
     942:	6f 93       	push	r22
     944:	7f 93       	push	r23
     946:	8f 93       	push	r24
     948:	9f 93       	push	r25
     94a:	af 93       	push	r26
     94c:	bf 93       	push	r27
     94e:	ef 93       	push	r30
     950:	ff 93       	push	r31
     952:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     956:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     95a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     95e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     962:	c9 01       	movw	r24, r18
     964:	03 2e       	mov	r0, r19
     966:	00 0c       	add	r0, r0
     968:	aa 0b       	sbc	r26, r26
     96a:	bb 0b       	sbc	r27, r27
     96c:	dc 01       	movw	r26, r24
     96e:	99 27       	eor	r25, r25
     970:	88 27       	eor	r24, r24
     972:	60 e0       	ldi	r22, 0x00	; 0
     974:	70 e0       	ldi	r23, 0x00	; 0
     976:	84 2b       	or	r24, r20
     978:	95 2b       	or	r25, r21
     97a:	a6 2b       	or	r26, r22
     97c:	b7 2b       	or	r27, r23
     97e:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     982:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     986:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     98a:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     98e:	b0 9b       	sbis	0x16, 0	; 22
     990:	1b c0       	rjmp	.+54     	; 0x9c8 <__vector_3+0x98>
     992:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     996:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     99a:	c9 01       	movw	r24, r18
     99c:	01 96       	adiw	r24, 0x01	; 1
     99e:	09 2e       	mov	r0, r25
     9a0:	00 0c       	add	r0, r0
     9a2:	aa 0b       	sbc	r26, r26
     9a4:	bb 0b       	sbc	r27, r27
     9a6:	dc 01       	movw	r26, r24
     9a8:	99 27       	eor	r25, r25
     9aa:	88 27       	eor	r24, r24
     9ac:	60 e0       	ldi	r22, 0x00	; 0
     9ae:	70 e0       	ldi	r23, 0x00	; 0
     9b0:	84 2b       	or	r24, r20
     9b2:	95 2b       	or	r25, r21
     9b4:	a6 2b       	or	r26, r22
     9b6:	b7 2b       	or	r27, r23
     9b8:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     9bc:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     9c0:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     9c4:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     9c8:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <mtable+0x4>
     9cc:	f0 91 33 02 	lds	r31, 0x0233	; 0x800233 <mtable+0x5>
     9d0:	30 97       	sbiw	r30, 0x00	; 0
     9d2:	39 f0       	breq	.+14     	; 0x9e2 <__vector_3+0xb2>
     9d4:	62 e0       	ldi	r22, 0x02	; 2
     9d6:	70 e0       	ldi	r23, 0x00	; 0
     9d8:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <otable+0x4>
     9dc:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <otable+0x5>
     9e0:	09 95       	icall
     9e2:	0e 94 85 03 	call	0x70a	; 0x70a <schedule>
     9e6:	ff 91       	pop	r31
     9e8:	ef 91       	pop	r30
     9ea:	bf 91       	pop	r27
     9ec:	af 91       	pop	r26
     9ee:	9f 91       	pop	r25
     9f0:	8f 91       	pop	r24
     9f2:	7f 91       	pop	r23
     9f4:	6f 91       	pop	r22
     9f6:	5f 91       	pop	r21
     9f8:	4f 91       	pop	r20
     9fa:	3f 91       	pop	r19
     9fc:	2f 91       	pop	r18
     9fe:	0f 90       	pop	r0
     a00:	0f be       	out	0x3f, r0	; 63
     a02:	0f 90       	pop	r0
     a04:	1f 90       	pop	r1
     a06:	18 95       	reti

00000a08 <__vector_4>:
     a08:	1f 92       	push	r1
     a0a:	0f 92       	push	r0
     a0c:	0f b6       	in	r0, 0x3f	; 63
     a0e:	0f 92       	push	r0
     a10:	11 24       	eor	r1, r1
     a12:	2f 93       	push	r18
     a14:	3f 93       	push	r19
     a16:	4f 93       	push	r20
     a18:	5f 93       	push	r21
     a1a:	6f 93       	push	r22
     a1c:	7f 93       	push	r23
     a1e:	8f 93       	push	r24
     a20:	9f 93       	push	r25
     a22:	af 93       	push	r26
     a24:	bf 93       	push	r27
     a26:	ef 93       	push	r30
     a28:	ff 93       	push	r31
     a2a:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     a2e:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     a32:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     a36:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     a3a:	c9 01       	movw	r24, r18
     a3c:	03 2e       	mov	r0, r19
     a3e:	00 0c       	add	r0, r0
     a40:	aa 0b       	sbc	r26, r26
     a42:	bb 0b       	sbc	r27, r27
     a44:	dc 01       	movw	r26, r24
     a46:	99 27       	eor	r25, r25
     a48:	88 27       	eor	r24, r24
     a4a:	60 e0       	ldi	r22, 0x00	; 0
     a4c:	70 e0       	ldi	r23, 0x00	; 0
     a4e:	84 2b       	or	r24, r20
     a50:	95 2b       	or	r25, r21
     a52:	a6 2b       	or	r26, r22
     a54:	b7 2b       	or	r27, r23
     a56:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     a5a:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     a5e:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     a62:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     a66:	b0 9b       	sbis	0x16, 0	; 22
     a68:	1b c0       	rjmp	.+54     	; 0xaa0 <__vector_4+0x98>
     a6a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     a6e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     a72:	c9 01       	movw	r24, r18
     a74:	01 96       	adiw	r24, 0x01	; 1
     a76:	09 2e       	mov	r0, r25
     a78:	00 0c       	add	r0, r0
     a7a:	aa 0b       	sbc	r26, r26
     a7c:	bb 0b       	sbc	r27, r27
     a7e:	dc 01       	movw	r26, r24
     a80:	99 27       	eor	r25, r25
     a82:	88 27       	eor	r24, r24
     a84:	60 e0       	ldi	r22, 0x00	; 0
     a86:	70 e0       	ldi	r23, 0x00	; 0
     a88:	84 2b       	or	r24, r20
     a8a:	95 2b       	or	r25, r21
     a8c:	a6 2b       	or	r26, r22
     a8e:	b7 2b       	or	r27, r23
     a90:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     a94:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     a98:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     a9c:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     aa0:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <mtable+0x6>
     aa4:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <mtable+0x7>
     aa8:	30 97       	sbiw	r30, 0x00	; 0
     aaa:	39 f0       	breq	.+14     	; 0xaba <__vector_4+0xb2>
     aac:	63 e0       	ldi	r22, 0x03	; 3
     aae:	70 e0       	ldi	r23, 0x00	; 0
     ab0:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <otable+0x6>
     ab4:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <otable+0x7>
     ab8:	09 95       	icall
     aba:	0e 94 85 03 	call	0x70a	; 0x70a <schedule>
     abe:	ff 91       	pop	r31
     ac0:	ef 91       	pop	r30
     ac2:	bf 91       	pop	r27
     ac4:	af 91       	pop	r26
     ac6:	9f 91       	pop	r25
     ac8:	8f 91       	pop	r24
     aca:	7f 91       	pop	r23
     acc:	6f 91       	pop	r22
     ace:	5f 91       	pop	r21
     ad0:	4f 91       	pop	r20
     ad2:	3f 91       	pop	r19
     ad4:	2f 91       	pop	r18
     ad6:	0f 90       	pop	r0
     ad8:	0f be       	out	0x3f, r0	; 63
     ada:	0f 90       	pop	r0
     adc:	1f 90       	pop	r1
     ade:	18 95       	reti

00000ae0 <__vector_5>:
     ae0:	1f 92       	push	r1
     ae2:	0f 92       	push	r0
     ae4:	0f b6       	in	r0, 0x3f	; 63
     ae6:	0f 92       	push	r0
     ae8:	11 24       	eor	r1, r1
     aea:	2f 93       	push	r18
     aec:	3f 93       	push	r19
     aee:	4f 93       	push	r20
     af0:	5f 93       	push	r21
     af2:	6f 93       	push	r22
     af4:	7f 93       	push	r23
     af6:	8f 93       	push	r24
     af8:	9f 93       	push	r25
     afa:	af 93       	push	r26
     afc:	bf 93       	push	r27
     afe:	ef 93       	push	r30
     b00:	ff 93       	push	r31
     b02:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     b06:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     b0a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     b0e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     b12:	c9 01       	movw	r24, r18
     b14:	03 2e       	mov	r0, r19
     b16:	00 0c       	add	r0, r0
     b18:	aa 0b       	sbc	r26, r26
     b1a:	bb 0b       	sbc	r27, r27
     b1c:	dc 01       	movw	r26, r24
     b1e:	99 27       	eor	r25, r25
     b20:	88 27       	eor	r24, r24
     b22:	60 e0       	ldi	r22, 0x00	; 0
     b24:	70 e0       	ldi	r23, 0x00	; 0
     b26:	84 2b       	or	r24, r20
     b28:	95 2b       	or	r25, r21
     b2a:	a6 2b       	or	r26, r22
     b2c:	b7 2b       	or	r27, r23
     b2e:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     b32:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     b36:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     b3a:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     b3e:	b0 9b       	sbis	0x16, 0	; 22
     b40:	1b c0       	rjmp	.+54     	; 0xb78 <__vector_5+0x98>
     b42:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     b46:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     b4a:	c9 01       	movw	r24, r18
     b4c:	01 96       	adiw	r24, 0x01	; 1
     b4e:	09 2e       	mov	r0, r25
     b50:	00 0c       	add	r0, r0
     b52:	aa 0b       	sbc	r26, r26
     b54:	bb 0b       	sbc	r27, r27
     b56:	dc 01       	movw	r26, r24
     b58:	99 27       	eor	r25, r25
     b5a:	88 27       	eor	r24, r24
     b5c:	60 e0       	ldi	r22, 0x00	; 0
     b5e:	70 e0       	ldi	r23, 0x00	; 0
     b60:	84 2b       	or	r24, r20
     b62:	95 2b       	or	r25, r21
     b64:	a6 2b       	or	r26, r22
     b66:	b7 2b       	or	r27, r23
     b68:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     b6c:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     b70:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     b74:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     b78:	e0 91 36 02 	lds	r30, 0x0236	; 0x800236 <mtable+0x8>
     b7c:	f0 91 37 02 	lds	r31, 0x0237	; 0x800237 <mtable+0x9>
     b80:	30 97       	sbiw	r30, 0x00	; 0
     b82:	39 f0       	breq	.+14     	; 0xb92 <__vector_5+0xb2>
     b84:	64 e0       	ldi	r22, 0x04	; 4
     b86:	70 e0       	ldi	r23, 0x00	; 0
     b88:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <otable+0x8>
     b8c:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <otable+0x9>
     b90:	09 95       	icall
     b92:	0e 94 85 03 	call	0x70a	; 0x70a <schedule>
     b96:	ff 91       	pop	r31
     b98:	ef 91       	pop	r30
     b9a:	bf 91       	pop	r27
     b9c:	af 91       	pop	r26
     b9e:	9f 91       	pop	r25
     ba0:	8f 91       	pop	r24
     ba2:	7f 91       	pop	r23
     ba4:	6f 91       	pop	r22
     ba6:	5f 91       	pop	r21
     ba8:	4f 91       	pop	r20
     baa:	3f 91       	pop	r19
     bac:	2f 91       	pop	r18
     bae:	0f 90       	pop	r0
     bb0:	0f be       	out	0x3f, r0	; 63
     bb2:	0f 90       	pop	r0
     bb4:	1f 90       	pop	r1
     bb6:	18 95       	reti

00000bb8 <__vector_10>:
     bb8:	1f 92       	push	r1
     bba:	0f 92       	push	r0
     bbc:	0f b6       	in	r0, 0x3f	; 63
     bbe:	0f 92       	push	r0
     bc0:	11 24       	eor	r1, r1
     bc2:	2f 93       	push	r18
     bc4:	3f 93       	push	r19
     bc6:	4f 93       	push	r20
     bc8:	5f 93       	push	r21
     bca:	6f 93       	push	r22
     bcc:	7f 93       	push	r23
     bce:	8f 93       	push	r24
     bd0:	9f 93       	push	r25
     bd2:	af 93       	push	r26
     bd4:	bf 93       	push	r27
     bd6:	ef 93       	push	r30
     bd8:	ff 93       	push	r31
     bda:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     bde:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     be2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     be6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     bea:	c9 01       	movw	r24, r18
     bec:	03 2e       	mov	r0, r19
     bee:	00 0c       	add	r0, r0
     bf0:	aa 0b       	sbc	r26, r26
     bf2:	bb 0b       	sbc	r27, r27
     bf4:	dc 01       	movw	r26, r24
     bf6:	99 27       	eor	r25, r25
     bf8:	88 27       	eor	r24, r24
     bfa:	60 e0       	ldi	r22, 0x00	; 0
     bfc:	70 e0       	ldi	r23, 0x00	; 0
     bfe:	84 2b       	or	r24, r20
     c00:	95 2b       	or	r25, r21
     c02:	a6 2b       	or	r26, r22
     c04:	b7 2b       	or	r27, r23
     c06:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     c0a:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     c0e:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     c12:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     c16:	b0 9b       	sbis	0x16, 0	; 22
     c18:	1b c0       	rjmp	.+54     	; 0xc50 <__vector_10+0x98>
     c1a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     c1e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     c22:	c9 01       	movw	r24, r18
     c24:	01 96       	adiw	r24, 0x01	; 1
     c26:	09 2e       	mov	r0, r25
     c28:	00 0c       	add	r0, r0
     c2a:	aa 0b       	sbc	r26, r26
     c2c:	bb 0b       	sbc	r27, r27
     c2e:	dc 01       	movw	r26, r24
     c30:	99 27       	eor	r25, r25
     c32:	88 27       	eor	r24, r24
     c34:	60 e0       	ldi	r22, 0x00	; 0
     c36:	70 e0       	ldi	r23, 0x00	; 0
     c38:	84 2b       	or	r24, r20
     c3a:	95 2b       	or	r25, r21
     c3c:	a6 2b       	or	r26, r22
     c3e:	b7 2b       	or	r27, r23
     c40:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     c44:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     c48:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     c4c:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     c50:	e0 91 38 02 	lds	r30, 0x0238	; 0x800238 <mtable+0xa>
     c54:	f0 91 39 02 	lds	r31, 0x0239	; 0x800239 <mtable+0xb>
     c58:	30 97       	sbiw	r30, 0x00	; 0
     c5a:	39 f0       	breq	.+14     	; 0xc6a <__vector_10+0xb2>
     c5c:	65 e0       	ldi	r22, 0x05	; 5
     c5e:	70 e0       	ldi	r23, 0x00	; 0
     c60:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <otable+0xa>
     c64:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <otable+0xb>
     c68:	09 95       	icall
     c6a:	0e 94 85 03 	call	0x70a	; 0x70a <schedule>
     c6e:	ff 91       	pop	r31
     c70:	ef 91       	pop	r30
     c72:	bf 91       	pop	r27
     c74:	af 91       	pop	r26
     c76:	9f 91       	pop	r25
     c78:	8f 91       	pop	r24
     c7a:	7f 91       	pop	r23
     c7c:	6f 91       	pop	r22
     c7e:	5f 91       	pop	r21
     c80:	4f 91       	pop	r20
     c82:	3f 91       	pop	r19
     c84:	2f 91       	pop	r18
     c86:	0f 90       	pop	r0
     c88:	0f be       	out	0x3f, r0	; 63
     c8a:	0f 90       	pop	r0
     c8c:	1f 90       	pop	r1
     c8e:	18 95       	reti

00000c90 <__vector_11>:
     c90:	1f 92       	push	r1
     c92:	0f 92       	push	r0
     c94:	0f b6       	in	r0, 0x3f	; 63
     c96:	0f 92       	push	r0
     c98:	11 24       	eor	r1, r1
     c9a:	2f 93       	push	r18
     c9c:	3f 93       	push	r19
     c9e:	4f 93       	push	r20
     ca0:	5f 93       	push	r21
     ca2:	6f 93       	push	r22
     ca4:	7f 93       	push	r23
     ca6:	8f 93       	push	r24
     ca8:	9f 93       	push	r25
     caa:	af 93       	push	r26
     cac:	bf 93       	push	r27
     cae:	ef 93       	push	r30
     cb0:	ff 93       	push	r31
     cb2:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     cb6:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     cba:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     cbe:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     cc2:	c9 01       	movw	r24, r18
     cc4:	03 2e       	mov	r0, r19
     cc6:	00 0c       	add	r0, r0
     cc8:	aa 0b       	sbc	r26, r26
     cca:	bb 0b       	sbc	r27, r27
     ccc:	dc 01       	movw	r26, r24
     cce:	99 27       	eor	r25, r25
     cd0:	88 27       	eor	r24, r24
     cd2:	60 e0       	ldi	r22, 0x00	; 0
     cd4:	70 e0       	ldi	r23, 0x00	; 0
     cd6:	84 2b       	or	r24, r20
     cd8:	95 2b       	or	r25, r21
     cda:	a6 2b       	or	r26, r22
     cdc:	b7 2b       	or	r27, r23
     cde:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     ce2:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     ce6:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     cea:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     cee:	b0 9b       	sbis	0x16, 0	; 22
     cf0:	1b c0       	rjmp	.+54     	; 0xd28 <__vector_11+0x98>
     cf2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     cf6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     cfa:	c9 01       	movw	r24, r18
     cfc:	01 96       	adiw	r24, 0x01	; 1
     cfe:	09 2e       	mov	r0, r25
     d00:	00 0c       	add	r0, r0
     d02:	aa 0b       	sbc	r26, r26
     d04:	bb 0b       	sbc	r27, r27
     d06:	dc 01       	movw	r26, r24
     d08:	99 27       	eor	r25, r25
     d0a:	88 27       	eor	r24, r24
     d0c:	60 e0       	ldi	r22, 0x00	; 0
     d0e:	70 e0       	ldi	r23, 0x00	; 0
     d10:	84 2b       	or	r24, r20
     d12:	95 2b       	or	r25, r21
     d14:	a6 2b       	or	r26, r22
     d16:	b7 2b       	or	r27, r23
     d18:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     d1c:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     d20:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     d24:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     d28:	e0 91 3a 02 	lds	r30, 0x023A	; 0x80023a <mtable+0xc>
     d2c:	f0 91 3b 02 	lds	r31, 0x023B	; 0x80023b <mtable+0xd>
     d30:	30 97       	sbiw	r30, 0x00	; 0
     d32:	39 f0       	breq	.+14     	; 0xd42 <__vector_11+0xb2>
     d34:	66 e0       	ldi	r22, 0x06	; 6
     d36:	70 e0       	ldi	r23, 0x00	; 0
     d38:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <otable+0xc>
     d3c:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <otable+0xd>
     d40:	09 95       	icall
     d42:	0e 94 85 03 	call	0x70a	; 0x70a <schedule>
     d46:	ff 91       	pop	r31
     d48:	ef 91       	pop	r30
     d4a:	bf 91       	pop	r27
     d4c:	af 91       	pop	r26
     d4e:	9f 91       	pop	r25
     d50:	8f 91       	pop	r24
     d52:	7f 91       	pop	r23
     d54:	6f 91       	pop	r22
     d56:	5f 91       	pop	r21
     d58:	4f 91       	pop	r20
     d5a:	3f 91       	pop	r19
     d5c:	2f 91       	pop	r18
     d5e:	0f 90       	pop	r0
     d60:	0f be       	out	0x3f, r0	; 63
     d62:	0f 90       	pop	r0
     d64:	1f 90       	pop	r1
     d66:	18 95       	reti

00000d68 <__vector_12>:
     d68:	1f 92       	push	r1
     d6a:	0f 92       	push	r0
     d6c:	0f b6       	in	r0, 0x3f	; 63
     d6e:	0f 92       	push	r0
     d70:	11 24       	eor	r1, r1
     d72:	2f 93       	push	r18
     d74:	3f 93       	push	r19
     d76:	4f 93       	push	r20
     d78:	5f 93       	push	r21
     d7a:	6f 93       	push	r22
     d7c:	7f 93       	push	r23
     d7e:	8f 93       	push	r24
     d80:	9f 93       	push	r25
     d82:	af 93       	push	r26
     d84:	bf 93       	push	r27
     d86:	ef 93       	push	r30
     d88:	ff 93       	push	r31
     d8a:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     d8e:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     d92:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     d96:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     d9a:	c9 01       	movw	r24, r18
     d9c:	03 2e       	mov	r0, r19
     d9e:	00 0c       	add	r0, r0
     da0:	aa 0b       	sbc	r26, r26
     da2:	bb 0b       	sbc	r27, r27
     da4:	dc 01       	movw	r26, r24
     da6:	99 27       	eor	r25, r25
     da8:	88 27       	eor	r24, r24
     daa:	60 e0       	ldi	r22, 0x00	; 0
     dac:	70 e0       	ldi	r23, 0x00	; 0
     dae:	84 2b       	or	r24, r20
     db0:	95 2b       	or	r25, r21
     db2:	a6 2b       	or	r26, r22
     db4:	b7 2b       	or	r27, r23
     db6:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     dba:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     dbe:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     dc2:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     dc6:	b0 9b       	sbis	0x16, 0	; 22
     dc8:	1b c0       	rjmp	.+54     	; 0xe00 <__vector_12+0x98>
     dca:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     dce:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     dd2:	c9 01       	movw	r24, r18
     dd4:	01 96       	adiw	r24, 0x01	; 1
     dd6:	09 2e       	mov	r0, r25
     dd8:	00 0c       	add	r0, r0
     dda:	aa 0b       	sbc	r26, r26
     ddc:	bb 0b       	sbc	r27, r27
     dde:	dc 01       	movw	r26, r24
     de0:	99 27       	eor	r25, r25
     de2:	88 27       	eor	r24, r24
     de4:	60 e0       	ldi	r22, 0x00	; 0
     de6:	70 e0       	ldi	r23, 0x00	; 0
     de8:	84 2b       	or	r24, r20
     dea:	95 2b       	or	r25, r21
     dec:	a6 2b       	or	r26, r22
     dee:	b7 2b       	or	r27, r23
     df0:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     df4:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     df8:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     dfc:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     e00:	e0 91 3c 02 	lds	r30, 0x023C	; 0x80023c <mtable+0xe>
     e04:	f0 91 3d 02 	lds	r31, 0x023D	; 0x80023d <mtable+0xf>
     e08:	30 97       	sbiw	r30, 0x00	; 0
     e0a:	39 f0       	breq	.+14     	; 0xe1a <__vector_12+0xb2>
     e0c:	67 e0       	ldi	r22, 0x07	; 7
     e0e:	70 e0       	ldi	r23, 0x00	; 0
     e10:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <otable+0xe>
     e14:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <otable+0xf>
     e18:	09 95       	icall
     e1a:	0e 94 85 03 	call	0x70a	; 0x70a <schedule>
     e1e:	ff 91       	pop	r31
     e20:	ef 91       	pop	r30
     e22:	bf 91       	pop	r27
     e24:	af 91       	pop	r26
     e26:	9f 91       	pop	r25
     e28:	8f 91       	pop	r24
     e2a:	7f 91       	pop	r23
     e2c:	6f 91       	pop	r22
     e2e:	5f 91       	pop	r21
     e30:	4f 91       	pop	r20
     e32:	3f 91       	pop	r19
     e34:	2f 91       	pop	r18
     e36:	0f 90       	pop	r0
     e38:	0f be       	out	0x3f, r0	; 63
     e3a:	0f 90       	pop	r0
     e3c:	1f 90       	pop	r1
     e3e:	18 95       	reti

00000e40 <__vector_13>:
     e40:	1f 92       	push	r1
     e42:	0f 92       	push	r0
     e44:	0f b6       	in	r0, 0x3f	; 63
     e46:	0f 92       	push	r0
     e48:	11 24       	eor	r1, r1
     e4a:	2f 93       	push	r18
     e4c:	3f 93       	push	r19
     e4e:	4f 93       	push	r20
     e50:	5f 93       	push	r21
     e52:	6f 93       	push	r22
     e54:	7f 93       	push	r23
     e56:	8f 93       	push	r24
     e58:	9f 93       	push	r25
     e5a:	af 93       	push	r26
     e5c:	bf 93       	push	r27
     e5e:	ef 93       	push	r30
     e60:	ff 93       	push	r31
     e62:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     e66:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     e6a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     e6e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     e72:	c9 01       	movw	r24, r18
     e74:	03 2e       	mov	r0, r19
     e76:	00 0c       	add	r0, r0
     e78:	aa 0b       	sbc	r26, r26
     e7a:	bb 0b       	sbc	r27, r27
     e7c:	dc 01       	movw	r26, r24
     e7e:	99 27       	eor	r25, r25
     e80:	88 27       	eor	r24, r24
     e82:	60 e0       	ldi	r22, 0x00	; 0
     e84:	70 e0       	ldi	r23, 0x00	; 0
     e86:	84 2b       	or	r24, r20
     e88:	95 2b       	or	r25, r21
     e8a:	a6 2b       	or	r26, r22
     e8c:	b7 2b       	or	r27, r23
     e8e:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     e92:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     e96:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     e9a:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     e9e:	b0 9b       	sbis	0x16, 0	; 22
     ea0:	1b c0       	rjmp	.+54     	; 0xed8 <__vector_13+0x98>
     ea2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     ea6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     eaa:	c9 01       	movw	r24, r18
     eac:	01 96       	adiw	r24, 0x01	; 1
     eae:	09 2e       	mov	r0, r25
     eb0:	00 0c       	add	r0, r0
     eb2:	aa 0b       	sbc	r26, r26
     eb4:	bb 0b       	sbc	r27, r27
     eb6:	dc 01       	movw	r26, r24
     eb8:	99 27       	eor	r25, r25
     eba:	88 27       	eor	r24, r24
     ebc:	60 e0       	ldi	r22, 0x00	; 0
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	84 2b       	or	r24, r20
     ec2:	95 2b       	or	r25, r21
     ec4:	a6 2b       	or	r26, r22
     ec6:	b7 2b       	or	r27, r23
     ec8:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     ecc:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     ed0:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     ed4:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     ed8:	e0 91 3e 02 	lds	r30, 0x023E	; 0x80023e <mtable+0x10>
     edc:	f0 91 3f 02 	lds	r31, 0x023F	; 0x80023f <mtable+0x11>
     ee0:	30 97       	sbiw	r30, 0x00	; 0
     ee2:	39 f0       	breq	.+14     	; 0xef2 <__vector_13+0xb2>
     ee4:	68 e0       	ldi	r22, 0x08	; 8
     ee6:	70 e0       	ldi	r23, 0x00	; 0
     ee8:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <otable+0x10>
     eec:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <otable+0x11>
     ef0:	09 95       	icall
     ef2:	0e 94 85 03 	call	0x70a	; 0x70a <schedule>
     ef6:	ff 91       	pop	r31
     ef8:	ef 91       	pop	r30
     efa:	bf 91       	pop	r27
     efc:	af 91       	pop	r26
     efe:	9f 91       	pop	r25
     f00:	8f 91       	pop	r24
     f02:	7f 91       	pop	r23
     f04:	6f 91       	pop	r22
     f06:	5f 91       	pop	r21
     f08:	4f 91       	pop	r20
     f0a:	3f 91       	pop	r19
     f0c:	2f 91       	pop	r18
     f0e:	0f 90       	pop	r0
     f10:	0f be       	out	0x3f, r0	; 63
     f12:	0f 90       	pop	r0
     f14:	1f 90       	pop	r1
     f16:	18 95       	reti

00000f18 <__vector_14>:
     f18:	1f 92       	push	r1
     f1a:	0f 92       	push	r0
     f1c:	0f b6       	in	r0, 0x3f	; 63
     f1e:	0f 92       	push	r0
     f20:	11 24       	eor	r1, r1
     f22:	2f 93       	push	r18
     f24:	3f 93       	push	r19
     f26:	4f 93       	push	r20
     f28:	5f 93       	push	r21
     f2a:	6f 93       	push	r22
     f2c:	7f 93       	push	r23
     f2e:	8f 93       	push	r24
     f30:	9f 93       	push	r25
     f32:	af 93       	push	r26
     f34:	bf 93       	push	r27
     f36:	ef 93       	push	r30
     f38:	ff 93       	push	r31
     f3a:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
     f3e:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
     f42:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     f46:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     f4a:	c9 01       	movw	r24, r18
     f4c:	03 2e       	mov	r0, r19
     f4e:	00 0c       	add	r0, r0
     f50:	aa 0b       	sbc	r26, r26
     f52:	bb 0b       	sbc	r27, r27
     f54:	dc 01       	movw	r26, r24
     f56:	99 27       	eor	r25, r25
     f58:	88 27       	eor	r24, r24
     f5a:	60 e0       	ldi	r22, 0x00	; 0
     f5c:	70 e0       	ldi	r23, 0x00	; 0
     f5e:	84 2b       	or	r24, r20
     f60:	95 2b       	or	r25, r21
     f62:	a6 2b       	or	r26, r22
     f64:	b7 2b       	or	r27, r23
     f66:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     f6a:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     f6e:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     f72:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     f76:	b0 9b       	sbis	0x16, 0	; 22
     f78:	1b c0       	rjmp	.+54     	; 0xfb0 <__vector_14+0x98>
     f7a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     f7e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     f82:	c9 01       	movw	r24, r18
     f84:	01 96       	adiw	r24, 0x01	; 1
     f86:	09 2e       	mov	r0, r25
     f88:	00 0c       	add	r0, r0
     f8a:	aa 0b       	sbc	r26, r26
     f8c:	bb 0b       	sbc	r27, r27
     f8e:	dc 01       	movw	r26, r24
     f90:	99 27       	eor	r25, r25
     f92:	88 27       	eor	r24, r24
     f94:	60 e0       	ldi	r22, 0x00	; 0
     f96:	70 e0       	ldi	r23, 0x00	; 0
     f98:	84 2b       	or	r24, r20
     f9a:	95 2b       	or	r25, r21
     f9c:	a6 2b       	or	r26, r22
     f9e:	b7 2b       	or	r27, r23
     fa0:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
     fa4:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
     fa8:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
     fac:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
     fb0:	e0 91 40 02 	lds	r30, 0x0240	; 0x800240 <mtable+0x12>
     fb4:	f0 91 41 02 	lds	r31, 0x0241	; 0x800241 <mtable+0x13>
     fb8:	30 97       	sbiw	r30, 0x00	; 0
     fba:	39 f0       	breq	.+14     	; 0xfca <__vector_14+0xb2>
     fbc:	69 e0       	ldi	r22, 0x09	; 9
     fbe:	70 e0       	ldi	r23, 0x00	; 0
     fc0:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <otable+0x12>
     fc4:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <otable+0x13>
     fc8:	09 95       	icall
     fca:	0e 94 85 03 	call	0x70a	; 0x70a <schedule>
     fce:	ff 91       	pop	r31
     fd0:	ef 91       	pop	r30
     fd2:	bf 91       	pop	r27
     fd4:	af 91       	pop	r26
     fd6:	9f 91       	pop	r25
     fd8:	8f 91       	pop	r24
     fda:	7f 91       	pop	r23
     fdc:	6f 91       	pop	r22
     fde:	5f 91       	pop	r21
     fe0:	4f 91       	pop	r20
     fe2:	3f 91       	pop	r19
     fe4:	2f 91       	pop	r18
     fe6:	0f 90       	pop	r0
     fe8:	0f be       	out	0x3f, r0	; 63
     fea:	0f 90       	pop	r0
     fec:	1f 90       	pop	r1
     fee:	18 95       	reti

00000ff0 <__vector_15>:
     ff0:	1f 92       	push	r1
     ff2:	0f 92       	push	r0
     ff4:	0f b6       	in	r0, 0x3f	; 63
     ff6:	0f 92       	push	r0
     ff8:	11 24       	eor	r1, r1
     ffa:	2f 93       	push	r18
     ffc:	3f 93       	push	r19
     ffe:	4f 93       	push	r20
    1000:	5f 93       	push	r21
    1002:	6f 93       	push	r22
    1004:	7f 93       	push	r23
    1006:	8f 93       	push	r24
    1008:	9f 93       	push	r25
    100a:	af 93       	push	r26
    100c:	bf 93       	push	r27
    100e:	ef 93       	push	r30
    1010:	ff 93       	push	r31
    1012:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    1016:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    101a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    101e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1022:	c9 01       	movw	r24, r18
    1024:	03 2e       	mov	r0, r19
    1026:	00 0c       	add	r0, r0
    1028:	aa 0b       	sbc	r26, r26
    102a:	bb 0b       	sbc	r27, r27
    102c:	dc 01       	movw	r26, r24
    102e:	99 27       	eor	r25, r25
    1030:	88 27       	eor	r24, r24
    1032:	60 e0       	ldi	r22, 0x00	; 0
    1034:	70 e0       	ldi	r23, 0x00	; 0
    1036:	84 2b       	or	r24, r20
    1038:	95 2b       	or	r25, r21
    103a:	a6 2b       	or	r26, r22
    103c:	b7 2b       	or	r27, r23
    103e:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    1042:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    1046:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    104a:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    104e:	b0 9b       	sbis	0x16, 0	; 22
    1050:	1b c0       	rjmp	.+54     	; 0x1088 <__vector_15+0x98>
    1052:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1056:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    105a:	c9 01       	movw	r24, r18
    105c:	01 96       	adiw	r24, 0x01	; 1
    105e:	09 2e       	mov	r0, r25
    1060:	00 0c       	add	r0, r0
    1062:	aa 0b       	sbc	r26, r26
    1064:	bb 0b       	sbc	r27, r27
    1066:	dc 01       	movw	r26, r24
    1068:	99 27       	eor	r25, r25
    106a:	88 27       	eor	r24, r24
    106c:	60 e0       	ldi	r22, 0x00	; 0
    106e:	70 e0       	ldi	r23, 0x00	; 0
    1070:	84 2b       	or	r24, r20
    1072:	95 2b       	or	r25, r21
    1074:	a6 2b       	or	r26, r22
    1076:	b7 2b       	or	r27, r23
    1078:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    107c:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    1080:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    1084:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    1088:	e0 91 42 02 	lds	r30, 0x0242	; 0x800242 <mtable+0x14>
    108c:	f0 91 43 02 	lds	r31, 0x0243	; 0x800243 <mtable+0x15>
    1090:	30 97       	sbiw	r30, 0x00	; 0
    1092:	39 f0       	breq	.+14     	; 0x10a2 <__vector_15+0xb2>
    1094:	6a e0       	ldi	r22, 0x0A	; 10
    1096:	70 e0       	ldi	r23, 0x00	; 0
    1098:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <otable+0x14>
    109c:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <otable+0x15>
    10a0:	09 95       	icall
    10a2:	0e 94 85 03 	call	0x70a	; 0x70a <schedule>
    10a6:	ff 91       	pop	r31
    10a8:	ef 91       	pop	r30
    10aa:	bf 91       	pop	r27
    10ac:	af 91       	pop	r26
    10ae:	9f 91       	pop	r25
    10b0:	8f 91       	pop	r24
    10b2:	7f 91       	pop	r23
    10b4:	6f 91       	pop	r22
    10b6:	5f 91       	pop	r21
    10b8:	4f 91       	pop	r20
    10ba:	3f 91       	pop	r19
    10bc:	2f 91       	pop	r18
    10be:	0f 90       	pop	r0
    10c0:	0f be       	out	0x3f, r0	; 63
    10c2:	0f 90       	pop	r0
    10c4:	1f 90       	pop	r1
    10c6:	18 95       	reti

000010c8 <__vector_16>:
    10c8:	1f 92       	push	r1
    10ca:	0f 92       	push	r0
    10cc:	0f b6       	in	r0, 0x3f	; 63
    10ce:	0f 92       	push	r0
    10d0:	11 24       	eor	r1, r1
    10d2:	2f 93       	push	r18
    10d4:	3f 93       	push	r19
    10d6:	4f 93       	push	r20
    10d8:	5f 93       	push	r21
    10da:	6f 93       	push	r22
    10dc:	7f 93       	push	r23
    10de:	8f 93       	push	r24
    10e0:	9f 93       	push	r25
    10e2:	af 93       	push	r26
    10e4:	bf 93       	push	r27
    10e6:	ef 93       	push	r30
    10e8:	ff 93       	push	r31
    10ea:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    10ee:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    10f2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    10f6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    10fa:	c9 01       	movw	r24, r18
    10fc:	03 2e       	mov	r0, r19
    10fe:	00 0c       	add	r0, r0
    1100:	aa 0b       	sbc	r26, r26
    1102:	bb 0b       	sbc	r27, r27
    1104:	dc 01       	movw	r26, r24
    1106:	99 27       	eor	r25, r25
    1108:	88 27       	eor	r24, r24
    110a:	60 e0       	ldi	r22, 0x00	; 0
    110c:	70 e0       	ldi	r23, 0x00	; 0
    110e:	84 2b       	or	r24, r20
    1110:	95 2b       	or	r25, r21
    1112:	a6 2b       	or	r26, r22
    1114:	b7 2b       	or	r27, r23
    1116:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    111a:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    111e:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    1122:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    1126:	b0 9b       	sbis	0x16, 0	; 22
    1128:	1b c0       	rjmp	.+54     	; 0x1160 <__vector_16+0x98>
    112a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    112e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1132:	c9 01       	movw	r24, r18
    1134:	01 96       	adiw	r24, 0x01	; 1
    1136:	09 2e       	mov	r0, r25
    1138:	00 0c       	add	r0, r0
    113a:	aa 0b       	sbc	r26, r26
    113c:	bb 0b       	sbc	r27, r27
    113e:	dc 01       	movw	r26, r24
    1140:	99 27       	eor	r25, r25
    1142:	88 27       	eor	r24, r24
    1144:	60 e0       	ldi	r22, 0x00	; 0
    1146:	70 e0       	ldi	r23, 0x00	; 0
    1148:	84 2b       	or	r24, r20
    114a:	95 2b       	or	r25, r21
    114c:	a6 2b       	or	r26, r22
    114e:	b7 2b       	or	r27, r23
    1150:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    1154:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    1158:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    115c:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    1160:	e0 91 44 02 	lds	r30, 0x0244	; 0x800244 <mtable+0x16>
    1164:	f0 91 45 02 	lds	r31, 0x0245	; 0x800245 <mtable+0x17>
    1168:	30 97       	sbiw	r30, 0x00	; 0
    116a:	39 f0       	breq	.+14     	; 0x117a <__vector_16+0xb2>
    116c:	6b e0       	ldi	r22, 0x0B	; 11
    116e:	70 e0       	ldi	r23, 0x00	; 0
    1170:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <otable+0x16>
    1174:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <otable+0x17>
    1178:	09 95       	icall
    117a:	0e 94 85 03 	call	0x70a	; 0x70a <schedule>
    117e:	ff 91       	pop	r31
    1180:	ef 91       	pop	r30
    1182:	bf 91       	pop	r27
    1184:	af 91       	pop	r26
    1186:	9f 91       	pop	r25
    1188:	8f 91       	pop	r24
    118a:	7f 91       	pop	r23
    118c:	6f 91       	pop	r22
    118e:	5f 91       	pop	r21
    1190:	4f 91       	pop	r20
    1192:	3f 91       	pop	r19
    1194:	2f 91       	pop	r18
    1196:	0f 90       	pop	r0
    1198:	0f be       	out	0x3f, r0	; 63
    119a:	0f 90       	pop	r0
    119c:	1f 90       	pop	r1
    119e:	18 95       	reti

000011a0 <__vector_17>:
    11a0:	1f 92       	push	r1
    11a2:	0f 92       	push	r0
    11a4:	0f b6       	in	r0, 0x3f	; 63
    11a6:	0f 92       	push	r0
    11a8:	11 24       	eor	r1, r1
    11aa:	2f 93       	push	r18
    11ac:	3f 93       	push	r19
    11ae:	4f 93       	push	r20
    11b0:	5f 93       	push	r21
    11b2:	6f 93       	push	r22
    11b4:	7f 93       	push	r23
    11b6:	8f 93       	push	r24
    11b8:	9f 93       	push	r25
    11ba:	af 93       	push	r26
    11bc:	bf 93       	push	r27
    11be:	ef 93       	push	r30
    11c0:	ff 93       	push	r31
    11c2:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    11c6:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    11ca:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    11ce:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    11d2:	c9 01       	movw	r24, r18
    11d4:	03 2e       	mov	r0, r19
    11d6:	00 0c       	add	r0, r0
    11d8:	aa 0b       	sbc	r26, r26
    11da:	bb 0b       	sbc	r27, r27
    11dc:	dc 01       	movw	r26, r24
    11de:	99 27       	eor	r25, r25
    11e0:	88 27       	eor	r24, r24
    11e2:	60 e0       	ldi	r22, 0x00	; 0
    11e4:	70 e0       	ldi	r23, 0x00	; 0
    11e6:	84 2b       	or	r24, r20
    11e8:	95 2b       	or	r25, r21
    11ea:	a6 2b       	or	r26, r22
    11ec:	b7 2b       	or	r27, r23
    11ee:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    11f2:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    11f6:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    11fa:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    11fe:	b0 9b       	sbis	0x16, 0	; 22
    1200:	1b c0       	rjmp	.+54     	; 0x1238 <__vector_17+0x98>
    1202:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1206:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    120a:	c9 01       	movw	r24, r18
    120c:	01 96       	adiw	r24, 0x01	; 1
    120e:	09 2e       	mov	r0, r25
    1210:	00 0c       	add	r0, r0
    1212:	aa 0b       	sbc	r26, r26
    1214:	bb 0b       	sbc	r27, r27
    1216:	dc 01       	movw	r26, r24
    1218:	99 27       	eor	r25, r25
    121a:	88 27       	eor	r24, r24
    121c:	60 e0       	ldi	r22, 0x00	; 0
    121e:	70 e0       	ldi	r23, 0x00	; 0
    1220:	84 2b       	or	r24, r20
    1222:	95 2b       	or	r25, r21
    1224:	a6 2b       	or	r26, r22
    1226:	b7 2b       	or	r27, r23
    1228:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    122c:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    1230:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    1234:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    1238:	e0 91 46 02 	lds	r30, 0x0246	; 0x800246 <mtable+0x18>
    123c:	f0 91 47 02 	lds	r31, 0x0247	; 0x800247 <mtable+0x19>
    1240:	30 97       	sbiw	r30, 0x00	; 0
    1242:	39 f0       	breq	.+14     	; 0x1252 <__vector_17+0xb2>
    1244:	6c e0       	ldi	r22, 0x0C	; 12
    1246:	70 e0       	ldi	r23, 0x00	; 0
    1248:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <otable+0x18>
    124c:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <otable+0x19>
    1250:	09 95       	icall
    1252:	0e 94 85 03 	call	0x70a	; 0x70a <schedule>
    1256:	ff 91       	pop	r31
    1258:	ef 91       	pop	r30
    125a:	bf 91       	pop	r27
    125c:	af 91       	pop	r26
    125e:	9f 91       	pop	r25
    1260:	8f 91       	pop	r24
    1262:	7f 91       	pop	r23
    1264:	6f 91       	pop	r22
    1266:	5f 91       	pop	r21
    1268:	4f 91       	pop	r20
    126a:	3f 91       	pop	r19
    126c:	2f 91       	pop	r18
    126e:	0f 90       	pop	r0
    1270:	0f be       	out	0x3f, r0	; 63
    1272:	0f 90       	pop	r0
    1274:	1f 90       	pop	r1
    1276:	18 95       	reti

00001278 <__vector_18>:
    1278:	1f 92       	push	r1
    127a:	0f 92       	push	r0
    127c:	0f b6       	in	r0, 0x3f	; 63
    127e:	0f 92       	push	r0
    1280:	11 24       	eor	r1, r1
    1282:	2f 93       	push	r18
    1284:	3f 93       	push	r19
    1286:	4f 93       	push	r20
    1288:	5f 93       	push	r21
    128a:	6f 93       	push	r22
    128c:	7f 93       	push	r23
    128e:	8f 93       	push	r24
    1290:	9f 93       	push	r25
    1292:	af 93       	push	r26
    1294:	bf 93       	push	r27
    1296:	ef 93       	push	r30
    1298:	ff 93       	push	r31
    129a:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    129e:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    12a2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    12a6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    12aa:	c9 01       	movw	r24, r18
    12ac:	03 2e       	mov	r0, r19
    12ae:	00 0c       	add	r0, r0
    12b0:	aa 0b       	sbc	r26, r26
    12b2:	bb 0b       	sbc	r27, r27
    12b4:	dc 01       	movw	r26, r24
    12b6:	99 27       	eor	r25, r25
    12b8:	88 27       	eor	r24, r24
    12ba:	60 e0       	ldi	r22, 0x00	; 0
    12bc:	70 e0       	ldi	r23, 0x00	; 0
    12be:	84 2b       	or	r24, r20
    12c0:	95 2b       	or	r25, r21
    12c2:	a6 2b       	or	r26, r22
    12c4:	b7 2b       	or	r27, r23
    12c6:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    12ca:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    12ce:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    12d2:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    12d6:	b0 9b       	sbis	0x16, 0	; 22
    12d8:	1b c0       	rjmp	.+54     	; 0x1310 <__vector_18+0x98>
    12da:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    12de:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    12e2:	c9 01       	movw	r24, r18
    12e4:	01 96       	adiw	r24, 0x01	; 1
    12e6:	09 2e       	mov	r0, r25
    12e8:	00 0c       	add	r0, r0
    12ea:	aa 0b       	sbc	r26, r26
    12ec:	bb 0b       	sbc	r27, r27
    12ee:	dc 01       	movw	r26, r24
    12f0:	99 27       	eor	r25, r25
    12f2:	88 27       	eor	r24, r24
    12f4:	60 e0       	ldi	r22, 0x00	; 0
    12f6:	70 e0       	ldi	r23, 0x00	; 0
    12f8:	84 2b       	or	r24, r20
    12fa:	95 2b       	or	r25, r21
    12fc:	a6 2b       	or	r26, r22
    12fe:	b7 2b       	or	r27, r23
    1300:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    1304:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    1308:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    130c:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    1310:	e0 91 48 02 	lds	r30, 0x0248	; 0x800248 <mtable+0x1a>
    1314:	f0 91 49 02 	lds	r31, 0x0249	; 0x800249 <mtable+0x1b>
    1318:	30 97       	sbiw	r30, 0x00	; 0
    131a:	39 f0       	breq	.+14     	; 0x132a <__vector_18+0xb2>
    131c:	6d e0       	ldi	r22, 0x0D	; 13
    131e:	70 e0       	ldi	r23, 0x00	; 0
    1320:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <otable+0x1a>
    1324:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <otable+0x1b>
    1328:	09 95       	icall
    132a:	0e 94 85 03 	call	0x70a	; 0x70a <schedule>
    132e:	ff 91       	pop	r31
    1330:	ef 91       	pop	r30
    1332:	bf 91       	pop	r27
    1334:	af 91       	pop	r26
    1336:	9f 91       	pop	r25
    1338:	8f 91       	pop	r24
    133a:	7f 91       	pop	r23
    133c:	6f 91       	pop	r22
    133e:	5f 91       	pop	r21
    1340:	4f 91       	pop	r20
    1342:	3f 91       	pop	r19
    1344:	2f 91       	pop	r18
    1346:	0f 90       	pop	r0
    1348:	0f be       	out	0x3f, r0	; 63
    134a:	0f 90       	pop	r0
    134c:	1f 90       	pop	r1
    134e:	18 95       	reti

00001350 <__vector_19>:
    1350:	1f 92       	push	r1
    1352:	0f 92       	push	r0
    1354:	0f b6       	in	r0, 0x3f	; 63
    1356:	0f 92       	push	r0
    1358:	11 24       	eor	r1, r1
    135a:	2f 93       	push	r18
    135c:	3f 93       	push	r19
    135e:	4f 93       	push	r20
    1360:	5f 93       	push	r21
    1362:	6f 93       	push	r22
    1364:	7f 93       	push	r23
    1366:	8f 93       	push	r24
    1368:	9f 93       	push	r25
    136a:	af 93       	push	r26
    136c:	bf 93       	push	r27
    136e:	ef 93       	push	r30
    1370:	ff 93       	push	r31
    1372:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    1376:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    137a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    137e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1382:	c9 01       	movw	r24, r18
    1384:	03 2e       	mov	r0, r19
    1386:	00 0c       	add	r0, r0
    1388:	aa 0b       	sbc	r26, r26
    138a:	bb 0b       	sbc	r27, r27
    138c:	dc 01       	movw	r26, r24
    138e:	99 27       	eor	r25, r25
    1390:	88 27       	eor	r24, r24
    1392:	60 e0       	ldi	r22, 0x00	; 0
    1394:	70 e0       	ldi	r23, 0x00	; 0
    1396:	84 2b       	or	r24, r20
    1398:	95 2b       	or	r25, r21
    139a:	a6 2b       	or	r26, r22
    139c:	b7 2b       	or	r27, r23
    139e:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    13a2:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    13a6:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    13aa:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    13ae:	b0 9b       	sbis	0x16, 0	; 22
    13b0:	1b c0       	rjmp	.+54     	; 0x13e8 <__vector_19+0x98>
    13b2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    13b6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    13ba:	c9 01       	movw	r24, r18
    13bc:	01 96       	adiw	r24, 0x01	; 1
    13be:	09 2e       	mov	r0, r25
    13c0:	00 0c       	add	r0, r0
    13c2:	aa 0b       	sbc	r26, r26
    13c4:	bb 0b       	sbc	r27, r27
    13c6:	dc 01       	movw	r26, r24
    13c8:	99 27       	eor	r25, r25
    13ca:	88 27       	eor	r24, r24
    13cc:	60 e0       	ldi	r22, 0x00	; 0
    13ce:	70 e0       	ldi	r23, 0x00	; 0
    13d0:	84 2b       	or	r24, r20
    13d2:	95 2b       	or	r25, r21
    13d4:	a6 2b       	or	r26, r22
    13d6:	b7 2b       	or	r27, r23
    13d8:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    13dc:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    13e0:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    13e4:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    13e8:	e0 91 4a 02 	lds	r30, 0x024A	; 0x80024a <mtable+0x1c>
    13ec:	f0 91 4b 02 	lds	r31, 0x024B	; 0x80024b <mtable+0x1d>
    13f0:	30 97       	sbiw	r30, 0x00	; 0
    13f2:	39 f0       	breq	.+14     	; 0x1402 <__vector_19+0xb2>
    13f4:	6e e0       	ldi	r22, 0x0E	; 14
    13f6:	70 e0       	ldi	r23, 0x00	; 0
    13f8:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <otable+0x1c>
    13fc:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <otable+0x1d>
    1400:	09 95       	icall
    1402:	0e 94 85 03 	call	0x70a	; 0x70a <schedule>
    1406:	ff 91       	pop	r31
    1408:	ef 91       	pop	r30
    140a:	bf 91       	pop	r27
    140c:	af 91       	pop	r26
    140e:	9f 91       	pop	r25
    1410:	8f 91       	pop	r24
    1412:	7f 91       	pop	r23
    1414:	6f 91       	pop	r22
    1416:	5f 91       	pop	r21
    1418:	4f 91       	pop	r20
    141a:	3f 91       	pop	r19
    141c:	2f 91       	pop	r18
    141e:	0f 90       	pop	r0
    1420:	0f be       	out	0x3f, r0	; 63
    1422:	0f 90       	pop	r0
    1424:	1f 90       	pop	r1
    1426:	18 95       	reti

00001428 <__vector_20>:
    1428:	1f 92       	push	r1
    142a:	0f 92       	push	r0
    142c:	0f b6       	in	r0, 0x3f	; 63
    142e:	0f 92       	push	r0
    1430:	11 24       	eor	r1, r1
    1432:	2f 93       	push	r18
    1434:	3f 93       	push	r19
    1436:	4f 93       	push	r20
    1438:	5f 93       	push	r21
    143a:	6f 93       	push	r22
    143c:	7f 93       	push	r23
    143e:	8f 93       	push	r24
    1440:	9f 93       	push	r25
    1442:	af 93       	push	r26
    1444:	bf 93       	push	r27
    1446:	ef 93       	push	r30
    1448:	ff 93       	push	r31
    144a:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    144e:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    1452:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1456:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    145a:	c9 01       	movw	r24, r18
    145c:	03 2e       	mov	r0, r19
    145e:	00 0c       	add	r0, r0
    1460:	aa 0b       	sbc	r26, r26
    1462:	bb 0b       	sbc	r27, r27
    1464:	dc 01       	movw	r26, r24
    1466:	99 27       	eor	r25, r25
    1468:	88 27       	eor	r24, r24
    146a:	60 e0       	ldi	r22, 0x00	; 0
    146c:	70 e0       	ldi	r23, 0x00	; 0
    146e:	84 2b       	or	r24, r20
    1470:	95 2b       	or	r25, r21
    1472:	a6 2b       	or	r26, r22
    1474:	b7 2b       	or	r27, r23
    1476:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    147a:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    147e:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    1482:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    1486:	b0 9b       	sbis	0x16, 0	; 22
    1488:	1b c0       	rjmp	.+54     	; 0x14c0 <__vector_20+0x98>
    148a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    148e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1492:	c9 01       	movw	r24, r18
    1494:	01 96       	adiw	r24, 0x01	; 1
    1496:	09 2e       	mov	r0, r25
    1498:	00 0c       	add	r0, r0
    149a:	aa 0b       	sbc	r26, r26
    149c:	bb 0b       	sbc	r27, r27
    149e:	dc 01       	movw	r26, r24
    14a0:	99 27       	eor	r25, r25
    14a2:	88 27       	eor	r24, r24
    14a4:	60 e0       	ldi	r22, 0x00	; 0
    14a6:	70 e0       	ldi	r23, 0x00	; 0
    14a8:	84 2b       	or	r24, r20
    14aa:	95 2b       	or	r25, r21
    14ac:	a6 2b       	or	r26, r22
    14ae:	b7 2b       	or	r27, r23
    14b0:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    14b4:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    14b8:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    14bc:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    14c0:	e0 91 4c 02 	lds	r30, 0x024C	; 0x80024c <mtable+0x1e>
    14c4:	f0 91 4d 02 	lds	r31, 0x024D	; 0x80024d <mtable+0x1f>
    14c8:	30 97       	sbiw	r30, 0x00	; 0
    14ca:	39 f0       	breq	.+14     	; 0x14da <__vector_20+0xb2>
    14cc:	6f e0       	ldi	r22, 0x0F	; 15
    14ce:	70 e0       	ldi	r23, 0x00	; 0
    14d0:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <otable+0x1e>
    14d4:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <otable+0x1f>
    14d8:	09 95       	icall
    14da:	0e 94 85 03 	call	0x70a	; 0x70a <schedule>
    14de:	ff 91       	pop	r31
    14e0:	ef 91       	pop	r30
    14e2:	bf 91       	pop	r27
    14e4:	af 91       	pop	r26
    14e6:	9f 91       	pop	r25
    14e8:	8f 91       	pop	r24
    14ea:	7f 91       	pop	r23
    14ec:	6f 91       	pop	r22
    14ee:	5f 91       	pop	r21
    14f0:	4f 91       	pop	r20
    14f2:	3f 91       	pop	r19
    14f4:	2f 91       	pop	r18
    14f6:	0f 90       	pop	r0
    14f8:	0f be       	out	0x3f, r0	; 63
    14fa:	0f 90       	pop	r0
    14fc:	1f 90       	pop	r1
    14fe:	18 95       	reti

00001500 <__vector_21>:
    1500:	1f 92       	push	r1
    1502:	0f 92       	push	r0
    1504:	0f b6       	in	r0, 0x3f	; 63
    1506:	0f 92       	push	r0
    1508:	11 24       	eor	r1, r1
    150a:	2f 93       	push	r18
    150c:	3f 93       	push	r19
    150e:	4f 93       	push	r20
    1510:	5f 93       	push	r21
    1512:	6f 93       	push	r22
    1514:	7f 93       	push	r23
    1516:	8f 93       	push	r24
    1518:	9f 93       	push	r25
    151a:	af 93       	push	r26
    151c:	bf 93       	push	r27
    151e:	ef 93       	push	r30
    1520:	ff 93       	push	r31
    1522:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    1526:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    152a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    152e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1532:	c9 01       	movw	r24, r18
    1534:	03 2e       	mov	r0, r19
    1536:	00 0c       	add	r0, r0
    1538:	aa 0b       	sbc	r26, r26
    153a:	bb 0b       	sbc	r27, r27
    153c:	dc 01       	movw	r26, r24
    153e:	99 27       	eor	r25, r25
    1540:	88 27       	eor	r24, r24
    1542:	60 e0       	ldi	r22, 0x00	; 0
    1544:	70 e0       	ldi	r23, 0x00	; 0
    1546:	84 2b       	or	r24, r20
    1548:	95 2b       	or	r25, r21
    154a:	a6 2b       	or	r26, r22
    154c:	b7 2b       	or	r27, r23
    154e:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    1552:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    1556:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    155a:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    155e:	b0 9b       	sbis	0x16, 0	; 22
    1560:	1b c0       	rjmp	.+54     	; 0x1598 <__vector_21+0x98>
    1562:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1566:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    156a:	c9 01       	movw	r24, r18
    156c:	01 96       	adiw	r24, 0x01	; 1
    156e:	09 2e       	mov	r0, r25
    1570:	00 0c       	add	r0, r0
    1572:	aa 0b       	sbc	r26, r26
    1574:	bb 0b       	sbc	r27, r27
    1576:	dc 01       	movw	r26, r24
    1578:	99 27       	eor	r25, r25
    157a:	88 27       	eor	r24, r24
    157c:	60 e0       	ldi	r22, 0x00	; 0
    157e:	70 e0       	ldi	r23, 0x00	; 0
    1580:	84 2b       	or	r24, r20
    1582:	95 2b       	or	r25, r21
    1584:	a6 2b       	or	r26, r22
    1586:	b7 2b       	or	r27, r23
    1588:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    158c:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    1590:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    1594:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    1598:	e0 91 4e 02 	lds	r30, 0x024E	; 0x80024e <mtable+0x20>
    159c:	f0 91 4f 02 	lds	r31, 0x024F	; 0x80024f <mtable+0x21>
    15a0:	30 97       	sbiw	r30, 0x00	; 0
    15a2:	39 f0       	breq	.+14     	; 0x15b2 <__vector_21+0xb2>
    15a4:	60 e1       	ldi	r22, 0x10	; 16
    15a6:	70 e0       	ldi	r23, 0x00	; 0
    15a8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <otable+0x20>
    15ac:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <otable+0x21>
    15b0:	09 95       	icall
    15b2:	0e 94 85 03 	call	0x70a	; 0x70a <schedule>
    15b6:	ff 91       	pop	r31
    15b8:	ef 91       	pop	r30
    15ba:	bf 91       	pop	r27
    15bc:	af 91       	pop	r26
    15be:	9f 91       	pop	r25
    15c0:	8f 91       	pop	r24
    15c2:	7f 91       	pop	r23
    15c4:	6f 91       	pop	r22
    15c6:	5f 91       	pop	r21
    15c8:	4f 91       	pop	r20
    15ca:	3f 91       	pop	r19
    15cc:	2f 91       	pop	r18
    15ce:	0f 90       	pop	r0
    15d0:	0f be       	out	0x3f, r0	; 63
    15d2:	0f 90       	pop	r0
    15d4:	1f 90       	pop	r1
    15d6:	18 95       	reti

000015d8 <__vector_22>:
    15d8:	1f 92       	push	r1
    15da:	0f 92       	push	r0
    15dc:	0f b6       	in	r0, 0x3f	; 63
    15de:	0f 92       	push	r0
    15e0:	11 24       	eor	r1, r1
    15e2:	2f 93       	push	r18
    15e4:	3f 93       	push	r19
    15e6:	4f 93       	push	r20
    15e8:	5f 93       	push	r21
    15ea:	6f 93       	push	r22
    15ec:	7f 93       	push	r23
    15ee:	8f 93       	push	r24
    15f0:	9f 93       	push	r25
    15f2:	af 93       	push	r26
    15f4:	bf 93       	push	r27
    15f6:	ef 93       	push	r30
    15f8:	ff 93       	push	r31
    15fa:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    15fe:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    1602:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1606:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    160a:	c9 01       	movw	r24, r18
    160c:	03 2e       	mov	r0, r19
    160e:	00 0c       	add	r0, r0
    1610:	aa 0b       	sbc	r26, r26
    1612:	bb 0b       	sbc	r27, r27
    1614:	dc 01       	movw	r26, r24
    1616:	99 27       	eor	r25, r25
    1618:	88 27       	eor	r24, r24
    161a:	60 e0       	ldi	r22, 0x00	; 0
    161c:	70 e0       	ldi	r23, 0x00	; 0
    161e:	84 2b       	or	r24, r20
    1620:	95 2b       	or	r25, r21
    1622:	a6 2b       	or	r26, r22
    1624:	b7 2b       	or	r27, r23
    1626:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    162a:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    162e:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    1632:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    1636:	b0 9b       	sbis	0x16, 0	; 22
    1638:	1b c0       	rjmp	.+54     	; 0x1670 <__vector_22+0x98>
    163a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    163e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1642:	c9 01       	movw	r24, r18
    1644:	01 96       	adiw	r24, 0x01	; 1
    1646:	09 2e       	mov	r0, r25
    1648:	00 0c       	add	r0, r0
    164a:	aa 0b       	sbc	r26, r26
    164c:	bb 0b       	sbc	r27, r27
    164e:	dc 01       	movw	r26, r24
    1650:	99 27       	eor	r25, r25
    1652:	88 27       	eor	r24, r24
    1654:	60 e0       	ldi	r22, 0x00	; 0
    1656:	70 e0       	ldi	r23, 0x00	; 0
    1658:	84 2b       	or	r24, r20
    165a:	95 2b       	or	r25, r21
    165c:	a6 2b       	or	r26, r22
    165e:	b7 2b       	or	r27, r23
    1660:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timestamp>
    1664:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timestamp+0x1>
    1668:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <timestamp+0x2>
    166c:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <timestamp+0x3>
    1670:	e0 91 50 02 	lds	r30, 0x0250	; 0x800250 <mtable+0x22>
    1674:	f0 91 51 02 	lds	r31, 0x0251	; 0x800251 <mtable+0x23>
    1678:	30 97       	sbiw	r30, 0x00	; 0
    167a:	39 f0       	breq	.+14     	; 0x168a <__vector_22+0xb2>
    167c:	61 e1       	ldi	r22, 0x11	; 17
    167e:	70 e0       	ldi	r23, 0x00	; 0
    1680:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <otable+0x22>
    1684:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <otable+0x23>
    1688:	09 95       	icall
    168a:	0e 94 85 03 	call	0x70a	; 0x70a <schedule>
    168e:	ff 91       	pop	r31
    1690:	ef 91       	pop	r30
    1692:	bf 91       	pop	r27
    1694:	af 91       	pop	r26
    1696:	9f 91       	pop	r25
    1698:	8f 91       	pop	r24
    169a:	7f 91       	pop	r23
    169c:	6f 91       	pop	r22
    169e:	5f 91       	pop	r21
    16a0:	4f 91       	pop	r20
    16a2:	3f 91       	pop	r19
    16a4:	2f 91       	pop	r18
    16a6:	0f 90       	pop	r0
    16a8:	0f be       	out	0x3f, r0	; 63
    16aa:	0f 90       	pop	r0
    16ac:	1f 90       	pop	r1
    16ae:	18 95       	reti

000016b0 <enqueueByDeadline>:
    16b0:	ef 92       	push	r14
    16b2:	ff 92       	push	r15
    16b4:	0f 93       	push	r16
    16b6:	1f 93       	push	r17
    16b8:	cf 93       	push	r28
    16ba:	df 93       	push	r29
    16bc:	7b 01       	movw	r14, r22
    16be:	eb 01       	movw	r28, r22
    16c0:	a8 81       	ld	r26, Y
    16c2:	b9 81       	ldd	r27, Y+1	; 0x01
    16c4:	10 97       	sbiw	r26, 0x00	; 0
    16c6:	61 f1       	breq	.+88     	; 0x1720 <enqueueByDeadline+0x70>
    16c8:	fc 01       	movw	r30, r24
    16ca:	06 81       	ldd	r16, Z+6	; 0x06
    16cc:	17 81       	ldd	r17, Z+7	; 0x07
    16ce:	20 85       	ldd	r18, Z+8	; 0x08
    16d0:	31 85       	ldd	r19, Z+9	; 0x09
    16d2:	16 96       	adiw	r26, 0x06	; 6
    16d4:	4d 91       	ld	r20, X+
    16d6:	5d 91       	ld	r21, X+
    16d8:	6d 91       	ld	r22, X+
    16da:	7c 91       	ld	r23, X
    16dc:	19 97       	sbiw	r26, 0x09	; 9
    16de:	04 17       	cp	r16, r20
    16e0:	15 07       	cpc	r17, r21
    16e2:	26 07       	cpc	r18, r22
    16e4:	37 07       	cpc	r19, r23
    16e6:	14 f4       	brge	.+4      	; 0x16ec <enqueueByDeadline+0x3c>
    16e8:	1b c0       	rjmp	.+54     	; 0x1720 <enqueueByDeadline+0x70>
    16ea:	df 01       	movw	r26, r30
    16ec:	ed 91       	ld	r30, X+
    16ee:	fc 91       	ld	r31, X
    16f0:	11 97       	sbiw	r26, 0x01	; 1
    16f2:	30 97       	sbiw	r30, 0x00	; 0
    16f4:	49 f0       	breq	.+18     	; 0x1708 <enqueueByDeadline+0x58>
    16f6:	46 81       	ldd	r20, Z+6	; 0x06
    16f8:	57 81       	ldd	r21, Z+7	; 0x07
    16fa:	60 85       	ldd	r22, Z+8	; 0x08
    16fc:	71 85       	ldd	r23, Z+9	; 0x09
    16fe:	04 17       	cp	r16, r20
    1700:	15 07       	cpc	r17, r21
    1702:	26 07       	cpc	r18, r22
    1704:	37 07       	cpc	r19, r23
    1706:	8c f7       	brge	.-30     	; 0x16ea <enqueueByDeadline+0x3a>
    1708:	ec 01       	movw	r28, r24
    170a:	f9 83       	std	Y+1, r31	; 0x01
    170c:	e8 83       	st	Y, r30
    170e:	10 97       	sbiw	r26, 0x00	; 0
    1710:	21 f4       	brne	.+8      	; 0x171a <enqueueByDeadline+0x6a>
    1712:	f7 01       	movw	r30, r14
    1714:	91 83       	std	Z+1, r25	; 0x01
    1716:	80 83       	st	Z, r24
    1718:	07 c0       	rjmp	.+14     	; 0x1728 <enqueueByDeadline+0x78>
    171a:	8d 93       	st	X+, r24
    171c:	9c 93       	st	X, r25
    171e:	04 c0       	rjmp	.+8      	; 0x1728 <enqueueByDeadline+0x78>
    1720:	ec 01       	movw	r28, r24
    1722:	b9 83       	std	Y+1, r27	; 0x01
    1724:	a8 83       	st	Y, r26
    1726:	f5 cf       	rjmp	.-22     	; 0x1712 <enqueueByDeadline+0x62>
    1728:	df 91       	pop	r29
    172a:	cf 91       	pop	r28
    172c:	1f 91       	pop	r17
    172e:	0f 91       	pop	r16
    1730:	ff 90       	pop	r15
    1732:	ef 90       	pop	r14
    1734:	08 95       	ret

00001736 <enqueueByBaseline>:
    1736:	ef 92       	push	r14
    1738:	ff 92       	push	r15
    173a:	0f 93       	push	r16
    173c:	1f 93       	push	r17
    173e:	cf 93       	push	r28
    1740:	df 93       	push	r29
    1742:	7b 01       	movw	r14, r22
    1744:	eb 01       	movw	r28, r22
    1746:	a8 81       	ld	r26, Y
    1748:	b9 81       	ldd	r27, Y+1	; 0x01
    174a:	10 97       	sbiw	r26, 0x00	; 0
    174c:	61 f1       	breq	.+88     	; 0x17a6 <enqueueByBaseline+0x70>
    174e:	fc 01       	movw	r30, r24
    1750:	02 81       	ldd	r16, Z+2	; 0x02
    1752:	13 81       	ldd	r17, Z+3	; 0x03
    1754:	24 81       	ldd	r18, Z+4	; 0x04
    1756:	35 81       	ldd	r19, Z+5	; 0x05
    1758:	12 96       	adiw	r26, 0x02	; 2
    175a:	4d 91       	ld	r20, X+
    175c:	5d 91       	ld	r21, X+
    175e:	6d 91       	ld	r22, X+
    1760:	7c 91       	ld	r23, X
    1762:	15 97       	sbiw	r26, 0x05	; 5
    1764:	04 17       	cp	r16, r20
    1766:	15 07       	cpc	r17, r21
    1768:	26 07       	cpc	r18, r22
    176a:	37 07       	cpc	r19, r23
    176c:	14 f4       	brge	.+4      	; 0x1772 <enqueueByBaseline+0x3c>
    176e:	1b c0       	rjmp	.+54     	; 0x17a6 <enqueueByBaseline+0x70>
    1770:	df 01       	movw	r26, r30
    1772:	ed 91       	ld	r30, X+
    1774:	fc 91       	ld	r31, X
    1776:	11 97       	sbiw	r26, 0x01	; 1
    1778:	30 97       	sbiw	r30, 0x00	; 0
    177a:	49 f0       	breq	.+18     	; 0x178e <enqueueByBaseline+0x58>
    177c:	42 81       	ldd	r20, Z+2	; 0x02
    177e:	53 81       	ldd	r21, Z+3	; 0x03
    1780:	64 81       	ldd	r22, Z+4	; 0x04
    1782:	75 81       	ldd	r23, Z+5	; 0x05
    1784:	04 17       	cp	r16, r20
    1786:	15 07       	cpc	r17, r21
    1788:	26 07       	cpc	r18, r22
    178a:	37 07       	cpc	r19, r23
    178c:	8c f7       	brge	.-30     	; 0x1770 <enqueueByBaseline+0x3a>
    178e:	ec 01       	movw	r28, r24
    1790:	f9 83       	std	Y+1, r31	; 0x01
    1792:	e8 83       	st	Y, r30
    1794:	10 97       	sbiw	r26, 0x00	; 0
    1796:	21 f4       	brne	.+8      	; 0x17a0 <enqueueByBaseline+0x6a>
    1798:	f7 01       	movw	r30, r14
    179a:	91 83       	std	Z+1, r25	; 0x01
    179c:	80 83       	st	Z, r24
    179e:	07 c0       	rjmp	.+14     	; 0x17ae <enqueueByBaseline+0x78>
    17a0:	8d 93       	st	X+, r24
    17a2:	9c 93       	st	X, r25
    17a4:	04 c0       	rjmp	.+8      	; 0x17ae <enqueueByBaseline+0x78>
    17a6:	ec 01       	movw	r28, r24
    17a8:	b9 83       	std	Y+1, r27	; 0x01
    17aa:	a8 83       	st	Y, r26
    17ac:	f5 cf       	rjmp	.-22     	; 0x1798 <enqueueByBaseline+0x62>
    17ae:	df 91       	pop	r29
    17b0:	cf 91       	pop	r28
    17b2:	1f 91       	pop	r17
    17b4:	0f 91       	pop	r16
    17b6:	ff 90       	pop	r15
    17b8:	ef 90       	pop	r14
    17ba:	08 95       	ret

000017bc <dequeue>:
    17bc:	dc 01       	movw	r26, r24
    17be:	ed 91       	ld	r30, X+
    17c0:	fc 91       	ld	r31, X
    17c2:	11 97       	sbiw	r26, 0x01	; 1
    17c4:	30 97       	sbiw	r30, 0x00	; 0
    17c6:	59 f4       	brne	.+22     	; 0x17de <dequeue+0x22>
    17c8:	8f ef       	ldi	r24, 0xFF	; 255
    17ca:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
    17ce:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
    17d2:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	83 bf       	out	0x33, r24	; 51
    17da:	88 95       	sleep
    17dc:	fd cf       	rjmp	.-6      	; 0x17d8 <dequeue+0x1c>
    17de:	20 81       	ld	r18, Z
    17e0:	31 81       	ldd	r19, Z+1	; 0x01
    17e2:	2d 93       	st	X+, r18
    17e4:	3c 93       	st	X, r19
    17e6:	cf 01       	movw	r24, r30
    17e8:	08 95       	ret

000017ea <__vector_9>:
    17ea:	1f 92       	push	r1
    17ec:	0f 92       	push	r0
    17ee:	0f b6       	in	r0, 0x3f	; 63
    17f0:	0f 92       	push	r0
    17f2:	11 24       	eor	r1, r1
    17f4:	2f 93       	push	r18
    17f6:	3f 93       	push	r19
    17f8:	4f 93       	push	r20
    17fa:	5f 93       	push	r21
    17fc:	6f 93       	push	r22
    17fe:	7f 93       	push	r23
    1800:	8f 93       	push	r24
    1802:	9f 93       	push	r25
    1804:	ef 93       	push	r30
    1806:	ff 93       	push	r31
    1808:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <overflows>
    180c:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <overflows+0x1>
    1810:	01 96       	adiw	r24, 0x01	; 1
    1812:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <overflows+0x1>
    1816:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <overflows>
    181a:	e0 91 92 01 	lds	r30, 0x0192	; 0x800192 <timerQ>
    181e:	f0 91 93 01 	lds	r31, 0x0193	; 0x800193 <timerQ+0x1>
    1822:	30 97       	sbiw	r30, 0x00	; 0
    1824:	01 f1       	breq	.+64     	; 0x1866 <__vector_9+0x7c>
    1826:	42 81       	ldd	r20, Z+2	; 0x02
    1828:	53 81       	ldd	r21, Z+3	; 0x03
    182a:	64 81       	ldd	r22, Z+4	; 0x04
    182c:	75 81       	ldd	r23, Z+5	; 0x05
    182e:	86 17       	cp	r24, r22
    1830:	97 07       	cpc	r25, r23
    1832:	c9 f4       	brne	.+50     	; 0x1866 <__vector_9+0x7c>
    1834:	ca 01       	movw	r24, r20
    1836:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    183a:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    183e:	42 1b       	sub	r20, r18
    1840:	53 0b       	sbc	r21, r19
    1842:	41 30       	cpi	r20, 0x01	; 1
    1844:	51 05       	cpc	r21, r1
    1846:	29 f4       	brne	.+10     	; 0x1852 <__vector_9+0x68>
    1848:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    184c:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1850:	01 96       	adiw	r24, 0x01	; 1
    1852:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1856:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    185a:	ef e6       	ldi	r30, 0x6F	; 111
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	82 60       	ori	r24, 0x02	; 2
    1862:	80 83       	st	Z, r24
    1864:	05 c0       	rjmp	.+10     	; 0x1870 <__vector_9+0x86>
    1866:	ef e6       	ldi	r30, 0x6F	; 111
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	80 81       	ld	r24, Z
    186c:	8d 7f       	andi	r24, 0xFD	; 253
    186e:	80 83       	st	Z, r24
    1870:	ff 91       	pop	r31
    1872:	ef 91       	pop	r30
    1874:	9f 91       	pop	r25
    1876:	8f 91       	pop	r24
    1878:	7f 91       	pop	r23
    187a:	6f 91       	pop	r22
    187c:	5f 91       	pop	r21
    187e:	4f 91       	pop	r20
    1880:	3f 91       	pop	r19
    1882:	2f 91       	pop	r18
    1884:	0f 90       	pop	r0
    1886:	0f be       	out	0x3f, r0	; 63
    1888:	0f 90       	pop	r0
    188a:	1f 90       	pop	r1
    188c:	18 95       	reti

0000188e <__vector_7>:
    188e:	1f 92       	push	r1
    1890:	0f 92       	push	r0
    1892:	0f b6       	in	r0, 0x3f	; 63
    1894:	0f 92       	push	r0
    1896:	11 24       	eor	r1, r1
    1898:	cf 92       	push	r12
    189a:	df 92       	push	r13
    189c:	ef 92       	push	r14
    189e:	ff 92       	push	r15
    18a0:	2f 93       	push	r18
    18a2:	3f 93       	push	r19
    18a4:	4f 93       	push	r20
    18a6:	5f 93       	push	r21
    18a8:	6f 93       	push	r22
    18aa:	7f 93       	push	r23
    18ac:	8f 93       	push	r24
    18ae:	9f 93       	push	r25
    18b0:	af 93       	push	r26
    18b2:	bf 93       	push	r27
    18b4:	ef 93       	push	r30
    18b6:	ff 93       	push	r31
    18b8:	c0 90 8c 01 	lds	r12, 0x018C	; 0x80018c <overflows>
    18bc:	d0 90 8d 01 	lds	r13, 0x018D	; 0x80018d <overflows+0x1>
    18c0:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    18c4:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    18c8:	b0 99       	sbic	0x16, 0	; 22
    18ca:	0f c0       	rjmp	.+30     	; 0x18ea <__vector_7+0x5c>
    18cc:	0d 2c       	mov	r0, r13
    18ce:	00 0c       	add	r0, r0
    18d0:	ee 08       	sbc	r14, r14
    18d2:	ff 08       	sbc	r15, r15
    18d4:	d6 01       	movw	r26, r12
    18d6:	99 27       	eor	r25, r25
    18d8:	88 27       	eor	r24, r24
    18da:	69 01       	movw	r12, r18
    18dc:	e1 2c       	mov	r14, r1
    18de:	f1 2c       	mov	r15, r1
    18e0:	c8 2a       	or	r12, r24
    18e2:	d9 2a       	or	r13, r25
    18e4:	ea 2a       	or	r14, r26
    18e6:	fb 2a       	or	r15, r27
    18e8:	15 c0       	rjmp	.+42     	; 0x1914 <__vector_7+0x86>
    18ea:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    18ee:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    18f2:	8f ef       	ldi	r24, 0xFF	; 255
    18f4:	c8 1a       	sub	r12, r24
    18f6:	d8 0a       	sbc	r13, r24
    18f8:	0d 2c       	mov	r0, r13
    18fa:	00 0c       	add	r0, r0
    18fc:	ee 08       	sbc	r14, r14
    18fe:	ff 08       	sbc	r15, r15
    1900:	d6 01       	movw	r26, r12
    1902:	99 27       	eor	r25, r25
    1904:	88 27       	eor	r24, r24
    1906:	69 01       	movw	r12, r18
    1908:	e1 2c       	mov	r14, r1
    190a:	f1 2c       	mov	r15, r1
    190c:	c8 2a       	or	r12, r24
    190e:	d9 2a       	or	r13, r25
    1910:	ea 2a       	or	r14, r26
    1912:	fb 2a       	or	r15, r27
    1914:	e0 91 92 01 	lds	r30, 0x0192	; 0x800192 <timerQ>
    1918:	f0 91 93 01 	lds	r31, 0x0193	; 0x800193 <timerQ+0x1>
    191c:	30 97       	sbiw	r30, 0x00	; 0
    191e:	09 f4       	brne	.+2      	; 0x1922 <__vector_7+0x94>
    1920:	42 c0       	rjmp	.+132    	; 0x19a6 <__vector_7+0x118>
    1922:	82 81       	ldd	r24, Z+2	; 0x02
    1924:	93 81       	ldd	r25, Z+3	; 0x03
    1926:	a4 81       	ldd	r26, Z+4	; 0x04
    1928:	b5 81       	ldd	r27, Z+5	; 0x05
    192a:	8c 19       	sub	r24, r12
    192c:	9d 09       	sbc	r25, r13
    192e:	ae 09       	sbc	r26, r14
    1930:	bf 09       	sbc	r27, r15
    1932:	18 16       	cp	r1, r24
    1934:	19 06       	cpc	r1, r25
    1936:	1a 06       	cpc	r1, r26
    1938:	1b 06       	cpc	r1, r27
    193a:	ec f1       	brlt	.+122    	; 0x19b6 <__vector_7+0x128>
    193c:	82 e9       	ldi	r24, 0x92	; 146
    193e:	91 e0       	ldi	r25, 0x01	; 1
    1940:	0e 94 de 0b 	call	0x17bc	; 0x17bc <dequeue>
    1944:	64 e9       	ldi	r22, 0x94	; 148
    1946:	71 e0       	ldi	r23, 0x01	; 1
    1948:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <enqueueByDeadline>
    194c:	e0 91 92 01 	lds	r30, 0x0192	; 0x800192 <timerQ>
    1950:	f0 91 93 01 	lds	r31, 0x0193	; 0x800193 <timerQ+0x1>
    1954:	30 97       	sbiw	r30, 0x00	; 0
    1956:	39 f1       	breq	.+78     	; 0x19a6 <__vector_7+0x118>
    1958:	82 81       	ldd	r24, Z+2	; 0x02
    195a:	93 81       	ldd	r25, Z+3	; 0x03
    195c:	a4 81       	ldd	r26, Z+4	; 0x04
    195e:	b5 81       	ldd	r27, Z+5	; 0x05
    1960:	8c 19       	sub	r24, r12
    1962:	9d 09       	sbc	r25, r13
    1964:	ae 09       	sbc	r26, r14
    1966:	bf 09       	sbc	r27, r15
    1968:	18 16       	cp	r1, r24
    196a:	19 06       	cpc	r1, r25
    196c:	1a 06       	cpc	r1, r26
    196e:	1b 06       	cpc	r1, r27
    1970:	2c f7       	brge	.-54     	; 0x193c <__vector_7+0xae>
    1972:	21 c0       	rjmp	.+66     	; 0x19b6 <__vector_7+0x128>
    1974:	9c 01       	movw	r18, r24
    1976:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    197a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    197e:	84 1b       	sub	r24, r20
    1980:	95 0b       	sbc	r25, r21
    1982:	01 97       	sbiw	r24, 0x01	; 1
    1984:	31 f4       	brne	.+12     	; 0x1992 <__vector_7+0x104>
    1986:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    198a:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    198e:	2f 5f       	subi	r18, 0xFF	; 255
    1990:	3f 4f       	sbci	r19, 0xFF	; 255
    1992:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1996:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    199a:	ef e6       	ldi	r30, 0x6F	; 111
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	80 81       	ld	r24, Z
    19a0:	82 60       	ori	r24, 0x02	; 2
    19a2:	80 83       	st	Z, r24
    19a4:	05 c0       	rjmp	.+10     	; 0x19b0 <__vector_7+0x122>
    19a6:	ef e6       	ldi	r30, 0x6F	; 111
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 81       	ld	r24, Z
    19ac:	8d 7f       	andi	r24, 0xFD	; 253
    19ae:	80 83       	st	Z, r24
    19b0:	0e 94 85 03 	call	0x70a	; 0x70a <schedule>
    19b4:	0c c0       	rjmp	.+24     	; 0x19ce <__vector_7+0x140>
    19b6:	82 81       	ldd	r24, Z+2	; 0x02
    19b8:	93 81       	ldd	r25, Z+3	; 0x03
    19ba:	a4 81       	ldd	r26, Z+4	; 0x04
    19bc:	b5 81       	ldd	r27, Z+5	; 0x05
    19be:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    19c2:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    19c6:	2a 17       	cp	r18, r26
    19c8:	3b 07       	cpc	r19, r27
    19ca:	69 f7       	brne	.-38     	; 0x19a6 <__vector_7+0x118>
    19cc:	d3 cf       	rjmp	.-90     	; 0x1974 <__vector_7+0xe6>
    19ce:	ff 91       	pop	r31
    19d0:	ef 91       	pop	r30
    19d2:	bf 91       	pop	r27
    19d4:	af 91       	pop	r26
    19d6:	9f 91       	pop	r25
    19d8:	8f 91       	pop	r24
    19da:	7f 91       	pop	r23
    19dc:	6f 91       	pop	r22
    19de:	5f 91       	pop	r21
    19e0:	4f 91       	pop	r20
    19e2:	3f 91       	pop	r19
    19e4:	2f 91       	pop	r18
    19e6:	ff 90       	pop	r15
    19e8:	ef 90       	pop	r14
    19ea:	df 90       	pop	r13
    19ec:	cf 90       	pop	r12
    19ee:	0f 90       	pop	r0
    19f0:	0f be       	out	0x3f, r0	; 63
    19f2:	0f 90       	pop	r0
    19f4:	1f 90       	pop	r1
    19f6:	18 95       	reti

000019f8 <async>:
    19f8:	3f 92       	push	r3
    19fa:	4f 92       	push	r4
    19fc:	5f 92       	push	r5
    19fe:	6f 92       	push	r6
    1a00:	7f 92       	push	r7
    1a02:	8f 92       	push	r8
    1a04:	9f 92       	push	r9
    1a06:	af 92       	push	r10
    1a08:	bf 92       	push	r11
    1a0a:	cf 92       	push	r12
    1a0c:	df 92       	push	r13
    1a0e:	ef 92       	push	r14
    1a10:	ff 92       	push	r15
    1a12:	0f 93       	push	r16
    1a14:	1f 93       	push	r17
    1a16:	cf 93       	push	r28
    1a18:	df 93       	push	r29
    1a1a:	2b 01       	movw	r4, r22
    1a1c:	3c 01       	movw	r6, r24
    1a1e:	49 01       	movw	r8, r18
    1a20:	5a 01       	movw	r10, r20
    1a22:	8f b7       	in	r24, 0x3f	; 63
    1a24:	80 78       	andi	r24, 0x80	; 128
    1a26:	38 2e       	mov	r3, r24
    1a28:	f8 94       	cli
    1a2a:	82 e8       	ldi	r24, 0x82	; 130
    1a2c:	91 e0       	ldi	r25, 0x01	; 1
    1a2e:	0e 94 de 0b 	call	0x17bc	; 0x17bc <dequeue>
    1a32:	ec 01       	movw	r28, r24
    1a34:	1b 87       	std	Y+11, r17	; 0x0b
    1a36:	0a 87       	std	Y+10, r16	; 0x0a
    1a38:	fd 86       	std	Y+13, r15	; 0x0d
    1a3a:	ec 86       	std	Y+12, r14	; 0x0c
    1a3c:	df 86       	std	Y+15, r13	; 0x0f
    1a3e:	ce 86       	std	Y+14, r12	; 0x0e
    1a40:	33 20       	and	r3, r3
    1a42:	61 f0       	breq	.+24     	; 0x1a5c <async+0x64>
    1a44:	e0 91 7c 01 	lds	r30, 0x017C	; 0x80017c <current>
    1a48:	f0 91 7d 01 	lds	r31, 0x017D	; 0x80017d <current+0x1>
    1a4c:	02 80       	ldd	r0, Z+2	; 0x02
    1a4e:	f3 81       	ldd	r31, Z+3	; 0x03
    1a50:	e0 2d       	mov	r30, r0
    1a52:	82 81       	ldd	r24, Z+2	; 0x02
    1a54:	93 81       	ldd	r25, Z+3	; 0x03
    1a56:	a4 81       	ldd	r26, Z+4	; 0x04
    1a58:	b5 81       	ldd	r27, Z+5	; 0x05
    1a5a:	08 c0       	rjmp	.+16     	; 0x1a6c <async+0x74>
    1a5c:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <timestamp>
    1a60:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <timestamp+0x1>
    1a64:	a0 91 90 01 	lds	r26, 0x0190	; 0x800190 <timestamp+0x2>
    1a68:	b0 91 91 01 	lds	r27, 0x0191	; 0x800191 <timestamp+0x3>
    1a6c:	48 0e       	add	r4, r24
    1a6e:	59 1e       	adc	r5, r25
    1a70:	6a 1e       	adc	r6, r26
    1a72:	7b 1e       	adc	r7, r27
    1a74:	4a 82       	std	Y+2, r4	; 0x02
    1a76:	5b 82       	std	Y+3, r5	; 0x03
    1a78:	6c 82       	std	Y+4, r6	; 0x04
    1a7a:	7d 82       	std	Y+5, r7	; 0x05
    1a7c:	18 14       	cp	r1, r8
    1a7e:	19 04       	cpc	r1, r9
    1a80:	1a 04       	cpc	r1, r10
    1a82:	1b 04       	cpc	r1, r11
    1a84:	44 f0       	brlt	.+16     	; 0x1a96 <async+0x9e>
    1a86:	0f 2e       	mov	r0, r31
    1a88:	88 24       	eor	r8, r8
    1a8a:	8a 94       	dec	r8
    1a8c:	98 2c       	mov	r9, r8
    1a8e:	a8 2c       	mov	r10, r8
    1a90:	ff e7       	ldi	r31, 0x7F	; 127
    1a92:	bf 2e       	mov	r11, r31
    1a94:	f0 2d       	mov	r31, r0
    1a96:	84 0c       	add	r8, r4
    1a98:	95 1c       	adc	r9, r5
    1a9a:	a6 1c       	adc	r10, r6
    1a9c:	b7 1c       	adc	r11, r7
    1a9e:	8e 82       	std	Y+6, r8	; 0x06
    1aa0:	9f 82       	std	Y+7, r9	; 0x07
    1aa2:	a8 86       	std	Y+8, r10	; 0x08
    1aa4:	b9 86       	std	Y+9, r11	; 0x09
    1aa6:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <overflows>
    1aaa:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <overflows+0x1>
    1aae:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1ab2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1ab6:	b0 99       	sbic	0x16, 0	; 22
    1ab8:	0e c0       	rjmp	.+28     	; 0x1ad6 <async+0xde>
    1aba:	09 2e       	mov	r0, r25
    1abc:	00 0c       	add	r0, r0
    1abe:	aa 0b       	sbc	r26, r26
    1ac0:	bb 0b       	sbc	r27, r27
    1ac2:	dc 01       	movw	r26, r24
    1ac4:	99 27       	eor	r25, r25
    1ac6:	88 27       	eor	r24, r24
    1ac8:	60 e0       	ldi	r22, 0x00	; 0
    1aca:	70 e0       	ldi	r23, 0x00	; 0
    1acc:	84 2b       	or	r24, r20
    1ace:	95 2b       	or	r25, r21
    1ad0:	a6 2b       	or	r26, r22
    1ad2:	b7 2b       	or	r27, r23
    1ad4:	13 c0       	rjmp	.+38     	; 0x1afc <async+0x104>
    1ad6:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1ada:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1ade:	01 96       	adiw	r24, 0x01	; 1
    1ae0:	09 2e       	mov	r0, r25
    1ae2:	00 0c       	add	r0, r0
    1ae4:	aa 0b       	sbc	r26, r26
    1ae6:	bb 0b       	sbc	r27, r27
    1ae8:	dc 01       	movw	r26, r24
    1aea:	99 27       	eor	r25, r25
    1aec:	88 27       	eor	r24, r24
    1aee:	a9 01       	movw	r20, r18
    1af0:	60 e0       	ldi	r22, 0x00	; 0
    1af2:	70 e0       	ldi	r23, 0x00	; 0
    1af4:	84 2b       	or	r24, r20
    1af6:	95 2b       	or	r25, r21
    1af8:	a6 2b       	or	r26, r22
    1afa:	b7 2b       	or	r27, r23
    1afc:	48 1a       	sub	r4, r24
    1afe:	59 0a       	sbc	r5, r25
    1b00:	6a 0a       	sbc	r6, r26
    1b02:	7b 0a       	sbc	r7, r27
    1b04:	14 14       	cp	r1, r4
    1b06:	15 04       	cpc	r1, r5
    1b08:	16 04       	cpc	r1, r6
    1b0a:	17 04       	cpc	r1, r7
    1b0c:	ac f5       	brge	.+106    	; 0x1b78 <async+0x180>
    1b0e:	62 e9       	ldi	r22, 0x92	; 146
    1b10:	71 e0       	ldi	r23, 0x01	; 1
    1b12:	ce 01       	movw	r24, r28
    1b14:	0e 94 9b 0b 	call	0x1736	; 0x1736 <enqueueByBaseline>
    1b18:	e0 91 92 01 	lds	r30, 0x0192	; 0x800192 <timerQ>
    1b1c:	f0 91 93 01 	lds	r31, 0x0193	; 0x800193 <timerQ+0x1>
    1b20:	30 97       	sbiw	r30, 0x00	; 0
    1b22:	21 f1       	breq	.+72     	; 0x1b6c <async+0x174>
    1b24:	82 81       	ldd	r24, Z+2	; 0x02
    1b26:	93 81       	ldd	r25, Z+3	; 0x03
    1b28:	a4 81       	ldd	r26, Z+4	; 0x04
    1b2a:	b5 81       	ldd	r27, Z+5	; 0x05
    1b2c:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <overflows>
    1b30:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <overflows+0x1>
    1b34:	2a 17       	cp	r18, r26
    1b36:	3b 07       	cpc	r19, r27
    1b38:	c9 f4       	brne	.+50     	; 0x1b6c <async+0x174>
    1b3a:	9c 01       	movw	r18, r24
    1b3c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1b40:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1b44:	84 1b       	sub	r24, r20
    1b46:	95 0b       	sbc	r25, r21
    1b48:	01 97       	sbiw	r24, 0x01	; 1
    1b4a:	31 f4       	brne	.+12     	; 0x1b58 <async+0x160>
    1b4c:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1b50:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1b54:	2f 5f       	subi	r18, 0xFF	; 255
    1b56:	3f 4f       	sbci	r19, 0xFF	; 255
    1b58:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1b5c:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1b60:	ef e6       	ldi	r30, 0x6F	; 111
    1b62:	f0 e0       	ldi	r31, 0x00	; 0
    1b64:	80 81       	ld	r24, Z
    1b66:	82 60       	ori	r24, 0x02	; 2
    1b68:	80 83       	st	Z, r24
    1b6a:	41 c0       	rjmp	.+130    	; 0x1bee <async+0x1f6>
    1b6c:	ef e6       	ldi	r30, 0x6F	; 111
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	80 81       	ld	r24, Z
    1b72:	8d 7f       	andi	r24, 0xFD	; 253
    1b74:	80 83       	st	Z, r24
    1b76:	3b c0       	rjmp	.+118    	; 0x1bee <async+0x1f6>
    1b78:	64 e9       	ldi	r22, 0x94	; 148
    1b7a:	71 e0       	ldi	r23, 0x01	; 1
    1b7c:	ce 01       	movw	r24, r28
    1b7e:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <enqueueByDeadline>
    1b82:	33 20       	and	r3, r3
    1b84:	b9 f1       	breq	.+110    	; 0x1bf4 <async+0x1fc>
    1b86:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <threadPool>
    1b8a:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <threadPool+0x1>
    1b8e:	00 97       	sbiw	r24, 0x00	; 0
    1b90:	81 f1       	breq	.+96     	; 0x1bf2 <async+0x1fa>
    1b92:	e0 91 7e 01 	lds	r30, 0x017E	; 0x80017e <activeStack>
    1b96:	f0 91 7f 01 	lds	r31, 0x017F	; 0x80017f <activeStack+0x1>
    1b9a:	20 91 94 01 	lds	r18, 0x0194	; 0x800194 <msgQ>
    1b9e:	30 91 95 01 	lds	r19, 0x0195	; 0x800195 <msgQ+0x1>
    1ba2:	02 81       	ldd	r16, Z+2	; 0x02
    1ba4:	13 81       	ldd	r17, Z+3	; 0x03
    1ba6:	d9 01       	movw	r26, r18
    1ba8:	16 96       	adiw	r26, 0x06	; 6
    1baa:	4d 91       	ld	r20, X+
    1bac:	5d 91       	ld	r21, X+
    1bae:	6d 91       	ld	r22, X+
    1bb0:	7c 91       	ld	r23, X
    1bb2:	19 97       	sbiw	r26, 0x09	; 9
    1bb4:	d8 01       	movw	r26, r16
    1bb6:	16 96       	adiw	r26, 0x06	; 6
    1bb8:	0d 91       	ld	r16, X+
    1bba:	1d 91       	ld	r17, X+
    1bbc:	2d 91       	ld	r18, X+
    1bbe:	3c 91       	ld	r19, X
    1bc0:	19 97       	sbiw	r26, 0x09	; 9
    1bc2:	40 1b       	sub	r20, r16
    1bc4:	51 0b       	sbc	r21, r17
    1bc6:	62 0b       	sbc	r22, r18
    1bc8:	73 0b       	sbc	r23, r19
    1bca:	9a f4       	brpl	.+38     	; 0x1bf2 <async+0x1fa>
    1bcc:	dc 01       	movw	r26, r24
    1bce:	2d 91       	ld	r18, X+
    1bd0:	3c 91       	ld	r19, X
    1bd2:	11 97       	sbiw	r26, 0x01	; 1
    1bd4:	30 93 81 01 	sts	0x0181, r19	; 0x800181 <threadPool+0x1>
    1bd8:	20 93 80 01 	sts	0x0180, r18	; 0x800180 <threadPool>
    1bdc:	ed 93       	st	X+, r30
    1bde:	fc 93       	st	X, r31
    1be0:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <activeStack+0x1>
    1be4:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <activeStack>
    1be8:	0e 94 65 03 	call	0x6ca	; 0x6ca <dispatch>
    1bec:	02 c0       	rjmp	.+4      	; 0x1bf2 <async+0x1fa>
    1bee:	33 20       	and	r3, r3
    1bf0:	09 f0       	breq	.+2      	; 0x1bf4 <async+0x1fc>
    1bf2:	78 94       	sei
    1bf4:	ce 01       	movw	r24, r28
    1bf6:	df 91       	pop	r29
    1bf8:	cf 91       	pop	r28
    1bfa:	1f 91       	pop	r17
    1bfc:	0f 91       	pop	r16
    1bfe:	ff 90       	pop	r15
    1c00:	ef 90       	pop	r14
    1c02:	df 90       	pop	r13
    1c04:	cf 90       	pop	r12
    1c06:	bf 90       	pop	r11
    1c08:	af 90       	pop	r10
    1c0a:	9f 90       	pop	r9
    1c0c:	8f 90       	pop	r8
    1c0e:	7f 90       	pop	r7
    1c10:	6f 90       	pop	r6
    1c12:	5f 90       	pop	r5
    1c14:	4f 90       	pop	r4
    1c16:	3f 90       	pop	r3
    1c18:	08 95       	ret

00001c1a <sync>:
    1c1a:	cf 92       	push	r12
    1c1c:	df 92       	push	r13
    1c1e:	ef 92       	push	r14
    1c20:	ff 92       	push	r15
    1c22:	0f 93       	push	r16
    1c24:	1f 93       	push	r17
    1c26:	cf 93       	push	r28
    1c28:	df 93       	push	r29
    1c2a:	ec 01       	movw	r28, r24
    1c2c:	7b 01       	movw	r14, r22
    1c2e:	6a 01       	movw	r12, r20
    1c30:	1f b7       	in	r17, 0x3f	; 63
    1c32:	10 78       	andi	r17, 0x80	; 128
    1c34:	f8 94       	cli
    1c36:	a8 81       	ld	r26, Y
    1c38:	b9 81       	ldd	r27, Y+1	; 0x01
    1c3a:	10 97       	sbiw	r26, 0x00	; 0
    1c3c:	61 f1       	breq	.+88     	; 0x1c96 <sync+0x7c>
    1c3e:	14 96       	adiw	r26, 0x04	; 4
    1c40:	ed 91       	ld	r30, X+
    1c42:	fc 91       	ld	r31, X
    1c44:	15 97       	sbiw	r26, 0x05	; 5
    1c46:	30 97       	sbiw	r30, 0x00	; 0
    1c48:	41 f0       	breq	.+16     	; 0x1c5a <sync+0x40>
    1c4a:	a0 81       	ld	r26, Z
    1c4c:	b1 81       	ldd	r27, Z+1	; 0x01
    1c4e:	14 96       	adiw	r26, 0x04	; 4
    1c50:	ed 91       	ld	r30, X+
    1c52:	fc 91       	ld	r31, X
    1c54:	15 97       	sbiw	r26, 0x05	; 5
    1c56:	30 97       	sbiw	r30, 0x00	; 0
    1c58:	c1 f7       	brne	.-16     	; 0x1c4a <sync+0x30>
    1c5a:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <current>
    1c5e:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <current+0x1>
    1c62:	2a 17       	cp	r18, r26
    1c64:	3b 07       	cpc	r19, r27
    1c66:	21 f0       	breq	.+8      	; 0x1c70 <sync+0x56>
    1c68:	11 23       	and	r17, r17
    1c6a:	09 f4       	brne	.+2      	; 0x1c6e <sync+0x54>
    1c6c:	3d c0       	rjmp	.+122    	; 0x1ce8 <sync+0xce>
    1c6e:	07 c0       	rjmp	.+14     	; 0x1c7e <sync+0x64>
    1c70:	11 23       	and	r17, r17
    1c72:	09 f4       	brne	.+2      	; 0x1c76 <sync+0x5c>
    1c74:	3c c0       	rjmp	.+120    	; 0x1cee <sync+0xd4>
    1c76:	78 94       	sei
    1c78:	8f ef       	ldi	r24, 0xFF	; 255
    1c7a:	9f ef       	ldi	r25, 0xFF	; 255
    1c7c:	52 c0       	rjmp	.+164    	; 0x1d22 <sync+0x108>
    1c7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c80:	9b 81       	ldd	r25, Y+3	; 0x03
    1c82:	00 97       	sbiw	r24, 0x00	; 0
    1c84:	d1 f1       	breq	.+116    	; 0x1cfa <sync+0xe0>
    1c86:	fc 01       	movw	r30, r24
    1c88:	15 82       	std	Z+5, r1	; 0x05
    1c8a:	14 82       	std	Z+4, r1	; 0x04
    1c8c:	36 c0       	rjmp	.+108    	; 0x1cfa <sync+0xe0>
    1c8e:	78 94       	sei
    1c90:	80 e0       	ldi	r24, 0x00	; 0
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	46 c0       	rjmp	.+140    	; 0x1d22 <sync+0x108>
    1c96:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <current>
    1c9a:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <current+0x1>
    1c9e:	99 83       	std	Y+1, r25	; 0x01
    1ca0:	88 83       	st	Y, r24
    1ca2:	11 23       	and	r17, r17
    1ca4:	29 f0       	breq	.+10     	; 0x1cb0 <sync+0x96>
    1ca6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca8:	9b 81       	ldd	r25, Y+3	; 0x03
    1caa:	01 97       	sbiw	r24, 0x01	; 1
    1cac:	09 f0       	breq	.+2      	; 0x1cb0 <sync+0x96>
    1cae:	78 94       	sei
    1cb0:	b6 01       	movw	r22, r12
    1cb2:	ce 01       	movw	r24, r28
    1cb4:	f7 01       	movw	r30, r14
    1cb6:	09 95       	icall
    1cb8:	f8 2e       	mov	r15, r24
    1cba:	09 2f       	mov	r16, r25
    1cbc:	8f b7       	in	r24, 0x3f	; 63
    1cbe:	f8 94       	cli
    1cc0:	19 82       	std	Y+1, r1	; 0x01
    1cc2:	18 82       	st	Y, r1
    1cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc6:	9b 81       	ldd	r25, Y+3	; 0x03
    1cc8:	82 30       	cpi	r24, 0x02	; 2
    1cca:	91 05       	cpc	r25, r1
    1ccc:	38 f0       	brcs	.+14     	; 0x1cdc <sync+0xc2>
    1cce:	1b 82       	std	Y+3, r1	; 0x03
    1cd0:	1a 82       	std	Y+2, r1	; 0x02
    1cd2:	fc 01       	movw	r30, r24
    1cd4:	15 82       	std	Z+5, r1	; 0x05
    1cd6:	14 82       	std	Z+4, r1	; 0x04
    1cd8:	0e 94 65 03 	call	0x6ca	; 0x6ca <dispatch>
    1cdc:	11 23       	and	r17, r17
    1cde:	51 f0       	breq	.+20     	; 0x1cf4 <sync+0xda>
    1ce0:	78 94       	sei
    1ce2:	8f 2d       	mov	r24, r15
    1ce4:	90 2f       	mov	r25, r16
    1ce6:	1d c0       	rjmp	.+58     	; 0x1d22 <sync+0x108>
    1ce8:	8f ef       	ldi	r24, 0xFF	; 255
    1cea:	9f ef       	ldi	r25, 0xFF	; 255
    1cec:	1a c0       	rjmp	.+52     	; 0x1d22 <sync+0x108>
    1cee:	8f ef       	ldi	r24, 0xFF	; 255
    1cf0:	9f ef       	ldi	r25, 0xFF	; 255
    1cf2:	17 c0       	rjmp	.+46     	; 0x1d22 <sync+0x108>
    1cf4:	8f 2d       	mov	r24, r15
    1cf6:	90 2f       	mov	r25, r16
    1cf8:	14 c0       	rjmp	.+40     	; 0x1d22 <sync+0x108>
    1cfa:	3b 83       	std	Y+3, r19	; 0x03
    1cfc:	2a 83       	std	Y+2, r18	; 0x02
    1cfe:	f9 01       	movw	r30, r18
    1d00:	d5 83       	std	Z+5, r29	; 0x05
    1d02:	c4 83       	std	Z+4, r28	; 0x04
    1d04:	cd 01       	movw	r24, r26
    1d06:	0e 94 65 03 	call	0x6ca	; 0x6ca <dispatch>
    1d0a:	e0 91 7c 01 	lds	r30, 0x017C	; 0x80017c <current>
    1d0e:	f0 91 7d 01 	lds	r31, 0x017D	; 0x80017d <current+0x1>
    1d12:	82 81       	ldd	r24, Z+2	; 0x02
    1d14:	93 81       	ldd	r25, Z+3	; 0x03
    1d16:	89 2b       	or	r24, r25
    1d18:	09 f4       	brne	.+2      	; 0x1d1c <sync+0x102>
    1d1a:	b9 cf       	rjmp	.-142    	; 0x1c8e <sync+0x74>
    1d1c:	f9 83       	std	Y+1, r31	; 0x01
    1d1e:	e8 83       	st	Y, r30
    1d20:	c2 cf       	rjmp	.-124    	; 0x1ca6 <sync+0x8c>
    1d22:	df 91       	pop	r29
    1d24:	cf 91       	pop	r28
    1d26:	1f 91       	pop	r17
    1d28:	0f 91       	pop	r16
    1d2a:	ff 90       	pop	r15
    1d2c:	ef 90       	pop	r14
    1d2e:	df 90       	pop	r13
    1d30:	cf 90       	pop	r12
    1d32:	08 95       	ret

00001d34 <run>:
    1d34:	00 91 7c 01 	lds	r16, 0x017C	; 0x80017c <current>
    1d38:	10 91 7d 01 	lds	r17, 0x017D	; 0x80017d <current+0x1>
    1d3c:	84 e9       	ldi	r24, 0x94	; 148
    1d3e:	91 e0       	ldi	r25, 0x01	; 1
    1d40:	0e 94 de 0b 	call	0x17bc	; 0x17bc <dequeue>
    1d44:	ec 01       	movw	r28, r24
    1d46:	d8 01       	movw	r26, r16
    1d48:	13 96       	adiw	r26, 0x03	; 3
    1d4a:	9c 93       	st	X, r25
    1d4c:	8e 93       	st	-X, r24
    1d4e:	12 97       	sbiw	r26, 0x02	; 2
    1d50:	78 94       	sei
    1d52:	4e 85       	ldd	r20, Y+14	; 0x0e
    1d54:	5f 85       	ldd	r21, Y+15	; 0x0f
    1d56:	6c 85       	ldd	r22, Y+12	; 0x0c
    1d58:	7d 85       	ldd	r23, Y+13	; 0x0d
    1d5a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d5c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d5e:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <sync>
    1d62:	8f b7       	in	r24, 0x3f	; 63
    1d64:	f8 94       	cli
    1d66:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <msgPool>
    1d6a:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <msgPool+0x1>
    1d6e:	99 83       	std	Y+1, r25	; 0x01
    1d70:	88 83       	st	Y, r24
    1d72:	d0 93 83 01 	sts	0x0183, r29	; 0x800183 <msgPool+0x1>
    1d76:	c0 93 82 01 	sts	0x0182, r28	; 0x800182 <msgPool>
    1d7a:	e0 91 7e 01 	lds	r30, 0x017E	; 0x80017e <activeStack>
    1d7e:	f0 91 7f 01 	lds	r31, 0x017F	; 0x80017f <activeStack+0x1>
    1d82:	00 81       	ld	r16, Z
    1d84:	11 81       	ldd	r17, Z+1	; 0x01
    1d86:	e8 01       	movw	r28, r16
    1d88:	2a 81       	ldd	r18, Y+2	; 0x02
    1d8a:	3b 81       	ldd	r19, Y+3	; 0x03
    1d8c:	a0 91 94 01 	lds	r26, 0x0194	; 0x800194 <msgQ>
    1d90:	b0 91 95 01 	lds	r27, 0x0195	; 0x800195 <msgQ+0x1>
    1d94:	10 97       	sbiw	r26, 0x00	; 0
    1d96:	c1 f0       	breq	.+48     	; 0x1dc8 <run+0x94>
    1d98:	21 15       	cp	r18, r1
    1d9a:	31 05       	cpc	r19, r1
    1d9c:	59 f2       	breq	.-106    	; 0x1d34 <run>
    1d9e:	16 96       	adiw	r26, 0x06	; 6
    1da0:	8d 91       	ld	r24, X+
    1da2:	9d 91       	ld	r25, X+
    1da4:	0d 90       	ld	r0, X+
    1da6:	bc 91       	ld	r27, X
    1da8:	a0 2d       	mov	r26, r0
    1daa:	e9 01       	movw	r28, r18
    1dac:	4e 81       	ldd	r20, Y+6	; 0x06
    1dae:	5f 81       	ldd	r21, Y+7	; 0x07
    1db0:	68 85       	ldd	r22, Y+8	; 0x08
    1db2:	79 85       	ldd	r23, Y+9	; 0x09
    1db4:	84 1b       	sub	r24, r20
    1db6:	95 0b       	sbc	r25, r21
    1db8:	a6 0b       	sbc	r26, r22
    1dba:	b7 0b       	sbc	r27, r23
    1dbc:	18 16       	cp	r1, r24
    1dbe:	19 06       	cpc	r1, r25
    1dc0:	1a 06       	cpc	r1, r26
    1dc2:	1b 06       	cpc	r1, r27
    1dc4:	0c f0       	brlt	.+2      	; 0x1dc8 <run+0x94>
    1dc6:	b6 cf       	rjmp	.-148    	; 0x1d34 <run>
    1dc8:	10 93 7f 01 	sts	0x017F, r17	; 0x80017f <activeStack+0x1>
    1dcc:	00 93 7e 01 	sts	0x017E, r16	; 0x80017e <activeStack>
    1dd0:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <threadPool>
    1dd4:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <threadPool+0x1>
    1dd8:	91 83       	std	Z+1, r25	; 0x01
    1dda:	80 83       	st	Z, r24
    1ddc:	f0 93 81 01 	sts	0x0181, r31	; 0x800181 <threadPool+0x1>
    1de0:	e0 93 80 01 	sts	0x0180, r30	; 0x800180 <threadPool>
    1de4:	a0 91 7e 01 	lds	r26, 0x017E	; 0x80017e <activeStack>
    1de8:	b0 91 7f 01 	lds	r27, 0x017F	; 0x80017f <activeStack+0x1>
    1dec:	14 96       	adiw	r26, 0x04	; 4
    1dee:	ed 91       	ld	r30, X+
    1df0:	fc 91       	ld	r31, X
    1df2:	15 97       	sbiw	r26, 0x05	; 5
    1df4:	30 97       	sbiw	r30, 0x00	; 0
    1df6:	41 f0       	breq	.+16     	; 0x1e08 <run+0xd4>
    1df8:	a0 81       	ld	r26, Z
    1dfa:	b1 81       	ldd	r27, Z+1	; 0x01
    1dfc:	14 96       	adiw	r26, 0x04	; 4
    1dfe:	ed 91       	ld	r30, X+
    1e00:	fc 91       	ld	r31, X
    1e02:	15 97       	sbiw	r26, 0x05	; 5
    1e04:	30 97       	sbiw	r30, 0x00	; 0
    1e06:	c1 f7       	brne	.-16     	; 0x1df8 <run+0xc4>
    1e08:	cd 01       	movw	r24, r26
    1e0a:	0e 94 65 03 	call	0x6ca	; 0x6ca <dispatch>
    1e0e:	92 cf       	rjmp	.-220    	; 0x1d34 <run>

00001e10 <install>:
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    if (i >= 0 && i < N_VECTORS) {
    1e10:	42 31       	cpi	r20, 0x12	; 18
    1e12:	b8 f4       	brcc	.+46     	; 0x1e42 <install+0x32>
        char status;
        DISABLE(status);
    1e14:	2f b7       	in	r18, 0x3f	; 63
    1e16:	f8 94       	cli
        otable[i] = obj;
    1e18:	50 e0       	ldi	r21, 0x00	; 0
    1e1a:	44 0f       	add	r20, r20
    1e1c:	55 1f       	adc	r21, r21
    1e1e:	fa 01       	movw	r30, r20
    1e20:	ea 56       	subi	r30, 0x6A	; 106
    1e22:	fe 4f       	sbci	r31, 0xFE	; 254
    1e24:	91 83       	std	Z+1, r25	; 0x01
    1e26:	80 83       	st	Z, r24
        mtable[i] = m;
    1e28:	fa 01       	movw	r30, r20
    1e2a:	e2 5d       	subi	r30, 0xD2	; 210
    1e2c:	fd 4f       	sbci	r31, 0xFD	; 253
    1e2e:	71 83       	std	Z+1, r23	; 0x01
    1e30:	60 83       	st	Z, r22
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    1e32:	41 e0       	ldi	r20, 0x01	; 1
    1e34:	50 e0       	ldi	r21, 0x00	; 0
    1e36:	fc 01       	movw	r30, r24
    1e38:	53 83       	std	Z+3, r21	; 0x03
    1e3a:	42 83       	std	Z+2, r20	; 0x02
        ENABLE(status);
    1e3c:	22 23       	and	r18, r18
    1e3e:	0c f4       	brge	.+2      	; 0x1e42 <install+0x32>
    1e40:	78 94       	sei
    1e42:	08 95       	ret

00001e44 <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    1e44:	8c 01       	movw	r16, r24
    1e46:	7b 01       	movw	r14, r22
    1e48:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    1e4a:	8f b7       	in	r24, 0x3f	; 63
    1e4c:	f8 94       	cli
    initialize();
    1e4e:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <initialize>
    ENABLE(1);
    1e52:	78 94       	sei
    if (m != NULL)
    1e54:	e1 14       	cp	r14, r1
    1e56:	f1 04       	cpc	r15, r1
    1e58:	41 f0       	breq	.+16     	; 0x1e6a <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    1e5a:	20 e0       	ldi	r18, 0x00	; 0
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	a9 01       	movw	r20, r18
    1e60:	60 e0       	ldi	r22, 0x00	; 0
    1e62:	70 e0       	ldi	r23, 0x00	; 0
    1e64:	cb 01       	movw	r24, r22
    1e66:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <async>
    DISABLE(status);
    1e6a:	8f b7       	in	r24, 0x3f	; 63
    1e6c:	f8 94       	cli
        }
    }
}

static void idle(void) {
    schedule();
    1e6e:	0e 94 85 03 	call	0x70a	; 0x70a <schedule>
    ENABLE(1);
    1e72:	78 94       	sei
    while (1) {
        SLEEP();
    1e74:	81 e0       	ldi	r24, 0x01	; 1
    1e76:	83 bf       	out	0x33, r24	; 51
    1e78:	88 95       	sleep
    1e7a:	fd cf       	rjmp	.-6      	; 0x1e76 <tinytimber+0x32>

00001e7c <__divmodsi4>:
    1e7c:	05 2e       	mov	r0, r21
    1e7e:	97 fb       	bst	r25, 7
    1e80:	1e f4       	brtc	.+6      	; 0x1e88 <__divmodsi4+0xc>
    1e82:	00 94       	com	r0
    1e84:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__negsi2>
    1e88:	57 fd       	sbrc	r21, 7
    1e8a:	07 d0       	rcall	.+14     	; 0x1e9a <__divmodsi4_neg2>
    1e8c:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <__udivmodsi4>
    1e90:	07 fc       	sbrc	r0, 7
    1e92:	03 d0       	rcall	.+6      	; 0x1e9a <__divmodsi4_neg2>
    1e94:	4e f4       	brtc	.+18     	; 0x1ea8 <__divmodsi4_exit>
    1e96:	0c 94 55 0f 	jmp	0x1eaa	; 0x1eaa <__negsi2>

00001e9a <__divmodsi4_neg2>:
    1e9a:	50 95       	com	r21
    1e9c:	40 95       	com	r20
    1e9e:	30 95       	com	r19
    1ea0:	21 95       	neg	r18
    1ea2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ea4:	4f 4f       	sbci	r20, 0xFF	; 255
    1ea6:	5f 4f       	sbci	r21, 0xFF	; 255

00001ea8 <__divmodsi4_exit>:
    1ea8:	08 95       	ret

00001eaa <__negsi2>:
    1eaa:	90 95       	com	r25
    1eac:	80 95       	com	r24
    1eae:	70 95       	com	r23
    1eb0:	61 95       	neg	r22
    1eb2:	7f 4f       	sbci	r23, 0xFF	; 255
    1eb4:	8f 4f       	sbci	r24, 0xFF	; 255
    1eb6:	9f 4f       	sbci	r25, 0xFF	; 255
    1eb8:	08 95       	ret

00001eba <__tablejump2__>:
    1eba:	ee 0f       	add	r30, r30
    1ebc:	ff 1f       	adc	r31, r31
    1ebe:	05 90       	lpm	r0, Z+
    1ec0:	f4 91       	lpm	r31, Z
    1ec2:	e0 2d       	mov	r30, r0
    1ec4:	09 94       	ijmp

00001ec6 <__udivmodsi4>:
    1ec6:	a1 e2       	ldi	r26, 0x21	; 33
    1ec8:	1a 2e       	mov	r1, r26
    1eca:	aa 1b       	sub	r26, r26
    1ecc:	bb 1b       	sub	r27, r27
    1ece:	fd 01       	movw	r30, r26
    1ed0:	0d c0       	rjmp	.+26     	; 0x1eec <__udivmodsi4_ep>

00001ed2 <__udivmodsi4_loop>:
    1ed2:	aa 1f       	adc	r26, r26
    1ed4:	bb 1f       	adc	r27, r27
    1ed6:	ee 1f       	adc	r30, r30
    1ed8:	ff 1f       	adc	r31, r31
    1eda:	a2 17       	cp	r26, r18
    1edc:	b3 07       	cpc	r27, r19
    1ede:	e4 07       	cpc	r30, r20
    1ee0:	f5 07       	cpc	r31, r21
    1ee2:	20 f0       	brcs	.+8      	; 0x1eec <__udivmodsi4_ep>
    1ee4:	a2 1b       	sub	r26, r18
    1ee6:	b3 0b       	sbc	r27, r19
    1ee8:	e4 0b       	sbc	r30, r20
    1eea:	f5 0b       	sbc	r31, r21

00001eec <__udivmodsi4_ep>:
    1eec:	66 1f       	adc	r22, r22
    1eee:	77 1f       	adc	r23, r23
    1ef0:	88 1f       	adc	r24, r24
    1ef2:	99 1f       	adc	r25, r25
    1ef4:	1a 94       	dec	r1
    1ef6:	69 f7       	brne	.-38     	; 0x1ed2 <__udivmodsi4_loop>
    1ef8:	60 95       	com	r22
    1efa:	70 95       	com	r23
    1efc:	80 95       	com	r24
    1efe:	90 95       	com	r25
    1f00:	9b 01       	movw	r18, r22
    1f02:	ac 01       	movw	r20, r24
    1f04:	bd 01       	movw	r22, r26
    1f06:	cf 01       	movw	r24, r30
    1f08:	08 95       	ret

00001f0a <setjmp>:
    1f0a:	dc 01       	movw	r26, r24
    1f0c:	2d 92       	st	X+, r2
    1f0e:	3d 92       	st	X+, r3
    1f10:	4d 92       	st	X+, r4
    1f12:	5d 92       	st	X+, r5
    1f14:	6d 92       	st	X+, r6
    1f16:	7d 92       	st	X+, r7
    1f18:	8d 92       	st	X+, r8
    1f1a:	9d 92       	st	X+, r9
    1f1c:	ad 92       	st	X+, r10
    1f1e:	bd 92       	st	X+, r11
    1f20:	cd 92       	st	X+, r12
    1f22:	dd 92       	st	X+, r13
    1f24:	ed 92       	st	X+, r14
    1f26:	fd 92       	st	X+, r15
    1f28:	0d 93       	st	X+, r16
    1f2a:	1d 93       	st	X+, r17
    1f2c:	cd 93       	st	X+, r28
    1f2e:	dd 93       	st	X+, r29
    1f30:	ff 91       	pop	r31
    1f32:	ef 91       	pop	r30
    1f34:	8d b7       	in	r24, 0x3d	; 61
    1f36:	8d 93       	st	X+, r24
    1f38:	8e b7       	in	r24, 0x3e	; 62
    1f3a:	8d 93       	st	X+, r24
    1f3c:	8f b7       	in	r24, 0x3f	; 63
    1f3e:	8d 93       	st	X+, r24
    1f40:	ed 93       	st	X+, r30
    1f42:	fd 93       	st	X+, r31
    1f44:	88 27       	eor	r24, r24
    1f46:	99 27       	eor	r25, r25
    1f48:	09 94       	ijmp

00001f4a <longjmp>:
    1f4a:	dc 01       	movw	r26, r24
    1f4c:	cb 01       	movw	r24, r22
    1f4e:	81 30       	cpi	r24, 0x01	; 1
    1f50:	91 05       	cpc	r25, r1
    1f52:	81 1d       	adc	r24, r1
    1f54:	2d 90       	ld	r2, X+
    1f56:	3d 90       	ld	r3, X+
    1f58:	4d 90       	ld	r4, X+
    1f5a:	5d 90       	ld	r5, X+
    1f5c:	6d 90       	ld	r6, X+
    1f5e:	7d 90       	ld	r7, X+
    1f60:	8d 90       	ld	r8, X+
    1f62:	9d 90       	ld	r9, X+
    1f64:	ad 90       	ld	r10, X+
    1f66:	bd 90       	ld	r11, X+
    1f68:	cd 90       	ld	r12, X+
    1f6a:	dd 90       	ld	r13, X+
    1f6c:	ed 90       	ld	r14, X+
    1f6e:	fd 90       	ld	r15, X+
    1f70:	0d 91       	ld	r16, X+
    1f72:	1d 91       	ld	r17, X+
    1f74:	cd 91       	ld	r28, X+
    1f76:	dd 91       	ld	r29, X+
    1f78:	ed 91       	ld	r30, X+
    1f7a:	fd 91       	ld	r31, X+
    1f7c:	0d 90       	ld	r0, X+
    1f7e:	f8 94       	cli
    1f80:	fe bf       	out	0x3e, r31	; 62
    1f82:	0f be       	out	0x3f, r0	; 63
    1f84:	ed bf       	out	0x3d, r30	; 61
    1f86:	ed 91       	ld	r30, X+
    1f88:	fd 91       	ld	r31, X+
    1f8a:	09 94       	ijmp

00001f8c <_exit>:
    1f8c:	f8 94       	cli

00001f8e <__stop_program>:
    1f8e:	ff cf       	rjmp	.-2      	; 0x1f8e <__stop_program>
